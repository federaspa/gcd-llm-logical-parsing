[
  {
    "id": 1126,
    "question": "Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine))\n\"\"\""
    ]
  },
  {
    "id": 1127,
    "question": "Rina eith doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WantToBeAddictedTo(rina, caffeine) ⊕ ¬AwareThatDrug(rina, caffeine)\n\"\"\""
    ]
  },
  {
    "id": 1128,
    "question": "Rina either regularly drinks coffee or is unaware that caffeine is a drug.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDrinkRegularly(rina, coffee)  ⊕ IsUnawareThatCaffeineIsADrug(rina)\n\"\"\""
    ]
  },
  {
    "id": 1129,
    "question": "If Rina either doesn't want to be addicted to caffeine and is unaware that caffeine is a drug, or neither doesn't want to be addicted to caffeine nor is unaware that caffeine is a drug, then Rina doesn't want to be addicted to caffeine and regularly drinks coffee.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))\n∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))\n∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))\n¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))\n¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(DoNotWantToBeAddictedToCaffeine(rina) ⊕ ¬AwareThatDrug(rina, caffeine)) → ¬(¬WantToBeAddictedTo(rina, caffeine) ∧ DrinkRegularly(rina, coffee))\n\"\"\""
    ]
  },
  {
    "id": 20,
    "question": "Miroslav Venhoda loved music.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)\n∀x (ChoralConductor(x) → Musician(x))\n∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))\nPublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLove(miroslav, music)\n\"\"\""
    ]
  },
  {
    "id": 21,
    "question": "A Czech published a book in 1946.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)\n∀x (ChoralConductor(x) → Musician(x))\n∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))\nPublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Czech(x) ∧ PublishedBook(x, y, year1946))\n\"\"\""
    ]
  },
  {
    "id": 22,
    "question": "No choral conductor specialized in the performance of Renaissance.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)\n∀x (ChoralConductor(x) → Musician(x))\n∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))\nPublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (ChoralConductor(x) → ¬SpecializeInPerformanceOf(x, renaissanceMusic))\n\"\"\""
    ]
  },
  {
    "id": 1336,
    "question": "The sea eel is an eel.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Eel(x) → Fish(x))\n∀x (Fish(x) → ¬Plant(x))\n∀x (DisplayedIn(x, collection) → Plant(x) ⊕ Animal(x))\n∀x (Multicellular(x) → ¬Bacteria(x))\n∀x (DisplayedIn(x, collection) ∧ Animal(x) → Multicellular(x))\nDisplayedIn(seaEel, collection)\nEel(seaEel) ∨ Animal(seaEel) ∨ ¬Plant(seaEel)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEel(seaEel)\n\"\"\""
    ]
  },
  {
    "id": 1337,
    "question": "The sea eel is bacteria.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Eel(x) → Fish(x))\n∀x (Fish(x) → ¬Plant(x))\n∀x (DisplayedIn(x, collection) → Plant(x) ⊕ Animal(x))\n∀x (Multicellular(x) → ¬Bacteria(x))\n∀x (DisplayedIn(x, collection) ∧ Animal(x) → Multicellular(x))\nDisplayedIn(seaEel, collection)\nEel(seaEel) ∨ Animal(seaEel) ∨ ¬Plant(seaEel)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBacteria(seaEel)\n\"\"\""
    ]
  },
  {
    "id": 1338,
    "question": "The sea eel is multicellular or is bacteria.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Eel(x) → Fish(x))\n∀x (Fish(x) → ¬Plant(x))\n∀x (DisplayedIn(x, collection) → Plant(x) ⊕ Animal(x))\n∀x (Multicellular(x) → ¬Bacteria(x))\n∀x (DisplayedIn(x, collection) ∧ Animal(x) → Multicellular(x))\nDisplayedIn(seaEel, collection)\nEel(seaEel) ∨ Animal(seaEel) ∨ ¬Plant(seaEel)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMulticellular(seaEel) ∨ Bacteria(seaEel)\n\"\"\""
    ]
  },
  {
    "id": 392,
    "question": "A five-story building is built in 1915.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBuilding(blakeMcFallCompanyBuilding) ∧ AddedToIn(blakeMcFallCompanyBuilding, theNationalRegisterOfHistoricPlaces, year1990)\nBuilding(emmetBuilding) ∧ Five-Story(emmetBuilding) ∧ LocatedIn(emmetBuilding, portland) ∧ LocatedIn(portland, oregon))\nBuiltIn(emmetBuilding, year1915)\nemmetBuiling=blakeMcFallCompanyBuilding\nWorkAt(john, emmetBuilding)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Building(x) ∧ Five-Story(x) ∧ ConstructedIn(x, year1915))\n\"\"\""
    ]
  },
  {
    "id": 393,
    "question": "The Blake McFall Company Building is located in Portland, Oregon.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBuilding(blakeMcFallCompanyBuilding) ∧ AddedToIn(blakeMcFallCompanyBuilding, theNationalRegisterOfHistoricPlaces, year1990)\nBuilding(emmetBuilding) ∧ Five-Story(emmetBuilding) ∧ LocatedIn(emmetBuilding, portland) ∧ LocatedIn(portland, oregon))\nBuiltIn(emmetBuilding, year1915)\nemmetBuiling=blakeMcFallCompanyBuilding\nWorkAt(john, emmetBuilding)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLocatedIn(blakeMcFallCompanyBuilding, portland)\n\"\"\""
    ]
  },
  {
    "id": 394,
    "question": "John started his current job in 1990.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBuilding(blakeMcFallCompanyBuilding) ∧ AddedToIn(blakeMcFallCompanyBuilding, theNationalRegisterOfHistoricPlaces, year1990)\nBuilding(emmetBuilding) ∧ Five-Story(emmetBuilding) ∧ LocatedIn(emmetBuilding, portland) ∧ LocatedIn(portland, oregon))\nBuiltIn(emmetBuilding, year1915)\nemmetBuiling=blakeMcFallCompanyBuilding\nWorkAt(john, emmetBuilding)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStartCurrentJobIn(john, year1990)\n\"\"\""
    ]
  },
  {
    "id": 636,
    "question": "William Dickinson did not get a seat in Parliament.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(williamDickinson) ∧ Politician(williamDickinson) ∧ SatIn(williamDickinson, houseOfCommons)\nAttended(williamDickinson, westminsterSchool) ∧ Highschool(westminsterSchool) ∧ Attended(williamDickinson, universityOfEdinburgh)\nUniversity(universityOfEdinburgh) ∧ LocatedIn(universityOfEdinburgh, unitedKingdom)\nSupported(williamDickinson, portlandWhigs)\n∀x (Supported(x, portlandWhigs) → ¬SatIn(x, parliament))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSatIn(williamDickinson, parliament)\n\"\"\""
    ]
  },
  {
    "id": 637,
    "question": "William Dickinson went to schools located in the United Kingdom for both high school and university.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(williamDickinson) ∧ Politician(williamDickinson) ∧ SatIn(williamDickinson, houseOfCommons)\nAttended(williamDickinson, westminsterSchool) ∧ Highschool(westminsterSchool) ∧ Attended(williamDickinson, universityOfEdinburgh)\nUniversity(universityOfEdinburgh) ∧ LocatedIn(universityOfEdinburgh, unitedKingdom)\nSupported(williamDickinson, portlandWhigs)\n∀x (Supported(x, portlandWhigs) → ¬SatIn(x, parliament))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Attended(williamDickinson, x) ∧ Highschool(x) ∧ LocatedIn(x, unitedKingdom) ∧ Attended(williamDickinson, y) ∧ University(y) ∧ LocatedIn(y, unitedKingdom))\n\"\"\""
    ]
  },
  {
    "id": 638,
    "question": "William Dickinson attended university in the United Kingdom.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(williamDickinson) ∧ Politician(williamDickinson) ∧ SatIn(williamDickinson, houseOfCommons)\nAttended(williamDickinson, westminsterSchool) ∧ Highschool(westminsterSchool) ∧ Attended(williamDickinson, universityOfEdinburgh)\nUniversity(universityOfEdinburgh) ∧ LocatedIn(universityOfEdinburgh, unitedKingdom)\nSupported(williamDickinson, portlandWhigs)\n∀x (Supported(x, portlandWhigs) → ¬SatIn(x, parliament))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Attended(williamDickinson, x) ∧ University(x) ∧ LocatedIn(x, unitedKingdom))\n\"\"\""
    ]
  },
  {
    "id": 639,
    "question": "William Dickinson sat in the House of Commons.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(williamDickinson) ∧ Politician(williamDickinson) ∧ SatIn(williamDickinson, houseOfCommons)\nAttended(williamDickinson, westminsterSchool) ∧ Highschool(westminsterSchool) ∧ Attended(williamDickinson, universityOfEdinburgh)\nUniversity(universityOfEdinburgh) ∧ LocatedIn(universityOfEdinburgh, unitedKingdom)\nSupported(williamDickinson, portlandWhigs)\n∀x (Supported(x, portlandWhigs) → ¬SatIn(x, parliament))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSatIn(williamDickinson, houseOfCommons)\n\"\"\""
    ]
  },
  {
    "id": 690,
    "question": "Danil knows LanguageA.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nUniversalLanguage(languageA)\n∀x ∀y (∃z (¬(x=y) ∧ Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → CanCommunicateWith(x, y) ∧ CanCommunicateWith(y, x))\n¬CanCommunicateWith(katya, danil)\nKnow(katya, languageA)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKnow(danil, languageA)\n\"\"\""
    ]
  },
  {
    "id": 1192,
    "question": "Lily goes to cinemas every week.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))\n∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))\n∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))\nCustomer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoToEveryWeek(lily, cinema)\n\"\"\""
    ]
  },
  {
    "id": 1193,
    "question": "Lily does not go to cinemas every week.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))\n∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))\n∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))\nCustomer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬GoToEveryWeek(lily, cinema)\n\"\"\""
    ]
  },
  {
    "id": 1194,
    "question": "Lily goes to cinemas every week or watches 3 movies every week without any additional fees.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))\n∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))\n∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))\nCustomer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoToEveryWeek(lily, cinema) ∨ EligibleForThreeFreeMoviesWithoutAdditionalFees(lily)\n\"\"\""
    ]
  },
  {
    "id": 1195,
    "question": "If Lily does not both go to cinemas every week and subscribe to HBO service, then Lily is either available to watch 3 movies every week without any additional fees or she prefers TV more.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))\n∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))\n∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))\nCustomer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(GoToEveryWeek(lily, cinema) ∧ SubscribedTo(lily, hBO)) → (EligibleForThreeFreeMoviesEveryWeek(lily) ⊕ Prefer(lily, tVSeries))\n\"\"\""
    ]
  },
  {
    "id": 1196,
    "question": "If Lily is available to watch 3 movies every week without any additional fees and she watches TV series in cinemas, then she goes to cinemas every week and prefers TV series more.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))\n∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))\n∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))\n∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))\nCustomer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(lily) ∧ WatchIn(lily, tV, cinema)) → (GoToEveryWeek(lily, cinema) ∧ Prefer(lily, tVSeries))\n\"\"\""
    ]
  },
  {
    "id": 550,
    "question": "Real Madrid ranks higher than Barcelona.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (LaLigaSoccerTeam(x) ∧ LaLigaSoccerTeam(y) ∧ MorePoints(x, y) → RankHigherThan(x, y))\n∀x ∀y (LaLigaSoccerTeam(x) ∧ LaLigaSoccerTeam(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) →  RankHigherThan(x, y))\nLaLigaSoccerTeam(realMadrid) ∧ LaLigaSoccerTeam(barcelona)\nMorePoints(realMadrid, barcelona)\n¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRankHigherThan(realMadrid, barcelona)\n\"\"\""
    ]
  },
  {
    "id": 551,
    "question": "Barcelona ranks higher than Real Madrid.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (LaLigaSoccerTeam(x) ∧ LaLigaSoccerTeam(y) ∧ MorePoints(x, y) → RankHigherThan(x, y))\n∀x ∀y (LaLigaSoccerTeam(x) ∧ LaLigaSoccerTeam(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) →  RankHigherThan(x, y))\nLaLigaSoccerTeam(realMadrid) ∧ LaLigaSoccerTeam(barcelona)\nMorePoints(realMadrid, barcelona)\n¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRankHigherThan(barcelona, realMadrid)\n\"\"\""
    ]
  },
  {
    "id": 249,
    "question": "Tom uses the zip code 98199.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNeighbourhoodIn(lawtonPark, seattle)\n∀x (Residentof(x, lawtonPark) → UseZipCode(x, num98199))\nResidentOf(tom, lawtonPark)\nUseZipCode(daniel, num98199)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nUseZipCode(tom, num98199)\n\"\"\""
    ]
  },
  {
    "id": 250,
    "question": "Tom doesn't use the zip code 98199.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNeighbourhoodIn(lawtonPark, seattle)\n∀x (Residentof(x, lawtonPark) → UseZipCode(x, num98199))\nResidentOf(tom, lawtonPark)\nUseZipCode(daniel, num98199)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬UseZipCode(tom, num98199)\n\"\"\""
    ]
  },
  {
    "id": 251,
    "question": "Tom is a citizen of Washington.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNeighbourhoodIn(lawtonPark, seattle)\n∀x (Residentof(x, lawtonPark) → UseZipCode(x, num98199))\nResidentOf(tom, lawtonPark)\nUseZipCode(daniel, num98199)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nResidentOf(tom, washington)\n\"\"\""
    ]
  },
  {
    "id": 252,
    "question": "Daniel is a citizen of Lawton Park.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNeighbourhoodIn(lawtonPark, seattle)\n∀x (Residentof(x, lawtonPark) → UseZipCode(x, num98199))\nResidentOf(tom, lawtonPark)\nUseZipCode(daniel, num98199)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nResidentOf(daniel, lawtonPark)\n\"\"\""
    ]
  },
  {
    "id": 261,
    "question": "Tiffany T. Alston was suspended from the Maryland House of Delegates.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Legislator(x) ∧ StealsFunds(x)) → Suspended(x))\nLegislator(tiffanyTAlston)\nStealsFunds(tiffanyTAlston) ∧ StealsFundsInYr(tiffanyTAlston, yr2012)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSuspended(tiffanyTAlston)\n\"\"\""
    ]
  },
  {
    "id": 262,
    "question": "Tiffany T. Alston was not suspended from the Maryland House of Delegates.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Legislator(x) ∧ StealsFunds(x)) → Suspended(x))\nLegislator(tiffanyTAlston)\nStealsFunds(tiffanyTAlston) ∧ StealsFundsInYr(tiffanyTAlston, yr2012)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Suspended(tiffanyTAlston)\n\"\"\""
    ]
  },
  {
    "id": 263,
    "question": "Tiffany T. Alston went to prison for stealing government funds.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Legislator(x) ∧ StealsFunds(x)) → Suspended(x))\nLegislator(tiffanyTAlston)\nStealsFunds(tiffanyTAlston) ∧ StealsFundsInYr(tiffanyTAlston, yr2012)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPrison(tiffanyTAlston)\n\"\"\""
    ]
  },
  {
    "id": 491,
    "question": "If a stonefish stings you and you don’t use an antivenom, it can cause death to you.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Fish(x) → Sting(x,y))\nFish(stonefish)\n∀x (SteppedOnBy(stonefish, x) → Sting(stonefish, x))\n∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeathTo(stonefish, x))\n∀x (Sting(stonefish, x) ∧ (ApplyHeatTo(x) ∨ UseAntivenomOn(x)) → Treated(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Sting(stonefish, x) ∧ ¬UseAntivenomOn(x) → CauseDeathTo(stonefish, x))\n\"\"\""
    ]
  },
  {
    "id": 492,
    "question": "Stings of some fish can cause death if not treated.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Fish(x) → Sting(x,y))\nFish(stonefish)\n∀x (SteppedOnBy(stonefish, x) → Sting(stonefish, x))\n∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeathTo(stonefish, x))\n∀x (Sting(stonefish, x) ∧ (ApplyHeatTo(x) ∨ UseAntivenomOn(x)) → Treated(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Fish(x) ∧ Sting(x, y) ∧ ¬Treated(y) → CauseDeathTo(x, y))\n\"\"\""
    ]
  },
  {
    "id": 493,
    "question": "If you step on a stonefish and apply heat to the affected area, it can cause death to you.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Fish(x) → Sting(x,y))\nFish(stonefish)\n∀x (SteppedOnBy(stonefish, x) → Sting(stonefish, x))\n∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeathTo(stonefish, x))\n∀x (Sting(stonefish, x) ∧ (ApplyHeatTo(x) ∨ UseAntivenomOn(x)) → Treated(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (SteppedOnBy(stonefish, x) ∧ ApplyHeatTo(x)  → CauseDeathTo(stonefish, x))\n\"\"\""
    ]
  },
  {
    "id": 1173,
    "question": "The monitor L-2021 is in the library.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Monitor(x) ∧ ProducedBy(x, lG) ∧ Have(x, typeCPort) ∧ (¬(x=y)) ∧ Monitor(y) ∧ ProducedBy(y, lG) ∧ Have(y, typeCPort))\n∀x (Have(x, typeCPort) → ¬ProducedBefore(x, yr2010))\n∀x ((Monitor(x) ∧ In(x, library)) → ProducedBefore(x, yr2010))\nMonitor(l-2021) ∧ (In(l-2021, library) ⊕ Have(l-2021, typeCPort))\n¬(ProducedBefore(l-2021, yr2010) ⊕ ProducedBy(l-2021, lG))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIn(l-2021, library)\n\"\"\""
    ]
  },
  {
    "id": 1174,
    "question": "The monitor L-2021 is either in the library or produced by LG.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Monitor(x) ∧ ProducedBy(x, lG) ∧ Have(x, typeCPort) ∧ (¬(x=y)) ∧ Monitor(y) ∧ ProducedBy(y, lG) ∧ Have(y, typeCPort))\n∀x (Have(x, typeCPort) → ¬ProducedBefore(x, yr2010))\n∀x ((Monitor(x) ∧ In(x, library)) → ProducedBefore(x, yr2010))\nMonitor(l-2021) ∧ (In(l-2021, library) ⊕ Have(l-2021, typeCPort))\n¬(ProducedBefore(l-2021, yr2010) ⊕ ProducedBy(l-2021, lG))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIn(l-2021, library) ⊕ ProducedBy(l-2021, lG)\n\"\"\""
    ]
  },
  {
    "id": 1175,
    "question": "The L-2021 monitor either has a type-c port or is produced by LG.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Monitor(x) ∧ ProducedBy(x, lG) ∧ Have(x, typeCPort) ∧ (¬(x=y)) ∧ Monitor(y) ∧ ProducedBy(y, lG) ∧ Have(y, typeCPort))\n∀x (Have(x, typeCPort) → ¬ProducedBefore(x, yr2010))\n∀x ((Monitor(x) ∧ In(x, library)) → ProducedBefore(x, yr2010))\nMonitor(l-2021) ∧ (In(l-2021, library) ⊕ Have(l-2021, typeCPort))\n¬(ProducedBefore(l-2021, yr2010) ⊕ ProducedBy(l-2021, lG))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHave(l-2021, typeCPort) ⊕ ProducedBy(l-2021, lG)\n\"\"\""
    ]
  },
  {
    "id": 1176,
    "question": "If the L-2021 monitor is either in the library and produced by LG, or neither in the library nor produced by LG,  then L-2021 neither has a type-c port nor is produced by LG.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Monitor(x) ∧ ProducedBy(x, lG) ∧ Have(x, typeCPort) ∧ (¬(x=y)) ∧ Monitor(y) ∧ ProducedBy(y, lG) ∧ Have(y, typeCPort))\n∀x (Have(x, typeCPort) → ¬ProducedBefore(x, yr2010))\n∀x ((Monitor(x) ∧ In(x, library)) → ProducedBefore(x, yr2010))\nMonitor(l-2021) ∧ (In(l-2021, library) ⊕ Have(l-2021, typeCPort))\n¬(ProducedBefore(l-2021, yr2010) ⊕ ProducedBy(l-2021, lG))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(In(l-2021, library) ⊕ ProducedBy(l-2021, lG)) → (¬Have(x, typeCPort) ∧ ¬ProducedBy(x, lG))\n\"\"\""
    ]
  },
  {
    "id": 1177,
    "question": "If the monitor L-2021 is either produced by LG and produced before 2010 or neither produced by LG nor produced before 2010,  then L-2021 is either in the library or produced by LG.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Monitor(x) ∧ ProducedBy(x, lG) ∧ Have(x, typeCPort) ∧ (¬(x=y)) ∧ Monitor(y) ∧ ProducedBy(y, lG) ∧ Have(y, typeCPort))\n∀x (Have(x, typeCPort) → ¬ProducedBefore(x, yr2010))\n∀x ((Monitor(x) ∧ In(x, library)) → ProducedBefore(x, yr2010))\nMonitor(l-2021) ∧ (In(l-2021, library) ⊕ Have(l-2021, typeCPort))\n¬(ProducedBefore(l-2021, yr2010) ⊕ ProducedBy(l-2021, lG))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(ProducedBefore(l-2021, year2010) ⊕ ProducedBy(l-2021, lG)) → (In(l-2021, library) ⊕ ProducedBy(l-2021, lG))\n\"\"\""
    ]
  },
  {
    "id": 1005,
    "question": "PSO J318.5−22 is an orphan planet.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Outside(x, solarSystem) ⊕ In(x, solarSystem))\n∀x (Outside(x, solarSystem) → ¬SunAs(x, star))\n∀x (In(x, solarSystem) → BoundBy(x, sun, gravitationally))\n∀x (Planet(x) ∧ BoundBy(x, sun, gravitationally) → ¬(Planet(x) ∧ Rogue(x)))\n∀x (Planet(x) ∧ Orphan(x) → Planet(x) ∧ Rogue(x))\n¬(Planet(pSOJ318.5-22) ∧ Rogue(pSOJ318.5-22) ∧ BoundBy(pSOJ318.5-22, sun, gravitationally)) → (Planet(pSOJ318.5-22) ∧ Rogue(pSOJ318.5-22))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlanet(pSOJ318.5-22) ∧ Orphan(pSOJ318.5-22)\n\"\"\""
    ]
  },
  {
    "id": 1006,
    "question": "PSO J318.5−22 is an orphan planet or it does not have the Sun as its star, or both.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Outside(x, solarSystem) ⊕ In(x, solarSystem))\n∀x (Outside(x, solarSystem) → ¬SunAs(x, star))\n∀x (In(x, solarSystem) → BoundBy(x, sun, gravitationally))\n∀x (Planet(x) ∧ BoundBy(x, sun, gravitationally) → ¬(Planet(x) ∧ Rogue(x)))\n∀x (Planet(x) ∧ Orphan(x) → Planet(x) ∧ Rogue(x))\n¬(Planet(pSOJ318.5-22) ∧ Rogue(pSOJ318.5-22) ∧ BoundBy(pSOJ318.5-22, sun, gravitationally)) → (Planet(pSOJ318.5-22) ∧ Rogue(pSOJ318.5-22))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Planet(pSOJ318.5-22) ∧ Orphan(pSOJ318.5-22)) ∨ ¬SunAs(pSOJ318.5-22, star)\n\"\"\""
    ]
  },
  {
    "id": 1007,
    "question": "If PSO J318.5−22 is an orphan planet or it does not have the Sun as the star, or both, then PSO J318.5−22 neither is an orphan planet nor does it have the Sun as the star.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Outside(x, solarSystem) ⊕ In(x, solarSystem))\n∀x (Outside(x, solarSystem) → ¬SunAs(x, star))\n∀x (In(x, solarSystem) → BoundBy(x, sun, gravitationally))\n∀x (Planet(x) ∧ BoundBy(x, sun, gravitationally) → ¬(Planet(x) ∧ Rogue(x)))\n∀x (Planet(x) ∧ Orphan(x) → Planet(x) ∧ Rogue(x))\n¬(Planet(pSOJ318.5-22) ∧ Rogue(pSOJ318.5-22) ∧ BoundBy(pSOJ318.5-22, sun, gravitationally)) → (Planet(pSOJ318.5-22) ∧ Rogue(pSOJ318.5-22))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Planet(pSOJ318.5-22) ∧ Orphan(pSOJ318.5-22)) ∨ ¬SunAs(pSOJ318.5-22, star) → (¬(Planet(pSOJ318.5-22) ∧ Orphan(pSOJ318.5-22)) ∧ ¬SunAs(pSOJ318.5-22, star))\n\"\"\""
    ]
  },
  {
    "id": 518,
    "question": "The project Sam is doing is written in C++.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Project(x) ∧ Do(sam, x))\n∀x (Project(x) → (WrittenIn(x, cplusplus) ⊕ WrittenIn(x, python)))\n∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))\nUse(sam, mac)\n∃x (Use(sam, mac) ∧ Song(x) → Play(sam, x))\n∀x (Song(x) ∧ Play(sam, x) → Titled(x, perfect))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, cplusplus))\n\"\"\""
    ]
  },
  {
    "id": 519,
    "question": "The song Sam is playing is titled \"Perfect\".",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Project(x) ∧ Do(sam, x))\n∀x (Project(x) → (WrittenIn(x, cplusplus) ⊕ WrittenIn(x, python)))\n∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))\nUse(sam, mac)\n∃x (Use(sam, mac) ∧ Song(x) → Play(sam, x))\n∀x (Song(x) ∧ Play(sam, x) → Titled(x, perfect))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Song(x) ∧ Play(sam, x) ∧ Titled(x, perfect))\n\"\"\""
    ]
  },
  {
    "id": 520,
    "question": "If a song is titled \"Perfect\", Sam will play it.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Project(x) ∧ Do(sam, x))\n∀x (Project(x) → (WrittenIn(x, cplusplus) ⊕ WrittenIn(x, python)))\n∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))\nUse(sam, mac)\n∃x (Use(sam, mac) ∧ Song(x) → Play(sam, x))\n∀x (Song(x) ∧ Play(sam, x) → Titled(x, perfect))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Titled(x, perfect) → Play(sam, x))\n\"\"\""
    ]
  },
  {
    "id": 698,
    "question": "Some pets do not have fur.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Have(x, fur))\n∃x (Pet(x) ∧ Rabbit(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Pet(x) ∧ Pet(y) ∧ ¬Have(x, fur) ∧ ¬Have(y, fur))\n\"\"\""
    ]
  },
  {
    "id": 1385,
    "question": "TikTok is a computer program.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SocialMedia(x) ∧ Application(x) ∧ Contain(x, chatFeature) → Software(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧ AllowToSendTo(x, user, message) → Contain(x, chatFeature))\n∀x (SocialMedia(x) ∧ Application(x) → Contain(x, chatFeature) ∨ Contain(x, videoFeature))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Contain(x, videoFeature) → Allow(x, user, uploadVideo))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Software(x) → ComputerProgram(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧Have(x, highEngagementMetric) → Addictive(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Addictive(x) → ¬IdealFor(x, preteen))\nSocialMedia(tikTok) ∧ Application(tikTok) ∧ ¬IdealFor(tikTok, preteen)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nComputerProgram(tikTok)\n\"\"\""
    ]
  },
  {
    "id": 1386,
    "question": "TikTok is either ideal for preteens or a computer program.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SocialMedia(x) ∧ Application(x) ∧ Contain(x, chatFeature) → Software(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧ AllowToSendTo(x, user, message) → Contain(x, chatFeature))\n∀x (SocialMedia(x) ∧ Application(x) → Contain(x, chatFeature) ∨ Contain(x, videoFeature))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Contain(x, videoFeature) → Allow(x, user, uploadVideo))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Software(x) → ComputerProgram(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧Have(x, highEngagementMetric) → Addictive(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Addictive(x) → ¬IdealFor(x, preteen))\nSocialMedia(tikTok) ∧ Application(tikTok) ∧ ¬IdealFor(tikTok, preteen)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIdealFor(tikTok, preteen) ⊕ ComputerProgram(tikTok)\n\"\"\""
    ]
  },
  {
    "id": 1387,
    "question": "TikTok is does not have chat features or it is not a computer program.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SocialMedia(x) ∧ Application(x) ∧ Contain(x, chatFeature) → Software(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧ AllowToSendTo(x, user, message) → Contain(x, chatFeature))\n∀x (SocialMedia(x) ∧ Application(x) → Contain(x, chatFeature) ∨ Contain(x, videoFeature))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Contain(x, videoFeature) → Allow(x, user, uploadVideo))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Software(x) → ComputerProgram(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧Have(x, highEngagementMetric) → Addictive(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Addictive(x) → ¬IdealFor(x, preteen))\nSocialMedia(tikTok) ∧ Application(tikTok) ∧ ¬IdealFor(tikTok, preteen)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Contain(tikTok, chatFeature) ∨ ¬ComputerProgram(tikTok))\n\"\"\""
    ]
  },
  {
    "id": 1388,
    "question": "TikTok either has chat features or is a computer program.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SocialMedia(x) ∧ Application(x) ∧ Contain(x, chatFeature) → Software(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧ AllowToSendTo(x, user, message) → Contain(x, chatFeature))\n∀x (SocialMedia(x) ∧ Application(x) → Contain(x, chatFeature) ∨ Contain(x, videoFeature))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Contain(x, videoFeature) → Allow(x, user, uploadVideo))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Software(x) → ComputerProgram(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧Have(x, highEngagementMetric) → Addictive(x))\n∀x (SocialMedia(x) ∧ Application(x) ∧ Addictive(x) → ¬IdealFor(x, preteen))\nSocialMedia(tikTok) ∧ Application(tikTok) ∧ ¬IdealFor(tikTok, preteen)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nContain(tikTok, chatFeature) ⊕ ComputerProgram(tikTok))\n\"\"\""
    ]
  },
  {
    "id": 316,
    "question": "There are no unincorporated communities along Kentucky Route 32.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nUnincorporatedCommunity(ordinary)\nLocatedIn(ordinary, elliotCounty) ∧ On(ordinary, kentuckyRoute32)\nLocatedNorthwestOf(ordinary, sandyHook)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (On(x, kentuckyRoute32) → ¬UnincorporatedCommunity(x))\n\"\"\""
    ]
  },
  {
    "id": 317,
    "question": "There is an unincorporated community located in Elliot County.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nUnincorporatedCommunity(ordinary)\nLocatedIn(ordinary, elliotCounty) ∧ On(ordinary, kentuckyRoute32)\nLocatedNorthwestOf(ordinary, sandyHook)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (UnincorporatedCommunity(x) ∧ LocatedIn(x, elliotCounty))\n\"\"\""
    ]
  },
  {
    "id": 921,
    "question": "Susan is a college student.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, event) ∧ YoungAdult(x) → Like(x, independence))\n∀x (At(x, event) ∧ CollegeStudent(x) → YoungAdult(x))\n∀x (At(x, event) ∧ YaleStudent(x) → CollegeStudent(x))\n∀x (At(x, event) → (YaleStudent(x) ⊕ HarvardStudent(x)))\n∀x (At(x, event) ∧ HarvardStudent(x) → Diligent(x))\nAt(susan, event) ∧ (HarvardStudent(susan) → YoungAdult(susan))\nYaleStudent(susan) → ¬Like(susan, independence)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCollegeStudent(susan)\n\"\"\""
    ]
  },
  {
    "id": 922,
    "question": "Susan likes independence and is diligent.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, event) ∧ YoungAdult(x) → Like(x, independence))\n∀x (At(x, event) ∧ CollegeStudent(x) → YoungAdult(x))\n∀x (At(x, event) ∧ YaleStudent(x) → CollegeStudent(x))\n∀x (At(x, event) → (YaleStudent(x) ⊕ HarvardStudent(x)))\n∀x (At(x, event) ∧ HarvardStudent(x) → Diligent(x))\nAt(susan, event) ∧ (HarvardStudent(susan) → YoungAdult(susan))\nYaleStudent(susan) → ¬Like(susan, independence)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLike(susan, independence) ∧ Diligent(susan)\n\"\"\""
    ]
  },
  {
    "id": 923,
    "question": "Susan is not both diligent and likes independence.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, event) ∧ YoungAdult(x) → Like(x, independence))\n∀x (At(x, event) ∧ CollegeStudent(x) → YoungAdult(x))\n∀x (At(x, event) ∧ YaleStudent(x) → CollegeStudent(x))\n∀x (At(x, event) → (YaleStudent(x) ⊕ HarvardStudent(x)))\n∀x (At(x, event) ∧ HarvardStudent(x) → Diligent(x))\nAt(susan, event) ∧ (HarvardStudent(susan) → YoungAdult(susan))\nYaleStudent(susan) → ¬Like(susan, independence)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Like(susan, independence) ∧ Diligent(susan))\n\"\"\""
    ]
  },
  {
    "id": 430,
    "question": "Inside Out was a punk band.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPlay(vicDicara, guitar) ∧ Play(vicDicara, bass)\n∀x (Music(vicDicara, x) → ¬(x=punk)))\nBand(vicDicara, insideOut)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMusic(insideOut, punk)\n\"\"\""
    ]
  },
  {
    "id": 431,
    "question": "A musician from Inside Out plays bass.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPlay(vicDicara, guitar) ∧ Play(vicDicara, bass)\n∀x (Music(vicDicara, x) → ¬(x=punk)))\nBand(vicDicara, insideOut)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Band(x, insideOut) ∧ Play(x, bass))\n\"\"\""
    ]
  },
  {
    "id": 913,
    "question": "Amy is a professional athlete.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalAthlete(x) → SpendOn(x, mostOfTheirTime, sports))\n∀x (OlympicGoldMedalWinner(x) → ProfessionalAthlete(x))\n∀x (FullTimeScientist(x) → ¬SpendOn(x, mostOfTheirTime, sports))\n∀x (NobelPhysicsLaureate(x) → FullTimeScientist(x))\nSpendOn(amy, mostOfTheirTime, sports) ∨ OlympicGoldMedalWinner(amy)\n¬NobelPhysicsLaureate(amy) → ¬OlympicGoldMedalWinner(amy)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProfessionalAthlete(amy)\n\"\"\""
    ]
  },
  {
    "id": 914,
    "question": "Amy is neither a full-time scientist nor an Olympic gold medal winner.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalAthlete(x) → SpendOn(x, mostOfTheirTime, sports))\n∀x (OlympicGoldMedalWinner(x) → ProfessionalAthlete(x))\n∀x (FullTimeScientist(x) → ¬SpendOn(x, mostOfTheirTime, sports))\n∀x (NobelPhysicsLaureate(x) → FullTimeScientist(x))\nSpendOn(amy, mostOfTheirTime, sports) ∨ OlympicGoldMedalWinner(amy)\n¬NobelPhysicsLaureate(amy) → ¬OlympicGoldMedalWinner(amy)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(FullTimeScientist(amy) ∨ OlympicGoldMedalWinner(amy))\n\"\"\""
    ]
  },
  {
    "id": 915,
    "question": "If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalAthlete(x) → SpendOn(x, mostOfTheirTime, sports))\n∀x (OlympicGoldMedalWinner(x) → ProfessionalAthlete(x))\n∀x (FullTimeScientist(x) → ¬SpendOn(x, mostOfTheirTime, sports))\n∀x (NobelPhysicsLaureate(x) → FullTimeScientist(x))\nSpendOn(amy, mostOfTheirTime, sports) ∨ OlympicGoldMedalWinner(amy)\n¬NobelPhysicsLaureate(amy) → ¬OlympicGoldMedalWinner(amy)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬OlympicGoldMedalWinner(amy) → NobelPhysicsLaureate(amy)\n\"\"\""
    ]
  },
  {
    "id": 1142,
    "question": "The cherries are apples.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((GrownIn(x, benSYard) ∧ RedFruit(x)) → Contain(x, vitaminC))\n∀x (GrownIn(x, benSYard) ∧ Is(x, apple) → RedFruit(x))\n∀x ((GrownIn(x, benSYard) ∧ Contain(x, vitaminC)) → healthy(x))\n∀x ((GrownIn(x, benSYard) ∧ Healthy(x)) → ¬On(x, warningList))\nGrownIn(cherry, benSYard)\n¬(Healthy(cherry) ∧ Is(cherry, apple)) → RedFruit(cherry)\n\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIs(cherry, apple)\n\"\"\""
    ]
  },
  {
    "id": 1143,
    "question": "The cherries either contain some amount of vitamin C or are on a warning list.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((GrownIn(x, benSYard) ∧ RedFruit(x)) → Contain(x, vitaminC))\n∀x (GrownIn(x, benSYard) ∧ Is(x, apple) → RedFruit(x))\n∀x ((GrownIn(x, benSYard) ∧ Contain(x, vitaminC)) → healthy(x))\n∀x ((GrownIn(x, benSYard) ∧ Healthy(x)) → ¬On(x, warningList))\nGrownIn(cherry, benSYard)\n¬(Healthy(cherry) ∧ Is(cherry, apple)) → RedFruit(cherry)\n\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nContain(cherry, vitaminC) ⊕ On(cherry, warningList)\n\"\"\""
    ]
  },
  {
    "id": 1144,
    "question": "The cherries are either on a warning list or are red.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((GrownIn(x, benSYard) ∧ RedFruit(x)) → Contain(x, vitaminC))\n∀x (GrownIn(x, benSYard) ∧ Is(x, apple) → RedFruit(x))\n∀x ((GrownIn(x, benSYard) ∧ Contain(x, vitaminC)) → healthy(x))\n∀x ((GrownIn(x, benSYard) ∧ Healthy(x)) → ¬On(x, warningList))\nGrownIn(cherry, benSYard)\n¬(Healthy(cherry) ∧ Is(cherry, apple)) → RedFruit(cherry)\n\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOn(cherry, warningList) ⊕ RedFruit(cherry)\n\"\"\""
    ]
  },
  {
    "id": 1145,
    "question": "If the cherries are either healthy or are on a warning list, then they are not red.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((GrownIn(x, benSYard) ∧ RedFruit(x)) → Contain(x, vitaminC))\n∀x (GrownIn(x, benSYard) ∧ Is(x, apple) → RedFruit(x))\n∀x ((GrownIn(x, benSYard) ∧ Contain(x, vitaminC)) → healthy(x))\n∀x ((GrownIn(x, benSYard) ∧ Healthy(x)) → ¬On(x, warningList))\nGrownIn(cherry, benSYard)\n¬(Healthy(cherry) ∧ Is(cherry, apple)) → RedFruit(cherry)\n\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBeneficialTo(cherry, people) ⊕ On(cherry, warningList))) → ¬RedFruit(cherry)\n\"\"\""
    ]
  },
  {
    "id": 1146,
    "question": "If the cherries are either on a warning list or are red, then they are not healthy and do not contain any amount of vitamin C.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((GrownIn(x, benSYard) ∧ RedFruit(x)) → Contain(x, vitaminC))\n∀x (GrownIn(x, benSYard) ∧ Is(x, apple) → RedFruit(x))\n∀x ((GrownIn(x, benSYard) ∧ Contain(x, vitaminC)) → healthy(x))\n∀x ((GrownIn(x, benSYard) ∧ Healthy(x)) → ¬On(x, warningList))\nGrownIn(cherry, benSYard)\n¬(Healthy(cherry) ∧ Is(cherry, apple)) → RedFruit(cherry)\n\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOn(cherry, warningList) ⊕ RedFruit(cherry)) → ¬(BeneficialTo(cherry, people) ∧ Contain(cherry, vitaminC)\n\"\"\""
    ]
  },
  {
    "id": 1202,
    "question": "James has a high income.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAt(x, meta) → HighIncome(x))\n∀x (HighIncome(x) → ¬MeansToDestination(x, bus))\n∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))\n∀x (HaveCar(x) → MeansToDestination(x, drive))\n∀x (Student(x) → ¬ MeansToDestination(x, drive))\nHaveCar(james) ∨ WorkAt(james, meta)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHighIncome(james)\n\"\"\""
    ]
  },
  {
    "id": 1203,
    "question": "James does not have a high income.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAt(x, meta) → HighIncome(x))\n∀x (HighIncome(x) → ¬MeansToDestination(x, bus))\n∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))\n∀x (HaveCar(x) → MeansToDestination(x, drive))\n∀x (Student(x) → ¬ MeansToDestination(x, drive))\nHaveCar(james) ∨ WorkAt(james, meta)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬HighIncome(james)\n\"\"\""
    ]
  },
  {
    "id": 1204,
    "question": "James is a student.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAt(x, meta) → HighIncome(x))\n∀x (HighIncome(x) → ¬MeansToDestination(x, bus))\n∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))\n∀x (HaveCar(x) → MeansToDestination(x, drive))\n∀x (Student(x) → ¬ MeansToDestination(x, drive))\nHaveCar(james) ∨ WorkAt(james, meta)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStudent(james)\n\"\"\""
    ]
  },
  {
    "id": 1205,
    "question": "James drives to his destination or he is a student.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAt(x, meta) → HighIncome(x))\n∀x (HighIncome(x) → ¬MeansToDestination(x, bus))\n∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))\n∀x (HaveCar(x) → MeansToDestination(x, drive))\n∀x (Student(x) → ¬ MeansToDestination(x, drive))\nHaveCar(james) ∨ WorkAt(james, meta)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMeansToDestination(x, drive) ∨ Student(james)\n\"\"\""
    ]
  },
  {
    "id": 1206,
    "question": "James either drives to their destination or is a student.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAt(x, meta) → HighIncome(x))\n∀x (HighIncome(x) → ¬MeansToDestination(x, bus))\n∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))\n∀x (HaveCar(x) → MeansToDestination(x, drive))\n∀x (Student(x) → ¬ MeansToDestination(x, drive))\nHaveCar(james) ∨ WorkAt(james, meta)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMeansToDestination(x, drive) ⊕ Student(james)\n\"\"\""
    ]
  },
  {
    "id": 1207,
    "question": "If James either drives to his destination or is a student, then he has a high income and is a student.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAt(x, meta) → HighIncome(x))\n∀x (HighIncome(x) → ¬MeansToDestination(x, bus))\n∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))\n∀x (HaveCar(x) → MeansToDestination(x, drive))\n∀x (Student(x) → ¬ MeansToDestination(x, drive))\nHaveCar(james) ∨ WorkAt(james, meta)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(MeansToDestination(x, drive) ⊕ Student(james)) → (HighIncome(james) ∧ Student(james))\n\"\"\""
    ]
  },
  {
    "id": 1197,
    "question": "Ho is not an ardent communist.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, businessConference) → (Investor(x) ⊕ Entrepreneur(x)))\n∀x ((At(x, businessConference) ∧ Enjoy(x, opportunityOfStartingOwnBusiness)) → ¬Prefer(x, plannedEconomy))\n∀x ((At(x, businessConference) ∧ Entrepreneur(x)) → Enjoy(x, opportunityOfStartingOwnBusiness))\n∀x ((At(x, businessConference) ∧ Enjoy(x, stateOwnershipOfMeansOfProduction)) → Prefer(x, plannedEconomy))\n∀x ((At(x, businessConference) ∧ ArdentCommunist(x)) → Prefer(x, stateOwnershipOfMeansOfProduction))\nAt(ho, businessConference) ∧ Prefer(ho, stateOwnershipOfMeansOfProduction)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ArdentCommunist(ho)\n\"\"\""
    ]
  },
  {
    "id": 1198,
    "question": "Ho is an investor or is not an ardent communist.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, businessConference) → (Investor(x) ⊕ Entrepreneur(x)))\n∀x ((At(x, businessConference) ∧ Enjoy(x, opportunityOfStartingOwnBusiness)) → ¬Prefer(x, plannedEconomy))\n∀x ((At(x, businessConference) ∧ Entrepreneur(x)) → Enjoy(x, opportunityOfStartingOwnBusiness))\n∀x ((At(x, businessConference) ∧ Enjoy(x, stateOwnershipOfMeansOfProduction)) → Prefer(x, plannedEconomy))\n∀x ((At(x, businessConference) ∧ ArdentCommunist(x)) → Prefer(x, stateOwnershipOfMeansOfProduction))\nAt(ho, businessConference) ∧ Prefer(ho, stateOwnershipOfMeansOfProduction)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInvestor(ho) ∨ (¬ArdentCommunist(ho))\n\"\"\""
    ]
  },
  {
    "id": 708,
    "question": "All television stars have good business sense.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TelevisionStar(x) → ¬CertifiedPublicAccoutant(x))\n∀x (CertifiedPublicAccoutant(x) → Have(x, goodBusinessSense))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (TelevisionStar(x) → Have(x, goodBusinessSense))\n\"\"\""
    ]
  },
  {
    "id": 1169,
    "question": "James is good at planning.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (StudentInTheClass(x) ∧ GoodAt(x, math) ∧ GoodAt(x, chemistry) ∧ (¬(x=y)) ∧ StudentInTheClass(y) ∧ GoodAt(y, math) ∧ GoodAt(y, chemistry))\n∀x ((StudentInTheClass(x) ∧ GoodAt(x, chemistry)) → Enjoy(x, conductingExperiment))\n∀x ((StudentInTheClass(x) ∧ Enjoy(x, conductingExperiment)) → GoodAt(x, planning))\n∀x ((StudentInTheClass(x) ∧ GoodAt(x, planning)) → ¬Failed(x, theClass))\nStudentInTheClass(james) ∧ (¬(GoodAt(james, chemistry) ⊕ Failed(james, theClass)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoodAt(james, planning)\n\"\"\""
    ]
  },
  {
    "id": 1170,
    "question": "James is good at math and chemistry.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (StudentInTheClass(x) ∧ GoodAt(x, math) ∧ GoodAt(x, chemistry) ∧ (¬(x=y)) ∧ StudentInTheClass(y) ∧ GoodAt(y, math) ∧ GoodAt(y, chemistry))\n∀x ((StudentInTheClass(x) ∧ GoodAt(x, chemistry)) → Enjoy(x, conductingExperiment))\n∀x ((StudentInTheClass(x) ∧ Enjoy(x, conductingExperiment)) → GoodAt(x, planning))\n∀x ((StudentInTheClass(x) ∧ GoodAt(x, planning)) → ¬Failed(x, theClass))\nStudentInTheClass(james) ∧ (¬(GoodAt(james, chemistry) ⊕ Failed(james, theClass)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoodAt(james, chemistry) ∧ GoodAt(james, math)\n\"\"\""
    ]
  },
  {
    "id": 1171,
    "question": "James failed the class and is good at math.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (StudentInTheClass(x) ∧ GoodAt(x, math) ∧ GoodAt(x, chemistry) ∧ (¬(x=y)) ∧ StudentInTheClass(y) ∧ GoodAt(y, math) ∧ GoodAt(y, chemistry))\n∀x ((StudentInTheClass(x) ∧ GoodAt(x, chemistry)) → Enjoy(x, conductingExperiment))\n∀x ((StudentInTheClass(x) ∧ Enjoy(x, conductingExperiment)) → GoodAt(x, planning))\n∀x ((StudentInTheClass(x) ∧ GoodAt(x, planning)) → ¬Failed(x, theClass))\nStudentInTheClass(james) ∧ (¬(GoodAt(james, chemistry) ⊕ Failed(james, theClass)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFailed(james, james) ∧ GoodAt(james, math)\n\"\"\""
    ]
  },
  {
    "id": 1172,
    "question": "If James is good at Chemistry or failed the class, then James is either good at planning or good at math.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (StudentInTheClass(x) ∧ GoodAt(x, math) ∧ GoodAt(x, chemistry) ∧ (¬(x=y)) ∧ StudentInTheClass(y) ∧ GoodAt(y, math) ∧ GoodAt(y, chemistry))\n∀x ((StudentInTheClass(x) ∧ GoodAt(x, chemistry)) → Enjoy(x, conductingExperiment))\n∀x ((StudentInTheClass(x) ∧ Enjoy(x, conductingExperiment)) → GoodAt(x, planning))\n∀x ((StudentInTheClass(x) ∧ GoodAt(x, planning)) → ¬Failed(x, theClass))\nStudentInTheClass(james) ∧ (¬(GoodAt(james, chemistry) ⊕ Failed(james, theClass)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(GoodAt(james, chemistry) ∨ Failed(james, theClass)) → (GoodAt(james, planning) ⊕ GoodAt(james, math))\n\"\"\""
    ]
  },
  {
    "id": 69,
    "question": "2Sum is a Leetcode problem at the easy level.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Easy(x) → ∃y (LessThan(y, percent20) ∧ ACRate(x,y)))\n∀x (Recommended(x) → Easy(x))\n∀x (Easy(x) ⊕ Hard(x))\n∀x (Starred(x)) → Hard(x))\nRecommended(twosum) \nStarred(foursum)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEasy(twosum)\n\"\"\""
    ]
  },
  {
    "id": 70,
    "question": "4Sum is a Leetcode problem recommended to the novice.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Easy(x) → ∃y (LessThan(y, percent20) ∧ ACRate(x,y)))\n∀x (Recommended(x) → Easy(x))\n∀x (Easy(x) ⊕ Hard(x))\n∀x (Starred(x)) → Hard(x))\nRecommended(twosum) \nStarred(foursum)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRecommended(foursum)\n\"\"\""
    ]
  },
  {
    "id": 71,
    "question": "2Sum has an AC rate higher than 20 percent.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Easy(x) → ∃y (LessThan(y, percent20) ∧ ACRate(x,y)))\n∀x (Recommended(x) → Easy(x))\n∀x (Easy(x) ⊕ Hard(x))\n∀x (Starred(x)) → Hard(x))\nRecommended(twosum) \nStarred(foursum)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃y(GreaterThan(y, percent20) ∧ ACRate(2Sum,y))\n\"\"\""
    ]
  },
  {
    "id": 687,
    "question": "Sarah will spend money this weekend.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rent(x, car) → Spend(x, money))\nGoTo(sarah, vermont) → DriveTo(sarah, vermont)\n∀x ∀y (¬Own(x, car) ∧ DriveTo(x, y) → Borrow(x, car) ⊕ Rent(x, car))\n¬Own(sarah, car)\n∀x (Camping(sarah, x) → ¬(Borrow(sarah, car)))\nCamping(sarah, vermont)\n∀x ∀y (Camping(x, y) → GoTo(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSpend(sarah, money)\n\"\"\""
    ]
  },
  {
    "id": 1008,
    "question": "Carol is outgoing and very spirited.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))\n∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))\n∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))\n∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))\n∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))\n¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOutgoing(carol) ∧ Sprited(carol)\n\"\"\""
    ]
  },
  {
    "id": 1009,
    "question": "Carol is a preteen or a young child.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))\n∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))\n∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))\n∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))\n∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))\n¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPreTeen(carol) ∨ YoungChild(carol)\n\"\"\""
    ]
  },
  {
    "id": 1010,
    "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))\n∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))\n∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))\n∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))\n∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))\n¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬((∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) ∨ (Outgoing(carol) ∧ Sprited(carol)))\n\"\"\""
    ]
  },
  {
    "id": 1068,
    "question": "ROUGE Dior Colored Lip Balm 999 has a satin finish.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ VelvetFinish(x)) → Refillable(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (VelvetFinish(x) ⊕ SatinFinish(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ SatinFinish(x)) → ¬RosewoodInDescription(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (RosewoodInDescription(x) ⊕ ¬RosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ (RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ VelvetFinish(rougeDiorColoredLipBalm999))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSatinFinish(rougeDiorColoredLipBalm999)\n\"\"\""
    ]
  },
  {
    "id": 1069,
    "question": "ROUGE Dior Colored Lip Balm 999 has a satin finish and has \"rosewood\" in its official description.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ VelvetFinish(x)) → Refillable(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (VelvetFinish(x) ⊕ SatinFinish(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ SatinFinish(x)) → ¬RosewoodInDescription(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (RosewoodInDescription(x) ⊕ ¬RosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ (RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ VelvetFinish(rougeDiorColoredLipBalm999))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRefillable(rougeDiorColoredLipBalm999) ∧ RosewoodInDescription(rougeDiorColoredLipBalm999)\n\"\"\""
    ]
  },
  {
    "id": 1070,
    "question": "ROUGE Dior Colored Lip Balm 999 either is refillable or has \"rosewood\" in its official description.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ VelvetFinish(x)) → Refillable(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (VelvetFinish(x) ⊕ SatinFinish(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ SatinFinish(x)) → ¬RosewoodInDescription(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (RosewoodInDescription(x) ⊕ ¬RosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ (RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ VelvetFinish(rougeDiorColoredLipBalm999))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRefillable(rougeDiorColoredLipBalm999) ⊕ RosewoodInDescription(rougeDiorColoredLipBalm999)\n\"\"\""
    ]
  },
  {
    "id": 1071,
    "question": "If ROUGE Dior Colored Lip Balm 999 is not both a velvet finish ipstick in the set and refillable, then it neither is refillable nor has \"rosewood\" in its official description.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ VelvetFinish(x)) → Refillable(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (VelvetFinish(x) ⊕ SatinFinish(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ SatinFinish(x)) → ¬RosewoodInDescription(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (RosewoodInDescription(x) ⊕ ¬RosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ (RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ VelvetFinish(rougeDiorColoredLipBalm999))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬((Lipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ VelvetFinish(rougeDiorColoredLipBalm999) ∧ Refillable(rougeDiorColoredLipBalm999)) → (¬Refillable(rougeDiorColoredLipBalm999) ∧ ¬RosewoodInDescription(rougeDiorColoredLipBalm999)))\n\"\"\""
    ]
  },
  {
    "id": 1072,
    "question": "If ROUGE Dior Colored Lip Balm 999 is refillable and has \"rosewood\" in its official description, then it either has a velvet-finish or has \"rosewood\" in its official description.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ VelvetFinish(x)) → Refillable(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (VelvetFinish(x) ⊕ SatinFinish(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ SatinFinish(x)) → ¬RosewoodInDescription(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (RosewoodInDescription(x) ⊕ ¬RosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ (RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ VelvetFinish(rougeDiorColoredLipBalm999))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Refillable(rougeDiorColoredLipBalm999) ∧ RosewoodInDescription(rougeDiorColoredLipBalm999)) —> (VelvetFinish(rougeDiorColoredLipBalm999) ∨ RosewoodInDescription(rougeDiorColoredLipBalm999))\n\"\"\""
    ]
  },
  {
    "id": 1073,
    "question": "If ROUGE Dior Colored Lip Balm 999 either does not have \"rosewood\" in its official description or is refillable, then it has \"rosewood\" in its official description.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ VelvetFinish(x)) → Refillable(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (VelvetFinish(x) ⊕ SatinFinish(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ SatinFinish(x)) → ¬RosewoodInDescription(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (RosewoodInDescription(x) ⊕ ¬RosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ (RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ VelvetFinish(rougeDiorColoredLipBalm999))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(¬RosewoodInDescription(rougeEDiorColoredLipBalm999) ⊕ Refillable(rougeDiorColoredLipBalm999)) → RosewoodInDescription(rougeDiorColoredLipBalm999)\n\"\"\""
    ]
  },
  {
    "id": 1074,
    "question": "If ROUGE Dior Colored Lip Balm 999 either does not have \"rosewood\" in its official description or is refillable, then it neither has a satin-finish nor has \"rosewood\" in its official description.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ VelvetFinish(x)) → Refillable(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (VelvetFinish(x) ⊕ SatinFinish(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ SatinFinish(x)) → ¬RosewoodInDescription(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (RosewoodInDescription(x) ⊕ ¬RosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ (RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ VelvetFinish(rougeDiorColoredLipBalm999))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ Refillable(rougeDiorColoredLipBalm999)) → ¬(SatinFinish(rougeDiorColoredLipBalm999) ∨ RosewoodInDescription(rougeDiorColoredLipBalm999))\n\"\"\""
    ]
  },
  {
    "id": 1075,
    "question": "If ROUGE Dior Colored Lip Balm 999 is refillable or has \"rosewood\" in its official description, then it either is refillable or has \"rosewood\" in its official description..",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ VelvetFinish(x)) → Refillable(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (VelvetFinish(x) ⊕ SatinFinish(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ SatinFinish(x)) → ¬RosewoodInDescription(x))\n∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (RosewoodInDescription(x) ⊕ ¬RosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ (RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ VelvetFinish(rougeDiorColoredLipBalm999))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Refillable(rougeDiorColoredLipBalm999) ∨ RosewoodInDescription(rougeDiorColoredLipBalm999)) → (Refillable(rougeEDiorColoredLipBalm999) ⊕ RosewoodInDescription(rougeDiorColoredLipBalm999))\n\"\"\""
    ]
  },
  {
    "id": 709,
    "question": "Some conservatives are not Senate Republicans.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SenateRepublican(x) → ElectedOfficial(x))\n∃x ∃y (ElectedOfficial(x) ∧ ElectedOfficial(y) ∧ ¬Conservative(x) ∧ ¬Conservative(y) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Conservative(x) ∧ Conservative(y) ∧ ¬SenateRepublican(x) ∧ ¬SenateRepublican(y) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 881,
    "question": "Jim is a Knicks player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time\n∀x (ProfessionalBasketballPlayer(x) → Athlete(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (KnicksPlayer(x) → NBAPlayer(x))\n¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKnicksPlayer(jim)\n\"\"\""
    ]
  },
  {
    "id": 882,
    "question": "Jim is not a Knicks player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time\n∀x (ProfessionalBasketballPlayer(x) → Athlete(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (KnicksPlayer(x) → NBAPlayer(x))\n¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬KnicksPlayer(jim)\n\"\"\""
    ]
  },
  {
    "id": 883,
    "question": "Jim is an athlete.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time\n∀x (ProfessionalBasketballPlayer(x) → Athlete(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (KnicksPlayer(x) → NBAPlayer(x))\n¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAthlete(jim)\n\"\"\""
    ]
  },
  {
    "id": 910,
    "question": "Nancy is a pirate.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kid(x) → Young(x))\n∀x (Toddler(x) → Kid(x))\n∀x (Young(x) → ¬Elderly(x))\n∀x (Pirate(x) → Seafarer(x))\n¬Pirate(nancy) → Young(nancy)\n¬Toddler(nancy) → Seafarer(nancy)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPirate(nancy)\n\"\"\""
    ]
  },
  {
    "id": 911,
    "question": "Nancy is either both a pirate and a toddler, or neither a pirate nor a toddler.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kid(x) → Young(x))\n∀x (Toddler(x) → Kid(x))\n∀x (Young(x) → ¬Elderly(x))\n∀x (Pirate(x) → Seafarer(x))\n¬Pirate(nancy) → Young(nancy)\n¬Toddler(nancy) → Seafarer(nancy)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Pirate(nancy) ⊕ Toddler(nancy))\n\"\"\""
    ]
  },
  {
    "id": 912,
    "question": "If Nancy is not either a pirate or a toddler, then she is young and is a kid.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kid(x) → Young(x))\n∀x (Toddler(x) → Kid(x))\n∀x (Young(x) → ¬Elderly(x))\n∀x (Pirate(x) → Seafarer(x))\n¬Pirate(nancy) → Young(nancy)\n¬Toddler(nancy) → Seafarer(nancy)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Pirate(nancy) ⊕ Toddler(nancy)) → Young(nancy) ∧ Kid(nancy)\n\"\"\""
    ]
  },
  {
    "id": 201,
    "question": "Lana Wilson is a US filmmaker.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDirectedBy(afterTiller, lanaWilson) ∧ DirectedBy(theDeparture, lanaWilson) ∧ DirectedBy(missAmericana, lanaWilson)\n∀x ∀y (DirectedBy(x, y) → Filmmaker(y))\nDocumentary(afterTiller)\n∀x (Documentary(x) → Film(x))\nFrom(lanaWilson, kirkland)\nIn(kirkland, unitedStates)\n∀x ∀y ∀z ((From(x, y) ∧ In(y, z)) → From(x, z))\nNomination(afterTiller, theIndependentSpiritAwardForBestDocumentary)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFrom(lanaWilson, unitedStates) ∧ Filmmaker(lanaWilson)\n\"\"\""
    ]
  },
  {
    "id": 202,
    "question": "Miss Americana is not directed by a filmmaker from Kirkland.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDirectedBy(afterTiller, lanaWilson) ∧ DirectedBy(theDeparture, lanaWilson) ∧ DirectedBy(missAmericana, lanaWilson)\n∀x ∀y (DirectedBy(x, y) → Filmmaker(y))\nDocumentary(afterTiller)\n∀x (Documentary(x) → Film(x))\nFrom(lanaWilson, kirkland)\nIn(kirkland, unitedStates)\n∀x ∀y ∀z ((From(x, y) ∧ In(y, z)) → From(x, z))\nNomination(afterTiller, theIndependentSpiritAwardForBestDocumentary)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃x(Filmmaker(x) ∧ From(x, kirkland) ∧ DirectedBy(missAmericana, x))\n\"\"\""
    ]
  },
  {
    "id": 203,
    "question": "Lana Wilson has won the Independent Spirit Award.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDirectedBy(afterTiller, lanaWilson) ∧ DirectedBy(theDeparture, lanaWilson) ∧ DirectedBy(missAmericana, lanaWilson)\n∀x ∀y (DirectedBy(x, y) → Filmmaker(y))\nDocumentary(afterTiller)\n∀x (Documentary(x) → Film(x))\nFrom(lanaWilson, kirkland)\nIn(kirkland, unitedStates)\n∀x ∀y ∀z ((From(x, y) ∧ In(y, z)) → From(x, z))\nNomination(afterTiller, theIndependentSpiritAwardForBestDocumentary)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFilmmakerAward(lanaWilson, theIndependentSpiritAwardForBestDocumentary)\n\"\"\""
    ]
  },
  {
    "id": 725,
    "question": "Not all bears are wild.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Bear(x) ∧ In(x, zoo)) → ¬Wild(x))\n∃x ∃y (Bear(x) ∧ Bear(y) ∧ In(x, zoo) ∧ In(y, zoo) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Bear(x) ∧ ¬Wild(x))\n\"\"\""
    ]
  },
  {
    "id": 165,
    "question": "Elizabeth is a king.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Leader(x) → HavePower(x))\n∀x (Leader(x) → (King(x) ⊕ Queen(x)))\n∀x (Queen(x) → Female(x))\n∀x (King(x) → Male(x))\nQueen(elizabeth)\nLeader(elizabeth)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKing(elizabeth)\n\"\"\""
    ]
  },
  {
    "id": 166,
    "question": "Elizabeth has power.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Leader(x) → HavePower(x))\n∀x (Leader(x) → (King(x) ⊕ Queen(x)))\n∀x (Queen(x) → Female(x))\n∀x (King(x) → Male(x))\nQueen(elizabeth)\nLeader(elizabeth)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHavePower(elizabeth)\n\"\"\""
    ]
  },
  {
    "id": 167,
    "question": "Elizabeth is a leader of a country for life.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Leader(x) → HavePower(x))\n∀x (Leader(x) → (King(x) ⊕ Queen(x)))\n∀x (Queen(x) → Female(x))\n∀x (King(x) → Male(x))\nQueen(elizabeth)\nLeader(elizabeth)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLeader(elizabeth)\n\"\"\""
    ]
  },
  {
    "id": 976,
    "question": "Bunny does not have a regular 9-5 job.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GoTo(x, claysSchool) ∧ MakeWith(x, theirOwnMatchTea, ceremonialGradePowder) → ¬(WakeUpLate(x) ∧ StartPastNoonRegularly(x, schedule)))\n∀x (GoTo(x, claysSchool) ∧ LiveIn(x, california) ∧ AttendRegularly(x, yogaClass) → MakeWith(x, ownMatch, ceremonialGradePowder))\n∀x (GoTo(x, claysSchool) ∧ WorkInAs(x, entertainmentIndustry, highProfileCelebrity) → (WakeUpLate(x) ∧ StartPastNoonRegularly(x, schedule)))\n∀x (GoTo(x, claysSchool) ∧ ¬(Have(x, y) ∧ Regular(y) ∧ NineToFiveJob(y)) → WorkInAs(x, entertainmentIndustry, highProfileCelebrity))\n∀x (GoTo(x, claysSchool) ∧ Prefer(x, workingAtHome, goingToTheOffice) → ¬(Have(x, y) ∧ Regular(y) ∧ NineToFiveJob(y)))\nGoTo(bunny, claysSchool) ∧ ¬(Prefer(bunny, workingAtHome, goingToTheOffice) ⊕ MakeWith(bunny, theirOwnMatchTea, ceremonialGradePowder))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHave(bunny, y) ∧ Regular(y) ∧ NineToFiveJob(y)\n\"\"\""
    ]
  },
  {
    "id": 977,
    "question": "Bunny went to Clay's school and she lives in California and attends yoga classes regularly.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GoTo(x, claysSchool) ∧ MakeWith(x, theirOwnMatchTea, ceremonialGradePowder) → ¬(WakeUpLate(x) ∧ StartPastNoonRegularly(x, schedule)))\n∀x (GoTo(x, claysSchool) ∧ LiveIn(x, california) ∧ AttendRegularly(x, yogaClass) → MakeWith(x, ownMatch, ceremonialGradePowder))\n∀x (GoTo(x, claysSchool) ∧ WorkInAs(x, entertainmentIndustry, highProfileCelebrity) → (WakeUpLate(x) ∧ StartPastNoonRegularly(x, schedule)))\n∀x (GoTo(x, claysSchool) ∧ ¬(Have(x, y) ∧ Regular(y) ∧ NineToFiveJob(y)) → WorkInAs(x, entertainmentIndustry, highProfileCelebrity))\n∀x (GoTo(x, claysSchool) ∧ Prefer(x, workingAtHome, goingToTheOffice) → ¬(Have(x, y) ∧ Regular(y) ∧ NineToFiveJob(y)))\nGoTo(bunny, claysSchool) ∧ ¬(Prefer(bunny, workingAtHome, goingToTheOffice) ⊕ MakeWith(bunny, theirOwnMatchTea, ceremonialGradePowder))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLiveIn(bunny, california) ∧ AttendRegularly(bunny, yogaClass)\n\"\"\""
    ]
  },
  {
    "id": 978,
    "question": "Bunny went to Clay's school and she neither prefers working at home over going to the office nor lives in California and attends yoga classes regularly.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GoTo(x, claysSchool) ∧ MakeWith(x, theirOwnMatchTea, ceremonialGradePowder) → ¬(WakeUpLate(x) ∧ StartPastNoonRegularly(x, schedule)))\n∀x (GoTo(x, claysSchool) ∧ LiveIn(x, california) ∧ AttendRegularly(x, yogaClass) → MakeWith(x, ownMatch, ceremonialGradePowder))\n∀x (GoTo(x, claysSchool) ∧ WorkInAs(x, entertainmentIndustry, highProfileCelebrity) → (WakeUpLate(x) ∧ StartPastNoonRegularly(x, schedule)))\n∀x (GoTo(x, claysSchool) ∧ ¬(Have(x, y) ∧ Regular(y) ∧ NineToFiveJob(y)) → WorkInAs(x, entertainmentIndustry, highProfileCelebrity))\n∀x (GoTo(x, claysSchool) ∧ Prefer(x, workingAtHome, goingToTheOffice) → ¬(Have(x, y) ∧ Regular(y) ∧ NineToFiveJob(y)))\nGoTo(bunny, claysSchool) ∧ ¬(Prefer(bunny, workingAtHome, goingToTheOffice) ⊕ MakeWith(bunny, theirOwnMatchTea, ceremonialGradePowder))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Prefer(bunny, workingAtHome, goingToTheOffice) ∨ (LiveIn(bunny, california) ∧ AttendRegularly(bunny, yogaClass)))\n\"\"\""
    ]
  },
  {
    "id": 54,
    "question": "Thomas Barber played in the Football League for Bolton Wanderers",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEnglish(thomasBarber) ∧ ProfessionalFootballer(thomasBarber)\nPlayedFor(thomasBarber, astonVilla) ∧ PlayedIn(astonVilla,theFootballLeague)\nPlayedAs(thomasBarber, halfBack) ∧ PlayedAs(thomasBarber, insideLeft)\nScoredTheWinningGoalIn(thomasBarber, facupfinal1913)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlayedFor(thomasBarber, boltonWanderers) ∧ PlayedIn(boltonWanderers,theFootballLeague)\n\"\"\""
    ]
  },
  {
    "id": 55,
    "question": "Thomas Barber played as an inside left.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEnglish(thomasBarber) ∧ ProfessionalFootballer(thomasBarber)\nPlayedFor(thomasBarber, astonVilla) ∧ PlayedIn(astonVilla,theFootballLeague)\nPlayedAs(thomasBarber, halfBack) ∧ PlayedAs(thomasBarber, insideLeft)\nScoredTheWinningGoalIn(thomasBarber, facupfinal1913)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlayedAs(thomasBarber, insideLeft)\n\"\"\""
    ]
  },
  {
    "id": 56,
    "question": "An English professional footballer scored the winning goal in the 1913 FA Cup Final.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEnglish(thomasBarber) ∧ ProfessionalFootballer(thomasBarber)\nPlayedFor(thomasBarber, astonVilla) ∧ PlayedIn(astonVilla,theFootballLeague)\nPlayedAs(thomasBarber, halfBack) ∧ PlayedAs(thomasBarber, insideLeft)\nScoredTheWinningGoalIn(thomasBarber, facupfinal1913)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (English(x) ∧ ProfessionalFootballer(x) ∧ ScoredTheWinningGoalIn(x, facupfinal1913))\n\"\"\""
    ]
  },
  {
    "id": 464,
    "question": "Oliver plays piano in the concert.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (PlayIn(y, x, concert) → GoodAtPlaying(y, x))\nPlay(peter, piano) ∧ Play(peter, violin) ∧ Play(peter, saxophone)\nPlayIn(peter, piano, concert)\n∃x ∃y (PlayIn(peter, x, concert) ∧ PlayIn(oliver, y, concert))\n∀x (PlayIn(oliver, x, concert) → ¬PlayIn(peter, y, concert))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlayIn(oliver, piano, concert)\n\"\"\""
    ]
  },
  {
    "id": 465,
    "question": "Oliver plays violin in the concert.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (PlayIn(y, x, concert) → GoodAtPlaying(y, x))\nPlay(peter, piano) ∧ Play(peter, violin) ∧ Play(peter, saxophone)\nPlayIn(peter, piano, concert)\n∃x ∃y (PlayIn(peter, x, concert) ∧ PlayIn(oliver, y, concert))\n∀x (PlayIn(oliver, x, concert) → ¬PlayIn(peter, y, concert))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlayIn(oliver, violin, concert)\n\"\"\""
    ]
  },
  {
    "id": 466,
    "question": "Peter is good at playing piano.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (PlayIn(y, x, concert) → GoodAtPlaying(y, x))\nPlay(peter, piano) ∧ Play(peter, violin) ∧ Play(peter, saxophone)\nPlayIn(peter, piano, concert)\n∃x ∃y (PlayIn(peter, x, concert) ∧ PlayIn(oliver, y, concert))\n∀x (PlayIn(oliver, x, concert) → ¬PlayIn(peter, y, concert))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoodAtPlaying(peter, piano)\n\"\"\""
    ]
  },
  {
    "id": 1307,
    "question": "George has functional leg muscles.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CanControl(x, breath) → FunctionalBrainStem(x))\n∀x (Human(x) ∧ CanSwim(x) → CanControl(x, breath))\n∀x (Human(x) → (CanSwim(x) ∨ CanWalk(x)))\n∀x (Human(x) ∧ CanWalk(x) → CanStandOnTheGround(x, themselves))\n∀x (Human(x) ∧ FunctionalBrainStem(x) → CanControl(x, balance))\n∀x (Human(x) ∧ CanStandOnTheGround(x, themselves) → FunctionalLegMuscle(x)))\nHuman(george) ∧ Human(archie)\nCanControl(george, balance) ∧ CanSwim(george)\n¬(CanWalk(archie) ⊕ FunctionalBrainStem(x))\n\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFunctionalLegMuscle(archie)\n\"\"\""
    ]
  },
  {
    "id": 1308,
    "question": "Archie has functional leg muscles and can control his balance.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CanControl(x, breath) → FunctionalBrainStem(x))\n∀x (Human(x) ∧ CanSwim(x) → CanControl(x, breath))\n∀x (Human(x) → (CanSwim(x) ∨ CanWalk(x)))\n∀x (Human(x) ∧ CanWalk(x) → CanStandOnTheGround(x, themselves))\n∀x (Human(x) ∧ FunctionalBrainStem(x) → CanControl(x, balance))\n∀x (Human(x) ∧ CanStandOnTheGround(x, themselves) → FunctionalLegMuscle(x)))\nHuman(george) ∧ Human(archie)\nCanControl(george, balance) ∧ CanSwim(george)\n¬(CanWalk(archie) ⊕ FunctionalBrainStem(x))\n\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFunctionalLegMuscle(archie) ∧ CanControl(archie, balance)\n\"\"\""
    ]
  },
  {
    "id": 1309,
    "question": "Archie cannot control his balance and doesn't have functional leg muscles.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CanControl(x, breath) → FunctionalBrainStem(x))\n∀x (Human(x) ∧ CanSwim(x) → CanControl(x, breath))\n∀x (Human(x) → (CanSwim(x) ∨ CanWalk(x)))\n∀x (Human(x) ∧ CanWalk(x) → CanStandOnTheGround(x, themselves))\n∀x (Human(x) ∧ FunctionalBrainStem(x) → CanControl(x, balance))\n∀x (Human(x) ∧ CanStandOnTheGround(x, themselves) → FunctionalLegMuscle(x)))\nHuman(george) ∧ Human(archie)\nCanControl(george, balance) ∧ CanSwim(george)\n¬(CanWalk(archie) ⊕ FunctionalBrainStem(x))\n\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬CanControl(archie, balance) ∧ ¬FunctionalLegMuscle(x)\n\"\"\""
    ]
  },
  {
    "id": 668,
    "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFinding(cancerBiology, geneticAlteration) ∧ Confer(geneticAlteration, selectiveAdvantage, toCancerCell)\n∃x ∃y (CancerResearcher(x) ∧ Ranked(x, importanceOfSubstitutionsToCancerGrowth) ∧ PValue(y) ∧ RankedBy(importanceOfSubstitutionsToCancerGrowth, y))\n∀x (PValue(x) → ThresholdForBelief(x) ∧ ¬MetricOfEffect(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (CancerResearcher(x) ∧ Use(x, cancerEffectSize) ∧ UsedToDetermine(cancerEffectSize, relativeImportanceOfGeneteticAlterations))\n\"\"\""
    ]
  },
  {
    "id": 669,
    "question": "P value represents the selection intensity for somatic variants in cancer cell lineages.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFinding(cancerBiology, geneticAlteration) ∧ Confer(geneticAlteration, selectiveAdvantage, toCancerCell)\n∃x ∃y (CancerResearcher(x) ∧ Ranked(x, importanceOfSubstitutionsToCancerGrowth) ∧ PValue(y) ∧ RankedBy(importanceOfSubstitutionsToCancerGrowth, y))\n∀x (PValue(x) → ThresholdForBelief(x) ∧ ¬MetricOfEffect(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSelectionIntensitySomaticVariants(pValue)\n\"\"\""
    ]
  },
  {
    "id": 670,
    "question": "Cancer effect size is preferred by cancer researchers.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFinding(cancerBiology, geneticAlteration) ∧ Confer(geneticAlteration, selectiveAdvantage, toCancerCell)\n∃x ∃y (CancerResearcher(x) ∧ Ranked(x, importanceOfSubstitutionsToCancerGrowth) ∧ PValue(y) ∧ RankedBy(importanceOfSubstitutionsToCancerGrowth, y))\n∀x (PValue(x) → ThresholdForBelief(x) ∧ ¬MetricOfEffect(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPreferred(cancerResearchers, cancerEffectSize)\n\"\"\""
    ]
  },
  {
    "id": 671,
    "question": "P values don't represent metrics of effect.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFinding(cancerBiology, geneticAlteration) ∧ Confer(geneticAlteration, selectiveAdvantage, toCancerCell)\n∃x ∃y (CancerResearcher(x) ∧ Ranked(x, importanceOfSubstitutionsToCancerGrowth) ∧ PValue(y) ∧ RankedBy(importanceOfSubstitutionsToCancerGrowth, y))\n∀x (PValue(x) → ThresholdForBelief(x) ∧ ¬MetricOfEffect(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (PValue(x) → ¬MetricsOfEffect(x))\n\"\"\""
    ]
  },
  {
    "id": 1402,
    "question": "A worksheet is biodegradable.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Biodegradable(x) → EnvironmentFriendly(x))\n∀x (Woodware(x) → Biodegradable(x))\n∀x (Paper(x) → Woodware(x))\n¬(∃x (Good(x) ∧ Bad(x)))\n∀x (EnvironmentFriendly(x) → Good(x))\nPaper(worksheet) ⊕ EnvironmentFriendly(worksheet)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBioegradable(worksheet)\n\"\"\""
    ]
  },
  {
    "id": 1403,
    "question": "A worksheet is not biodegradable.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Biodegradable(x) → EnvironmentFriendly(x))\n∀x (Woodware(x) → Biodegradable(x))\n∀x (Paper(x) → Woodware(x))\n¬(∃x (Good(x) ∧ Bad(x)))\n∀x (EnvironmentFriendly(x) → Good(x))\nPaper(worksheet) ⊕ EnvironmentFriendly(worksheet)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Bioegradable(worksheet)\n\"\"\""
    ]
  },
  {
    "id": 1404,
    "question": "A worksheet is bad.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Biodegradable(x) → EnvironmentFriendly(x))\n∀x (Woodware(x) → Biodegradable(x))\n∀x (Paper(x) → Woodware(x))\n¬(∃x (Good(x) ∧ Bad(x)))\n∀x (EnvironmentFriendly(x) → Good(x))\nPaper(worksheet) ⊕ EnvironmentFriendly(worksheet)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBad(worksheet)\n\"\"\""
    ]
  },
  {
    "id": 1405,
    "question": "A worksheet is not bad.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Biodegradable(x) → EnvironmentFriendly(x))\n∀x (Woodware(x) → Biodegradable(x))\n∀x (Paper(x) → Woodware(x))\n¬(∃x (Good(x) ∧ Bad(x)))\n∀x (EnvironmentFriendly(x) → Good(x))\nPaper(worksheet) ⊕ EnvironmentFriendly(worksheet)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Bad(worksheet)\n\"\"\""
    ]
  },
  {
    "id": 697,
    "question": "Some snake has fur.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Reptile(x) → ¬Have(x, fur))\n∀x (Snake(x) → Reptile(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Snake(x) ∧ Have(x, fur))\n\"\"\""
    ]
  },
  {
    "id": 177,
    "question": "Tower A is low.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, newHaven) → ¬High(x))\n∀x (YaleHousing(x) → In(x, newHaven))\n∀x (In(x, manhattan) → High(x))\n∀x (Bloomberg(x) → In(x, manhattan))\n∀x (BloombergLogo(x) → Bloomberg(x))\nYaleHousing(tower-a)\nBloombergLogo(tower-b)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬High(tower-a)\n\"\"\""
    ]
  },
  {
    "id": 178,
    "question": "Tower B is not located in Manhattans.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, newHaven) → ¬High(x))\n∀x (YaleHousing(x) → In(x, newHaven))\n∀x (In(x, manhattan) → High(x))\n∀x (Bloomberg(x) → In(x, manhattan))\n∀x (BloombergLogo(x) → Bloomberg(x))\nYaleHousing(tower-a)\nBloombergLogo(tower-b)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬In(tower-b, manhattan)\n\"\"\""
    ]
  },
  {
    "id": 179,
    "question": "Tower B is located in New Haven.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, newHaven) → ¬High(x))\n∀x (YaleHousing(x) → In(x, newHaven))\n∀x (In(x, manhattan) → High(x))\n∀x (Bloomberg(x) → In(x, manhattan))\n∀x (BloombergLogo(x) → Bloomberg(x))\nYaleHousing(tower-a)\nBloombergLogo(tower-b)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬In(tower-b, newHaven)\n\"\"\""
    ]
  },
  {
    "id": 1304,
    "question": "Ron is a cat.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bird(x) → ¬Ectothermic(x))\n∀x (Penguin(x) → Bird(x))\n∀x (Animal(x) → Ectothermic(x) ∨ Endothermic(x))\n∀x (Endothermic(x) → ProduceWithIn(x, heat, body))\nAnimal(ron) ∧ Animal(henry)\n¬Bird(ron) ∧ ¬ProduceWithIn(ron, heat, body)\n¬Cat(henry) ∧ ¬ProduceWithIn(henry, heat, body)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCat(ron)\n\"\"\""
    ]
  },
  {
    "id": 1305,
    "question": "Either Henry is a penguin or Henry is endothermic.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bird(x) → ¬Ectothermic(x))\n∀x (Penguin(x) → Bird(x))\n∀x (Animal(x) → Ectothermic(x) ∨ Endothermic(x))\n∀x (Endothermic(x) → ProduceWithIn(x, heat, body))\nAnimal(ron) ∧ Animal(henry)\n¬Bird(ron) ∧ ¬ProduceWithIn(ron, heat, body)\n¬Cat(henry) ∧ ¬ProduceWithIn(henry, heat, body)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPenguin(henry) ⊕ Endothermic(henry)\n\"\"\""
    ]
  },
  {
    "id": 1306,
    "question": "Ron is either both a penguin and endothermic, or he is nether.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bird(x) → ¬Ectothermic(x))\n∀x (Penguin(x) → Bird(x))\n∀x (Animal(x) → Ectothermic(x) ∨ Endothermic(x))\n∀x (Endothermic(x) → ProduceWithIn(x, heat, body))\nAnimal(ron) ∧ Animal(henry)\n¬Bird(ron) ∧ ¬ProduceWithIn(ron, heat, body)\n¬Cat(henry) ∧ ¬ProduceWithIn(henry, heat, body)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Penguin(ron) ⊕ Endothermic(henry))\n\"\"\""
    ]
  },
  {
    "id": 221,
    "question": "Yevgeny Kurochkin discovered a new bird genus.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrehistoric(ambiortus) ∧ BirdGenus(ambiortus)\n∀x(KnownSpeciesOf(x, ambiortus) → IsSpecies(x, ambiortusDementjevi))\nLiveIn(ambiortusDementjevi, mongolia)\nDiscover(yevgenykurochkin, ambiortus)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Discover(yevgenykurochkin, x) ∧ BirdGenus(x))\n\"\"\""
    ]
  },
  {
    "id": 222,
    "question": "There is a species of Ambiortus that doesn't live in Mongolia.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrehistoric(ambiortus) ∧ BirdGenus(ambiortus)\n∀x(KnownSpeciesOf(x, ambiortus) → IsSpecies(x, ambiortusDementjevi))\nLiveIn(ambiortusDementjevi, mongolia)\nDiscover(yevgenykurochkin, ambiortus)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (KnownSpeciesOf(x, ambiortus) ∧ ¬LiveIn(x, mongolia))\n\"\"\""
    ]
  },
  {
    "id": 223,
    "question": "Yevgeny Kurochkin lived in Mongolia.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrehistoric(ambiortus) ∧ BirdGenus(ambiortus)\n∀x(KnownSpeciesOf(x, ambiortus) → IsSpecies(x, ambiortusDementjevi))\nLiveIn(ambiortusDementjevi, mongolia)\nDiscover(yevgenykurochkin, ambiortus)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLiveIn(yevgenykurochkin, mongolia)\n\"\"\""
    ]
  },
  {
    "id": 224,
    "question": "All species of Ambiortus live in Mongolia.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrehistoric(ambiortus) ∧ BirdGenus(ambiortus)\n∀x(KnownSpeciesOf(x, ambiortus) → IsSpecies(x, ambiortusDementjevi))\nLiveIn(ambiortusDementjevi, mongolia)\nDiscover(yevgenykurochkin, ambiortus)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (SpeciesOf(x, ambiortus) → LiveIn(x, mongolia))\n\"\"\""
    ]
  },
  {
    "id": 1289,
    "question": "Jack is a seasoned software engineer interviewer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Know(x, breathFirstSearch) → Know(x, howToUseQueue))\n∀x (Seasoned(x) ∧ SoftwareEngineerInterviewer(x) ∧ At(x, google) → Know(x, breathFirstSearch))\n∀x ((Seasoned(x) ∧ SoftwareEngineerInterviewer(x) ∧ At(x, google)) ∨ Have(x, humanRights))\n∀x (Have(x, humanRights) → EntitledTo(x, rightToLifeAndLiberty))\n∀x (Know(x, howToUseQueue) → Know(x, firstInFirstOutDataStructure))\n∀x (EntitledTo(x, rightToLifeAndLiberty) → ¬DeprivedOfWithout(x, rights, dueProcessOfLaw))\n(EntitledTo(jack, rightToLifeAndLiberty) ∨ Have(jack, humanRights) ∨ Know(jack, firstInFirstOutDataStructure))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSeasoned(jack) ∧ SoftwareEngineerInterviewer(jack) ∧ At(jack, google)\n\"\"\""
    ]
  },
  {
    "id": 1290,
    "question": "Jack cannot be deprived of their rights without due process of law.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Know(x, breathFirstSearch) → Know(x, howToUseQueue))\n∀x (Seasoned(x) ∧ SoftwareEngineerInterviewer(x) ∧ At(x, google) → Know(x, breathFirstSearch))\n∀x ((Seasoned(x) ∧ SoftwareEngineerInterviewer(x) ∧ At(x, google)) ∨ Have(x, humanRights))\n∀x (Have(x, humanRights) → EntitledTo(x, rightToLifeAndLiberty))\n∀x (Know(x, howToUseQueue) → Know(x, firstInFirstOutDataStructure))\n∀x (EntitledTo(x, rightToLifeAndLiberty) → ¬DeprivedOfWithout(x, rights, dueProcessOfLaw))\n(EntitledTo(jack, rightToLifeAndLiberty) ∨ Have(jack, humanRights) ∨ Know(jack, firstInFirstOutDataStructure))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬DeprivedOfWithout(jack, rights, dueProcessOfLaw)\n\"\"\""
    ]
  },
  {
    "id": 1291,
    "question": "Jack can be deprived of their rights without due process of law.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Know(x, breathFirstSearch) → Know(x, howToUseQueue))\n∀x (Seasoned(x) ∧ SoftwareEngineerInterviewer(x) ∧ At(x, google) → Know(x, breathFirstSearch))\n∀x ((Seasoned(x) ∧ SoftwareEngineerInterviewer(x) ∧ At(x, google)) ∨ Have(x, humanRights))\n∀x (Have(x, humanRights) → EntitledTo(x, rightToLifeAndLiberty))\n∀x (Know(x, howToUseQueue) → Know(x, firstInFirstOutDataStructure))\n∀x (EntitledTo(x, rightToLifeAndLiberty) → ¬DeprivedOfWithout(x, rights, dueProcessOfLaw))\n(EntitledTo(jack, rightToLifeAndLiberty) ∨ Have(jack, humanRights) ∨ Know(jack, firstInFirstOutDataStructure))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDeprivedOfWithout(jack, rights, dueProcessOfLaw)\n\"\"\""
    ]
  },
  {
    "id": 7,
    "question": "Pierre de Rigaud de Vaudreuil built a fort in New France.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRenamedAs(fortCarillon, fortTiconderoga)\nBuilt(pierredeRigauddeVaudreuil, fortCarillon)\nLocatedIn(fortCarillon, newFrance)\n¬LocatedIn(newFrance, europe) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Built(pierredeRigauddeVaudreuil, x) ∧ LocatedIn(x, newFrance))\n\"\"\""
    ]
  },
  {
    "id": 8,
    "question": "Pierre de Rigaud de Vaudreuil built a fort in New England.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRenamedAs(fortCarillon, fortTiconderoga)\nBuilt(pierredeRigauddeVaudreuil, fortCarillon)\nLocatedIn(fortCarillon, newFrance)\n¬LocatedIn(newFrance, europe) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Built(pierredeRigauddeVaudreuil, x) ∧ LocatedIn(x, newEngland))\n\"\"\""
    ]
  },
  {
    "id": 9,
    "question": "Fort Carillon was located in Europe.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRenamedAs(fortCarillon, fortTiconderoga)\nBuilt(pierredeRigauddeVaudreuil, fortCarillon)\nLocatedIn(fortCarillon, newFrance)\n¬LocatedIn(newFrance, europe) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLocatedIn(fortCarillon, europe)\n\"\"\""
    ]
  },
  {
    "id": 840,
    "question": "Stephen Curry is an NBA player.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalSoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))\n∀x (ProfessionalCenterback(x) → ProfessionalSoccerDefender(x))\n(NBAPlayer(stephencurry) ⊕ ProfessionalSoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNBAPlayer(stephenCurry)\n\"\"\""
    ]
  },
  {
    "id": 841,
    "question": "Stephen Curry is a centerback player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalSoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))\n∀x (ProfessionalCenterback(x) → ProfessionalSoccerDefender(x))\n(NBAPlayer(stephencurry) ⊕ ProfessionalSoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProfessionalCenterback(stephenCurry)\n\"\"\""
    ]
  },
  {
    "id": 842,
    "question": "Stephen Curry is not a centerback player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalSoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))\n∀x (ProfessionalCenterback(x) → ProfessionalSoccerDefender(x))\n(NBAPlayer(stephencurry) ⊕ ProfessionalSoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ProfessionalCenterback(stephenCurry)\n\"\"\""
    ]
  },
  {
    "id": 1415,
    "question": "Inception is a folk song.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Song(x) → ¬Visual(x))\n∀x (FolkSong(x) → Song(x))\n∀x (Video(x) → Visual(x))\n∀x (Movie(x) → Video(x))\n∀x (ScifiMovie(x) → Movie(x))\nScifiMovie(inception)\n¬FolkSong(mac) ∧ ¬ScifiMovie(mac)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFolkSong(inception)\n\"\"\""
    ]
  },
  {
    "id": 1416,
    "question": "Inception is not a folk song.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Song(x) → ¬Visual(x))\n∀x (FolkSong(x) → Song(x))\n∀x (Video(x) → Visual(x))\n∀x (Movie(x) → Video(x))\n∀x (ScifiMovie(x) → Movie(x))\nScifiMovie(inception)\n¬FolkSong(mac) ∧ ¬ScifiMovie(mac)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬FolkSong(inception)\n\"\"\""
    ]
  },
  {
    "id": 1417,
    "question": "Inception is either a video or a folk song.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Song(x) → ¬Visual(x))\n∀x (FolkSong(x) → Song(x))\n∀x (Video(x) → Visual(x))\n∀x (Movie(x) → Video(x))\n∀x (ScifiMovie(x) → Movie(x))\nScifiMovie(inception)\n¬FolkSong(mac) ∧ ¬ScifiMovie(mac)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVideo(inception) ⊕ FolkSong(inception)\n\"\"\""
    ]
  },
  {
    "id": 1418,
    "question": "Mac is a video.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Song(x) → ¬Visual(x))\n∀x (FolkSong(x) → Song(x))\n∀x (Video(x) → Visual(x))\n∀x (Movie(x) → Video(x))\n∀x (ScifiMovie(x) → Movie(x))\nScifiMovie(inception)\n¬FolkSong(mac) ∧ ¬ScifiMovie(mac)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVideo(mac)\n\"\"\""
    ]
  },
  {
    "id": 1060,
    "question": "Reasoning with Modus Ponens is based on facts and rules.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InductiveReasoning(x) → DeriveFrom(generalPrinciple, observations))\n∀x (MajorArgumentForm(x) → (InductiveReasoning(x) ⊕ DeductiveReasoning(x))\n∀x (DeductiveReasoning(x) → (BasedOn(x, fact) ∨ BasedOn(x, rule)))\n∀x ((BasedOn(x, fact) ∨ BasedOn(x, rule)) → (¬UsedFor(x, statisticalGeneralization)))\n¬(InductiveReasoning(modusPonens) ∧ UsedFor(modusPonens, statisticalGeneralization))\nArgumentForm(modusPonens)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBasedOn(x, fact) ∨ BasedOn(x, rule)\n\"\"\""
    ]
  },
  {
    "id": 1061,
    "question": "Modus Ponens derives general principles from a body of observations and is used for statistical generalization.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InductiveReasoning(x) → DeriveFrom(generalPrinciple, observations))\n∀x (MajorArgumentForm(x) → (InductiveReasoning(x) ⊕ DeductiveReasoning(x))\n∀x (DeductiveReasoning(x) → (BasedOn(x, fact) ∨ BasedOn(x, rule)))\n∀x ((BasedOn(x, fact) ∨ BasedOn(x, rule)) → (¬UsedFor(x, statisticalGeneralization)))\n¬(InductiveReasoning(modusPonens) ∧ UsedFor(modusPonens, statisticalGeneralization))\nArgumentForm(modusPonens)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDeriveFrom(generalPrinciple, observations) ∧ UsedFor(x, statisticalGeneralization)\n\"\"\""
    ]
  },
  {
    "id": 1062,
    "question": "If Modus Ponens either derives general principles from a body of observations and is used for statistical generalization, or neither, then Modus Ponens is is neither used in inductive reasoning  nor used for statistical generalization.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InductiveReasoning(x) → DeriveFrom(generalPrinciple, observations))\n∀x (MajorArgumentForm(x) → (InductiveReasoning(x) ⊕ DeductiveReasoning(x))\n∀x (DeductiveReasoning(x) → (BasedOn(x, fact) ∨ BasedOn(x, rule)))\n∀x ((BasedOn(x, fact) ∨ BasedOn(x, rule)) → (¬UsedFor(x, statisticalGeneralization)))\n¬(InductiveReasoning(modusPonens) ∧ UsedFor(modusPonens, statisticalGeneralization))\nArgumentForm(modusPonens)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Derive(generalPrinciple, observations) ⊕ UsedFor(x, statisticalGeneralization)) → (¬InductiveReasoning(modusPonens) ∧ (¬UsedFor(modusPonens, statisticalGeneralization)))\n\"\"\""
    ]
  },
  {
    "id": 1133,
    "question": "Jack struggles at half court shots.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))\n∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStruggleAt(jack, halfCourtShot)\n\"\"\""
    ]
  },
  {
    "id": 1134,
    "question": "Jack is bad at mid-range shots.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))\n∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBadAt(jack, midRangeShot)\n\"\"\""
    ]
  },
  {
    "id": 1135,
    "question": "Jack is solid at shooting 2-pointers or bad at mid-range shots.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))\n∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoodAt(jack, twos) ∨ BadAt(jack, midRangeShot)\n\"\"\""
    ]
  },
  {
    "id": 1136,
    "question": "Jack is either solid at shooting 2-pointers or bad at mid-range shots.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))\n∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoodAt(jack, twos) ⊕ BadAt(jack, midRangeShot)\n\"\"\""
    ]
  },
  {
    "id": 1137,
    "question": "Jack is a trick-shot artist or bad at mid-range shots.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))\n∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTrickShotArtist(jack) ∨ BadAt(jack, midRangeShot))\n\"\"\""
    ]
  },
  {
    "id": 1138,
    "question": "Jack is either a trick-shot artist or bad at mid-range shots.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))\n∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTrickShotArtist(jack) ⊕ BadAt(jack, midRangeShots)\n\"\"\""
    ]
  },
  {
    "id": 1139,
    "question": "Jack is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))\n∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoodAt(jack, threes) ⊕ BadAt(jack, midRangeShot)\n\"\"\""
    ]
  },
  {
    "id": 1140,
    "question": "If Jack is not solid at shooting 2-pointers and bad at mid-range shots, then Jack is not solid at shooting 2-pointers and is a player who successfully shoots a high percentage of 3-pointers.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))\n∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBadAt(jack, midRangeShot) ∧ GoodAt(jack, twos) → ¬GoodAt(jack, twos) ∧ GoodAt(jack, threes)\n\"\"\""
    ]
  },
  {
    "id": 1141,
    "question": "If Jack is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Jack struggles at half court shots and is bad at mid-range shots.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))\n∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))\n∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoodAt(jack, twos) ∨ GoodAt(jack, threes) → BadAt(jack, halfCourtShot) ∧ BadAt(jack, midRangeShot)\n\"\"\""
    ]
  },
  {
    "id": 715,
    "question": "No plants are mushrooms.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plant(x) → ¬Fungi(x))\n∀x (Mushroom(x) → Fungi(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Plant(x) → ¬Mushroom(x))\n\"\"\""
    ]
  },
  {
    "id": 735,
    "question": "Some streets are dustless.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Road(x) → ¬Dustless(x))\n∃x ∃y (Street(x) ∧ Street(y) ∧ Road(x) ∧ Road(y) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Street(x) ∧ Street(y) ∧ Dustless(x) ∧ Dustless(y) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 628,
    "question": "People traveling in business class from New York City to Seattle will be uncomfortable.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLocatedOn(newYorkCity, eastCoast)\nLocatedOn(seattle, westCoast)\n∀x ∀y ∀z ((TravelingFrom(x, y) ∧ LocatedOn(y, eastcoast) ∧ TravelingTo(x, z) ∧ LocatedOn(z, westcoast)) → OnLongFlight(x))\n∀x (InBuisnessClass(x) ∧ TravelingTo(x, seattle) ∧ TravelingFrom(x, newYorkCity) → ¬InFirstClass(x))\n∀x (OnLongFlight(x) ∧ ¬InFirstClass(x) → Uncomfortable(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (TravelingTo(x, seattle) ∧ TravelingFrom(x, newYorkCity) ∧ uncomfortable(x))\n\"\"\""
    ]
  },
  {
    "id": 355,
    "question": "Singh Kaur makes a lot of money.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Musician(x) → Have(x, busyLife))\nMusician(singhKaur) ∧ Famous(singhKaur)\n∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeALotOfMoney(x))\n∃x (Musician(x) ∧ (Singer(x) ∨ Writer(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMakeALotOfMoney(singhKaur)\n\"\"\""
    ]
  },
  {
    "id": 356,
    "question": "Singh Kaur is a writer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Musician(x) → Have(x, busyLife))\nMusician(singhKaur) ∧ Famous(singhKaur)\n∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeALotOfMoney(x))\n∃x (Musician(x) ∧ (Singer(x) ∨ Writer(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWriter(singhKaur)\n\"\"\""
    ]
  },
  {
    "id": 357,
    "question": "Singh Kaur has a very busy life.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Musician(x) → Have(x, busyLife))\nMusician(singhKaur) ∧ Famous(singhKaur)\n∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeALotOfMoney(x))\n∃x (Musician(x) ∧ (Singer(x) ∨ Writer(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHave(singhKaur, busyLife)\n\"\"\""
    ]
  },
  {
    "id": 728,
    "question": "All buildings are magnificent.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Building(x) → Tall(x))\n∀x (Tall(x) → Height(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Building(x) → Magnificent(x))\n\"\"\""
    ]
  },
  {
    "id": 375,
    "question": "The main character of the film Garfield is childish and possessive.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCat(garfield) ∧ MainCharacterOf(garfield, filmGarfield) ∧ Orange(garfield) ∧ Fat(garfield) ∧ Like(garfield, lasagna)\nPetOf(garfield, jon) ∧ PetOf(odie, jon) ∧ ShareHomeWith(garfield, odie)\nHate(garfield, odie)\n∀x ∀y ∃z (PetOf(x, z) ∧ PetOf(y, z) ∧ Hate(x, y) → Childish(x) ∧ Possessive(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (MainCharacterOf(x, garfield) ∧ Childish(x) ∧ Possessive(x))\n\"\"\""
    ]
  },
  {
    "id": 1372,
    "question": "Hulu is capable of abstract thoughts.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → CapableOf(x, abstractThought))\n∀x (Plant(x) → ¬CapableOf(x, abstractThought))\n∀x (MulticellularCreature(x) ∧ (Autotrophic(x) ∨ DigestFoodInternally (x)) → Plant(x) ⊕ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ HumanBeing(hulu)\n(MulticellularCreature(hulu) ∧ (Autotrophic(hulu) ∨ DigestFoodInternally (hulu))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCapableOf(hulu, abstractThought)\n\"\"\""
    ]
  },
  {
    "id": 1373,
    "question": "Hulu is not capable of abstract thoughts.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → CapableOf(x, abstractThought))\n∀x (Plant(x) → ¬CapableOf(x, abstractThought))\n∀x (MulticellularCreature(x) ∧ (Autotrophic(x) ∨ DigestFoodInternally (x)) → Plant(x) ⊕ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ HumanBeing(hulu)\n(MulticellularCreature(hulu) ∧ (Autotrophic(hulu) ∨ DigestFoodInternally (hulu))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬CapableOf(hulu, abstractThought)\n\"\"\""
    ]
  },
  {
    "id": 1374,
    "question": "Hulu is dirt.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → CapableOf(x, abstractThought))\n∀x (Plant(x) → ¬CapableOf(x, abstractThought))\n∀x (MulticellularCreature(x) ∧ (Autotrophic(x) ∨ DigestFoodInternally (x)) → Plant(x) ⊕ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ HumanBeing(hulu)\n(MulticellularCreature(hulu) ∧ (Autotrophic(hulu) ∨ DigestFoodInternally (hulu))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDirt(hulu)\n\"\"\""
    ]
  },
  {
    "id": 1375,
    "question": "Hulu is an animal or dirt.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → CapableOf(x, abstractThought))\n∀x (Plant(x) → ¬CapableOf(x, abstractThought))\n∀x (MulticellularCreature(x) ∧ (Autotrophic(x) ∨ DigestFoodInternally (x)) → Plant(x) ⊕ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ HumanBeing(hulu)\n(MulticellularCreature(hulu) ∧ (Autotrophic(hulu) ∨ DigestFoodInternally (hulu))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAnimal(hulu) ∨ Dirt(hulu)\n\"\"\""
    ]
  },
  {
    "id": 1376,
    "question": "Hulu is either an animal or dirt, but not both.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → CapableOf(x, abstractThought))\n∀x (Plant(x) → ¬CapableOf(x, abstractThought))\n∀x (MulticellularCreature(x) ∧ (Autotrophic(x) ∨ DigestFoodInternally (x)) → Plant(x) ⊕ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ HumanBeing(hulu)\n(MulticellularCreature(hulu) ∧ (Autotrophic(hulu) ∨ DigestFoodInternally (hulu))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAnimal(hulu) ⊕ Dirt(hulu)\n\"\"\""
    ]
  },
  {
    "id": 1377,
    "question": "If Hulu is either an animal or dirt, then Hulu is capable of abstract thoughts and is dirt.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → CapableOf(x, abstractThought))\n∀x (Plant(x) → ¬CapableOf(x, abstractThought))\n∀x (MulticellularCreature(x) ∧ (Autotrophic(x) ∨ DigestFoodInternally (x)) → Plant(x) ⊕ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ HumanBeing(hulu)\n(MulticellularCreature(hulu) ∧ (Autotrophic(hulu) ∨ DigestFoodInternally (hulu))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAnimal(hulu) ⊕ Dirt(hulu) → CapableOf(hulu, abstractThought) ∧ Dirt(hulu)\n\"\"\""
    ]
  },
  {
    "id": 135,
    "question": "The Controlled Substances Act prevents harmful things.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ControlledSubstances(x) → Drugs(x))\n∃x ∃y (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ (¬(x=y)) ∧ Beneficial(x) ∧ Harmful(y))\n∀x ∀y ((Child(x) ∧ ControlledSubstances(y) ∧ ExposedTo(x, y)) → InChemicalEndangerment(x))\n∀x (InChemicalEndangerment(x) → Harmful(x))\nPassedIn(controlledSubstancesAct, yr1971) ∧ Act(controlledSubstancesAct)\n∃x ∃y(Act(x) ∧ PreventsHarm(x) ∧ (¬(x=y)) ∧ Act(y) ∧ PreventsHarm(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPreventsHarm(controlledSubstancesAct)\n\"\"\""
    ]
  },
  {
    "id": 136,
    "question": "Some drugs are beneficial.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ControlledSubstances(x) → Drugs(x))\n∃x ∃y (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ (¬(x=y)) ∧ Beneficial(x) ∧ Harmful(y))\n∀x ∀y ((Child(x) ∧ ControlledSubstances(y) ∧ ExposedTo(x, y)) → InChemicalEndangerment(x))\n∀x (InChemicalEndangerment(x) → Harmful(x))\nPassedIn(controlledSubstancesAct, yr1971) ∧ Act(controlledSubstancesAct)\n∃x ∃y(Act(x) ∧ PreventsHarm(x) ∧ (¬(x=y)) ∧ Act(y) ∧ PreventsHarm(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y(Drugs(x) ∧ Beneficial(x) ∧ (¬(x=y)) ∧ Drugs(y) ∧ Beneficial(y))\n\"\"\""
    ]
  },
  {
    "id": 137,
    "question": "A child in chemical endangerment is in harm.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ControlledSubstances(x) → Drugs(x))\n∃x ∃y (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ (¬(x=y)) ∧ Beneficial(x) ∧ Harmful(y))\n∀x ∀y ((Child(x) ∧ ControlledSubstances(y) ∧ ExposedTo(x, y)) → InChemicalEndangerment(x))\n∀x (InChemicalEndangerment(x) → Harmful(x))\nPassedIn(controlledSubstancesAct, yr1971) ∧ Act(controlledSubstancesAct)\n∃x ∃y(Act(x) ∧ PreventsHarm(x) ∧ (¬(x=y)) ∧ Act(y) ∧ PreventsHarm(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ((Child(x) ∧ InChemicalEndangerment(x)) → Harmful(x))\n\"\"\""
    ]
  },
  {
    "id": 816,
    "question": "Mark Zuckerberg is an entrepreneur.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Have(x, corporateJob) → ¬Take(x, financialRisk))\n∀x (Entrepreneur(x) → Take(x, financialRisk))\n∀x (RiskAverse(x) → Have(x, corporateJob))\n∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ HateWorkingFor(x, y) ∧ HateWorkingFor(x, z)) → Entrepreneur(x))\n¬Entrepreneur(markZuckerberg) ∧ ¬(∃y ∃z (¬(y=markZuckerberg) ∧ ¬(z=markZuckerberg) ∧ ¬(y=z) ∧ HateWorkingFor(markZuckerberg, y) ∧ HateWorkingFor(markZuckerberg, z))) → ¬RiskAverse(markZuckerberg)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEntrepreneur(markZuckerberg)\n\"\"\""
    ]
  },
  {
    "id": 817,
    "question": "Mark Zuckerberg is a risk-averse person.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Have(x, corporateJob) → ¬Take(x, financialRisk))\n∀x (Entrepreneur(x) → Take(x, financialRisk))\n∀x (RiskAverse(x) → Have(x, corporateJob))\n∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ HateWorkingFor(x, y) ∧ HateWorkingFor(x, z)) → Entrepreneur(x))\n¬Entrepreneur(markZuckerberg) ∧ ¬(∃y ∃z (¬(y=markZuckerberg) ∧ ¬(z=markZuckerberg) ∧ ¬(y=z) ∧ HateWorkingFor(markZuckerberg, y) ∧ HateWorkingFor(markZuckerberg, z))) → ¬RiskAverse(markZuckerberg)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRiskAverse(markZuckerberg)\n\"\"\""
    ]
  },
  {
    "id": 818,
    "question": "Mark Zuckerberg is not a risk-averse person.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Have(x, corporateJob) → ¬Take(x, financialRisk))\n∀x (Entrepreneur(x) → Take(x, financialRisk))\n∀x (RiskAverse(x) → Have(x, corporateJob))\n∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ HateWorkingFor(x, y) ∧ HateWorkingFor(x, z)) → Entrepreneur(x))\n¬Entrepreneur(markZuckerberg) ∧ ¬(∃y ∃z (¬(y=markZuckerberg) ∧ ¬(z=markZuckerberg) ∧ ¬(y=z) ∧ HateWorkingFor(markZuckerberg, y) ∧ HateWorkingFor(markZuckerberg, z))) → ¬RiskAverse(markZuckerberg)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬RiskAverse(markZuckerberg)\n\"\"\""
    ]
  },
  {
    "id": 569,
    "question": "Some wildfeed is violating copyright laws.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))\n∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))\n∀x (Prerecorded(x) → CopyrightViolation(x))\n∀x (Program(x) → Prerecorded(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Wildfeed(x) ∧ CopyrightViolation(x))\n\"\"\""
    ]
  },
  {
    "id": 570,
    "question": "Wildfeed can be prerecorded.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))\n∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))\n∀x (Prerecorded(x) → CopyrightViolation(x))\n∀x (Program(x) → Prerecorded(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Wildfeed(x) ∧ Prerecorded(x))\n\"\"\""
    ]
  },
  {
    "id": 571,
    "question": "Syndicated shows are copyright violations.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))\n∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))\n∀x (Prerecorded(x) → CopyrightViolation(x))\n∀x (Program(x) → Prerecorded(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (SyndicatedShows(x) ∧ CopyrightViolation(x))\n\"\"\""
    ]
  },
  {
    "id": 376,
    "question": "A highly developed city is located in the western hemisphere of the earth.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLocatedIn(newYorkCity, unitedStatesOfAmerica)\nLocatedIn(usa, northAmerica)\nLocatedIn(northAmerica, westernHemisphere)\nHighlyDeveloped(newYorkCity)\n∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (HighlyDeveloped(x) ∧ LocatedIn(x, westernHemisphere))\n\"\"\""
    ]
  },
  {
    "id": 377,
    "question": "The United States of America is not located in the western hemisphere of the earth.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLocatedIn(newYorkCity, unitedStatesOfAmerica)\nLocatedIn(usa, northAmerica)\nLocatedIn(northAmerica, westernHemisphere)\nHighlyDeveloped(newYorkCity)\n∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LocatedIn(unitedStatesOfAmerica, westHemisphere)\n\"\"\""
    ]
  },
  {
    "id": 378,
    "question": "New York City is located in New York State.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLocatedIn(newYorkCity, unitedStatesOfAmerica)\nLocatedIn(usa, northAmerica)\nLocatedIn(northAmerica, westernHemisphere)\nHighlyDeveloped(newYorkCity)\n∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLocatedIn(newYorkCity, newYork)\n\"\"\""
    ]
  },
  {
    "id": 427,
    "question": "There is a poem written by an ancient Roman writer with a strong analogy of human aging.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoem(catullus4) ∧ WrittenBy(catullus4, catullus) ∧ AncientRomanWriter(catullus)\nStory(catullus4) ∧ About(catullus4, retirementOfAWellTraveledShip)\nPoem(catullus4) ∧ StrongAgingAnalogy(catullus4)\nPoem(catullus4) ∧ WrittenIn(catullus4, iambicTrimeter) ∧ Convey(catullus4, aSenseOfSpeedOverTheWaves)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Poem(x) ∧ WrittenBy(x, y) ∧ AncietRomanWriter(y) ∧ StrongAgingAnalogy(x))\n\"\"\""
    ]
  },
  {
    "id": 428,
    "question": "There is a poem written by an ancient Roman writer in iambic trimeter.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoem(catullus4) ∧ WrittenBy(catullus4, catullus) ∧ AncientRomanWriter(catullus)\nStory(catullus4) ∧ About(catullus4, retirementOfAWellTraveledShip)\nPoem(catullus4) ∧ StrongAgingAnalogy(catullus4)\nPoem(catullus4) ∧ WrittenIn(catullus4, iambicTrimeter) ∧ Convey(catullus4, aSenseOfSpeedOverTheWaves)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Poem(x) ∧ WrittenBy(x, y) ∧ AncientRomanWriter(y) ∧ WrittenIn(x, iambicTrimeter))\n\"\"\""
    ]
  },
  {
    "id": 429,
    "question": "Callus 4 is written in an unusual iambic trimeter to convey a strong analogy of human aging.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoem(catullus4) ∧ WrittenBy(catullus4, catullus) ∧ AncientRomanWriter(catullus)\nStory(catullus4) ∧ About(catullus4, retirementOfAWellTraveledShip)\nPoem(catullus4) ∧ StrongAgingAnalogy(catullus4)\nPoem(catullus4) ∧ WrittenIn(catullus4, iambicTrimeter) ∧ Convey(catullus4, aSenseOfSpeedOverTheWaves)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPoem(catullus4) ∧ WrittenIn(catullus4, iambicTrimeter) ∧ StrongAgingAnalogy(catullus4)\n\"\"\""
    ]
  },
  {
    "id": 666,
    "question": "Michael Crichton has directed a film about malfunctioning robots.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(westworld) ∧ ScienceFictionThriller(westworld)\nDebut(westworld, year2016) ∧ TvSeries(westworld)\nAdapted(westworld, westworldTheFilm) ∧ Produce(westworldTheFilm, year1973) ∧ Wrote(michael, westworldTheFilm) ∧ Directed(michael, westworldTheFilm)\nFilm(westworldTheFilm) ∧ About(westworldTheFilm, malfunctioningRobots)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Film(x) ∧ Directed(michael, x) ∧ About(x, malfunctioningRobots))\n\"\"\""
    ]
  },
  {
    "id": 667,
    "question": "An American TV series debuted in 2016.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(westworld) ∧ ScienceFictionThriller(westworld)\nDebut(westworld, year2016) ∧ TvSeries(westworld)\nAdapted(westworld, westworldTheFilm) ∧ Produce(westworldTheFilm, year1973) ∧ Wrote(michael, westworldTheFilm) ∧ Directed(michael, westworldTheFilm)\nFilm(westworldTheFilm) ∧ About(westworldTheFilm, malfunctioningRobots)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (TVSeries(x) ∧ American(x) ∧ Debut(x, year2016))\n\"\"\""
    ]
  },
  {
    "id": 655,
    "question": "Russia did not win fewer gold medals than China.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeldIn(2008SummerOlympics, beijingChina)\nSecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)\nWon(china, theMostGoldMedals)\nPlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)\nPlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)\n∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬FewerGoldMedalsThan(russia, china)\n\"\"\""
    ]
  },
  {
    "id": 656,
    "question": "Russia won fewer gold medals than China.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeldIn(2008SummerOlympics, beijingChina)\nSecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)\nWon(china, theMostGoldMedals)\nPlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)\nPlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)\n∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFewerGoldMedalsThan(russia, china)\n\"\"\""
    ]
  },
  {
    "id": 77,
    "question": "Xiangshan and Diecai are districts in the same city.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)\n¬DistrictIn(yangshuo, guilin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (DistrictIn(xiangshan, x) ∧ DistrictIn(diecai, x) ∧ City(x))\n\"\"\""
    ]
  },
  {
    "id": 78,
    "question": "Xiufeng is a district in Guilin.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)\n¬DistrictIn(yangshuo, guilin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDistrictIn(xiufeng, guilin)\n\"\"\""
    ]
  },
  {
    "id": 79,
    "question": "Kowloon District is in Hong Kong.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)\n¬DistrictIn(yangshuo, guilin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDistrictIn(kowloon, hongKong)\n\"\"\""
    ]
  },
  {
    "id": 999,
    "question": "Peter enjoys going out often to restaurants with friends.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MichaelsNeightbor(x) ∧ GrowIn(x, vegetable, garden) → Have(x, ampleSpace))\n∀x (MichaelsNeightbor(x) ∧ YoungWorkingProfession(x) ∧ LiveIn(x, largeCity) → ¬Have(x, ampleSpace))\n∀x (MichaelsNeightbor(x) ∧ OrderOften(x, takeout) → Grow(x, vegetable, garden))\n∀x (MichaelsNeightbor(x) ∧ EnjoyGoingOutOftenToWith(x, restaurant, friend) → OrderOften(x, takeout))\n∀x (MichaelsNeightbor(x) ∧ ToutOver(x, homecookedMeals, fastFood) → EnjoyGoingOutOftenToWith(x, restaurant, friend))\nMichaelsNeightbor(peter) ∧ (GrowIn(peter, vegetable, garden) ∨ ToutOver(peter, homecookedMeals, fastFood))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEnjoyGoingOutOftenTo(peter, restaurant, friend)\n\"\"\""
    ]
  },
  {
    "id": 1000,
    "question": "Peter is a young working professional who lives in large cities.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MichaelsNeightbor(x) ∧ GrowIn(x, vegetable, garden) → Have(x, ampleSpace))\n∀x (MichaelsNeightbor(x) ∧ YoungWorkingProfession(x) ∧ LiveIn(x, largeCity) → ¬Have(x, ampleSpace))\n∀x (MichaelsNeightbor(x) ∧ OrderOften(x, takeout) → Grow(x, vegetable, garden))\n∀x (MichaelsNeightbor(x) ∧ EnjoyGoingOutOftenToWith(x, restaurant, friend) → OrderOften(x, takeout))\n∀x (MichaelsNeightbor(x) ∧ ToutOver(x, homecookedMeals, fastFood) → EnjoyGoingOutOftenToWith(x, restaurant, friend))\nMichaelsNeightbor(peter) ∧ (GrowIn(peter, vegetable, garden) ∨ ToutOver(peter, homecookedMeals, fastFood))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nYoungWorkingProfession(peter) ∧ LiveIn(peter, largeCity)\n\"\"\""
    ]
  },
  {
    "id": 1001,
    "question": "Peter grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MichaelsNeightbor(x) ∧ GrowIn(x, vegetable, garden) → Have(x, ampleSpace))\n∀x (MichaelsNeightbor(x) ∧ YoungWorkingProfession(x) ∧ LiveIn(x, largeCity) → ¬Have(x, ampleSpace))\n∀x (MichaelsNeightbor(x) ∧ OrderOften(x, takeout) → Grow(x, vegetable, garden))\n∀x (MichaelsNeightbor(x) ∧ EnjoyGoingOutOftenToWith(x, restaurant, friend) → OrderOften(x, takeout))\n∀x (MichaelsNeightbor(x) ∧ ToutOver(x, homecookedMeals, fastFood) → EnjoyGoingOutOftenToWith(x, restaurant, friend))\nMichaelsNeightbor(peter) ∧ (GrowIn(peter, vegetable, garden) ∨ ToutOver(peter, homecookedMeals, fastFood))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrowIn(peter, vegetable, garden) ∨ (YoungWorkingProfession(peter) ∧ LiveIn(peter, largeCity))\n\"\"\""
    ]
  },
  {
    "id": 183,
    "question": "ModelXX is easy to operate.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OwnedBy(x, company) → ConnectedTo(x, googleHome))\n∀x (OwnedBy(x, employee) → ConnectedTo(x, companyWiFi))\n∀x (ConnectedTo(x, googleHome) → ControlledBy(x, managers))\n∀x (ConnectedTo(x, companyWiFi) → EasyToOperate(x))\nOwnedBy(modelXX, employee)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEasyToOperate(modelXX)\n\"\"\""
    ]
  },
  {
    "id": 184,
    "question": "ModelXX is controlled by managers.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OwnedBy(x, company) → ConnectedTo(x, googleHome))\n∀x (OwnedBy(x, employee) → ConnectedTo(x, companyWiFi))\n∀x (ConnectedTo(x, googleHome) → ControlledBy(x, managers))\n∀x (ConnectedTo(x, companyWiFi) → EasyToOperate(x))\nOwnedBy(modelXX, employee)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nControlledBy(modelXX, managers)\n\"\"\""
    ]
  },
  {
    "id": 185,
    "question": "ModelXX is connected to Google Home.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OwnedBy(x, company) → ConnectedTo(x, googleHome))\n∀x (OwnedBy(x, employee) → ConnectedTo(x, companyWiFi))\n∀x (ConnectedTo(x, googleHome) → ControlledBy(x, managers))\n∀x (ConnectedTo(x, companyWiFi) → EasyToOperate(x))\nOwnedBy(modelXX, employee)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nConnectedTo(modelXX, googleHome)\n\"\"\""
    ]
  },
  {
    "id": 1130,
    "question": "Ryan is an interesting soloist.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))\n∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))\nPerformAt(ryan, newHavenSymphonyOrchestra)\n(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInterestingSoloist(ryan)\n\"\"\""
    ]
  },
  {
    "id": 1131,
    "question": "Ryan is either a permanent member of an orchestra or a touring soloist musician.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))\n∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))\nPerformAt(ryan, newHavenSymphonyOrchestra)\n(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(PermanentMemberOf(ryan, orchestra) ⊕ TouringMusician(ryan))\n\"\"\""
    ]
  },
  {
    "id": 1132,
    "question": "Ryan is either a permanent member of an orchestra or has a temporary role at the orchestra.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))\n∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))\n∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))\nPerformAt(ryan, newHavenSymphonyOrchestra)\n(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(PermanentMemberOf(ryan, orchestra) ⊕ HaveTemporaryRoleAt(ryan, orchestra))\n\"\"\""
    ]
  },
  {
    "id": 1406,
    "question": "Harry is cool.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, potterville) ∧ Yell(x) → ¬Cool(x))\n∀x (In(x, potterville) ∧ Angry(x) → Yell(x))\n∀x (In(x, potterville) ∧ Fly(x) → Cool(x))\n∀x (In(x, potterville) ∧ Know(x, magic) → Fly(x))\n∀x (In(x, potterville) ∧ Wizard(x) → Know(x, magic))\nIn(harry, potterville) ∧ (Yell(harry) ⊕ Fly(harry))\nWizard(potter) ∧ Fly(potter)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCool(harry)\n\"\"\""
    ]
  },
  {
    "id": 1407,
    "question": "Harry is not cool.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, potterville) ∧ Yell(x) → ¬Cool(x))\n∀x (In(x, potterville) ∧ Angry(x) → Yell(x))\n∀x (In(x, potterville) ∧ Fly(x) → Cool(x))\n∀x (In(x, potterville) ∧ Know(x, magic) → Fly(x))\n∀x (In(x, potterville) ∧ Wizard(x) → Know(x, magic))\nIn(harry, potterville) ∧ (Yell(harry) ⊕ Fly(harry))\nWizard(potter) ∧ Fly(potter)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Cool(harry)\n\"\"\""
    ]
  },
  {
    "id": 1408,
    "question": "Harry is a wizard or angry.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, potterville) ∧ Yell(x) → ¬Cool(x))\n∀x (In(x, potterville) ∧ Angry(x) → Yell(x))\n∀x (In(x, potterville) ∧ Fly(x) → Cool(x))\n∀x (In(x, potterville) ∧ Know(x, magic) → Fly(x))\n∀x (In(x, potterville) ∧ Wizard(x) → Know(x, magic))\nIn(harry, potterville) ∧ (Yell(harry) ⊕ Fly(harry))\nWizard(potter) ∧ Fly(potter)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWizard(harry) ∨ Angry(harry)\n\"\"\""
    ]
  },
  {
    "id": 1409,
    "question": "Harry is neither a wizard nor angry.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, potterville) ∧ Yell(x) → ¬Cool(x))\n∀x (In(x, potterville) ∧ Angry(x) → Yell(x))\n∀x (In(x, potterville) ∧ Fly(x) → Cool(x))\n∀x (In(x, potterville) ∧ Know(x, magic) → Fly(x))\n∀x (In(x, potterville) ∧ Wizard(x) → Know(x, magic))\nIn(harry, potterville) ∧ (Yell(harry) ⊕ Fly(harry))\nWizard(potter) ∧ Fly(potter)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Wizard(harry) ∧ ¬Angry(harry)\n\"\"\""
    ]
  },
  {
    "id": 1248,
    "question": "G-910 is displayed on the homepage.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ThisBrand(x) ∧ Product(x) → (ProducedIn(x, china) ⊕ ProducedIn(x, uS)))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, china)) → Labeled(x))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, us)) → SoldIn(x, us))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ Labeled(x)) → Cheaper(x))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ SoldIn(x, us)) → SoldIn(x, walmart))\n∀x (ThisBrand(x) ∧ Product(x) ∧ DisplayedIn(x, homepage) → SoldIn(x, walmart))\n∀x (ThisBrand(x) ∧ Product(x) ∧ ReturnedBy(x, customer) → ¬SoldIn(x, walmart))\nProduct(g910) ∧ ThisBrand(g910) ∧ (¬(DisplayedIn(g910, homepage) ⊕ Cheaper(g910)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDisplayedIn(g910, homepage)\n\"\"\""
    ]
  },
  {
    "id": 1249,
    "question": "G-910 is not displayed on the homepage.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ThisBrand(x) ∧ Product(x) → (ProducedIn(x, china) ⊕ ProducedIn(x, uS)))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, china)) → Labeled(x))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, us)) → SoldIn(x, us))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ Labeled(x)) → Cheaper(x))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ SoldIn(x, us)) → SoldIn(x, walmart))\n∀x (ThisBrand(x) ∧ Product(x) ∧ DisplayedIn(x, homepage) → SoldIn(x, walmart))\n∀x (ThisBrand(x) ∧ Product(x) ∧ ReturnedBy(x, customer) → ¬SoldIn(x, walmart))\nProduct(g910) ∧ ThisBrand(g910) ∧ (¬(DisplayedIn(g910, homepage) ⊕ Cheaper(g910)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬DisplayedIn(g910, homepage)\n\"\"\""
    ]
  },
  {
    "id": 1250,
    "question": "G-910 is a product returned by customers.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ThisBrand(x) ∧ Product(x) → (ProducedIn(x, china) ⊕ ProducedIn(x, uS)))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, china)) → Labeled(x))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, us)) → SoldIn(x, us))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ Labeled(x)) → Cheaper(x))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ SoldIn(x, us)) → SoldIn(x, walmart))\n∀x (ThisBrand(x) ∧ Product(x) ∧ DisplayedIn(x, homepage) → SoldIn(x, walmart))\n∀x (ThisBrand(x) ∧ Product(x) ∧ ReturnedBy(x, customer) → ¬SoldIn(x, walmart))\nProduct(g910) ∧ ThisBrand(g910) ∧ (¬(DisplayedIn(g910, homepage) ⊕ Cheaper(g910)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nThisBrand(g910) ∧ ReturnedBy(g910, customer)\n\"\"\""
    ]
  },
  {
    "id": 1251,
    "question": "G-910 is a product returned by customers or sold in Walmart.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ThisBrand(x) ∧ Product(x) → (ProducedIn(x, china) ⊕ ProducedIn(x, uS)))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, china)) → Labeled(x))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, us)) → SoldIn(x, us))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ Labeled(x)) → Cheaper(x))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ SoldIn(x, us)) → SoldIn(x, walmart))\n∀x (ThisBrand(x) ∧ Product(x) ∧ DisplayedIn(x, homepage) → SoldIn(x, walmart))\n∀x (ThisBrand(x) ∧ Product(x) ∧ ReturnedBy(x, customer) → ¬SoldIn(x, walmart))\nProduct(g910) ∧ ThisBrand(g910) ∧ (¬(DisplayedIn(g910, homepage) ⊕ Cheaper(g910)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nThisBrand(g910) ∧ (ReturnedBy(g910, customer) ∨ SoldIn(g910, walmart))\n\"\"\""
    ]
  },
  {
    "id": 1252,
    "question": "G-910 is either returned by customers or sold in Walmart.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ThisBrand(x) ∧ Product(x) → (ProducedIn(x, china) ⊕ ProducedIn(x, uS)))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, china)) → Labeled(x))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, us)) → SoldIn(x, us))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ Labeled(x)) → Cheaper(x))\n∀x ((ThisBrand(x) ∧ Product(x) ∧ SoldIn(x, us)) → SoldIn(x, walmart))\n∀x (ThisBrand(x) ∧ Product(x) ∧ DisplayedIn(x, homepage) → SoldIn(x, walmart))\n∀x (ThisBrand(x) ∧ Product(x) ∧ ReturnedBy(x, customer) → ¬SoldIn(x, walmart))\nProduct(g910) ∧ ThisBrand(g910) ∧ (¬(DisplayedIn(g910, homepage) ⊕ Cheaper(g910)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nReturnedBy(g910, customer) ⊕ SoldIn(g910, walmart)\n\"\"\""
    ]
  },
  {
    "id": 939,
    "question": "Marcy either believes in Santa Claus or doesn't leave cookies out on Christmas Eve.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BelieveIn(x, santaClaus) ⊕ ThinkMadeUp(x, santaClaus))\n∀x (BelieveIn(x, santaClaus) → Expect(x, present, christmasMorning))\n∀x (ThinkMadeUp(x, santaClaus) → WouldBeSurprisedToSeeIn(x, santaClaus, house))\n∀x (Expect(x, present, christmasMorning) → ExcitedFor(x, christmas))\n∀x (WouldBeSurprisedToSeeIn(x, santaClaus, house) → ¬LeaveOut(x, cookies))\n¬(Expect(marcy, present, christmasMorning) ∧ ExcitedFor(marcy, christmas) ∧ BelieveIn(marcy, santaClaus))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBelieveIn(marcy, santaClaus) ⊕ LeaveOut(marcy, cookies)\n\"\"\""
    ]
  },
  {
    "id": 940,
    "question": "Marcy is not someone who both leaves out cookies on Chrismtas eve and thinks Santa Claus is made up, or Marcy believes in Santa Claus.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BelieveIn(x, santaClaus) ⊕ ThinkMadeUp(x, santaClaus))\n∀x (BelieveIn(x, santaClaus) → Expect(x, present, christmasMorning))\n∀x (ThinkMadeUp(x, santaClaus) → WouldBeSurprisedToSeeIn(x, santaClaus, house))\n∀x (Expect(x, present, christmasMorning) → ExcitedFor(x, christmas))\n∀x (WouldBeSurprisedToSeeIn(x, santaClaus, house) → ¬LeaveOut(x, cookies))\n¬(Expect(marcy, present, christmasMorning) ∧ ExcitedFor(marcy, christmas) ∧ BelieveIn(marcy, santaClaus))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(LeaveOut(marcy, cookies) ∧ ThinkMadeUp(marcy, santaClaus)) ∨ BelieveIn(marcy, santaClaus)\n\"\"\""
    ]
  },
  {
    "id": 494,
    "question": "When the police complete investigations, the prosecutor will prosecute the offender at an appropriate court.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCountry(indonesia)\n∀x ∃y (In(indonesia) ∧ Prosecutor(x) ∧ SpecialCrime(y) → InvestigatePersonally(x, y))\nCrime(corruption)\n∀x ∀y ∀z (Crime(y) ∧ PoliceCompleteInvestigation(y) ∧ Prosecutor(x) → Evidence(z) ∧ HandedTo(z, x))\n∀x (Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))\n∀x ∀y (Evidence(y) ∧ Prosecutor(x) ∧ HandedTo(x) ∧ Satisfactory(y) → ProsecuteInAppropriateCourt(x, theOffender))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (Crime(y) ∧ PoliceCompleteInvestigation(y) ∧ Prosecutor(x) → ProsecuteInAppropriateCourt(x, theOffender))\n\"\"\""
    ]
  },
  {
    "id": 495,
    "question": "In Indonesia, the prosecutor personally investigates cases of corruption.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCountry(indonesia)\n∀x ∃y (In(indonesia) ∧ Prosecutor(x) ∧ SpecialCrime(y) → InvestigatePersonally(x, y))\nCrime(corruption)\n∀x ∀y ∀z (Crime(y) ∧ PoliceCompleteInvestigation(y) ∧ Prosecutor(x) → Evidence(z) ∧ HandedTo(z, x))\n∀x (Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))\n∀x ∀y (Evidence(y) ∧ Prosecutor(x) ∧ HandedTo(x) ∧ Satisfactory(y) → ProsecuteInAppropriateCourt(x, theOffender))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(corruption) → InvestigatePersonally(x, corruption))\n\"\"\""
    ]
  },
  {
    "id": 496,
    "question": "When the police complete investigations, the prosecutor investigates personally.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCountry(indonesia)\n∀x ∃y (In(indonesia) ∧ Prosecutor(x) ∧ SpecialCrime(y) → InvestigatePersonally(x, y))\nCrime(corruption)\n∀x ∀y ∀z (Crime(y) ∧ PoliceCompleteInvestigation(y) ∧ Prosecutor(x) → Evidence(z) ∧ HandedTo(z, x))\n∀x (Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))\n∀x ∀y (Evidence(y) ∧ Prosecutor(x) ∧ HandedTo(x) ∧ Satisfactory(y) → ProsecuteInAppropriateCourt(x, theOffender))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (Crime(y) ∧ PoliceCompleteInvestigation(y) ∧ Prosecutor(x) → InvestigatePersonally(x, y))\n\"\"\""
    ]
  },
  {
    "id": 896,
    "question": "Moonwatch is a mechanical watch.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))\n∀x (DigitalWatch(x) → BatteryPoweredWatch(x))\n∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))\n∀x (SmartWatch(x) → DigitalWatch(x))\n¬(DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMechanicalWatch(moonWatch)\n\"\"\""
    ]
  },
  {
    "id": 897,
    "question": "Moonwatch is a smartwatch and a mechanical watch.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))\n∀x (DigitalWatch(x) → BatteryPoweredWatch(x))\n∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))\n∀x (SmartWatch(x) → DigitalWatch(x))\n¬(DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSmartWatch(moonwatch) ∧ MechanicalWatch(moonwatch)\n\"\"\""
    ]
  },
  {
    "id": 898,
    "question": "If Moonwatch is a smartwatch and a mechanical watch, then Moonwatch is not a mechanical watch.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))\n∀x (DigitalWatch(x) → BatteryPoweredWatch(x))\n∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))\n∀x (SmartWatch(x) → DigitalWatch(x))\n¬(DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSmartWatch(moonwatch) ∧ MechanicalWatch(moonwatch) → ¬MechanicalWatch(moonwatch)\n\"\"\""
    ]
  },
  {
    "id": 899,
    "question": "If Moonwatch is a mechanical or battery-powered watch, then Moonwatch is not a smartwatch.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))\n∀x (DigitalWatch(x) → BatteryPoweredWatch(x))\n∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))\n∀x (SmartWatch(x) → DigitalWatch(x))\n¬(DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMechanicalWatch(moonwatch)) ∨ BatteryPoweredWatch(moonwatch) → ¬SmartWatch(moonwatch)\n\"\"\""
    ]
  },
  {
    "id": 686,
    "question": "John cannot use different condiments for cooking.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Person(x) ∧ Can(x, distinguishTheTasteOfDifferentCondiments) → Can(x, useDifferentCondimentsToCook))\n∀x (Person(x) ∧ Has(x, talentOfCooking) → Can(x, distinguishTheTasteOfDifferentCondiments))\n∀x ∀y (CanMake(x, y) ∧ Meal(y) ∧ Delicious(y) ∧ Person(x) → Has(x, talentOfCooking)) \n∀x ∀y (Meal(y) ∧ PopularAt(y, party) → Delicious(y))\n∃x (Person(john) ∧ MakeMeal(john, x) ∧ Meal(x) ∧ PopularAt(x, party))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Can(john, useDifferentCondimentsToCook)\n\"\"\""
    ]
  },
  {
    "id": 696,
    "question": "In Russia, an effective monetary policy is possible.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Country(x) ∧ PossibleEffectiveMonetaryPolicy(x) → SuccessfulInflationControl(x) ∧ StongNationalCurrency(x))\n¬(∃x (Country(x) ∧ SuccessfulInflationControl(x) ∧ RegulateExchangeRate(x)))\n∀x (IntroductionOfOn(x, embargo, foreightTradeGoods) → SharpDecreasesInExport(x))\n∀x (SharpDecreasesInExport(x) → ¬StongNationalCurrency(x))\n∀x (InflationControl(x) → StongNationalCurrency(x))\nIntroductionOfOn(russia, embargo, foreightTradeGoods)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPossibleEffectiveMonetaryPolicy(russia)\n\"\"\""
    ]
  },
  {
    "id": 419,
    "question": "Viewers send funny videos to the French broadcast channel TF1 that are in French.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrenchTelevision(videoGag) ∧ AirWeekly(videoGag)\nAirOn(videoGag, frenchBroadcastChannelTF1)\n∀x (Funny(x) ∧ Video(x) ∧ SendIn(viewers, x, frenchBroadcastChannelTF1)  → AirWeekly(x) ) ∧ AirOn(videoGag, x))\n∀x (Video(x) ∧ AirOn(videoGag, x) → In(x, french))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (SendIn(viewers, x, frenchBroadcastChannelTF1) ∧ French(x))\n\"\"\""
    ]
  },
  {
    "id": 420,
    "question": "Viewers send funny videos to the French broadcast channel that are in English.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrenchTelevision(videoGag) ∧ AirWeekly(videoGag)\nAirOn(videoGag, frenchBroadcastChannelTF1)\n∀x (Funny(x) ∧ Video(x) ∧ SendIn(viewers, x, frenchBroadcastChannelTF1)  → AirWeekly(x) ) ∧ AirOn(videoGag, x))\n∀x (Video(x) ∧ AirOn(videoGag, x) → In(x, french))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (SendIn(viewers, x, frenchBroadcastChannelTF1) ∧ English(x))\n\"\"\""
    ]
  },
  {
    "id": 1381,
    "question": "Jack is a thing.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Phone(x) → Thing(x))\n∀x (Cellphone(x) → Phone(x))\n∀x (Iphone(x) → Cellphone(x))\n∀x (Employee(x) → WageEarner(x))\n∀x (WageEarner(x) → Human(x))\nEmployee(jack) ⊕ WageEarner(jack) \nHuman(jack) ⊕ Phone(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nThing(jack)\n\"\"\""
    ]
  },
  {
    "id": 1382,
    "question": "Jack is not a thing.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Phone(x) → Thing(x))\n∀x (Cellphone(x) → Phone(x))\n∀x (Iphone(x) → Cellphone(x))\n∀x (Employee(x) → WageEarner(x))\n∀x (WageEarner(x) → Human(x))\nEmployee(jack) ⊕ WageEarner(jack) \nHuman(jack) ⊕ Phone(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Thing(jack)\n\"\"\""
    ]
  },
  {
    "id": 1383,
    "question": "Jack is a thing and an iPhone.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Phone(x) → Thing(x))\n∀x (Cellphone(x) → Phone(x))\n∀x (Iphone(x) → Cellphone(x))\n∀x (Employee(x) → WageEarner(x))\n∀x (WageEarner(x) → Human(x))\nEmployee(jack) ⊕ WageEarner(jack) \nHuman(jack) ⊕ Phone(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nThing(jack) ∧ Iphone(jack)\n\"\"\""
    ]
  },
  {
    "id": 1384,
    "question": "Jack is not both a thing and an iPhone.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Phone(x) → Thing(x))\n∀x (Cellphone(x) → Phone(x))\n∀x (Iphone(x) → Cellphone(x))\n∀x (Employee(x) → WageEarner(x))\n∀x (WageEarner(x) → Human(x))\nEmployee(jack) ⊕ WageEarner(jack) \nHuman(jack) ⊕ Phone(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Thing(jack) ∧ Iphone(jack))\n\"\"\""
    ]
  },
  {
    "id": 733,
    "question": "No phones are electronic.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IPhone(x) → Electronic(x))\n∃x ∃y (Phone(x) ∧ Phone(y) ∧ IPhone(x) ∧ IPhone(y) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Phone(x) → ¬Electronic(x))\n\"\"\""
    ]
  },
  {
    "id": 110,
    "question": "A museum in NYC includes Byzantine and Islamic Art.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMuseum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)\nMuseum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)\nMuseum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)\nInclude(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)\nInclude(whitneyMuseumOfAmericanArt, americanArt)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, byzantineArt) ∧ Include(x, islamicArt))\n\"\"\""
    ]
  },
  {
    "id": 111,
    "question": "A museum in NYC includes American art.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMuseum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)\nMuseum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)\nMuseum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)\nInclude(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)\nInclude(whitneyMuseumOfAmericanArt, americanArt)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, americanArt))\n\"\"\""
    ]
  },
  {
    "id": 112,
    "question": "A museum in NYC includes Greek art.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMuseum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)\nMuseum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)\nMuseum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)\nInclude(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)\nInclude(whitneyMuseumOfAmericanArt, americanArt)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, greekArt))\n\"\"\""
    ]
  },
  {
    "id": 1117,
    "question": "Fabien is a person who likes eating cheese.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (InBenjiSFamily(x) → (LikeEating(x, cheese) ∨ Francophile(x)))\n∀x ((InBenjiSFamily(x) ∧ Francophile(x)) → ¬Favor(x, spain))\n∃x (InBenjiSFamily(x) ∧ (Favor(x, spain) ∨ LikeEating(x, cheese)))\nInBenjiSFamily(fabien) ∧ (¬(LikeEating(fabien, cheese) ∧ Study(fabien, spanish)))\nStudy(fabien, spanish)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLikeEating(fabien, cheese)\n\"\"\""
    ]
  },
  {
    "id": 1118,
    "question": "If Fabien is either a person who likes eating cheese or a francophile, then Fabien is neither a person who studies Spanish nor a person who is a francophile.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (InBenjiSFamily(x) → (LikeEating(x, cheese) ∨ Francophile(x)))\n∀x ((InBenjiSFamily(x) ∧ Francophile(x)) → ¬Favor(x, spain))\n∃x (InBenjiSFamily(x) ∧ (Favor(x, spain) ∨ LikeEating(x, cheese)))\nInBenjiSFamily(fabien) ∧ (¬(LikeEating(fabien, cheese) ∧ Study(fabien, spanish)))\nStudy(fabien, spanish)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(LikeEating(fabien, cheese) ⊕ Francophile(fabien)) → (¬(Study(fabien, spanish) ∨ Francophile(fabien)))\n\"\"\""
    ]
  },
  {
    "id": 1119,
    "question": "If Fabien is a person who likes Spain as their favorite country or is a francophile, then Fabien is either a person who studies Spanish or a person who likes Spain as their favorite country.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (InBenjiSFamily(x) → (LikeEating(x, cheese) ∨ Francophile(x)))\n∀x ((InBenjiSFamily(x) ∧ Francophile(x)) → ¬Favor(x, spain))\n∃x (InBenjiSFamily(x) ∧ (Favor(x, spain) ∨ LikeEating(x, cheese)))\nInBenjiSFamily(fabien) ∧ (¬(LikeEating(fabien, cheese) ∧ Study(fabien, spanish)))\nStudy(fabien, spanish)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Favor(fabien, spain) ∨ Francophile(fabien)) → (Study(fabien, spanish) ⊕ Favor(fabien, spain))\n\"\"\""
    ]
  },
  {
    "id": 83,
    "question": "Gasteren is a Dutch village.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVillage(gasteren) ∧ Province(drenthe) ∧ In(gasteren, drenthe)\nProvince(drenthe) ∧ In(drenthe, netherlands)\n∀x (City(x) → ¬Village(x))\n∃x (Population(x, num155) ∧ Village(x) ∧ In(x, drenthe))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVillage(gasteren) ∧ In(gasteren, netherlands)\n\"\"\""
    ]
  },
  {
    "id": 84,
    "question": "Gasteren is a city.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVillage(gasteren) ∧ Province(drenthe) ∧ In(gasteren, drenthe)\nProvince(drenthe) ∧ In(drenthe, netherlands)\n∀x (City(x) → ¬Village(x))\n∃x (Population(x, num155) ∧ Village(x) ∧ In(x, drenthe))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCity(gasteren)\n\"\"\""
    ]
  },
  {
    "id": 85,
    "question": "Gasteren has a population of 155.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVillage(gasteren) ∧ Province(drenthe) ∧ In(gasteren, drenthe)\nProvince(drenthe) ∧ In(drenthe, netherlands)\n∀x (City(x) → ¬Village(x))\n∃x (Population(x, num155) ∧ Village(x) ∧ In(x, drenthe))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPopulation(gasteren, num155)\n\"\"\""
    ]
  },
  {
    "id": 599,
    "question": "Hyraxes lay eggs.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))\n∀x (Platypuses(x) → ¬Hyrax(x))\n∀x (Echidnas(x) → ¬Hyrax(x))\n∀x (Mammal(x) → ¬Invertebrate(x))\n∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))\n∀x (Mammal(x) → Animal(x))\n∀x (Hyrax(x) → Mammal(x))\n∀x (Grebes(x) → LayEgg(x))\n∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Hyrax(x) ∧ LayEgg(x))\n\"\"\""
    ]
  },
  {
    "id": 600,
    "question": "Grebes are not mammals.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))\n∀x (Platypuses(x) → ¬Hyrax(x))\n∀x (Echidnas(x) → ¬Hyrax(x))\n∀x (Mammal(x) → ¬Invertebrate(x))\n∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))\n∀x (Mammal(x) → Animal(x))\n∀x (Hyrax(x) → Mammal(x))\n∀x (Grebes(x) → LayEgg(x))\n∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Grebes(x) → ¬Mammal(x))\n\"\"\""
    ]
  },
  {
    "id": 601,
    "question": "Platypuses are vertebrates.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))\n∀x (Platypuses(x) → ¬Hyrax(x))\n∀x (Echidnas(x) → ¬Hyrax(x))\n∀x (Mammal(x) → ¬Invertebrate(x))\n∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))\n∀x (Mammal(x) → Animal(x))\n∀x (Hyrax(x) → Mammal(x))\n∀x (Grebes(x) → LayEgg(x))\n∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Platypuses(x) → Vertebrate(x))\n\"\"\""
    ]
  },
  {
    "id": 270,
    "question": "Bobby Flynn is an Australian citizen.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSinger(bobbyFlynn) ∧ SongWriter(bobbyFlynn)\nFinishesIn(bobbyFlynn, number7) ∧ CompetesOnAustralianIdol(bobbyFlynn)\n∀x (CompetesOnAustralianIdol(x) → AustralianCitizen(x))\nNationWideTourIn(theOmegaThreeBand, year2007) \nMember(bobbyFlynn, theOmegaThreeBand)\nBornIn(bobbyFlynn, queensland)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAustralianCitizen(bobbyFlynn)\n\"\"\""
    ]
  },
  {
    "id": 271,
    "question": "Bobby Flynn flew to America in 2007.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSinger(bobbyFlynn) ∧ SongWriter(bobbyFlynn)\nFinishesIn(bobbyFlynn, number7) ∧ CompetesOnAustralianIdol(bobbyFlynn)\n∀x (CompetesOnAustralianIdol(x) → AustralianCitizen(x))\nNationWideTourIn(theOmegaThreeBand, year2007) \nMember(bobbyFlynn, theOmegaThreeBand)\nBornIn(bobbyFlynn, queensland)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFlewToIn(bobbyFlynn, america, year2007)\n\"\"\""
    ]
  },
  {
    "id": 272,
    "question": "Bobby Flynn was born in Queens.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSinger(bobbyFlynn) ∧ SongWriter(bobbyFlynn)\nFinishesIn(bobbyFlynn, number7) ∧ CompetesOnAustralianIdol(bobbyFlynn)\n∀x (CompetesOnAustralianIdol(x) → AustralianCitizen(x))\nNationWideTourIn(theOmegaThreeBand, year2007) \nMember(bobbyFlynn, theOmegaThreeBand)\nBornIn(bobbyFlynn, queensland)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBornIn(bobbyFlynn, queens)\n\"\"\""
    ]
  },
  {
    "id": 713,
    "question": "All enzymes are proteins.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Protein(x) → OrganicCompound(x))\n∀x (Enzyme(x) → OrganicCompound(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Enzyme(x) → Protein(x))\n\"\"\""
    ]
  },
  {
    "id": 295,
    "question": "There is a series by ABC that was developed by the showrunner of Witches of East End.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(maggieFriedman) ∧ Screenwriter(maggieFriedman) ∧ Producer(maggieFriedman)\nShowRunnerOf(maggieFriedman, witchesOfEastEnd) ∧ ExecutiveProducerOf(maggieFriedman, witchesOfEastEnd) ∧ LifetimeTelevisionSeries(maggieFriedman)\nFantasyDrama(witchesOfEastEnd) ∧ Series(witchesOfEastEnd)\nProduces(maggieFriedman, eastwick) ∧ Develops(maggieFriedman, eastwick)\nSeries(eastwick) ∧ AiredOn(eastwick, aBC)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Series(x) ∧ AiredOn(x, aBC) ∧ Develops(y, x) ∧ ShowRunnerOf(y, witchesOfEastEnd))\n\"\"\""
    ]
  },
  {
    "id": 296,
    "question": "No series by ABC was developed by the showrunner of Witches of East End.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(maggieFriedman) ∧ Screenwriter(maggieFriedman) ∧ Producer(maggieFriedman)\nShowRunnerOf(maggieFriedman, witchesOfEastEnd) ∧ ExecutiveProducerOf(maggieFriedman, witchesOfEastEnd) ∧ LifetimeTelevisionSeries(maggieFriedman)\nFantasyDrama(witchesOfEastEnd) ∧ Series(witchesOfEastEnd)\nProduces(maggieFriedman, eastwick) ∧ Develops(maggieFriedman, eastwick)\nSeries(eastwick) ∧ AiredOn(eastwick, aBC)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Series(x) ∧ AiredOn(x, aBC) ∧ ∃y(ShowRunnerOf(y, witchesOfEastEnd)) → ¬Develops(y, x))\n\"\"\""
    ]
  },
  {
    "id": 297,
    "question": "Maggie Friedman developed Witches of East End.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(maggieFriedman) ∧ Screenwriter(maggieFriedman) ∧ Producer(maggieFriedman)\nShowRunnerOf(maggieFriedman, witchesOfEastEnd) ∧ ExecutiveProducerOf(maggieFriedman, witchesOfEastEnd) ∧ LifetimeTelevisionSeries(maggieFriedman)\nFantasyDrama(witchesOfEastEnd) ∧ Series(witchesOfEastEnd)\nProduces(maggieFriedman, eastwick) ∧ Develops(maggieFriedman, eastwick)\nSeries(eastwick) ∧ AiredOn(eastwick, aBC)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDevelops(maggieFriedman, witchesOfEastEnd)\n\"\"\""
    ]
  },
  {
    "id": 358,
    "question": "IBM has an office in London or Zurich or both.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(evangelosEleftheriou) ∧ ElectricalEngineer(evangelosEleftheriou)\nWorkForIn(evangelosEleftheriou, iBM, zurich)\n∀x ∀x ∀z (Company(x) ∧ WorkForIn(y, x, z) → HaveOfficeIn(x, z))\nCompany(ibm)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHaveOfficeIn(ibm, london) ∨ HaveOfficeIn(ibm, zurich)\n\"\"\""
    ]
  },
  {
    "id": 359,
    "question": "No Greeks have worked for IBM.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(evangelosEleftheriou) ∧ ElectricalEngineer(evangelosEleftheriou)\nWorkForIn(evangelosEleftheriou, iBM, zurich)\n∀x ∀x ∀z (Company(x) ∧ WorkForIn(y, x, z) → HaveOfficeIn(x, z))\nCompany(ibm)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Greek(x) → ¬WorkFor(x, ibm))\n\"\"\""
    ]
  },
  {
    "id": 432,
    "question": "\"Hooray! Hooray! It's a Holi-Holiday!\" was the #1 hit in Germany.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Song(x) ∧ By(x, boneym,) ∧ Number1GermanSingle(x))\nSong(hoorayHoorayItsAHoliHoliday) ∧ HitAllOverEurope(hoorayHoorayItsAHoliHoliday)\nSong(hoorayHoorayItsAHoliHoliday) ∧ ¬Number1GermanSingle(hoorayHoorayItsAHoliHoliday)\n∀x (PeakBelowOn(x, number1, germanChart) → ¬Number1GermanSingle(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSong(hoorayHoorayItsAHoliHoliday) ∧ Number1GermanSingle(hoorayHoorayItsAHoliHoliday)\n\"\"\""
    ]
  },
  {
    "id": 433,
    "question": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked below #1 on the German charts.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Song(x) ∧ By(x, boneym,) ∧ Number1GermanSingle(x))\nSong(hoorayHoorayItsAHoliHoliday) ∧ HitAllOverEurope(hoorayHoorayItsAHoliHoliday)\nSong(hoorayHoorayItsAHoliHoliday) ∧ ¬Number1GermanSingle(hoorayHoorayItsAHoliHoliday)\n∀x (PeakBelowOn(x, number1, germanChart) → ¬Number1GermanSingle(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPeaksBelowOn(hoorayHoorayItsAHoliHoliday, number1, germanChart)\n\"\"\""
    ]
  },
  {
    "id": 434,
    "question": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked at #3 on the UK charts.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Song(x) ∧ By(x, boneym,) ∧ Number1GermanSingle(x))\nSong(hoorayHoorayItsAHoliHoliday) ∧ HitAllOverEurope(hoorayHoorayItsAHoliHoliday)\nSong(hoorayHoorayItsAHoliHoliday) ∧ ¬Number1GermanSingle(hoorayHoorayItsAHoliHoliday)\n∀x (PeakBelowOn(x, number1, germanChart) → ¬Number1GermanSingle(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPeaksAtOn(hoorayHoorayItsAHoliHoliday, number3, germanChart)\n\"\"\""
    ]
  },
  {
    "id": 692,
    "question": "Luke can make a good breakfast.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Chef(x) → Can(x, cook))\n∃x (¬Chef(x) ∧ Can(x, cook))\n∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))\n∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))\n∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))\nCanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCanMake(luke, goodBreakfast)\n\"\"\""
    ]
  },
  {
    "id": 693,
    "question": "Luke is a chef.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Chef(x) → Can(x, cook))\n∃x (¬Chef(x) ∧ Can(x, cook))\n∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))\n∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))\n∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))\nCanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nChef(luke)\n\"\"\""
    ]
  },
  {
    "id": 557,
    "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))\n∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))\n∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))\n∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ Develop(eTS, y) ∧ AssociatedWith(y, entryToUSEducationInstitution))\n\"\"\""
    ]
  },
  {
    "id": 558,
    "question": "ETS doesn't administer tests internationally.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))\n∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))\n∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))\n∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Administer(eTS, x) → ¬InternationalTest(x))\n\"\"\""
    ]
  },
  {
    "id": 559,
    "question": "ETS administers international tests including the TOEFL, GRE and subject tests in China.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))\n∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))\n∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))\n∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Administer(eTS, x) ∧ InChina(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))\n\"\"\""
    ]
  },
  {
    "id": 993,
    "question": "Robert can resist the hallmark delectable desserts that are famous in Italy.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Hodophiles(x) ∧ EnjoyEating(x, gelato) → Enjoy(x, vacationToItaly))\n∀x (Hodophiles(x) ∧ ¬(∃y (Resist(x, y) ∧ Hallmark(y) ∧ Delectabl(y) ∧ Dessert(y) ∧ FamousIn(y, italy))))\n∀x (Hodophiles(x) → (EnjoyEating(x, gelato) ∨ LoveToTravelOften(x))\n∀x (Hodophiles(x) ∧ TakeIn(x, studyAbroadSemester, europe) → ¬Regret(x, collegeExperience))\n∀x (Hodophiles(x) ∧ LoveToTravelOften(x) → TakeIn(x, studyAbroadSemester, europe))\nHodophiles(robert) ∧ ¬(EnjoyEating(robert, gelato) ⊕ LoveToTravelOften(robert))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃y (Resist(robert, y) ∧ Hallmark(y) ∧ Delectabl(y) ∧ Dessert(y) ∧ FamousIn(y, italy))\n\"\"\""
    ]
  },
  {
    "id": 994,
    "question": "If Robert either would both enjoy a vacation to Italy and regrets his college experiences or neither would enjoy a vacation to Italy nor regrets his college experiences, then Robert would either enjoy a vacation to Italy or he can resist the hallmark delectable desserts that are famous in Italy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Hodophiles(x) ∧ EnjoyEating(x, gelato) → Enjoy(x, vacationToItaly))\n∀x (Hodophiles(x) ∧ ¬(∃y (Resist(x, y) ∧ Hallmark(y) ∧ Delectabl(y) ∧ Dessert(y) ∧ FamousIn(y, italy))))\n∀x (Hodophiles(x) → (EnjoyEating(x, gelato) ∨ LoveToTravelOften(x))\n∀x (Hodophiles(x) ∧ TakeIn(x, studyAbroadSemester, europe) → ¬Regret(x, collegeExperience))\n∀x (Hodophiles(x) ∧ LoveToTravelOften(x) → TakeIn(x, studyAbroadSemester, europe))\nHodophiles(robert) ∧ ¬(EnjoyEating(robert, gelato) ⊕ LoveToTravelOften(robert))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬((Enjoy(robert, vacation) ∧ In(vacation, italy)) ⊕ Regret(x, collegeExperiences)) → Enjoy(robert, vacation) ∧ In(vacation, italy) ⊕ (∃y (Resist(robert, y) ∧ Hallmark(y) ∧ Delectabl(y) ∧ Dessert(y) ∧ FamousIn(y, italy))\n\"\"\""
    ]
  },
  {
    "id": 995,
    "question": "If Robert is not both a person who can resist the hallmark delectable desserts that are famous in Italy and regrets his college experiences, then Robert either enjoys eating gelato ice cream or would enjoy a vacation to Italy.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Hodophiles(x) ∧ EnjoyEating(x, gelato) → Enjoy(x, vacationToItaly))\n∀x (Hodophiles(x) ∧ ¬(∃y (Resist(x, y) ∧ Hallmark(y) ∧ Delectabl(y) ∧ Dessert(y) ∧ FamousIn(y, italy))))\n∀x (Hodophiles(x) → (EnjoyEating(x, gelato) ∨ LoveToTravelOften(x))\n∀x (Hodophiles(x) ∧ TakeIn(x, studyAbroadSemester, europe) → ¬Regret(x, collegeExperience))\n∀x (Hodophiles(x) ∧ LoveToTravelOften(x) → TakeIn(x, studyAbroadSemester, europe))\nHodophiles(robert) ∧ ¬(EnjoyEating(robert, gelato) ⊕ LoveToTravelOften(robert))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(∃y (Resist(robert, y) ∧ Hallmark(y) ∧ Delectabl(y) ∧ Dessert(y) ∧ FamousIn(y, italy))) ∧ Regret(robert, collegeExperience)) → (EnjoyEating(robert, gelato) ⊕ (Enjoy(robert, vacation) ∧ In(vacation, italy))\n\"\"\""
    ]
  },
  {
    "id": 776,
    "question": "Tom is a PhD graduate.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))\n∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))\n∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))\n∀x (PhDGraduate(x) → Work(x, fullTime))\n¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPhdGraduate(tom)\n\"\"\""
    ]
  },
  {
    "id": 777,
    "question": "Tom is not a PhD graduate.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))\n∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))\n∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))\n∀x (PhDGraduate(x) → Work(x, fullTime))\n¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬PhdGraduate(tom)\n\"\"\""
    ]
  },
  {
    "id": 778,
    "question": "Tom wants to study abroad.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))\n∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))\n∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))\n∀x (PhDGraduate(x) → Work(x, fullTime))\n¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStudyIn(tom, unitedStates)\n\"\"\""
    ]
  },
  {
    "id": 395,
    "question": "There has been a demolition derby somewhere that has since been demolished.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSpeedway(islip) ∧ SmallestRaceTrack(islip)\n∃x ∃y (DemolitionDerby(x) ∧ SmallestRaceTrack(y) ∧ On(x, y))\nDemolished(islip) ⊕ StillUsed(islip)\n∀x (Speedway(x) ∧ StillUsed(x) → Have(races, heldAt, x))\n¬Have(races, heldAt, islip)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (DemolitionDerby(x) ∧ On(x, y) ∧ Demolished(y))\n\"\"\""
    ]
  },
  {
    "id": 396,
    "question": "Islip was demolished.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSpeedway(islip) ∧ SmallestRaceTrack(islip)\n∃x ∃y (DemolitionDerby(x) ∧ SmallestRaceTrack(y) ∧ On(x, y))\nDemolished(islip) ⊕ StillUsed(islip)\n∀x (Speedway(x) ∧ StillUsed(x) → Have(races, heldAt, x))\n¬Have(races, heldAt, islip)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDemolished(islip)\n\"\"\""
    ]
  },
  {
    "id": 397,
    "question": "Islip is still being used.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSpeedway(islip) ∧ SmallestRaceTrack(islip)\n∃x ∃y (DemolitionDerby(x) ∧ SmallestRaceTrack(y) ∧ On(x, y))\nDemolished(islip) ⊕ StillUsed(islip)\n∀x (Speedway(x) ∧ StillUsed(x) → Have(races, heldAt, x))\n¬Have(races, heldAt, islip)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStillUsed(islip)\n\"\"\""
    ]
  },
  {
    "id": 1211,
    "question": "James contributes to the country.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Taxpayer(x) → ContributeTo(x, country))\n∀x (WorkFor(x, governmentAgency) → Taxpayer(x))\n∀x (ServesIn(x, theArmy) → WorkFor(x, governmentAgency))\n∀x (SentencedForMurder(x) → Imprisoned(x))\n∀x (Imprisoned((x) → Has(x, criminalRecord))\nSentencedForMurder(james) ⊕ Imprisoned(james) \nHas(james, criminalRecord) ⊕ Taxpayer(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nContributeToCountry(james)\n\"\"\""
    ]
  },
  {
    "id": 1212,
    "question": "James does not contribute to the country.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Taxpayer(x) → ContributeTo(x, country))\n∀x (WorkFor(x, governmentAgency) → Taxpayer(x))\n∀x (ServesIn(x, theArmy) → WorkFor(x, governmentAgency))\n∀x (SentencedForMurder(x) → Imprisoned(x))\n∀x (Imprisoned((x) → Has(x, criminalRecord))\nSentencedForMurder(james) ⊕ Imprisoned(james) \nHas(james, criminalRecord) ⊕ Taxpayer(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ContributeTo(james, country)\n\"\"\""
    ]
  },
  {
    "id": 1213,
    "question": "James contributes to the country and he serves in the army.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Taxpayer(x) → ContributeTo(x, country))\n∀x (WorkFor(x, governmentAgency) → Taxpayer(x))\n∀x (ServesIn(x, theArmy) → WorkFor(x, governmentAgency))\n∀x (SentencedForMurder(x) → Imprisoned(x))\n∀x (Imprisoned((x) → Has(x, criminalRecord))\nSentencedForMurder(james) ⊕ Imprisoned(james) \nHas(james, criminalRecord) ⊕ Taxpayer(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nContributeTo(james, country) ∧ ServesIn(james, army)\n\"\"\""
    ]
  },
  {
    "id": 1214,
    "question": "James does not contribute to the country and does not serve in the army.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Taxpayer(x) → ContributeTo(x, country))\n∀x (WorkFor(x, governmentAgency) → Taxpayer(x))\n∀x (ServesIn(x, theArmy) → WorkFor(x, governmentAgency))\n∀x (SentencedForMurder(x) → Imprisoned(x))\n∀x (Imprisoned((x) → Has(x, criminalRecord))\nSentencedForMurder(james) ⊕ Imprisoned(james) \nHas(james, criminalRecord) ⊕ Taxpayer(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(ContributeTo(james, country) ∧ ServesIn(james, army))\n\"\"\""
    ]
  },
  {
    "id": 32,
    "question": "Water from the Croton River watershed flows to somewhere in New York.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDrainageBasinOf(crotonRiverWatershed, crotonRiver)\nIn(crotonRiver, southwesternNewYork)\n∀x ((Water(x) ∧ In(x, crotonRiverWatershed)) → FlowsTo(x, bronx))\nIn(bronx, newYork)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ((Water(x) ∧ From(x, crotonRiverWatershed)) → ∃y(FlowsTo(x, y) ∧ In(y, newYork)))\n\"\"\""
    ]
  },
  {
    "id": 33,
    "question": "The Croton River watershed is in the Bronx.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDrainageBasinOf(crotonRiverWatershed, crotonRiver)\nIn(crotonRiver, southwesternNewYork)\n∀x ((Water(x) ∧ In(x, crotonRiverWatershed)) → FlowsTo(x, bronx))\nIn(bronx, newYork)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIn(crotonRiverWatershed, bronx)\n\"\"\""
    ]
  },
  {
    "id": 34,
    "question": "Water from the Croton River flows to the Bronx.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDrainageBasinOf(crotonRiverWatershed, crotonRiver)\nIn(crotonRiver, southwesternNewYork)\n∀x ((Water(x) ∧ In(x, crotonRiverWatershed)) → FlowsTo(x, bronx))\nIn(bronx, newYork)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Water(x) ∧ From(x, crotonRiver) → FlowsTo(x, bronx))\n\"\"\""
    ]
  },
  {
    "id": 705,
    "question": "No warships are commercial vessels.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NuclearPoweredSubmarine(x) → Warship(x))\n∀x (NuclearPoweredSubmarine(x) → ¬CommercialVessel(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Warship(x) → ¬CommercialVessel(x))\n\"\"\""
    ]
  },
  {
    "id": 198,
    "question": "The genre of Trouble at the Henhouse is rock.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))\nAlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)\nRockBand(the_Tragically_Hip, canada)\nSongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)\nAlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)\n∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGenre(troubleAtTheHenhouse, rock)\n\"\"\""
    ]
  },
  {
    "id": 199,
    "question": "No Canadian rock band has won the Album of the Year award.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))\nAlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)\nRockBand(the_Tragically_Hip, canada)\nSongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)\nAlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)\n∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃x(RockBand(x, canada) ∧ Award(x, theAlbumOfTheYear))\n\"\"\""
    ]
  },
  {
    "id": 200,
    "question": "\"Butts Wigglin'\" appeared in a film.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))\nAlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)\nRockBand(the_Tragically_Hip, canada)\nSongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)\nAlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)\n∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSongInFilm(buttsWigglin)\n\"\"\""
    ]
  },
  {
    "id": 676,
    "question": "Daniel once applied to Stanford University, but he couldn’t get in even though he has family members who are Stanford alumni.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)\nStudied(daniel, bioengineering) ∧ UndergraduateAt(daniel, riceUniversity)\nWorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)\n GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)\nDoctor(danielsDad) ∧ Practicing(danielsDad, internalMedicine) ∧ PracticingAt(danielsDad, veteransHospital) ∧ In(veteransHospital, minneapolis)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAppliedTo(daniel, stanfordUniversity) ∧ ¬GotInto(daniel, stanfordUniversity) ∧ Alumni(danielsFamilyMembers, stanfordUniversity)\n\"\"\""
    ]
  },
  {
    "id": 677,
    "question": "Daniel studied bioengineering as an undergraduate at Rice University.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)\nStudied(daniel, bioengineering) ∧ UndergraduateAt(daniel, riceUniversity)\nWorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)\n GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)\nDoctor(danielsDad) ∧ Practicing(danielsDad, internalMedicine) ∧ PracticingAt(danielsDad, veteransHospital) ∧ In(veteransHospital, minneapolis)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStudied(daniel, bioengineering) ∧ UndergraduateAt(daniel, riceUniversity)\n\"\"\""
    ]
  },
  {
    "id": 678,
    "question": "Daniel and his sister grew up in Minneapolis, Minnesota.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)\nStudied(daniel, bioengineering) ∧ UndergraduateAt(daniel, riceUniversity)\nWorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)\n GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)\nDoctor(danielsDad) ∧ Practicing(danielsDad, internalMedicine) ∧ PracticingAt(danielsDad, veteransHospital) ∧ In(veteransHospital, minneapolis)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrewUpIn(daniel, minneapolis) ∧ GrewUpIn(danielsOlderSister, minneapolis)\n\"\"\""
    ]
  },
  {
    "id": 326,
    "question": "An American Airlines plane is either a Boeing or Airbus plane.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorldMajorLargePassengerAircraftManufacturer(x) → x=boeing ⊕ x=airbus)\n∀x (AmericanAirlinesAircraft(x) → WorldMajorLargePassengerAircraftManufacturer(x))\nMoreInRevenue(airbus, boeing)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (AmericanAirlinesPlane(x) → x=boeing ⊕ x=airbus)\n\"\"\""
    ]
  },
  {
    "id": 327,
    "question": "There exists a SpaceX commercial aircraft.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorldMajorLargePassengerAircraftManufacturer(x) → x=boeing ⊕ x=airbus)\n∀x (AmericanAirlinesAircraft(x) → WorldMajorLargePassengerAircraftManufacturer(x))\nMoreInRevenue(airbus, boeing)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (CommercialAircraft(x) ∧ x=spaceX)\n\"\"\""
    ]
  },
  {
    "id": 328,
    "question": "There does not exist a United Airlines plane produced by Boeing.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorldMajorLargePassengerAircraftManufacturer(x) → x=boeing ⊕ x=airbus)\n∀x (AmericanAirlinesAircraft(x) → WorldMajorLargePassengerAircraftManufacturer(x))\nMoreInRevenue(airbus, boeing)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (UnitedAirlinesAircraft(x) → ¬(x=boeing))\n\"\"\""
    ]
  },
  {
    "id": 329,
    "question": "There is a commercial plane made by both Airbus and Boeing.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorldMajorLargePassengerAircraftManufacturer(x) → x=boeing ⊕ x=airbus)\n∀x (AmericanAirlinesAircraft(x) → WorldMajorLargePassengerAircraftManufacturer(x))\nMoreInRevenue(airbus, boeing)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (WorldMajorLargePassengerAircraftManufacturer(x) ∧ ProducedBy(x, airbus) ∧ ProducedBy(x, boeing))\n\"\"\""
    ]
  },
  {
    "id": 255,
    "question": "Leyte is an island in the Philippines.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsland(luzon) ∧ In(luzon, philippines)\n∃x (Earthquake(x) ∧ StrikeInYr(x, year1999) ∧ StrikeInMo(x, december) ∧ StrikeInCity(x, luzon))\n∃x (Earthquake(x) ∧ StrikeInYr(x, year1999) ∧ StrikeInMo(x, december) ∧ StrikeInCity(x, luzon) ∧ Deadly(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIsland(leyte) ∧ In(leyte, philippines)\n\"\"\""
    ]
  },
  {
    "id": 256,
    "question": "No one has ever died in an earthquake that struck the Philippines.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsland(luzon) ∧ In(luzon, philippines)\n∃x (Earthquake(x) ∧ StrikeInYr(x, year1999) ∧ StrikeInMo(x, december) ∧ StrikeInCity(x, luzon))\n∃x (Earthquake(x) ∧ StrikeInYr(x, year1999) ∧ StrikeInMo(x, december) ∧ StrikeInCity(x, luzon) ∧ Deadly(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y ((Earthquake(x) ∧ StrikeInCity(x, y) ∧ In(y, philippines)) → ¬Deadly(x))\n\"\"\""
    ]
  },
  {
    "id": 257,
    "question": "In 1999, there was at least one earthquake in the Philippines.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsland(luzon) ∧ In(luzon, philippines)\n∃x (Earthquake(x) ∧ StrikeInYr(x, year1999) ∧ StrikeInMo(x, december) ∧ StrikeInCity(x, luzon))\n∃x (Earthquake(x) ∧ StrikeInYr(x, year1999) ∧ StrikeInMo(x, december) ∧ StrikeInCity(x, luzon) ∧ Deadly(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Earthquake(x) ∧ StrikeInYr(x, year1999) ∧ StrikeInMo(x, december) ∧ StrikeInCity(x, y) ∧ In(y, philippines))\n\"\"\""
    ]
  },
  {
    "id": 961,
    "question": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Like(x, financialRisk) → InvestInRegularly(x, publicStockMarket) ∨ EnjoyRegularly(x, gambling))\n∀x (InvestInRegularly(x, publicStockMarket) → ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) ∨ (∃y (¬(y=theWallStreetJournal) ∧ NewsPaper(y) ∧ ReadToKeepUpdatedOn(x, y, financialMetric))))\n∀x (EnjoyRegularly(x, gambling) → SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y)))\n∀x (SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y))) → EnjoyVisiting(x, theLasVegasStrip))\n∀x (SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y)) → AtRiskOf(x, gamblingAddiction))\nInvestInRegularly(matt, publicStockMarket)\nLike(matt, financialRisk)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNewspapers(matt)\n\"\"\""
    ]
  },
  {
    "id": 962,
    "question": "If Matt is either both a person who is at risk of a gambling addiction and invests in the public stock market regularly, or neither is at risk of a gambling addiction nor invests in the public stock market regularly, then Matt neither visits the Las Vegas Strip regularly nor reads the Wall Street Journal and other newspapers regularly to keep updated on the financial metrics.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Like(x, financialRisk) → InvestInRegularly(x, publicStockMarket) ∨ EnjoyRegularly(x, gambling))\n∀x (InvestInRegularly(x, publicStockMarket) → ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) ∨ (∃y (¬(y=theWallStreetJournal) ∧ NewsPaper(y) ∧ ReadToKeepUpdatedOn(x, y, financialMetric))))\n∀x (EnjoyRegularly(x, gambling) → SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y)))\n∀x (SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y))) → EnjoyVisiting(x, theLasVegasStrip))\n∀x (SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y)) → AtRiskOf(x, gamblingAddiction))\nInvestInRegularly(matt, publicStockMarket)\nLike(matt, financialRisk)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAtRiskOf(matt, gamblingAddiction) ⊕ InvestInRegularly(matt, publicStockMarket) → ¬EnjoyVisiting(matt, theLasVegasStrip) ∧  ¬(ReadToKeepUpdatedOn(matt, theWallStreetJournal, financialMetric) ∨  (∃y (¬(y=theWallStreetJournal) ∧ NewsPaper(y) ∧ ReadToKeepUpdatedOn(matt, y, financialMetric))))\n\"\"\""
    ]
  },
  {
    "id": 963,
    "question": "Matt is not at risk of a gambling addiction and Mike does not both read the Wall Street Journal and other newspapers regularly and visits the Las Vegas Strip regularly.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Like(x, financialRisk) → InvestInRegularly(x, publicStockMarket) ∨ EnjoyRegularly(x, gambling))\n∀x (InvestInRegularly(x, publicStockMarket) → ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) ∨ (∃y (¬(y=theWallStreetJournal) ∧ NewsPaper(y) ∧ ReadToKeepUpdatedOn(x, y, financialMetric))))\n∀x (EnjoyRegularly(x, gambling) → SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y)))\n∀x (SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y))) → EnjoyVisiting(x, theLasVegasStrip))\n∀x (SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y)) → AtRiskOf(x, gamblingAddiction))\nInvestInRegularly(matt, publicStockMarket)\nLike(matt, financialRisk)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬AtRiskOf(matt, gamblingAddiction) ∧ ¬(ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) ∨ (∃y (¬(y=theWallStreetJournal) ∧ NewsPaper(y) ∧ ReadToKeepUpdatedOn(x, y, financialMetric))) ∧ EnjoyVisiting(matt, theLasVegasStrip))\n\"\"\""
    ]
  },
  {
    "id": 683,
    "question": "John can get the rhythms right.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ LearningPiano(x) → Can(x, strike, rightNote))\n∀x (Student(x) ∧  Can(x, strike, rightNote) → Can(x, getTheRhythmRight))\n∀x (Student(x) ∧ Can(x, getTheRhythmRight) → Start(x, workingOnCoordinationBetweenTheLeftAndRightHands))\n∀x (Student(x) ∧ Start(x, workingOnCoordinationBetweenTheLeftAndRightHands) → Become(x, goodAtCoordination) ⊕ Find(x, coordinationChallenging))\n(Can(john, getTheRhythmRight) ∧ Can(john, getTheRhythmRight)) ∧  Become(john, goodAtCoordination)  → PutEmotionInto(john, hisPlaying)\nStudent(john) ∧ LearningPiano(john)\n¬Find(john, coordinationChallenging)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCan(john, getTheRhythmRight)\n\"\"\""
    ]
  },
  {
    "id": 684,
    "question": "John does not put emotions into his playing.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ LearningPiano(x) → Can(x, strike, rightNote))\n∀x (Student(x) ∧  Can(x, strike, rightNote) → Can(x, getTheRhythmRight))\n∀x (Student(x) ∧ Can(x, getTheRhythmRight) → Start(x, workingOnCoordinationBetweenTheLeftAndRightHands))\n∀x (Student(x) ∧ Start(x, workingOnCoordinationBetweenTheLeftAndRightHands) → Become(x, goodAtCoordination) ⊕ Find(x, coordinationChallenging))\n(Can(john, getTheRhythmRight) ∧ Can(john, getTheRhythmRight)) ∧  Become(john, goodAtCoordination)  → PutEmotionInto(john, hisPlaying)\nStudent(john) ∧ LearningPiano(john)\n¬Find(john, coordinationChallenging)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPutEmotionInto(john, hisPlaying)\n\"\"\""
    ]
  },
  {
    "id": 650,
    "question": "Barbara Ann Marshall did not receive medals.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFormerSwimmer(barbaraAnnMarshall) ∧ FormerWorldRecordHolder(barbaraAnnMarshall)\nParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)\nHomeCountry(barbaraAnnMarshall, unitedStates)\n∀x ∃y (ParticipatedIn(x, 1972SummerOlympics) ∧ HomeCountry(x, y) → Represented(x, y))\nParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)\n¬ParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)\n∀x ((ParticipatedIn(x, 1972SummerOlympics) ∧ RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalHeatFreestyleRelay)) ↔ ¬Recieved(x, medal)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Recieved(barbaraAnnMarshall, medal)\n\"\"\""
    ]
  },
  {
    "id": 651,
    "question": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFormerSwimmer(barbaraAnnMarshall) ∧ FormerWorldRecordHolder(barbaraAnnMarshall)\nParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)\nHomeCountry(barbaraAnnMarshall, unitedStates)\n∀x ∃y (ParticipatedIn(x, 1972SummerOlympics) ∧ HomeCountry(x, y) → Represented(x, y))\nParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)\n¬ParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)\n∀x ((ParticipatedIn(x, 1972SummerOlympics) ∧ RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalHeatFreestyleRelay)) ↔ ¬Recieved(x, medal)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRepresented(barbaraAnnMarshall, unitedStates)\n\"\"\""
    ]
  },
  {
    "id": 572,
    "question": "It is possible to move to the green stage without ever reaching the yellow stage.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y ∃y ∃w (Game(x) ∧ StageNumber(x,3) ∧ Stage(y) ∧ Stage(z) ∧ Stage(w) ∧ ¬(y=z) ∧ ¬(z=w) ∧ ¬(y=w) ∧ Red(y) ∧ Yellow(z) ∧ Green(w))\n∀x (Player(x) → StartRed(x))\n∀x (Player(x) ∧ ¬ReachYellow(x) → ¬ReachGreen(x))\n∀x (Player(x) ∧ StartRed(x) → ReachYellow(x))\n∀x (Player(x) ∧ StartRed(x) ∧ ¬ReachYellow(x) → ¬ReachGreen(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Player(x) ∧ RedToGreen(x))\n\"\"\""
    ]
  },
  {
    "id": 573,
    "question": "It is possible to reach the yellow stage without ever reaching the green stage.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y ∃y ∃w (Game(x) ∧ StageNumber(x,3) ∧ Stage(y) ∧ Stage(z) ∧ Stage(w) ∧ ¬(y=z) ∧ ¬(z=w) ∧ ¬(y=w) ∧ Red(y) ∧ Yellow(z) ∧ Green(w))\n∀x (Player(x) → StartRed(x))\n∀x (Player(x) ∧ ¬ReachYellow(x) → ¬ReachGreen(x))\n∀x (Player(x) ∧ StartRed(x) → ReachYellow(x))\n∀x (Player(x) ∧ StartRed(x) ∧ ¬ReachYellow(x) → ¬ReachGreen(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Player(x) ∧ RedToYellow(x))\n\"\"\""
    ]
  },
  {
    "id": 574,
    "question": "It is possible to complete the game without ever reaching the green stage.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y ∃y ∃w (Game(x) ∧ StageNumber(x,3) ∧ Stage(y) ∧ Stage(z) ∧ Stage(w) ∧ ¬(y=z) ∧ ¬(z=w) ∧ ¬(y=w) ∧ Red(y) ∧ Yellow(z) ∧ Green(w))\n∀x (Player(x) → StartRed(x))\n∀x (Player(x) ∧ ¬ReachYellow(x) → ¬ReachGreen(x))\n∀x (Player(x) ∧ StartRed(x) → ReachYellow(x))\n∀x (Player(x) ∧ StartRed(x) ∧ ¬ReachYellow(x) → ¬ReachGreen(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Player(x) ∧ CompleteGame(x))\n\"\"\""
    ]
  },
  {
    "id": 1090,
    "question": "Adam is scared of animals.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, loveCity) → (ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∨ ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))\n∀x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∧ In(x, loveCity) → GoodWith(x, pet))\n∀x ((GoodWith(x, pet) ∧ In(x, loveCity)) → ¬ScaredOf(x, animal))\n∀x (In(x, loveCity) → (ScaredOf(x, animal) ∨ Loves(x, animal)))\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ Loves(adam, animal)) ∧ In(adam, loveCity)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nScaredOf(adam, animal)\n\"\"\""
    ]
  },
  {
    "id": 1091,
    "question": "Adam considers words of affirmation to be the most important love language.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, loveCity) → (ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∨ ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))\n∀x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∧ In(x, loveCity) → GoodWith(x, pet))\n∀x ((GoodWith(x, pet) ∧ In(x, loveCity)) → ¬ScaredOf(x, animal))\n∀x (In(x, loveCity) → (ScaredOf(x, animal) ∨ Loves(x, animal)))\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ Loves(adam, animal)) ∧ In(adam, loveCity)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)\n\"\"\""
    ]
  },
  {
    "id": 1092,
    "question": "Adam considers physical touch as the most important love language and considers words of affirmation as the most important love language.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, loveCity) → (ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∨ ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))\n∀x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∧ In(x, loveCity) → GoodWith(x, pet))\n∀x ((GoodWith(x, pet) ∧ In(x, loveCity)) → ¬ScaredOf(x, animal))\n∀x (In(x, loveCity) → (ScaredOf(x, animal) ∨ Loves(x, animal)))\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ Loves(adam, animal)) ∧ In(adam, loveCity)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nConsidersMostImportantLoveLanguage(adam, physicalTouch) ∧ ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)\n\"\"\""
    ]
  },
  {
    "id": 1093,
    "question": "Adam either values physical touch as an especially important love language or values words of affirmation as an especially important love language.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, loveCity) → (ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∨ ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))\n∀x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∧ In(x, loveCity) → GoodWith(x, pet))\n∀x ((GoodWith(x, pet) ∧ In(x, loveCity)) → ¬ScaredOf(x, animal))\n∀x (In(x, loveCity) → (ScaredOf(x, animal) ∨ Loves(x, animal)))\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ Loves(adam, animal)) ∧ In(adam, loveCity)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)\n\"\"\""
    ]
  },
  {
    "id": 1094,
    "question": "If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, loveCity) → (ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∨ ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))\n∀x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∧ In(x, loveCity) → GoodWith(x, pet))\n∀x ((GoodWith(x, pet) ∧ In(x, loveCity)) → ¬ScaredOf(x, animal))\n∀x (In(x, loveCity) → (ScaredOf(x, animal) ∨ Loves(x, animal)))\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ Loves(adam, animal)) ∧ In(adam, loveCity)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch, mostImportantLoveLanguage) ∨ GoodWith(x, pet)) → ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)\n\"\"\""
    ]
  },
  {
    "id": 1277,
    "question": "John is a reptile.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bird(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))\n∀x (Animal(x) ∧ (∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z))) → ¬Reptile(x))\n∃x (Animal(x) ∧ Fly(x) ∧ Bird(x))\n∀x (Iguana(x) → Reptile(x))\n¬(Iguana(john) ⊕ Bird(john))\nAnimal(john)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nReptile(john)\n\"\"\""
    ]
  },
  {
    "id": 1278,
    "question": "John is not both an iguana and an animal that can fly.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bird(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))\n∀x (Animal(x) ∧ (∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z))) → ¬Reptile(x))\n∃x (Animal(x) ∧ Fly(x) ∧ Bird(x))\n∀x (Iguana(x) → Reptile(x))\n¬(Iguana(john) ⊕ Bird(john))\nAnimal(john)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Iguana(john) ∧ Fly(john))\n\"\"\""
    ]
  },
  {
    "id": 1279,
    "question": "John is an animal that can fly and John is a bird.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bird(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))\n∀x (Animal(x) ∧ (∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z))) → ¬Reptile(x))\n∃x (Animal(x) ∧ Fly(x) ∧ Bird(x))\n∀x (Iguana(x) → Reptile(x))\n¬(Iguana(john) ⊕ Bird(john))\nAnimal(john)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAnimal(john) ∧ Fly(john) ∧ Bird(john)\n\"\"\""
    ]
  },
  {
    "id": 86,
    "question": "EndGame was filmed in New York.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMovie(endGame) ∧ Released(endGame, yr2006)\nSetIn(endGame, washington)\n¬(FilmedIn(endGame, washington))\n∃x∃y(FilmedIn(x, newYork) ∧ (¬(x=y)) ∧ FilmedIn(y, newYork))\nDirected(andyChang, endGame)\nFrom(andyChang, hongKong)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFilmedIn(endGame, newYork)\n\"\"\""
    ]
  },
  {
    "id": 87,
    "question": "EndGame was not directed by someone from Hong Kong.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMovie(endGame) ∧ Released(endGame, yr2006)\nSetIn(endGame, washington)\n¬(FilmedIn(endGame, washington))\n∃x∃y(FilmedIn(x, newYork) ∧ (¬(x=y)) ∧ FilmedIn(y, newYork))\nDirected(andyChang, endGame)\nFrom(andyChang, hongKong)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (¬(Directed(x, endGame) ∧ From(x, hongKong)))\n\"\"\""
    ]
  },
  {
    "id": 88,
    "question": "All of Andy Chang's movies are filmed outside of Washington.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMovie(endGame) ∧ Released(endGame, yr2006)\nSetIn(endGame, washington)\n¬(FilmedIn(endGame, washington))\n∃x∃y(FilmedIn(x, newYork) ∧ (¬(x=y)) ∧ FilmedIn(y, newYork))\nDirected(andyChang, endGame)\nFrom(andyChang, hongKong)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Directed(andyChang, x) → ¬(FilmedIn(x, washington)))\n\"\"\""
    ]
  },
  {
    "id": 17,
    "question": "Eight is larger than seven.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRealNum(num6) ∧ RealNum(num7) ∧ RealNum(num8)\n∀x ∀y ((RealNum(x) ∧ RealNum(y) ∧ IsSuccessorOf(x, y)) → Larger(x, y))\n∀x ∀y (Larger(x, y) → ¬Larger(y, x))\n∃y(IsSuccessorOf(y, num6) ∧ Equals(num7, y))\n∃y(IsSuccessorOf(y, num7) ∧ Equals(num8, y))\nPositive(num2)\n∀x ∀y ((Positive(x) ∧ IsDouble(y, x)) → Positive(y))\nIsDouble(num8, num4)\nIsDouble(num4, num2)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLarger(eight, seven)\n\"\"\""
    ]
  },
  {
    "id": 18,
    "question": "Eight is positive.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRealNum(num6) ∧ RealNum(num7) ∧ RealNum(num8)\n∀x ∀y ((RealNum(x) ∧ RealNum(y) ∧ IsSuccessorOf(x, y)) → Larger(x, y))\n∀x ∀y (Larger(x, y) → ¬Larger(y, x))\n∃y(IsSuccessorOf(y, num6) ∧ Equals(num7, y))\n∃y(IsSuccessorOf(y, num7) ∧ Equals(num8, y))\nPositive(num2)\n∀x ∀y ((Positive(x) ∧ IsDouble(y, x)) → Positive(y))\nIsDouble(num8, num4)\nIsDouble(num4, num2)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPositive(eight)\n\"\"\""
    ]
  },
  {
    "id": 19,
    "question": "Six is larger than seven.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRealNum(num6) ∧ RealNum(num7) ∧ RealNum(num8)\n∀x ∀y ((RealNum(x) ∧ RealNum(y) ∧ IsSuccessorOf(x, y)) → Larger(x, y))\n∀x ∀y (Larger(x, y) → ¬Larger(y, x))\n∃y(IsSuccessorOf(y, num6) ∧ Equals(num7, y))\n∃y(IsSuccessorOf(y, num7) ∧ Equals(num8, y))\nPositive(num2)\n∀x ∀y ((Positive(x) ∧ IsDouble(y, x)) → Positive(y))\nIsDouble(num8, num4)\nIsDouble(num4, num2)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLarger(six, seven)\n\"\"\""
    ]
  },
  {
    "id": 737,
    "question": "Some four-legged animals sleep.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Dog(x) → Sleep(x))\n∃x ∃y (FourLegged(x) ∧ Animal(x) ∧ Dog(x) ∧ FourLegged(y) ∧ Animal(y) ∧ Dog(y) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (FourLegged(x) ∧ Animal(x) ∧ Sleeps(x) ∧ FourLegged(y) ∧ Animal(y) ∧ Sleeps(y) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 1378,
    "question": "Mei is a PRC national.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (EntitledTo(x, nationalSocialInsuranceCoverage) → CanHavePartiallyCovered(x, medicalBills))\n∀x (PRCNational(x) → EntitledTo(x, nationalSocialInsuranceCoverage))\n∀x (In(x, franco-ChinaDiplomaticConference) → PRCNational(x) ⊕ FrenchNational(x))\n∀x (FrenchNational(x) → CitizenOf(x, europeanUnion))\n∀x (SpanishNational(x) → CitizenOf(x, europeanUnion))\n∀x (NorthKoreanNational(x) → ¬CitizenOf(x, europeanUnion))\nIn(mei, franco-ChinaDiplomaticConference)\n¬(NorthKoreanNational(mei) ⊕ CanHavePartiallyCovered(mei, medicalBills))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPRCNational(mei)\n\"\"\""
    ]
  },
  {
    "id": 1379,
    "question": "Mei is not a PRC national.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (EntitledTo(x, nationalSocialInsuranceCoverage) → CanHavePartiallyCovered(x, medicalBills))\n∀x (PRCNational(x) → EntitledTo(x, nationalSocialInsuranceCoverage))\n∀x (In(x, franco-ChinaDiplomaticConference) → PRCNational(x) ⊕ FrenchNational(x))\n∀x (FrenchNational(x) → CitizenOf(x, europeanUnion))\n∀x (SpanishNational(x) → CitizenOf(x, europeanUnion))\n∀x (NorthKoreanNational(x) → ¬CitizenOf(x, europeanUnion))\nIn(mei, franco-ChinaDiplomaticConference)\n¬(NorthKoreanNational(mei) ⊕ CanHavePartiallyCovered(mei, medicalBills))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬PRCNational(mei)\n\"\"\""
    ]
  },
  {
    "id": 1380,
    "question": "If Mei is either a North Korean or a Spanish national, then Mei is either both a French national and a citizen of the European Union, or neither a French national nor a citizen of the European Union.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (EntitledTo(x, nationalSocialInsuranceCoverage) → CanHavePartiallyCovered(x, medicalBills))\n∀x (PRCNational(x) → EntitledTo(x, nationalSocialInsuranceCoverage))\n∀x (In(x, franco-ChinaDiplomaticConference) → PRCNational(x) ⊕ FrenchNational(x))\n∀x (FrenchNational(x) → CitizenOf(x, europeanUnion))\n∀x (SpanishNational(x) → CitizenOf(x, europeanUnion))\n∀x (NorthKoreanNational(x) → ¬CitizenOf(x, europeanUnion))\nIn(mei, franco-ChinaDiplomaticConference)\n¬(NorthKoreanNational(mei) ⊕ CanHavePartiallyCovered(mei, medicalBills))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNorthKoreanNational(mei) ⊕ SpanishNational(mei) → ¬(FrenchNational(mei) ⊕ European(mei))\n\"\"\""
    ]
  },
  {
    "id": 712,
    "question": "Some good teachers are not well-informed people.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (¬Admit(x, mistake) → ¬GoodTeacher(x))\n∃x ∃y (WellInformed(x) ∧ WellInformed(y) ∧ ¬Admit(x, mistake) ∧ ¬Admit(y, mistake) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (GoodTeacher(x) ∧ GoodTeacher(y) ∧ ¬WellInformed(x) ∧ ¬WellInformed(y) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 72,
    "question": "Mort is background material.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))\n¬Stamp(mort)\n¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))\nPhilatelicLit(mort)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBackground(mort)\n\"\"\""
    ]
  },
  {
    "id": 73,
    "question": "Eragon is a piece of Philatelic literature.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))\n¬Stamp(mort)\n¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))\nPhilatelicLit(mort)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPhilatelicLit(eragon)\n\"\"\""
    ]
  },
  {
    "id": 279,
    "question": "Columbia pictures produced some drama film.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDramaFilm(adventuresOfRusty) ∧ ChildrensFilm(adventuresOfRusty)\nProduces(columbiaPictures, adventuresOfRusty)\nProduces(paramount, tintin)\nAdventureFilm(tintin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (DramaFilm(x) ∧ Produces(columbiaPictures, x))\n\"\"\""
    ]
  },
  {
    "id": 280,
    "question": "Columbia pictures produced some adventure film.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDramaFilm(adventuresOfRusty) ∧ ChildrensFilm(adventuresOfRusty)\nProduces(columbiaPictures, adventuresOfRusty)\nProduces(paramount, tintin)\nAdventureFilm(tintin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (AdventureFilm(x) ∧ Produces(columbiaPictures, x))\n\"\"\""
    ]
  },
  {
    "id": 281,
    "question": "Paramount produces children's films.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDramaFilm(adventuresOfRusty) ∧ ChildrensFilm(adventuresOfRusty)\nProduces(columbiaPictures, adventuresOfRusty)\nProduces(paramount, tintin)\nAdventureFilm(tintin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (ChildrensFilm(x) ∧ Produces(paramount, x))\n\"\"\""
    ]
  },
  {
    "id": 282,
    "question": "Paramount produces adventure films.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDramaFilm(adventuresOfRusty) ∧ ChildrensFilm(adventuresOfRusty)\nProduces(columbiaPictures, adventuresOfRusty)\nProduces(paramount, tintin)\nAdventureFilm(tintin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (AdventureFilm(x) ∧ Produces(paramount, x))\n\"\"\""
    ]
  },
  {
    "id": 660,
    "question": "The paramount leader of the PRC was also the vice premier.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParamountLeaderOf(dengXiaoping, peoplesRepublicOfChina)\nPraisedFor(dengXiaoping, reaffirmationOfReformProgram) ∧ PraisedFor(dengXiaoping, reversionOfHongKong) ∧ PraisedFor(dengXiaoping, returnOfMacau)\nPartysSecretaryGeneral(dengXiaoping) ∧ Under(dengXiaoping, mao) ∧ VicePremierInThe1950s(dengXiaoping) ∧ PresidedOver(dengXiaoping, antiRightistCampaign) ∧ LaunchedBy(antiRightistCampaign, mao)\nInstrumentalIn(dengXiaoping, chinasEconomicReconstruction) ∧ Following(chinasEconomicReconstruction, greatLeapForward) ∧ Disastrous(greatLeapForward)\nDiedIn(mao, year1976)\nGraduallyRoseTo(dengXiaoping, supremePower)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (ParamountLeaderOf(x, prc) ∧ VicePremier(x))\n\"\"\""
    ]
  },
  {
    "id": 661,
    "question": "Deng Xiaoping presided over something launched by someone he was under.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParamountLeaderOf(dengXiaoping, peoplesRepublicOfChina)\nPraisedFor(dengXiaoping, reaffirmationOfReformProgram) ∧ PraisedFor(dengXiaoping, reversionOfHongKong) ∧ PraisedFor(dengXiaoping, returnOfMacau)\nPartysSecretaryGeneral(dengXiaoping) ∧ Under(dengXiaoping, mao) ∧ VicePremierInThe1950s(dengXiaoping) ∧ PresidedOver(dengXiaoping, antiRightistCampaign) ∧ LaunchedBy(antiRightistCampaign, mao)\nInstrumentalIn(dengXiaoping, chinasEconomicReconstruction) ∧ Following(chinasEconomicReconstruction, greatLeapForward) ∧ Disastrous(greatLeapForward)\nDiedIn(mao, year1976)\nGraduallyRoseTo(dengXiaoping, supremePower)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (PresidedOver(dengxiaoping, x) ∧ Under(dengxiaoping, y) ∧ LaunchedBy(x, y))\n\"\"\""
    ]
  },
  {
    "id": 662,
    "question": "The person instrumental in china's economic reconstruction gradually rose to supreme power.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParamountLeaderOf(dengXiaoping, peoplesRepublicOfChina)\nPraisedFor(dengXiaoping, reaffirmationOfReformProgram) ∧ PraisedFor(dengXiaoping, reversionOfHongKong) ∧ PraisedFor(dengXiaoping, returnOfMacau)\nPartysSecretaryGeneral(dengXiaoping) ∧ Under(dengXiaoping, mao) ∧ VicePremierInThe1950s(dengXiaoping) ∧ PresidedOver(dengXiaoping, antiRightistCampaign) ∧ LaunchedBy(antiRightistCampaign, mao)\nInstrumentalIn(dengXiaoping, chinasEconomicReconstruction) ∧ Following(chinasEconomicReconstruction, greatLeapForward) ∧ Disastrous(greatLeapForward)\nDiedIn(mao, year1976)\nGraduallyRoseTo(dengXiaoping, supremePower)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (InstrumentalIn(x, chinaseconomicreconstruction) ∧ GraduallyRoseTo(x, supremepower))\n\"\"\""
    ]
  },
  {
    "id": 1047,
    "question": "Dune is realistic fiction.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))\n∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) \n∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))\n∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) \n(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRealisticFiction(dune)\n\"\"\""
    ]
  },
  {
    "id": 1048,
    "question": "Dune is a result of creative and imaginative process.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))\n∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) \n∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))\n∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) \n(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nResultOf(dune, creativeProcess) ∧ ImaginativeProcess(dune)\n\"\"\""
    ]
  },
  {
    "id": 1049,
    "question": "Dune is either a result of creative processes or came from an imaginative process.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))\n∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) \n∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))\n∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) \n(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nResultOf(dune, creativeProcess) ⊕ ImaginativeProcess(dune)\n\"\"\""
    ]
  },
  {
    "id": 1050,
    "question": "Dune is a result of creative processes and is science fiction.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))\n∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) \n∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))\n∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) \n(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nResultOf(dune, creativeProcess) ∧ ScienceFiction(dune))\n\"\"\""
    ]
  },
  {
    "id": 1051,
    "question": "Dune is either a result of creative processes or is science fiction.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))\n∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) \n∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))\n∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) \n(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKnows(dan, dune) ∧ (ResultOf(dune, creativeProcess)  ⊕ ScienceFiction(dune))\n\"\"\""
    ]
  },
  {
    "id": 1052,
    "question": "If Dune is a result of creative and imaginative processes, then Dune is not a result of creative processes and science-fiction.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))\n∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) \n∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))\n∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) \n(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(ResultOf(dune, creativeProcess)  ∧ ImaginativeProcess(dune)) → (¬ResultOf(dune, creativeProcess) ∧ ¬ScienceFiction(dune))\n\"\"\""
    ]
  },
  {
    "id": 1053,
    "question": "If Dune is either a fact and a result of creative processes, or neither a fact nor a result of creative processes, then Dune is a result of creative processes and science-fiction.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))\n∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) \n∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))\n∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) \n(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKnows(dan, dune) ∧ (¬(Fact(dune) ⊕ ResultOf(dune, creativeProcess))) → (ResultOf(dune, creativeProcess) ∧ ScienceFiction(dune))\n\"\"\""
    ]
  },
  {
    "id": 1054,
    "question": "If Dune is science-fiction, then Dune is not a result of creative processes and science-fiction.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))\n∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) \n∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))\n∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) \n(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKnows(dan, dune) ∧ (ScienceFiction(dune)) → (¬(ResultOf(dune, creativeProcess)  ∧ ScienceFiction(dune)))\n\"\"\""
    ]
  },
  {
    "id": 1055,
    "question": "If Dune is not a result of creative processes and science-fiction, then Dune neither came from an imaginative process nor proved to be false.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))\n∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) \n∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))\n∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) \n(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKnows(dan, dune) ∧ (¬(ResultOf(dune, creativeProcess)  ∧ ScienceFiction(dune))) → (¬(ImaginativeProcess(dune) ∨ ProvedToBe(dune, false)))\n\"\"\""
    ]
  },
  {
    "id": 1056,
    "question": "If Dune is did not come from imaginative process and is not science-fiction, then Dune is neither a result of creative processes nor came from an imaginative process.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))\n∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) \n∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))\n∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) \n(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKnows(dan, dune) ∧ (¬(ImaginativeProcess(dune) ∧ ScienceFiction(dune))) → (¬(ResultOf(dune, creativeProcess)  ∨ ImaginativeProcess(dune)))\n\"\"\""
    ]
  },
  {
    "id": 521,
    "question": "Captain America does not speak English.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Superhero(x) ∧ American(x) → ComeFrom(x, dCUniverse) ⊕ ComeFrom(x, marvelUniverse)) \nAmerican(captainAmerica) ∧ TopTenFavorite(captainAmerica) ∧ Superhero(captainAmerica) \n¬ComeFrom(captainAmerica, dCUniverse)\n∀x (American(x) ∧ TopTenFavorite(x) ∧ Superhero(x)  → Speak(x, english)) \n∃x (Superhero(x) → (Speak(x, english) ∧ Speak(x, spanish)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Speak(captainAmerica, english)\n\"\"\""
    ]
  },
  {
    "id": 522,
    "question": "Captain America comes from the Marvel universe.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Superhero(x) ∧ American(x) → ComeFrom(x, dCUniverse) ⊕ ComeFrom(x, marvelUniverse)) \nAmerican(captainAmerica) ∧ TopTenFavorite(captainAmerica) ∧ Superhero(captainAmerica) \n¬ComeFrom(captainAmerica, dCUniverse)\n∀x (American(x) ∧ TopTenFavorite(x) ∧ Superhero(x)  → Speak(x, english)) \n∃x (Superhero(x) → (Speak(x, english) ∧ Speak(x, spanish)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nComeFrom(captainAmerica, marvelUniverse)\n\"\"\""
    ]
  },
  {
    "id": 523,
    "question": "Captain America speaks Spanish.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Superhero(x) ∧ American(x) → ComeFrom(x, dCUniverse) ⊕ ComeFrom(x, marvelUniverse)) \nAmerican(captainAmerica) ∧ TopTenFavorite(captainAmerica) ∧ Superhero(captainAmerica) \n¬ComeFrom(captainAmerica, dCUniverse)\n∀x (American(x) ∧ TopTenFavorite(x) ∧ Superhero(x)  → Speak(x, english)) \n∃x (Superhero(x) → (Speak(x, english) ∧ Speak(x, spanish)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSpeak(captainAmerica, spanish)\n\"\"\""
    ]
  },
  {
    "id": 228,
    "question": "Robert Zimmer is German.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(robertZimmer, germany) ∧ Philosopher(robertZimmer)\nEssayist(robertZimmer)\nBornIn(robertZimmer, yr1953)\n∀x (Essayist(x) → Writer(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBornIn(robertZimmer, germany)\n\"\"\""
    ]
  },
  {
    "id": 229,
    "question": "Robert Zimmer is not a writer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(robertZimmer, germany) ∧ Philosopher(robertZimmer)\nEssayist(robertZimmer)\nBornIn(robertZimmer, yr1953)\n∀x (Essayist(x) → Writer(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Writer(robertZimmer)\n\"\"\""
    ]
  },
  {
    "id": 230,
    "question": "Robert Zimmer is a biographer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(robertZimmer, germany) ∧ Philosopher(robertZimmer)\nEssayist(robertZimmer)\nBornIn(robertZimmer, yr1953)\n∀x (Essayist(x) → Writer(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBiographer(robertZimmer)\n\"\"\""
    ]
  },
  {
    "id": 694,
    "question": "If John repays his loans on time, he will be approved for a mortgage.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RepayOnTime(x) → Has(x, highCreditScore))\n∃x ((Has(x, highCreditScore) ∧ Has(x, highSalary)) → ApprovedFor(x, mortgage))\nHas(john, highSalary)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRepayOnTime(john) → ApprovedFor(john, mortgage)\n\"\"\""
    ]
  },
  {
    "id": 907,
    "question": "John is a Teaching Fellow",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → MemberOf(x, university))\n∀x (GraduateStudent(x) → Student(x))\n∀x (PhDStudent(x) → GraduateStudent(x))\n∃x (PhDStudent(x) ∧ TeachingFellow(x))\n¬PhDStudent(john) → ¬MemberOf(john, university)\nTeachingFellow(john) → PhDStudent(john) ⊕ GraduateStudent(john)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTF(john)\n\"\"\""
    ]
  },
  {
    "id": 908,
    "question": "John is not a Teaching Fellow.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → MemberOf(x, university))\n∀x (GraduateStudent(x) → Student(x))\n∀x (PhDStudent(x) → GraduateStudent(x))\n∃x (PhDStudent(x) ∧ TeachingFellow(x))\n¬PhDStudent(john) → ¬MemberOf(john, university)\nTeachingFellow(john) → PhDStudent(john) ⊕ GraduateStudent(john)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬TF(john)\n\"\"\""
    ]
  },
  {
    "id": 909,
    "question": "John is a PhD student.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → MemberOf(x, university))\n∀x (GraduateStudent(x) → Student(x))\n∀x (PhDStudent(x) → GraduateStudent(x))\n∃x (PhDStudent(x) ∧ TeachingFellow(x))\n¬PhDStudent(john) → ¬MemberOf(john, university)\nTeachingFellow(john) → PhDStudent(john) ⊕ GraduateStudent(john)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPhDStudent(john)\n\"\"\""
    ]
  },
  {
    "id": 473,
    "question": "If John goes to Europe, he will see the Eiffel Tower.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEuropeanCountry(belgium) ∧ EuropeanCountry(france) ∧ EuropeanCountry(germany)\nCapitalOf(paris, france)\nTouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)\n∃x (LiveIn(x, belgium) → Speak(x, french))\n∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))\nSpeak(john, french)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoTo(john, europe) → See(john, eiffelTower)\n\"\"\""
    ]
  },
  {
    "id": 474,
    "question": "The Eiffel Tower is located in the capital of France.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEuropeanCountry(belgium) ∧ EuropeanCountry(france) ∧ EuropeanCountry(germany)\nCapitalOf(paris, france)\nTouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)\n∃x (LiveIn(x, belgium) → Speak(x, french))\n∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))\nSpeak(john, french)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (CapitalOf(x, france) ∧ LocatedIn(eiffelTower, x))\n\"\"\""
    ]
  },
  {
    "id": 475,
    "question": "John lives in Belgium.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEuropeanCountry(belgium) ∧ EuropeanCountry(france) ∧ EuropeanCountry(germany)\nCapitalOf(paris, france)\nTouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)\n∃x (LiveIn(x, belgium) → Speak(x, french))\n∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))\nSpeak(john, french)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLiveIn(john, belgium)\n\"\"\""
    ]
  },
  {
    "id": 900,
    "question": "Prius is an electric car.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SportsCar(x) → LoudCar(x))\n∀x (LoudCar(x) → ¬ElectricCar(x))\n∀x (Ferrari(x) → SportsCar(x))\n∀x ((Car(x) ∧ MadeIn(x, maranello)) → Ferrari(x))\n(Car(toyotaPrius) ∧ MadeIn(toyotaPrius, maranello)) ∨ LoudCar(toyotaPrius)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nElectricCar(toyotaPrius)\n\"\"\""
    ]
  },
  {
    "id": 901,
    "question": "The Toyota Prius is not an electric car.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SportsCar(x) → LoudCar(x))\n∀x (LoudCar(x) → ¬ElectricCar(x))\n∀x (Ferrari(x) → SportsCar(x))\n∀x ((Car(x) ∧ MadeIn(x, maranello)) → Ferrari(x))\n(Car(toyotaPrius) ∧ MadeIn(toyotaPrius, maranello)) ∨ LoudCar(toyotaPrius)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ElectricCar(toyotaPrius)\n\"\"\""
    ]
  },
  {
    "id": 902,
    "question": "The Toyota Prius is a equipped with a Ferrari V12 engine.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SportsCar(x) → LoudCar(x))\n∀x (LoudCar(x) → ¬ElectricCar(x))\n∀x (Ferrari(x) → SportsCar(x))\n∀x ((Car(x) ∧ MadeIn(x, maranello)) → Ferrari(x))\n(Car(toyotaPrius) ∧ MadeIn(toyotaPrius, maranello)) ∨ LoudCar(toyotaPrius)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMadeIn(toyotaPrius, maranello)\n\"\"\""
    ]
  },
  {
    "id": 903,
    "question": "If The Toyota Prius is a Ferrari or a loud car, then The Toyota Prius is an electric car.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SportsCar(x) → LoudCar(x))\n∀x (LoudCar(x) → ¬ElectricCar(x))\n∀x (Ferrari(x) → SportsCar(x))\n∀x ((Car(x) ∧ MadeIn(x, maranello)) → Ferrari(x))\n(Car(toyotaPrius) ∧ MadeIn(toyotaPrius, maranello)) ∨ LoudCar(toyotaPrius)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFerrari(toyotaPrius) ∨ LoudCar(toyotaPrius) → ElectricCar(toyotaPrius)\n\"\"\""
    ]
  },
  {
    "id": 1283,
    "question": "Piper was grown in a garden.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plant(x) → ¬CuteAnimal(x))\n∀x (Flower(x) → Plant(x))\n∀x (Kitten(x) → CuteAnimal(x))\n∀x (GrownIn(x, garden) → Flower(x))\nKitten(piper) ∨ CuteAnimal(piper)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrownIn(piper, garden)\n\"\"\""
    ]
  },
  {
    "id": 1284,
    "question": "Piper was not grown in a garden.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plant(x) → ¬CuteAnimal(x))\n∀x (Flower(x) → Plant(x))\n∀x (Kitten(x) → CuteAnimal(x))\n∀x (GrownIn(x, garden) → Flower(x))\nKitten(piper) ∨ CuteAnimal(piper)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬GrownIn(piper, garden)\n\"\"\""
    ]
  },
  {
    "id": 1285,
    "question": "Piper is a kitten.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plant(x) → ¬CuteAnimal(x))\n∀x (Flower(x) → Plant(x))\n∀x (Kitten(x) → CuteAnimal(x))\n∀x (GrownIn(x, garden) → Flower(x))\nKitten(piper) ∨ CuteAnimal(piper)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKitten(piper)\n\"\"\""
    ]
  },
  {
    "id": 435,
    "question": "Judd Bankert competed in the 1988 Winter Olympics.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n\n∃x (Send(guam, athlete, calgaryWinterOlympics))\n∀x (Athlete(x) ∧ SendTo(guam, x, calgaryWinterOlympics) → ParticipatedIn(x, winterOlympics, year1988))\n∀x ∀y (Athlete(x) ∧ From(x, guam) ∧ ParticipatedIn(x, winterOlympics, y) → x=juddBankert)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nParticipatedIn(juddBankert, winterOlympics, year1988)\n\"\"\""
    ]
  },
  {
    "id": 436,
    "question": "Guam has participated in the Summer Olympics at least once.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n\n∃x (Send(guam, athlete, calgaryWinterOlympics))\n∀x (Athlete(x) ∧ SendTo(guam, x, calgaryWinterOlympics) → ParticipatedIn(x, winterOlympics, year1988))\n∀x ∀y (Athlete(x) ∧ From(x, guam) ∧ ParticipatedIn(x, winterOlympics, y) → x=juddBankert)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (ParticipatedIn(guam, summerOlympics, x))\n\"\"\""
    ]
  },
  {
    "id": 208,
    "question": "The son of a general practitioner was a word-setter of My Word!.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)\nBornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (SonOf(x, y) ∧ GeneralPractitioner(y) ∧ WordSetter(x))\n\"\"\""
    ]
  },
  {
    "id": 209,
    "question": "World Medicine is not a magazine.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)\nBornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Magazine(worldmedicine)\n\"\"\""
    ]
  },
  {
    "id": 210,
    "question": "There are no British authors.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)\nBornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (British(x) → ¬Author(x))\n\"\"\""
    ]
  },
  {
    "id": 211,
    "question": "There are no journalists that were born in Yorkshire.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)\nBornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Journalist(x) → ¬BornIn(x, yorkshire))\n\"\"\""
    ]
  },
  {
    "id": 212,
    "question": "There is a son of a general practitioner that is not an author.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)\nBornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Son(x, y) ∧ GeneralPractitioner(y) ∧ ¬Author(x))\n\"\"\""
    ]
  },
  {
    "id": 699,
    "question": "Some reading is fun.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Homework(x) → ¬Fun(x))\n∃x (Reading(x) ∧ Homework(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Reading(x) ∧ Fun(x))\n\"\"\""
    ]
  },
  {
    "id": 742,
    "question": "The handbrake is up when some cars are parked.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (HandbrakeOf(x, y) ∧ Car(y) → Up(x) ⊕ Down(x))\n∀x ∀y (HandbrakeOf(x, y) ∧ Parked(y) ∧ Car(y) → Down(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (HandbrakeOf(x, y) ∧ Parked(y) ∧ Car(y) ∧ Up(x))\n\"\"\""
    ]
  },
  {
    "id": 1020,
    "question": "Manny regularly rides horses for pleasure and sport.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InThisMidwestTown(x) ∧ Have(x, horseRanch) → RegularlyRideHorseForPleasure(x))\n∀x (InThisMidwestTown(x) ∧ Have(x, disposableIncome) → Have(x, horseRank))\n∀x (InThisMidwestTown(x) ∧ CompeteIn(x, horseDressageShow) → Have(x, disposableIncome))\n∀x (InThisMidwestTown(x) ∧ CompeteIn(x, horseDressageShow) → InvestedIn(x, equestrianGearAndEquipment))\n∀x (InThisMidwestTown(x) ∧ RegularlyRideHorseForPleasure(x) → ¬LiveIn(x, crampedBuilding))\nInThisMidwestTown(manny) ∧ ¬(Have(manny, horseRanch) ⊕ LiveIn(manny, crampedBuilding))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRegularlyRideHorsesForPleasure(manny)\n\"\"\""
    ]
  },
  {
    "id": 1021,
    "question": "Manny competes in horse dressage shows and has invested in high-quality equestrian equipment and gear.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InThisMidwestTown(x) ∧ Have(x, horseRanch) → RegularlyRideHorseForPleasure(x))\n∀x (InThisMidwestTown(x) ∧ Have(x, disposableIncome) → Have(x, horseRank))\n∀x (InThisMidwestTown(x) ∧ CompeteIn(x, horseDressageShow) → Have(x, disposableIncome))\n∀x (InThisMidwestTown(x) ∧ CompeteIn(x, horseDressageShow) → InvestedIn(x, equestrianGearAndEquipment))\n∀x (InThisMidwestTown(x) ∧ RegularlyRideHorseForPleasure(x) → ¬LiveIn(x, crampedBuilding))\nInThisMidwestTown(manny) ∧ ¬(Have(manny, horseRanch) ⊕ LiveIn(manny, crampedBuilding))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCompeteIn(manny, horseDressageShow) ∧ InvestedIn(manny, equestrianGearAndEquipment)\n\"\"\""
    ]
  },
  {
    "id": 1022,
    "question": "If Manny either has a horse ranch or competes in horse dressage shows, then Manny has not invested in high-quality equestrian equipment and gear.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InThisMidwestTown(x) ∧ Have(x, horseRanch) → RegularlyRideHorseForPleasure(x))\n∀x (InThisMidwestTown(x) ∧ Have(x, disposableIncome) → Have(x, horseRank))\n∀x (InThisMidwestTown(x) ∧ CompeteIn(x, horseDressageShow) → Have(x, disposableIncome))\n∀x (InThisMidwestTown(x) ∧ CompeteIn(x, horseDressageShow) → InvestedIn(x, equestrianGearAndEquipment))\n∀x (InThisMidwestTown(x) ∧ RegularlyRideHorseForPleasure(x) → ¬LiveIn(x, crampedBuilding))\nInThisMidwestTown(manny) ∧ ¬(Have(manny, horseRanch) ⊕ LiveIn(manny, crampedBuilding))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(HaveAHorseRanch(manny) ⊕ CompeteIn(manny, horseDressageShow)) → ¬InvestedIn(manny, equestrianGearAndEquipment)\n\"\"\""
    ]
  },
  {
    "id": 158,
    "question": "Cannons can be deployed on battery towers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Roundel(x) → (Rounded(x) ∧ ArtilleryFortification(x)))\n∀x ∀y ((Roundel(x) ∧ AdjacentWalls(x,y)) → ¬Higher(x, y))\n∀x (ArtilleryFortification(x) → DeployCannons(x))\n∀x ∀y ((Roundel(x) ∧ ArtilleryFortification(y)) → Older(x, y))\n∀x (BatteryTower(x) → ArtilleryFortification(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (BatteryTower(x) → DeployCannons(x))\n\"\"\""
    ]
  },
  {
    "id": 159,
    "question": "Roundels are older than battery towers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Roundel(x) → (Rounded(x) ∧ ArtilleryFortification(x)))\n∀x ∀y ((Roundel(x) ∧ AdjacentWalls(x,y)) → ¬Higher(x, y))\n∀x (ArtilleryFortification(x) → DeployCannons(x))\n∀x ∀y ((Roundel(x) ∧ ArtilleryFortification(y)) → Older(x, y))\n∀x (BatteryTower(x) → ArtilleryFortification(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y ((Roundel(x) ∧ BatteryTower(y)) → Older(x, y))\n\"\"\""
    ]
  },
  {
    "id": 160,
    "question": "Battery towers are higher than adjacent walls.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Roundel(x) → (Rounded(x) ∧ ArtilleryFortification(x)))\n∀x ∀y ((Roundel(x) ∧ AdjacentWalls(x,y)) → ¬Higher(x, y))\n∀x (ArtilleryFortification(x) → DeployCannons(x))\n∀x ∀y ((Roundel(x) ∧ ArtilleryFortification(y)) → Older(x, y))\n∀x (BatteryTower(x) → ArtilleryFortification(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y ((BatteryTower(x) ∧ AdjacentWall(x,y)) → Higher(x, y))\n\"\"\""
    ]
  },
  {
    "id": 161,
    "question": "Cannons can be deployed on roundels.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Roundel(x) → (Rounded(x) ∧ ArtilleryFortification(x)))\n∀x ∀y ((Roundel(x) ∧ AdjacentWalls(x,y)) → ¬Higher(x, y))\n∀x (ArtilleryFortification(x) → DeployCannons(x))\n∀x ∀y ((Roundel(x) ∧ ArtilleryFortification(y)) → Older(x, y))\n∀x (BatteryTower(x) → ArtilleryFortification(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Roundel(x) → DeployCannons(x))\n\"\"\""
    ]
  },
  {
    "id": 732,
    "question": "Some papers are hard.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tissue(x) → Soft(x))\n∃x ∃y (Paper(x) ∧ Paper(x) ∧ Tissue(x) ∧ Tissue(y) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Paper(x) ∧ Paper(y) ∧ Hard(x) ∧ Hard(y) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 485,
    "question": "Volunteers who participate in natural disaster response receive intangible benefits for their work.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Volunteer(x) → Receive(x, intangibleBenefit))\n∀x (Volunteer(x) → WorkRegularly(x) ⊕ WorkAsNeeded(x))\n∃x (Volunteer(x) → Trained(x))\n∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))\n∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalManagement) ∨ ContributeTo(x, environmentalConservation)))\n∃x (Volunteer(x) ∧ ContributeTo(x, naturalDisasterResponse) → WorkInGroup(x) ∧ WorkAsNeeded(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Volunteer(x) ∧ ContributeTo(x, naturalDisasterResponse) → Receive(x, intangibleBenefit))\n\"\"\""
    ]
  },
  {
    "id": 486,
    "question": "Environmental volunteers work in groups.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Volunteer(x) → Receive(x, intangibleBenefit))\n∀x (Volunteer(x) → WorkRegularly(x) ⊕ WorkAsNeeded(x))\n∃x (Volunteer(x) → Trained(x))\n∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))\n∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalManagement) ∨ ContributeTo(x, environmentalConservation)))\n∃x (Volunteer(x) ∧ ContributeTo(x, naturalDisasterResponse) → WorkInGroup(x) ∧ WorkAsNeeded(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Volunteer(x) ∧ Environmental(x) → WorkInGroup(x))\n\"\"\""
    ]
  },
  {
    "id": 487,
    "question": "To be a volunteer, you must be trained.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Volunteer(x) → Receive(x, intangibleBenefit))\n∀x (Volunteer(x) → WorkRegularly(x) ⊕ WorkAsNeeded(x))\n∃x (Volunteer(x) → Trained(x))\n∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))\n∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalManagement) ∨ ContributeTo(x, environmentalConservation)))\n∃x (Volunteer(x) ∧ ContributeTo(x, naturalDisasterResponse) → WorkInGroup(x) ∧ WorkAsNeeded(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Volunteer(x) → Trained(x))\n\"\"\""
    ]
  },
  {
    "id": 1002,
    "question": "Mike is an old person living in a stable home.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InThisTechCompany(x) ∧ Consistent(x) ∧ StickTo(x, theirRegularRoutine) → ¬Like(x, surprise))\n∀x (InThisTechCompany(x) ∧ ∃y (flannelShirt(y) ∧ WearEveryday(x, y)) → Consistent(x) ∧ StickTo(x, theirRegularRoutine))\n∀x (InThisTechCompany(x) ∧ ¬LikeShoppingFor(x, clothes) → ∃y (flannelShirt(y) ∧ WearEveryday(x, y)))\n∀x (InThisTechCompany(x) ∧ Old(x) ∧ LiveIn(x, stableHome) → ¬Like(x, surprise))\n∀x (InThisTechCompany(x) ∧ Have(x, highEnergy) ∧ Impulsive(x) → ¬Like(x, surprise))\nInThisTechCompany(mike)\n¬(∃y (flannelShirt(y) ∧ WearEveryday(x, y)) ∧ Have(mike, highEnergy) ∧ Impulsive(mike)) → (Consistent(mike) ∧ StickTo(mike, theirRegularRoutine)) ⊕ ¬Like(mike, surprise)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOld(mike) ∧ LiveIn(mike, stableHome)\n\"\"\""
    ]
  },
  {
    "id": 1003,
    "question": "If Mike wears the same flannel shirts every day or does not like shopping for clothes, then Mike is neither an old person living in a stable home nor does he like shopping for clothes.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InThisTechCompany(x) ∧ Consistent(x) ∧ StickTo(x, theirRegularRoutine) → ¬Like(x, surprise))\n∀x (InThisTechCompany(x) ∧ ∃y (flannelShirt(y) ∧ WearEveryday(x, y)) → Consistent(x) ∧ StickTo(x, theirRegularRoutine))\n∀x (InThisTechCompany(x) ∧ ¬LikeShoppingFor(x, clothes) → ∃y (flannelShirt(y) ∧ WearEveryday(x, y)))\n∀x (InThisTechCompany(x) ∧ Old(x) ∧ LiveIn(x, stableHome) → ¬Like(x, surprise))\n∀x (InThisTechCompany(x) ∧ Have(x, highEnergy) ∧ Impulsive(x) → ¬Like(x, surprise))\nInThisTechCompany(mike)\n¬(∃y (flannelShirt(y) ∧ WearEveryday(x, y)) ∧ Have(mike, highEnergy) ∧ Impulsive(mike)) → (Consistent(mike) ∧ StickTo(mike, theirRegularRoutine)) ⊕ ¬Like(mike, surprise)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(∃y (flannelShirt(y) ∧ WearEveryday(mike, y)) ∨ ¬LikeShoppingFor(mike, clothes)) → ¬(Old(mike) ∧ LiveIn(mike, stableHome)) ∧ ¬LikeShoppingFor(mike, clothes)\n\"\"\""
    ]
  },
  {
    "id": 1004,
    "question": "If Mike is not an old person living in a stable home and does not like shopping for clothes, then Mike does not like shopping for clothes.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InThisTechCompany(x) ∧ Consistent(x) ∧ StickTo(x, theirRegularRoutine) → ¬Like(x, surprise))\n∀x (InThisTechCompany(x) ∧ ∃y (flannelShirt(y) ∧ WearEveryday(x, y)) → Consistent(x) ∧ StickTo(x, theirRegularRoutine))\n∀x (InThisTechCompany(x) ∧ ¬LikeShoppingFor(x, clothes) → ∃y (flannelShirt(y) ∧ WearEveryday(x, y)))\n∀x (InThisTechCompany(x) ∧ Old(x) ∧ LiveIn(x, stableHome) → ¬Like(x, surprise))\n∀x (InThisTechCompany(x) ∧ Have(x, highEnergy) ∧ Impulsive(x) → ¬Like(x, surprise))\nInThisTechCompany(mike)\n¬(∃y (flannelShirt(y) ∧ WearEveryday(x, y)) ∧ Have(mike, highEnergy) ∧ Impulsive(mike)) → (Consistent(mike) ∧ StickTo(mike, theirRegularRoutine)) ⊕ ¬Like(mike, surprise)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Old(mike) ∧ LiveIn(mike, stableHome)) ∧ ¬LikeShoppingFor(mike, clothes)) → ¬LikeShoppingFor(mike, clothes)\n\"\"\""
    ]
  },
  {
    "id": 615,
    "question": "Adam owns a Japanese car.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x∃y (Car(x) ∧ Car(y) ∧ (x≠y) ∧ Owns(adam, x)) \n∃x (Car(x) ∧ Favorite(adam, x))\n∀x ((Car(x) ∧ Owns(adam, x) ∧ Favorite(adam, x)) → European(x))\n∀x ((Car(x) ∧ Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Japanese(x) ∧ Owns(adam, x))\n\"\"\""
    ]
  },
  {
    "id": 616,
    "question": "Adam broke a European car.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x∃y (Car(x) ∧ Car(y) ∧ (x≠y) ∧ Owns(adam, x)) \n∃x (Car(x) ∧ Favorite(adam, x))\n∀x ((Car(x) ∧ Owns(adam, x) ∧ Favorite(adam, x)) → European(x))\n∀x ((Car(x) ∧ Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (European(x) ∧ Broke(adam, x))\n\"\"\""
    ]
  },
  {
    "id": 1235,
    "question": "Tower A is higher than 400 meters.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Buildings(x) ∧ In(x, newHaven)) → ¬HigherThan(x, num400))\n∀x ((Buildings(x) ∧ ManagedBy(x, yaleHousing)) → In(x, newHaven))\n∀x ((Buildings(x) ∧ Skyscraper(x) ∧ In(x, manhattan)) → HigherThan(x, num400))\n∀x ((Buildings(x) ∧ OwnedBy(x, bloomberg)) → Skyscraper(x) ∧ In(x, manhattan))\n∀x ((Buildings(x) ∧ HasLogo(x, bloomberg)) → OwnedBy(x, bloomberg))\nBuildings(towerA) ∧ (¬InNewHaven(towerA)) ∧ (¬ManhattanSkyscraper(towerA))\nBuildings(towerB) ∧ HasLogo(towerB, bloomberg) ∧ Skyscraper(towerB) ∧ In(towerB, manhattan)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHigherThan(towerA, num400)\n\"\"\""
    ]
  },
  {
    "id": 1236,
    "question": "Tower A is not higher than 400 meters.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Buildings(x) ∧ In(x, newHaven)) → ¬HigherThan(x, num400))\n∀x ((Buildings(x) ∧ ManagedBy(x, yaleHousing)) → In(x, newHaven))\n∀x ((Buildings(x) ∧ Skyscraper(x) ∧ In(x, manhattan)) → HigherThan(x, num400))\n∀x ((Buildings(x) ∧ OwnedBy(x, bloomberg)) → Skyscraper(x) ∧ In(x, manhattan))\n∀x ((Buildings(x) ∧ HasLogo(x, bloomberg)) → OwnedBy(x, bloomberg))\nBuildings(towerA) ∧ (¬InNewHaven(towerA)) ∧ (¬ManhattanSkyscraper(towerA))\nBuildings(towerB) ∧ HasLogo(towerB, bloomberg) ∧ Skyscraper(towerB) ∧ In(towerB, manhattan)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬HigherThan(towerA, num400)\n\"\"\""
    ]
  },
  {
    "id": 1237,
    "question": "Tower A is a building with the Bloomberg logo or it is managed by Yale Housing.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Buildings(x) ∧ In(x, newHaven)) → ¬HigherThan(x, num400))\n∀x ((Buildings(x) ∧ ManagedBy(x, yaleHousing)) → In(x, newHaven))\n∀x ((Buildings(x) ∧ Skyscraper(x) ∧ In(x, manhattan)) → HigherThan(x, num400))\n∀x ((Buildings(x) ∧ OwnedBy(x, bloomberg)) → Skyscraper(x) ∧ In(x, manhattan))\n∀x ((Buildings(x) ∧ HasLogo(x, bloomberg)) → OwnedBy(x, bloomberg))\nBuildings(towerA) ∧ (¬InNewHaven(towerA)) ∧ (¬ManhattanSkyscraper(towerA))\nBuildings(towerB) ∧ HasLogo(towerB, bloomberg) ∧ Skyscraper(towerB) ∧ In(towerB, manhattan)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHasLogo(towerB, bloomberg) ∨ ManagedBy(x, yaleHousing)\n\"\"\""
    ]
  },
  {
    "id": 1238,
    "question": "Tower A is neither a building with the Bloomberg logo nor managed by Yale Housing.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Buildings(x) ∧ In(x, newHaven)) → ¬HigherThan(x, num400))\n∀x ((Buildings(x) ∧ ManagedBy(x, yaleHousing)) → In(x, newHaven))\n∀x ((Buildings(x) ∧ Skyscraper(x) ∧ In(x, manhattan)) → HigherThan(x, num400))\n∀x ((Buildings(x) ∧ OwnedBy(x, bloomberg)) → Skyscraper(x) ∧ In(x, manhattan))\n∀x ((Buildings(x) ∧ HasLogo(x, bloomberg)) → OwnedBy(x, bloomberg))\nBuildings(towerA) ∧ (¬InNewHaven(towerA)) ∧ (¬ManhattanSkyscraper(towerA))\nBuildings(towerB) ∧ HasLogo(towerB, bloomberg) ∧ Skyscraper(towerB) ∧ In(towerB, manhattan)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬HasLogo(towerB, bloomberg) ∧ (¬ManagedBy(x, yaleHousing))\n\"\"\""
    ]
  },
  {
    "id": 1261,
    "question": "Bubbles is an Osprey.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Fish(x) → ¬Bird(x))\n∀x (Osprey(x) → Bird(x))\n∀x (Carp(x) → Fish(x))\n∀x (Goldfish(x) → Carp(x))\nOsprey(bubbles) ⊕ Goldfish(bubbles) → ¬Fish(bubbles)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOsprey(bubbles)\n\"\"\""
    ]
  },
  {
    "id": 1262,
    "question": "Bubbles is a goldfish.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Fish(x) → ¬Bird(x))\n∀x (Osprey(x) → Bird(x))\n∀x (Carp(x) → Fish(x))\n∀x (Goldfish(x) → Carp(x))\nOsprey(bubbles) ⊕ Goldfish(bubbles) → ¬Fish(bubbles)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoldfish(bubbles)\n\"\"\""
    ]
  },
  {
    "id": 1263,
    "question": "Bubbles is not a goldfish.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Fish(x) → ¬Bird(x))\n∀x (Osprey(x) → Bird(x))\n∀x (Carp(x) → Fish(x))\n∀x (Goldfish(x) → Carp(x))\nOsprey(bubbles) ⊕ Goldfish(bubbles) → ¬Fish(bubbles)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Goldfish(bubbles)\n\"\"\""
    ]
  },
  {
    "id": 453,
    "question": "Mr. Smith has been to San Francisco.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WantToGoTo(mr.AndMrs.Smith, x) ∧ City(x) → (California(x) ∨ Florida(x)) ∧ NeverGo(x))\nCity(sanFrancisco) ∧ California(sanFrancisco) ∧ WantToGoTo(mr.AndMrs.Smith, sanFrancisco) ∧ City(losAngeles) ∧ California(losAngeles) ∧ WantToGoTo(mr.AndMrs.Smith, losAngeles) ∧ City(sanDiego) ∧ California(sanDiego) ∧ WantToGoTo(mr.AndMrs.Smith, sanDiego)\nCity(orlando) ∧ Florida(orlando) ∧ WantToGo(mr.AndMrs.Smith, orlando) ∧ City(miami) ∧ Florida(miami) ∧ WantToGo(mr.AndMrs.Smith, miami)\n∃x ∃y ∀z (¬(x=z) ∧ ¬(y=z) ∧ ¬(x=y) ∧ City(x) ∧ City(y) ∧ City(z) ∧ California(x) ∧ California(y) ∧ California(z) → Visit(mr.smith, x) ∧ Visit(mr.smith, y) ∧ ¬Visit(mr.smith, z))\n∃x ∀y (¬(x=y) ∧ City(x) ∧ City(y) ∧ Florida(x) ∧ Florida(y) → Visit(mrs.smith, x) ∧ ¬Visit(mrs.smith, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (City(x) ∧ Visit(mr.smith, sanFrancisco))\n\"\"\""
    ]
  },
  {
    "id": 454,
    "question": "They have at leat one candidate city in Florida to visit.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WantToGoTo(mr.AndMrs.Smith, x) ∧ City(x) → (California(x) ∨ Florida(x)) ∧ NeverGo(x))\nCity(sanFrancisco) ∧ California(sanFrancisco) ∧ WantToGoTo(mr.AndMrs.Smith, sanFrancisco) ∧ City(losAngeles) ∧ California(losAngeles) ∧ WantToGoTo(mr.AndMrs.Smith, losAngeles) ∧ City(sanDiego) ∧ California(sanDiego) ∧ WantToGoTo(mr.AndMrs.Smith, sanDiego)\nCity(orlando) ∧ Florida(orlando) ∧ WantToGo(mr.AndMrs.Smith, orlando) ∧ City(miami) ∧ Florida(miami) ∧ WantToGo(mr.AndMrs.Smith, miami)\n∃x ∃y ∀z (¬(x=z) ∧ ¬(y=z) ∧ ¬(x=y) ∧ City(x) ∧ City(y) ∧ City(z) ∧ California(x) ∧ California(y) ∧ California(z) → Visit(mr.smith, x) ∧ Visit(mr.smith, y) ∧ ¬Visit(mr.smith, z))\n∃x ∀y (¬(x=y) ∧ City(x) ∧ City(y) ∧ Florida(x) ∧ Florida(y) → Visit(mrs.smith, x) ∧ ¬Visit(mrs.smith, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (WantToGoTo(x) ∧ City(x) ∧ Florida(x))\n\"\"\""
    ]
  },
  {
    "id": 455,
    "question": "They have at least two candidate cities in California to visit.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WantToGoTo(mr.AndMrs.Smith, x) ∧ City(x) → (California(x) ∨ Florida(x)) ∧ NeverGo(x))\nCity(sanFrancisco) ∧ California(sanFrancisco) ∧ WantToGoTo(mr.AndMrs.Smith, sanFrancisco) ∧ City(losAngeles) ∧ California(losAngeles) ∧ WantToGoTo(mr.AndMrs.Smith, losAngeles) ∧ City(sanDiego) ∧ California(sanDiego) ∧ WantToGoTo(mr.AndMrs.Smith, sanDiego)\nCity(orlando) ∧ Florida(orlando) ∧ WantToGo(mr.AndMrs.Smith, orlando) ∧ City(miami) ∧ Florida(miami) ∧ WantToGo(mr.AndMrs.Smith, miami)\n∃x ∃y ∀z (¬(x=z) ∧ ¬(y=z) ∧ ¬(x=y) ∧ City(x) ∧ City(y) ∧ City(z) ∧ California(x) ∧ California(y) ∧ California(z) → Visit(mr.smith, x) ∧ Visit(mr.smith, y) ∧ ¬Visit(mr.smith, z))\n∃x ∀y (¬(x=y) ∧ City(x) ∧ City(y) ∧ Florida(x) ∧ Florida(y) → Visit(mrs.smith, x) ∧ ¬Visit(mrs.smith, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (¬(x=y) ∧ City(x) ∧ City(y) ∧ WantToGoTo(mr.AndMrs.Smith, x) ∧ California(x) ∧ WantToGoTo(mr.AndMrs.Smith, y) ∧ California(y))\n\"\"\""
    ]
  },
  {
    "id": 1424,
    "question": "The bird is still.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, sizeTown) → (Big(x) ∨ Small(x)))\n∀x (Big(x) ∧ In(x, sizeTown) → Heavy(x))\n∀x (Small(x) ∧ In(x, sizeTown) → Light(x))\n∀x (Heavy(x) ∧ In(x, sizeTown) → Still(x))\n∀x (Light(x) ∧ In(x, sizeTown) → Unstable(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Changing(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Unpredictable(x))\nIn(bird, sizeTown) ∧ ¬(Heavy(bird) ∧ Still(bird))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStill(bird)\n\"\"\""
    ]
  },
  {
    "id": 1425,
    "question": "The bird is not still.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, sizeTown) → (Big(x) ∨ Small(x)))\n∀x (Big(x) ∧ In(x, sizeTown) → Heavy(x))\n∀x (Small(x) ∧ In(x, sizeTown) → Light(x))\n∀x (Heavy(x) ∧ In(x, sizeTown) → Still(x))\n∀x (Light(x) ∧ In(x, sizeTown) → Unstable(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Changing(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Unpredictable(x))\nIn(bird, sizeTown) ∧ ¬(Heavy(bird) ∧ Still(bird))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Still(bird)\n\"\"\""
    ]
  },
  {
    "id": 1426,
    "question": "The bird is unpredictable and changing.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, sizeTown) → (Big(x) ∨ Small(x)))\n∀x (Big(x) ∧ In(x, sizeTown) → Heavy(x))\n∀x (Small(x) ∧ In(x, sizeTown) → Light(x))\n∀x (Heavy(x) ∧ In(x, sizeTown) → Still(x))\n∀x (Light(x) ∧ In(x, sizeTown) → Unstable(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Changing(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Unpredictable(x))\nIn(bird, sizeTown) ∧ ¬(Heavy(bird) ∧ Still(bird))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nUnpredictable(bird) ∧ Changing(bird)\n\"\"\""
    ]
  },
  {
    "id": 1427,
    "question": "The bird is unpredictable or changing.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, sizeTown) → (Big(x) ∨ Small(x)))\n∀x (Big(x) ∧ In(x, sizeTown) → Heavy(x))\n∀x (Small(x) ∧ In(x, sizeTown) → Light(x))\n∀x (Heavy(x) ∧ In(x, sizeTown) → Still(x))\n∀x (Light(x) ∧ In(x, sizeTown) → Unstable(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Changing(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Unpredictable(x))\nIn(bird, sizeTown) ∧ ¬(Heavy(bird) ∧ Still(bird))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nUnpredictable(bird) ∨ Changing(bird)\n\"\"\""
    ]
  },
  {
    "id": 1428,
    "question": "The bird is either unpredictable or changing.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, sizeTown) → (Big(x) ∨ Small(x)))\n∀x (Big(x) ∧ In(x, sizeTown) → Heavy(x))\n∀x (Small(x) ∧ In(x, sizeTown) → Light(x))\n∀x (Heavy(x) ∧ In(x, sizeTown) → Still(x))\n∀x (Light(x) ∧ In(x, sizeTown) → Unstable(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Changing(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Unpredictable(x))\nIn(bird, sizeTown) ∧ ¬(Heavy(bird) ∧ Still(bird))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nUnpredictable(bird) ⊕ Changing(bird)\n\"\"\""
    ]
  },
  {
    "id": 1429,
    "question": "If the bird is small or still, then it is either unpredictable or changing.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, sizeTown) → (Big(x) ∨ Small(x)))\n∀x (Big(x) ∧ In(x, sizeTown) → Heavy(x))\n∀x (Small(x) ∧ In(x, sizeTown) → Light(x))\n∀x (Heavy(x) ∧ In(x, sizeTown) → Still(x))\n∀x (Light(x) ∧ In(x, sizeTown) → Unstable(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Changing(x))\n∀x (Unstable(x) ∧ In(x, sizeTown) → Unpredictable(x))\nIn(bird, sizeTown) ∧ ¬(Heavy(bird) ∧ Still(bird))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSmall(bird) ∨ Still(bird) → Unpredictable(bird) ⊕ Changing(bird)\n\"\"\""
    ]
  },
  {
    "id": 287,
    "question": "DI Ray was created by a Brit.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTelevisionSeries(dIRay) ∧ PoliceProcedural(dIRay)\nCreates(maya, dIRay) ∧ Writes(maya, dIRay)\nProduces(jed, dIRay)\nBritish(maya) ∧ British(jed) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (British(x) ∧ Creates(x, dIRay))\n\"\"\""
    ]
  },
  {
    "id": 288,
    "question": "Some Brit produced a television series.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTelevisionSeries(dIRay) ∧ PoliceProcedural(dIRay)\nCreates(maya, dIRay) ∧ Writes(maya, dIRay)\nProduces(jed, dIRay)\nBritish(maya) ∧ British(jed) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y(British(x) ∧ TelevisionSeries(y) ∧ Produces(x, y))\n\"\"\""
    ]
  },
  {
    "id": 1342,
    "question": "Mike got 180 on the LSAT.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Take(x, barExam) → CanRead(x))\n∀x (Lawyer(x) → Take(x, barExam))\n∀x (Take(x, barExam) → KnowledgeableAbout(x, criminalProceeder))\n∀x (GetOn(x, scoreOf180, lSAT) → CanRead(x))\n∀x (Elephant(x) → ¬CanRead(x))\n¬(CanRead(mike) ∧ Elephant(mike)) → Take(mike, barExam) ⊕ CanRead(mike)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGetOn(mike, 180, lSAT)\n\"\"\""
    ]
  },
  {
    "id": 1343,
    "question": "Mike did not take the bar exam and is not both knowledgeable about criminal procedures and someone who got 180 on the LSAT.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Take(x, barExam) → CanRead(x))\n∀x (Lawyer(x) → Take(x, barExam))\n∀x (Take(x, barExam) → KnowledgeableAbout(x, criminalProceeder))\n∀x (GetOn(x, scoreOf180, lSAT) → CanRead(x))\n∀x (Elephant(x) → ¬CanRead(x))\n¬(CanRead(mike) ∧ Elephant(mike)) → Take(mike, barExam) ⊕ CanRead(mike)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Take(mike, barExam) ∧ ¬(KnowledgeableAbout(mike, criminalProcedures)∧ GetOn(mike, 180, lSAT))\n\"\"\""
    ]
  },
  {
    "id": 1344,
    "question": "Mike took the bar exam.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Take(x, barExam) → CanRead(x))\n∀x (Lawyer(x) → Take(x, barExam))\n∀x (Take(x, barExam) → KnowledgeableAbout(x, criminalProceeder))\n∀x (GetOn(x, scoreOf180, lSAT) → CanRead(x))\n∀x (Elephant(x) → ¬CanRead(x))\n¬(CanRead(mike) ∧ Elephant(mike)) → Take(mike, barExam) ⊕ CanRead(mike)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTake(mike, barExam)\n\"\"\""
    ]
  },
  {
    "id": 834,
    "question": "Stephen Curry is a center-back.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ProfessionalSoccerDefender(x) ∧ ProfessionalCenterback(x))\n∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))\n∀x (ProfessionalSoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\nNBAPlayer(stephencurry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProfessionalCenterback(stephenCurry)\n\"\"\""
    ]
  },
  {
    "id": 835,
    "question": "Stephen Curry is not both a centerback and a soccer defender.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ProfessionalSoccerDefender(x) ∧ ProfessionalCenterback(x))\n∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))\n∀x (ProfessionalSoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\nNBAPlayer(stephencurry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(ProfessionalCenterback(stephenCurry) ∧ ProfessionalSoccerDefender(stephenCurry))\n\"\"\""
    ]
  },
  {
    "id": 836,
    "question": "If Stephen Curry is not both a centerback and a soccer defender, then Stephen Curry is neither a soccer player nor a professional basketball player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ProfessionalSoccerDefender(x) ∧ ProfessionalCenterback(x))\n∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))\n∀x (ProfessionalSoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\nNBAPlayer(stephencurry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Centerback(stephenCurry) ∧ SoccerDefender(stephenCurry)) → ¬(SoccerPlayer(stephenCurry) ∨ ProfessionalBasketballPlayer(stephenCurry))\n\"\"\""
    ]
  },
  {
    "id": 537,
    "question": "John can't buy a 1080 monitor.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y))\n∀x (Monitor(x) → Product(x))\n∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z))\nPerson(john)\n∀x (Monitor(x) ∧ TwoK(x) → ¬HaveEnoughMoneyFor(john, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Monitor(x) ∧ OneOEightO(x) → ¬Buy(john, x))\n\"\"\""
    ]
  },
  {
    "id": 538,
    "question": "John can't buy a 2k monitor.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y))\n∀x (Monitor(x) → Product(x))\n∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z))\nPerson(john)\n∀x (Monitor(x) ∧ TwoK(x) → ¬HaveEnoughMoneyFor(john, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Monitor(x) ∧ TwoK(x) → ¬Buy(john, x))\n\"\"\""
    ]
  },
  {
    "id": 707,
    "question": "All important scientific achievements are U.S. inventions.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ArtificialSatellite(x) → ImportantScientificAchievement(x))\n∃x (ArtificialSatellite(x) ∧ ¬USInvention(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (ImportantScientificAchievement(x) ∧ USInvention(x))\n\"\"\""
    ]
  },
  {
    "id": 701,
    "question": "Some mammals are not pets.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Cat(x) ∧ ¬Pet(x))\n∀x (Cat(x) → Mammal(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))\n\"\"\""
    ]
  },
  {
    "id": 967,
    "question": "Sam is living in this neighborhood and he is addicted to coffee.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))\n∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))\n∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))\n∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))\n∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))\nIn(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInThisNeighborhood(sam) ∧ AddictedTo(sam, coffee)\n\"\"\""
    ]
  },
  {
    "id": 968,
    "question": "Sam is living in this neighborhood and he owns at least one coffeemaker and one blender in his home.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))\n∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))\n∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))\n∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))\n∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))\nIn(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃y (CoffeemakerAndBlender(y) ∧ Own(sam, y))\n\"\"\""
    ]
  },
  {
    "id": 969,
    "question": "Sam is living in this neighborhood and he owns at least one coffeemaker and one blender in his home or orders takeout at least once a day.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))\n∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))\n∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))\n∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))\n∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))\nIn(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(∃y (CoffeemakerAndBlender(y) ∧ Own(sam, y)) ∨ (∃y (TakeOut(y) ∧ Order(sam, y, aDay)))\n\"\"\""
    ]
  },
  {
    "id": 837,
    "question": "Roger Federer is a centerback.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalBasketballPlayer(x) → ¬ProfessionalSoccerPlayer(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))\n∀x (ProfessionalCenterback(x) → ProfessionalSoccerDefender(x))\n¬(NBAPlayer(rogerfederer) ⊕ ProfessionalSoccerDefender(rogerfederer))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProfessionalCenterback(rogerFederer)\n\"\"\""
    ]
  },
  {
    "id": 838,
    "question": "Roger Federer is not a centerback.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalBasketballPlayer(x) → ¬ProfessionalSoccerPlayer(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))\n∀x (ProfessionalCenterback(x) → ProfessionalSoccerDefender(x))\n¬(NBAPlayer(rogerfederer) ⊕ ProfessionalSoccerDefender(rogerfederer))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ProfessionalCenterback(rogerFederer)\n\"\"\""
    ]
  },
  {
    "id": 839,
    "question": "Roger Federer is a soccer player.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalBasketballPlayer(x) → ¬ProfessionalSoccerPlayer(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))\n∀x (ProfessionalCenterback(x) → ProfessionalSoccerDefender(x))\n¬(NBAPlayer(rogerfederer) ⊕ ProfessionalSoccerDefender(rogerfederer))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProfessionalSoccerPlayer(rogerFederer)\n\"\"\""
    ]
  },
  {
    "id": 1274,
    "question": "Mary is nice.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Teacher(x) ∧ WorkAt(x, pool) ∧ ¬Nice(x))\n∀x (Teacher(x) ∧ WorkAt(x, pool) → PoolManager(x))\n∀x (PoolManager(x) → Lifeguard(x))\n∀x (Lifeguard(x) → WorkAt(x, pool))\n¬WorkAt(mary, pool)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNice(mary)\n\"\"\""
    ]
  },
  {
    "id": 1275,
    "question": "Mary is not a nice teacher working at a pool.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Teacher(x) ∧ WorkAt(x, pool) ∧ ¬Nice(x))\n∀x (Teacher(x) ∧ WorkAt(x, pool) → PoolManager(x))\n∀x (PoolManager(x) → Lifeguard(x))\n∀x (Lifeguard(x) → WorkAt(x, pool))\n¬WorkAt(mary, pool)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Nice(mary) ∧ Teacher(mary) ∧ WorkAt(mary, pool))\n\"\"\""
    ]
  },
  {
    "id": 1276,
    "question": "Mary is is a nice teacher working at a pool.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Teacher(x) ∧ WorkAt(x, pool) ∧ ¬Nice(x))\n∀x (Teacher(x) ∧ WorkAt(x, pool) → PoolManager(x))\n∀x (PoolManager(x) → Lifeguard(x))\n∀x (Lifeguard(x) → WorkAt(x, pool))\n¬WorkAt(mary, pool)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNice(mary) ∧ Teacher(mary) ∧ WorkAt(mary, pool)\n\"\"\""
    ]
  },
  {
    "id": 746,
    "question": "There exist art pieces that do not require practice.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ArtPiece(x) ∧ ¬Require(x, talent))\n∀x (Require(x, talent) → Require(x, practice))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (ArtPiece(x) ∧ ¬Require(x, practice) ∧ ArtPiece(y) ∧ ¬Require(y, practice) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 267,
    "question": "Bernarda Bryson Shahn was born in Greece.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n∀x (BornIn(x, athensOhio) → American(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBornIn(bernardaBrysonShahn, greece)\n\"\"\""
    ]
  },
  {
    "id": 268,
    "question": "Bernarda Bryson Shahn was American.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n∀x (BornIn(x, athensOhio) → American(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmerican(bernardaBrysonShahn)\n\"\"\""
    ]
  },
  {
    "id": 269,
    "question": "Bernarda Bryson Shahn had been divorced once.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n∀x (BornIn(x, athensOhio) → American(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDivorced(bernardaBrysonShahn)\n\"\"\""
    ]
  },
  {
    "id": 982,
    "question": "Emily is in Emma's family and she lives with at least one roommate.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))\n∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))\n∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))\n∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))\n∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))\nInEmmasFamily(emily)\n((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃y (LiveWith(emily, y) ∧ Roommate(y))\n\"\"\""
    ]
  },
  {
    "id": 983,
    "question": "Emily enjoys reading about tech specs and keeping up to date on the latest technology.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))\n∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))\n∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))\n∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))\n∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))\nInEmmasFamily(emily)\n((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEnjoyReading(emily, techSpec) ∧ KeepUpdatedOn(emily, latestTechnology)\n\"\"\""
    ]
  },
  {
    "id": 1298,
    "question": "Nancy is a faculty member.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OnPayroll(x) → PaidBy(x, school))\n∀x (HaveJobAt(x, school) → OnPayroll(x))\n∀x (FacultyMember(x) → HaveJobAt(x, school))\n∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))\n∀x (Teacher(x) → Have(x, student))\nTeacher(nancy) → OnPayroll(nancy)\n¬Teacher(nancy) → ¬OnPayroll(nancy)\nTeach(nancy, student)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFacultyMember(nancy)\n\"\"\""
    ]
  },
  {
    "id": 1299,
    "question": "Nancy is paid by the school and has students.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OnPayroll(x) → PaidBy(x, school))\n∀x (HaveJobAt(x, school) → OnPayroll(x))\n∀x (FacultyMember(x) → HaveJobAt(x, school))\n∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))\n∀x (Teacher(x) → Have(x, student))\nTeacher(nancy) → OnPayroll(nancy)\n¬Teacher(nancy) → ¬OnPayroll(nancy)\nTeach(nancy, student)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPaidBy(nancy, school) ∧ Have(nancy, student)\n\"\"\""
    ]
  },
  {
    "id": 1300,
    "question": "Nancy is not paid by the school or does not have students.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OnPayroll(x) → PaidBy(x, school))\n∀x (HaveJobAt(x, school) → OnPayroll(x))\n∀x (FacultyMember(x) → HaveJobAt(x, school))\n∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))\n∀x (Teacher(x) → Have(x, student))\nTeacher(nancy) → OnPayroll(nancy)\n¬Teacher(nancy) → ¬OnPayroll(nancy)\nTeach(nancy, student)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬PaidBy(nancy, school) ∨ ¬Have(nancy, student))\n\"\"\""
    ]
  },
  {
    "id": 691,
    "question": "Jane will see a kangaroo if she saves enough money for the summer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kangaroo(x) → Animal(x))\n∀x (Kangaroo(x) → ¬LiveIn(x, germany))\nSavesFor(jane, enoughMoney, theSummer) → FlyTo(jane, germany)\nFlyTo(jane, germany) → GoTo(jane, berlinzoo) \n∀x ∃y (GoTo(x, berlinzoo) ∧ LiveIn(x, germany) ∧ Animal(y) → WillSee(y, x, berlinzoo))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (SavesFor(jane, enoughMoney, theSummer)  ∧ Kangaroo(x) → WillSee(x, jane, berlinzoo))\n\"\"\""
    ]
  },
  {
    "id": 611,
    "question": "CPSC 201 has no prerequisites.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ∀z (Class(x) ∧ Student(y) ∧ Prereq(z,x) ∧ ¬Take(y, z) → ¬CanTake(y, x))\n∀x ∀y ((Class(x) ∧ Student(y) ∧ ¬∃z Prereq(z,x)) → CanTake(y, x))\nPrereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)\n∀x (Prereq(x,intermediateMicro) → x=introMicroeconomics)\n¬(∃x (Prereq(x, introGeology)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (¬Prereq(x, cpsc201))\n\"\"\""
    ]
  },
  {
    "id": 612,
    "question": "If a student took CPSC 201 but did not take CPSC 223, they can take CPSC 323.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ∀z (Class(x) ∧ Student(y) ∧ Prereq(z,x) ∧ ¬Take(y, z) → ¬CanTake(y, x))\n∀x ∀y ((Class(x) ∧ Student(y) ∧ ¬∃z Prereq(z,x)) → CanTake(y, x))\nPrereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)\n∀x (Prereq(x,intermediateMicro) → x=introMicroeconomics)\n¬(∃x (Prereq(x, introGeology)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTaken(cpsc201) ∧ ¬Taken(cpsc223) ∧ CanTake(cpsc323)\n\"\"\""
    ]
  },
  {
    "id": 613,
    "question": "A student cannot take Intro Geology.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ∀z (Class(x) ∧ Student(y) ∧ Prereq(z,x) ∧ ¬Take(y, z) → ¬CanTake(y, x))\n∀x ∀y ((Class(x) ∧ Student(y) ∧ ¬∃z Prereq(z,x)) → CanTake(y, x))\nPrereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)\n∀x (Prereq(x,intermediateMicro) → x=introMicroeconomics)\n¬(∃x (Prereq(x, introGeology)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬CanTake(introgeology)\n\"\"\""
    ]
  },
  {
    "id": 614,
    "question": "Intermediate Microeconomics has one prerequisite.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ∀z (Class(x) ∧ Student(y) ∧ Prereq(z,x) ∧ ¬Take(y, z) → ¬CanTake(y, x))\n∀x ∀y ((Class(x) ∧ Student(y) ∧ ¬∃z Prereq(z,x)) → CanTake(y, x))\nPrereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)\n∀x (Prereq(x,intermediateMicro) → x=introMicroeconomics)\n¬(∃x (Prereq(x, introGeology)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Taken(x) → CanTake(intermediatemicro))\n\"\"\""
    ]
  },
  {
    "id": 107,
    "question": "The Harry Potter series of books is Heptalogy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SevenDistinctWorks(x) → Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesOfNarnia)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHeptalogy(harryPotter)\n\"\"\""
    ]
  },
  {
    "id": 108,
    "question": "The Chronicles of Narnia series of books is not Heptalogy.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SevenDistinctWorks(x) → Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesOfNarnia)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Heptalogy(chroniclesOfNarnia)\n\"\"\""
    ]
  },
  {
    "id": 109,
    "question": "The Lord of the Rings is Heptalogy.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SevenDistinctWorks(x) → Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesOfNarnia)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHeptalogy(lordOfRings)\n\"\"\""
    ]
  },
  {
    "id": 1017,
    "question": "Clyde attends Renaissance fairs regularly.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AttendRegularly(x, renaissanceFair) → Enjoy(x, dressingUp, oldFashionedClothing) ∧ Enjoy(x, dressingUp, historicalPeriodClothing))\n∀x (FascinatedBy(x, historyOfRenaissance) → AttendRegularly(x, renaissanceFair))\n∀x (FascinatedBy(x, historyOfRenaissance) ⊕ (ContemporaryAcademic(x) ∧ Enjoy(x, learning)))\n∀x (FocusedOn(x, futuristicSubject) ∧ FocusedOn(x, vocationalSubject) → ContemporaryAcademic(x) ∧ Enjoy(x, learning))\n∀x (Professor(x) ∧ Take(x, historicalApproach) → ¬(ContemporaryAcademic(x) ∧ Enjoy(x, learning)))\n¬(FocusedOn(clyde, futuristicSubject) ∧ FocusedOn(clyde, vocationalSubject))→ ¬(FocusedOn(clyde, futuristicSubject) ∧ FocusedOn(clyde, vocationalSubject) ∨ (Enjoy(clyde, dressingUp, oldFashionedClothing) ∧ Enjoy(clyde, dressingUp, historicalPeriodClothing)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAttendRegularly(clyde, renaissanceFair)\n\"\"\""
    ]
  },
  {
    "id": 1018,
    "question": "Clyde is a professor who takes a historical approach.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AttendRegularly(x, renaissanceFair) → Enjoy(x, dressingUp, oldFashionedClothing) ∧ Enjoy(x, dressingUp, historicalPeriodClothing))\n∀x (FascinatedBy(x, historyOfRenaissance) → AttendRegularly(x, renaissanceFair))\n∀x (FascinatedBy(x, historyOfRenaissance) ⊕ (ContemporaryAcademic(x) ∧ Enjoy(x, learning)))\n∀x (FocusedOn(x, futuristicSubject) ∧ FocusedOn(x, vocationalSubject) → ContemporaryAcademic(x) ∧ Enjoy(x, learning))\n∀x (Professor(x) ∧ Take(x, historicalApproach) → ¬(ContemporaryAcademic(x) ∧ Enjoy(x, learning)))\n¬(FocusedOn(clyde, futuristicSubject) ∧ FocusedOn(clyde, vocationalSubject))→ ¬(FocusedOn(clyde, futuristicSubject) ∧ FocusedOn(clyde, vocationalSubject) ∨ (Enjoy(clyde, dressingUp, oldFashionedClothing) ∧ Enjoy(clyde, dressingUp, historicalPeriodClothing)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProfessor(clyde) ∧ Take(clyde, historicalApproach)\n\"\"\""
    ]
  },
  {
    "id": 1019,
    "question": "Clyde is a professor who takes a historical approach, or is a contemporary academic.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AttendRegularly(x, renaissanceFair) → Enjoy(x, dressingUp, oldFashionedClothing) ∧ Enjoy(x, dressingUp, historicalPeriodClothing))\n∀x (FascinatedBy(x, historyOfRenaissance) → AttendRegularly(x, renaissanceFair))\n∀x (FascinatedBy(x, historyOfRenaissance) ⊕ (ContemporaryAcademic(x) ∧ Enjoy(x, learning)))\n∀x (FocusedOn(x, futuristicSubject) ∧ FocusedOn(x, vocationalSubject) → ContemporaryAcademic(x) ∧ Enjoy(x, learning))\n∀x (Professor(x) ∧ Take(x, historicalApproach) → ¬(ContemporaryAcademic(x) ∧ Enjoy(x, learning)))\n¬(FocusedOn(clyde, futuristicSubject) ∧ FocusedOn(clyde, vocationalSubject))→ ¬(FocusedOn(clyde, futuristicSubject) ∧ FocusedOn(clyde, vocationalSubject) ∨ (Enjoy(clyde, dressingUp, oldFashionedClothing) ∧ Enjoy(clyde, dressingUp, historicalPeriodClothing)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Professor(clyde) ∧ Take(clyde, historicalApproach)) ∨ (ContemporaryAcademic(clyde) ∧ Enjoy(clyde, learning))\n\"\"\""
    ]
  },
  {
    "id": 714,
    "question": "No sports cars are automobiles designed for family use.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SportsCar(x) → ¬IntendedToBeDrivenAt(x, moderateSpeed))\n∀x (DesignedFor(x, familyUse) → IntendedToBeDrivenAt(x, moderateSpeed))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (SportsCar(x) → ¬For(x, familyUse))\n\"\"\""
    ]
  },
  {
    "id": 944,
    "question": "Kat is a person who comes to work every day with a positive attitude.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkWellInTeamsIn(x, workPlace) → ∀y (Colleague(y) ∧ GetAlongWithAtWork(x, y)))\n∀x (ComeToWorkWithEveryDay(x, positiveAttitude) → WorkWellInTeamsIn(x, workPlace))\n∀x (ComeToWorkWithEveryDay(x, positiveAttitude) ⊕ AlwaysTiredInMorning(x))\n∀x (AlwaysTiredInMorning(x) → CriticizedBy(x, boss))\n∀x (CriticizedBy(x, boss) → ¬ReceiveFromAtWork(x, positiveFeedback, team))\n¬(WorkWellInTeamsIn(kat, workPlace) ⊕ Tired(kat))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nComeToWorkWithEveryDay(kat, positiveAttitude)\n\"\"\""
    ]
  },
  {
    "id": 945,
    "question": "Kat gets along with her colleagues at her work and receives positive feedback from teams at her work.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkWellInTeamsIn(x, workPlace) → ∀y (Colleague(y) ∧ GetAlongWithAtWork(x, y)))\n∀x (ComeToWorkWithEveryDay(x, positiveAttitude) → WorkWellInTeamsIn(x, workPlace))\n∀x (ComeToWorkWithEveryDay(x, positiveAttitude) ⊕ AlwaysTiredInMorning(x))\n∀x (AlwaysTiredInMorning(x) → CriticizedBy(x, boss))\n∀x (CriticizedBy(x, boss) → ¬ReceiveFromAtWork(x, positiveFeedback, team))\n¬(WorkWellInTeamsIn(kat, workPlace) ⊕ Tired(kat))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(∀y (Colleague(y) ∧ GetAlongWithAtWork(kat, y))) ∧ ReceiveFromAtWork(kat, positiveFeedback, team)\n\"\"\""
    ]
  },
  {
    "id": 946,
    "question": "Kat either gets along with her colleagues at her work or receives positive feedback from teams at her work.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkWellInTeamsIn(x, workPlace) → ∀y (Colleague(y) ∧ GetAlongWithAtWork(x, y)))\n∀x (ComeToWorkWithEveryDay(x, positiveAttitude) → WorkWellInTeamsIn(x, workPlace))\n∀x (ComeToWorkWithEveryDay(x, positiveAttitude) ⊕ AlwaysTiredInMorning(x))\n∀x (AlwaysTiredInMorning(x) → CriticizedBy(x, boss))\n∀x (CriticizedBy(x, boss) → ¬ReceiveFromAtWork(x, positiveFeedback, team))\n¬(WorkWellInTeamsIn(kat, workPlace) ⊕ Tired(kat))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(∀y (Colleague(y) ∧ GetAlongWithAtWork(kat, y))) ⊕ ReceiveFromAtWork(kat, positiveFeedback, team)\n\"\"\""
    ]
  },
  {
    "id": 720,
    "question": "Drishti is free to modify.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOpenSourceSoftware(drishti)\n∀x (OpenSourceSoftware(x) → FreeToModify(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFreeToModify(drishti)\n\"\"\""
    ]
  },
  {
    "id": 461,
    "question": "Zhang's English class score is lower than 95.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGradeIn(aPlus, englishClass) ∨ GradeIn(a, englishClass) ∨ GradeIn(bPlus, englishClass) ∨ GradeIn(b, englishClass) ∨ GradeIn(c, englishClass) ∧ (GradeIn(aPlus, englishClass) → ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(a, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(bPlus, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(b, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(c, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass)) \n∀x ∀y (Student(x) ∧ GetGradeIn(x, aPlus, englishClass) → EnglishClassScore(x, y) ∧ GreaterThan95(y))\n∀x ∀y (Student(x) ∧ GetGradeIn(x, a, englishClass) → EnglishClassScore(x, y) ∧ GreaterThan90(y) ∧ LowerThan95(y)) \nStudent(zhang) ∧ GetGradeIn(zhang, a, englishClass)\n∀x ∀y (Student(zhang) ∧ Student(wang) ∧ EnglishScore(zhang, x) ∧ EnglishScore(wang, y) ∧ Better(y, x))\n∀x (Student(wu) ∧ EnglishScore(wu, x) ∧ LowerThan90(x))\n∀x ∀y (Student(x) ∧ EnglishScore(x, y) ∧ LowerThan90(y) → ¬GreaterThan95(y) ∧ ¬GreaterThan90(y) ∧ LowerThan95(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (EnglishScore(zhang, x) ∧ LowerThan95(x))\n\"\"\""
    ]
  },
  {
    "id": 462,
    "question": "Wang got an A+ in English class.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGradeIn(aPlus, englishClass) ∨ GradeIn(a, englishClass) ∨ GradeIn(bPlus, englishClass) ∨ GradeIn(b, englishClass) ∨ GradeIn(c, englishClass) ∧ (GradeIn(aPlus, englishClass) → ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(a, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(bPlus, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(b, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(c, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass)) \n∀x ∀y (Student(x) ∧ GetGradeIn(x, aPlus, englishClass) → EnglishClassScore(x, y) ∧ GreaterThan95(y))\n∀x ∀y (Student(x) ∧ GetGradeIn(x, a, englishClass) → EnglishClassScore(x, y) ∧ GreaterThan90(y) ∧ LowerThan95(y)) \nStudent(zhang) ∧ GetGradeIn(zhang, a, englishClass)\n∀x ∀y (Student(zhang) ∧ Student(wang) ∧ EnglishScore(zhang, x) ∧ EnglishScore(wang, y) ∧ Better(y, x))\n∀x (Student(wu) ∧ EnglishScore(wu, x) ∧ LowerThan90(x))\n∀x ∀y (Student(x) ∧ EnglishScore(x, y) ∧ LowerThan90(y) → ¬GreaterThan95(y) ∧ ¬GreaterThan90(y) ∧ LowerThan95(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGetGradeIn(wang, aPlus, englishClass)\n\"\"\""
    ]
  },
  {
    "id": 463,
    "question": "Wu does not get an A or A+ in English class.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGradeIn(aPlus, englishClass) ∨ GradeIn(a, englishClass) ∨ GradeIn(bPlus, englishClass) ∨ GradeIn(b, englishClass) ∨ GradeIn(c, englishClass) ∧ (GradeIn(aPlus, englishClass) → ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(a, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(bPlus, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(b, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(c, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass)) \n∀x ∀y (Student(x) ∧ GetGradeIn(x, aPlus, englishClass) → EnglishClassScore(x, y) ∧ GreaterThan95(y))\n∀x ∀y (Student(x) ∧ GetGradeIn(x, a, englishClass) → EnglishClassScore(x, y) ∧ GreaterThan90(y) ∧ LowerThan95(y)) \nStudent(zhang) ∧ GetGradeIn(zhang, a, englishClass)\n∀x ∀y (Student(zhang) ∧ Student(wang) ∧ EnglishScore(zhang, x) ∧ EnglishScore(wang, y) ∧ Better(y, x))\n∀x (Student(wu) ∧ EnglishScore(wu, x) ∧ LowerThan90(x))\n∀x ∀y (Student(x) ∧ EnglishScore(x, y) ∧ LowerThan90(y) → ¬GreaterThan95(y) ∧ ¬GreaterThan90(y) ∧ LowerThan95(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬GetGradeIn(wu, aPlus, englishClass) ∧¬GetGradeIn(wu, a, englishClass)\n\"\"\""
    ]
  },
  {
    "id": 617,
    "question": "At all times, Olivia prefers a cool temperature.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Day(x) → ¬Prefer(olivia, warmTemperature, x))\n∀x (Sleep(olivia, x) → Prefer(olivia, coolTemperature, x))\n∀x (Night(x) → Sleep(olivia, x))\n∀x (Day(x) → Work(olivia, x))\nWork(olivia) ⊕ Sleep(olivia)\n∀x (Day(x) ⊕ Night(x))\n∀x (Prefer(olivia, warmTemperature, x) ⊕ Prefer(olivia, coolTemperature, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Prefer(olivia, coolTemperature, x))\n\"\"\""
    ]
  },
  {
    "id": 592,
    "question": "TOra is a paid software.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGUI(tora)\n∀x (GUI(x) → Software(x))\n∀x (Software(x) → Free(x) ⊕ Paid(x))\n∀x (Paid(x) ∧ Software(x) → ¬UnderGNULicense(x))\nUnderGNULicense(tora)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPaid(tora) ∧ Software(tora)\n\"\"\""
    ]
  },
  {
    "id": 593,
    "question": "TOra is a free software.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGUI(tora)\n∀x (GUI(x) → Software(x))\n∀x (Software(x) → Free(x) ⊕ Paid(x))\n∀x (Paid(x) ∧ Software(x) → ¬UnderGNULicense(x))\nUnderGNULicense(tora)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFree(tora) ∧ Software(tora)\n\"\"\""
    ]
  },
  {
    "id": 1199,
    "question": "James is a customer who does not choose any plans.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Customer(x) → (Choose(x, primeVideoPlan) ∨ Choose(x, hBOMaxPlan)))\n∀x ((Customer(x) ∧ Choose(x, hBOMaxPlan)) → RewardWith(x, giftCard))\n∀x (Customer(x) → (∃y(Plan(y) ∧ Choose(x, y))))\n∀x ((Customer(x) ∧ RewardWith(x, giftCard)) → (¬OlderThan(x, num80)))\n∀x (Customer(x) → (∃y(GreaterThan(y, num80) ∧ Age(james,y)) ⊕ (∃y(Between(y, num60, num80) ∧ Age(james, y)))))\nCustomer(james) ∧ (¬∃y(Between(y, num60, num80) ∧ Age(james, y)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nChoose(james, noPlan)\n\"\"\""
    ]
  },
  {
    "id": 1200,
    "question": "James is a customer who chooses a Prime Video plan or does not choose any plans.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Customer(x) → (Choose(x, primeVideoPlan) ∨ Choose(x, hBOMaxPlan)))\n∀x ((Customer(x) ∧ Choose(x, hBOMaxPlan)) → RewardWith(x, giftCard))\n∀x (Customer(x) → (∃y(Plan(y) ∧ Choose(x, y))))\n∀x ((Customer(x) ∧ RewardWith(x, giftCard)) → (¬OlderThan(x, num80)))\n∀x (Customer(x) → (∃y(GreaterThan(y, num80) ∧ Age(james,y)) ⊕ (∃y(Between(y, num60, num80) ∧ Age(james, y)))))\nCustomer(james) ∧ (¬∃y(Between(y, num60, num80) ∧ Age(james, y)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nChoose(james, planA) ∨ Choose(james, noPlan)\n\"\"\""
    ]
  },
  {
    "id": 1201,
    "question": "Suppose James is a customer who chooses the Prime Video plan or does not choose any plans, then he is either rewarded a $30 gift card or chooses the HBO Max plan.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Customer(x) → (Choose(x, primeVideoPlan) ∨ Choose(x, hBOMaxPlan)))\n∀x ((Customer(x) ∧ Choose(x, hBOMaxPlan)) → RewardWith(x, giftCard))\n∀x (Customer(x) → (∃y(Plan(y) ∧ Choose(x, y))))\n∀x ((Customer(x) ∧ RewardWith(x, giftCard)) → (¬OlderThan(x, num80)))\n∀x (Customer(x) → (∃y(GreaterThan(y, num80) ∧ Age(james,y)) ⊕ (∃y(Between(y, num60, num80) ∧ Age(james, y)))))\nCustomer(james) ∧ (¬∃y(Between(y, num60, num80) ∧ Age(james, y)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nChoose(james, planA) ∨ Choose(james, noPlan) → RewardWith(james, giftCard) ⊕ Choose(james, planB)\n\"\"\""
    ]
  },
  {
    "id": 497,
    "question": "Detroit City has been in multiple races.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHorse(detroitcity)\n∃x (Horse(x) ∧ Racehorse(x))\n∀x (Horse(x) ∧ InRace(x) ∧ Falls(x) → PoseRiskTo(x, rider))\nInRace(detroitcity) ∧ Fall(detroitcity)\n∀x (Horse(x) ∧ InRace(x) → Racehorse(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMultipleRace(detroitcity)\n\"\"\""
    ]
  },
  {
    "id": 498,
    "question": "Detroit City poses risks to its rider.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHorse(detroitcity)\n∃x (Horse(x) ∧ Racehorse(x))\n∀x (Horse(x) ∧ InRace(x) ∧ Falls(x) → PoseRiskTo(x, rider))\nInRace(detroitcity) ∧ Fall(detroitcity)\n∀x (Horse(x) ∧ InRace(x) → Racehorse(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPoseRiskTo(detroitcity, rider)\n\"\"\""
    ]
  },
  {
    "id": 499,
    "question": "Detroit City is a racehorse.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHorse(detroitcity)\n∃x (Horse(x) ∧ Racehorse(x))\n∀x (Horse(x) ∧ InRace(x) ∧ Falls(x) → PoseRiskTo(x, rider))\nInRace(detroitcity) ∧ Fall(detroitcity)\n∀x (Horse(x) ∧ InRace(x) → Racehorse(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRacehorse(detroitcity)\n\"\"\""
    ]
  },
  {
    "id": 339,
    "question": "Frederick Monhoff was good at physical art.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nArchitect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff)\nAmerican(monhoff)\n∀x (Artist(x) → GoodAt(x, physicalArt) ∨ GoodAt(x, conceptualArt))\n∀x (American(x) → AmericanCitizen(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoodAt(monhoff, physicalArt)\n\"\"\""
    ]
  },
  {
    "id": 340,
    "question": "No illustrator was an American citizen.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nArchitect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff)\nAmerican(monhoff)\n∀x (Artist(x) → GoodAt(x, physicalArt) ∨ GoodAt(x, conceptualArt))\n∀x (American(x) → AmericanCitizen(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(∃x (Illustrator(x) ∧ AmericanCitizen(x)))\n\"\"\""
    ]
  },
  {
    "id": 51,
    "question": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslavFiedler) ∧ Mathematician(miroslavFiedler)\nKnownFor(miroslavFiedler, contributionsToLinearAlgebraAndGraphTheory)\nHonoredBy(miroslavFiedler, fiedlerEigenvalue)\nTheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (TheSecondSmallestEigenvalueOf(x, theGraphLaplacian) ∧ HonoredBy(miroslavFiedler, x))\n\"\"\""
    ]
  },
  {
    "id": 52,
    "question": "Miroslav Fiedler was a French mathematician.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslavFiedler) ∧ Mathematician(miroslavFiedler)\nKnownFor(miroslavFiedler, contributionsToLinearAlgebraAndGraphTheory)\nHonoredBy(miroslavFiedler, fiedlerEigenvalue)\nTheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFrench(miroslavFiedler) ∧ Mathematician(miroslavFiedler)\n\"\"\""
    ]
  },
  {
    "id": 53,
    "question": "A Czech mathematician is known for his contributions to linear algebra and graph theory.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslavFiedler) ∧ Mathematician(miroslavFiedler)\nKnownFor(miroslavFiedler, contributionsToLinearAlgebraAndGraphTheory)\nHonoredBy(miroslavFiedler, fiedlerEigenvalue)\nTheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Czech(x) ∧ Mathematician(x) ∧ KnownFor(x, contributionsToLinearAlgebraAndGraphTheory))\n\"\"\""
    ]
  },
  {
    "id": 444,
    "question": "You can play games on a laptop.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Laptop(x) → Computer(x))\n∀x (Computer(x) → CanPlayGameOn(x))\n∀x (Phone(x) → ¬Computer(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Laptop(x) → CanPlayGameOn(x))\n\"\"\""
    ]
  },
  {
    "id": 445,
    "question": "You can not play games on a phone.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Laptop(x) → Computer(x))\n∀x (Computer(x) → CanPlayGameOn(x))\n∀x (Phone(x) → ¬Computer(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Phone(x) → ¬CanPlayGameOn(x))\n\"\"\""
    ]
  },
  {
    "id": 29,
    "question": "Walter Folger Brown graduated with a Bachelor of Arts.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmericanPolitician(walterBrown) ∧ Lawyer(walterBrown) ∧ ServedAs(walterBrown, postMasterGeneral)\nGraduated(walterBrown, harvard) ∧ GraduatedWith(walterBrown, bachelorsOfArt)\n∃t(In(walterBrown, toledo, t) ∧ In(walterBrownFather, toledo, t) ∧ PracticedLawTogether(walterBrown, walterBrownFather, t))\nMarried(katherinHafer, walterBrown)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGraduatedWith(walterBrown, bachelorsOfArt)\n\"\"\""
    ]
  },
  {
    "id": 30,
    "question": "Walter Folger Brown's father was in Toledo.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmericanPolitician(walterBrown) ∧ Lawyer(walterBrown) ∧ ServedAs(walterBrown, postMasterGeneral)\nGraduated(walterBrown, harvard) ∧ GraduatedWith(walterBrown, bachelorsOfArt)\n∃t(In(walterBrown, toledo, t) ∧ In(walterBrownFather, toledo, t) ∧ PracticedLawTogether(walterBrown, walterBrownFather, t))\nMarried(katherinHafer, walterBrown)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃t(In(walterBrownFather, toledo, t))\n\"\"\""
    ]
  },
  {
    "id": 31,
    "question": "Walter Folger Brown was not in Toledo.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmericanPolitician(walterBrown) ∧ Lawyer(walterBrown) ∧ ServedAs(walterBrown, postMasterGeneral)\nGraduated(walterBrown, harvard) ∧ GraduatedWith(walterBrown, bachelorsOfArt)\n∃t(In(walterBrown, toledo, t) ∧ In(walterBrownFather, toledo, t) ∧ PracticedLawTogether(walterBrown, walterBrownFather, t))\nMarried(katherinHafer, walterBrown)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃t(¬In(walterBrownFather, toledo, t))\n\"\"\""
    ]
  },
  {
    "id": 1147,
    "question": "The Thinkpad X1 has an Apple M2 chip.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Product(x) ∧ DesignedBy(x, apple)) → SoldIn(x, appleStore))\n∀x ((Product(x) ∧ With(x, appleLogo)) → DesignedBy(x, apple))\n∀x (Macbook(x) → With(x, appleLogo))\n∀x ((Product(x) ∧ With(x, appleM2Chip)) → Macbook(x))\n¬(SoldIn(thinkpadX1, appleStore) ∧ Macbook(thinkpadX1))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWith(thinkpadX1, appleM2Chip)\n\"\"\""
    ]
  },
  {
    "id": 1148,
    "question": "The Thinkpad X1 is sold in Apple Stores.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Product(x) ∧ DesignedBy(x, apple)) → SoldIn(x, appleStore))\n∀x ((Product(x) ∧ With(x, appleLogo)) → DesignedBy(x, apple))\n∀x (Macbook(x) → With(x, appleLogo))\n∀x ((Product(x) ∧ With(x, appleM2Chip)) → Macbook(x))\n¬(SoldIn(thinkpadX1, appleStore) ∧ Macbook(thinkpadX1))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSoldIn(thinkpadX1, appleStore)\n\"\"\""
    ]
  },
  {
    "id": 1149,
    "question": "The Thinkpad X1 has an Apple M2 chip and is a Macbook.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Product(x) ∧ DesignedBy(x, apple)) → SoldIn(x, appleStore))\n∀x ((Product(x) ∧ With(x, appleLogo)) → DesignedBy(x, apple))\n∀x (Macbook(x) → With(x, appleLogo))\n∀x ((Product(x) ∧ With(x, appleM2Chip)) → Macbook(x))\n¬(SoldIn(thinkpadX1, appleStore) ∧ Macbook(thinkpadX1))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWith(thinkpadX1, appleM2Chip) ∧ Macbook(thinkpadX1)\n\"\"\""
    ]
  },
  {
    "id": 1150,
    "question": "The Thinkpad X1 either has an Apple M2 chip or is a Macbook.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Product(x) ∧ DesignedBy(x, apple)) → SoldIn(x, appleStore))\n∀x ((Product(x) ∧ With(x, appleLogo)) → DesignedBy(x, apple))\n∀x (Macbook(x) → With(x, appleLogo))\n∀x ((Product(x) ∧ With(x, appleM2Chip)) → Macbook(x))\n¬(SoldIn(thinkpadX1, appleStore) ∧ Macbook(thinkpadX1))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWith(thinkpadX1, appleM2Chip)) ⊕ Macbook(thinkpadX1)\n\"\"\""
    ]
  },
  {
    "id": 1151,
    "question": "If the Thinkpad X1 has an Apple M2 chip and is a Macbook, then it neither has an Apple M2 chip nor is sold in Apple Stores.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Product(x) ∧ DesignedBy(x, apple)) → SoldIn(x, appleStore))\n∀x ((Product(x) ∧ With(x, appleLogo)) → DesignedBy(x, apple))\n∀x (Macbook(x) → With(x, appleLogo))\n∀x ((Product(x) ∧ With(x, appleM2Chip)) → Macbook(x))\n¬(SoldIn(thinkpadX1, appleStore) ∧ Macbook(thinkpadX1))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(With(thinkpadX1, appleM2Chip) ∧ Macbook(thinkpadX1)) → ¬(With(thinkpadX1, appleM2Chip) ∨ SoldIn(thinkpadX1, appleStore))\n\"\"\""
    ]
  },
  {
    "id": 585,
    "question": "Oxford Circus is in London.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRoadJunction(oxfordCircus) ∧ Connect(oxfordCircus, oxfordSt, regentSt)\nIn(oxfordSt, london) ∧ In(regentSt, london)\nDesigned(nash, construction) ∧ On(construction, regentSt)\nDesigned(nash, oxfordCircus)\nArchitect(nash) ∧ British(nash)\nEntraceTo(oxfordCircus, tubeStation) ∧ PartOf(tubeStation, centralline) ∧ In(tubeStation, 1900)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIn(oxfordCircus, london)\n\"\"\""
    ]
  },
  {
    "id": 586,
    "question": "Oxford Circus is designed by a British architect.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRoadJunction(oxfordCircus) ∧ Connect(oxfordCircus, oxfordSt, regentSt)\nIn(oxfordSt, london) ∧ In(regentSt, london)\nDesigned(nash, construction) ∧ On(construction, regentSt)\nDesigned(nash, oxfordCircus)\nArchitect(nash) ∧ British(nash)\nEntraceTo(oxfordCircus, tubeStation) ∧ PartOf(tubeStation, centralline) ∧ In(tubeStation, 1900)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (British(x) ∧ Architect(x) ∧ Design(x, oxfordCircus))\n\"\"\""
    ]
  },
  {
    "id": 587,
    "question": "John Nash designed the Central line in 1900.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRoadJunction(oxfordCircus) ∧ Connect(oxfordCircus, oxfordSt, regentSt)\nIn(oxfordSt, london) ∧ In(regentSt, london)\nDesigned(nash, construction) ∧ On(construction, regentSt)\nDesigned(nash, oxfordCircus)\nArchitect(nash) ∧ British(nash)\nEntraceTo(oxfordCircus, tubeStation) ∧ PartOf(tubeStation, centralline) ∧ In(tubeStation, 1900)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (PartOf(x, centralLine) → Design(johnNash, x))\n\"\"\""
    ]
  },
  {
    "id": 588,
    "question": "Regent Street is not in London.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRoadJunction(oxfordCircus) ∧ Connect(oxfordCircus, oxfordSt, regentSt)\nIn(oxfordSt, london) ∧ In(regentSt, london)\nDesigned(nash, construction) ∧ On(construction, regentSt)\nDesigned(nash, oxfordCircus)\nArchitect(nash) ∧ British(nash)\nEntraceTo(oxfordCircus, tubeStation) ∧ PartOf(tubeStation, centralline) ∧ In(tubeStation, 1900)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬In(regentStreet, london)\n\"\"\""
    ]
  },
  {
    "id": 1369,
    "question": "Jojo is a ghost.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))\n∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))\n∀x (¬Ghost(x))\n∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))\n∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))\nPet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGhost(jojo)\n\"\"\""
    ]
  },
  {
    "id": 1370,
    "question": "Jojo is a cat or a ghost.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))\n∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))\n∀x (¬Ghost(x))\n∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))\n∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))\nPet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCat(jojo) ∨ Ghost(jojo)\n\"\"\""
    ]
  },
  {
    "id": 1371,
    "question": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))\n∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))\n∀x (¬Ghost(x))\n∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))\n∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))\nPet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCat(jojo) ∨ Ghost(jojo) → Bark(jojo) ⊕ Dog(jojo)\n\"\"\""
    ]
  },
  {
    "id": 1264,
    "question": "Fido is a husky animal.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tiger(x) → Cat(x))\n∀x (Cat(x) → ¬Dog(x))\n∀x (BengalTiger(x) → Tiger(x))\n∀x (Husky(x) → Dog(x))\nBengalTiger(fido) ⊕ Cat(fido)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHusky(fido)\n\"\"\""
    ]
  },
  {
    "id": 1265,
    "question": "Fido is not a husky.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tiger(x) → Cat(x))\n∀x (Cat(x) → ¬Dog(x))\n∀x (BengalTiger(x) → Tiger(x))\n∀x (Husky(x) → Dog(x))\nBengalTiger(fido) ⊕ Cat(fido)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Husky(fido)\n\"\"\""
    ]
  },
  {
    "id": 1266,
    "question": "Fido is a Bengal tiger.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tiger(x) → Cat(x))\n∀x (Cat(x) → ¬Dog(x))\n∀x (BengalTiger(x) → Tiger(x))\n∀x (Husky(x) → Dog(x))\nBengalTiger(fido) ⊕ Cat(fido)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBengalTiger(fido)\n\"\"\""
    ]
  },
  {
    "id": 1267,
    "question": "Fido is neither a dog nor a husky.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tiger(x) → Cat(x))\n∀x (Cat(x) → ¬Dog(x))\n∀x (BengalTiger(x) → Tiger(x))\n∀x (Husky(x) → Dog(x))\nBengalTiger(fido) ⊕ Cat(fido)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Dog(fido) ∧ ¬Husky(fido)\n\"\"\""
    ]
  },
  {
    "id": 195,
    "question": "The 2028 Summer Olympics will take place in the US.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ((SummerOlympicsIn(x,y) ∧ In(x, unitedStates)) → SummerOlympicsIn(x, unitedStates))\n∀x ∀y ((In(x, y) ∧ In(y, unitedStates)) → In(x, unitedStates))\n∀x ∀y ∀z ((In(x, z) ∧ State(z) ∧ SummerOlympicsIn(x,y)) → SummerOlympicsIn(z, y))\nSummerOlympicsIn(losAngeles, yr2028)\nIn(losAngeles, california)\nIn(atlanta, unitedStates)\nIn(california, unitedStates)\nIn(atlanta, georgia)\n¬InSummerOlympicsIn(boxing, yr2028) ∧ (¬InSummerOlympicsIn(modern_pentathlon, yr2028)) ∧ (¬InSummerOlympicsIn(weightlifting, yr2028))\nSummerOlympicsIn(atlanta, yr1996)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSummerOlympicsIn(unitedStates, yr2028)\n\"\"\""
    ]
  },
  {
    "id": 196,
    "question": "The 1996 Summer Olympics is not in Georgia.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ((SummerOlympicsIn(x,y) ∧ In(x, unitedStates)) → SummerOlympicsIn(x, unitedStates))\n∀x ∀y ((In(x, y) ∧ In(y, unitedStates)) → In(x, unitedStates))\n∀x ∀y ∀z ((In(x, z) ∧ State(z) ∧ SummerOlympicsIn(x,y)) → SummerOlympicsIn(z, y))\nSummerOlympicsIn(losAngeles, yr2028)\nIn(losAngeles, california)\nIn(atlanta, unitedStates)\nIn(california, unitedStates)\nIn(atlanta, georgia)\n¬InSummerOlympicsIn(boxing, yr2028) ∧ (¬InSummerOlympicsIn(modern_pentathlon, yr2028)) ∧ (¬InSummerOlympicsIn(weightlifting, yr2028))\nSummerOlympicsIn(atlanta, yr1996)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬SummerOlympicsIn(georgia, yr1996)\n\"\"\""
    ]
  },
  {
    "id": 197,
    "question": "Skateboarding will appear at The 2028 Summer Olympics.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ((SummerOlympicsIn(x,y) ∧ In(x, unitedStates)) → SummerOlympicsIn(x, unitedStates))\n∀x ∀y ((In(x, y) ∧ In(y, unitedStates)) → In(x, unitedStates))\n∀x ∀y ∀z ((In(x, z) ∧ State(z) ∧ SummerOlympicsIn(x,y)) → SummerOlympicsIn(z, y))\nSummerOlympicsIn(losAngeles, yr2028)\nIn(losAngeles, california)\nIn(atlanta, unitedStates)\nIn(california, unitedStates)\nIn(atlanta, georgia)\n¬InSummerOlympicsIn(boxing, yr2028) ∧ (¬InSummerOlympicsIn(modern_pentathlon, yr2028)) ∧ (¬InSummerOlympicsIn(weightlifting, yr2028))\nSummerOlympicsIn(atlanta, yr1996)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInSummerOlympicsIn(skateboarding, yr2028)\n\"\"\""
    ]
  },
  {
    "id": 23,
    "question": "Cats like playing with taiga vole.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVole(taigaVole) ∧ LiveIn(taigaVole, northAmerica)\nLikePlayingWith(cat, taigaVole)\nLiveIn(taigaVole, borealTaigaZone)\n∀x ((LiveIn(x, northAmerica) ∧ LiveIn(x, borealTaigaZone)) → LiveIn(x, coldPlace))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLikePlayingWith(cat, taigaVole)\n\"\"\""
    ]
  },
  {
    "id": 24,
    "question": "Taiga vole's living place is not cold.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVole(taigaVole) ∧ LiveIn(taigaVole, northAmerica)\nLikePlayingWith(cat, taigaVole)\nLiveIn(taigaVole, borealTaigaZone)\n∀x ((LiveIn(x, northAmerica) ∧ LiveIn(x, borealTaigaZone)) → LiveIn(x, coldPlace))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LiveIn(taigaVole, coldPlace)\n\"\"\""
    ]
  },
  {
    "id": 1041,
    "question": "Adenocarcinoma is a prostate cancer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disease(x) → (Affects(x, female) ∨ Affects(x, male)) )\n∀x (Affect(x, female) → ¬ProstateCancer(x))\n∀x (ProstateCancer(x) ∨ NonProstateCancer(x)) \n∀x (Cancer(x) → ¬Without(x, mutation)) \n∀x (NonProstateCancer(x) → Cancer(x)) \n(Cancer(adenocarcinoma) ∨ Without(adenocarcinoma, mutation)) → (Affect(adenocarcinoma, female) ∨ Without(adenocarcinoma, mutation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProstateCancer(adenocarcinoma)\n\"\"\""
    ]
  },
  {
    "id": 1042,
    "question": "Adenocarcinoma is a disease in women.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disease(x) → (Affects(x, female) ∨ Affects(x, male)) )\n∀x (Affect(x, female) → ¬ProstateCancer(x))\n∀x (ProstateCancer(x) ∨ NonProstateCancer(x)) \n∀x (Cancer(x) → ¬Without(x, mutation)) \n∀x (NonProstateCancer(x) → Cancer(x)) \n(Cancer(adenocarcinoma) ∨ Without(adenocarcinoma, mutation)) → (Affect(adenocarcinoma, female) ∨ Without(adenocarcinoma, mutation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAffect(adenocarcinoma, men)\n\"\"\""
    ]
  },
  {
    "id": 1043,
    "question": "If adenocarcinoma is a disease in women or without mutations, then adenocarcinoma is without mutations and a non-prostate cancer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disease(x) → (Affects(x, female) ∨ Affects(x, male)) )\n∀x (Affect(x, female) → ¬ProstateCancer(x))\n∀x (ProstateCancer(x) ∨ NonProstateCancer(x)) \n∀x (Cancer(x) → ¬Without(x, mutation)) \n∀x (NonProstateCancer(x) → Cancer(x)) \n(Cancer(adenocarcinoma) ∨ Without(adenocarcinoma, mutation)) → (Affect(adenocarcinoma, female) ∨ Without(adenocarcinoma, mutation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Affect(adenocarcinoma, men) ∨ Without(adenocarcinoma, mutation)) → (NonProstateCancer(adenocarcinoma) ∧ Without(adenocarcinoma, mutation))\n\"\"\""
    ]
  },
  {
    "id": 174,
    "question": "LG34 machine is produced by AOC.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y  (LabMonitor(x) ∧ AOC(x) ∧ (¬(x=y)) ∧ LabMonitor(y) ∧ AOC(y))\n∀x (LabMonitor(x) → Discounted(x))\n∀x (Discounted(x) → A1080p(x))\n∀x (A1080p(x) → ¬TypeC(x))\nLabMonitor(lg-34)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAOC(lg-34)\n\"\"\""
    ]
  },
  {
    "id": 175,
    "question": "LG34 machine does not support the type-c port.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y  (LabMonitor(x) ∧ AOC(x) ∧ (¬(x=y)) ∧ LabMonitor(y) ∧ AOC(y))\n∀x (LabMonitor(x) → Discounted(x))\n∀x (Discounted(x) → A1080p(x))\n∀x (A1080p(x) → ¬TypeC(x))\nLabMonitor(lg-34)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬TypeC(lg-34)\n\"\"\""
    ]
  },
  {
    "id": 176,
    "question": "LG34 is not with a resolution of 1080p.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y  (LabMonitor(x) ∧ AOC(x) ∧ (¬(x=y)) ∧ LabMonitor(y) ∧ AOC(y))\n∀x (LabMonitor(x) → Discounted(x))\n∀x (Discounted(x) → A1080p(x))\n∀x (A1080p(x) → ¬TypeC(x))\nLabMonitor(lg-34)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬A1080p(lg-34)\n\"\"\""
    ]
  },
  {
    "id": 1155,
    "question": "Avocados are a kind of fruit sold at the local farmers market in New Haven.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Fruit(x) ∧ SoldAt(x, nicasMarket)) → ShippedFrom(x, colombia))\n∃x ∃y (Fruit(x) ∧ SoldIn(x, newHaven) ∧ ShippedFrom(x, mexico) ∧ (¬(x=y)) ∧ Fruit(y) ∧ SoldIn(y, newHaven) ∧ ShippedFrom(y, mexico))\n∀x ((Fruit(x) ∧ ShippedFrom(x, colombia)) → ¬(SoldAt(x, localFarmersMarket)))\nFruit(avocado) ∧ (SoldAt(avocado, localFarmersMarket) ∨ SoldAt(avocado, nica'sMarket))\n¬(ShippedFrom(avocado, colombia) ⊕ SoldIn(avocado, newHaven))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFruit(avocado) ∧ SoldAt(avocado, localFarmersMarket)\n\"\"\""
    ]
  },
  {
    "id": 1156,
    "question": "Avocados are either sold at the local farmers market in New Haven or are sold in New Haven.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Fruit(x) ∧ SoldAt(x, nicasMarket)) → ShippedFrom(x, colombia))\n∃x ∃y (Fruit(x) ∧ SoldIn(x, newHaven) ∧ ShippedFrom(x, mexico) ∧ (¬(x=y)) ∧ Fruit(y) ∧ SoldIn(y, newHaven) ∧ ShippedFrom(y, mexico))\n∀x ((Fruit(x) ∧ ShippedFrom(x, colombia)) → ¬(SoldAt(x, localFarmersMarket)))\nFruit(avocado) ∧ (SoldAt(avocado, localFarmersMarket) ∨ SoldAt(avocado, nica'sMarket))\n¬(ShippedFrom(avocado, colombia) ⊕ SoldIn(avocado, newHaven))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSoldAt(avocado, localFarmersMarket) ⊕ SoldIn(avocado, newHaven)\n\"\"\""
    ]
  },
  {
    "id": 1157,
    "question": "Avocados are either sold in New Haven or sold at Nica's market.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Fruit(x) ∧ SoldAt(x, nicasMarket)) → ShippedFrom(x, colombia))\n∃x ∃y (Fruit(x) ∧ SoldIn(x, newHaven) ∧ ShippedFrom(x, mexico) ∧ (¬(x=y)) ∧ Fruit(y) ∧ SoldIn(y, newHaven) ∧ ShippedFrom(y, mexico))\n∀x ((Fruit(x) ∧ ShippedFrom(x, colombia)) → ¬(SoldAt(x, localFarmersMarket)))\nFruit(avocado) ∧ (SoldAt(avocado, localFarmersMarket) ∨ SoldAt(avocado, nica'sMarket))\n¬(ShippedFrom(avocado, colombia) ⊕ SoldIn(avocado, newHaven))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSoldIn(avocado, newHaven) ⊕ SoldAt(x, nica'sMarket)\n\"\"\""
    ]
  },
  {
    "id": 1158,
    "question": "If avocados are not both sold at the local farmers market in New Haven and shipped from Columbia, then they are neither sold at the local farmers market in New Haven nor in New Haven generally.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Fruit(x) ∧ SoldAt(x, nicasMarket)) → ShippedFrom(x, colombia))\n∃x ∃y (Fruit(x) ∧ SoldIn(x, newHaven) ∧ ShippedFrom(x, mexico) ∧ (¬(x=y)) ∧ Fruit(y) ∧ SoldIn(y, newHaven) ∧ ShippedFrom(y, mexico))\n∀x ((Fruit(x) ∧ ShippedFrom(x, colombia)) → ¬(SoldAt(x, localFarmersMarket)))\nFruit(avocado) ∧ (SoldAt(avocado, localFarmersMarket) ∨ SoldAt(avocado, nica'sMarket))\n¬(ShippedFrom(avocado, colombia) ⊕ SoldIn(avocado, newHaven))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(SoldAt(avocado, localFarmersMarket) ∧ ShippedFrom(avocado, colombia)) → ¬SoldAt(avocado, localFarmersMarket) ∧ ¬SoldIn(avocado, newHaven)\n\"\"\""
    ]
  },
  {
    "id": 1178,
    "question": "A-2017 is produced by AOC.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y(Monitor(x) ∧ ProducedBy(x, aOC) ∧ In(x, library) ∧ (¬(x=y)) ∧ Monitor(y) ∧ ProducedBy(y, aOC) ∧ In(y, library))\n∀x ((Monitor(x) ∧ In(x, library)) → CheaperThan(x, dollars800))\n∀x ((Monitor(x) ∧ CheaperThan(x, dollars800)) → ResolutionLessThan(x, p1080))\n∀x ((Monitor(x) ∧ ResolutionLessThan(x, p1080)) → ¬Supports(x, type-CPort))\nSupports(a-2017, type-CPort)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProducedBy(x, aOC)\n\"\"\""
    ]
  },
  {
    "id": 1179,
    "question": "A-2017 is produced by AOC and equipped in the library.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y(Monitor(x) ∧ ProducedBy(x, aOC) ∧ In(x, library) ∧ (¬(x=y)) ∧ Monitor(y) ∧ ProducedBy(y, aOC) ∧ In(y, library))\n∀x ((Monitor(x) ∧ In(x, library)) → CheaperThan(x, dollars800))\n∀x ((Monitor(x) ∧ CheaperThan(x, dollars800)) → ResolutionLessThan(x, p1080))\n∀x ((Monitor(x) ∧ ResolutionLessThan(x, p1080)) → ¬Supports(x, type-CPort))\nSupports(a-2017, type-CPort)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProducedBy(a-2017, aOC) ∧ In(a-2017, library)\n\"\"\""
    ]
  },
  {
    "id": 1180,
    "question": "If either A-2017 is both with a resolution of 1080p and produced by AOC or it is neither, then it is not equipped in the library.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y(Monitor(x) ∧ ProducedBy(x, aOC) ∧ In(x, library) ∧ (¬(x=y)) ∧ Monitor(y) ∧ ProducedBy(y, aOC) ∧ In(y, library))\n∀x ((Monitor(x) ∧ In(x, library)) → CheaperThan(x, dollars800))\n∀x ((Monitor(x) ∧ CheaperThan(x, dollars800)) → ResolutionLessThan(x, p1080))\n∀x ((Monitor(x) ∧ ResolutionLessThan(x, p1080)) → ¬Supports(x, type-CPort))\nSupports(a-2017, type-CPort)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(ResolutionLessThan(a-2017, p1080) ⊕ ProducedBy(x, aOC)) → ¬(In(a-2017, library))\n\"\"\""
    ]
  },
  {
    "id": 10,
    "question": "Some soccer team holds the Lithuanian Super Cup.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHolds(suduva, theLithuanianSuperCup)\nSoccerTeam(suduva)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (SoccerTeam(x) ∧ Holds(x, theLithuanianSuperCup))\n\"\"\""
    ]
  },
  {
    "id": 285,
    "question": "There is a village in England.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVillage(ainderbyQuernhow) ∧ CivilParish(ainderbyQuernhow) ∧ In(ainderbyQuernhow, hambletonDistrict)\nIn(hambletonDistrict, northYorkshire)\nIn(northYorkshire, england)\n∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Village(x) ∧ In(x, england))\n\"\"\""
    ]
  },
  {
    "id": 286,
    "question": "There is no civil parish in England.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVillage(ainderbyQuernhow) ∧ CivilParish(ainderbyQuernhow) ∧ In(ainderbyQuernhow, hambletonDistrict)\nIn(hambletonDistrict, northYorkshire)\nIn(northYorkshire, england)\n∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(∃x (CivilParish(x) ∧ In(x, england)))\n\"\"\""
    ]
  },
  {
    "id": 138,
    "question": "Douglas Adams is a writer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAuthor(douglasAdams) ∧ Authored(douglasAdams, theSalmonOfDoubt) ∧ Book(theSalmonOfDoubt)\nAbout(theSalmonOfDoubt, lifeExperience) ∧ About(theSalmonOfDoubt, technology)\n∀x (Author(x) → Writer(x))\n∀x (Writer(x) → Create(x, innovativeIdea))\n∃x ∃y (Contain(x, innovativeIdea) ∧ About(x, technology) ∧ (¬(x=y)) ∧ (Contain(y, innovativeIdea) ∧ About(y, technology)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWriter(douglasAdams)\n\"\"\""
    ]
  },
  {
    "id": 139,
    "question": "Douglas Adams created innovative ideas.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAuthor(douglasAdams) ∧ Authored(douglasAdams, theSalmonOfDoubt) ∧ Book(theSalmonOfDoubt)\nAbout(theSalmonOfDoubt, lifeExperience) ∧ About(theSalmonOfDoubt, technology)\n∀x (Author(x) → Writer(x))\n∀x (Writer(x) → Create(x, innovativeIdea))\n∃x ∃y (Contain(x, innovativeIdea) ∧ About(x, technology) ∧ (¬(x=y)) ∧ (Contain(y, innovativeIdea) ∧ About(y, technology)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCreate(douglasAdams, innovativeIdea)\n\"\"\""
    ]
  },
  {
    "id": 140,
    "question": "The Salmon of Doubt has no innovative Ideas.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAuthor(douglasAdams) ∧ Authored(douglasAdams, theSalmonOfDoubt) ∧ Book(theSalmonOfDoubt)\nAbout(theSalmonOfDoubt, lifeExperience) ∧ About(theSalmonOfDoubt, technology)\n∀x (Author(x) → Writer(x))\n∀x (Writer(x) → Create(x, innovativeIdea))\n∃x ∃y (Contain(x, innovativeIdea) ∧ About(x, technology) ∧ (¬(x=y)) ∧ (Contain(y, innovativeIdea) ∧ About(y, technology)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Contain(theSalmonOfDoubt, innovativeIdea)\n\"\"\""
    ]
  },
  {
    "id": 822,
    "question": "Reformation is an eco-friendly brand.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disposable(x) ∧ Product(x) → ¬HelpSlowDown(x, globalWarming))\n∀x (EcoFriendly(x) ∧ Brand(x) → Help(x, slowDownGlobalWarming))\n∀x (Sustainable(x) ∧ FashionBrand(x) → EcoFriendly(x) ∧ Brand(x))\n∀x (FastFashion(x) ∧ Product(x) → Disposable(x) ∧ Product(x)) \n¬HelpSlowDown(reformation, globalWarming) → (EcoFriendly(reformation) ∧ Brand(reformation)) ∨ (Sustainable(reformation) ∧ FashionBrand(reformation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEcoFriendly(reformation) ∧ Brand(reformation)\n\"\"\""
    ]
  },
  {
    "id": 823,
    "question": "Reformation produces fast fashion products.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disposable(x) ∧ Product(x) → ¬HelpSlowDown(x, globalWarming))\n∀x (EcoFriendly(x) ∧ Brand(x) → Help(x, slowDownGlobalWarming))\n∀x (Sustainable(x) ∧ FashionBrand(x) → EcoFriendly(x) ∧ Brand(x))\n∀x (FastFashion(x) ∧ Product(x) → Disposable(x) ∧ Product(x)) \n¬HelpSlowDown(reformation, globalWarming) → (EcoFriendly(reformation) ∧ Brand(reformation)) ∨ (Sustainable(reformation) ∧ FashionBrand(reformation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFastFashion(reformation) ∧ Product(reformation)\n\"\"\""
    ]
  },
  {
    "id": 824,
    "question": "Reformation does not produce fast fashion products.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disposable(x) ∧ Product(x) → ¬HelpSlowDown(x, globalWarming))\n∀x (EcoFriendly(x) ∧ Brand(x) → Help(x, slowDownGlobalWarming))\n∀x (Sustainable(x) ∧ FashionBrand(x) → EcoFriendly(x) ∧ Brand(x))\n∀x (FastFashion(x) ∧ Product(x) → Disposable(x) ∧ Product(x)) \n¬HelpSlowDown(reformation, globalWarming) → (EcoFriendly(reformation) ∧ Brand(reformation)) ∨ (Sustainable(reformation) ∧ FashionBrand(reformation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(FastFashion(reformation) ∧ Product(reformation))\n\"\"\""
    ]
  },
  {
    "id": 825,
    "question": "Reformation does not produce fast fashion products or does not produce disposable products.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disposable(x) ∧ Product(x) → ¬HelpSlowDown(x, globalWarming))\n∀x (EcoFriendly(x) ∧ Brand(x) → Help(x, slowDownGlobalWarming))\n∀x (Sustainable(x) ∧ FashionBrand(x) → EcoFriendly(x) ∧ Brand(x))\n∀x (FastFashion(x) ∧ Product(x) → Disposable(x) ∧ Product(x)) \n¬HelpSlowDown(reformation, globalWarming) → (EcoFriendly(reformation) ∧ Brand(reformation)) ∨ (Sustainable(reformation) ∧ FashionBrand(reformation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(FastFashion(reformation) ∧ Product(reformation)) ∨ ¬(Disposable(x) ∧ Product(x))\n\"\"\""
    ]
  },
  {
    "id": 826,
    "question": "If Reformation produces disposable products, then Reformation produces fast fashion products.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disposable(x) ∧ Product(x) → ¬HelpSlowDown(x, globalWarming))\n∀x (EcoFriendly(x) ∧ Brand(x) → Help(x, slowDownGlobalWarming))\n∀x (Sustainable(x) ∧ FashionBrand(x) → EcoFriendly(x) ∧ Brand(x))\n∀x (FastFashion(x) ∧ Product(x) → Disposable(x) ∧ Product(x)) \n¬HelpSlowDown(reformation, globalWarming) → (EcoFriendly(reformation) ∧ Brand(reformation)) ∨ (Sustainable(reformation) ∧ FashionBrand(reformation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Disposable(reformation) ∧ Product(reformation)) → (FastFashion(reformation) ∧ Product(reformation))\n\"\"\""
    ]
  },
  {
    "id": 827,
    "question": "If Reformation produces fast fashion products or helps slow down global warming, then Reformation produces fast fashion products.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disposable(x) ∧ Product(x) → ¬HelpSlowDown(x, globalWarming))\n∀x (EcoFriendly(x) ∧ Brand(x) → Help(x, slowDownGlobalWarming))\n∀x (Sustainable(x) ∧ FashionBrand(x) → EcoFriendly(x) ∧ Brand(x))\n∀x (FastFashion(x) ∧ Product(x) → Disposable(x) ∧ Product(x)) \n¬HelpSlowDown(reformation, globalWarming) → (EcoFriendly(reformation) ∧ Brand(reformation)) ∨ (Sustainable(reformation) ∧ FashionBrand(reformation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(FastFashion(reformation) ∧ Product(reformation)) ∨ ¬HelpSlowDown(reformation, globalWarming)\n\"\"\""
    ]
  },
  {
    "id": 283,
    "question": "Sherville Huggins has never dismissed anyone playing cricket for a constituent country.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCricketeer(royRichardson) ∧ PlaysFor(royRichardson, sintMaarten) ∧ ConstituentCountry(sintMaarten)\nRightHanded(royRichardson) ∧ Batsman(royRichardson) ∧ MediumPaceBowler(royRichardson)\nOldAtDebut(royRichardson)\nDismisses(shervilleHuggins, royRichardson)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y ((ConsituentCountry(y) ∧ PlayedFor(x, y)) →  ¬Dismissed(shervillehuggins, x))\n\"\"\""
    ]
  },
  {
    "id": 284,
    "question": "No right-handed medium-pace bowlers were playing for Sint Maarten.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCricketeer(royRichardson) ∧ PlaysFor(royRichardson, sintMaarten) ∧ ConstituentCountry(sintMaarten)\nRightHanded(royRichardson) ∧ Batsman(royRichardson) ∧ MediumPaceBowler(royRichardson)\nOldAtDebut(royRichardson)\nDismisses(shervilleHuggins, royRichardson)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ((RightHanded(x) ∧ MediumPaceBowler(x)) → ¬PlayedFor(x, sintMaarten))\n\"\"\""
    ]
  },
  {
    "id": 695,
    "question": "John is a Yale graduate.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GetAJobAt(x, google) → Have(x, aLotOfWorkExperience) ∨ Have(x, goodEducation))\n∀x (GetAJobAt(x, google) → Submitted(x, resume, google))\nHave(john, aLotOfWorkExperience)\nSubmitted(john, resume, google) ∧ GetAJobAt(john, google)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nYaleGraduate(john)\n\"\"\""
    ]
  },
  {
    "id": 884,
    "question": "Joe is a person taking classes.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IPhone(x) → ¬StandaloneDesktop(x))\n∀x (AppleMade(x) ∧ Cellphone(x) → IPhone(x))\n∀x (Phone(x) ∧ With(x, a15BionicChip) → AppleMade(x) ∧ Cellphone(x))\n∀x (Phone(x) ∧ EquippedWith(x, fourCoreGPU) ∧ MadeBy(x, apple) → Phone(x) ∧ With(x, a15BionicChip))\n(Phone(unannouncedHuaweiPhone) ∧ With(unannouncedHuaweiPhone, a15BionicChip)) ⊕ (Phone(unannouncedHuaweiPhone) ∧ EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) ∧ MadeBy(unannouncedHuaweiPhone, apple)) → ¬(Phone(unannouncedHuaweiPhone) ∧ With(unannouncedHuaweiPhone, a15BionicChip) ∧ StandaloneDesktop(unannouncedHuaweiPhone))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAppleMade(unannouncedHuaweiPhone) ∧ Cellphone(unannouncedHuaweiPhone)\n\"\"\""
    ]
  },
  {
    "id": 885,
    "question": "Joe is a PhD student.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IPhone(x) → ¬StandaloneDesktop(x))\n∀x (AppleMade(x) ∧ Cellphone(x) → IPhone(x))\n∀x (Phone(x) ∧ With(x, a15BionicChip) → AppleMade(x) ∧ Cellphone(x))\n∀x (Phone(x) ∧ EquippedWith(x, fourCoreGPU) ∧ MadeBy(x, apple) → Phone(x) ∧ With(x, a15BionicChip))\n(Phone(unannouncedHuaweiPhone) ∧ With(unannouncedHuaweiPhone, a15BionicChip)) ⊕ (Phone(unannouncedHuaweiPhone) ∧ EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) ∧ MadeBy(unannouncedHuaweiPhone, apple)) → ¬(Phone(unannouncedHuaweiPhone) ∧ With(unannouncedHuaweiPhone, a15BionicChip) ∧ StandaloneDesktop(unannouncedHuaweiPhone))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPhone(unannouncedHuaweiPhone) ∧ EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) ∧ MadeByApple(unannouncedHuaweiPhone)\n\"\"\""
    ]
  },
  {
    "id": 886,
    "question": "Joe is not a PhD student.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IPhone(x) → ¬StandaloneDesktop(x))\n∀x (AppleMade(x) ∧ Cellphone(x) → IPhone(x))\n∀x (Phone(x) ∧ With(x, a15BionicChip) → AppleMade(x) ∧ Cellphone(x))\n∀x (Phone(x) ∧ EquippedWith(x, fourCoreGPU) ∧ MadeBy(x, apple) → Phone(x) ∧ With(x, a15BionicChip))\n(Phone(unannouncedHuaweiPhone) ∧ With(unannouncedHuaweiPhone, a15BionicChip)) ⊕ (Phone(unannouncedHuaweiPhone) ∧ EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) ∧ MadeBy(unannouncedHuaweiPhone, apple)) → ¬(Phone(unannouncedHuaweiPhone) ∧ With(unannouncedHuaweiPhone, a15BionicChip) ∧ StandaloneDesktop(unannouncedHuaweiPhone))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Phone(unannouncedHuaweiPhone) ∧ EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) ∧ MadeByApple(unannouncedHuaweiPhone))\n\"\"\""
    ]
  },
  {
    "id": 92,
    "question": "Hugh Vanstone is one of the world's leading lighting designers and is from the UK.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWorldLeadingLightingDesigner(hughVanstone)\nFrom(hughVanstone, unitedKingdom)\n∃x(GreaterThan(x, num160) ∧ LitProductions(hughVanstone,x))\n∃x(Hometown(hughVanstone,x) ∧ AttendedSchoolIn(hughVanstone,x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWorldLeadingLightingDesigner(hughVanstone) ∧ From(hughVanstone, unitedKingdom)\n\"\"\""
    ]
  },
  {
    "id": 93,
    "question": "Hugh Vanstone has lit 170 productions.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWorldLeadingLightingDesigner(hughVanstone)\nFrom(hughVanstone, unitedKingdom)\n∃x(GreaterThan(x, num160) ∧ LitProductions(hughVanstone,x))\n∃x(Hometown(hughVanstone,x) ∧ AttendedSchoolIn(hughVanstone,x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x(GreaterThan(x, num170) ∧ LitProductions(hughVanstone,x))\n\"\"\""
    ]
  },
  {
    "id": 94,
    "question": "Hugh Vanstone attended a school in the United States.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWorldLeadingLightingDesigner(hughVanstone)\nFrom(hughVanstone, unitedKingdom)\n∃x(GreaterThan(x, num160) ∧ LitProductions(hughVanstone,x))\n∃x(Hometown(hughVanstone,x) ∧ AttendedSchoolIn(hughVanstone,x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAttendedSchoolIn(hughVanstone, unitedStates)\n\"\"\""
    ]
  },
  {
    "id": 448,
    "question": "Superman can run faster than Bolt.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Man(x) → ¬RunFasterThan(xm bolt))\n¬Man(superman)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRunFasterThan(superman, bolt)\n\"\"\""
    ]
  },
  {
    "id": 379,
    "question": "An American scientist has been called the \"father of the analysis of algorithms\".",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(donaldErvinKnuth) ∧ ComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorEmeritusAt(donaldErvinKnuth, stanford)\nCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (American(x) ∧ ComputerScientist(x) ∧ Called(x, fatherOfTheAnalysisOfAlgorithms))\n\"\"\""
    ]
  },
  {
    "id": 380,
    "question": "A mathematician has been called the \"father of the analysis of algorithms\".",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(donaldErvinKnuth) ∧ ComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorEmeritusAt(donaldErvinKnuth, stanford)\nCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Mathematician(x) ∧ Called(x, fatherOfTheAnalysisOfAlgorithms))\n\"\"\""
    ]
  },
  {
    "id": 381,
    "question": "Donald Knuth is a well-known figure in the field of artificial intelligence.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(donaldErvinKnuth) ∧ ComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorEmeritusAt(donaldErvinKnuth, stanford)\nCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWellKnownFigureIn(donaldErvinKnuth, artificialIntelligence)\n\"\"\""
    ]
  },
  {
    "id": 362,
    "question": "There is a flea beetle within the Chrysomelidae family.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NeocrepidoderaCorpulenta(x) → (FleaBeetle(x) ∨ Moth(x)))\n∀x (NeocrepidoderaCorpulenta(x) → In(x, chrysomelidaeFamily))\n∀x (In(x, chrysomelidaeFamily) → ¬Moth(x))\n∃x (NeocrepidoderaCorpulenta(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (FleaBeetle(x) ∧ In(x, chrysomelidaeFamily))\n\"\"\""
    ]
  },
  {
    "id": 363,
    "question": "There are no flea beetles within the Chrysomelidae family.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NeocrepidoderaCorpulenta(x) → (FleaBeetle(x) ∨ Moth(x)))\n∀x (NeocrepidoderaCorpulenta(x) → In(x, chrysomelidaeFamily))\n∀x (In(x, chrysomelidaeFamily) → ¬Moth(x))\n∃x (NeocrepidoderaCorpulenta(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (FleaBeetle(x) → ¬In(x, chrysomelidaeFamily))\n\"\"\""
    ]
  },
  {
    "id": 640,
    "question": "Carrozzeria Colli made car bodies in 1931.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMilanese(carrozzeriaColli) ∧ CoachBuilder(carrozzeriaColli) ∧ Company(carrozzeriaColli) ∧ EstablishedBy(carrozzeriaColli, giuseppeColli) ∧ EstablishedIn(carrozzeriaColli, 1931)\nCompany(carrozzeriaColli) ∧ SpecializesIn(carrozzeriaColli, usingAluminum)\n∀x (BuiltBy(x, carrozzeriaColli) ∧ FirstAutomobile(x) → RacingCar(x))\n∃x (BuiltBy(x, carrozzeriaColli) ∧ RacingCar(x) ∧ Used(x, fiat1100mechanicals) ∧ Used(x, chassis))\n∃x (Airforce(x) ∧ WorkedFor(carrozzeriaColli, x))\n∃(CarBody(x) ∧ Made(x, carrozzeriaColli))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (CarBody(x) ∧ Made(x, carrozzeriaColli) ∧ MadeIn(x, 1931))\n\"\"\""
    ]
  },
  {
    "id": 641,
    "question": "Carrozzeria Colli built airplanes during World War II.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMilanese(carrozzeriaColli) ∧ CoachBuilder(carrozzeriaColli) ∧ Company(carrozzeriaColli) ∧ EstablishedBy(carrozzeriaColli, giuseppeColli) ∧ EstablishedIn(carrozzeriaColli, 1931)\nCompany(carrozzeriaColli) ∧ SpecializesIn(carrozzeriaColli, usingAluminum)\n∀x (BuiltBy(x, carrozzeriaColli) ∧ FirstAutomobile(x) → RacingCar(x))\n∃x (BuiltBy(x, carrozzeriaColli) ∧ RacingCar(x) ∧ Used(x, fiat1100mechanicals) ∧ Used(x, chassis))\n∃x (Airforce(x) ∧ WorkedFor(carrozzeriaColli, x))\n∃(CarBody(x) ∧ Made(x, carrozzeriaColli))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Airplane(x) ∧ Made(x, carrozzeriaColli) ∧ MadeDuring(x, worldWarII))\n\"\"\""
    ]
  },
  {
    "id": 642,
    "question": "Giuseppe Colli established a company that made car bodies.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMilanese(carrozzeriaColli) ∧ CoachBuilder(carrozzeriaColli) ∧ Company(carrozzeriaColli) ∧ EstablishedBy(carrozzeriaColli, giuseppeColli) ∧ EstablishedIn(carrozzeriaColli, 1931)\nCompany(carrozzeriaColli) ∧ SpecializesIn(carrozzeriaColli, usingAluminum)\n∀x (BuiltBy(x, carrozzeriaColli) ∧ FirstAutomobile(x) → RacingCar(x))\n∃x (BuiltBy(x, carrozzeriaColli) ∧ RacingCar(x) ∧ Used(x, fiat1100mechanicals) ∧ Used(x, chassis))\n∃x (Airforce(x) ∧ WorkedFor(carrozzeriaColli, x))\n∃(CarBody(x) ∧ Made(x, carrozzeriaColli))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Company(x) ∧ EstablishedBy(x, giuseppeColli) ∧ CarBody(y) ∧ Made(y, x))\n\"\"\""
    ]
  },
  {
    "id": 643,
    "question": "Giuseppe Colli established a Milanese coachbuilder company that specialized in using aluminum.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMilanese(carrozzeriaColli) ∧ CoachBuilder(carrozzeriaColli) ∧ Company(carrozzeriaColli) ∧ EstablishedBy(carrozzeriaColli, giuseppeColli) ∧ EstablishedIn(carrozzeriaColli, 1931)\nCompany(carrozzeriaColli) ∧ SpecializesIn(carrozzeriaColli, usingAluminum)\n∀x (BuiltBy(x, carrozzeriaColli) ∧ FirstAutomobile(x) → RacingCar(x))\n∃x (BuiltBy(x, carrozzeriaColli) ∧ RacingCar(x) ∧ Used(x, fiat1100mechanicals) ∧ Used(x, chassis))\n∃x (Airforce(x) ∧ WorkedFor(carrozzeriaColli, x))\n∃(CarBody(x) ∧ Made(x, carrozzeriaColli))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Milanese(x) ∧ CoachBuilder(x) ∧ Company(x) ∧ EstablishedBy(x, giuseppeColli) ∧ SpecializesIn(x, usingAluminum))\n\"\"\""
    ]
  },
  {
    "id": 644,
    "question": "The first automobiles built by Carrozzeria Colli were built using Fiat 1100 mechanicals and chassis.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMilanese(carrozzeriaColli) ∧ CoachBuilder(carrozzeriaColli) ∧ Company(carrozzeriaColli) ∧ EstablishedBy(carrozzeriaColli, giuseppeColli) ∧ EstablishedIn(carrozzeriaColli, 1931)\nCompany(carrozzeriaColli) ∧ SpecializesIn(carrozzeriaColli, usingAluminum)\n∀x (BuiltBy(x, carrozzeriaColli) ∧ FirstAutomobile(x) → RacingCar(x))\n∃x (BuiltBy(x, carrozzeriaColli) ∧ RacingCar(x) ∧ Used(x, fiat1100mechanicals) ∧ Used(x, chassis))\n∃x (Airforce(x) ∧ WorkedFor(carrozzeriaColli, x))\n∃(CarBody(x) ∧ Made(x, carrozzeriaColli))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (BuiltBy(x, carrozzeriaColli) ∧ FirstAutomobil(x) ∧ Used(x, fiat1100mechanicals) ∧ Used(x, chassis))\n\"\"\""
    ]
  },
  {
    "id": 386,
    "question": "John will go to the cinema.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n(GoTo(john, theCinema) ∧ GoTo(john, today)) ↔ GoTo(jack, theCinema) ∧ GoTo(jack, today)\n(GoTo(john, theCinema) ∧ GoTo(john, today)) ↔ (On(ironman) ∧ ¬Bad(weather, today))\n∃x (Day(x) ∧ March(x) → ¬Bad(weather, x))\nOn(ironman)\nDay(presentMoment) ∧ March(presentMoment)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoTo(john, theCinema) ∧ GoTo(john, today)\n\"\"\""
    ]
  },
  {
    "id": 387,
    "question": "The weather is good today.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n(GoTo(john, theCinema) ∧ GoTo(john, today)) ↔ GoTo(jack, theCinema) ∧ GoTo(jack, today)\n(GoTo(john, theCinema) ∧ GoTo(john, today)) ↔ (On(ironman) ∧ ¬Bad(weather, today))\n∃x (Day(x) ∧ March(x) → ¬Bad(weather, x))\nOn(ironman)\nDay(presentMoment) ∧ March(presentMoment)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Bad(weather, today)\n\"\"\""
    ]
  },
  {
    "id": 246,
    "question": "Quiksilver sells beer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Sells(quiksilver, x) → (Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x)))\nClothing(flannel)\n∃x (Sells(quiksilver, x) ∧ Owns(joe, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSells(quiksilver, beer)\n\"\"\""
    ]
  },
  {
    "id": 247,
    "question": "Joe owns a flannel.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Sells(quiksilver, x) → (Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x)))\nClothing(flannel)\n∃x (Sells(quiksilver, x) ∧ Owns(joe, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOwns(joe, flannel)\n\"\"\""
    ]
  },
  {
    "id": 248,
    "question": "Joe owns at least one piece of sportswear, clothing, footwear, or accessory",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Sells(quiksilver, x) → (Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x)))\nClothing(flannel)\n∃x (Sells(quiksilver, x) ∧ Owns(joe, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Owns(joe, x) ∧ Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))\n\"\"\""
    ]
  },
  {
    "id": 760,
    "question": "The video game \"Be Lionel\" is in the pokemon series.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (VideoGame(x) ∧ ReleasedBy(x, nintendo) → ¬Support(x, pS4))\n∀x (VideoGame(x) ∧ In(x, pokemonSeries) → ReleasedBy(x, nintendo))\n∀x (VideoGame(x) ∧ In(x, fIFASeries) → Support(x, pS4))\n∀x (VideoGame(x) ∧ Simulate(x, onlineSoccer) ∧ Use(x, licensedPlayer) → In(x, fIFASeries))\nVideoGame(beLionel) ∧ In(beLionel, pokemonSeries) ∨ (Simulate(beLionel, onlineSoccer) ∧ Use(beLionel, licensedPlayer))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVideoGame(beLionel) ∧ PokemonSeries(beLionel)\n\"\"\""
    ]
  },
  {
    "id": 761,
    "question": "The video game named “Be Lionel” either is in the FIFA series and supports the PS4 platform, or it neither is in the FIFA series nor supports the PS4 platform.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (VideoGame(x) ∧ ReleasedBy(x, nintendo) → ¬Support(x, pS4))\n∀x (VideoGame(x) ∧ In(x, pokemonSeries) → ReleasedBy(x, nintendo))\n∀x (VideoGame(x) ∧ In(x, fIFASeries) → Support(x, pS4))\n∀x (VideoGame(x) ∧ Simulate(x, onlineSoccer) ∧ Use(x, licensedPlayer) → In(x, fIFASeries))\nVideoGame(beLionel) ∧ In(beLionel, pokemonSeries) ∨ (Simulate(beLionel, onlineSoccer) ∧ Use(beLionel, licensedPlayer))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVideoGame(beLionel) ∧  ¬(FIFASeries(beLionel) ⊕ Support(beLionel, pS4))\n\"\"\""
    ]
  },
  {
    "id": 762,
    "question": "The video game named “Be Lionel” is either in the FIFA series or supports the PS4 platform.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (VideoGame(x) ∧ ReleasedBy(x, nintendo) → ¬Support(x, pS4))\n∀x (VideoGame(x) ∧ In(x, pokemonSeries) → ReleasedBy(x, nintendo))\n∀x (VideoGame(x) ∧ In(x, fIFASeries) → Support(x, pS4))\n∀x (VideoGame(x) ∧ Simulate(x, onlineSoccer) ∧ Use(x, licensedPlayer) → In(x, fIFASeries))\nVideoGame(beLionel) ∧ In(beLionel, pokemonSeries) ∨ (Simulate(beLionel, onlineSoccer) ∧ Use(beLionel, licensedPlayer))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVideoGame(beLionel) ∧ FIFASeries(beLionel) ⊕ Support(beLionel, pS4)\n\"\"\""
    ]
  },
  {
    "id": 763,
    "question": "The video game named “Be Lionel”  is not in the FIFA or Pokemon series.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (VideoGame(x) ∧ ReleasedBy(x, nintendo) → ¬Support(x, pS4))\n∀x (VideoGame(x) ∧ In(x, pokemonSeries) → ReleasedBy(x, nintendo))\n∀x (VideoGame(x) ∧ In(x, fIFASeries) → Support(x, pS4))\n∀x (VideoGame(x) ∧ Simulate(x, onlineSoccer) ∧ Use(x, licensedPlayer) → In(x, fIFASeries))\nVideoGame(beLionel) ∧ In(beLionel, pokemonSeries) ∨ (Simulate(beLionel, onlineSoccer) ∧ Use(beLionel, licensedPlayer))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVideoGame(beLionel) ∧ ¬(FIFASeries(beLionel) ∨ Support(beLionel, pS4))\n\"\"\""
    ]
  },
  {
    "id": 773,
    "question": "Bank of America payment cards are international.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (PaymentCard(x) ∧ RussianBank(y) ∧ IssuedBy(x, y) → ¬UsedWith(x, applePay))\n∀x ∀y (PaymentCard(x) ∧ MIR(x) → RussianBank(y) ∧ IssuedBy(x, y))\n∃x (PaymentCard(x) ∧ International(x) → UsedWith(x, applePay))\n∀x ∀y (SocialPayment(x) ∧TransferredTo(x, y) → PaymentCard(y) ∧ MIR(y))\nPaymentCard(bankOfAmerica) ∧ UsedWith(bankOfAmerica, applePay)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPaymentCard(bankOfAmerica) ∧ International(bankOfAmerica)\n\"\"\""
    ]
  },
  {
    "id": 774,
    "question": "Bank of America payment cards are international and can be used to transfer social payments in Russia.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (PaymentCard(x) ∧ RussianBank(y) ∧ IssuedBy(x, y) → ¬UsedWith(x, applePay))\n∀x ∀y (PaymentCard(x) ∧ MIR(x) → RussianBank(y) ∧ IssuedBy(x, y))\n∃x (PaymentCard(x) ∧ International(x) → UsedWith(x, applePay))\n∀x ∀y (SocialPayment(x) ∧TransferredTo(x, y) → PaymentCard(y) ∧ MIR(y))\nPaymentCard(bankOfAmerica) ∧ UsedWith(bankOfAmerica, applePay)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (PaymentCard(bankOfAmerica) ∧ International(bankOfAmerica) ∧ SocialPayment(x) ∧TransferredTo(x, bankOfAmerica))\n\"\"\""
    ]
  },
  {
    "id": 775,
    "question": "If Bank of America payment cards are international and can be used to transfer social payments in Russia, then they are international.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (PaymentCard(x) ∧ RussianBank(y) ∧ IssuedBy(x, y) → ¬UsedWith(x, applePay))\n∀x ∀y (PaymentCard(x) ∧ MIR(x) → RussianBank(y) ∧ IssuedBy(x, y))\n∃x (PaymentCard(x) ∧ International(x) → UsedWith(x, applePay))\n∀x ∀y (SocialPayment(x) ∧TransferredTo(x, y) → PaymentCard(y) ∧ MIR(y))\nPaymentCard(bankOfAmerica) ∧ UsedWith(bankOfAmerica, applePay)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ((PaymentCard(bandOfAmerica) ∧ International(bandOfAmerica) ∧ SocialPayment(x) ∧ TransferredTo(x, bandOfAmerica)) → International(bandOfAmerica))\n\"\"\""
    ]
  },
  {
    "id": 150,
    "question": "The Lumina APV is a van.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProducedBy(luminaAPV, chevrolet)\nProducedBy(astro, chevrolet) ∧ Van(astro)\n∀x (Vehicle(x) ∧ ProducedBy(x, chevrolet) ∧ InThisBatch(x) → (Car(x) ⊕ Van(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVan(luminaAPV)\n\"\"\""
    ]
  },
  {
    "id": 151,
    "question": "The Lumina APV is either a car or a van.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProducedBy(luminaAPV, chevrolet)\nProducedBy(astro, chevrolet) ∧ Van(astro)\n∀x (Vehicle(x) ∧ ProducedBy(x, chevrolet) ∧ InThisBatch(x) → (Car(x) ⊕ Van(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCar(luminaAPV) ⊕ Van(luminaAPV)\n\"\"\""
    ]
  },
  {
    "id": 152,
    "question": "The Astro is a van.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProducedBy(luminaAPV, chevrolet)\nProducedBy(astro, chevrolet) ∧ Van(astro)\n∀x (Vehicle(x) ∧ ProducedBy(x, chevrolet) ∧ InThisBatch(x) → (Car(x) ⊕ Van(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVan(astro)\n\"\"\""
    ]
  },
  {
    "id": 153,
    "question": "The Astro is a car.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProducedBy(luminaAPV, chevrolet)\nProducedBy(astro, chevrolet) ∧ Van(astro)\n∀x (Vehicle(x) ∧ ProducedBy(x, chevrolet) ∧ InThisBatch(x) → (Car(x) ⊕ Van(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCar(astro)\n\"\"\""
    ]
  },
  {
    "id": 1123,
    "question": "George is a person who works from home.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkIn(x, office) → Commuter(x))\n∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))\n∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))\nCommuter(george) ⊕ Have(george, homeOffice)\n(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWorkFrom(george, home)\n\"\"\""
    ]
  },
  {
    "id": 1124,
    "question": "If George is not a person who works from home and a person who works in the office, then George is neither a commuter nor a person who has a relaxed schedule.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkIn(x, office) → Commuter(x))\n∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))\n∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))\nCommuter(george) ⊕ Have(george, homeOffice)\n(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(WorkFrom(george, home) ∧ WorkIn(george, office)) → ¬(Commuter(george) ∨ Have(george, relaxedSchedule))\n\"\"\""
    ]
  },
  {
    "id": 1125,
    "question": "If George is either a person who has a home office setup and a person who works in the office, or neither a person who has a home office setup nor a person who works in the office, then George is either a person who works from home or a person who has a relaxed schedule.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkIn(x, office) → Commuter(x))\n∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))\n∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))\nCommuter(george) ⊕ Have(george, homeOffice)\n(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Have(george, homeOffice) ⊕ WorkIn(george, office)) → (WorkFrom(george, home) ⊕ Have(george, relaxedSchedule))\n\"\"\""
    ]
  },
  {
    "id": 80,
    "question": "Joe Rogan is American.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicSupervisor(jasonKramer) ∧ American(jasonKramer)\n∃x ∃y (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x) ∧ (¬(x=y)) ∧ American(y) ∧ MusicSupervisor(y) ∧ RadioPersonality(y))\n∀x ∀y((HostShowOn(x, y) ∧ PublicRadioStation(x)) → RadioPersonality(x))\nRadioPersonality(joeRogan)\n∃x(HostShowOn(jasonKramer, x) ∧ PublicRadioStation(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmerican(joeRogan)\n\"\"\""
    ]
  },
  {
    "id": 81,
    "question": "Jason Kramer is a music supervisor.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicSupervisor(jasonKramer) ∧ American(jasonKramer)\n∃x ∃y (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x) ∧ (¬(x=y)) ∧ American(y) ∧ MusicSupervisor(y) ∧ RadioPersonality(y))\n∀x ∀y((HostShowOn(x, y) ∧ PublicRadioStation(x)) → RadioPersonality(x))\nRadioPersonality(joeRogan)\n∃x(HostShowOn(jasonKramer, x) ∧ PublicRadioStation(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMusicSupervisor(jasonKramer)\n\"\"\""
    ]
  },
  {
    "id": 82,
    "question": "Jason Kramer is a radio personality.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicSupervisor(jasonKramer) ∧ American(jasonKramer)\n∃x ∃y (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x) ∧ (¬(x=y)) ∧ American(y) ∧ MusicSupervisor(y) ∧ RadioPersonality(y))\n∀x ∀y((HostShowOn(x, y) ∧ PublicRadioStation(x)) → RadioPersonality(x))\nRadioPersonality(joeRogan)\n∃x(HostShowOn(jasonKramer, x) ∧ PublicRadioStation(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRadioPersonality(jasonKramer)\n\"\"\""
    ]
  },
  {
    "id": 1223,
    "question": "A Lamborghini SUV is made in Italy.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Bag(x) ∧ Hermès(x)) → ¬MadeIn(x, italy))\n∀x ((Bag(x) ∧ Birkin(x)) → Hermès(x))\n∀x (Ferrari(x) → MadeIn(x, italy))\n∀x ((Car(x) ∧ Carry(x, ferrariV12Engine)) → Ferrrari(x))\n∀x ((Car(x) ∧ MadeIn(x, maranello)) → Carry(x, ferrariV12Engine))\n¬(Ferrari(lamborghiniSUV) ∧ MadeIn(lamborghiniSUV, maranello))\n(Bag(kelly) ∧ Hermès(kelly)) ∨ (Bag(kelly) ∧ Car(kelly) ∧ Carry(kelly, ferrariV12Engine))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMadeIn(lamborghiniSUV, italy)\n\"\"\""
    ]
  },
  {
    "id": 1224,
    "question": "A Lamborghini SUV is not made in Italy.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Bag(x) ∧ Hermès(x)) → ¬MadeIn(x, italy))\n∀x ((Bag(x) ∧ Birkin(x)) → Hermès(x))\n∀x (Ferrari(x) → MadeIn(x, italy))\n∀x ((Car(x) ∧ Carry(x, ferrariV12Engine)) → Ferrrari(x))\n∀x ((Car(x) ∧ MadeIn(x, maranello)) → Carry(x, ferrariV12Engine))\n¬(Ferrari(lamborghiniSUV) ∧ MadeIn(lamborghiniSUV, maranello))\n(Bag(kelly) ∧ Hermès(kelly)) ∨ (Bag(kelly) ∧ Car(kelly) ∧ Carry(kelly, ferrariV12Engine))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬MadeIn(lamborghiniSUV, italy)\n\"\"\""
    ]
  },
  {
    "id": 1225,
    "question": "A Kelly bag is a Birkin bag made in Maranello.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Bag(x) ∧ Hermès(x)) → ¬MadeIn(x, italy))\n∀x ((Bag(x) ∧ Birkin(x)) → Hermès(x))\n∀x (Ferrari(x) → MadeIn(x, italy))\n∀x ((Car(x) ∧ Carry(x, ferrariV12Engine)) → Ferrrari(x))\n∀x ((Car(x) ∧ MadeIn(x, maranello)) → Carry(x, ferrariV12Engine))\n¬(Ferrari(lamborghiniSUV) ∧ MadeIn(lamborghiniSUV, maranello))\n(Bag(kelly) ∧ Hermès(kelly)) ∨ (Bag(kelly) ∧ Car(kelly) ∧ Carry(kelly, ferrariV12Engine))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBag(kelly) ∧ MadeIn(kelly, maranello) ∧ Birkin(kelly)\n\"\"\""
    ]
  },
  {
    "id": 1226,
    "question": "A Kelly bag is not both made in Maranello and a Birkin bag.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Bag(x) ∧ Hermès(x)) → ¬MadeIn(x, italy))\n∀x ((Bag(x) ∧ Birkin(x)) → Hermès(x))\n∀x (Ferrari(x) → MadeIn(x, italy))\n∀x ((Car(x) ∧ Carry(x, ferrariV12Engine)) → Ferrrari(x))\n∀x ((Car(x) ∧ MadeIn(x, maranello)) → Carry(x, ferrariV12Engine))\n¬(Ferrari(lamborghiniSUV) ∧ MadeIn(lamborghiniSUV, maranello))\n(Bag(kelly) ∧ Hermès(kelly)) ∨ (Bag(kelly) ∧ Car(kelly) ∧ Carry(kelly, ferrariV12Engine))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBag(kelly) ∧ ¬(MadeIn(kelly, maranello) ∧ Birkin(kelly))\n\"\"\""
    ]
  },
  {
    "id": 596,
    "question": "Rochelle lives in a place namedGalicia.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (∃y (LiveIn(x, y) ∧ Place(y) ∧ Named(y, galicia)) → LiveIn(x, spain) ⊕ LiveIn(x, poland))\n∀x (LiveIn(x, spain) → LiveIn(x, europe))\n∀x (LiveIn(x, poland) → LiveIn(x, europe))\nLiveIn(rochelle, europe)\n¬LiveIn(dominique, europe)\n∃y (LiveIn(alfonso, y) ∧ Place(y) ∧ Named(y, galicia))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃y (LiveIn(rochelle, y) ∧ Place(y) ∧ Named(y, galicia))\n\"\"\""
    ]
  },
  {
    "id": 597,
    "question": "Dominique does not live in Spain.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (∃y (LiveIn(x, y) ∧ Place(y) ∧ Named(y, galicia)) → LiveIn(x, spain) ⊕ LiveIn(x, poland))\n∀x (LiveIn(x, spain) → LiveIn(x, europe))\n∀x (LiveIn(x, poland) → LiveIn(x, europe))\nLiveIn(rochelle, europe)\n¬LiveIn(dominique, europe)\n∃y (LiveIn(alfonso, y) ∧ Place(y) ∧ Named(y, galicia))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Live(dominique, x) → ¬In(x, spain))\n\"\"\""
    ]
  },
  {
    "id": 598,
    "question": "Alfonso lives in Europe.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (∃y (LiveIn(x, y) ∧ Place(y) ∧ Named(y, galicia)) → LiveIn(x, spain) ⊕ LiveIn(x, poland))\n∀x (LiveIn(x, spain) → LiveIn(x, europe))\n∀x (LiveIn(x, poland) → LiveIn(x, europe))\nLiveIn(rochelle, europe)\n¬LiveIn(dominique, europe)\n∃y (LiveIn(alfonso, y) ∧ Place(y) ∧ Named(y, galicia))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Live(alfonso, x) → In(x, europe))\n\"\"\""
    ]
  },
  {
    "id": 321,
    "question": "Ralph Hammerthaler is a writer born in Asia.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ralphHammerthaler, wasserburgamInn)\nLocatedIn(wasserbAmInn, germany)\nLocatedIn(germany, europe)\nWriter(ralphHammerthaler) ∧ German(ralphHammerthaler)\nBornIn1965(ralphHammerthaler)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWriter(ralphHammerthaler) ∧ BornIn(ralphHammerthaler, asia)\n\"\"\""
    ]
  },
  {
    "id": 322,
    "question": "Ralph Hammerthaler lives in Germany.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ralphHammerthaler, wasserburgamInn)\nLocatedIn(wasserbAmInn, germany)\nLocatedIn(germany, europe)\nWriter(ralphHammerthaler) ∧ German(ralphHammerthaler)\nBornIn1965(ralphHammerthaler)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLivesIn(ralphHammerthaler, germany)\n\"\"\""
    ]
  },
  {
    "id": 1166,
    "question": "Hamlet has won a Hugo Award.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Book(x) ∧ WrittenBy(x, neilGaiman)) → ∃y (MoreThan(y, num1000) ∧ SoldCopies(x, y)))\n∃x ∃y (Book(x) ∧ Win(x, hugoAward) ∧ WrittenBy(x, neilGaiman) ∧ (¬(x=y)) ∧ Book(y) ∧ Win(y, hugoAward) ∧ WrittenBy(y, neilGaiman))\n∀x ((Book(x) ∧ WrittenBy(x, tolkien)) → ReadBy(x, tomas))\nReadBy(hamlet, tomas) ⊕ (∃y (MoreThan(y, num1000) ∧ SoldCopies(hamlet, y)))\n∃y (MoreThan(y, num1000) ∧ SoldCopies(hamlet, y)) ⊕ WrittenBy(hamlet, neilGaiman)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWin(hamlet, hugoAward)\n\"\"\""
    ]
  },
  {
    "id": 1167,
    "question": "Hamlet has won a Hugo Award and is written by Tolkien.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Book(x) ∧ WrittenBy(x, neilGaiman)) → ∃y (MoreThan(y, num1000) ∧ SoldCopies(x, y)))\n∃x ∃y (Book(x) ∧ Win(x, hugoAward) ∧ WrittenBy(x, neilGaiman) ∧ (¬(x=y)) ∧ Book(y) ∧ Win(y, hugoAward) ∧ WrittenBy(y, neilGaiman))\n∀x ((Book(x) ∧ WrittenBy(x, tolkien)) → ReadBy(x, tomas))\nReadBy(hamlet, tomas) ⊕ (∃y (MoreThan(y, num1000) ∧ SoldCopies(hamlet, y)))\n∃y (MoreThan(y, num1000) ∧ SoldCopies(hamlet, y)) ⊕ WrittenBy(hamlet, neilGaiman)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWin(hamlet, hugoAward) ∧ WrittenBy(hamlet, tolkien)\n\"\"\""
    ]
  },
  {
    "id": 1168,
    "question": "If Hamlet has either won a Hugo Award and is written by Tolkien, or neither has won a Hugo Award nor is written by Tolkien, then Hamlet has neither won a Hugo Award nor is written by Neil Gaiman.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Book(x) ∧ WrittenBy(x, neilGaiman)) → ∃y (MoreThan(y, num1000) ∧ SoldCopies(x, y)))\n∃x ∃y (Book(x) ∧ Win(x, hugoAward) ∧ WrittenBy(x, neilGaiman) ∧ (¬(x=y)) ∧ Book(y) ∧ Win(y, hugoAward) ∧ WrittenBy(y, neilGaiman))\n∀x ((Book(x) ∧ WrittenBy(x, tolkien)) → ReadBy(x, tomas))\nReadBy(hamlet, tomas) ⊕ (∃y (MoreThan(y, num1000) ∧ SoldCopies(hamlet, y)))\n∃y (MoreThan(y, num1000) ∧ SoldCopies(hamlet, y)) ⊕ WrittenBy(hamlet, neilGaiman)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Win(hamlet, hugoAward) ⊕ WrittenBy(hamlet, tolkien)) → (¬Win(hamlet, hugoAward) ∧ (¬WrittenBy(hamlet, neilGaiman)))\n\"\"\""
    ]
  },
  {
    "id": 1393,
    "question": "Grapes are food.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Grass(x) → ¬Food(x))\n∀x (Meadow(x) → Grass(x))\n∀x (Edible(x) → Food(x))\n∀x (Fruit(x) → Edible(x))\n∀x (Lemon(x) → Fruit(x))\n¬(Edible(grape) ∧ Lemon(grape))\nGrass(banana) ∨ Fruit(banana)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFood(grape)\n\"\"\""
    ]
  },
  {
    "id": 1394,
    "question": "Grapes are not a food.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Grass(x) → ¬Food(x))\n∀x (Meadow(x) → Grass(x))\n∀x (Edible(x) → Food(x))\n∀x (Fruit(x) → Edible(x))\n∀x (Lemon(x) → Fruit(x))\n¬(Edible(grape) ∧ Lemon(grape))\nGrass(banana) ∨ Fruit(banana)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Food(grape)\n\"\"\""
    ]
  },
  {
    "id": 1395,
    "question": "Bananas are both lemons and meadows.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Grass(x) → ¬Food(x))\n∀x (Meadow(x) → Grass(x))\n∀x (Edible(x) → Food(x))\n∀x (Fruit(x) → Edible(x))\n∀x (Lemon(x) → Fruit(x))\n¬(Edible(grape) ∧ Lemon(grape))\nGrass(banana) ∨ Fruit(banana)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLemon(banana) ∧ Meadow(banana)\n\"\"\""
    ]
  },
  {
    "id": 1396,
    "question": "Bananas are not both a lemon and a meadow.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Grass(x) → ¬Food(x))\n∀x (Meadow(x) → Grass(x))\n∀x (Edible(x) → Food(x))\n∀x (Fruit(x) → Edible(x))\n∀x (Lemon(x) → Fruit(x))\n¬(Edible(grape) ∧ Lemon(grape))\nGrass(banana) ∨ Fruit(banana)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Lemon(banana) ∧ Meadow(banana))\n\"\"\""
    ]
  },
  {
    "id": 60,
    "question": "The Boston Celtics are from San Francisco.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTeam(goldenStateWarriors) ∧ From(goldenStateWarriors, sanFrancisco)\nWon(goldenStateWarriors, nbaFinals)\n∀x ((Team(x) ∧ Attending(x, nbaFinals)) → WonManyGames(x))\nTeam(bostonCeltics) ∧ Lost(bostonCeltics, nbaFinals)\n∀x ((Team(x) ∧ Won(x, nbaFinals)) → MoreIncome(x))\n∀x ((Won(x, nbaFinals) ∨ Lost(x, nbaFinals)) → Attending(x, nbaFinals))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFrom(bostonCeltics, sanFrancisco)\n\"\"\""
    ]
  },
  {
    "id": 61,
    "question": "The Boston Celtics have more than 30 years of experience.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTeam(goldenStateWarriors) ∧ From(goldenStateWarriors, sanFrancisco)\nWon(goldenStateWarriors, nbaFinals)\n∀x ((Team(x) ∧ Attending(x, nbaFinals)) → WonManyGames(x))\nTeam(bostonCeltics) ∧ Lost(bostonCeltics, nbaFinals)\n∀x ((Team(x) ∧ Won(x, nbaFinals)) → MoreIncome(x))\n∀x ((Won(x, nbaFinals) ∨ Lost(x, nbaFinals)) → Attending(x, nbaFinals))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHasMoreThanThirtyYearsOfHistory(bostonCeltics)\n\"\"\""
    ]
  },
  {
    "id": 62,
    "question": "The Golden State Warriors will have more income from gate receipts.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTeam(goldenStateWarriors) ∧ From(goldenStateWarriors, sanFrancisco)\nWon(goldenStateWarriors, nbaFinals)\n∀x ((Team(x) ∧ Attending(x, nbaFinals)) → WonManyGames(x))\nTeam(bostonCeltics) ∧ Lost(bostonCeltics, nbaFinals)\n∀x ((Team(x) ∧ Won(x, nbaFinals)) → MoreIncome(x))\n∀x ((Won(x, nbaFinals) ∨ Lost(x, nbaFinals)) → Attending(x, nbaFinals))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMoreIncome(goldenStateWarriors)\n\"\"\""
    ]
  },
  {
    "id": 620,
    "question": "Maya will not play the violin.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPlay(maya, violin) → ¬CanInjure(maya, fingers)\n∀x (VolleyballPlayer(x) → (CanInjure(ankles) ∧ CanInjure(fingers) ∧ CanInjure(shoulder)))\nVolleyballPlayer(maya)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Play(maya, violin)\n\"\"\""
    ]
  },
  {
    "id": 1215,
    "question": "ModelXX is controlled by managers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Devices(x) ∧ BelongTo(x, company)) → ConnectTo(x, googleHome))\n∀x ((Devices(x) ∧ With(x, companyLogo)) → BelongTo(x, company))\n∀x ((Devices(x) → (With(x, companyLogo) ⊕ BelongTo(x, employee)))\n∀x ((Devices(x) ∧ BelongTo(x, employee)) → CanBeConnectedTo(x, wifi))\n∀x ((Devices(x) ∧ ConnectTo(x, googleHome)) → ControlledBy(x, manager))\n∀x ((Devices(x) ∧ CanBeConnectedTo(x, wifi)) → EasyToOperate(x))\n∀x ((Devices(x) ∧ EasyToOperate(x)) → ProducedAfterNewCTOAppointed(x, company))\nDevices(modelXX) ∧ (¬ProducedAfterNewCTOAppointed(modelXX, company))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nControlledBy(x, manager)\n\"\"\""
    ]
  },
  {
    "id": 1216,
    "question": "ModelXX is either produced after a new CTO was appointed or it is controlled by managers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Devices(x) ∧ BelongTo(x, company)) → ConnectTo(x, googleHome))\n∀x ((Devices(x) ∧ With(x, companyLogo)) → BelongTo(x, company))\n∀x ((Devices(x) → (With(x, companyLogo) ⊕ BelongTo(x, employee)))\n∀x ((Devices(x) ∧ BelongTo(x, employee)) → CanBeConnectedTo(x, wifi))\n∀x ((Devices(x) ∧ ConnectTo(x, googleHome)) → ControlledBy(x, manager))\n∀x ((Devices(x) ∧ CanBeConnectedTo(x, wifi)) → EasyToOperate(x))\n∀x ((Devices(x) ∧ EasyToOperate(x)) → ProducedAfterNewCTOAppointed(x, company))\nDevices(modelXX) ∧ (¬ProducedAfterNewCTOAppointed(modelXX, company))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProducedAfterNewCTOAppointed(modelXX, theCompany) ⊕ ControlledBy(x, manager)\n\"\"\""
    ]
  },
  {
    "id": 1217,
    "question": "ModelXX is not with the company logo, and managers do not control it.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Devices(x) ∧ BelongTo(x, company)) → ConnectTo(x, googleHome))\n∀x ((Devices(x) ∧ With(x, companyLogo)) → BelongTo(x, company))\n∀x ((Devices(x) → (With(x, companyLogo) ⊕ BelongTo(x, employee)))\n∀x ((Devices(x) ∧ BelongTo(x, employee)) → CanBeConnectedTo(x, wifi))\n∀x ((Devices(x) ∧ ConnectTo(x, googleHome)) → ControlledBy(x, manager))\n∀x ((Devices(x) ∧ CanBeConnectedTo(x, wifi)) → EasyToOperate(x))\n∀x ((Devices(x) ∧ EasyToOperate(x)) → ProducedAfterNewCTOAppointed(x, company))\nDevices(modelXX) ∧ (¬ProducedAfterNewCTOAppointed(modelXX, company))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬With(modelXX, companyLogo) ∧ (¬ControlledBy(x, manager))\n\"\"\""
    ]
  },
  {
    "id": 1218,
    "question": "ModelXX is either with the company logo or controlled by managers.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Devices(x) ∧ BelongTo(x, company)) → ConnectTo(x, googleHome))\n∀x ((Devices(x) ∧ With(x, companyLogo)) → BelongTo(x, company))\n∀x ((Devices(x) → (With(x, companyLogo) ⊕ BelongTo(x, employee)))\n∀x ((Devices(x) ∧ BelongTo(x, employee)) → CanBeConnectedTo(x, wifi))\n∀x ((Devices(x) ∧ ConnectTo(x, googleHome)) → ControlledBy(x, manager))\n∀x ((Devices(x) ∧ CanBeConnectedTo(x, wifi)) → EasyToOperate(x))\n∀x ((Devices(x) ∧ EasyToOperate(x)) → ProducedAfterNewCTOAppointed(x, company))\nDevices(modelXX) ∧ (¬ProducedAfterNewCTOAppointed(modelXX, company))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWith(modelXX, companyLogo) ⊕ ControlledBy(x, manager)\n\"\"\""
    ]
  },
  {
    "id": 710,
    "question": "Some CD players are suitable toys for children.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CDPlayer(x) → DelicateMechanism(x))\n∀x (DelicateMechanism(x) → ¬(Toy(x) ∧ SuitableFor(x, children)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (CDPlayer(x) ∧ CDPlayer(y) ∧ Toy(x) ∧ Toy(y) ∧ SuitableFor(x, children) ∧ SuitableFor(y, children) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 916,
    "question": "Jumbo is sleepy.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → LivingBeing(x)) \n∀x (Elephant(x) → Mammal(x))\n∀x (BabyElephant(x) → Elephant(x))\n∃x (BabyElephant(x) ∧ Sleepy(x))\nLivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))\nSleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSleepy(jumbo)\n\"\"\""
    ]
  },
  {
    "id": 917,
    "question": "Jumbo is not sleepy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → LivingBeing(x)) \n∀x (Elephant(x) → Mammal(x))\n∀x (BabyElephant(x) → Elephant(x))\n∃x (BabyElephant(x) ∧ Sleepy(x))\nLivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))\nSleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Sleepy(jumbo)\n\"\"\""
    ]
  },
  {
    "id": 918,
    "question": "Jumbo is a living being.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → LivingBeing(x)) \n∀x (Elephant(x) → Mammal(x))\n∀x (BabyElephant(x) → Elephant(x))\n∃x (BabyElephant(x) ∧ Sleepy(x))\nLivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))\nSleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLivingBeing(jumbo)\n\"\"\""
    ]
  },
  {
    "id": 919,
    "question": "Jumbo is neither sleepy nor a baby elephant.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → LivingBeing(x)) \n∀x (Elephant(x) → Mammal(x))\n∀x (BabyElephant(x) → Elephant(x))\n∃x (BabyElephant(x) ∧ Sleepy(x))\nLivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))\nSleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Sleepy(jumbo) ∧ ¬BabyElephant(jumbo))\n\"\"\""
    ]
  },
  {
    "id": 920,
    "question": "Jumbo is not sleepy or an elephant.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → LivingBeing(x)) \n∀x (Elephant(x) → Mammal(x))\n∀x (BabyElephant(x) → Elephant(x))\n∃x (BabyElephant(x) ∧ Sleepy(x))\nLivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))\nSleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Sleepy(jumbo) ⊕ Elephant(jumbo))\n\"\"\""
    ]
  },
  {
    "id": 1286,
    "question": "Europa is a celestial body in the solar system has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Planet(x) ∧ In(x, solarSystem) → ¬RelyOnToGenerate(x, nuclearFusion, light))\n∀x (Star(x) ∧ In(x, solarSystem) → RelyOnToGenerate(x, nuclearFusion, light))\n∀x (CelestialBody(x) ∧ In(x, solarSystem) ∧ GreaterThan(x, solarMass, 0point08) → Star(x))\n∀x (CelestialBody(x) ∧ In(x, solarSystem) ∧ (∃y (OrbitOf(y, x) ∧ Clear(x, y) ∧ DebrisFree(y))) ∧ NearlySphericalShape(x, gravity) → Planet(x))\n(CelestialBody(europa) ∧ In(europa, solarSystem) ∧ (∃y (OrbitOf(y, x) ∧ Clear(x, y) ∧ DebrisFree(y))) ∧ NearlySphericalShape(europa, gravity)) ∨ RelyOnToGenerate(europa, nuclearFusion, light) → CelestialBody(europa) ∧ In(europa, solarSystem)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCelestialBody(europa) ∧ In(europa, solarSystem) ∧ (∃y (OrbitOf(y, x) ∧ Clear(x, y) ∧ DebrisFree(y))) ∧ NearlySphericalShape(europa, gravity)\n\"\"\""
    ]
  },
  {
    "id": 1287,
    "question": "Europa is a celestial body in one of the solar systems that have greater than 0.08 solar masses.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Planet(x) ∧ In(x, solarSystem) → ¬RelyOnToGenerate(x, nuclearFusion, light))\n∀x (Star(x) ∧ In(x, solarSystem) → RelyOnToGenerate(x, nuclearFusion, light))\n∀x (CelestialBody(x) ∧ In(x, solarSystem) ∧ GreaterThan(x, solarMass, 0point08) → Star(x))\n∀x (CelestialBody(x) ∧ In(x, solarSystem) ∧ (∃y (OrbitOf(y, x) ∧ Clear(x, y) ∧ DebrisFree(y))) ∧ NearlySphericalShape(x, gravity) → Planet(x))\n(CelestialBody(europa) ∧ In(europa, solarSystem) ∧ (∃y (OrbitOf(y, x) ∧ Clear(x, y) ∧ DebrisFree(y))) ∧ NearlySphericalShape(europa, gravity)) ∨ RelyOnToGenerate(europa, nuclearFusion, light) → CelestialBody(europa) ∧ In(europa, solarSystem)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCelestialBody(europa) ∧ In(europa, solarSystem) ∧ GreaterThan(europa, solarMass, 0.08)\n\"\"\""
    ]
  },
  {
    "id": 1288,
    "question": "Europa is not a celestial body in one of the solar systems that have greater than 0.08 solar masses.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Planet(x) ∧ In(x, solarSystem) → ¬RelyOnToGenerate(x, nuclearFusion, light))\n∀x (Star(x) ∧ In(x, solarSystem) → RelyOnToGenerate(x, nuclearFusion, light))\n∀x (CelestialBody(x) ∧ In(x, solarSystem) ∧ GreaterThan(x, solarMass, 0point08) → Star(x))\n∀x (CelestialBody(x) ∧ In(x, solarSystem) ∧ (∃y (OrbitOf(y, x) ∧ Clear(x, y) ∧ DebrisFree(y))) ∧ NearlySphericalShape(x, gravity) → Planet(x))\n(CelestialBody(europa) ∧ In(europa, solarSystem) ∧ (∃y (OrbitOf(y, x) ∧ Clear(x, y) ∧ DebrisFree(y))) ∧ NearlySphericalShape(europa, gravity)) ∨ RelyOnToGenerate(europa, nuclearFusion, light) → CelestialBody(europa) ∧ In(europa, solarSystem)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(CelestialBody(europa) ∧ In(europa, solarSystem) ∧ GreaterThan(europa, solarMass, 0.08))\n\"\"\""
    ]
  },
  {
    "id": 936,
    "question": "“As it was” by Harry Styles needs to be written with words.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MaxListenTo(x) → (ClassicalMusic(x) ⊕ Rap(x)))\n∀x (MaxListenTo(x) ∧ ClassicalMusic(x) → Song(x) ∧ From(x, 12thCentury))\n∀x (MaxListenTo(x) ∧ Rap(x) → Song(x) ∧ By(x, kanyeWest))\n∀x (Song(x) ∧ By(x, kanyeWest) → Song(x) ∧ FullOfLyrics(x))\n∀x (Song(x) ∧ FullOfLyrics(x) → NeedToBeWrittenWith(x, words))\n¬(ClassicalMusic(asItWasByHarryStyles) ∧ Song(asItWasByHarryStyles) ∧ From(asItWasByHarryStyles, 12thCentury))\nMaxListenTo(asItWasByHarryStyles)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNeedToBeWrittenWith(asItWasByHarryStyles, words)\n\"\"\""
    ]
  },
  {
    "id": 937,
    "question": "\"As it was” by Harry Styles is a song from the 12th century.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MaxListenTo(x) → (ClassicalMusic(x) ⊕ Rap(x)))\n∀x (MaxListenTo(x) ∧ ClassicalMusic(x) → Song(x) ∧ From(x, 12thCentury))\n∀x (MaxListenTo(x) ∧ Rap(x) → Song(x) ∧ By(x, kanyeWest))\n∀x (Song(x) ∧ By(x, kanyeWest) → Song(x) ∧ FullOfLyrics(x))\n∀x (Song(x) ∧ FullOfLyrics(x) → NeedToBeWrittenWith(x, words))\n¬(ClassicalMusic(asItWasByHarryStyles) ∧ Song(asItWasByHarryStyles) ∧ From(asItWasByHarryStyles, 12thCentury))\nMaxListenTo(asItWasByHarryStyles)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSong(asItWasByHarryStyles) ∧ From(asItWasByHarryStyles, 12thCentury)\n\"\"\""
    ]
  },
  {
    "id": 938,
    "question": "\"As it was” by Harry Styles is not both a song from Kanye West and needed to be written with words.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MaxListenTo(x) → (ClassicalMusic(x) ⊕ Rap(x)))\n∀x (MaxListenTo(x) ∧ ClassicalMusic(x) → Song(x) ∧ From(x, 12thCentury))\n∀x (MaxListenTo(x) ∧ Rap(x) → Song(x) ∧ By(x, kanyeWest))\n∀x (Song(x) ∧ By(x, kanyeWest) → Song(x) ∧ FullOfLyrics(x))\n∀x (Song(x) ∧ FullOfLyrics(x) → NeedToBeWrittenWith(x, words))\n¬(ClassicalMusic(asItWasByHarryStyles) ∧ Song(asItWasByHarryStyles) ∧ From(asItWasByHarryStyles, 12thCentury))\nMaxListenTo(asItWasByHarryStyles)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Song(asItWasByHarryStyles) ∧ By(asItWasByHarryStyles, kanyeWest) ∧ NeedToBeWrittenWith(asItWasByHarryStyles, words))\n\"\"\""
    ]
  },
  {
    "id": 113,
    "question": "\"Your Woman\" was extremely popular.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProduce(whiteTown, yourWoman) ∧ OnePersonBand(whiteTown)\nPeak(yourWoman, uKSinglesChart)\n∀x ((∃y(Peak(x, y))) → Popular(x))\nPeak(yourWoman, iceland) ∧ Peak(yourWoman, israel) ∧ Peak(yourWoman, spain)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPopular(yourWoman)\n\"\"\""
    ]
  },
  {
    "id": 114,
    "question": "White Town did not produce any popular songs.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProduce(whiteTown, yourWoman) ∧ OnePersonBand(whiteTown)\nPeak(yourWoman, uKSinglesChart)\n∀x ((∃y(Peak(x, y))) → Popular(x))\nPeak(yourWoman, iceland) ∧ Peak(yourWoman, israel) ∧ Peak(yourWoman, spain)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Produce(whiteTown, x) → ¬Popular(x))\n\"\"\""
    ]
  },
  {
    "id": 115,
    "question": "White Town was a successful band.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProduce(whiteTown, yourWoman) ∧ OnePersonBand(whiteTown)\nPeak(yourWoman, uKSinglesChart)\n∀x ((∃y(Peak(x, y))) → Popular(x))\nPeak(yourWoman, iceland) ∧ Peak(yourWoman, israel) ∧ Peak(yourWoman, spain)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSuccessful(whiteTown)\n\"\"\""
    ]
  },
  {
    "id": 996,
    "question": "The maximum of quasiconvex functions is a function that represent straight lines on the coordinate plane.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Function(x) ∧ RepresentOn(x, straightLine, coordinatePlane) → LinearFunction(x))\n∀x (LinearFunction(x) → ¬NonConvexFunction(x))\n∀x (Function(x) → NonConvexFunction(x) ⊕ ConvexFunction(x))\n∀x (QuasiConvexFunction(x) → RealValuedFunction(x))\n∀x (ConvexFunction(x) → QuasiConvexFunction(x))\nFunction(maximumOfQuasiConvexFunction)\n(Function(maximumOfQuasiConvexFunction) ∧ RepresentOn(maximumOfQuasiConvexFunction, straightLine, coordinatePlane)) ∨ ConvexFunction(maximumOfQuasiConvexFunction) ∨ ¬NonConvexFunction(maximumOfQuasiConvexFunction)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFunction(maximumOfQuasiConvexFunction) ∧ RepresentOn(maximumOfQuasiConvexFunction, straightLine, coordinatePlane)\n\"\"\""
    ]
  },
  {
    "id": 997,
    "question": "The maximum of quasiconvex functions is not a real-valued function.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Function(x) ∧ RepresentOn(x, straightLine, coordinatePlane) → LinearFunction(x))\n∀x (LinearFunction(x) → ¬NonConvexFunction(x))\n∀x (Function(x) → NonConvexFunction(x) ⊕ ConvexFunction(x))\n∀x (QuasiConvexFunction(x) → RealValuedFunction(x))\n∀x (ConvexFunction(x) → QuasiConvexFunction(x))\nFunction(maximumOfQuasiConvexFunction)\n(Function(maximumOfQuasiConvexFunction) ∧ RepresentOn(maximumOfQuasiConvexFunction, straightLine, coordinatePlane)) ∨ ConvexFunction(maximumOfQuasiConvexFunction) ∨ ¬NonConvexFunction(maximumOfQuasiConvexFunction)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬RealValuedFunction(maximumOfQuasiConvexFunction)\n\"\"\""
    ]
  },
  {
    "id": 998,
    "question": "The maximum of quasiconvex functions is a quasi-convex function or it is not a real-valued function.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Function(x) ∧ RepresentOn(x, straightLine, coordinatePlane) → LinearFunction(x))\n∀x (LinearFunction(x) → ¬NonConvexFunction(x))\n∀x (Function(x) → NonConvexFunction(x) ⊕ ConvexFunction(x))\n∀x (QuasiConvexFunction(x) → RealValuedFunction(x))\n∀x (ConvexFunction(x) → QuasiConvexFunction(x))\nFunction(maximumOfQuasiConvexFunction)\n(Function(maximumOfQuasiConvexFunction) ∧ RepresentOn(maximumOfQuasiConvexFunction, straightLine, coordinatePlane)) ∨ ConvexFunction(maximumOfQuasiConvexFunction) ∨ ¬NonConvexFunction(maximumOfQuasiConvexFunction)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nQuasiConvexFunction(maximumOfQuasiConvexFunction) ∨ ¬RealValuedFunction(maximumOfQuasiConvexFunction)\n\"\"\""
    ]
  },
  {
    "id": 540,
    "question": "Real Madrid and Atlético Madrid needed to play a penalty shoot-out in the 2016 UCL final.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀w ∀x ∀y ∀z (SoccerTeam(x) ∧ SoccerTeam(y) ∧ NumberOfGoalScored(x, z) ∧ NumberOfGoalScored(y, w) ∧ y=w ∧ During(regularTime) → PlayExtra(x, y))\n∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) ∧ During(extraTime) → PlayPenalty(x, y))\nSoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)\nSoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlayPenalty(realMadrid, atleticoMadrid)\n\"\"\""
    ]
  },
  {
    "id": 541,
    "question": "Real Madrid and Atlético Madrid did not need to play a penalty shoot-out in the 2016 UCL final.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀w ∀x ∀y ∀z (SoccerTeam(x) ∧ SoccerTeam(y) ∧ NumberOfGoalScored(x, z) ∧ NumberOfGoalScored(y, w) ∧ y=w ∧ During(regularTime) → PlayExtra(x, y))\n∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) ∧ During(extraTime) → PlayPenalty(x, y))\nSoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)\nSoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬PlayPenalty(realMadrid, atleticoMadrid)\n\"\"\""
    ]
  },
  {
    "id": 35,
    "question": "System 7 was formed by former members of Gong.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBasedIn(system7, uk) ∧ ElectronicDanceMusicBand(system7)\nForm(stevehillage, system7) ∧ Form(miquettegiraudy, system7)\nFormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)\n∀x (ElectronicDanceMusicBand(x) → Band(x))\n∃x (ClubSingle(x) ∧ Release(system7, x))\n∀x (ClubSingle(x) → ¬Single(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Form(x, system7) ∧ FormerMemberOf(x, gong))\n\"\"\""
    ]
  },
  {
    "id": 36,
    "question": "System 7 has released several singles.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBasedIn(system7, uk) ∧ ElectronicDanceMusicBand(system7)\nForm(stevehillage, system7) ∧ Form(miquettegiraudy, system7)\nFormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)\n∀x (ElectronicDanceMusicBand(x) → Band(x))\n∃x (ClubSingle(x) ∧ Release(system7, x))\n∀x (ClubSingle(x) → ¬Single(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Single(x) ∧ Release(system7, x))\n\"\"\""
    ]
  },
  {
    "id": 37,
    "question": "System 7 is not a band.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBasedIn(system7, uk) ∧ ElectronicDanceMusicBand(system7)\nForm(stevehillage, system7) ∧ Form(miquettegiraudy, system7)\nFormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)\n∀x (ElectronicDanceMusicBand(x) → Band(x))\n∃x (ClubSingle(x) ∧ Release(system7, x))\n∀x (ClubSingle(x) → ¬Single(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Band(system7)\n\"\"\""
    ]
  },
  {
    "id": 542,
    "question": "Extractive models are always faithful.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))\n∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))\n∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Model(x) ∧ Extractive(x) → Faithful(x))\n\"\"\""
    ]
  },
  {
    "id": 543,
    "question": "Extractive models are not always faithful.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))\n∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))\n∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Model(x) ∧ Extractive(x) ∧ ¬Faithful(x))\n\"\"\""
    ]
  },
  {
    "id": 984,
    "question": "Mark is Robin's friend and he is a person who studies hard.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RobinsFriends(x) ∧ Practice(x, codingQuestion) → ¬StudyingToGoToToBecome(x, medicalSchool, doctor))\n∀x (RobinsFriends(x) ∧ WantToWorkIn(x, softwareEngineeringIndustry) → PracticeCodingQuestions(x))\n∀x (RobinsFriends(x) ∧ Enjoy(x, healthcareField) ∧ WantToHelp(x, peopleWithMedicalIssue) → StudyingToGoToToBecome(x, medicalSchool, doctor))\n∀x (RobinsFriends(x) ∧ (∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z))) → EnjoyHealthcareFields(x) ∧ WantToHelp(x, peopleWithMedicalIssue))\n∀x (RobinsFriends(x) ∧ StudyHard(x) → ∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z)))\nRobinsFriends(mark)\n¬((Enjoy(x, healthcareField) ∧ WantToHelp(mark, peopleWithMedicalIssues)) ∧ ¬(∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z))) → StudyHard(mark) ∨ (∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRobinsFriends(mark) ∧ StudyHard(mark)\n\"\"\""
    ]
  },
  {
    "id": 985,
    "question": "Mark is Robin's friend and he practices coding questions and wants to work in the software engineering industry.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RobinsFriends(x) ∧ Practice(x, codingQuestion) → ¬StudyingToGoToToBecome(x, medicalSchool, doctor))\n∀x (RobinsFriends(x) ∧ WantToWorkIn(x, softwareEngineeringIndustry) → PracticeCodingQuestions(x))\n∀x (RobinsFriends(x) ∧ Enjoy(x, healthcareField) ∧ WantToHelp(x, peopleWithMedicalIssue) → StudyingToGoToToBecome(x, medicalSchool, doctor))\n∀x (RobinsFriends(x) ∧ (∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z))) → EnjoyHealthcareFields(x) ∧ WantToHelp(x, peopleWithMedicalIssue))\n∀x (RobinsFriends(x) ∧ StudyHard(x) → ∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z)))\nRobinsFriends(mark)\n¬((Enjoy(x, healthcareField) ∧ WantToHelp(mark, peopleWithMedicalIssues)) ∧ ¬(∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z))) → StudyHard(mark) ∨ (∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRobinsFriends(mark) ∧ Practice(mark, codingQuestion) ∧ WantToWorkIn(mark, softwareEngineeringIndustry)\n\"\"\""
    ]
  },
  {
    "id": 986,
    "question": "Mark is Robin's friend and he neither practices coding questions nor works to work in the software engineering industry.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RobinsFriends(x) ∧ Practice(x, codingQuestion) → ¬StudyingToGoToToBecome(x, medicalSchool, doctor))\n∀x (RobinsFriends(x) ∧ WantToWorkIn(x, softwareEngineeringIndustry) → PracticeCodingQuestions(x))\n∀x (RobinsFriends(x) ∧ Enjoy(x, healthcareField) ∧ WantToHelp(x, peopleWithMedicalIssue) → StudyingToGoToToBecome(x, medicalSchool, doctor))\n∀x (RobinsFriends(x) ∧ (∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z))) → EnjoyHealthcareFields(x) ∧ WantToHelp(x, peopleWithMedicalIssue))\n∀x (RobinsFriends(x) ∧ StudyHard(x) → ∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z)))\nRobinsFriends(mark)\n¬((Enjoy(x, healthcareField) ∧ WantToHelp(mark, peopleWithMedicalIssues)) ∧ ¬(∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z))) → StudyHard(mark) ∨ (∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRobinsFriends(mark) ∧ ¬(Practice(mark, codingQuestion) ∨ WantToWorkIn(mark, softwareEngineeringIndustry))\n\"\"\""
    ]
  },
  {
    "id": 1023,
    "question": "Thomas frivolously spends a lot of money.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAt(x, jesssCompany) ∧ GoToSpafrequently(x) → ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)))\n∀x (WorkAt(x, jesssCompany) → Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)⊕ SpendFrivolously(x, aLotOfMoney))\n∀x (WorkAt(x, jesssCompany) ∧ SpendFrivolously(x, aLotOfMoney) → Value(x, qualityManufacturing) ∧ Value(x, luxuryItem))\n∀x (WorkAt(x, jesssCompany) ∧ Value(x, qualityManufacturing) ∧ Value(x, luxuryItem) → Enjoy(x, shopping, materialisticItem))\nWorkAt(thomas, jesssCompany)\n¬(Miserly(thomas) ∧ NeedToSave(thomas, aLargePortionOfIncome)) → ¬((Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)))\n(Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)) ∨ ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSpendFrivolously(thomas, aLotOfMoney)\n\"\"\""
    ]
  },
  {
    "id": 1024,
    "question": "Thomas either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa frequently.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAt(x, jesssCompany) ∧ GoToSpafrequently(x) → ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)))\n∀x (WorkAt(x, jesssCompany) → Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)⊕ SpendFrivolously(x, aLotOfMoney))\n∀x (WorkAt(x, jesssCompany) ∧ SpendFrivolously(x, aLotOfMoney) → Value(x, qualityManufacturing) ∧ Value(x, luxuryItem))\n∀x (WorkAt(x, jesssCompany) ∧ Value(x, qualityManufacturing) ∧ Value(x, luxuryItem) → Enjoy(x, shopping, materialisticItem))\nWorkAt(thomas, jesssCompany)\n¬(Miserly(thomas) ∧ NeedToSave(thomas, aLargePortionOfIncome)) → ¬((Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)))\n(Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)) ∨ ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEnjoy(thomas, shopping, materialisticItem) ⊕ GoToSpaFrequently(thomas)\n\"\"\""
    ]
  },
  {
    "id": 1025,
    "question": "If Thomas either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa frequently, then Thomas neither values quality manufacturing and luxury items nor goes to the spa frequently.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAt(x, jesssCompany) ∧ GoToSpafrequently(x) → ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)))\n∀x (WorkAt(x, jesssCompany) → Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)⊕ SpendFrivolously(x, aLotOfMoney))\n∀x (WorkAt(x, jesssCompany) ∧ SpendFrivolously(x, aLotOfMoney) → Value(x, qualityManufacturing) ∧ Value(x, luxuryItem))\n∀x (WorkAt(x, jesssCompany) ∧ Value(x, qualityManufacturing) ∧ Value(x, luxuryItem) → Enjoy(x, shopping, materialisticItem))\nWorkAt(thomas, jesssCompany)\n¬(Miserly(thomas) ∧ NeedToSave(thomas, aLargePortionOfIncome)) → ¬((Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)))\n(Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)) ∨ ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEnjoy(thomas, shopping, materialisticItem) ⊕ GoToSpaFrequently(thomas) → ¬((Value(x, qualityManufacturing) ∧ Value(x, luxuryItem)) ∨ GoToSpaFrequently(thomas))\n\"\"\""
    ]
  },
  {
    "id": 624,
    "question": "The album \"Wolfgang Amadeus Phoenix\" is a certified gold album.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAlbumsReleased(phoenix, 6)\nAlbum(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, 500,000)\n∀x ((Album(x) ∨ Single(x)) ∧ SoldOver(x, 500,000) → CertifiedGold(x))\nSingle(1901) ∧ From(1901, wolfgangamadeusphoenix) ∧ By(1901, phoenix)\nSoldOver(l1901, 400,000)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCertifiedGold(wolfgangamAdeusPhoenix)\n\"\"\""
    ]
  },
  {
    "id": 625,
    "question": "The single \"1901\" is a certified gold single.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAlbumsReleased(phoenix, 6)\nAlbum(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, 500,000)\n∀x ((Album(x) ∨ Single(x)) ∧ SoldOver(x, 500,000) → CertifiedGold(x))\nSingle(1901) ∧ From(1901, wolfgangamadeusphoenix) ∧ By(1901, phoenix)\nSoldOver(l1901, 400,000)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCertifiedGold(1901)\n\"\"\""
    ]
  },
  {
    "id": 11,
    "question": "If the Hulk does not wake up, then Thor is not happy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSuperhero(peterParker) ⊕ Civilian(peterParker)\nDestroyer(theHulk)\nAngry(theHulk) → WakesUp(theHulk)\nWakesUp(theHulk) → Breaks(theHulk, bridge)\nGod(thor)\nHappy(thor) → Breaks(thor, bridge)\n∀x (God(x) → ¬Destroyer(x))\nSuperhero(peter) → Wears(peter, uniform)\n∀x ((Destroyer(x) ∧ Breaks(x,bridge)) → ¬Civilian(peter))\nHappy(thor) → Angry(theHulk)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WakesUp(theHulk) → ¬Happy(thor)\n\"\"\""
    ]
  },
  {
    "id": 12,
    "question": "If Thor is happy, then Peter Parker wears a uniform.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSuperhero(peterParker) ⊕ Civilian(peterParker)\nDestroyer(theHulk)\nAngry(theHulk) → WakesUp(theHulk)\nWakesUp(theHulk) → Breaks(theHulk, bridge)\nGod(thor)\nHappy(thor) → Breaks(thor, bridge)\n∀x (God(x) → ¬Destroyer(x))\nSuperhero(peter) → Wears(peter, uniform)\n∀x ((Destroyer(x) ∧ Breaks(x,bridge)) → ¬Civilian(peter))\nHappy(thor) → Angry(theHulk)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHappy(thor) → Wears(peterParker, uniform)\n\"\"\""
    ]
  },
  {
    "id": 13,
    "question": "If Thor is not happy, then no bridge will be broken.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSuperhero(peterParker) ⊕ Civilian(peterParker)\nDestroyer(theHulk)\nAngry(theHulk) → WakesUp(theHulk)\nWakesUp(theHulk) → Breaks(theHulk, bridge)\nGod(thor)\nHappy(thor) → Breaks(thor, bridge)\n∀x (God(x) → ¬Destroyer(x))\nSuperhero(peter) → Wears(peter, uniform)\n∀x ((Destroyer(x) ∧ Breaks(x,bridge)) → ¬Civilian(peter))\nHappy(thor) → Angry(theHulk)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Happy(thor) → ¬Breaks(thor, bridge)\n\"\"\""
    ]
  },
  {
    "id": 258,
    "question": "Diethylcarbamazine is not preferred for the treatment of river blindness.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMedication(diethylcarbamazine) ∧ DiscoversIn(diethylcarbamazine, yr1947)\nTreats(diethylcarbamazine, riverBlindness)\nPreferredTreatmentFor(riverBlindness, ivermectin)\n¬(Is(diethylcarbamazine, ivermectin))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(PreferredTreatmentFor(riverBlindness, diethylcarbamazine))\n\"\"\""
    ]
  },
  {
    "id": 259,
    "question": "Diethylcarbamazine was often used to treat river blindness.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMedication(diethylcarbamazine) ∧ DiscoversIn(diethylcarbamazine, yr1947)\nTreats(diethylcarbamazine, riverBlindness)\nPreferredTreatmentFor(riverBlindness, ivermectin)\n¬(Is(diethylcarbamazine, ivermectin))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTreats(diethylcarbamazine, riverBlindness)\n\"\"\""
    ]
  },
  {
    "id": 260,
    "question": "Diethylcarbamazine is used in the treatment of filariasis.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMedication(diethylcarbamazine) ∧ DiscoversIn(diethylcarbamazine, yr1947)\nTreats(diethylcarbamazine, riverBlindness)\nPreferredTreatmentFor(riverBlindness, ivermectin)\n¬(Is(diethylcarbamazine, ivermectin))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTreats(diethylcarbamazine, filariasis)\n\"\"\""
    ]
  },
  {
    "id": 1057,
    "question": "One is a real number.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PrimeNumber(x) → NaturalNumber(x)) \n∀x (Integer(x) → RealNumber(x))\n∀x (RealNumber(x) → ComplexNumber(x)) \nPrimeNumber(one) ∨ NaturalNumber(one)\n¬ComplexNumber(one) → (PrimeNumber(one) ∧ Integer(one))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRealNumber(one)\n\"\"\""
    ]
  },
  {
    "id": 1058,
    "question": "One is a prime number and a natural number.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PrimeNumber(x) → NaturalNumber(x)) \n∀x (Integer(x) → RealNumber(x))\n∀x (RealNumber(x) → ComplexNumber(x)) \nPrimeNumber(one) ∨ NaturalNumber(one)\n¬ComplexNumber(one) → (PrimeNumber(one) ∧ Integer(one))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPrimeNumber(one) ∧ NaturalNumber(one)\n\"\"\""
    ]
  },
  {
    "id": 1059,
    "question": "One is either a prime number or a natural number.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PrimeNumber(x) → NaturalNumber(x)) \n∀x (Integer(x) → RealNumber(x))\n∀x (RealNumber(x) → ComplexNumber(x)) \nPrimeNumber(one) ∨ NaturalNumber(one)\n¬ComplexNumber(one) → (PrimeNumber(one) ∧ Integer(one))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPrimeNumber(one) ⊕  NaturalNumber(one)\n\"\"\""
    ]
  },
  {
    "id": 1035,
    "question": "Bladder cancer is a mild disease.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) \n∀x (RareDisease(x) → Require(x, medicalDiagnosis))\n∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) \n∀x (BloodCancer(x) → RareDiseases(x))\n∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))\nDisease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMild(bladderCancer)\n\"\"\""
    ]
  },
  {
    "id": 1036,
    "question": "Bladder cancer is Leukemia.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) \n∀x (RareDisease(x) → Require(x, medicalDiagnosis))\n∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) \n∀x (BloodCancer(x) → RareDiseases(x))\n∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))\nDisease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLeukemia(bladderCancer)\n\"\"\""
    ]
  },
  {
    "id": 1037,
    "question": "Bladder cancer is either a rare disease or a mild disease.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) \n∀x (RareDisease(x) → Require(x, medicalDiagnosis))\n∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) \n∀x (BloodCancer(x) → RareDiseases(x))\n∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))\nDisease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRareDisease(bladderCancer) ⊕ Mild(bladderCancer)\n\"\"\""
    ]
  },
  {
    "id": 1044,
    "question": "Lithium is a rare earth element.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Element(x) ∧ ∃y(Between(y, num61, num63) ∧ AtomicNumber(x, y))) → ScarceIn(x, china))\n∀x (¬RareEarthElement(x) → ¬ScarceIn(x, china)) \n∀x (¬RareEarthElement(x) ⊕ RareEarthElement(x)) \n∀x (RareEarthElement(x) → UsedIn(x, industry)) \n∀x (RareEarthElement(x) → EssentialFor(x, electronics))\n¬(¬RareEarthElement(lithium) ⊕ EssentialFor(lithium, electronics))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRareEarthElement(lithium)\n\"\"\""
    ]
  },
  {
    "id": 1045,
    "question": "Lithium is an element with atomic number between 61-63 and is used for batteries.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Element(x) ∧ ∃y(Between(y, num61, num63) ∧ AtomicNumber(x, y))) → ScarceIn(x, china))\n∀x (¬RareEarthElement(x) → ¬ScarceIn(x, china)) \n∀x (¬RareEarthElement(x) ⊕ RareEarthElement(x)) \n∀x (RareEarthElement(x) → UsedIn(x, industry)) \n∀x (RareEarthElement(x) → EssentialFor(x, electronics))\n¬(¬RareEarthElement(lithium) ⊕ EssentialFor(lithium, electronics))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nElement(x) ∧ ∃y(Between(y, num61, num63) ∧ AtomicNumber(x, y)) ∧ UsedFor(lithium, batteries)\n\"\"\""
    ]
  },
  {
    "id": 1046,
    "question": "If Lithium is not essential for exploring future directions of electronics or an element with atomic number between 61-63, then Lithium is not a non-rare earth element or usable in industry.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Element(x) ∧ ∃y(Between(y, num61, num63) ∧ AtomicNumber(x, y))) → ScarceIn(x, china))\n∀x (¬RareEarthElement(x) → ¬ScarceIn(x, china)) \n∀x (¬RareEarthElement(x) ⊕ RareEarthElement(x)) \n∀x (RareEarthElement(x) → UsedIn(x, industry)) \n∀x (RareEarthElement(x) → EssentialFor(x, electronics))\n¬(¬RareEarthElement(lithium) ⊕ EssentialFor(lithium, electronics))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(EssentialFor(lithium, electronics) ⊕ (∃y(Between(y, num61, num63) ∧ AtomicNumber(lithium, y)))) → ¬(¬RareEarthMetals(lithium) ∨ UsedIn(lithium, industry))\n\"\"\""
    ]
  },
  {
    "id": 858,
    "question": "Jack doesn't care about cleanliness.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))\n∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))\n∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))\n∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))\n¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(CareAbout(jack, cleanliness))\n\"\"\""
    ]
  },
  {
    "id": 859,
    "question": "Jack does care about cleanliness.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))\n∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))\n∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))\n∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))\n¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCareAbout(jack, cleanliness)\n\"\"\""
    ]
  },
  {
    "id": 860,
    "question": "Jack has a tidy house.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))\n∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))\n∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))\n∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))\n¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHave(jack, tidyHouse)\n\"\"\""
    ]
  },
  {
    "id": 861,
    "question": "Jack neither lives in the suburbs nor is too busy to clean.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))\n∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))\n∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))\n∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))\n¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(¬CareAbout(jack, cleanliness) ∨ ¬CleanOften(jack, home)\n\"\"\""
    ]
  },
  {
    "id": 862,
    "question": "Jack is overburdened and lives in the suburbs.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))\n∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))\n∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))\n∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))\n¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Prioritize(jack, cleaning) ∨ ¬CareAbout(jack, cleanliness)\n\"\"\""
    ]
  },
  {
    "id": 722,
    "question": "The bottle not falling is toppled over.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n¬Falling(bottle) → (Upright(bottle) ⊕ ToppledOver(bottle))\n¬Falling(bottle) → ¬Upright(bottle)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Falling(bottle) → ToppleOver(bottle)\n\"\"\""
    ]
  },
  {
    "id": 952,
    "question": "John is short sighted.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ChooseWhatToDoWith(x, time) → FlexibleSchedule(x))\n∀x (Have(x, lotsOfFreetime) → ChooseWhatToDoWith(x, time))\n∀x (Have(x, lotsOfFreetime) ⊕ (∃y (InvestIn(x, y) ∧ Career(y) ∧ WillingToSpendIn(restOfLife, y))))\n∀x (∃y (InvestIn(x, y) ∧ Career(y) ∧ WillingToSpendIn(restOfLife, y)) → Hardworking(x))\n∀x (Hardworking(x) ∧ HaveFor(x, highAmbition, future) ∧ HaveFor(x, goal, future) → ¬ShortSighted(x))\n¬((Hardworking(john) ∧ HaveFor(john, highAmbition, future) ∧ HaveFor(john, goal, future)) ⊕ FlexibleSchedule(john))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOrganized(john)\n\"\"\""
    ]
  },
  {
    "id": 953,
    "question": "John chooses what he want to do with his time.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ChooseWhatToDoWith(x, time) → FlexibleSchedule(x))\n∀x (Have(x, lotsOfFreetime) → ChooseWhatToDoWith(x, time))\n∀x (Have(x, lotsOfFreetime) ⊕ (∃y (InvestIn(x, y) ∧ Career(y) ∧ WillingToSpendIn(restOfLife, y))))\n∀x (∃y (InvestIn(x, y) ∧ Career(y) ∧ WillingToSpendIn(restOfLife, y)) → Hardworking(x))\n∀x (Hardworking(x) ∧ HaveFor(x, highAmbition, future) ∧ HaveFor(x, goal, future) → ¬ShortSighted(x))\n¬((Hardworking(john) ∧ HaveFor(john, highAmbition, future) ∧ HaveFor(john, goal, future)) ⊕ FlexibleSchedule(john))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nChooseWhatToDoWith(john, time)\n\"\"\""
    ]
  },
  {
    "id": 954,
    "question": "John is either a hardworking individual with high ambitions and goals for the future or is short sighted.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ChooseWhatToDoWith(x, time) → FlexibleSchedule(x))\n∀x (Have(x, lotsOfFreetime) → ChooseWhatToDoWith(x, time))\n∀x (Have(x, lotsOfFreetime) ⊕ (∃y (InvestIn(x, y) ∧ Career(y) ∧ WillingToSpendIn(restOfLife, y))))\n∀x (∃y (InvestIn(x, y) ∧ Career(y) ∧ WillingToSpendIn(restOfLife, y)) → Hardworking(x))\n∀x (Hardworking(x) ∧ HaveFor(x, highAmbition, future) ∧ HaveFor(x, goal, future) → ¬ShortSighted(x))\n¬((Hardworking(john) ∧ HaveFor(john, highAmbition, future) ∧ HaveFor(john, goal, future)) ⊕ FlexibleSchedule(john))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Hardworking(john) ∧ HaveFor(john, highAmbition, future) ∧ HaveFor(john, goal, future)) ⊕ ShortSighted(john)\n\"\"\""
    ]
  },
  {
    "id": 237,
    "question": "Ableton is a multinational company.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOfficeIn(ableton, germany)\nOfficeIn(ableton, unitedStates)\n¬SameCountry(germany, unitedStates)\n∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ (¬SameCountry(y, z)) → MultinationalCompany(x))\nMakesMusicSoftware(ableton)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMultinationalCompany(ableton)\n\"\"\""
    ]
  },
  {
    "id": 238,
    "question": "Ableton makes AI software.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOfficeIn(ableton, germany)\nOfficeIn(ableton, unitedStates)\n¬SameCountry(germany, unitedStates)\n∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ (¬SameCountry(y, z)) → MultinationalCompany(x))\nMakesMusicSoftware(ableton)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMakesAISoftware(ableton)\n\"\"\""
    ]
  },
  {
    "id": 239,
    "question": "Ableton does not have an office in Germany.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOfficeIn(ableton, germany)\nOfficeIn(ableton, unitedStates)\n¬SameCountry(germany, unitedStates)\n∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ (¬SameCountry(y, z)) → MultinationalCompany(x))\nMakesMusicSoftware(ableton)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬OfficeIn(ableton, germany)\n\"\"\""
    ]
  },
  {
    "id": 1295,
    "question": "Fido is a flightless bird",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (FlyOver(x, vastDistance) → GlideInAir(x))\n∀x (Flightless(x) ∧ Bird(x) → ¬FlyOver(x, vastDistance))\n∀x (Penguin(x) → Flightless(x) ∧ Bird(x))\n∀x (NonFlying(x) ∧ Bird(x) ∧ In(x, antarctica) → Penguin(x))\nPenguin(fido) ∨ FlyOver(fido, vastDistance)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFlightless(fido) ∧ Bird(fido)\n\"\"\""
    ]
  },
  {
    "id": 1296,
    "question": "Fido is not a nonflying bird in Antarctica, and he cannot glid in the air.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (FlyOver(x, vastDistance) → GlideInAir(x))\n∀x (Flightless(x) ∧ Bird(x) → ¬FlyOver(x, vastDistance))\n∀x (Penguin(x) → Flightless(x) ∧ Bird(x))\n∀x (NonFlying(x) ∧ Bird(x) ∧ In(x, antarctica) → Penguin(x))\nPenguin(fido) ∨ FlyOver(fido, vastDistance)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(NonFlying(fido) ∧ Bird(fido) ∧ In(fido, antarctica)) ∧ ¬GlideInAir(fido)\n\"\"\""
    ]
  },
  {
    "id": 1297,
    "question": "If Fido either can fly over a vast distance or cannot fly over a vast distance, then Fido is a nonflying bird in Antartica.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (FlyOver(x, vastDistance) → GlideInAir(x))\n∀x (Flightless(x) ∧ Bird(x) → ¬FlyOver(x, vastDistance))\n∀x (Penguin(x) → Flightless(x) ∧ Bird(x))\n∀x (NonFlying(x) ∧ Bird(x) ∧ In(x, antarctica) → Penguin(x))\nPenguin(fido) ∨ FlyOver(fido, vastDistance)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(FlyOver(fido, vastDistance) ⊕ ¬FlyOver(fido, vastDistance)) → (NonFlying(fido) ∧ Bird(fido) ∧ In(fido, antarctica))\n\"\"\""
    ]
  },
  {
    "id": 1354,
    "question": "Leon is a member of university faculty.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MemberOf(x, universityFaculty) → Professor(x))\n∀x (PrincipalInvestigator(x) → MemberOf(x, universityFaculty))\n∀x (Professor(x) → ¬UndergraduateStudent(x))\n∀x (Pursuing(x, bachelor) → UndergraduateStudent(x))\n¬(Pursuing(leon, bachelor) ⊕ PrincipalInvestigator(leon))\n¬Pursuing(leon, bachelor) → Professor(leon)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMemberOf(leon, universityFaculty)\n\"\"\""
    ]
  },
  {
    "id": 1355,
    "question": "Leon is neither an undergraduate student nor a principal investigator.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MemberOf(x, universityFaculty) → Professor(x))\n∀x (PrincipalInvestigator(x) → MemberOf(x, universityFaculty))\n∀x (Professor(x) → ¬UndergraduateStudent(x))\n∀x (Pursuing(x, bachelor) → UndergraduateStudent(x))\n¬(Pursuing(leon, bachelor) ⊕ PrincipalInvestigator(leon))\n¬Pursuing(leon, bachelor) → Professor(leon)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬UndergraduateStudent(leon) ∧ ¬PrincipalInvestigator(leon)\n\"\"\""
    ]
  },
  {
    "id": 1356,
    "question": "If leon is not a principal investigator, then Leon is an undergraduate student.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MemberOf(x, universityFaculty) → Professor(x))\n∀x (PrincipalInvestigator(x) → MemberOf(x, universityFaculty))\n∀x (Professor(x) → ¬UndergraduateStudent(x))\n∀x (Pursuing(x, bachelor) → UndergraduateStudent(x))\n¬(Pursuing(leon, bachelor) ⊕ PrincipalInvestigator(leon))\n¬Pursuing(leon, bachelor) → Professor(leon)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬PrincipalInvestigator(leon) → UndergraduateStudent(leon)\n\"\"\""
    ]
  },
  {
    "id": 344,
    "question": "No cutmen appear in boxing matches.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cutman(x) → Prevent(x, physicalDamageToAFighter) ∧ Treat(x, physicalDamageToAFighter))\n∀x (Cutman(x) → AppearIn(x, boxingMatch) ∨ AppearIn(x, kickboxingMatch) ∨ AppearIn(x, mixedMartialArtsMatchBout))\n∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleed) ∧ Handle(x, laceration))\nCutman(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(∃x (Cutman(x) ∧ AppearIn(x, boxingMatch)))\n\"\"\""
    ]
  },
  {
    "id": 345,
    "question": "If someone is not a cutman, then they cannot handle nosebleeds.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cutman(x) → Prevent(x, physicalDamageToAFighter) ∧ Treat(x, physicalDamageToAFighter))\n∀x (Cutman(x) → AppearIn(x, boxingMatch) ∨ AppearIn(x, kickboxingMatch) ∨ AppearIn(x, mixedMartialArtsMatchBout))\n∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleed) ∧ Handle(x, laceration))\nCutman(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (¬Cutman(x) → ¬Handle(x, nosebleed))\n\"\"\""
    ]
  },
  {
    "id": 346,
    "question": "Jack is responsible for treating physical damage to a fighter.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cutman(x) → Prevent(x, physicalDamageToAFighter) ∧ Treat(x, physicalDamageToAFighter))\n∀x (Cutman(x) → AppearIn(x, boxingMatch) ∨ AppearIn(x, kickboxingMatch) ∨ AppearIn(x, mixedMartialArtsMatchBout))\n∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleed) ∧ Handle(x, laceration))\nCutman(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTreat(jack, physicalDamageToAFighter)\n\"\"\""
    ]
  },
  {
    "id": 488,
    "question": "A world's best-known artwork is painted by a scientist.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainting(monaLisa) ∧ TheWorldsBestKnown(monaLisa)\nPaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)\nScientist(leonardodaVinci) ∧ Painter(leonardodaVinci)\n∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Painting(x) ∧ TheWorldsBestKnown(x) ∧ PaintedBy(x, y) ∧ Scientist(y))\n\"\"\""
    ]
  },
  {
    "id": 489,
    "question": "Leonardo da Vinci has artworks in the landscape genre.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainting(monaLisa) ∧ TheWorldsBestKnown(monaLisa)\nPaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)\nScientist(leonardodaVinci) ∧ Painter(leonardodaVinci)\n∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (PaintedBy(x, leonardodaVinci) ∧ Landscape(x))\n\"\"\""
    ]
  },
  {
    "id": 490,
    "question": "No world's best-known artworks are portraits.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainting(monaLisa) ∧ TheWorldsBestKnown(monaLisa)\nPaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)\nScientist(leonardodaVinci) ∧ Painter(leonardodaVinci)\n∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (WorldsBestKnown(x)  → ¬Portrait(x))\n\"\"\""
    ]
  },
  {
    "id": 887,
    "question": "Nadal is a Grand Slam umpire.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrandSlamUmpire(nadal)\n\"\"\""
    ]
  },
  {
    "id": 888,
    "question": "Nadal is not a Grand Slam umpire.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬GrandSlamUmpire(nadal)\n\"\"\""
    ]
  },
  {
    "id": 889,
    "question": "Nadal is a Grand Slam champion.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrandSlamChampion(nadal)\n\"\"\""
    ]
  },
  {
    "id": 890,
    "question": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(GrandSlamUmpire(nadal) ∨ ProfessionalTennisUmpire(nadal))\n\"\"\""
    ]
  },
  {
    "id": 891,
    "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProfessionalTennisUmpire(nadal) → GrandSlamUmpire(nadal)\n\"\"\""
    ]
  },
  {
    "id": 892,
    "question": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrandSlamUmpire(nadal) ∨ ProfessionalTennisPlayer(nadal) → GrandSlamUmpire(nadal)\n\"\"\""
    ]
  },
  {
    "id": 367,
    "question": "Crude Oil Data Exchange is sanctioned.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))\n∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))\n∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))\nBuisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSanctioned(crudeOilDataExchange)\n\"\"\""
    ]
  },
  {
    "id": 368,
    "question": "Crude Oil Data Exchange is unsanctioned.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))\n∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))\n∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))\nBuisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Sanctioned(crudeOilDataExchange)\n\"\"\""
    ]
  },
  {
    "id": 369,
    "question": "Crude Oil Data Exchange is limited.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))\n∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))\n∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))\nBuisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLimited(crudeOilDataExchange)\n\"\"\""
    ]
  },
  {
    "id": 745,
    "question": "The end of a relationship is invigorating",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Depressing(x) → Sad(x))\nDepressing(v)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInvigorating(v)\n\"\"\""
    ]
  },
  {
    "id": 313,
    "question": "John Evans Popularized the term paalstab.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEarlyBronzeAge(palstave) ∧ Axe(palstave)\nFoundIn(palstave, northernEurope) ∨ FoundIn(palstave, westernEurope) ∨ FoundIn(palstave, southWesternEurope)) ∧ CastIn(palstave, molds)\nArcheologist(johnEvans) ∧ Popularize(johnEvans, termPalstave)\n¬Axe(paalstab) ∧ DiggingShovel(paalstab)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPopularized(johnEvans, termPalstave)\n\"\"\""
    ]
  },
  {
    "id": 314,
    "question": "There is an axe that is found in Western Europe.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEarlyBronzeAge(palstave) ∧ Axe(palstave)\nFoundIn(palstave, northernEurope) ∨ FoundIn(palstave, westernEurope) ∨ FoundIn(palstave, southWesternEurope)) ∧ CastIn(palstave, molds)\nArcheologist(johnEvans) ∧ Popularize(johnEvans, termPalstave)\n¬Axe(paalstab) ∧ DiggingShovel(paalstab)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Axe(x) ∧ FoundIn(x, westernEurope))\n\"\"\""
    ]
  },
  {
    "id": 315,
    "question": "Archeologists haven't popularized anything.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEarlyBronzeAge(palstave) ∧ Axe(palstave)\nFoundIn(palstave, northernEurope) ∨ FoundIn(palstave, westernEurope) ∨ FoundIn(palstave, southWesternEurope)) ∧ CastIn(palstave, molds)\nArcheologist(johnEvans) ∧ Popularize(johnEvans, termPalstave)\n¬Axe(paalstab) ∧ DiggingShovel(paalstab)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (Archeologist(x) → ¬Popularize(x, y))\n\"\"\""
    ]
  },
  {
    "id": 273,
    "question": "Koei Tecmo holds another company.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nJapanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) \n∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))\nDisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)\n∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Company(x) ∧ Holds(koeitecmo, x))\n\"\"\""
    ]
  },
  {
    "id": 274,
    "question": "Tecmo holds another company.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nJapanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) \n∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))\nDisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)\n∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Company(x) ∧ Holds(tecmo, x))\n\"\"\""
    ]
  },
  {
    "id": 275,
    "question": "Koei Tecmo holds anime.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nJapanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) \n∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))\nDisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)\n∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAnimeHoldingCompany(koeitecmo)\n\"\"\""
    ]
  },
  {
    "id": 566,
    "question": "The Playstation Eye is compatible with the PlayStation 2 and the PlayStation 3.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSystem(playStation2) ∧ CameraAccessoryFor(playStationEyeToy, playStation2)\nSystem(playStation3) ∧ CameraAccessoryFor(playStationEye, playStation3)  \nSystem(playStation4) ∧ System(playStation5) ∧ CameraAccessoryFor(playStationCamera, playStation4) ∧ CameraAccessoryFor(playStationCamera, playStation5)\n∀x ∀y (CameraAccessoryFor(x, y) ∧ System(y) → CompatibleWith(x, y))\n¬(playStation2=playStation3) ∧ ¬(playStation2=playStation4) ∧ ¬(playStation2=playStation5) ∧ ¬(playStation3=playStation4) ∧ ¬(playStation3=playStation5) ∧ ¬(playStation4=playStation5)\n∀x ∃y ∃z (System(y) ∧ System(z) ∧ ¬(y=z) ∧ CompatibleWith(x, y) ∧ CompatibleWith(x, z) → x=playstationCamera)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCompatible(playStationEye, playStation2) ∧ Compatible(playStationEye, playStation3)\n\"\"\""
    ]
  },
  {
    "id": 567,
    "question": "The Playstation EyeToy is compatible with the PlayStation 2.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSystem(playStation2) ∧ CameraAccessoryFor(playStationEyeToy, playStation2)\nSystem(playStation3) ∧ CameraAccessoryFor(playStationEye, playStation3)  \nSystem(playStation4) ∧ System(playStation5) ∧ CameraAccessoryFor(playStationCamera, playStation4) ∧ CameraAccessoryFor(playStationCamera, playStation5)\n∀x ∀y (CameraAccessoryFor(x, y) ∧ System(y) → CompatibleWith(x, y))\n¬(playStation2=playStation3) ∧ ¬(playStation2=playStation4) ∧ ¬(playStation2=playStation5) ∧ ¬(playStation3=playStation4) ∧ ¬(playStation3=playStation5) ∧ ¬(playStation4=playStation5)\n∀x ∃y ∃z (System(y) ∧ System(z) ∧ ¬(y=z) ∧ CompatibleWith(x, y) ∧ CompatibleWith(x, z) → x=playstationCamera)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCompatible(playStationEyeToy, playStation2)\n\"\"\""
    ]
  },
  {
    "id": 568,
    "question": "The Playstation Camera can be used for all Playstation consoles.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSystem(playStation2) ∧ CameraAccessoryFor(playStationEyeToy, playStation2)\nSystem(playStation3) ∧ CameraAccessoryFor(playStationEye, playStation3)  \nSystem(playStation4) ∧ System(playStation5) ∧ CameraAccessoryFor(playStationCamera, playStation4) ∧ CameraAccessoryFor(playStationCamera, playStation5)\n∀x ∀y (CameraAccessoryFor(x, y) ∧ System(y) → CompatibleWith(x, y))\n¬(playStation2=playStation3) ∧ ¬(playStation2=playStation4) ∧ ¬(playStation2=playStation5) ∧ ¬(playStation3=playStation4) ∧ ¬(playStation3=playStation5) ∧ ¬(playStation4=playStation5)\n∀x ∃y ∃z (System(y) ∧ System(z) ∧ ¬(y=z) ∧ CompatibleWith(x, y) ∧ CompatibleWith(x, z) → x=playstationCamera)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCompatible(playStationCamera, playStation2) ∧ Compatible(playStationCamera, playStation3) ∧ Compatible(playStationCamera, playStation4) ∧ Compatible(playStationCamera, playStation5)\n\"\"\""
    ]
  },
  {
    "id": 718,
    "question": "Adam Buska plays what Americans call soccer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFootballPlayer(adamBuska) ∧ European(adamBuska)\n∀x (FootballPlayer(x) ∧ European(x) → ∃y (Call(american, y, soccer) ∧ Play(x, y)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃y (Call(american, y, soccer) ∧ Play(adamBuska, y))\n\"\"\""
    ]
  },
  {
    "id": 1152,
    "question": "Pokemon Diamond version supports Windows.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))\n∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))\n∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))\n∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))\n¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGame(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)\n\"\"\""
    ]
  },
  {
    "id": 1153,
    "question": "Pokemon Diamond version supports Windows and has sold more than 100 million copies.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))\n∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))\n∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))\n∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))\n¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ∧ (Game(PokemonDiamond) ∧ SoldMoreThan100MillionCopies(PokemonDiamond))\n\"\"\""
    ]
  },
  {
    "id": 1154,
    "question": "If Pokemon Diamond version either supports Windows or has sold more than 100 million copies, then Pokemon Diamond version either is both multiplatform and one of the top-3 best selling video games, or is neither multiplatform nor one of the top-3 best selling video games.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))\n∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))\n∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))\n∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))\n¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n((Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ⊕ ((Game(PokemonDiamond) v (SoldMoreThan100MillionCopies(PokemonDiamond))) → (Multiplatform(PokemonDiamond) ∧ (Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond))) ⊕ (¬Multiplatform(PokemonDiamond) ∧ ¬(Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond)))\n\"\"\""
    ]
  },
  {
    "id": 589,
    "question": "No people from BRICS are Indian people.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (BRIC(x) ∧ ¬(x=china) ∧ BRIC(china) ∧ Emerging(chinaEconomy))\n∀x (From(x, china) → From(x, bric))\nBRIC(india) ∧ Emerging(indiaEconomy)\n∀x (From(x, india) → From(x, bric))\n∀x (From(x, china) → Chinese(x))\n∀x (From(x, india) → Indian(x))\n∃x (From(x, india))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (From(x, countryOfBRICS) → ¬IndianPeople(x))\n\"\"\""
    ]
  },
  {
    "id": 590,
    "question": "India's economy is not emerging.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (BRIC(x) ∧ ¬(x=china) ∧ BRIC(china) ∧ Emerging(chinaEconomy))\n∀x (From(x, china) → From(x, bric))\nBRIC(india) ∧ Emerging(indiaEconomy)\n∀x (From(x, india) → From(x, bric))\n∀x (From(x, china) → Chinese(x))\n∀x (From(x, india) → Indian(x))\n∃x (From(x, india))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEmergingEconomy(india)\n\"\"\""
    ]
  },
  {
    "id": 591,
    "question": "There is an Indian people from BRICS.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (BRIC(x) ∧ ¬(x=china) ∧ BRIC(china) ∧ Emerging(chinaEconomy))\n∀x (From(x, china) → From(x, bric))\nBRIC(india) ∧ Emerging(indiaEconomy)\n∀x (From(x, india) → From(x, bric))\n∀x (From(x, china) → Chinese(x))\n∀x (From(x, india) → Indian(x))\n∃x (From(x, india))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (IndianPeople(x) ∧ From(x, countryOfBRICS))\n\"\"\""
    ]
  },
  {
    "id": 264,
    "question": "Hamilton is a film.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nActor(daveedDiggs) ∧ FilmProducer(daveedDiggs)\n∃x ∃y(PlaysIn(daveedDiggs, x, hamilton) ∧ (¬(x=y)) ∧ PlaysIn(daveedDiggs, y, hamilton)) ∧ OnBroadway(hamilton) ∧ Musical(hamilton)\n∃x ∃y(Actor(x) ∧ PlaysIn(x, y, hamilton) ∧ Wins(x, bestActorAward))\n∃x (Actor(x) ∧ PlaysIn(x, thomasJefferson, hamilton) ∧ Wins(x, bestActorAward))\nPlays(daveedDiggs, thomasJefferson)\n∀x ((Musical(x) ∧ OnBroadway(x)) → ¬Film(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFilm(hamilton)\n\"\"\""
    ]
  },
  {
    "id": 265,
    "question": "Daveed Diggs won the best actor award.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nActor(daveedDiggs) ∧ FilmProducer(daveedDiggs)\n∃x ∃y(PlaysIn(daveedDiggs, x, hamilton) ∧ (¬(x=y)) ∧ PlaysIn(daveedDiggs, y, hamilton)) ∧ OnBroadway(hamilton) ∧ Musical(hamilton)\n∃x ∃y(Actor(x) ∧ PlaysIn(x, y, hamilton) ∧ Wins(x, bestActorAward))\n∃x (Actor(x) ∧ PlaysIn(x, thomasJefferson, hamilton) ∧ Wins(x, bestActorAward))\nPlays(daveedDiggs, thomasJefferson)\n∀x ((Musical(x) ∧ OnBroadway(x)) → ¬Film(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWins(daveedDiggs, bestActorAward)\n\"\"\""
    ]
  },
  {
    "id": 266,
    "question": "Hamilton won two awards.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nActor(daveedDiggs) ∧ FilmProducer(daveedDiggs)\n∃x ∃y(PlaysIn(daveedDiggs, x, hamilton) ∧ (¬(x=y)) ∧ PlaysIn(daveedDiggs, y, hamilton)) ∧ OnBroadway(hamilton) ∧ Musical(hamilton)\n∃x ∃y(Actor(x) ∧ PlaysIn(x, y, hamilton) ∧ Wins(x, bestActorAward))\n∃x (Actor(x) ∧ PlaysIn(x, thomasJefferson, hamilton) ∧ Wins(x, bestActorAward))\nPlays(daveedDiggs, thomasJefferson)\n∀x ((Musical(x) ∧ OnBroadway(x)) → ¬Film(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y(Wins(hamilton, x) ∧ (¬(x=y)) ∧ Wins(hamilton, y))\n\"\"\""
    ]
  },
  {
    "id": 626,
    "question": "Ernest Pohl has not scored more than 180 goals.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPolish(ernestPohl) ∧ FootballPlayer(ernestPohl)\n∃x (FootballPlayer(x) ∧ In(x, polishFirstDivision) ∧ ScoredOver(x, 180Goals))\nIn(ernestPohl, polishFirstDivision) ∧ ScoredOver(ernestPohl, 180Goals)\n∃x ∃y (GornikZabrzes(x) ∧ Stadium(x) ∧ NamedAfter(x, y) ∧ SoccerPlayer(y) ∧ From(y, rudaŚląska))\nFrom(ernestPohl, rudaŚląska))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ScoredOver(ernestPohl, 180Goals)\n\"\"\""
    ]
  },
  {
    "id": 627,
    "question": "Górnik Zabrze's stadium was named after Ernest Pohl.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPolish(ernestPohl) ∧ FootballPlayer(ernestPohl)\n∃x (FootballPlayer(x) ∧ In(x, polishFirstDivision) ∧ ScoredOver(x, 180Goals))\nIn(ernestPohl, polishFirstDivision) ∧ ScoredOver(ernestPohl, 180Goals)\n∃x ∃y (GornikZabrzes(x) ∧ Stadium(x) ∧ NamedAfter(x, y) ∧ SoccerPlayer(y) ∧ From(y, rudaŚląska))\nFrom(ernestPohl, rudaŚląska))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (GornikZabrzes(x) ∧ Stadium(x) → NamedAfter(x, ernestPohl))\n\"\"\""
    ]
  },
  {
    "id": 416,
    "question": "Ann J. Land was elected to the Philadelphia City Council in 1980.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMemberOf(annJLand, philadelphiaCityCouncil) ∧ MemberOf(annJLand, democraticParty)\nRunUnopposedFor(ann, philadelphiaCityCouncil, year1980)\n∀x ∀y (RunUnopposedFor(x, philadelphiaCityCouncil, y) → ElectedTo(x, philadelphiaCityCouncil, y))\nPoliticalChallenger(michaelNutter)\nDefeat(annJLand, michaelNutter) ∧ RunFor(annJLand, philadelphiaCityCouncil, year1987)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nElectedTo(ann, philadelphiaCityCouncil, year1980)\n\"\"\""
    ]
  },
  {
    "id": 417,
    "question": "Ann J. Land was elected to the Philadelphia City Council in 1987.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMemberOf(annJLand, philadelphiaCityCouncil) ∧ MemberOf(annJLand, democraticParty)\nRunUnopposedFor(ann, philadelphiaCityCouncil, year1980)\n∀x ∀y (RunUnopposedFor(x, philadelphiaCityCouncil, y) → ElectedTo(x, philadelphiaCityCouncil, y))\nPoliticalChallenger(michaelNutter)\nDefeat(annJLand, michaelNutter) ∧ RunFor(annJLand, philadelphiaCityCouncil, year1987)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nElectedTo(ann, philadelphiaCityCouncil, year1987)\n\"\"\""
    ]
  },
  {
    "id": 418,
    "question": "There was some member of the Democratic Party elected to the Philadelphia City Council in 1980.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMemberOf(annJLand, philadelphiaCityCouncil) ∧ MemberOf(annJLand, democraticParty)\nRunUnopposedFor(ann, philadelphiaCityCouncil, year1980)\n∀x ∀y (RunUnopposedFor(x, philadelphiaCityCouncil, y) → ElectedTo(x, philadelphiaCityCouncil, y))\nPoliticalChallenger(michaelNutter)\nDefeat(annJLand, michaelNutter) ∧ RunFor(annJLand, philadelphiaCityCouncil, year1987)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (MemberOf(x, democraticParty) ∧ ElectedTo(x, philadelphiaCouncil, year1980))\n\"\"\""
    ]
  },
  {
    "id": 336,
    "question": "Rangers won the cup in 2015.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWonCup(aberdeen, year2013Final)\nWonCup(rangers, year2014Final)\n¬(aberdeen=rangers)\n∀x ∀y ∀z ∀w (¬(x=y) ∧ WonCup(x, z) ∧ WonCup(y, w) → ¬(z=w))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWonCup(rangers, year2015Final)\n\"\"\""
    ]
  },
  {
    "id": 337,
    "question": "Rangers won the cup in 2013.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWonCup(aberdeen, year2013Final)\nWonCup(rangers, year2014Final)\n¬(aberdeen=rangers)\n∀x ∀y ∀z ∀w (¬(x=y) ∧ WonCup(x, z) ∧ WonCup(y, w) → ¬(z=w))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWonCup(rangers, year2013Final)\n\"\"\""
    ]
  },
  {
    "id": 338,
    "question": "Aberdeen has once won a cup.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWonCup(aberdeen, year2013Final)\nWonCup(rangers, year2014Final)\n¬(aberdeen=rangers)\n∀x ∀y ∀z ∀w (¬(x=y) ∧ WonCup(x, z) ∧ WonCup(y, w) → ¬(z=w))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (WonCup(aberdeen, x))\n\"\"\""
    ]
  },
  {
    "id": 843,
    "question": "Mary lives in Manhattan.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))\n∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))\n∀x (Have(x, stableJob) → WorkRegularly(x))\n∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))\n¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLiveIn(mary, manhattan)\n\"\"\""
    ]
  },
  {
    "id": 844,
    "question": "Mary lives in Manhattan and is a young working professional who has a regular 9-5 job.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))\n∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))\n∀x (Have(x, stableJob) → WorkRegularly(x))\n∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))\n¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLiveIn(mary, manhattan) ∧ YoungWorkingProfessional(mary) ∧ Have(mary, regular9-5Job)\n\"\"\""
    ]
  },
  {
    "id": 845,
    "question": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))\n∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))\n∀x (Have(x, stableJob) → WorkRegularly(x))\n∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))\n¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nYoungWorkingProfessional(mary) ∧ Have(mary, regular9-5Job) → ¬LiveIn(mary, manhattan)\n\"\"\""
    ]
  },
  {
    "id": 1080,
    "question": "Picture memory is preceded by data processing.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrainStudy(x) → (BlockDesign(x) ⊕ Event-relatedDesign(x)))\n∀x ((BrainStudy(x) ∧ EventRelatedDesign(x)) → BrainImageAcquisition(x))\n∀x ((BrainStudy(x) ∧ BrainImageAcquisition(x)) → PrecededBy(x, dataProcessing))\n∀x ((BrainStudy(x) ∧ PrecededBy(x, dataProcessing)) → ¬Analyze(x, data))\nBrainStudy(pictureMemory) ∧ (¬(EventRelatedDesign(pictureMemory) ⊕ AnalyzingData(pictureMemory)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPrecededBy(pictureMemory, dataProcessing)\n\"\"\""
    ]
  },
  {
    "id": 1081,
    "question": "Picture memory is a block design.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrainStudy(x) → (BlockDesign(x) ⊕ Event-relatedDesign(x)))\n∀x ((BrainStudy(x) ∧ EventRelatedDesign(x)) → BrainImageAcquisition(x))\n∀x ((BrainStudy(x) ∧ BrainImageAcquisition(x)) → PrecededBy(x, dataProcessing))\n∀x ((BrainStudy(x) ∧ PrecededBy(x, dataProcessing)) → ¬Analyze(x, data))\nBrainStudy(pictureMemory) ∧ (¬(EventRelatedDesign(pictureMemory) ⊕ AnalyzingData(pictureMemory)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBlockDesign(pictureMemory)\n\"\"\""
    ]
  },
  {
    "id": 1082,
    "question": "Picture memory is either a block design or analyzing data.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrainStudy(x) → (BlockDesign(x) ⊕ Event-relatedDesign(x)))\n∀x ((BrainStudy(x) ∧ EventRelatedDesign(x)) → BrainImageAcquisition(x))\n∀x ((BrainStudy(x) ∧ BrainImageAcquisition(x)) → PrecededBy(x, dataProcessing))\n∀x ((BrainStudy(x) ∧ PrecededBy(x, dataProcessing)) → ¬Analyze(x, data))\nBrainStudy(pictureMemory) ∧ (¬(EventRelatedDesign(pictureMemory) ⊕ AnalyzingData(pictureMemory)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBlockDesign(pictureMemory) ⊕ Analyze(pictureMemory, data)\n\"\"\""
    ]
  },
  {
    "id": 1083,
    "question": "If picture memory is not analyzing data, then picture memory is a block design and analyzing data.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrainStudy(x) → (BlockDesign(x) ⊕ Event-relatedDesign(x)))\n∀x ((BrainStudy(x) ∧ EventRelatedDesign(x)) → BrainImageAcquisition(x))\n∀x ((BrainStudy(x) ∧ BrainImageAcquisition(x)) → PrecededBy(x, dataProcessing))\n∀x ((BrainStudy(x) ∧ PrecededBy(x, dataProcessing)) → ¬Analyze(x, data))\nBrainStudy(pictureMemory) ∧ (¬(EventRelatedDesign(pictureMemory) ⊕ AnalyzingData(pictureMemory)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Analyze(pictureMemory, data) → (BlockDesign(pictureMemory) ∧ Analyze(pictureMemory, data))\n\"\"\""
    ]
  },
  {
    "id": 721,
    "question": "The USS Lyon is currently decommissioned.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nUSNavyShip(theUSSLyon) ∧ InvolvedIn(theUSSLyon, wWII)\n∀x (InvolvedIn(x, wWII) → (CurrentlyDecommissioned(x) ∨ In(x, museum)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCurrentlyDecommissioned(theUSSLyon)\n\"\"\""
    ]
  },
  {
    "id": 924,
    "question": "The chopsticks used in Tom's house are eco-friendly.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disposable(x) → DesignedToBeOnlyUsedOnce(x))\n∃x (EcoFriendly(x))\n∀x (UsedIn(x, tomsHouse) → Disposable(x) ⊕ Reusable(x))\n∀x (MadeFrom(x, metal) → ¬MadeFrom(x, plastic))\n∀x (Reusable(x) → MadeFrom(x, metal))\n¬(MadeFrom(chopsticksUsedInTomsHouse, metal) ⊕ MadeFrom(chopsticksUsedInTomsHouse, plastic))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEcoFriendly(chopsticks)\n\"\"\""
    ]
  },
  {
    "id": 925,
    "question": "The chopsticks used in Tom's house are eco-friendly or designed to be used only once.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disposable(x) → DesignedToBeOnlyUsedOnce(x))\n∃x (EcoFriendly(x))\n∀x (UsedIn(x, tomsHouse) → Disposable(x) ⊕ Reusable(x))\n∀x (MadeFrom(x, metal) → ¬MadeFrom(x, plastic))\n∀x (Reusable(x) → MadeFrom(x, metal))\n¬(MadeFrom(chopsticksUsedInTomsHouse, metal) ⊕ MadeFrom(chopsticksUsedInTomsHouse, plastic))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEcoFriendly(chopsticks) ∨ DesignedToBeOnlyUsedOnce(chopsticks)\n\"\"\""
    ]
  },
  {
    "id": 926,
    "question": "If chopsticks used in Tom's house are made from plastic or designed to be used only once, then they are made from plastic and are eco-friendly.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Disposable(x) → DesignedToBeOnlyUsedOnce(x))\n∃x (EcoFriendly(x))\n∀x (UsedIn(x, tomsHouse) → Disposable(x) ⊕ Reusable(x))\n∀x (MadeFrom(x, metal) → ¬MadeFrom(x, plastic))\n∀x (Reusable(x) → MadeFrom(x, metal))\n¬(MadeFrom(chopsticksUsedInTomsHouse, metal) ⊕ MadeFrom(chopsticksUsedInTomsHouse, plastic))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMadeFrom(chopsticks, plastic) ∨ DesignedBeOnlyUsedOnce(chopsticks) → MadeFrom(chopsticks, plastic) ∧ EcoFriendly(chopsticks)\n\"\"\""
    ]
  },
  {
    "id": 1280,
    "question": "Sid is an animal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Lazy(x) → Unproductive(x))\n∀x (Unproductive(x) → ¬Energetic(x))\n∀x (Sloth(x) → Lazy(x))\n∃x (Animal(x) ∧ Sloth(x))\n¬Energetic(sid) ∧ ¬Sloth(sid))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAnimal(sid)\n\"\"\""
    ]
  },
  {
    "id": 1281,
    "question": "Sid is an energetic person and an animal.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Lazy(x) → Unproductive(x))\n∀x (Unproductive(x) → ¬Energetic(x))\n∀x (Sloth(x) → Lazy(x))\n∃x (Animal(x) ∧ Sloth(x))\n¬Energetic(sid) ∧ ¬Sloth(sid))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEnergetic(sid) ∧ Animal(sid)\n\"\"\""
    ]
  },
  {
    "id": 1282,
    "question": "If Sid is either an animal or unproductive, then Sid is not an energetic person.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Lazy(x) → Unproductive(x))\n∀x (Unproductive(x) → ¬Energetic(x))\n∀x (Sloth(x) → Lazy(x))\n∃x (Animal(x) ∧ Sloth(x))\n¬Energetic(sid) ∧ ¬Sloth(sid))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAnimal(sid) ⊕ Unproductive(sid)) → ¬Energetic(sid)\n\"\"\""
    ]
  },
  {
    "id": 539,
    "question": "Manchester City has a higher ranking than Manchester United.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (EuropeanSoccerClub(x) → Attend(x, ucl) ∨ Attend(x, uel) ∨ Attend(x, uecl))\n∀x ∀y (EuropeanSoccerClub(x) ∧ EuropeanSoccerClub(y) ∧ Attend(x, ucl) ∧ Attend(y, uel) → HigherRank(x, y))\n∀x ∀y (EuropeanSoccerClub(x) ∧ EuropeanSoccerClub(y) ∧ Attend(x, uel) ∧ Attend(y, uecl) → HigherRank(x, y))\nEuropeanSoccerClub(manchesterUnited) ∧ EuropeanSoccerClub(manchesterCity)\nAttend(manchesterunited, uel)\nAttend(manchestercity, ucl)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHigherRank(manchesterCity, manchesterUnited)\n\"\"\""
    ]
  },
  {
    "id": 192,
    "question": "Dennis Green is a football coach.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ((Coach(x, y) ∧ FootballClub(y)) → FootballCoach(x))\n∀w ∀x ∀y ∀z ((PlayPositionFor(x, w, y, z) ∧ InNFL(y, z)) → PlayInNFL(x))\nFootballClub(minnesotaVikings)\nCoach(dennisGreen, minnesotaVikings)\nReceiveTD(crisCarter, num13)\nInNFL(minnesotaVikings, yr1997)\nPlayPositionFor(johnRandle, defensiveTackle, minnesotaVikings, yr1997)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFootballCoach(dennisGreen)\n\"\"\""
    ]
  },
  {
    "id": 193,
    "question": "John Randle didn't play in the National Football League.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ((Coach(x, y) ∧ FootballClub(y)) → FootballCoach(x))\n∀w ∀x ∀y ∀z ((PlayPositionFor(x, w, y, z) ∧ InNFL(y, z)) → PlayInNFL(x))\nFootballClub(minnesotaVikings)\nCoach(dennisGreen, minnesotaVikings)\nReceiveTD(crisCarter, num13)\nInNFL(minnesotaVikings, yr1997)\nPlayPositionFor(johnRandle, defensiveTackle, minnesotaVikings, yr1997)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬PlayInNFL(johnRandle)\n\"\"\""
    ]
  },
  {
    "id": 194,
    "question": "Cris Carter played for Minnesota Vikings.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ((Coach(x, y) ∧ FootballClub(y)) → FootballCoach(x))\n∀w ∀x ∀y ∀z ((PlayPositionFor(x, w, y, z) ∧ InNFL(y, z)) → PlayInNFL(x))\nFootballClub(minnesotaVikings)\nCoach(dennisGreen, minnesotaVikings)\nReceiveTD(crisCarter, num13)\nInNFL(minnesotaVikings, yr1997)\nPlayPositionFor(johnRandle, defensiveTackle, minnesotaVikings, yr1997)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlayPositionFor(crisCarter, wr, minnesotaVikings, year1997)\n\"\"\""
    ]
  },
  {
    "id": 1333,
    "question": "Room 116 is a private study spot.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ UsedFor(x, lecture) → BookedDuring(x, day))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ ¬PrivateStudySpot(x))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ (UsedFor(x, lecture) ∨ UsedFor(x, officeHours)))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ BookedIn(x, evening) → ¬FreelyUsableAtNight(x))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ UsedFor(x, officeHours) → BookedIn(x, evening))\nClassroomIn(116, williamLHarknessHall) ∧ ¬(UsedFor(116, lecture) ⊕ UsedFor(116, officeHours))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPrivateStudySpot(room116)\n\"\"\""
    ]
  },
  {
    "id": 1334,
    "question": "If Room 116 is either both booked during the day and freely usable at night, or neither, then it is either used for office hours or for private study spots.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ UsedFor(x, lecture) → BookedDuring(x, day))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ ¬PrivateStudySpot(x))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ (UsedFor(x, lecture) ∨ UsedFor(x, officeHours)))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ BookedIn(x, evening) → ¬FreelyUsableAtNight(x))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ UsedFor(x, officeHours) → BookedIn(x, evening))\nClassroomIn(116, williamLHarknessHall) ∧ ¬(UsedFor(116, lecture) ⊕ UsedFor(116, officeHours))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(BookedDuring(room116, day) ⊕ FreelyUsableAtNight(room116) → (UsedFor(room116, officeHour) ⊕ PrivateStudySpot(room116))\n\"\"\""
    ]
  },
  {
    "id": 1335,
    "question": "If Room 116 is not both a private study spot and freely useable at night, then it is either used for lectures or booked during the day.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ UsedFor(x, lecture) → BookedDuring(x, day))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ ¬PrivateStudySpot(x))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ (UsedFor(x, lecture) ∨ UsedFor(x, officeHours)))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ BookedIn(x, evening) → ¬FreelyUsableAtNight(x))\n∀x (ClassroomIn(x, williamLHarknessHall) ∧ UsedFor(x, officeHours) → BookedIn(x, evening))\nClassroomIn(116, williamLHarknessHall) ∧ ¬(UsedFor(116, lecture) ⊕ UsedFor(116, officeHours))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(PrivateStudySpot(room116) ∧ FreelyUsableAtNight(room116)) → (UsedFor(room116, lecture) ∨ BookedIn(room116, evening))\n\"\"\""
    ]
  },
  {
    "id": 298,
    "question": "Baku is southeast of Shafaq-Asiman.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)\nNorthwestOf(baku, shafaq-asiman)\n∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSoutheastOf(baku, shafaq-asiman)\n\"\"\""
    ]
  },
  {
    "id": 299,
    "question": "A large complex is southeast of Baku.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)\nNorthwestOf(baku, shafaq-asiman)\n∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (LargeComplex(x) ∧ SoutheastOf(x, baku))\n\"\"\""
    ]
  },
  {
    "id": 300,
    "question": "Baku is not northwest of offshore geological structures.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)\nNorthwestOf(baku, shafaq-asiman)\n∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (GeologicalStructures(x) ∧ Offshore(x) → ¬NorthwestOf(baku, x))\n\"\"\""
    ]
  },
  {
    "id": 213,
    "question": "Herodicus tutored Hippocrates.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ Gymnast(herodicus)\nBorn(herodicus, selymbia) ∧ City(selymbia)\nColony(selymbia, megara) ∧ CityState(megara)\nTutor(herodicus, hippocrates)\nRecommend(herodicus, massages)\n∃x ∃y (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine) ∧ (¬(x=y)) ∧ Theory(y) ∧ From(y, herodicus) ∧ FoundationOf(y, sportsMedicine))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTutor(herodicus, hippocrates)\n\"\"\""
    ]
  },
  {
    "id": 214,
    "question": "Herodicus was tutored by Hippocrates.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ Gymnast(herodicus)\nBorn(herodicus, selymbia) ∧ City(selymbia)\nColony(selymbia, megara) ∧ CityState(megara)\nTutor(herodicus, hippocrates)\nRecommend(herodicus, massages)\n∃x ∃y (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine) ∧ (¬(x=y)) ∧ Theory(y) ∧ From(y, herodicus) ∧ FoundationOf(y, sportsMedicine))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTutor(hippocrates, herodicus)\n\"\"\""
    ]
  },
  {
    "id": 215,
    "question": "Herodicus was born in a city-state.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ Gymnast(herodicus)\nBorn(herodicus, selymbia) ∧ City(selymbia)\nColony(selymbia, megara) ∧ CityState(megara)\nTutor(herodicus, hippocrates)\nRecommend(herodicus, massages)\n∃x ∃y (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine) ∧ (¬(x=y)) ∧ Theory(y) ∧ From(y, herodicus) ∧ FoundationOf(y, sportsMedicine))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Born(herodicus, x) ∧ CityState(x))\n\"\"\""
    ]
  },
  {
    "id": 216,
    "question": "Herodicus did not recommend massages.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ Gymnast(herodicus)\nBorn(herodicus, selymbia) ∧ City(selymbia)\nColony(selymbia, megara) ∧ CityState(megara)\nTutor(herodicus, hippocrates)\nRecommend(herodicus, massages)\n∃x ∃y (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine) ∧ (¬(x=y)) ∧ Theory(y) ∧ From(y, herodicus) ∧ FoundationOf(y, sportsMedicine))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Recommend(herodicus, massages)\n\"\"\""
    ]
  },
  {
    "id": 217,
    "question": "Herodicus was born in a colony of a city-state.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ Gymnast(herodicus)\nBorn(herodicus, selymbia) ∧ City(selymbia)\nColony(selymbia, megara) ∧ CityState(megara)\nTutor(herodicus, hippocrates)\nRecommend(herodicus, massages)\n∃x ∃y (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine) ∧ (¬(x=y)) ∧ Theory(y) ∧ From(y, herodicus) ∧ FoundationOf(y, sportsMedicine))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Born(herodicus, x) ∧ Colony(x, y) ∧ CityState(y))\n\"\"\""
    ]
  },
  {
    "id": 1258,
    "question": "Billy is a student.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Kid(x) ∧ In(x, ourFamily)) → ¬Love(x, opera))\n∀x ((Adult(x) ∧ In(x, ourFamily)) → Love(x, opera))\n∀x ((Scientist(x) ∧ In(x, ourFamily)) → Adult(x))\n∃x (Student(x) ∧ In(x, ourFamily) ∧ Kid(x))\nKid(billy) ∧ In(billy, ourFamily) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStudent(billy)\n\"\"\""
    ]
  },
  {
    "id": 1259,
    "question": "Billy is a student and a scientist.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Kid(x) ∧ In(x, ourFamily)) → ¬Love(x, opera))\n∀x ((Adult(x) ∧ In(x, ourFamily)) → Love(x, opera))\n∀x ((Scientist(x) ∧ In(x, ourFamily)) → Adult(x))\n∃x (Student(x) ∧ In(x, ourFamily) ∧ Kid(x))\nKid(billy) ∧ In(billy, ourFamily) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStudent(billy)  ∧ Scientist(billy)\n\"\"\""
    ]
  },
  {
    "id": 1260,
    "question": "If Billy is a student or a scientist, then Billy is a student and a kid.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Kid(x) ∧ In(x, ourFamily)) → ¬Love(x, opera))\n∀x ((Adult(x) ∧ In(x, ourFamily)) → Love(x, opera))\n∀x ((Scientist(x) ∧ In(x, ourFamily)) → Adult(x))\n∃x (Student(x) ∧ In(x, ourFamily) ∧ Kid(x))\nKid(billy) ∧ In(billy, ourFamily) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Student(billy) ∨ Scientist(billy)) → (Student(billy) ∧ Kid(billy))\n\"\"\""
    ]
  },
  {
    "id": 204,
    "question": "There is a son of a referee observer that plays football.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(brianWinter) ∧ FootballReferee(brianWinter)\nRetired(brianWinter) ∧ RetiredIn(brianWinter, yr2012)\nRefereeObserver(brianWinter)\n∃x (FootballReferee(x) ∧ RefereeObserver(x))\nSonOf(andyWinter, brianWinter) ∧ FootballPlayer(andyWinter) ∧ PlaysFor(andyWinter, hamiltonAcademical)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y(SonOf(x, y) ∧ RefereeObserver(y) ∧ FootballPlayer(x))\n\"\"\""
    ]
  },
  {
    "id": 205,
    "question": "Brian Winter was not a referee observer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(brianWinter) ∧ FootballReferee(brianWinter)\nRetired(brianWinter) ∧ RetiredIn(brianWinter, yr2012)\nRefereeObserver(brianWinter)\n∃x (FootballReferee(x) ∧ RefereeObserver(x))\nSonOf(andyWinter, brianWinter) ∧ FootballPlayer(andyWinter) ∧ PlaysFor(andyWinter, hamiltonAcademical)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬RefereeObserver(brianwinter)\n\"\"\""
    ]
  },
  {
    "id": 206,
    "question": "Brian Winter is retired.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(brianWinter) ∧ FootballReferee(brianWinter)\nRetired(brianWinter) ∧ RetiredIn(brianWinter, yr2012)\nRefereeObserver(brianWinter)\n∃x (FootballReferee(x) ∧ RefereeObserver(x))\nSonOf(andyWinter, brianWinter) ∧ FootballPlayer(andyWinter) ∧ PlaysFor(andyWinter, hamiltonAcademical)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRetired(brianwinter)\n\"\"\""
    ]
  },
  {
    "id": 207,
    "question": "Andy Winter is a referee.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(brianWinter) ∧ FootballReferee(brianWinter)\nRetired(brianWinter) ∧ RetiredIn(brianWinter, yr2012)\nRefereeObserver(brianWinter)\n∃x (FootballReferee(x) ∧ RefereeObserver(x))\nSonOf(andyWinter, brianWinter) ∧ FootballPlayer(andyWinter) ∧ PlaysFor(andyWinter, hamiltonAcademical)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nReferee(andywinter)\n\"\"\""
    ]
  },
  {
    "id": 1100,
    "question": "Erica plans.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))\n∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))\n∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))\nAt(erica, boardGameNight) ∧ PlaysOften(erica, chess)\n(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlanner(erica)\n\"\"\""
    ]
  },
  {
    "id": 1101,
    "question": "Erica is interested in puzzles and is creative.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))\n∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))\n∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))\nAt(erica, boardGameNight) ∧ PlaysOften(erica, chess)\n(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInterestedIn(erica, puzzle) ∧ Creative(erica)\n\"\"\""
    ]
  },
  {
    "id": 1102,
    "question": "Erica is either interested in puzzles or is creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))\n∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))\n∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))\nAt(erica, boardGameNight) ∧ PlaysOften(erica, chess)\n(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInterestedIn(erica, puzzle) ⊕ Creative(erica)\n\"\"\""
    ]
  },
  {
    "id": 1103,
    "question": "If Erica plans ahead or plays a lot of chess matches, then Erica is not interested in puzzles and creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))\n∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))\n∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))\nAt(erica, boardGameNight) ∧ PlaysOften(erica, chess)\n(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlanner(erica) ∨ PlaysOften(erica, chess))) → (¬(InterestedIn(erica, puzzle) ∧ Creative(erica))\n\"\"\""
    ]
  },
  {
    "id": 1104,
    "question": "If Erica is creative, then Erica is not interested in puzzles and creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))\n∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))\n∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))\nAt(erica, boardGameNight) ∧ PlaysOften(erica, chess)\n(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCreative(erica)) → (¬(InterestedIn(erica, puzzle) ∧ Creative(erica))\n\"\"\""
    ]
  },
  {
    "id": 1105,
    "question": "If Erica is interested in puzzles and is creative, then Erica is not creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))\n∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))\n∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))\nAt(erica, boardGameNight) ∧ PlaysOften(erica, chess)\n(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInterestedIn(erica, puzzle) ∧ Creative(erica)) → ¬Creative(erica)\n\"\"\""
    ]
  },
  {
    "id": 1106,
    "question": "If Erica either plays a lot of chess matches or is creative, then Erica is neither interested in puzzles nor a person who plays a lot of chess matches.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))\n∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))\n∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))\nAt(erica, boardGameNight) ∧ PlaysOften(erica, chess)\n(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlaysOften(erica, chess) ⊕ InterestedIn(erica, puzzle) → ¬(InterestedIn(erica, puzzle) ∨ PlaysOften(erica, chess))\n\"\"\""
    ]
  },
  {
    "id": 1107,
    "question": "If Erica is interested in puzzles and plays a lot of chess matches, then Erica is either a person who plays a lot of chess matches or a person that is creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))\n∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))\n∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))\nAt(erica, boardGameNight) ∧ PlaysOften(erica, chess)\n(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlaysOften(erica, chess) ⊕ InterestedIn(erica, puzzle)) → ¬(InterestedIn(erica, puzzle) ∨ PlaysOften(erica, chess)\n\"\"\""
    ]
  },
  {
    "id": 1108,
    "question": "If Erica plans ahead or is interested in puzzles, then Erica is creative.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))\n∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))\n∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))\nAt(erica, boardGameNight) ∧ PlaysOften(erica, chess)\n(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlanner(erica) ∨ InterestedIn(erica, puzzle) → Creative(erica)\n\"\"\""
    ]
  },
  {
    "id": 1109,
    "question": "If Erica is either bad at chess or interested in puzzles, then Erica is not a person who plays a lot of chess matches and creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))\n∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))\n∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))\nAt(erica, boardGameNight) ∧ PlaysOften(erica, chess)\n(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBadAt(erica, chess) ⊕ InterestedIn(erica, puzzle) → ¬(PlaysOften(erica, chess) ∧ Creative(erica))\n\"\"\""
    ]
  },
  {
    "id": 373,
    "question": "Cristiano Ronaldo is a top soccer player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))\n∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))\n∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))\n∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))\nSoccerPlayer(ronaldo)\nUseEfficiently(ronaldo, rightFoot)\nScoreUsing(ronaldo, manyGoals, leftFoot)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTopSoccerPlayer(ronaldo)\n\"\"\""
    ]
  },
  {
    "id": 374,
    "question": "Cristiano Ronaldo is not a top soccer player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))\n∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))\n∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))\n∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))\nSoccerPlayer(ronaldo)\nUseEfficiently(ronaldo, rightFoot)\nScoreUsing(ronaldo, manyGoals, leftFoot)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬TopSoccerPlayer(ronaldo)\n\"\"\""
    ]
  },
  {
    "id": 509,
    "question": "The National Lobster Hatchery is for conservation.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHatchery(nationalLobsterHatchery) ∧ LocatedIn(nationalLobsterHatchery, padstowEngland)\nOpenToVisitor(nationalLobsterHatchery)\n∀x (Hatchery(x) → ForConservation(x) ⊕ ForProfit(x))\n∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleaseAnimalToWild(x))\n¬ForProfit(nationalLobsterHatchery)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nForConservation(nationalLobsterhatchery)\n\"\"\""
    ]
  },
  {
    "id": 510,
    "question": "All hatcheries are open to visitors.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHatchery(nationalLobsterHatchery) ∧ LocatedIn(nationalLobsterHatchery, padstowEngland)\nOpenToVisitor(nationalLobsterHatchery)\n∀x (Hatchery(x) → ForConservation(x) ⊕ ForProfit(x))\n∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleaseAnimalToWild(x))\n¬ForProfit(nationalLobsterHatchery)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Hatchery(x) → OpenToVisitors(x))\n\"\"\""
    ]
  },
  {
    "id": 511,
    "question": "The National Lobster Hatchery releases animals into the wild.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHatchery(nationalLobsterHatchery) ∧ LocatedIn(nationalLobsterHatchery, padstowEngland)\nOpenToVisitor(nationalLobsterHatchery)\n∀x (Hatchery(x) → ForConservation(x) ⊕ ForProfit(x))\n∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleaseAnimalToWild(x))\n¬ForProfit(nationalLobsterHatchery)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nReleaseAnimalToWild(nationalLobsterhatchery)\n\"\"\""
    ]
  },
  {
    "id": 632,
    "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ Welsh(x))\n∀x (FootballClub(x) ∧ LocatedIn(x, ponciau) ↔ Rhosaelwydfc(x))\n∃x (LocatedIn(x, ponciau) ∧ WonPremierDivisionDuring(x, year2005MonthJune))\n∀x (WonPremierDivisionDuring(x, year2009MonthOctober) → PromotedTo(x, cymruAlliance))\n∀x (WonPremierDivisionDuring(x, year2009MonthOctober) ↔ WonPremierDivisionDuring(x, y2005MonthJune))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Rhosaelwydfc(x) ∧ WonPremierDivisionDuring(x, year2005MonthJune))\n\"\"\""
    ]
  },
  {
    "id": 633,
    "question": "Rhos Aelwyd F.C. was promoted to the Cymru Alliance.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ Welsh(x))\n∀x (FootballClub(x) ∧ LocatedIn(x, ponciau) ↔ Rhosaelwydfc(x))\n∃x (LocatedIn(x, ponciau) ∧ WonPremierDivisionDuring(x, year2005MonthJune))\n∀x (WonPremierDivisionDuring(x, year2009MonthOctober) → PromotedTo(x, cymruAlliance))\n∀x (WonPremierDivisionDuring(x, year2009MonthOctober) ↔ WonPremierDivisionDuring(x, y2005MonthJune))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Rhosaelwydfc(x) ∧ PromotedTo(x, cymruAlliance))\n\"\"\""
    ]
  },
  {
    "id": 1357,
    "question": "Burger is popular.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UsedIn(x, labComputer) ∧ UnixOperatingSystem(x) → Software(x))\n∀x (UsedIn(x, labComputer) ∧ MacOS(x) → UnixOperatingSystem(x))\n∀x (UsedIn(x, labComputer) → MacOS(x) ⊕ Linux(x))\n∀x (UsedIn(x, labComputer) ∧ Linux(x) → Convenient(x))\n∀x (UsedIn(x, labComputer) ∧ Software(x) → WrittenWithCode(x))\n∀x (UsedIn(x, labComputer) ∧ Convenient(x) → Popular(x))\nUsedIn(burger, labComputer) ∧ WrittenWithCode(burger) ∧ MacOS(burger))\nUsedIn(pytorch, labComputer) ∧ ¬(Linux(pytorch) ⊕ Software(pytorch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPopular(burger)\n\"\"\""
    ]
  },
  {
    "id": 1358,
    "question": "Burger is not popular.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UsedIn(x, labComputer) ∧ UnixOperatingSystem(x) → Software(x))\n∀x (UsedIn(x, labComputer) ∧ MacOS(x) → UnixOperatingSystem(x))\n∀x (UsedIn(x, labComputer) → MacOS(x) ⊕ Linux(x))\n∀x (UsedIn(x, labComputer) ∧ Linux(x) → Convenient(x))\n∀x (UsedIn(x, labComputer) ∧ Software(x) → WrittenWithCode(x))\n∀x (UsedIn(x, labComputer) ∧ Convenient(x) → Popular(x))\nUsedIn(burger, labComputer) ∧ WrittenWithCode(burger) ∧ MacOS(burger))\nUsedIn(pytorch, labComputer) ∧ ¬(Linux(pytorch) ⊕ Software(pytorch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Popular(burger)\n\"\"\""
    ]
  },
  {
    "id": 1359,
    "question": "PyTorch is popular and written with code.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UsedIn(x, labComputer) ∧ UnixOperatingSystem(x) → Software(x))\n∀x (UsedIn(x, labComputer) ∧ MacOS(x) → UnixOperatingSystem(x))\n∀x (UsedIn(x, labComputer) → MacOS(x) ⊕ Linux(x))\n∀x (UsedIn(x, labComputer) ∧ Linux(x) → Convenient(x))\n∀x (UsedIn(x, labComputer) ∧ Software(x) → WrittenWithCode(x))\n∀x (UsedIn(x, labComputer) ∧ Convenient(x) → Popular(x))\nUsedIn(burger, labComputer) ∧ WrittenWithCode(burger) ∧ MacOS(burger))\nUsedIn(pytorch, labComputer) ∧ ¬(Linux(pytorch) ⊕ Software(pytorch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPopular(pytorch) ∧ WrittenWithCode(pytorch)\n\"\"\""
    ]
  },
  {
    "id": 1360,
    "question": "PyTorch is not popular and it is not written with code.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UsedIn(x, labComputer) ∧ UnixOperatingSystem(x) → Software(x))\n∀x (UsedIn(x, labComputer) ∧ MacOS(x) → UnixOperatingSystem(x))\n∀x (UsedIn(x, labComputer) → MacOS(x) ⊕ Linux(x))\n∀x (UsedIn(x, labComputer) ∧ Linux(x) → Convenient(x))\n∀x (UsedIn(x, labComputer) ∧ Software(x) → WrittenWithCode(x))\n∀x (UsedIn(x, labComputer) ∧ Convenient(x) → Popular(x))\nUsedIn(burger, labComputer) ∧ WrittenWithCode(burger) ∧ MacOS(burger))\nUsedIn(pytorch, labComputer) ∧ ¬(Linux(pytorch) ⊕ Software(pytorch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Popular(pytorch) ∧ WrittenWithCode(pytorch))\n\"\"\""
    ]
  },
  {
    "id": 352,
    "question": "The first road will last longer than the second road.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Road(x) → (MadeOf(x, concrete) ⊕ MadeOf(x, asphalt))\n∀x ∀y (Road(x) ∧ MadeOf(x, concrete) ∧ Road(y) ∧ MadeOf(y, asphalt) → LastLonger(x, y))\n∀x ∀y (Road(x) ∧ MadeOf(x, asphalt) ∧ Road(y) ∧ MadeOf(y, concrete) → Smoother(x, y))\n∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefer(z, x))\nRoad(firstRoad) ∧ MadeOf(secondRoad, concrete) ∧ Road(firstRoad) ∧ MadeOf(secondRoad, asphalt)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLastLonger(firstRoad, secondRoad)\n\"\"\""
    ]
  },
  {
    "id": 353,
    "question": "The second road is not smoother than the first one.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Road(x) → (MadeOf(x, concrete) ⊕ MadeOf(x, asphalt))\n∀x ∀y (Road(x) ∧ MadeOf(x, concrete) ∧ Road(y) ∧ MadeOf(y, asphalt) → LastLonger(x, y))\n∀x ∀y (Road(x) ∧ MadeOf(x, asphalt) ∧ Road(y) ∧ MadeOf(y, concrete) → Smoother(x, y))\n∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefer(z, x))\nRoad(firstRoad) ∧ MadeOf(secondRoad, concrete) ∧ Road(firstRoad) ∧ MadeOf(secondRoad, asphalt)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Smoother(firstRoad, secondRoad)\n\"\"\""
    ]
  },
  {
    "id": 354,
    "question": "John prefers the second road.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Road(x) → (MadeOf(x, concrete) ⊕ MadeOf(x, asphalt))\n∀x ∀y (Road(x) ∧ MadeOf(x, concrete) ∧ Road(y) ∧ MadeOf(y, asphalt) → LastLonger(x, y))\n∀x ∀y (Road(x) ∧ MadeOf(x, asphalt) ∧ Road(y) ∧ MadeOf(y, concrete) → Smoother(x, y))\n∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefer(z, x))\nRoad(firstRoad) ∧ MadeOf(secondRoad, concrete) ∧ Road(firstRoad) ∧ MadeOf(secondRoad, asphalt)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPrefer(john, secondRoad)\n\"\"\""
    ]
  },
  {
    "id": 225,
    "question": "One of Ontario's oldest summer camps is a traditional summer camp for boys and girls.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTraditionalSummerCamp(campDavern) ∧ ForBoysAndGirls(campDavern)\nEstablishedIn(campDavern, year1946)\nOperatedUntil(yMCA, campDavern, year2015)\nOld(campDavern)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Old(x) ∧ TraditionalSummerCamp(x) ∧ ForBoysAndGirls(x))\n\"\"\""
    ]
  },
  {
    "id": 226,
    "question": "A traditional summer camp for boys and girls was operated by the YMCA until the year 2015.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTraditionalSummerCamp(campDavern) ∧ ForBoysAndGirls(campDavern)\nEstablishedIn(campDavern, year1946)\nOperatedUntil(yMCA, campDavern, year2015)\nOld(campDavern)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (TraditionalSummerCamp(x) ∧ ForBoysAndGirls(x) ∧ OperatedUntil(YMCA, x, year2015))\n\"\"\""
    ]
  },
  {
    "id": 227,
    "question": "Camp Davern was established in 1989.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTraditionalSummerCamp(campDavern) ∧ ForBoysAndGirls(campDavern)\nEstablishedIn(campDavern, year1946)\nOperatedUntil(yMCA, campDavern, year2015)\nOld(campDavern)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEstablishedIn(campdavern, year1989)\n\"\"\""
    ]
  },
  {
    "id": 990,
    "question": "Taylor is Emily's friend and she often holds tenured and high-ranking positions at her workplace.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (EmilysFriend(x) ∧ Publish(x, journal) → ¬WorkIn(x, entertainmentIndustry))\n∀x (EmilysFriend(x) ∧ AwardWinningNovelist(x) → Publish(x, journal))\n∀x (EmilysFriend(x) → WorkIn(x, entertainmentIndustry) ∨ HighlyAcclaimedIn(x, theirProfession))\n∀x (EmilysFriend(x) ∧ HighlyAcclaimedIn(x, theirProfession) → ∃y (HoldAt(x, y, workPlace) ∧ Tenured(y) ∧ HighRanking(y) ∧ Position(y)))\n∀x (EmilysFriend(x) ∧ HighlyAcclaimedIn(x, theirProfession) → ReceiveFrom(x, glowingFeedback, colleague) ∧ ReceiveFrom(x, glowingRecommendation, colleague))\nEmilysFriends(taylor) \n¬(HighlyAcclaimedIn(taylor, theirProfession) ∧ (∃y (HoldAt(taylor, y, workPlace) ∧ Tenured(y) ∧ HighRanking(y) ∧ Position(y)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEmilysFriends(taylor) ∧ (∃y (HoldAt(taylor, y, workPlace) ∧ Tenured(y) ∧ HighRanking(y) ∧ Position(y)))\n\"\"\""
    ]
  },
  {
    "id": 991,
    "question": "Taylor is Emily's friend and she often receives glowing feedback and recommendations from their colleagues and is an award-winning novelist.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (EmilysFriend(x) ∧ Publish(x, journal) → ¬WorkIn(x, entertainmentIndustry))\n∀x (EmilysFriend(x) ∧ AwardWinningNovelist(x) → Publish(x, journal))\n∀x (EmilysFriend(x) → WorkIn(x, entertainmentIndustry) ∨ HighlyAcclaimedIn(x, theirProfession))\n∀x (EmilysFriend(x) ∧ HighlyAcclaimedIn(x, theirProfession) → ∃y (HoldAt(x, y, workPlace) ∧ Tenured(y) ∧ HighRanking(y) ∧ Position(y)))\n∀x (EmilysFriend(x) ∧ HighlyAcclaimedIn(x, theirProfession) → ReceiveFrom(x, glowingFeedback, colleague) ∧ ReceiveFrom(x, glowingRecommendation, colleague))\nEmilysFriends(taylor) \n¬(HighlyAcclaimedIn(taylor, theirProfession) ∧ (∃y (HoldAt(taylor, y, workPlace) ∧ Tenured(y) ∧ HighRanking(y) ∧ Position(y)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEmilysFriends(taylor) ∧ (Receive(taylor, glowingFeedback, colleague) ∧ Receive(taylor, glowingRecommendation, colleague) ∧ AwardWinningNovelist(taylor))\n\"\"\""
    ]
  },
  {
    "id": 992,
    "question": "Taylor is Emily's friend and she does not both publish journals and is an award-winning novelist.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (EmilysFriend(x) ∧ Publish(x, journal) → ¬WorkIn(x, entertainmentIndustry))\n∀x (EmilysFriend(x) ∧ AwardWinningNovelist(x) → Publish(x, journal))\n∀x (EmilysFriend(x) → WorkIn(x, entertainmentIndustry) ∨ HighlyAcclaimedIn(x, theirProfession))\n∀x (EmilysFriend(x) ∧ HighlyAcclaimedIn(x, theirProfession) → ∃y (HoldAt(x, y, workPlace) ∧ Tenured(y) ∧ HighRanking(y) ∧ Position(y)))\n∀x (EmilysFriend(x) ∧ HighlyAcclaimedIn(x, theirProfession) → ReceiveFrom(x, glowingFeedback, colleague) ∧ ReceiveFrom(x, glowingRecommendation, colleague))\nEmilysFriends(taylor) \n¬(HighlyAcclaimedIn(taylor, theirProfession) ∧ (∃y (HoldAt(taylor, y, workPlace) ∧ Tenured(y) ∧ HighRanking(y) ∧ Position(y)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEmilysFriends(taylor) ∧ ¬(Publish(taylor, journal) ∧ AwardWinningNovelist(taylor))\n\"\"\""
    ]
  },
  {
    "id": 25,
    "question": "Megan Whalen Turner worked with Greenwillow Books.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nYoungAdultFantasy(thickAsTheives) ∧ Novel(thickAsTheives) ∧ WrittenBy(thickAsTheives, meganWhalenTurner)\nPublishedBy(thickAsTheives, greenWillowBooks)\n∀x ∀y ∀z ((WrittenBy(x, y) ∧ PublishedBy(x, z)) → WorkedWith(y, z))\nFictional(medeEmpire) ∧ SetIn(thickAsTheives, medeEmpire)\n∃x ∃y ((Country(x) ∧ Near(x, medeEmpire) ∧ PlotsToSwallowUp(medeEmpire, x)) ∧ (¬(x=y) ∧ Near(y, medeEmpire) ∧ PlotsToSwallowUp(medeEmpire, y)))\nCountry(attolia) ∧ Near(attolia, medeEmpire) ∧ Country(sounis) ∧ Near(sounis, medeEmpire)\nSoldAs(thickAsTheives, hardCover) ∧ SoldAs(thickAsTheives, softCover)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWorkedWith(WhalenTurner, greenWillowbooks)\n\"\"\""
    ]
  },
  {
    "id": 26,
    "question": "The Mede Empire plans to swallow up Attolia.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nYoungAdultFantasy(thickAsTheives) ∧ Novel(thickAsTheives) ∧ WrittenBy(thickAsTheives, meganWhalenTurner)\nPublishedBy(thickAsTheives, greenWillowBooks)\n∀x ∀y ∀z ((WrittenBy(x, y) ∧ PublishedBy(x, z)) → WorkedWith(y, z))\nFictional(medeEmpire) ∧ SetIn(thickAsTheives, medeEmpire)\n∃x ∃y ((Country(x) ∧ Near(x, medeEmpire) ∧ PlotsToSwallowUp(medeEmpire, x)) ∧ (¬(x=y) ∧ Near(y, medeEmpire) ∧ PlotsToSwallowUp(medeEmpire, y)))\nCountry(attolia) ∧ Near(attolia, medeEmpire) ∧ Country(sounis) ∧ Near(sounis, medeEmpire)\nSoldAs(thickAsTheives, hardCover) ∧ SoldAs(thickAsTheives, softCover)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlotsToSwallowUp(medeEmpire, attolia)\n\"\"\""
    ]
  },
  {
    "id": 27,
    "question": "Thick as Thieves is not set in the Mede Empire.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nYoungAdultFantasy(thickAsTheives) ∧ Novel(thickAsTheives) ∧ WrittenBy(thickAsTheives, meganWhalenTurner)\nPublishedBy(thickAsTheives, greenWillowBooks)\n∀x ∀y ∀z ((WrittenBy(x, y) ∧ PublishedBy(x, z)) → WorkedWith(y, z))\nFictional(medeEmpire) ∧ SetIn(thickAsTheives, medeEmpire)\n∃x ∃y ((Country(x) ∧ Near(x, medeEmpire) ∧ PlotsToSwallowUp(medeEmpire, x)) ∧ (¬(x=y) ∧ Near(y, medeEmpire) ∧ PlotsToSwallowUp(medeEmpire, y)))\nCountry(attolia) ∧ Near(attolia, medeEmpire) ∧ Country(sounis) ∧ Near(sounis, medeEmpire)\nSoldAs(thickAsTheives, hardCover) ∧ SoldAs(thickAsTheives, softCover)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬SetIn(thickAsTheives, medeEmpire)\n\"\"\""
    ]
  },
  {
    "id": 28,
    "question": "Megan Whalen Turner did not work with Greenwillow Books.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nYoungAdultFantasy(thickAsTheives) ∧ Novel(thickAsTheives) ∧ WrittenBy(thickAsTheives, meganWhalenTurner)\nPublishedBy(thickAsTheives, greenWillowBooks)\n∀x ∀y ∀z ((WrittenBy(x, y) ∧ PublishedBy(x, z)) → WorkedWith(y, z))\nFictional(medeEmpire) ∧ SetIn(thickAsTheives, medeEmpire)\n∃x ∃y ((Country(x) ∧ Near(x, medeEmpire) ∧ PlotsToSwallowUp(medeEmpire, x)) ∧ (¬(x=y) ∧ Near(y, medeEmpire) ∧ PlotsToSwallowUp(medeEmpire, y)))\nCountry(attolia) ∧ Near(attolia, medeEmpire) ∧ Country(sounis) ∧ Near(sounis, medeEmpire)\nSoldAs(thickAsTheives, hardCover) ∧ SoldAs(thickAsTheives, softCover)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WorkedWith(megan, greenWillowbooks)\n\"\"\""
    ]
  },
  {
    "id": 350,
    "question": "There is a tablet computer announced by a German producer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMeeGoBased(weTab) ∧ TabletComputer(weTab)\n∀x (AnnouncedBy(weTab, neofonie))\nGerman(neofonie) ∧ Producer(neofonie)\n∀x (German(x) → LiveIn(x, german) ⊕ LiveAbroad(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (TabletComputer(x) ∧ German(y) ∧ Producer(y) ∧ AnnouncedBy(x, y))\n\"\"\""
    ]
  },
  {
    "id": 351,
    "question": "Neofonie doesn't speak English or German.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMeeGoBased(weTab) ∧ TabletComputer(weTab)\n∀x (AnnouncedBy(weTab, neofonie))\nGerman(neofonie) ∧ Producer(neofonie)\n∀x (German(x) → LiveIn(x, german) ⊕ LiveAbroad(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Speak(neofonie, english) ∧ ¬Speak(neofonie, german)\n\"\"\""
    ]
  },
  {
    "id": 1181,
    "question": "Leif is good at math.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (EmployeeIn(x, jamesSTown) ∧ WorkIn(x, businessAnalysis) ∧ GoodAt(x, math) ∧ (¬(x=y)) ∧ EmployeeIn(y, jamesSTown) ∧ WorkIn(y, businessAnalysis) ∧ GoodAt(y, math))\n∀x ((EmployeeIn(x, jamesSTown) ∧ WorkIn(x, businessAnalysis)) → WorkFor(x, thisCompany))\n∀x ((EmployeeIn(x, jamesSTown) ∧ WorkFor(x, thisCompany)) → ¬From(x, china))\n∀x (EmployeeIn(x, jamesSTown) ∧ WorkIn(x, softwareEngineering) → From(x, china))\nEmployeeIn(leif, jamesSTown) ∧ WorkIn(leif, softwareEngineering)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEmployeesInJamesSTown(leif) ∧ GoodAt(leif, math)\n\"\"\""
    ]
  },
  {
    "id": 1182,
    "question": "Leif is not both good at math and working in business analysis.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (EmployeeIn(x, jamesSTown) ∧ WorkIn(x, businessAnalysis) ∧ GoodAt(x, math) ∧ (¬(x=y)) ∧ EmployeeIn(y, jamesSTown) ∧ WorkIn(y, businessAnalysis) ∧ GoodAt(y, math))\n∀x ((EmployeeIn(x, jamesSTown) ∧ WorkIn(x, businessAnalysis)) → WorkFor(x, thisCompany))\n∀x ((EmployeeIn(x, jamesSTown) ∧ WorkFor(x, thisCompany)) → ¬From(x, china))\n∀x (EmployeeIn(x, jamesSTown) ∧ WorkIn(x, softwareEngineering) → From(x, china))\nEmployeeIn(leif, jamesSTown) ∧ WorkIn(leif, softwareEngineering)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(GoodAt(leif, math) ∧ WorkIn(leif, businessAnalysis))\n\"\"\""
    ]
  },
  {
    "id": 1183,
    "question": "If Leif is not both good at math and in business analysis, then he is neither working in this company nor working in software engineering.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (EmployeeIn(x, jamesSTown) ∧ WorkIn(x, businessAnalysis) ∧ GoodAt(x, math) ∧ (¬(x=y)) ∧ EmployeeIn(y, jamesSTown) ∧ WorkIn(y, businessAnalysis) ∧ GoodAt(y, math))\n∀x ((EmployeeIn(x, jamesSTown) ∧ WorkIn(x, businessAnalysis)) → WorkFor(x, thisCompany))\n∀x ((EmployeeIn(x, jamesSTown) ∧ WorkFor(x, thisCompany)) → ¬From(x, china))\n∀x (EmployeeIn(x, jamesSTown) ∧ WorkIn(x, softwareEngineering) → From(x, china))\nEmployeeIn(leif, jamesSTown) ∧ WorkIn(leif, softwareEngineering)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(GoodAt(leif, math) ∧ WorkIn(leif, businessAnalysis)) → (¬WorkFor(x, thisCompany) ∧ ¬WorkIn(x, softwareEngineering))\n\"\"\""
    ]
  },
  {
    "id": 450,
    "question": "Blueberries were the most popular fruit at the party.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProvide(party, strawberry) ∧ Provide(party, orange) ∧ Provide(party, blueberry) ∧ Provide(party, grape) ∧ Provide(party, cherry) \n∀x (LowestWeightRemainingAt(x, endOfParty) → MostPopular(x)) \nLowestWeightRemainingAt(strawberries, endOfParty)\nLowerWeightAt(blueberry, cherry, endOfParty)\nEat(benjamin, orange) ∧ Eat(benjamin, grape) ∧ ¬Eat(benjamin, blueberry) ∧ ¬Eat(benjamin, cherry) ∧ ¬Eat(benjamin, strawberry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMostPopular(blueberry)\n\"\"\""
    ]
  },
  {
    "id": 451,
    "question": "Cherries were the most popular fruit at the party.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProvide(party, strawberry) ∧ Provide(party, orange) ∧ Provide(party, blueberry) ∧ Provide(party, grape) ∧ Provide(party, cherry) \n∀x (LowestWeightRemainingAt(x, endOfParty) → MostPopular(x)) \nLowestWeightRemainingAt(strawberries, endOfParty)\nLowerWeightAt(blueberry, cherry, endOfParty)\nEat(benjamin, orange) ∧ Eat(benjamin, grape) ∧ ¬Eat(benjamin, blueberry) ∧ ¬Eat(benjamin, cherry) ∧ ¬Eat(benjamin, strawberry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMostPopular(cherry)\n\"\"\""
    ]
  },
  {
    "id": 452,
    "question": "Benjamin ate blueberries at the party.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProvide(party, strawberry) ∧ Provide(party, orange) ∧ Provide(party, blueberry) ∧ Provide(party, grape) ∧ Provide(party, cherry) \n∀x (LowestWeightRemainingAt(x, endOfParty) → MostPopular(x)) \nLowestWeightRemainingAt(strawberries, endOfParty)\nLowerWeightAt(blueberry, cherry, endOfParty)\nEat(benjamin, orange) ∧ Eat(benjamin, grape) ∧ ¬Eat(benjamin, blueberry) ∧ ¬Eat(benjamin, cherry) ∧ ¬Eat(benjamin, strawberry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEat(blueberry, benjamin)\n\"\"\""
    ]
  },
  {
    "id": 186,
    "question": "James attends the conference but not in person.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AttendInPerson(x) → Registered(x))\n∀x (Attend(x) → (AttendInPerson(x) ⊕ AttendRemotely(x)))\n∀x ((Attend(x) ∧ FromChina(x)) → ¬AttendRemotely(x))\nAttend(james) ∧ (¬AttendRemotely(james))\nFromChina(jack) ∧ Attend(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAttend(james) ∧ (¬AttendInPerson(james))\n\"\"\""
    ]
  },
  {
    "id": 187,
    "question": "Jack attends the conference in person.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AttendInPerson(x) → Registered(x))\n∀x (Attend(x) → (AttendInPerson(x) ⊕ AttendRemotely(x)))\n∀x ((Attend(x) ∧ FromChina(x)) → ¬AttendRemotely(x))\nAttend(james) ∧ (¬AttendRemotely(james))\nFromChina(jack) ∧ Attend(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAttend(jack) ∧ AttendInPerson(jack)\n\"\"\""
    ]
  },
  {
    "id": 188,
    "question": "Jack has registered for the conference.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AttendInPerson(x) → Registered(x))\n∀x (Attend(x) → (AttendInPerson(x) ⊕ AttendRemotely(x)))\n∀x ((Attend(x) ∧ FromChina(x)) → ¬AttendRemotely(x))\nAttend(james) ∧ (¬AttendRemotely(james))\nFromChina(jack) ∧ Attend(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRegistered(jack)\n\"\"\""
    ]
  },
  {
    "id": 629,
    "question": "David Ha'ivri is an Israeli citizen.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoliticalStrategist(davidHaivri)\n∀x ∃y (BornInIsrael(x) ∧ ParentOf(y, x) ∧ Israeli(y) → Israeli(x))\n∃x (EmigratedTo(davidHaivri, america) ∧ BornInIsrael(davidHaivri) ∧ ParentOf(davidHaivri, x) ∧ Israeli(x))\n∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronMunicipalCouncil))\nZionstLeader(davidHaivri)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIsraeliCitizen(davidHaivri)\n\"\"\""
    ]
  },
  {
    "id": 630,
    "question": "David Ha'ivri is a United States citizen.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoliticalStrategist(davidHaivri)\n∀x ∃y (BornInIsrael(x) ∧ ParentOf(y, x) ∧ Israeli(y) → Israeli(x))\n∃x (EmigratedTo(davidHaivri, america) ∧ BornInIsrael(davidHaivri) ∧ ParentOf(davidHaivri, x) ∧ Israeli(x))\n∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronMunicipalCouncil))\nZionstLeader(davidHaivri)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmerican(davidHaivri)\n\"\"\""
    ]
  },
  {
    "id": 631,
    "question": "David Ha'ivri has been elected to the Shomron Regional Municipal council.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoliticalStrategist(davidHaivri)\n∀x ∃y (BornInIsrael(x) ∧ ParentOf(y, x) ∧ Israeli(y) → Israeli(x))\n∃x (EmigratedTo(davidHaivri, america) ∧ BornInIsrael(davidHaivri) ∧ ParentOf(davidHaivri, x) ∧ Israeli(x))\n∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronMunicipalCouncil))\nZionstLeader(davidHaivri)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nElectedTo(davidHaivri, shomronMunicipalCouncil)\n\"\"\""
    ]
  },
  {
    "id": 3,
    "question": "Either Mary or Susan has influenza.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHas(mary, flu)\n∀x (Has(x, flu) → Has(x, influenza))\n¬Has(susan, influenza)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHas(mary, influenza) ⊕ Has(susan, influenza)\n\"\"\""
    ]
  },
  {
    "id": 120,
    "question": "No lawyer ever sat in the House of Commons.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(james) ∧ Lawyer(james)\nWhig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james)\n∀x (British(x) → European(x))\n∀x (Lawyer(x) → FamiliarWithLaws(x))\n∃x ∃y (Whig(x) ∧ SpeakFrench(x)) ∧ (¬(x=y)) ∧ (Whig(y) ∧ SpeakFrench(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Lawyer(x) → ¬SatInHouseOfCommons(x))\n\"\"\""
    ]
  },
  {
    "id": 121,
    "question": "Some European was familiar with laws.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(james) ∧ Lawyer(james)\nWhig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james)\n∀x (British(x) → European(x))\n∀x (Lawyer(x) → FamiliarWithLaws(x))\n∃x ∃y (Whig(x) ∧ SpeakFrench(x)) ∧ (¬(x=y)) ∧ (Whig(y) ∧ SpeakFrench(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (European(x) ∧ FamiliarWithLaws(x))\n\"\"\""
    ]
  },
  {
    "id": 122,
    "question": "James Cocks speaks French.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(james) ∧ Lawyer(james)\nWhig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james)\n∀x (British(x) → European(x))\n∀x (Lawyer(x) → FamiliarWithLaws(x))\n∃x ∃y (Whig(x) ∧ SpeakFrench(x)) ∧ (¬(x=y)) ∧ (Whig(y) ∧ SpeakFrench(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSpeakFrench(james)\n\"\"\""
    ]
  },
  {
    "id": 364,
    "question": "Beasts of prey is a fantasy novel.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNovel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))\n∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))\nAbout(beastsOfPrey, shetani) ∧ Creature(shetani)\nMythological(shetani)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFantasy(beastsOfpPrey) ∧ Novel(beastsOfPrey)\n\"\"\""
    ]
  },
  {
    "id": 365,
    "question": "Beasts of prey isn't a science fiction novel.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNovel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))\n∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))\nAbout(beastsOfPrey, shetani) ∧ Creature(shetani)\nMythological(shetani)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ScienceFiction(beastsofprey) ∧ Novel(beastsOfPrey)\n\"\"\""
    ]
  },
  {
    "id": 366,
    "question": "A shetani is either mythological or a creature.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNovel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))\n∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))\nAbout(beastsOfPrey, shetani) ∧ Creature(shetani)\nMythological(shetani)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMythological(shetani) ⊕ Creature(shetani)\n\"\"\""
    ]
  },
  {
    "id": 47,
    "question": "Jack Odell is a notable person.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSurname(nameODell) ∧ From(nameODell, oDellBedfordshire)\nMistakenSpellingOf(nameO'Dell, nameODell) ∧ (∃x∃y(Family(x) ∧ Named(x, nameO'Dell) ∧ (¬(x=y)) ∧ Family(y) ∧ Named(y, nameO'Dell))\nNamed(amyODell, nameODell) ∧ NotablePerson(amyODell) ∧ Named(jackODell, nameODell) ∧ NotablePerson(jackODell) ∧ Named(matsODell, nameODell) ∧ NotablePerson(matsODell)\nBritish(amyODell) ∧ Singer(amyODell) ∧ SongWriter(amyODell)\nEnglish(jackODell) ∧ ToyInventor(jackODell)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNotablePerson(jackODell)\n\"\"\""
    ]
  },
  {
    "id": 48,
    "question": "Odell is Amy Odell's surname.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSurname(nameODell) ∧ From(nameODell, oDellBedfordshire)\nMistakenSpellingOf(nameO'Dell, nameODell) ∧ (∃x∃y(Family(x) ∧ Named(x, nameO'Dell) ∧ (¬(x=y)) ∧ Family(y) ∧ Named(y, nameO'Dell))\nNamed(amyODell, nameODell) ∧ NotablePerson(amyODell) ∧ Named(jackODell, nameODell) ∧ NotablePerson(jackODell) ∧ Named(matsODell, nameODell) ∧ NotablePerson(matsODell)\nBritish(amyODell) ∧ Singer(amyODell) ∧ SongWriter(amyODell)\nEnglish(jackODell) ∧ ToyInventor(jackODell)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNamed(amyODell, nameODell)\n\"\"\""
    ]
  },
  {
    "id": 49,
    "question": "Amy Odell is an English toy inventor.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSurname(nameODell) ∧ From(nameODell, oDellBedfordshire)\nMistakenSpellingOf(nameO'Dell, nameODell) ∧ (∃x∃y(Family(x) ∧ Named(x, nameO'Dell) ∧ (¬(x=y)) ∧ Family(y) ∧ Named(y, nameO'Dell))\nNamed(amyODell, nameODell) ∧ NotablePerson(amyODell) ∧ Named(jackODell, nameODell) ∧ NotablePerson(jackODell) ∧ Named(matsODell, nameODell) ∧ NotablePerson(matsODell)\nBritish(amyODell) ∧ Singer(amyODell) ∧ SongWriter(amyODell)\nEnglish(jackODell) ∧ ToyInventor(jackODell)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEnglish(amyODell) ∧ ToyInventor(amyODell)\n\"\"\""
    ]
  },
  {
    "id": 50,
    "question": "Amy Odell is also Amy O'Dell.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSurname(nameODell) ∧ From(nameODell, oDellBedfordshire)\nMistakenSpellingOf(nameO'Dell, nameODell) ∧ (∃x∃y(Family(x) ∧ Named(x, nameO'Dell) ∧ (¬(x=y)) ∧ Family(y) ∧ Named(y, nameO'Dell))\nNamed(amyODell, nameODell) ∧ NotablePerson(amyODell) ∧ Named(jackODell, nameODell) ∧ NotablePerson(jackODell) ∧ Named(matsODell, nameODell) ∧ NotablePerson(matsODell)\nBritish(amyODell) ∧ Singer(amyODell) ∧ SongWriter(amyODell)\nEnglish(jackODell) ∧ ToyInventor(jackODell)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNamed(amyODell, nameODell) ∧ Named(amyODell, nameO'Dell)\n\"\"\""
    ]
  },
  {
    "id": 479,
    "question": "Mary gets from New Haven to New York City by train.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GoByTrain(x) → ¬LoseTime(x))\n∀x((GoByCar(x) ∧ Meet(x, trafficJam)) → LoseTime(x))\n∀x (LoseTime(x) → LateForWork(x))\nFromAndTo(newHaven, newYork) ∧ (GoByTrain(mary) ⊕ GoByCar(mary))\nLateForWork(mary)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFromAndTo(newHaven, newYork) ∧ GoByTrain(mary)\n\"\"\""
    ]
  },
  {
    "id": 480,
    "question": "Mary gets from New Haven to New York City by car.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GoByTrain(x) → ¬LoseTime(x))\n∀x((GoByCar(x) ∧ Meet(x, trafficJam)) → LoseTime(x))\n∀x (LoseTime(x) → LateForWork(x))\nFromAndTo(newHaven, newYork) ∧ (GoByTrain(mary) ⊕ GoByCar(mary))\nLateForWork(mary)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFromAndTo(newHaven, newYork) ∧ GoByCar(mary)\n\"\"\""
    ]
  },
  {
    "id": 481,
    "question": "Mary meets a traffic jam.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GoByTrain(x) → ¬LoseTime(x))\n∀x((GoByCar(x) ∧ Meet(x, trafficJam)) → LoseTime(x))\n∀x (LoseTime(x) → LateForWork(x))\nFromAndTo(newHaven, newYork) ∧ (GoByTrain(mary) ⊕ GoByCar(mary))\nLateForWork(mary)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMeet(mary, trafficJam)\n\"\"\""
    ]
  },
  {
    "id": 741,
    "question": "If a person is not hungry, the person is unhappy.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Hungry(x) → Uncomfortable(x))\n∀x (Uncomfortable(x) → ¬Happy(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (¬Hungry(x) → ¬Happy(x))\n\"\"\""
    ]
  },
  {
    "id": 764,
    "question": "Mary is a white-collar worker.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TippedEmployee(x) → ¬EntitledTo(x, federalMinimumWage))\n∀x (WhiteCollarWorker(x) → EntitledTo(x, federalMinimumWage))\n∀x (Lawyer(x) → WhiteCollarWorker(x))\n∀x (Advocate(x) → Lawyer(x))\n¬(Lawyer(mary) ⊕ TippedEmployee(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWhiteCollarWorker(mary)\n\"\"\""
    ]
  },
  {
    "id": 765,
    "question": "Mary is an advocate.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TippedEmployee(x) → ¬EntitledTo(x, federalMinimumWage))\n∀x (WhiteCollarWorker(x) → EntitledTo(x, federalMinimumWage))\n∀x (Lawyer(x) → WhiteCollarWorker(x))\n∀x (Advocate(x) → Lawyer(x))\n¬(Lawyer(mary) ⊕ TippedEmployee(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAdvocate(mary)\n\"\"\""
    ]
  },
  {
    "id": 766,
    "question": "Mary is not an advocate.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TippedEmployee(x) → ¬EntitledTo(x, federalMinimumWage))\n∀x (WhiteCollarWorker(x) → EntitledTo(x, federalMinimumWage))\n∀x (Lawyer(x) → WhiteCollarWorker(x))\n∀x (Advocate(x) → Lawyer(x))\n¬(Lawyer(mary) ⊕ TippedEmployee(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Advocate(mary)\n\"\"\""
    ]
  },
  {
    "id": 767,
    "question": "Mary is either an advocate or a tipped employee.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TippedEmployee(x) → ¬EntitledTo(x, federalMinimumWage))\n∀x (WhiteCollarWorker(x) → EntitledTo(x, federalMinimumWage))\n∀x (Lawyer(x) → WhiteCollarWorker(x))\n∀x (Advocate(x) → Lawyer(x))\n¬(Lawyer(mary) ⊕ TippedEmployee(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAdvocate(mary) ⊕ TippedEmployee(mary)\n\"\"\""
    ]
  },
  {
    "id": 768,
    "question": "If Mary is not both an advocate and is entitled to be paid the federal minimum wage by their employees, she is not a tipped employee.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TippedEmployee(x) → ¬EntitledTo(x, federalMinimumWage))\n∀x (WhiteCollarWorker(x) → EntitledTo(x, federalMinimumWage))\n∀x (Lawyer(x) → WhiteCollarWorker(x))\n∀x (Advocate(x) → Lawyer(x))\n¬(Lawyer(mary) ⊕ TippedEmployee(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(¬(Advocate(mary) ∧ EntitledTo(mary, federalMinimumWage))) → ¬TippedEmployee(mary)\n\"\"\""
    ]
  },
  {
    "id": 769,
    "question": "If Mary is either an advocate or a tipped employee, she is an advocate.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TippedEmployee(x) → ¬EntitledTo(x, federalMinimumWage))\n∀x (WhiteCollarWorker(x) → EntitledTo(x, federalMinimumWage))\n∀x (Lawyer(x) → WhiteCollarWorker(x))\n∀x (Advocate(x) → Lawyer(x))\n¬(Lawyer(mary) ⊕ TippedEmployee(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Advocate(mary) ⊕ TippedEmployee(mary)) → Advocate(mary)\n\"\"\""
    ]
  },
  {
    "id": 231,
    "question": "Asa Hoffmann is a New Yorker.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(asaHoffmann, newYorkCity)\nLiveIn(asaHoffmann, manhattan)\nChessPlayer(asaHoffmann)\n∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))\n∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))\n∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNewYorker(asaHoffmann)\n\"\"\""
    ]
  },
  {
    "id": 232,
    "question": "Asa Hoffmann is a grandmaster.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(asaHoffmann, newYorkCity)\nLiveIn(asaHoffmann, manhattan)\nChessPlayer(asaHoffmann)\n∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))\n∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))\n∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrandMaster(asaHoffmann)\n\"\"\""
    ]
  },
  {
    "id": 233,
    "question": "Asa Hoffmann does not live in New York.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(asaHoffmann, newYorkCity)\nLiveIn(asaHoffmann, manhattan)\nChessPlayer(asaHoffmann)\n∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))\n∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))\n∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LiveIn(asaHoffmann, newYorkCity)\n\"\"\""
    ]
  },
  {
    "id": 779,
    "question": "Philip got a Schengen visa.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Apply(x, schengenVisa) → Get(x, schengenVisa))\n∀x (Apply(x, schengenVisa) → Provide(x, financialGuarantees))\n∀x (Provide(x, financialGuarantees) → Request(x, documentsFromBank))\n∀x (Request(x, documentsFromBank) → ¬Close(x, bankAccount))\nClose(philip, bankAccount)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGet(philip, schengenVisa)\n\"\"\""
    ]
  },
  {
    "id": 780,
    "question": "Philip applied for a Schengen visa and got it.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Apply(x, schengenVisa) → Get(x, schengenVisa))\n∀x (Apply(x, schengenVisa) → Provide(x, financialGuarantees))\n∀x (Provide(x, financialGuarantees) → Request(x, documentsFromBank))\n∀x (Request(x, documentsFromBank) → ¬Close(x, bankAccount))\nClose(philip, bankAccount)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nApply(philip, schengenVisa) ∧ Get(philip, schengenVisa)\n\"\"\""
    ]
  },
  {
    "id": 781,
    "question": "If Philip did not request documents from the bank or get a Schengen visa, he didn’t apply for a Schengen visa.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Apply(x, schengenVisa) → Get(x, schengenVisa))\n∀x (Apply(x, schengenVisa) → Provide(x, financialGuarantees))\n∀x (Provide(x, financialGuarantees) → Request(x, documentsFromBank))\n∀x (Request(x, documentsFromBank) → ¬Close(x, bankAccount))\nClose(philip, bankAccount)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(¬Request(philip, documentsFromBank) ∧ ¬Get(x, schengenVisa)) → Apply(x, schengenVisa)\n\"\"\""
    ]
  },
  {
    "id": 740,
    "question": "No fears lead to terror.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Fear(x) ∧ Anxiety(y) ∧ LeadTo(x, y) ∧ ¬(x=y))\n∃x ∃y (Anxiety(x) ∧ Terror(y) ∧ LeadTo(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (Fear(x) → ¬(Terror(y) ∧ LeadTo(x, y)))\n\"\"\""
    ]
  },
  {
    "id": 594,
    "question": "Lake Erie has a major settlement.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GreatLake(x) → Superior(x) ⊕ Michigan(x) ⊕ Huron(x) ⊕ Erie(x) ⊕ Ontario(x))\n∀x (Erie (x) ∧ MajorSettlement(x) → In(x, nY) ∨ In(x, pA) ∨ In(x, oH) ∨ In(x, mI))\nStateOf(nY, uS) ∧ StateOf(pA, uS) ∧ StateOf(oH, uS) ∧ StateOf(mI, uS)\nStateOf(oN, canada)\n∃x (Huron(x) ∧ MajorSettlement(x) ∧ In(x, oN))\n∀x ∀y (StateOf(x, y) → In(x, y))\nIn(us, northAmerica)\n∀x (GreatLake(x) → FormAtEndOf(x, lastGlacialPeriod))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Erie(y) ∧ MajorSettlementOf(x, y))\n\"\"\""
    ]
  },
  {
    "id": 595,
    "question": "There is a great lake that did not form at the end of the Last Glacial Period.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GreatLake(x) → Superior(x) ⊕ Michigan(x) ⊕ Huron(x) ⊕ Erie(x) ⊕ Ontario(x))\n∀x (Erie (x) ∧ MajorSettlement(x) → In(x, nY) ∨ In(x, pA) ∨ In(x, oH) ∨ In(x, mI))\nStateOf(nY, uS) ∧ StateOf(pA, uS) ∧ StateOf(oH, uS) ∧ StateOf(mI, uS)\nStateOf(oN, canada)\n∃x (Huron(x) ∧ MajorSettlement(x) ∧ In(x, oN))\n∀x ∀y (StateOf(x, y) → In(x, y))\nIn(us, northAmerica)\n∀x (GreatLake(x) → FormAtEndOf(x, lastGlacialPeriod))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (GreatLake(x) ∧ ¬FormAtEndOf(x, lastGlacialPeriod))\n\"\"\""
    ]
  },
  {
    "id": 831,
    "question": "Stephen Curry is a professional basketball player.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Professional(x) ∧ Defender(x)) → (Professional(x) ∧ SoccerPlayer(x)))\n∀x ((Professional(x) ∧ SoccerPlayer(x)) → ¬(Professional(x) ∧ BasketballPlayer(x)))\n∀x ((Professional(x) ∧ CenterBack(x)) → (Professional(x) ∧ Defender(x))\n∀x (NBAPlayer(x) → (Professional(x) ∧ BasketballPlayer(x)))\nNBAPlayer(stephenCurry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProfessional(stephenCurry) ∧ BasketballPlayer(stephenCurry)\n\"\"\""
    ]
  },
  {
    "id": 832,
    "question": "Stephen Curry is a professional centerback.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Professional(x) ∧ Defender(x)) → (Professional(x) ∧ SoccerPlayer(x)))\n∀x ((Professional(x) ∧ SoccerPlayer(x)) → ¬(Professional(x) ∧ BasketballPlayer(x)))\n∀x ((Professional(x) ∧ CenterBack(x)) → (Professional(x) ∧ Defender(x))\n∀x (NBAPlayer(x) → (Professional(x) ∧ BasketballPlayer(x)))\nNBAPlayer(stephenCurry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProfessional(stephenCurry) ∧ CenterBack(stephenCurry)\n\"\"\""
    ]
  },
  {
    "id": 833,
    "question": "Stephen Curry is not a centerback.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Professional(x) ∧ Defender(x)) → (Professional(x) ∧ SoccerPlayer(x)))\n∀x ((Professional(x) ∧ SoccerPlayer(x)) → ¬(Professional(x) ∧ BasketballPlayer(x)))\n∀x ((Professional(x) ∧ CenterBack(x)) → (Professional(x) ∧ Defender(x))\n∀x (NBAPlayer(x) → (Professional(x) ∧ BasketballPlayer(x)))\nNBAPlayer(stephenCurry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Professional(stephenCurry) ∧ CenterBack(stephenCurry))\n\"\"\""
    ]
  },
  {
    "id": 89,
    "question": "Thomas Gilovich proposed naive cynicism.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProposed(justinKruger, naiveCynicism) ∧ ∃y (colleagueOfJustinKruger(y) ∧ Proposed(y, naiveCynicism))\nColleagues(thomasGilovich, justinKruger)\nPhilosophyOfMind(naiveCynicism)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProposed(thomasGilovich, naiveCynicism)\n\"\"\""
    ]
  },
  {
    "id": 90,
    "question": "Justin Kruger proposed a philosophy of mind.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProposed(justinKruger, naiveCynicism) ∧ ∃y (colleagueOfJustinKruger(y) ∧ Proposed(y, naiveCynicism))\nColleagues(thomasGilovich, justinKruger)\nPhilosophyOfMind(naiveCynicism)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Proposed(justinKruger, x) ∧ PhilosophyOfMind(x))\n\"\"\""
    ]
  },
  {
    "id": 91,
    "question": "Thomas Gilovich worked on philosophies of mind.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProposed(justinKruger, naiveCynicism) ∧ ∃y (colleagueOfJustinKruger(y) ∧ Proposed(y, naiveCynicism))\nColleagues(thomasGilovich, justinKruger)\nPhilosophyOfMind(naiveCynicism)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (WorkedOn(thomasGilovich, x) ∧ PhilosophyOfMind(x))\n\"\"\""
    ]
  },
  {
    "id": 382,
    "question": "At least two people who have won the Turing Award worked in artificial intelligence.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAwardedTo(turingAward, donaldKnuth) ∧ AwardedTo(turingAward, marvinMinsky) ∧ AwardedTo(turingAward, richardHamming) ∧ AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (¬(x=y) ∧ AwardedTo(turingAward, x) ∧ AwardedTo(turingAward, y) ∧ ContributedTo(x, artificialIntelligence)  ∧ ContributedTo(y, artificialIntelligence))\n\"\"\""
    ]
  },
  {
    "id": 383,
    "question": "At least two people who worked in artificial intelligence have won the Turing Award.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAwardedTo(turingAward, donaldKnuth) ∧ AwardedTo(turingAward, marvinMinsky) ∧ AwardedTo(turingAward, richardHamming) ∧ AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (¬(x=y) ∧ ContributedTo(x, artificialIntelligence) ∧ ContributedTo(x, artificialIntelligence) ∧ AwardedTo(turingAward, x) ∧ AwardedTo(turingAward, y))\n\"\"\""
    ]
  },
  {
    "id": 384,
    "question": "Only one person who won the Turing Award made significant contributions to the analysis of algorithms.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAwardedTo(turingAward, donaldKnuth) ∧ AwardedTo(turingAward, marvinMinsky) ∧ AwardedTo(turingAward, richardHamming) ∧ AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∀y ((AwardedTo(turingAward, x) ∧ AwardedTo(turingAward, y) ∧ ContributedTo(y, algorithms) ∧ ¬(x=y)) → ¬ContributedTo(y, algorithms))\n\"\"\""
    ]
  },
  {
    "id": 385,
    "question": "No Turing Award winners worked in the field of numerical methods.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAwardedTo(turingAward, donaldKnuth) ∧ AwardedTo(turingAward, marvinMinsky) ∧ AwardedTo(turingAward, richardHamming) ∧ AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (AwardedTo(turingAward, x) → ¬ContributedTo(x, numericalMethods))\n\"\"\""
    ]
  },
  {
    "id": 1219,
    "question": "2Sum is an easy Leetcode problem.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((LeetcodeProblems(x) ∧ Easy(x)) → ¬HaveAnACRateLowerThan(x, percent20))\n∀x ((LeetcodeProblems(x) ∧ RecommendedTo(x, novices)) → Easy(x))\n∀x (LeetcodeProblems(x) → HaveAnACRateLowerThan(x, percent20) ⊕ StarredByMoreThan(x, num1000))\n∀x ((LeetcodeProblems(x) ∧ Hard(x)) → StarredByMoreThan(x, num1000))\n∀x ((LeetcodeProblems(x) ∧ PublishedAfter(x, yr2022)) → (¬StarredByMoreThan(x, num1000)))\n¬(RecommendedTo(twosum, novices) ∧ Hard(twosum)) ∧ LeetcodeProblems(twosum)\n¬(StarredByMoreThan(foursum, num1000) ⊕ PublishedAfter(foursum, yr2022)) ∧ LeetcodeProblems(twosum)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLeetcodeProblems(twosum) ∧ Easy(twosum)\n\"\"\""
    ]
  },
  {
    "id": 1220,
    "question": "2Sum is not an easy Leetcode problem.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((LeetcodeProblems(x) ∧ Easy(x)) → ¬HaveAnACRateLowerThan(x, percent20))\n∀x ((LeetcodeProblems(x) ∧ RecommendedTo(x, novices)) → Easy(x))\n∀x (LeetcodeProblems(x) → HaveAnACRateLowerThan(x, percent20) ⊕ StarredByMoreThan(x, num1000))\n∀x ((LeetcodeProblems(x) ∧ Hard(x)) → StarredByMoreThan(x, num1000))\n∀x ((LeetcodeProblems(x) ∧ PublishedAfter(x, yr2022)) → (¬StarredByMoreThan(x, num1000)))\n¬(RecommendedTo(twosum, novices) ∧ Hard(twosum)) ∧ LeetcodeProblems(twosum)\n¬(StarredByMoreThan(foursum, num1000) ⊕ PublishedAfter(foursum, yr2022)) ∧ LeetcodeProblems(twosum)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(LeetcodeProblems(twosum) ∧ Easy(twosum))\n\"\"\""
    ]
  },
  {
    "id": 1221,
    "question": "4Sum is recommended to novices or is hard.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((LeetcodeProblems(x) ∧ Easy(x)) → ¬HaveAnACRateLowerThan(x, percent20))\n∀x ((LeetcodeProblems(x) ∧ RecommendedTo(x, novices)) → Easy(x))\n∀x (LeetcodeProblems(x) → HaveAnACRateLowerThan(x, percent20) ⊕ StarredByMoreThan(x, num1000))\n∀x ((LeetcodeProblems(x) ∧ Hard(x)) → StarredByMoreThan(x, num1000))\n∀x ((LeetcodeProblems(x) ∧ PublishedAfter(x, yr2022)) → (¬StarredByMoreThan(x, num1000)))\n¬(RecommendedTo(twosum, novices) ∧ Hard(twosum)) ∧ LeetcodeProblems(twosum)\n¬(StarredByMoreThan(foursum, num1000) ⊕ PublishedAfter(foursum, yr2022)) ∧ LeetcodeProblems(twosum)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRecommendedTo(foursum, novices) ∨ Hard(foursum)\n\"\"\""
    ]
  },
  {
    "id": 1222,
    "question": "4Sum is neither recommended to the novice nor a Leetcode problem that's hard.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((LeetcodeProblems(x) ∧ Easy(x)) → ¬HaveAnACRateLowerThan(x, percent20))\n∀x ((LeetcodeProblems(x) ∧ RecommendedTo(x, novices)) → Easy(x))\n∀x (LeetcodeProblems(x) → HaveAnACRateLowerThan(x, percent20) ⊕ StarredByMoreThan(x, num1000))\n∀x ((LeetcodeProblems(x) ∧ Hard(x)) → StarredByMoreThan(x, num1000))\n∀x ((LeetcodeProblems(x) ∧ PublishedAfter(x, yr2022)) → (¬StarredByMoreThan(x, num1000)))\n¬(RecommendedTo(twosum, novices) ∧ Hard(twosum)) ∧ LeetcodeProblems(twosum)\n¬(StarredByMoreThan(foursum, num1000) ⊕ PublishedAfter(foursum, yr2022)) ∧ LeetcodeProblems(twosum)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬RecommendedTo(foursum, novices) ∧ ¬Hard(foursum)\n\"\"\""
    ]
  },
  {
    "id": 318,
    "question": "Show Your Love wasn't written by a member of a boy band.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSong(showYourLove) ∧ RecordedBy(showYourLove, bToB4u) ∧ SouthKorean(bToB4u) ∧ BoyBand(bToB4u)\nExtendedPlay(inside) ∧ LeadSingleOf(showYourLove, inside)\nContains(showYourLove, hopefulMessage)\nMember(hyunsik, btob4u) ∧ Wrote(hyunsik, showYourLove)\nHave(showYourLove, musicVideo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (Wrote(x, showYourLove) → ¬(BoyBand(y) ∧ MemberOf(x, y)))\n\"\"\""
    ]
  },
  {
    "id": 319,
    "question": "A lead single of Inside contains a hopeful message.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSong(showYourLove) ∧ RecordedBy(showYourLove, bToB4u) ∧ SouthKorean(bToB4u) ∧ BoyBand(bToB4u)\nExtendedPlay(inside) ∧ LeadSingleOf(showYourLove, inside)\nContains(showYourLove, hopefulMessage)\nMember(hyunsik, btob4u) ∧ Wrote(hyunsik, showYourLove)\nHave(showYourLove, musicVideo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (LeadSingleOf(x, inside) ∧ Contains(x, hopefulMessage))\n\"\"\""
    ]
  },
  {
    "id": 320,
    "question": "Hyunsik is Korean.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSong(showYourLove) ∧ RecordedBy(showYourLove, bToB4u) ∧ SouthKorean(bToB4u) ∧ BoyBand(bToB4u)\nExtendedPlay(inside) ∧ LeadSingleOf(showYourLove, inside)\nContains(showYourLove, hopefulMessage)\nMember(hyunsik, btob4u) ∧ Wrote(hyunsik, showYourLove)\nHave(showYourLove, musicVideo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKorean(hyunsik)\n\"\"\""
    ]
  },
  {
    "id": 734,
    "question": "Some pieces of furniture are round.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Table(x) → Round(x))\n∃x ∃y (Furniture(x) ∧ Furniture(y) ∧ Table(x) ∧ Table(y) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Furniture(x) ∧ Furniture(y) ∧ Round(x) ∧ Round(y) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 711,
    "question": "Some people who have committed a crime are products of broken homes.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (JuvenileDelinquent(x) → Commited(x, crime))\n∃x ∃y (JuvenileDelinquent(x) ∧ JuvenileDelinquent(y) ∧ ProductOf(x, brokenHome) ∧ ProductOf(y, brokenHome) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Commited(x, crime) ∧ Commited(y, crime) ∧ ProductOf(x, brokenHome) ∧ ProductOf(y, brokenHome) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 1084,
    "question": "Multivoxel (pattern) analysis is a brain decoding.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MindReading(x) ∧ (BrainReading(x) ⊕ BrainDecoding(x)))\n∀x ((MindReading(x) ∧ BrainDecoding(x)) → ExtractingFrom(x, information, bOLDSignals))\n∀x ((MindReading(x) ∧ ExtractingFrom(x, information, bOLDSignals)) → Uses(x, statisticalPatternAnalysis))\n∀x (NovelWriting(x) → ¬Uses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) ∧ (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis)) →  (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ (¬BrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMindReading(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)\n\"\"\""
    ]
  },
  {
    "id": 1085,
    "question": "Multivoxel (pattern) analysis is the writing of a novel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MindReading(x) ∧ (BrainReading(x) ⊕ BrainDecoding(x)))\n∀x ((MindReading(x) ∧ BrainDecoding(x)) → ExtractingFrom(x, information, bOLDSignals))\n∀x ((MindReading(x) ∧ ExtractingFrom(x, information, bOLDSignals)) → Uses(x, statisticalPatternAnalysis))\n∀x (NovelWriting(x) → ¬Uses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) ∧ (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis)) →  (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ (¬BrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMindReading(multivoxelPatternAnalysis) ∧ NovelWriting(multivoxelPatternAnalysis)\n\"\"\""
    ]
  },
  {
    "id": 1086,
    "question": "Multivoxel (pattern) analysis is without statistical pattern analysis and writing a novel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MindReading(x) ∧ (BrainReading(x) ⊕ BrainDecoding(x)))\n∀x ((MindReading(x) ∧ BrainDecoding(x)) → ExtractingFrom(x, information, bOLDSignals))\n∀x ((MindReading(x) ∧ ExtractingFrom(x, information, bOLDSignals)) → Uses(x, statisticalPatternAnalysis))\n∀x (NovelWriting(x) → ¬Uses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) ∧ (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis)) →  (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ (¬BrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ NovelWriting(multivoxelPatternAnalysis))\n\"\"\""
    ]
  },
  {
    "id": 1087,
    "question": "Multivoxel (pattern) analysis is without statistical pattern analysis or writing a novel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MindReading(x) ∧ (BrainReading(x) ⊕ BrainDecoding(x)))\n∀x ((MindReading(x) ∧ BrainDecoding(x)) → ExtractingFrom(x, information, bOLDSignals))\n∀x ((MindReading(x) ∧ ExtractingFrom(x, information, bOLDSignals)) → Uses(x, statisticalPatternAnalysis))\n∀x (NovelWriting(x) → ¬Uses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) ∧ (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis)) →  (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ (¬BrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∨ NovelWriting(multivoxelPatternAnalysis))\n\"\"\""
    ]
  },
  {
    "id": 1088,
    "question": "Multivoxel (pattern) analysis is either without statistical pattern analysis or writing a novel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MindReading(x) ∧ (BrainReading(x) ⊕ BrainDecoding(x)))\n∀x ((MindReading(x) ∧ BrainDecoding(x)) → ExtractingFrom(x, information, bOLDSignals))\n∀x ((MindReading(x) ∧ ExtractingFrom(x, information, bOLDSignals)) → Uses(x, statisticalPatternAnalysis))\n∀x (NovelWriting(x) → ¬Uses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) ∧ (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis)) →  (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ (¬BrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ⊕ Writing(multivoxelPatternAnalysis, aNovel)\n\"\"\""
    ]
  },
  {
    "id": 1089,
    "question": "If multivoxel (pattern) analysis is writing a novel, then multivoxel (pattern) analysis is neither without statistical pattern analysis nor writing a novel.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MindReading(x) ∧ (BrainReading(x) ⊕ BrainDecoding(x)))\n∀x ((MindReading(x) ∧ BrainDecoding(x)) → ExtractingFrom(x, information, bOLDSignals))\n∀x ((MindReading(x) ∧ ExtractingFrom(x, information, bOLDSignals)) → Uses(x, statisticalPatternAnalysis))\n∀x (NovelWriting(x) → ¬Uses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) ∧ (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis)) →  (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ (¬BrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(MindReading(multivoxelPatternAnalysis) ∧ NovelWriting(multivoxelPatternAnalysis)) → (Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∨ ¬NovelWriting(multivoxelPatternAnalysis))\n\"\"\""
    ]
  },
  {
    "id": 605,
    "question": "Allison has room for broccoli.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RoomFor(x, dessert) → RoomFor(x, broccoli))\n∀x (AtLuisParty(x) → RoomFor(x, dessert))\n¬RoomFor(mauricia, broccoli)\nAtLuisParty(allison) ∧ FirstDinnerPartyFor(luisparty, allison) \nRoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)\nVegetable(broccoli) ∧ Vegetable(asparagus)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRoomFor(allison, broccoli)\n\"\"\""
    ]
  },
  {
    "id": 606,
    "question": "Mauricia is at Luis's dinner party.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RoomFor(x, dessert) → RoomFor(x, broccoli))\n∀x (AtLuisParty(x) → RoomFor(x, dessert))\n¬RoomFor(mauricia, broccoli)\nAtLuisParty(allison) ∧ FirstDinnerPartyFor(luisparty, allison) \nRoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)\nVegetable(broccoli) ∧ Vegetable(asparagus)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAtLuisParty(mauricia)\n\"\"\""
    ]
  },
  {
    "id": 607,
    "question": "Gustav has room for dessert.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RoomFor(x, dessert) → RoomFor(x, broccoli))\n∀x (AtLuisParty(x) → RoomFor(x, dessert))\n¬RoomFor(mauricia, broccoli)\nAtLuisParty(allison) ∧ FirstDinnerPartyFor(luisparty, allison) \nRoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)\nVegetable(broccoli) ∧ Vegetable(asparagus)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRoomFor(gustave, dessert)\n\"\"\""
    ]
  },
  {
    "id": 123,
    "question": "Some rock band has a lead singer who is also a songwriter.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(imagineDragon) ∧ RockBand(imagineDragon)\nLeadSinger(imagineDragon, dan)\nSongWriter(dan)\n∀x ∀y (LeadSinger(x, y) → Singer(y))\n∀x (Singer(x) → Musician(x))\nPopularSingle(imagineDragon, demons)\n∃x ∃y (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x)) ∧ (¬(x=y)) ∧ (PopularSingle(imagineDragon, y) ∧ BillboardHot100(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (RockBand(x) ∧ LeadSinger(x, y) ∧ SongWriter(y))\n\"\"\""
    ]
  },
  {
    "id": 124,
    "question": "Dan is not a musician.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(imagineDragon) ∧ RockBand(imagineDragon)\nLeadSinger(imagineDragon, dan)\nSongWriter(dan)\n∀x ∀y (LeadSinger(x, y) → Singer(y))\n∀x (Singer(x) → Musician(x))\nPopularSingle(imagineDragon, demons)\n∃x ∃y (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x)) ∧ (¬(x=y)) ∧ (PopularSingle(imagineDragon, y) ∧ BillboardHot100(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Musician(dan)\n\"\"\""
    ]
  },
  {
    "id": 125,
    "question": "Demons has been on Billboard Hot 100.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(imagineDragon) ∧ RockBand(imagineDragon)\nLeadSinger(imagineDragon, dan)\nSongWriter(dan)\n∀x ∀y (LeadSinger(x, y) → Singer(y))\n∀x (Singer(x) → Musician(x))\nPopularSingle(imagineDragon, demons)\n∃x ∃y (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x)) ∧ (¬(x=y)) ∧ (PopularSingle(imagineDragon, y) ∧ BillboardHot100(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBillboardHot100(demons)\n\"\"\""
    ]
  },
  {
    "id": 1310,
    "question": "The theistic God is a sophist.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Philosopher(x) → Reason(x))\n∃x (Sophist(x) ∧ Reason(x))\n∀x (Reason(x) → CanDistinguishFrom(x, truth, falsehood))\n∀x (CanDistinguishFrom(x, truth, falsehood) → ¬MorallyPerfect(x))\nMorallyPerfect(theisticGod)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSophist(theisticGod)\n\"\"\""
    ]
  },
  {
    "id": 1311,
    "question": "The theistic God is a sophist and a philosopher.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Philosopher(x) → Reason(x))\n∃x (Sophist(x) ∧ Reason(x))\n∀x (Reason(x) → CanDistinguishFrom(x, truth, falsehood))\n∀x (CanDistinguishFrom(x, truth, falsehood) → ¬MorallyPerfect(x))\nMorallyPerfect(theisticGod)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSophist(theisticGod) ∧ Philosopher(theisticGod)\n\"\"\""
    ]
  },
  {
    "id": 1312,
    "question": "if the theistic God is a philosopher, then he is not a sophist.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Philosopher(x) → Reason(x))\n∃x (Sophist(x) ∧ Reason(x))\n∀x (Reason(x) → CanDistinguishFrom(x, truth, falsehood))\n∀x (CanDistinguishFrom(x, truth, falsehood) → ¬MorallyPerfect(x))\nMorallyPerfect(theisticGod)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPhilosopher(theisticGod) → ¬Sophist(theisticGod)\n\"\"\""
    ]
  },
  {
    "id": 458,
    "question": "Noah needs to pay the water bill.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)\n∃x (Apartment(x) ∧ Cover(x, water) ∧ Cover(x, electricity))\n∀x (Apartment(x) ∧ LiveIn(susan, x) ∧ Cover(x, water) ∧ Cover(x, electricity) ∧ Cover(x, gas) ∧ Cover(x, heating))\n∀x (Apartment(x) ∧ LiveIn(ava, x) ∧ ¬Cover(x, water) ∧ ¬Cover(x, electricity) ∧ ¬Cover(x, gas) ∧ ¬Cover(x, heating))\n∀x (Apartment(x) ∧ LiveIn(noah, x) ∧ ¬Cover(x, heating))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Apartment(x) ∧ LiveIn(noah, x) ∧ ¬Cover(x, water))\n\"\"\""
    ]
  },
  {
    "id": 459,
    "question": "Noah and Ava both need to pay the heating bill.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)\n∃x (Apartment(x) ∧ Cover(x, water) ∧ Cover(x, electricity))\n∀x (Apartment(x) ∧ LiveIn(susan, x) ∧ Cover(x, water) ∧ Cover(x, electricity) ∧ Cover(x, gas) ∧ Cover(x, heating))\n∀x (Apartment(x) ∧ LiveIn(ava, x) ∧ ¬Cover(x, water) ∧ ¬Cover(x, electricity) ∧ ¬Cover(x, gas) ∧ ¬Cover(x, heating))\n∀x (Apartment(x) ∧ LiveIn(noah, x) ∧ ¬Cover(x, heating))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Cover(noah, heating) ∧ ¬Cover(ava, heating)\n\"\"\""
    ]
  },
  {
    "id": 460,
    "question": "Susan does not need to pay the water bill.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)\n∃x (Apartment(x) ∧ Cover(x, water) ∧ Cover(x, electricity))\n∀x (Apartment(x) ∧ LiveIn(susan, x) ∧ Cover(x, water) ∧ Cover(x, electricity) ∧ Cover(x, gas) ∧ Cover(x, heating))\n∀x (Apartment(x) ∧ LiveIn(ava, x) ∧ ¬Cover(x, water) ∧ ¬Cover(x, electricity) ∧ ¬Cover(x, gas) ∧ ¬Cover(x, heating))\n∀x (Apartment(x) ∧ LiveIn(noah, x) ∧ ¬Cover(x, heating))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Apartment(x) ∧ LiveIn(susan, x) ∧ Cover(x, water))\n\"\"\""
    ]
  },
  {
    "id": 799,
    "question": "The fabric bundle is perfect.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Clothes(x) → Product(x))\n∀x (Product(x) → ¬Perfect(x))\n∀x (Dress(x) → Clothes(x))\n∀x (Skirt(x) → Dress(x))\nClothes(fabricBundle) → Perfect(fabricBundle) ∧ Dress(fabricBundle)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPerfect(fabricbundle)\n\"\"\""
    ]
  },
  {
    "id": 800,
    "question": "The fabric bundle is a skirt.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Clothes(x) → Product(x))\n∀x (Product(x) → ¬Perfect(x))\n∀x (Dress(x) → Clothes(x))\n∀x (Skirt(x) → Dress(x))\nClothes(fabricBundle) → Perfect(fabricBundle) ∧ Dress(fabricBundle)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSkirt(fabricbundle)\n\"\"\""
    ]
  },
  {
    "id": 801,
    "question": "The fabric bundle is not a skirt.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Clothes(x) → Product(x))\n∀x (Product(x) → ¬Perfect(x))\n∀x (Dress(x) → Clothes(x))\n∀x (Skirt(x) → Dress(x))\nClothes(fabricBundle) → Perfect(fabricBundle) ∧ Dress(fabricBundle)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Skirt(fabricbundle)\n\"\"\""
    ]
  },
  {
    "id": 168,
    "question": "Leo is an animal.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Pet(x) → Animal(x))\n∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))\n∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))\n∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))\n∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))\nOwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAnimal(leo)\n\"\"\""
    ]
  },
  {
    "id": 169,
    "question": "Charlie does not like Leo and does not care for Leo.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Pet(x) → Animal(x))\n∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))\n∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))\n∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))\n∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))\nOwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)\n\"\"\""
    ]
  },
  {
    "id": 170,
    "question": "Dogs are not always naughty.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Pet(x) → Animal(x))\n∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))\n∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))\n∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))\n∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))\nOwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Dog(x) → ¬Naughty(x))\n\"\"\""
    ]
  },
  {
    "id": 723,
    "question": "All scares are fun.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Surprise(x) → (Fun(x) ⊕ Dreadful(x)))\n∀x (Scare(x) → Surprise(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Scare(x) → Fun(x))\n\"\"\""
    ]
  },
  {
    "id": 66,
    "question": "The Three-Body Problem won the Hugo Award.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Book(x) ∧ WrittenBy(x, cixinLiu)) → ∃y(MoreThan(y, oneMillion) ∧ Sold(x,y)))\n∃x (Won(x, hugoAward) ∧ Book(x) ∧ WrittenBy(x, cixinLiu))\n∀x ((Book(x) ∧ AboutFuture(x)) → FowardLooking(x))\nBook(threeBodyProblem) ∧ ∃y(MoreThan(y, oneMillion) ∧ Sold(threeBodyProblem,y))\nAboutFuture(threeBodyProblem)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWon(threeBodyProblem, hugoAward)\n\"\"\""
    ]
  },
  {
    "id": 67,
    "question": "The Three-Body Problem is forward-looking.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Book(x) ∧ WrittenBy(x, cixinLiu)) → ∃y(MoreThan(y, oneMillion) ∧ Sold(x,y)))\n∃x (Won(x, hugoAward) ∧ Book(x) ∧ WrittenBy(x, cixinLiu))\n∀x ((Book(x) ∧ AboutFuture(x)) → FowardLooking(x))\nBook(threeBodyProblem) ∧ ∃y(MoreThan(y, oneMillion) ∧ Sold(threeBodyProblem,y))\nAboutFuture(threeBodyProblem)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAboutFuture(threeBodyProblem)\n\"\"\""
    ]
  },
  {
    "id": 68,
    "question": "The Three-Body Problem was written by Cixin Liu.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Book(x) ∧ WrittenBy(x, cixinLiu)) → ∃y(MoreThan(y, oneMillion) ∧ Sold(x,y)))\n∃x (Won(x, hugoAward) ∧ Book(x) ∧ WrittenBy(x, cixinLiu))\n∀x ((Book(x) ∧ AboutFuture(x)) → FowardLooking(x))\nBook(threeBodyProblem) ∧ ∃y(MoreThan(y, oneMillion) ∧ Sold(threeBodyProblem,y))\nAboutFuture(threeBodyProblem)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWrittenBy(threeBodyProblem, cixinLiu)\n\"\"\""
    ]
  },
  {
    "id": 1184,
    "question": "James is a late night person.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (LateNightPerson(x) ∧ EarlyMorningPerson(x))\n∀x (EarlyMorningPerson(x) → Have(x, earlyMorningHabit))\n∀x (Have(x, earlyMorningHabit) → GetUpEarly(x))\n∀x (GetUpEarly(x) → CatchTheSunrise(x))\n¬CatchTheSunrise(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLateNightPerson(james)\n\"\"\""
    ]
  },
  {
    "id": 1185,
    "question": "James is a late night person and an early-morning person.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (LateNightPerson(x) ∧ EarlyMorningPerson(x))\n∀x (EarlyMorningPerson(x) → Have(x, earlyMorningHabit))\n∀x (Have(x, earlyMorningHabit) → GetUpEarly(x))\n∀x (GetUpEarly(x) → CatchTheSunrise(x))\n¬CatchTheSunrise(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLateNightPerson(james) ∧ EarlyMorningPerson(james)\n\"\"\""
    ]
  },
  {
    "id": 1186,
    "question": "If James is an early-morning person, then he is a late night person.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (LateNightPerson(x) ∧ EarlyMorningPerson(x))\n∀x (EarlyMorningPerson(x) → Have(x, earlyMorningHabit))\n∀x (Have(x, earlyMorningHabit) → GetUpEarly(x))\n∀x (GetUpEarly(x) → CatchTheSunrise(x))\n¬CatchTheSunrise(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEarlyMorningPerson(james) → LateNightPerson(james)\n\"\"\""
    ]
  },
  {
    "id": 716,
    "question": "Something went wrong.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Dog(x) → ¬OnRoof(x)))\n∀x ∃y ((Dog(x) ∧ OnRoof(x)) → GoWrong(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (GoWrong(x))\n\"\"\""
    ]
  },
  {
    "id": 41,
    "question": "Elephantopus is found in Australia and Southern Asia.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Elephantopus(x) → (Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily)))\n∃x ∃y ∃z(Elephantopus(x) ∧ In(x,africa) ∧ (¬(x=y)) ∧ Elephantopus(y) ∧ In(y, southernasia) ∧ (¬(x=z)) ∧ (¬(y=z)) ∧ Elephantopus(z) ∧ In(z, australia))\n∃x ∃y (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates) ∧ (¬(x=y)) ∧ Elephantopus(y) ∧ NativeTo(y, southeasternunitedstates))\n∀x (ElephantopusScaber(x) → TraditionalMedicine(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x∃y(Elephantopus(x) ∧ In(x,africa) ∧ Elephantopus(y) ∧ In(y,africa))\n\"\"\""
    ]
  },
  {
    "id": 42,
    "question": "No Elephantopus is native to the southeastern United States.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Elephantopus(x) → (Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily)))\n∃x ∃y ∃z(Elephantopus(x) ∧ In(x,africa) ∧ (¬(x=y)) ∧ Elephantopus(y) ∧ In(y, southernasia) ∧ (¬(x=z)) ∧ (¬(y=z)) ∧ Elephantopus(z) ∧ In(z, australia))\n∃x ∃y (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates) ∧ (¬(x=y)) ∧ Elephantopus(y) ∧ NativeTo(y, southeasternunitedstates))\n∀x (ElephantopusScaber(x) → TraditionalMedicine(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Elephantopus(x) → ¬NativeTo(x, southeasternunitedstates))\n\"\"\""
    ]
  },
  {
    "id": 43,
    "question": "Elephantopus is a traditional medicine.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Elephantopus(x) → (Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily)))\n∃x ∃y ∃z(Elephantopus(x) ∧ In(x,africa) ∧ (¬(x=y)) ∧ Elephantopus(y) ∧ In(y, southernasia) ∧ (¬(x=z)) ∧ (¬(y=z)) ∧ Elephantopus(z) ∧ In(z, australia))\n∃x ∃y (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates) ∧ (¬(x=y)) ∧ Elephantopus(y) ∧ NativeTo(y, southeasternunitedstates))\n∀x (ElephantopusScaber(x) → TraditionalMedicine(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Elephantopus(x) → TraditionalMedicine(x))\n\"\"\""
    ]
  },
  {
    "id": 1231,
    "question": "Harkness is a Yale dormitory.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))\n∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))\n∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))\n∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))\n∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))\nYaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nYaleDormitory(harkness)\n\"\"\""
    ]
  },
  {
    "id": 1232,
    "question": "Harkness is not a Yale dormitory.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))\n∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))\n∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))\n∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))\n∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))\nYaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬YaleDormitory(harkness)\n\"\"\""
    ]
  },
  {
    "id": 1233,
    "question": "Harkness is established before 1701.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))\n∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))\n∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))\n∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))\n∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))\nYaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃y(Before(y, year1701) ∧ Established(x, y))\n\"\"\""
    ]
  },
  {
    "id": 1234,
    "question": "Harkness is not established before 1701.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))\n∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))\n∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))\n∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))\n∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))\nYaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃y(Before(y, year1701) ∧ Established(x, y))\n\"\"\""
    ]
  },
  {
    "id": 789,
    "question": "The LaLaurie House is a skyscraper.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InUrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → InUrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSkyscraper(laLaurieHouse)\n\"\"\""
    ]
  },
  {
    "id": 790,
    "question": "The LaLaurie House is not a skyscraper.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InUrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → InUrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Skyscraper(laLaurieHouse)\n\"\"\""
    ]
  },
  {
    "id": 791,
    "question": "The LaLaurie House is a terrifying building on Halloween.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InUrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → InUrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\""
    ]
  },
  {
    "id": 792,
    "question": "The LaLaurie House is either a skyscraper or a mansion house.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InUrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → InUrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSkyscraper(laLaurieHouse) ⊕ MansionHouse(laLaurieHouse)\n\"\"\""
    ]
  },
  {
    "id": 793,
    "question": "The LaLaurie House is either a skyscraper or in an urban area.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InUrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → InUrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSkyscraper(laLaurieHouse) ⊕ UrbanArea(laLaurieHouse)\n\"\"\""
    ]
  },
  {
    "id": 794,
    "question": "The LaLaurie House is either a skyscraper or a creepy haunted house.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InUrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → InUrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSkyscraper(laLaurieHouse) ⊕ CreepyHauntedHouse(laLaurieHouse)\n\"\"\""
    ]
  },
  {
    "id": 795,
    "question": "If the LaLaurie House is not a mansion or not in an urban area, then it is either a skyscraper or in an urban area.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InUrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → InUrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(MansionHouse(laLaurieHouse) ∧ InUrbanArea(laLaurieHouse)) → (Skyscraper(laLaurieHouse) ⊕ InUrbanArea(laLaurieHouse))\n\"\"\""
    ]
  },
  {
    "id": 796,
    "question": "If the LaLaurie House is either a skyscraper or a mansion house, then it is in an urban area.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InUrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → InUrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSkyscraper(laLaurieHouse) ⊕ MansionHouse(laLaurieHouse) → InUrbanArea(laLaurieHouse)\n\"\"\""
    ]
  },
  {
    "id": 797,
    "question": "If the LaLaurie House is either a skyscraper or a mansion house, then it is neither a creepy haunted house nor a terrifying building on Halloween.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InUrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → InUrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSkyscraper(laLaurieHouse) ⊕ MansionHouse(laLaurieHouse) → ¬(CreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse))\n\"\"\""
    ]
  },
  {
    "id": 798,
    "question": "If the LaLaurie House is either a skyscraper or a creepy haunted house, then it is not a mansion house.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InUrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → InUrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSkyscraper(laLaurieHouse) ⊕ CreepyHauntedHouse(laLaurieHouse) → ¬MansionHouse(laLaurieHouse)\n\"\"\""
    ]
  },
  {
    "id": 330,
    "question": "There is a nature reserve in Vietnam.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)\n∀x ((NationalPark(x) ∧ Locatedin(x, vietnam)) → NatureReserve(x))\n∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))\n∀x ((NationalPark(x) ∧ Locatedin(x, vietnam)) → (Mangedby(x, ministryofAgriculture) ⊕ Managedby(x, peoplesCommittee)))\n¬Mangedby(phuocBinh, ministryofAgriculture)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (NatureReserve(x) ∧ LocatedIn(x, vietnam))\n\"\"\""
    ]
  },
  {
    "id": 331,
    "question": "Phuoc Binh is a UNESCO Heritage Site.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)\n∀x ((NationalPark(x) ∧ Locatedin(x, vietnam)) → NatureReserve(x))\n∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))\n∀x ((NationalPark(x) ∧ Locatedin(x, vietnam)) → (Mangedby(x, ministryofAgriculture) ⊕ Managedby(x, peoplesCommittee)))\n¬Mangedby(phuocBinh, ministryofAgriculture)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nUNESCOWorldHeritageSite(phuocBinh))\n\"\"\""
    ]
  },
  {
    "id": 332,
    "question": "Phuoc Binh is managed by the People's Committee.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)\n∀x ((NationalPark(x) ∧ Locatedin(x, vietnam)) → NatureReserve(x))\n∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))\n∀x ((NationalPark(x) ∧ Locatedin(x, vietnam)) → (Mangedby(x, ministryofAgriculture) ⊕ Managedby(x, peoplesCommittee)))\n¬Mangedby(phuocBinh, ministryofAgriculture)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMangedby(phuocBinh, peoplesCommittee)\n\"\"\""
    ]
  },
  {
    "id": 402,
    "question": "No coursing is banned.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GreyhoundRacing(x) → ∃y (CompetitiveSport(x) ∧ Greyhound(y) ∧ BetOn(spectators, y, x)))\n∀x (GreyhoundRacing(x) → Coursing(x))\n∃x ∃y (CompetitiveSport(x) ∧ BetOn(spectators, y, x) ∧ Banned(x))\n∀x ∃y ∃z (Coursing(x) → Hare(y) ∧ BetOn(spectators, y, x) ∧ GreyHound(z) ∧ PursuedBy(y, z))\n∃x ∀y (Hare(x) ∧ BetOn(spectators, x, y) → SmallGame(y))\n∀x ∃y (CompetitiveSport(x) ∧ SmallGame(y) ∧ BetOn(spectators, y, x) → Banned(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Coursing(x) ∧ ¬Banned(x))\n\"\"\""
    ]
  },
  {
    "id": 403,
    "question": "Greyhound racing is a competitive sport.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GreyhoundRacing(x) → ∃y (CompetitiveSport(x) ∧ Greyhound(y) ∧ BetOn(spectators, y, x)))\n∀x (GreyhoundRacing(x) → Coursing(x))\n∃x ∃y (CompetitiveSport(x) ∧ BetOn(spectators, y, x) ∧ Banned(x))\n∀x ∃y ∃z (Coursing(x) → Hare(y) ∧ BetOn(spectators, y, x) ∧ GreyHound(z) ∧ PursuedBy(y, z))\n∃x ∀y (Hare(x) ∧ BetOn(spectators, x, y) → SmallGame(y))\n∀x ∃y (CompetitiveSport(x) ∧ SmallGame(y) ∧ BetOn(spectators, y, x) → Banned(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (GreyhoundRacing(x) → CompetitiveSport(x))\n\"\"\""
    ]
  },
  {
    "id": 544,
    "question": "Henry will be ejected from the rest of the game.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoccerPlayer(x) ∧ Receive(x, twoYellowCard) → EjectFromRestOfGame(x))\n∀x (SoccerPlayer(x) ∧ Receive(x, oneRedCard)) → EjectFromRestOfGame(x))   \nSoccerPlayer(henry)\nReceive(henry, oneYellowCard) ∧ Receive(x, oneRedCard)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEjectFromRestOfGame(henry)\n\"\"\""
    ]
  },
  {
    "id": 545,
    "question": "Henry will not be ejected from the rest of the game.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoccerPlayer(x) ∧ Receive(x, twoYellowCard) → EjectFromRestOfGame(x))\n∀x (SoccerPlayer(x) ∧ Receive(x, oneRedCard)) → EjectFromRestOfGame(x))   \nSoccerPlayer(henry)\nReceive(henry, oneYellowCard) ∧ Receive(x, oneRedCard)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬EjectFromRestOfGame(henry)\n\"\"\""
    ]
  },
  {
    "id": 731,
    "question": "Some living things are plants.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tree(x) → Plant(x))\n∃x ∃y (Living(x) ∧ Living(y) ∧ Tree(x) ∧ Tree(y) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Living(x) ∧ Living(y) ∧ Plant(x) ∧ Plant(y) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 44,
    "question": "Dagfinn Aarskog is a notable person.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n\nGivenName(nameDagfinn) ∧ Named(dagfinnAarskog, nameDagfinn) ∧ NotablePerson(dagfinnAarskog) ∧ Named(dagfinnBakke, nameDagfinn) ∧ NotablePerson(dagfinnBakke)  ∧ Named(dagfinnDahl, nameDagfinn) ∧ NotablePerson(dagfinnDahl)\nNorwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)\nNorwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNotablePerson(dagfinnAarskog)\n\"\"\""
    ]
  },
  {
    "id": 45,
    "question": "Dagfinn is Dagfinn Aarskog's given name.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n\nGivenName(nameDagfinn) ∧ Named(dagfinnAarskog, nameDagfinn) ∧ NotablePerson(dagfinnAarskog) ∧ Named(dagfinnBakke, nameDagfinn) ∧ NotablePerson(dagfinnBakke)  ∧ Named(dagfinnDahl, nameDagfinn) ∧ NotablePerson(dagfinnDahl)\nNorwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)\nNorwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNamed(dagfinnAarskog, nameDagfinn)\n\"\"\""
    ]
  },
  {
    "id": 46,
    "question": "Dagfinn Dahl is a Norwegian physician.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n\nGivenName(nameDagfinn) ∧ Named(dagfinnAarskog, nameDagfinn) ∧ NotablePerson(dagfinnAarskog) ∧ Named(dagfinnBakke, nameDagfinn) ∧ NotablePerson(dagfinnBakke)  ∧ Named(dagfinnDahl, nameDagfinn) ∧ NotablePerson(dagfinnDahl)\nNorwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)\nNorwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNorwegian(dagfinnDahl) ∧ Physician(dagfinnDahl)\n\"\"\""
    ]
  },
  {
    "id": 744,
    "question": "If a movie is popular, then it attracts attention.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Movie(x) ∧ Popular(x) → ∃y ∃z (Person(y) ∧ EnjoyWatching(y, x) ∧ Person(z) ∧ EnjoyWatching(z, x) ∧ ¬(y=z)))\n∀x (∃y ∃z (Person(y) ∧ EnjoyWatching(y, x) ∧ Person(z) ∧ EnjoyWatching(z, x)) → Attract(x, attention))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Movie(x) ∧ Popular(x) → Attract(x, attention))\n\"\"\""
    ]
  },
  {
    "id": 682,
    "question": "GPT-3 is popular.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n¬(∃x (LanguageModel(x) ∧ Giant(x) ∧ ¬GoodPerformance(x)))\n∀x ∃y ∃z (LanguageModel(x) ∧ GoodPerformance(x) → ¬(x=y) ∧ Researcher(y) ∧ UsedBy(x, y) ∧ Researcher(z) ∧ UsedBy(x, z))\n∀x ∃y ∃z (LanguageModel(x) ∧ ¬(x=y) ∧ Researcher(y) ∧ UsedBy(x, y) ∧ Researcher(z) ∧ UsedBy(x, z) → Popular(x))\n(LanguageModel(bert) ∧ Giant(bert)) → (LanguageModel(gpt-3) ∧ Giant(gpt-3)).\nLanguageModel(bert) ∧ Giant(bert)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPopular(gpt-3)\n\"\"\""
    ]
  },
  {
    "id": 333,
    "question": "At least one Scottish team has joined the Scottish Premiership.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(stJohnstone) ∧ Team(stJohnstone)\nPartOf(stJohnstone, scottishPremiership) ∧ League(scottishPremiership)\n∀x ∀y (Team(x) ∧ League(y) ∧ PartOf(x, y) → Joined(x, y))\n¬(misnk=stJohnstone)\n∀x ∀y (¬(x=y) → WonAgainst(x, y) ⊕ WonAgainst(y, x))\nWonAgainst(minsk, stJohnstone)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Scottish(x) ∧ Joined(x, scottishPremiership))\n\"\"\""
    ]
  },
  {
    "id": 334,
    "question": "St Johnstone won against Minsk.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(stJohnstone) ∧ Team(stJohnstone)\nPartOf(stJohnstone, scottishPremiership) ∧ League(scottishPremiership)\n∀x ∀y (Team(x) ∧ League(y) ∧ PartOf(x, y) → Joined(x, y))\n¬(misnk=stJohnstone)\n∀x ∀y (¬(x=y) → WonAgainst(x, y) ⊕ WonAgainst(y, x))\nWonAgainst(minsk, stJohnstone)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWonGame(stJohnstone, minsk)\n\"\"\""
    ]
  },
  {
    "id": 335,
    "question": "Minsk joined the Scottish Premiership.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(stJohnstone) ∧ Team(stJohnstone)\nPartOf(stJohnstone, scottishPremiership) ∧ League(scottishPremiership)\n∀x ∀y (Team(x) ∧ League(y) ∧ PartOf(x, y) → Joined(x, y))\n¬(misnk=stJohnstone)\n∀x ∀y (¬(x=y) → WonAgainst(x, y) ⊕ WonAgainst(y, x))\nWonAgainst(minsk, stJohnstone)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nJoined(minsk, scottishPremiership))\n\"\"\""
    ]
  },
  {
    "id": 1227,
    "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plane(x) ∧ Boeing737(x) → (¬∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y)))\n∀x (Plane(x) ∧ AcquiredBy(x, delta) → Boeing737(x))\n∀x (Plane(x) → ((∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y))) ⊕ (∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y))))\n∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ScheduledFor(x, shortdistanceflight))\n∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ∃z(Before(z, yr2010) ∧ Produced(x, z))\n(Boeing737(jake32) ∧ Plane(jake32)) ⊕ (AcquiredByDeltaInThisBatch(jake32) ∧ Plane(jake32))\n¬((Boeing737(t10) ∧ Plane(t10)) ⊕ (AcquiredByDeltaInThisBatch(t10) ∧ Plane(t10)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∧ ScheduledFor(jake32, shortdistanceflight))\n\"\"\""
    ]
  },
  {
    "id": 1228,
    "question": "Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plane(x) ∧ Boeing737(x) → (¬∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y)))\n∀x (Plane(x) ∧ AcquiredBy(x, delta) → Boeing737(x))\n∀x (Plane(x) → ((∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y))) ⊕ (∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y))))\n∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ScheduledFor(x, shortdistanceflight))\n∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ∃z(Before(z, yr2010) ∧ Produced(x, z))\n(Boeing737(jake32) ∧ Plane(jake32)) ⊕ (AcquiredByDeltaInThisBatch(jake32) ∧ Plane(jake32))\n¬((Boeing737(t10) ∧ Plane(t10)) ⊕ (AcquiredByDeltaInThisBatch(t10) ∧ Plane(t10)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∧ ScheduledFor(jake32, shortdistanceflight)))\n\"\"\""
    ]
  },
  {
    "id": 1229,
    "question": "Jake32 is produced before 2010 or scheduled for a short-distance flight.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plane(x) ∧ Boeing737(x) → (¬∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y)))\n∀x (Plane(x) ∧ AcquiredBy(x, delta) → Boeing737(x))\n∀x (Plane(x) → ((∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y))) ⊕ (∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y))))\n∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ScheduledFor(x, shortdistanceflight))\n∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ∃z(Before(z, yr2010) ∧ Produced(x, z))\n(Boeing737(jake32) ∧ Plane(jake32)) ⊕ (AcquiredByDeltaInThisBatch(jake32) ∧ Plane(jake32))\n¬((Boeing737(t10) ∧ Plane(t10)) ⊕ (AcquiredByDeltaInThisBatch(t10) ∧ Plane(t10)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∨ ScheduledFor(jake32, shortdistanceflight))\n\"\"\""
    ]
  },
  {
    "id": 1230,
    "question": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plane(x) ∧ Boeing737(x) → (¬∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y)))\n∀x (Plane(x) ∧ AcquiredBy(x, delta) → Boeing737(x))\n∀x (Plane(x) → ((∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y))) ⊕ (∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y))))\n∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ScheduledFor(x, shortdistanceflight))\n∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ∃z(Before(z, yr2010) ∧ Produced(x, z))\n(Boeing737(jake32) ∧ Plane(jake32)) ⊕ (AcquiredByDeltaInThisBatch(jake32) ∧ Plane(jake32))\n¬((Boeing737(t10) ∧ Plane(t10)) ⊕ (AcquiredByDeltaInThisBatch(t10) ∧ Plane(t10)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∧ ¬ScheduledFor(jake32, shortdistanceflight))\n\"\"\""
    ]
  },
  {
    "id": 555,
    "question": "The SAT test is owned by the College Board and other third parties.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOwnedBy(sAT, collegeBoard) ∧ DevelopedBy(sAT, collegeBoard) ∧ ¬(∃y (¬(y=collegeBoard) ∧ (OwnedBy(sAT, y) ∨ DevelopedBy(sAT, y)))\nIntendedToAssess(sAT, studentsReadinessForCollege)\nOriginallyDesignedToBeAlignedWith(sAT, highSchoolCurricula)\nAdjustmentMadeIn(sAT, 2016, toAlignWithHighSchoolCurriculum)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOwnedBy(sAT, collegeBoard) ∧ OwnedBy(sAT, otherThirdParties)\n\"\"\""
    ]
  },
  {
    "id": 556,
    "question": "The SAT test assesses students' math skills.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOwnedBy(sAT, collegeBoard) ∧ DevelopedBy(sAT, collegeBoard) ∧ ¬(∃y (¬(y=collegeBoard) ∧ (OwnedBy(sAT, y) ∨ DevelopedBy(sAT, y)))\nIntendedToAssess(sAT, studentsReadinessForCollege)\nOriginallyDesignedToBeAlignedWith(sAT, highSchoolCurricula)\nAdjustmentMadeIn(sAT, 2016, toAlignWithHighSchoolCurriculum)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIntendedToAssess(sAT, studentsMathSkill)\n\"\"\""
    ]
  },
  {
    "id": 98,
    "question": "Nadal was not born in Mallorca.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(rafaNadal, mallorca)\nProfessionalTennisPlayer(rafaNadal)\nHighWinRatio(rafaNadal)\n∀x ((ProfessionalTennisPlayer(x) ∧ HighWinRatio(x)) → InBig3(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬BornIn(rafaNadal, mallorca)\n\"\"\""
    ]
  },
  {
    "id": 99,
    "question": "Nadal is in the Big 3.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(rafaNadal, mallorca)\nProfessionalTennisPlayer(rafaNadal)\nHighWinRatio(rafaNadal)\n∀x ((ProfessionalTennisPlayer(x) ∧ HighWinRatio(x)) → InBig3(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInBig3(rafaNadal)\n\"\"\""
    ]
  },
  {
    "id": 100,
    "question": "Nadal is the greatest player of all time.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(rafaNadal, mallorca)\nProfessionalTennisPlayer(rafaNadal)\nHighWinRatio(rafaNadal)\n∀x ((ProfessionalTennisPlayer(x) ∧ HighWinRatio(x)) → InBig3(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGreatestOfAllTime(rafaNadal)\n\"\"\""
    ]
  },
  {
    "id": 730,
    "question": "All sandwich cookies are delicious.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SandwichCookie(x) → ¬Healthy(x))\n∀x (Oreo(x) → SandwichCookie(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (SandwichCookie(x) → Delicious(x))\n\"\"\""
    ]
  },
  {
    "id": 782,
    "question": "Bailey is a pupil.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → ¬Plant(x))\n∀x (Human(x) → Animal(x))\n∀x (Pupil(x) → Human(x))\n∀x (Flower(x) → Plant(x))\n¬(Human(bailey) ⊕ Flower(bailey))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPupil(bailey)\n\"\"\""
    ]
  },
  {
    "id": 783,
    "question": "Bailey is not a pupil.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → ¬Plant(x))\n∀x (Human(x) → Animal(x))\n∀x (Pupil(x) → Human(x))\n∀x (Flower(x) → Plant(x))\n¬(Human(bailey) ⊕ Flower(bailey))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Pupil(bailey)\n\"\"\""
    ]
  },
  {
    "id": 784,
    "question": "Bailey is a plant.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → ¬Plant(x))\n∀x (Human(x) → Animal(x))\n∀x (Pupil(x) → Human(x))\n∀x (Flower(x) → Plant(x))\n¬(Human(bailey) ⊕ Flower(bailey))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlant(bailey)\n\"\"\""
    ]
  },
  {
    "id": 785,
    "question": "If Bailey is a human, then Bailey is not a pupil.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → ¬Plant(x))\n∀x (Human(x) → Animal(x))\n∀x (Pupil(x) → Human(x))\n∀x (Flower(x) → Plant(x))\n¬(Human(bailey) ⊕ Flower(bailey))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHuman(bailey) → ¬Pupil(bailey)\n\"\"\""
    ]
  },
  {
    "id": 1321,
    "question": "A watch is wearable.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Shoe(x) → ¬Food(x))\n∀x (Slipper(x) → Shoe(x))\n∀x (DonatedTo(x, homelessCharity) → Food(x) ⊕ Clothes(x))\n∀x (Wearable(x) → ¬Edible(x))\n∀x (Clothes(x) → Wearable(x))\nDonatedTo(watch, homelessCharify)\n¬(Edible(watch) ∧ Clothes(watch)) → ¬(Edible(watch) ⊕ Clothes(watch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWearable(watch)\n\"\"\""
    ]
  },
  {
    "id": 1322,
    "question": "A watch is a slipper.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Shoe(x) → ¬Food(x))\n∀x (Slipper(x) → Shoe(x))\n∀x (DonatedTo(x, homelessCharity) → Food(x) ⊕ Clothes(x))\n∀x (Wearable(x) → ¬Edible(x))\n∀x (Clothes(x) → Wearable(x))\nDonatedTo(watch, homelessCharify)\n¬(Edible(watch) ∧ Clothes(watch)) → ¬(Edible(watch) ⊕ Clothes(watch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSlipper(watch)\n\"\"\""
    ]
  },
  {
    "id": 1323,
    "question": "A watch is neither edible nor a slipper.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Shoe(x) → ¬Food(x))\n∀x (Slipper(x) → Shoe(x))\n∀x (DonatedTo(x, homelessCharity) → Food(x) ⊕ Clothes(x))\n∀x (Wearable(x) → ¬Edible(x))\n∀x (Clothes(x) → Wearable(x))\nDonatedTo(watch, homelessCharify)\n¬(Edible(watch) ∧ Clothes(watch)) → ¬(Edible(watch) ⊕ Clothes(watch))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Edible(watch) ∧ ¬Slipper(watch)\n\"\"\""
    ]
  },
  {
    "id": 101,
    "question": "Carlos Reyes is an Olympian.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((DoesOlympicSport(x) ∧ GoesToOlympicGames(x)) → Olympian(x))\nDoesOlympicSport(carlosReyes)\nGoesToOlympicGames(carlosReyes)\nWelterWeight(carlosReyes)\n∀x (WelterWeight(x) → ¬ HeavyWeight(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOlympian(carlosReyes)\n\"\"\""
    ]
  },
  {
    "id": 102,
    "question": "Carlos Reyes is a heavy weight.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((DoesOlympicSport(x) ∧ GoesToOlympicGames(x)) → Olympian(x))\nDoesOlympicSport(carlosReyes)\nGoesToOlympicGames(carlosReyes)\nWelterWeight(carlosReyes)\n∀x (WelterWeight(x) → ¬ HeavyWeight(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHeavyWeight(carlosReyes)\n\"\"\""
    ]
  },
  {
    "id": 103,
    "question": "Carlos Reyes won an Olympic medal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((DoesOlympicSport(x) ∧ GoesToOlympicGames(x)) → Olympian(x))\nDoesOlympicSport(carlosReyes)\nGoesToOlympicGames(carlosReyes)\nWelterWeight(carlosReyes)\n∀x (WelterWeight(x) → ¬ HeavyWeight(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWonOlympicMedal(carlosReyes)\n\"\"\""
    ]
  },
  {
    "id": 863,
    "question": "Sam is a young teenage girl who attends music festival frequently",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))\n∀x (Ambitious(x) → MoveOutEasily(x))\n∀x (BigFanOfMusic(x) → MusicDecorations(x, room))\n∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))\nAmbitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAttend(sam, festival) ∧ YoungTeenageGirl(sam)\n\"\"\""
    ]
  },
  {
    "id": 864,
    "question": "Sam is not a young teenage girl who attends music festival frequently",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))\n∀x (Ambitious(x) → MoveOutEasily(x))\n∀x (BigFanOfMusic(x) → MusicDecorations(x, room))\n∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))\nAmbitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Attend(sam, festival) ∧ YoungTeenageGirl(sam))\n\"\"\""
    ]
  },
  {
    "id": 865,
    "question": "Sam is a big fan of pop bands and singers.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))\n∀x (Ambitious(x) → MoveOutEasily(x))\n∀x (BigFanOfMusic(x) → MusicDecorations(x, room))\n∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))\nAmbitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBigFanOfMusic(sam)\n\"\"\""
    ]
  },
  {
    "id": 866,
    "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl attending music festival frequently",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))\n∀x (Ambitious(x) → MoveOutEasily(x))\n∀x (BigFanOfMusic(x) → MusicDecorations(x, room))\n∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))\nAmbitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Ambitious(sam) ∨ (Attend(sam, festival) ∧ YoungTeenageGirl(sam)))\n\"\"\""
    ]
  },
  {
    "id": 867,
    "question": "Sam has high ambitions and future career goals and is a young teenage girl attending music festival frequently.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))\n∀x (Ambitious(x) → MoveOutEasily(x))\n∀x (BigFanOfMusic(x) → MusicDecorations(x, room))\n∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))\nAmbitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmbitious(sam) ∧ Attend(sam, festival) ∧ YoungTeenageGirl(sam)\n\"\"\""
    ]
  },
  {
    "id": 868,
    "question": "Sam has high ambitions and future career goals and is a young teenage girl attending college.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))\n∀x (Ambitious(x) → MoveOutEasily(x))\n∀x (BigFanOfMusic(x) → MusicDecorations(x, room))\n∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))\nAmbitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmbitious(sam) ∧ Attend(sam, festival) ∧ YoungTeenageGirl(sam)\n\"\"\""
    ]
  },
  {
    "id": 869,
    "question": "If Sam is a young teenage girl attending college, then Sam either does not have high ambitions and future career goals or is a big fan of pop bands and singers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))\n∀x (Ambitious(x) → MoveOutEasily(x))\n∀x (BigFanOfMusic(x) → MusicDecorations(x, room))\n∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))\nAmbitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAttend(sam, festival) ∧ YoungTeenageGirl(sam) → ¬(Ambitious(sam) ∨ (BigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)))\n\"\"\""
    ]
  },
  {
    "id": 870,
    "question": "If Sam has high ambitions and future career goals and is a young teenage girl attending college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl attending college.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))\n∀x (Ambitious(x) → MoveOutEasily(x))\n∀x (BigFanOfMusic(x) → MusicDecorations(x, room))\n∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))\nAmbitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmbitious(sam) ∧ Attend(sam, festival) ∧ YoungTeenageGirl(sam) → ¬(Ambitious(sam) ∨ (Attend(sam, festival) ∧ YoungTeenageGirl(sam)))\n\"\"\""
    ]
  },
  {
    "id": 871,
    "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl attending college.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))\n∀x (Ambitious(x) → MoveOutEasily(x))\n∀x (BigFanOfMusic(x) → MusicDecorations(x, room))\n∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))\nAmbitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmbitious(sam) → Attend(sam, festival) ∧ YoungTeenageGirl(sam)\n\"\"\""
    ]
  },
  {
    "id": 524,
    "question": "There was a cargo ship seized by Germany that was sold to Hong Kong.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCargoShip(britta) ∧ Ship(britta) ∧ BuiltFor(britta, norwegians)\nImpressedIntoServiceBy(britta, germany)\n∀x ∀y (Ship(x) ∧ ImpressedIntoServiceBy(x, y) → SeizedBy(x, y))\nSoldTo(britta, hongkong)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (CargoShip(x) ∧ SeizedBy(x, germany) ∧ SoldTo(x, hongkong))\n\"\"\""
    ]
  },
  {
    "id": 525,
    "question": "Hong Kong hasn't had any seized ships sold to them.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCargoShip(britta) ∧ Ship(britta) ∧ BuiltFor(britta, norwegians)\nImpressedIntoServiceBy(britta, germany)\n∀x ∀y (Ship(x) ∧ ImpressedIntoServiceBy(x, y) → SeizedBy(x, y))\nSoldTo(britta, hongkong)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (SoldTo(x, hongkong) → ¬SeizedBy(x, y))\n\"\"\""
    ]
  },
  {
    "id": 526,
    "question": "Hong Kong seized the Britta.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCargoShip(britta) ∧ Ship(britta) ∧ BuiltFor(britta, norwegians)\nImpressedIntoServiceBy(britta, germany)\n∀x ∀y (Ship(x) ∧ ImpressedIntoServiceBy(x, y) → SeizedBy(x, y))\nSoldTo(britta, hongkong)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSeizedBy(britta, hongkong)\n\"\"\""
    ]
  },
  {
    "id": 141,
    "question": "Quincy McDuffie is a good wide receiver.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(quincyMcduffie) ∧ Professional(quincyMcduffie) ∧ WideReciever(quincyMcduffie) ∧ PlaysIn(quincyMcduffie, cFL)\n∀x ((∃y(CanCatch(x, y) ∧ Ball(y))) → GoodWideReceiver(x))\n∃x ∃y (Football(x) ∧ CanCatch(quincymcduffie, x)) ∧ (¬(x=y) ∧ (Football(y) ∧ CanCatch(quincymcduffie, y))\n∀x (GoodWideReceiver(x) → Professional(x))\n∀x (GoodWideReceiver(x) → (CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand)))\n∀x (Football(x) → Ball(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoodWideReceiver(quincyMcduffie)\n\"\"\""
    ]
  },
  {
    "id": 142,
    "question": "Quincy McDuffie can catch every ball.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(quincyMcduffie) ∧ Professional(quincyMcduffie) ∧ WideReciever(quincyMcduffie) ∧ PlaysIn(quincyMcduffie, cFL)\n∀x ((∃y(CanCatch(x, y) ∧ Ball(y))) → GoodWideReceiver(x))\n∃x ∃y (Football(x) ∧ CanCatch(quincymcduffie, x)) ∧ (¬(x=y) ∧ (Football(y) ∧ CanCatch(quincymcduffie, y))\n∀x (GoodWideReceiver(x) → Professional(x))\n∀x (GoodWideReceiver(x) → (CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand)))\n∀x (Football(x) → Ball(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Ball(x) → CanCatch(quincymcduffie, x))\n\"\"\""
    ]
  },
  {
    "id": 143,
    "question": "Professional wide receivers are good at catching balls.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(quincyMcduffie) ∧ Professional(quincyMcduffie) ∧ WideReciever(quincyMcduffie) ∧ PlaysIn(quincyMcduffie, cFL)\n∀x ((∃y(CanCatch(x, y) ∧ Ball(y))) → GoodWideReceiver(x))\n∃x ∃y (Football(x) ∧ CanCatch(quincymcduffie, x)) ∧ (¬(x=y) ∧ (Football(y) ∧ CanCatch(quincymcduffie, y))\n∀x (GoodWideReceiver(x) → Professional(x))\n∀x (GoodWideReceiver(x) → (CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand)))\n∀x (Football(x) → Ball(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ((Professional(x) ∧ WideReciever(x)) → Good(x, catchingballs))\n\"\"\""
    ]
  },
  {
    "id": 14,
    "question": "Longueau is situated on the Paris–Lille railway.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRailwayStation(boves) ∧ In(boves, france)\nPrecede(longueau, boves)\nPrecede(boves, dommartin)\nIn(france, europe)\nSituatedOn(dommartin, pairsLille)\n∀x ∀y ∀z ((SituatedOn(x, z) ∧ (Precede(x, y) ∨ Precede(y, x)) → SituatedOn(y, z))\nServe(boves, hautsDeFrance)\n∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))\n∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSituatedOn(longueau, pairsLille)\n\"\"\""
    ]
  },
  {
    "id": 15,
    "question": "Boves is not in Europe.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRailwayStation(boves) ∧ In(boves, france)\nPrecede(longueau, boves)\nPrecede(boves, dommartin)\nIn(france, europe)\nSituatedOn(dommartin, pairsLille)\n∀x ∀y ∀z ((SituatedOn(x, z) ∧ (Precede(x, y) ∨ Precede(y, x)) → SituatedOn(y, z))\nServe(boves, hautsDeFrance)\n∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))\n∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬In(boves, europe)\n\"\"\""
    ]
  },
  {
    "id": 16,
    "question": "Longueau is served by regional TER Hauts-de-France trains.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRailwayStation(boves) ∧ In(boves, france)\nPrecede(longueau, boves)\nPrecede(boves, dommartin)\nIn(france, europe)\nSituatedOn(dommartin, pairsLille)\n∀x ∀y ∀z ((SituatedOn(x, z) ∧ (Precede(x, y) ∨ Precede(y, x)) → SituatedOn(y, z))\nServe(boves, hautsDeFrance)\n∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))\n∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nServe(longueau, hautsDeFrance)\n\"\"\""
    ]
  },
  {
    "id": 309,
    "question": "Ted Smith was a sergeant.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(edwinSmith, newZealand) ∧ Rower(edwinSmith) ∧ From(edwinSmith, auckland)\nedwinSmith=tedSmith\nGoTo(edwinSmith, roseRoadPrimarySchool) ∧ LocatedIn(roseRoadPrimarySchool, greyLynn)\nSergeant(edwinSmith) ∧ ServeWith(edwinSmith, newZealand24thBattalion) ∧ ServeIn(edwinSmith, italy) ∧ ServeIn(edwinSmith, egypt)\nBuisness(broadwaySheetmetals) ∧ Run(edwinSmith, broadwaySheetmetals) ∧ Own(edwinSmith, broadwaySheetmetals) ∧ SheetmetalWorker(edwinsmith)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSergeant(tedSmith)\n\"\"\""
    ]
  },
  {
    "id": 310,
    "question": "There were no rowers that own a buisness.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(edwinSmith, newZealand) ∧ Rower(edwinSmith) ∧ From(edwinSmith, auckland)\nedwinSmith=tedSmith\nGoTo(edwinSmith, roseRoadPrimarySchool) ∧ LocatedIn(roseRoadPrimarySchool, greyLynn)\nSergeant(edwinSmith) ∧ ServeWith(edwinSmith, newZealand24thBattalion) ∧ ServeIn(edwinSmith, italy) ∧ ServeIn(edwinSmith, egypt)\nBuisness(broadwaySheetmetals) ∧ Run(edwinSmith, broadwaySheetmetals) ∧ Own(edwinSmith, broadwaySheetmetals) ∧ SheetmetalWorker(edwinsmith)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (Rower(x) ∧ Buisness(y) → ¬Own(x, y))\n\"\"\""
    ]
  },
  {
    "id": 311,
    "question": "No sergeants were from Auckland.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(edwinSmith, newZealand) ∧ Rower(edwinSmith) ∧ From(edwinSmith, auckland)\nedwinSmith=tedSmith\nGoTo(edwinSmith, roseRoadPrimarySchool) ∧ LocatedIn(roseRoadPrimarySchool, greyLynn)\nSergeant(edwinSmith) ∧ ServeWith(edwinSmith, newZealand24thBattalion) ∧ ServeIn(edwinSmith, italy) ∧ ServeIn(edwinSmith, egypt)\nBuisness(broadwaySheetmetals) ∧ Run(edwinSmith, broadwaySheetmetals) ∧ Own(edwinSmith, broadwaySheetmetals) ∧ SheetmetalWorker(edwinsmith)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Sergeant(x) → ¬From(x, auckland))\n\"\"\""
    ]
  },
  {
    "id": 312,
    "question": "No business owner served in Egypt.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(edwinSmith, newZealand) ∧ Rower(edwinSmith) ∧ From(edwinSmith, auckland)\nedwinSmith=tedSmith\nGoTo(edwinSmith, roseRoadPrimarySchool) ∧ LocatedIn(roseRoadPrimarySchool, greyLynn)\nSergeant(edwinSmith) ∧ ServeWith(edwinSmith, newZealand24thBattalion) ∧ ServeIn(edwinSmith, italy) ∧ ServeIn(edwinSmith, egypt)\nBuisness(broadwaySheetmetals) ∧ Run(edwinSmith, broadwaySheetmetals) ∧ Own(edwinSmith, broadwaySheetmetals) ∧ SheetmetalWorker(edwinsmith)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (Buisness(x) ∧ Own(y, x) → ¬ServeIn(y, egypt))\n\"\"\""
    ]
  },
  {
    "id": 503,
    "question": "All humans are werewolves.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))\n∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))\n∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Human(x) → Werewolf(x))\n\"\"\""
    ]
  },
  {
    "id": 504,
    "question": "A werewolf is a wolf.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))\n∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))\n∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Werewolf(x) → Wolf(x))\n\"\"\""
    ]
  },
  {
    "id": 505,
    "question": "A werewolf has scratched someone before.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))\n∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))\n∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∃y (Werewolf(x) → ScratchedBy(y, x))\n\"\"\""
    ]
  },
  {
    "id": 407,
    "question": "Jung fought Sadollah.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEvent(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ HeldIn(uFCFightNight, sweden)\nScheduledToFight(sadollah, musoke,uFCFightNight)\nFight(sadollah, akiyama, uFCFightNight)\nFight(musoke, yakovlev, uFCFightNight)\nInjuredAt(jung, uFCFightNight)\n∀x (InjuredAt(x, uFCFightNight) → ¬FightIn(x, uFCFightNight))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFight(jung, sadollah, uFCFightNight)\n\"\"\""
    ]
  },
  {
    "id": 408,
    "question": "Jung did not fight at UFC Fight Night.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEvent(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ HeldIn(uFCFightNight, sweden)\nScheduledToFight(sadollah, musoke,uFCFightNight)\nFight(sadollah, akiyama, uFCFightNight)\nFight(musoke, yakovlev, uFCFightNight)\nInjuredAt(jung, uFCFightNight)\n∀x (InjuredAt(x, uFCFightNight) → ¬FightIn(x, uFCFightNight))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEvent(uFCFightNight) ∧ ¬FightIn(jung, uFCFightNight)\n\"\"\""
    ]
  },
  {
    "id": 409,
    "question": "Sadollah fought Musoke at UFC Fight Night.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEvent(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ HeldIn(uFCFightNight, sweden)\nScheduledToFight(sadollah, musoke,uFCFightNight)\nFight(sadollah, akiyama, uFCFightNight)\nFight(musoke, yakovlev, uFCFightNight)\nInjuredAt(jung, uFCFightNight)\n∀x (InjuredAt(x, uFCFightNight) → ¬FightIn(x, uFCFightNight))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFight(sadollah, musoke, uFCFightNight)\n\"\"\""
    ]
  },
  {
    "id": 410,
    "question": "Nelson fought Story at UFC Fight Night.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEvent(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ HeldIn(uFCFightNight, sweden)\nScheduledToFight(sadollah, musoke,uFCFightNight)\nFight(sadollah, akiyama, uFCFightNight)\nFight(musoke, yakovlev, uFCFightNight)\nInjuredAt(jung, uFCFightNight)\n∀x (InjuredAt(x, uFCFightNight) → ¬FightIn(x, uFCFightNight))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFight(nelson, story, uFCFightNight)\n\"\"\""
    ]
  },
  {
    "id": 1351,
    "question": "The coke is orange juice.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OnCounter(x) ∧ Drink(x) → Edible(x))\n∀x (OnCounter(x) ∧ Juice(x) → Drink(x))\n∀x (OrangeJuice(x) → Juice(x))\n∀x (OnCounter(x) → OrangeJuice(x) ⊕ AppleJuice(x))\n∀x (OnCounter(x) ∧ AppleJuice(x) → Sweet(x))\nOnCounter(coke) ∧ (AppleJuice(coke) → Drink(coke))\n¬AppleJuice(coke) → ¬Edible(coke)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOrangeJuice(coke)\n\"\"\""
    ]
  },
  {
    "id": 1352,
    "question": "The coke is edible and sweet.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OnCounter(x) ∧ Drink(x) → Edible(x))\n∀x (OnCounter(x) ∧ Juice(x) → Drink(x))\n∀x (OrangeJuice(x) → Juice(x))\n∀x (OnCounter(x) → OrangeJuice(x) ⊕ AppleJuice(x))\n∀x (OnCounter(x) ∧ AppleJuice(x) → Sweet(x))\nOnCounter(coke) ∧ (AppleJuice(coke) → Drink(coke))\n¬AppleJuice(coke) → ¬Edible(coke)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEdible(coke) ∧ Sweet(coke)\n\"\"\""
    ]
  },
  {
    "id": 1353,
    "question": "The coke is not edible and sweet.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OnCounter(x) ∧ Drink(x) → Edible(x))\n∀x (OnCounter(x) ∧ Juice(x) → Drink(x))\n∀x (OrangeJuice(x) → Juice(x))\n∀x (OnCounter(x) → OrangeJuice(x) ⊕ AppleJuice(x))\n∀x (OnCounter(x) ∧ AppleJuice(x) → Sweet(x))\nOnCounter(coke) ∧ (AppleJuice(coke) → Drink(coke))\n¬AppleJuice(coke) → ¬Edible(coke)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Edible(coke) ∧ Sweet(coke))\n\"\"\""
    ]
  },
  {
    "id": 118,
    "question": "The Spanish Nationalists killed Daniel.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTalentedPoet(lorca) ∧ Support(lorca, populists)\n∀x (Support(x, populists) → Opposed(nationalists, x))\n∀x (TalentedPoet(x) → Popular(x))\n∀x ((Opposed(nationalists, x) ∧ Popular(x)) → Killed(nationalists, x))\nSupport(daniel, populists) ∧ (¬Popular(daniel))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Killed(nationalists, daniel)\n\"\"\""
    ]
  },
  {
    "id": 119,
    "question": "The Spanish Nationalists killed Lorca.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTalentedPoet(lorca) ∧ Support(lorca, populists)\n∀x (Support(x, populists) → Opposed(nationalists, x))\n∀x (TalentedPoet(x) → Popular(x))\n∀x ((Opposed(nationalists, x) ∧ Popular(x)) → Killed(nationalists, x))\nSupport(daniel, populists) ∧ (¬Popular(daniel))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKilled(nationalists, lorca)\n\"\"\""
    ]
  },
  {
    "id": 973,
    "question": "Damon is in Franny's family and he has to visit the dentist frequently.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, frannysFamily) ∧ (Drink(x, kombucha) ∨ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))))\n∀x (In(x, frannysFamily) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))))\n∀x (In(x, frannysFamily)) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → HaveToVisitFrequently(x, dentist))\n∀x (In(x, frannysFamily) ∧ (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))) → ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y)))\n∀x (In(x, frannysFamily) ∧ ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))) → ¬(ConsistentEverydayRoutine(x) ∧ StickTo(damon, solidSchedule)))\nIn(damon, frannysFamily)\n¬((∃y ∃z(¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ (ConsistentEverydayRoutine(damon) ∧ StickTo(damon, solidSchedule)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHaveToVisitFrequently(damon, dentist)\n\"\"\""
    ]
  },
  {
    "id": 974,
    "question": "If Damon is in Franny's family and he either both grew up with extremely busy parents who did not have time to pack his lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack his lunch nor drink kombucha every day, then Damon neither visits the dentist frequently nor drinks Coca Cola or Pepsi products.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, frannysFamily) ∧ (Drink(x, kombucha) ∨ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))))\n∀x (In(x, frannysFamily) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))))\n∀x (In(x, frannysFamily)) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → HaveToVisitFrequently(x, dentist))\n∀x (In(x, frannysFamily) ∧ (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))) → ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y)))\n∀x (In(x, frannysFamily) ∧ ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))) → ¬(ConsistentEverydayRoutine(x) ∧ StickTo(damon, solidSchedule)))\nIn(damon, frannysFamily)\n¬((∃y ∃z(¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ (ConsistentEverydayRoutine(damon) ∧ StickTo(damon, solidSchedule)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬((¬(y=z) ∧ ∃y ∃z (BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ Drink(damon, kombucha)) → ¬(HaveToVisitFrequently(damon, dentist) ∨ (∃y (Have(damon, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))))\n\"\"\""
    ]
  },
  {
    "id": 975,
    "question": "If Damon is in Franny's family and he either visits the dentist frequently or drinks kombucha, then Damon both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (In(x, frannysFamily) ∧ (Drink(x, kombucha) ∨ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))))\n∀x (In(x, frannysFamily) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))))\n∀x (In(x, frannysFamily)) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → HaveToVisitFrequently(x, dentist))\n∀x (In(x, frannysFamily) ∧ (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))) → ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y)))\n∀x (In(x, frannysFamily) ∧ ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))) → ¬(ConsistentEverydayRoutine(x) ∧ StickTo(damon, solidSchedule)))\nIn(damon, frannysFamily)\n¬((∃y ∃z(¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ (ConsistentEverydayRoutine(damon) ∧ StickTo(damon, solidSchedule)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHaveToVisitFrequently(damon, dentist) ∨ Drink(damon, kombucha, everyDay) → HaveToVisitFrequently(damon, dentist) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))\n\"\"\""
    ]
  },
  {
    "id": 63,
    "question": "James cannot watch 3 movies every week without any additional fees.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SubscribedTo(x, aMCAList) → EligibleForThreeFreeMovies(x))\n∃x (CinemaEveryWeek(x))\n∀x (Prefer(x, tVSeries) → ¬WatchTVIn(x, cinemas))\nWatchTVIn(james, cinemas)\nSubscribedTo(james, aMCAList)\nPrefer(peter, tVSeries)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬EligibleForThreeFreeMovies(james)\n\"\"\""
    ]
  },
  {
    "id": 64,
    "question": "James goes to cinemas every week.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SubscribedTo(x, aMCAList) → EligibleForThreeFreeMovies(x))\n∃x (CinemaEveryWeek(x))\n∀x (Prefer(x, tVSeries) → ¬WatchTVIn(x, cinemas))\nWatchTVIn(james, cinemas)\nSubscribedTo(james, aMCAList)\nPrefer(peter, tVSeries)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCinemaEveryWeek(james)\n\"\"\""
    ]
  },
  {
    "id": 65,
    "question": "Peter will not watch TV series in cinemas.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SubscribedTo(x, aMCAList) → EligibleForThreeFreeMovies(x))\n∃x (CinemaEveryWeek(x))\n∀x (Prefer(x, tVSeries) → ¬WatchTVIn(x, cinemas))\nWatchTVIn(james, cinemas)\nSubscribedTo(james, aMCAList)\nPrefer(peter, tVSeries)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WatchTVIn(peter, cinemas)\n\"\"\""
    ]
  },
  {
    "id": 719,
    "question": "Bulbophyllum attenuatum is not an orchid.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGenusBulbophyllum(bulbophyllumAttenuatum)\n∀x (GenusBulbophyllum(x) → Orchid(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Orchid(bulbophyllumAttenuatum)\n\"\"\""
    ]
  },
  {
    "id": 467,
    "question": "Vladivostok is the administrative center of the federal district with the largest area.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFederalDistrictOf(central, russia) ∧ FederalDistrictOf(northwestern, russia) ∧ FederalDistrictOf(southern, russia) ∧ FederalDistrictOf(northcaucasian, russia) ∧ FederalDistrictOf(volga, russia) ∧ FederalDistrictOf(ural, russia) ∧ FederalDistrictOf(siberian, russia) ∧ FederalDistrictOf(fareastern, russia)\nLargestPopulation(central) \nAdministrativeCenterOf(moscow, central)\nAdministrativeCenterOf(yekaterinburg, ural)\nAdministrativeCenterOf(vladivostok, farEastern)\nLargestArea(farEastern)\n∃x (FederalDistrictOf(x, russia) ∧ EstablishedIn(x, 2000))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (AdministrativeCenterOf(vladivostok, x) ∧ LargestArea(x))\n\"\"\""
    ]
  },
  {
    "id": 468,
    "question": "Moscow is the administrative center of the federal district with the largest population.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFederalDistrictOf(central, russia) ∧ FederalDistrictOf(northwestern, russia) ∧ FederalDistrictOf(southern, russia) ∧ FederalDistrictOf(northcaucasian, russia) ∧ FederalDistrictOf(volga, russia) ∧ FederalDistrictOf(ural, russia) ∧ FederalDistrictOf(siberian, russia) ∧ FederalDistrictOf(fareastern, russia)\nLargestPopulation(central) \nAdministrativeCenterOf(moscow, central)\nAdministrativeCenterOf(yekaterinburg, ural)\nAdministrativeCenterOf(vladivostok, farEastern)\nLargestArea(farEastern)\n∃x (FederalDistrictOf(x, russia) ∧ EstablishedIn(x, 2000))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (AdministrativeCenterOf(moscow, x) ∧ LargestPopulationIn(x))\n\"\"\""
    ]
  },
  {
    "id": 469,
    "question": "The Northwestern federal district was established in 2000.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFederalDistrictOf(central, russia) ∧ FederalDistrictOf(northwestern, russia) ∧ FederalDistrictOf(southern, russia) ∧ FederalDistrictOf(northcaucasian, russia) ∧ FederalDistrictOf(volga, russia) ∧ FederalDistrictOf(ural, russia) ∧ FederalDistrictOf(siberian, russia) ∧ FederalDistrictOf(fareastern, russia)\nLargestPopulation(central) \nAdministrativeCenterOf(moscow, central)\nAdministrativeCenterOf(yekaterinburg, ural)\nAdministrativeCenterOf(vladivostok, farEastern)\nLargestArea(farEastern)\n∃x (FederalDistrictOf(x, russia) ∧ EstablishedIn(x, 2000))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEstablishedIn(northwestern, 2000)\n\"\"\""
    ]
  },
  {
    "id": 810,
    "question": "Arthritis can be treated at home.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → Have(x, mutation))\n∀x (Have(x, mutation) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (Cold(x) → CanBeTreatedAtHome(x))\n¬(Cold(arthritis) ⊕ Have(arthritis, mutation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCanBeTreatedAtHome(arthritis)\n\"\"\""
    ]
  },
  {
    "id": 811,
    "question": "Arthritis is colorectal cancer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → Have(x, mutation))\n∀x (Have(x, mutation) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (Cold(x) → CanBeTreatedAtHome(x))\n¬(Cold(arthritis) ⊕ Have(arthritis, mutation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nColorectalCancer(arthritis)\n\"\"\""
    ]
  },
  {
    "id": 812,
    "question": "Arthritis is not colorectal cancer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → Have(x, mutation))\n∀x (Have(x, mutation) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (Cold(x) → CanBeTreatedAtHome(x))\n¬(Cold(arthritis) ⊕ Have(arthritis, mutation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ColorectalCancer(arthritis)\n\"\"\""
    ]
  },
  {
    "id": 813,
    "question": "Arthritis is colorectal cancer or has mutations.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → Have(x, mutation))\n∀x (Have(x, mutation) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (Cold(x) → CanBeTreatedAtHome(x))\n¬(Cold(arthritis) ⊕ Have(arthritis, mutation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nColorectalCancer(arthritis) ∨ Have(arthritis, mutation)\n\"\"\""
    ]
  },
  {
    "id": 814,
    "question": "Arthritis is colorectal cancer and a cancer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → Have(x, mutation))\n∀x (Have(x, mutation) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (Cold(x) → CanBeTreatedAtHome(x))\n¬(Cold(arthritis) ⊕ Have(arthritis, mutation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nColorectalCancer(arthritisr) ∧ Cancer(arthritis)\n\"\"\""
    ]
  },
  {
    "id": 815,
    "question": "If arthritis is not colorectal cancer, then arthritis has mutations.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → Have(x, mutation))\n∀x (Have(x, mutation) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (Cold(x) → CanBeTreatedAtHome(x))\n¬(Cold(arthritis) ⊕ Have(arthritis, mutation))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ColorectalCancer(arthritis) → Have(arthritis, mutation)\n\"\"\""
    ]
  },
  {
    "id": 747,
    "question": "Jerry should not worry about traffic.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OutsideOfControl(x) → ¬ShouldWorry(jerry, x))\n∀x (Traffic(x) → OutsideControl(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ShouldWorry(jerry, traffic)\n\"\"\""
    ]
  },
  {
    "id": 341,
    "question": "Alba Roversi uses an Italian surname.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nItalianName(roversi) ∧ Surname(roversi)\nUseAsSurname(albaRoversi, roversi)\nUseAsSurname(paoloRoversi, roversi)\nUseAsSurname(robertoRoversi, roversi)\nPhotographer(paoloRoversi)\n∀x (Photographer(x) → Professional(x) ⊕ Amateur(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (ItalianName(x) ∧ Surname(x) ∧ UseAsSurname(albaRoversi, x))\n\"\"\""
    ]
  },
  {
    "id": 342,
    "question": "There are no photographers using an Italian surname.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nItalianName(roversi) ∧ Surname(roversi)\nUseAsSurname(albaRoversi, roversi)\nUseAsSurname(paoloRoversi, roversi)\nUseAsSurname(robertoRoversi, roversi)\nPhotographer(paoloRoversi)\n∀x (Photographer(x) → Professional(x) ⊕ Amateur(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(∃x ∃y (Photographer(x) ∧ ItalianName(y) ∧ Surname(y) ∧ UseAsSurname(x, y)))\n\"\"\""
    ]
  },
  {
    "id": 343,
    "question": "Paolo is an amateur photographer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nItalianName(roversi) ∧ Surname(roversi)\nUseAsSurname(albaRoversi, roversi)\nUseAsSurname(paoloRoversi, roversi)\nUseAsSurname(robertoRoversi, roversi)\nPhotographer(paoloRoversi)\n∀x (Photographer(x) → Professional(x) ⊕ Amateur(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmateur(paoloRoversi) ∧ Photographer(paoloRoversi)\n\"\"\""
    ]
  },
  {
    "id": 672,
    "question": "Zaha Hadid was a citizen of Britain and Iraq.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)\nBornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)\nVisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)\nAspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBritish-Iraqi(zahaHadid)\n\"\"\""
    ]
  },
  {
    "id": 673,
    "question": "Zaha Hadid did some work in interior design.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)\nBornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)\nVisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)\nAspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDidWorkIn(zahaHadid, interiorDesign)\n\"\"\""
    ]
  },
  {
    "id": 674,
    "question": "Zaha Hadid was born on the 31st of October in 1982.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)\nBornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)\nVisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)\nAspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBornOn(zahaHadid, 31October1950)\n\"\"\""
    ]
  },
  {
    "id": 675,
    "question": "Max admires Zaha Hadid.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)\nBornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)\nVisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)\nAspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAdmires(max, zahaHadid)\n\"\"\""
    ]
  },
  {
    "id": 1076,
    "question": "FMRI provides a spatial resolution of brains.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NeuroimagingTechnique(x) → (Invasive(x) ⊕ Noninvasive(x))) \n∀x (Noninvasive(x) → Provides(x, spatialResolutionOfBrains))\n∀x (Provides(x, spatialResolutionOfBrains) → Measure(x, brainActivity))\n∀x (Measure(x, brainActivity) → UsedBy(x, neuroscienceResearchers))\nMeasure(fMRI, brainActivity) ⊕ Noninvasive(fMRI)\nNeuroimagingTechnique(fMRI)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProvides(fMRI, spatialResolutionOfBrains)\n\"\"\""
    ]
  },
  {
    "id": 1077,
    "question": "FMRI is an invasive neuroimaging technique and is used by neuroscience researchers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NeuroimagingTechnique(x) → (Invasive(x) ⊕ Noninvasive(x))) \n∀x (Noninvasive(x) → Provides(x, spatialResolutionOfBrains))\n∀x (Provides(x, spatialResolutionOfBrains) → Measure(x, brainActivity))\n∀x (Measure(x, brainActivity) → UsedBy(x, neuroscienceResearchers))\nMeasure(fMRI, brainActivity) ⊕ Noninvasive(fMRI)\nNeuroimagingTechnique(fMRI)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInvasive(fMRI) ∧ UsedBy(fMRI, neuroscienceResearchers)\n\"\"\""
    ]
  },
  {
    "id": 1078,
    "question": "FMRI is either an invasive neuroimaging technique or is used by neuroscience researchers.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NeuroimagingTechnique(x) → (Invasive(x) ⊕ Noninvasive(x))) \n∀x (Noninvasive(x) → Provides(x, spatialResolutionOfBrains))\n∀x (Provides(x, spatialResolutionOfBrains) → Measure(x, brainActivity))\n∀x (Measure(x, brainActivity) → UsedBy(x, neuroscienceResearchers))\nMeasure(fMRI, brainActivity) ⊕ Noninvasive(fMRI)\nNeuroimagingTechnique(fMRI)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInvasive(fMRI) ⊕ UsedBy(fMRI, neuroscienceResearchers)\n\"\"\""
    ]
  },
  {
    "id": 1079,
    "question": "If fMRI is not an invasive neuroimaging technique used by neuroscience researchers, then fMRI is neither a noninvasive neuroimaging technique nor provides a spatial resolution of brains.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NeuroimagingTechnique(x) → (Invasive(x) ⊕ Noninvasive(x))) \n∀x (Noninvasive(x) → Provides(x, spatialResolutionOfBrains))\n∀x (Provides(x, spatialResolutionOfBrains) → Measure(x, brainActivity))\n∀x (Measure(x, brainActivity) → UsedBy(x, neuroscienceResearchers))\nMeasure(fMRI, brainActivity) ⊕ Noninvasive(fMRI)\nNeuroimagingTechnique(fMRI)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Invasive(fMRI) ∧ UsedBy(fMRI, neuroscienceResearchers)) → ¬(Noninvasive(fMRI) ∨ Provides(fMRI, spatialResolutionOfBrains))\n\"\"\""
    ]
  },
  {
    "id": 1253,
    "question": "James is provided with souvenirs.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PresentWorkAt(x, conference) ⊕ ProvideAt(x, tutorialSession, conference))\n∀x (PresentWorkAt(x, conference) → AttendInPerson(x, conference))\n∀x (ProvideSessionAt(x, tutorial, conference) → InvitedToJoin(x, club))\n∀x (AttendInPerson(x, conference) → ProvidedWith(x, souvenir))\n∀x (InvitedToJoin(x, club) → ProvidedWith(x, deliciousMeal))\n∀x (ProvidedWith(x, deliciousMeal) ∧ ProvidedWith(y, deliciousMeal)  → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(x, y) ∧ HappyToCommunicateWithDuringTheDinner(x, z)))\n∀x (ProvidedWith(x, deliciousMeal) → InvitedToTakePhotoWith(x, audience))\n¬(AttendInPerson(james, conference) ∧ ProvidedWith(x, souvenir))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProvidedWith(james, souvenir)\n\"\"\""
    ]
  },
  {
    "id": 1254,
    "question": "James is not provided with souvenirs.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PresentWorkAt(x, conference) ⊕ ProvideAt(x, tutorialSession, conference))\n∀x (PresentWorkAt(x, conference) → AttendInPerson(x, conference))\n∀x (ProvideSessionAt(x, tutorial, conference) → InvitedToJoin(x, club))\n∀x (AttendInPerson(x, conference) → ProvidedWith(x, souvenir))\n∀x (InvitedToJoin(x, club) → ProvidedWith(x, deliciousMeal))\n∀x (ProvidedWith(x, deliciousMeal) ∧ ProvidedWith(y, deliciousMeal)  → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(x, y) ∧ HappyToCommunicateWithDuringTheDinner(x, z)))\n∀x (ProvidedWith(x, deliciousMeal) → InvitedToTakePhotoWith(x, audience))\n¬(AttendInPerson(james, conference) ∧ ProvidedWith(x, souvenir))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ProvidedWith(x, souvenir)\n\"\"\""
    ]
  },
  {
    "id": 1255,
    "question": "James is invited to take a photo with the audience and is happy to communicate with other guests at the dinner.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PresentWorkAt(x, conference) ⊕ ProvideAt(x, tutorialSession, conference))\n∀x (PresentWorkAt(x, conference) → AttendInPerson(x, conference))\n∀x (ProvideSessionAt(x, tutorial, conference) → InvitedToJoin(x, club))\n∀x (AttendInPerson(x, conference) → ProvidedWith(x, souvenir))\n∀x (InvitedToJoin(x, club) → ProvidedWith(x, deliciousMeal))\n∀x (ProvidedWith(x, deliciousMeal) ∧ ProvidedWith(y, deliciousMeal)  → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(x, y) ∧ HappyToCommunicateWithDuringTheDinner(x, z)))\n∀x (ProvidedWith(x, deliciousMeal) → InvitedToTakePhotoWith(x, audience))\n¬(AttendInPerson(james, conference) ∧ ProvidedWith(x, souvenir))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInvitedToTakePhotoWith(james, audience) → ∃y ∃z (¬(y=james) ∧ ¬(z=james) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(james, y) ∧ HappyToCommunicateWithDuringDinner(james, z)))\n\"\"\""
    ]
  },
  {
    "id": 1256,
    "question": "James is invited to take a photo with the audience or is happy to communicate with other guests(?) during the dinner.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PresentWorkAt(x, conference) ⊕ ProvideAt(x, tutorialSession, conference))\n∀x (PresentWorkAt(x, conference) → AttendInPerson(x, conference))\n∀x (ProvideSessionAt(x, tutorial, conference) → InvitedToJoin(x, club))\n∀x (AttendInPerson(x, conference) → ProvidedWith(x, souvenir))\n∀x (InvitedToJoin(x, club) → ProvidedWith(x, deliciousMeal))\n∀x (ProvidedWith(x, deliciousMeal) ∧ ProvidedWith(y, deliciousMeal)  → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(x, y) ∧ HappyToCommunicateWithDuringTheDinner(x, z)))\n∀x (ProvidedWith(x, deliciousMeal) → InvitedToTakePhotoWith(x, audience))\n¬(AttendInPerson(james, conference) ∧ ProvidedWith(x, souvenir))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInvitedToTakePhotoWith(james, audience) → ∃y ∃z (¬(y=james) ∧ ¬(z=james) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(james, y) ∧ HappyToCommunicateWithDuringDinner(james, z)))\n\"\"\""
    ]
  },
  {
    "id": 1257,
    "question": "James is either invited to take a photo with the audience or happy to communicate with other guests(?) during the dinner.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PresentWorkAt(x, conference) ⊕ ProvideAt(x, tutorialSession, conference))\n∀x (PresentWorkAt(x, conference) → AttendInPerson(x, conference))\n∀x (ProvideSessionAt(x, tutorial, conference) → InvitedToJoin(x, club))\n∀x (AttendInPerson(x, conference) → ProvidedWith(x, souvenir))\n∀x (InvitedToJoin(x, club) → ProvidedWith(x, deliciousMeal))\n∀x (ProvidedWith(x, deliciousMeal) ∧ ProvidedWith(y, deliciousMeal)  → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(x, y) ∧ HappyToCommunicateWithDuringTheDinner(x, z)))\n∀x (ProvidedWith(x, deliciousMeal) → InvitedToTakePhotoWith(x, audience))\n¬(AttendInPerson(james, conference) ∧ ProvidedWith(x, souvenir))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInvitedToTakePhotoWith(james, audience) → ∃y ∃z (¬(y=james) ∧ ¬(z=james) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(james, y) ∧ HappyToCommunicateWithDuringDinner(james, z)))\n\"\"\""
    ]
  },
  {
    "id": 38,
    "question": "The USS Salem is open to the public.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n∀x (MuseumShip(x) → OpenToPublic(x))\nServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOpenToPublic(usssalem)\n\"\"\""
    ]
  },
  {
    "id": 39,
    "question": "There is a museum ship open to the public that served in the Mediterranean.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n∀x (MuseumShip(x) → OpenToPublic(x))\nServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (MuseumShip(x) ∧ OpenToPublic(x) ∧ ServedIn(x, mediterranean))\n\"\"\""
    ]
  },
  {
    "id": 40,
    "question": "The USS Salem was not the last heavy cruiser to enter service.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n∀x (MuseumShip(x) → OpenToPublic(x))\nServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LastHeavyCruiserToEnterService(usssalem)\n\"\"\""
    ]
  },
  {
    "id": 413,
    "question": "TS Leda was quiet and good at sea.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TSLeda(x) → ((Passenger(x) ∧ Vessel(x)) ∧ (Cargo(x) ∧ Vessel(x)))\n∀x (TSLeda(x) → (Norweigian(x) ∧ Vessel(x) ∧ Stabilizers(x)))\n∀x (Stabilizers(x) → MechanicalDevice(x) ∧ OnlyOnShips(x) ∧ PowerfulSteamTurbine(x))\n∀x ((Passenger(x) ∧ Vessel(x)) ∧ (Cargo(x) ∧ Vessel(x)) → (Quiet(x) ∧ GoodAt(x, sea)))\n∃x (Quiet(x) ∧ GoodAt(x, sea) ∧ PowerfulSteamTurbine(x))\n∀x (Ship(x) → Vessel(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (TSLeda(x) → Quiet(x) ∧ GoodAt(x, sea))\n\"\"\""
    ]
  },
  {
    "id": 414,
    "question": "TS Leda had powerful steam turbine engines.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TSLeda(x) → ((Passenger(x) ∧ Vessel(x)) ∧ (Cargo(x) ∧ Vessel(x)))\n∀x (TSLeda(x) → (Norweigian(x) ∧ Vessel(x) ∧ Stabilizers(x)))\n∀x (Stabilizers(x) → MechanicalDevice(x) ∧ OnlyOnShips(x) ∧ PowerfulSteamTurbine(x))\n∀x ((Passenger(x) ∧ Vessel(x)) ∧ (Cargo(x) ∧ Vessel(x)) → (Quiet(x) ∧ GoodAt(x, sea)))\n∃x (Quiet(x) ∧ GoodAt(x, sea) ∧ PowerfulSteamTurbine(x))\n∀x (Ship(x) → Vessel(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (TSLeda(x) → PowerfulSteamTurbine(x))\n\"\"\""
    ]
  },
  {
    "id": 415,
    "question": "TS Leda was not a Norwegian vessel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TSLeda(x) → ((Passenger(x) ∧ Vessel(x)) ∧ (Cargo(x) ∧ Vessel(x)))\n∀x (TSLeda(x) → (Norweigian(x) ∧ Vessel(x) ∧ Stabilizers(x)))\n∀x (Stabilizers(x) → MechanicalDevice(x) ∧ OnlyOnShips(x) ∧ PowerfulSteamTurbine(x))\n∀x ((Passenger(x) ∧ Vessel(x)) ∧ (Cargo(x) ∧ Vessel(x)) → (Quiet(x) ∧ GoodAt(x, sea)))\n∃x (Quiet(x) ∧ GoodAt(x, sea) ∧ PowerfulSteamTurbine(x))\n∀x (Ship(x) → Vessel(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (TSLeda(x) → ¬(Norweigian(x) ∧ Vessel(x)))\n\"\"\""
    ]
  },
  {
    "id": 552,
    "question": "Rosa was born in the largest city of Chile.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(rosa, santiago)\nCapitalOf(santiago, chile) ∧ LargestCityOf(santiago, chile)\nDaughterOf(rosa, jose) ∧ BuildingContractor(jose) ∧ Catalan(jose)\nWifeOf(jose, carmen) ∧ Chilean(carmen)\nParentOf(jose, rosa) ∧ ParentOf(carmen, rosa)\n∀x (Catalan(x) → ¬Chilean(x))\n∀x ∃y (BuildingContractor(x) → ConstructionSite(y) ∧ Oversee(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (BornIn(rosa, x) ∧ LargestCityOf(x, chile))\n\"\"\""
    ]
  },
  {
    "id": 553,
    "question": "Neither of Rosa's parents is Chilean.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(rosa, santiago)\nCapitalOf(santiago, chile) ∧ LargestCityOf(santiago, chile)\nDaughterOf(rosa, jose) ∧ BuildingContractor(jose) ∧ Catalan(jose)\nWifeOf(jose, carmen) ∧ Chilean(carmen)\nParentOf(jose, rosa) ∧ ParentOf(carmen, rosa)\n∀x (Catalan(x) → ¬Chilean(x))\n∀x ∃y (BuildingContractor(x) → ConstructionSite(y) ∧ Oversee(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Chilean(jose) ∧ ¬Chilean(carmen)\n\"\"\""
    ]
  },
  {
    "id": 554,
    "question": "Rosa is the daughter of someone who is responsible for the oversight of traffic.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(rosa, santiago)\nCapitalOf(santiago, chile) ∧ LargestCityOf(santiago, chile)\nDaughterOf(rosa, jose) ∧ BuildingContractor(jose) ∧ Catalan(jose)\nWifeOf(jose, carmen) ∧ Chilean(carmen)\nParentOf(jose, rosa) ∧ ParentOf(carmen, rosa)\n∀x (Catalan(x) → ¬Chilean(x))\n∀x ∃y (BuildingContractor(x) → ConstructionSite(y) ∧ Oversee(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (DaughterOf(rosa, x) ∧ Oversee(x, traffic))\n\"\"\""
    ]
  },
  {
    "id": 104,
    "question": "Well Done 3 is a rap album.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsRapper(tyga)\n∀x ∀y ((IsRapper(x) ∧ ReleasedAlbum(x, y)) → IsRapAlbum(y))\nReleasedAlbum(tyga, wellDone3)\n∀x (IsRapper(x) → ¬IsOperaSinger(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIsRapAlbum(wellDone3)\n\"\"\""
    ]
  },
  {
    "id": 105,
    "question": "Tyga is an opera singer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsRapper(tyga)\n∀x ∀y ((IsRapper(x) ∧ ReleasedAlbum(x, y)) → IsRapAlbum(y))\nReleasedAlbum(tyga, wellDone3)\n∀x (IsRapper(x) → ¬IsOperaSinger(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIsOperaSinger(tyga)\n\"\"\""
    ]
  },
  {
    "id": 106,
    "question": "Well Done 3 is worth listening to.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsRapper(tyga)\n∀x ∀y ((IsRapper(x) ∧ ReleasedAlbum(x, y)) → IsRapAlbum(y))\nReleasedAlbum(tyga, wellDone3)\n∀x (IsRapper(x) → ¬IsOperaSinger(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIsWorthListening(wellDone3)\n\"\"\""
    ]
  },
  {
    "id": 292,
    "question": "Gasland was coproduced by the same person Homesick was from.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(deborahWallace, scotland) ∧ Actress(deborahWallace) ∧ Playwright(deborahWallace) ∧ Producer(deborahWallace)\nPlay(psyche) ∧ BasedOn(psyche, lifeOfJamesMirandaBarry)\nPlay(homesick) ∧ WrittenBy(homesick, deborahWallace) ∧ Play(psyche) ∧ WrittenBy(psyche, deborahWallace) ∧ Play(theVoid) ∧ WrittenBy(theVoid, deborahWallace)\nCoProduce(deborahWallace, gasland)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (CoProduces(x, gasland) ∧ WrittenBy(homesick, x))\n\"\"\""
    ]
  },
  {
    "id": 293,
    "question": "No plays by Deborah Wallace are based on the life of James Miranda Barry.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(deborahWallace, scotland) ∧ Actress(deborahWallace) ∧ Playwright(deborahWallace) ∧ Producer(deborahWallace)\nPlay(psyche) ∧ BasedOn(psyche, lifeOfJamesMirandaBarry)\nPlay(homesick) ∧ WrittenBy(homesick, deborahWallace) ∧ Play(psyche) ∧ WrittenBy(psyche, deborahWallace) ∧ Play(theVoid) ∧ WrittenBy(theVoid, deborahWallace)\nCoProduce(deborahWallace, gasland)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Play(x) ∧ WrittenBy(x, deborahwallace) → ¬BasedOn(x, lifeofjamesmirandabarry))\n\"\"\""
    ]
  },
  {
    "id": 294,
    "question": "Gasland is a play.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(deborahWallace, scotland) ∧ Actress(deborahWallace) ∧ Playwright(deborahWallace) ∧ Producer(deborahWallace)\nPlay(psyche) ∧ BasedOn(psyche, lifeOfJamesMirandaBarry)\nPlay(homesick) ∧ WrittenBy(homesick, deborahWallace) ∧ Play(psyche) ∧ WrittenBy(psyche, deborahWallace) ∧ Play(theVoid) ∧ WrittenBy(theVoid, deborahWallace)\nCoProduce(deborahWallace, gasland)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlay(gasland)\n\"\"\""
    ]
  },
  {
    "id": 1292,
    "question": "Larry is a bear.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) ∧ Need(x, largeTerritory) → TravelFar(x))\n∀x (EatALot(x) → Need(x, largeTerritory))\n∀x (Big(x) ∧ Animal(x) → EatALot(x))\n∀x (Bear(x) → Big(x) ∧ Animal(x))\nBig(larry) ∧ Animal(larry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBear(larry)\n\"\"\""
    ]
  },
  {
    "id": 1293,
    "question": "Larry is not a bear and does not travel far.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) ∧ Need(x, largeTerritory) → TravelFar(x))\n∀x (EatALot(x) → Need(x, largeTerritory))\n∀x (Big(x) ∧ Animal(x) → EatALot(x))\n∀x (Bear(x) → Big(x) ∧ Animal(x))\nBig(larry) ∧ Animal(larry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Bear(larry) ∧ ¬TravelFar(larry)\n\"\"\""
    ]
  },
  {
    "id": 1294,
    "question": "If Larry either travels far or needs a large territory, then Larry is a bear.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) ∧ Need(x, largeTerritory) → TravelFar(x))\n∀x (EatALot(x) → Need(x, largeTerritory))\n∀x (Big(x) ∧ Animal(x) → EatALot(x))\n∀x (Bear(x) → Big(x) ∧ Animal(x))\nBig(larry) ∧ Animal(larry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTravelFar(larry) ⊕ Need(larry, largeTerritory) → Bear(larry)\n\"\"\""
    ]
  },
  {
    "id": 1330,
    "question": "Garry is sentenced to a punishment.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ConvictedCriminal(x) ∧ Innocent(x) → ¬TrulyGuilty(x))\n∀x (ConvictedCriminal(x) ∧ ¬CommitCrime(x) → Innocent(x))\n∀x (ConvictedCriminal(x) ∧ (TrulyGuilty(x) ∨ FoundGuilty(x)))\n∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → SentencedToPunishment(x))\n∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → CanArgueAgainst(x, punishment))\nConvictedCriminal(garry) ∧ (¬(FoundGuilty(garry) ∨ SentencedToPunishment(garry)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSentencedToPunishment(garry)\n\"\"\""
    ]
  },
  {
    "id": 1331,
    "question": "Garry did not commit a crime and can argue against his punishment.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ConvictedCriminal(x) ∧ Innocent(x) → ¬TrulyGuilty(x))\n∀x (ConvictedCriminal(x) ∧ ¬CommitCrime(x) → Innocent(x))\n∀x (ConvictedCriminal(x) ∧ (TrulyGuilty(x) ∨ FoundGuilty(x)))\n∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → SentencedToPunishment(x))\n∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → CanArgueAgainst(x, punishment))\nConvictedCriminal(garry) ∧ (¬(FoundGuilty(garry) ∨ SentencedToPunishment(garry)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬CommitCrime(garry) ∧ CanArgueAgainst(garry, punishment)\n\"\"\""
    ]
  },
  {
    "id": 1332,
    "question": "Garry is not both innocent and someone who did not commit a crime.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ConvictedCriminal(x) ∧ Innocent(x) → ¬TrulyGuilty(x))\n∀x (ConvictedCriminal(x) ∧ ¬CommitCrime(x) → Innocent(x))\n∀x (ConvictedCriminal(x) ∧ (TrulyGuilty(x) ∨ FoundGuilty(x)))\n∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → SentencedToPunishment(x))\n∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → CanArgueAgainst(x, punishment))\nConvictedCriminal(garry) ∧ (¬(FoundGuilty(garry) ∨ SentencedToPunishment(garry)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Innocent(garry) ∧ ¬CommitCrime(garry))\n\"\"\""
    ]
  },
  {
    "id": 400,
    "question": "Phoneix's music is classified under the pop rock genre.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIndiePop(phoenix)\nBand(phoenix) ∧ From(phoenix, france)\n∀x ∃y (Band(x) ∧ From(x, france) ∧ Write(x, y) ∧ Song(y) → InFrench(y) ⊕ InEnglish(y))\n∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))\n∀x (Song(x) ∧ By(phoenix, x) → ¬InFrench(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPopRock(phoenix)\n\"\"\""
    ]
  },
  {
    "id": 401,
    "question": "Phoenix writes songs in French.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIndiePop(phoenix)\nBand(phoenix) ∧ From(phoenix, france)\n∀x ∃y (Band(x) ∧ From(x, france) ∧ Write(x, y) ∧ Song(y) → InFrench(y) ⊕ InEnglish(y))\n∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))\n∀x (Song(x) ∧ By(phoenix, x) → ¬InFrench(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Write(phoenix, y) ∧ Song(x) → InFrench(x))\n\"\"\""
    ]
  }
]