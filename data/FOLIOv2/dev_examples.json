{
    "1014": [
        {
            "id": 921,
            "story_id": 348,
            "context": [
                "All young adults at the event like independence.",
                "All college students at the event are young adults.",
                "All Yale students at the event are college students.",
                "Everyone at the event is a Yale student or a Harvard student.",
                "All Harvard students at the event are diligent.",
                "Susan is at the event, and if Susan is a Harvard student, then she is a young adult.",
                "If Susan is a Yale student, then she does not like independence."
            ],
            "context_fol": [
                "\u2200x (At(x, event) \u2227 YoungAdult(x) \u2192 Like(x, independence))",
                "\u2200x (At(x, event) \u2227 CollegeStudent(x) \u2192 YoungAdult(x))",
                "\u2200x (At(x, event) \u2227 YaleStudent(x) \u2192 CollegeStudent(x))",
                "\u2200x (At(x, event) \u2192 (YaleStudent(x) \u2295 HarvardStudent(x)))",
                "\u2200x (At(x, event) \u2227 HarvardStudent(x) \u2192 Diligent(x))",
                "At(susan, event) \u2227 (HarvardStudent(susan) \u2192 YoungAdult(susan))",
                "YaleStudent(susan) \u2192 \u00acLike(susan, independence)"
            ],
            "question": "Susan is a college student.",
            "question_fol": "CollegeStudent(susan)",
            "label": "Uncertain",
            "predicates_fol": [
                "At(x, y)",
                "YoungAdult(x)",
                "Like(x, y)",
                "CollegeStudent(x)",
                "YaleStudent(x)",
                "HarvardStudent(x)",
                "Diligent(x)"
            ]
        },
        {
            "id": 863,
            "story_id": 333,
            "context": [
                "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
                "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
                "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
                "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
                "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
            ],
            "context_fol": [
                "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))",
                "\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))",
                "\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))",
                "\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))",
                "Ambitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)"
            ],
            "question": "Sam is a young teenage girl who attends music festival frequently",
            "question_fol": "Attend(sam, festival) \u2227 YoungTeenageGirl(sam)",
            "label": "False",
            "predicates_fol": [
                "HaveIn(x, y)",
                "MoveOutEasily(x)",
                "Ambitious(x)",
                "BigFanOfMusic(x)",
                "MusicDecorations(x, y)",
                "AttendFrequently(x, y)",
                "YoungTeenageGirl(x)",
                "BigFanOfPopBand(x)",
                "BigFanOfPopSinger(x)",
                "BBigFanOfPopBand(x)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        }
    ],
    "1015": [
        {
            "id": 921,
            "story_id": 348,
            "context": [
                "All young adults at the event like independence.",
                "All college students at the event are young adults.",
                "All Yale students at the event are college students.",
                "Everyone at the event is a Yale student or a Harvard student.",
                "All Harvard students at the event are diligent.",
                "Susan is at the event, and if Susan is a Harvard student, then she is a young adult.",
                "If Susan is a Yale student, then she does not like independence."
            ],
            "context_fol": [
                "\u2200x (At(x, event) \u2227 YoungAdult(x) \u2192 Like(x, independence))",
                "\u2200x (At(x, event) \u2227 CollegeStudent(x) \u2192 YoungAdult(x))",
                "\u2200x (At(x, event) \u2227 YaleStudent(x) \u2192 CollegeStudent(x))",
                "\u2200x (At(x, event) \u2192 (YaleStudent(x) \u2295 HarvardStudent(x)))",
                "\u2200x (At(x, event) \u2227 HarvardStudent(x) \u2192 Diligent(x))",
                "At(susan, event) \u2227 (HarvardStudent(susan) \u2192 YoungAdult(susan))",
                "YaleStudent(susan) \u2192 \u00acLike(susan, independence)"
            ],
            "question": "Susan is a college student.",
            "question_fol": "CollegeStudent(susan)",
            "label": "Uncertain",
            "predicates_fol": [
                "At(x, y)",
                "YoungAdult(x)",
                "Like(x, y)",
                "CollegeStudent(x)",
                "YaleStudent(x)",
                "HarvardStudent(x)",
                "Diligent(x)"
            ]
        },
        {
            "id": 863,
            "story_id": 333,
            "context": [
                "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
                "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
                "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
                "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
                "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
            ],
            "context_fol": [
                "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))",
                "\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))",
                "\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))",
                "\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))",
                "Ambitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)"
            ],
            "question": "Sam is a young teenage girl who attends music festival frequently",
            "question_fol": "Attend(sam, festival) \u2227 YoungTeenageGirl(sam)",
            "label": "False",
            "predicates_fol": [
                "HaveIn(x, y)",
                "MoveOutEasily(x)",
                "Ambitious(x)",
                "BigFanOfMusic(x)",
                "MusicDecorations(x, y)",
                "AttendFrequently(x, y)",
                "YoungTeenageGirl(x)",
                "BigFanOfPopBand(x)",
                "BigFanOfPopSinger(x)",
                "BBigFanOfPopBand(x)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        }
    ],
    "1016": [
        {
            "id": 921,
            "story_id": 348,
            "context": [
                "All young adults at the event like independence.",
                "All college students at the event are young adults.",
                "All Yale students at the event are college students.",
                "Everyone at the event is a Yale student or a Harvard student.",
                "All Harvard students at the event are diligent.",
                "Susan is at the event, and if Susan is a Harvard student, then she is a young adult.",
                "If Susan is a Yale student, then she does not like independence."
            ],
            "context_fol": [
                "\u2200x (At(x, event) \u2227 YoungAdult(x) \u2192 Like(x, independence))",
                "\u2200x (At(x, event) \u2227 CollegeStudent(x) \u2192 YoungAdult(x))",
                "\u2200x (At(x, event) \u2227 YaleStudent(x) \u2192 CollegeStudent(x))",
                "\u2200x (At(x, event) \u2192 (YaleStudent(x) \u2295 HarvardStudent(x)))",
                "\u2200x (At(x, event) \u2227 HarvardStudent(x) \u2192 Diligent(x))",
                "At(susan, event) \u2227 (HarvardStudent(susan) \u2192 YoungAdult(susan))",
                "YaleStudent(susan) \u2192 \u00acLike(susan, independence)"
            ],
            "question": "Susan is a college student.",
            "question_fol": "CollegeStudent(susan)",
            "label": "Uncertain",
            "predicates_fol": [
                "At(x, y)",
                "YoungAdult(x)",
                "Like(x, y)",
                "CollegeStudent(x)",
                "YaleStudent(x)",
                "HarvardStudent(x)",
                "Diligent(x)"
            ]
        },
        {
            "id": 863,
            "story_id": 333,
            "context": [
                "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
                "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
                "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
                "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
                "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
            ],
            "context_fol": [
                "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))",
                "\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))",
                "\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))",
                "\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))",
                "Ambitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)"
            ],
            "question": "Sam is a young teenage girl who attends music festival frequently",
            "question_fol": "Attend(sam, festival) \u2227 YoungTeenageGirl(sam)",
            "label": "False",
            "predicates_fol": [
                "HaveIn(x, y)",
                "MoveOutEasily(x)",
                "Ambitious(x)",
                "BigFanOfMusic(x)",
                "MusicDecorations(x, y)",
                "AttendFrequently(x, y)",
                "YoungTeenageGirl(x)",
                "BigFanOfPopBand(x)",
                "BigFanOfPopSinger(x)",
                "BBigFanOfPopBand(x)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        }
    ],
    "1208": [
        {
            "id": 1123,
            "story_id": 405,
            "context": [
                "Everyone who works in the office is a commuter. ",
                "People either work in the office or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup. ",
                "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
            ],
            "context_fol": [
                "\u2200x (WorkIn(x, office) \u2192 Commuter(x))",
                "\u2200x (WorkIn(x, office) \u2295 WorkFrom(x, home))",
                "\u2200x (WorkFrom(x, home) \u2192 Have(x, relaxedSchedule))",
                "Commuter(george) \u2295 Have(george, homeOffice)",
                "(WorkFrom(george, home) \u2295 Have(george, homeOffice)) \u2192 \u00acWorkFrom(george, home) \u2227 Commuter(george)"
            ],
            "question": "George is a person who works from home.",
            "question_fol": "WorkFrom(george, home)",
            "label": "Uncertain",
            "predicates_fol": [
                "WorkIn(x, y)",
                "Commuter(x)",
                "WorkFrom(x, y)",
                "Have(x, y)"
            ]
        },
        {
            "id": 186,
            "story_id": 63,
            "context": [
                "All students who attend in person have registered for the conference. ",
                "Students either attend the conference in person or remotely. ",
                "No students from China attend the conference remotely. ",
                "James attends the conference, but he does not attend the conference remotely.",
                "Jack attends the conference, and he is a student from China."
            ],
            "context_fol": [
                "\u2200x (AttendInPerson(x) \u2192 Registered(x))",
                "\u2200x (Attend(x) \u2192 (AttendInPerson(x) \u2295 AttendRemotely(x)))",
                "\u2200x ((Attend(x) \u2227 FromChina(x)) \u2192 \u00acAttendRemotely(x))",
                "Attend(james) \u2227 (\u00acAttendRemotely(james))",
                "FromChina(jack) \u2227 Attend(jack)"
            ],
            "question": "James attends the conference but not in person.",
            "question_fol": "Attend(james) \u2227 (\u00acAttendInPerson(james))",
            "label": "False",
            "predicates_fol": [
                "AttendInPerson(x)",
                "Registered(x)",
                "Attend(x)",
                "AttendRemotely(x)",
                "FromChina(x)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        }
    ],
    "1209": [
        {
            "id": 1123,
            "story_id": 405,
            "context": [
                "Everyone who works in the office is a commuter. ",
                "People either work in the office or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup. ",
                "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
            ],
            "context_fol": [
                "\u2200x (WorkIn(x, office) \u2192 Commuter(x))",
                "\u2200x (WorkIn(x, office) \u2295 WorkFrom(x, home))",
                "\u2200x (WorkFrom(x, home) \u2192 Have(x, relaxedSchedule))",
                "Commuter(george) \u2295 Have(george, homeOffice)",
                "(WorkFrom(george, home) \u2295 Have(george, homeOffice)) \u2192 \u00acWorkFrom(george, home) \u2227 Commuter(george)"
            ],
            "question": "George is a person who works from home.",
            "question_fol": "WorkFrom(george, home)",
            "label": "Uncertain",
            "predicates_fol": [
                "WorkIn(x, y)",
                "Commuter(x)",
                "WorkFrom(x, y)",
                "Have(x, y)"
            ]
        },
        {
            "id": 186,
            "story_id": 63,
            "context": [
                "All students who attend in person have registered for the conference. ",
                "Students either attend the conference in person or remotely. ",
                "No students from China attend the conference remotely. ",
                "James attends the conference, but he does not attend the conference remotely.",
                "Jack attends the conference, and he is a student from China."
            ],
            "context_fol": [
                "\u2200x (AttendInPerson(x) \u2192 Registered(x))",
                "\u2200x (Attend(x) \u2192 (AttendInPerson(x) \u2295 AttendRemotely(x)))",
                "\u2200x ((Attend(x) \u2227 FromChina(x)) \u2192 \u00acAttendRemotely(x))",
                "Attend(james) \u2227 (\u00acAttendRemotely(james))",
                "FromChina(jack) \u2227 Attend(jack)"
            ],
            "question": "James attends the conference but not in person.",
            "question_fol": "Attend(james) \u2227 (\u00acAttendInPerson(james))",
            "label": "False",
            "predicates_fol": [
                "AttendInPerson(x)",
                "Registered(x)",
                "Attend(x)",
                "AttendRemotely(x)",
                "FromChina(x)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        }
    ],
    "1210": [
        {
            "id": 1123,
            "story_id": 405,
            "context": [
                "Everyone who works in the office is a commuter. ",
                "People either work in the office or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup. ",
                "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
            ],
            "context_fol": [
                "\u2200x (WorkIn(x, office) \u2192 Commuter(x))",
                "\u2200x (WorkIn(x, office) \u2295 WorkFrom(x, home))",
                "\u2200x (WorkFrom(x, home) \u2192 Have(x, relaxedSchedule))",
                "Commuter(george) \u2295 Have(george, homeOffice)",
                "(WorkFrom(george, home) \u2295 Have(george, homeOffice)) \u2192 \u00acWorkFrom(george, home) \u2227 Commuter(george)"
            ],
            "question": "George is a person who works from home.",
            "question_fol": "WorkFrom(george, home)",
            "label": "Uncertain",
            "predicates_fol": [
                "WorkIn(x, y)",
                "Commuter(x)",
                "WorkFrom(x, y)",
                "Have(x, y)"
            ]
        },
        {
            "id": 186,
            "story_id": 63,
            "context": [
                "All students who attend in person have registered for the conference. ",
                "Students either attend the conference in person or remotely. ",
                "No students from China attend the conference remotely. ",
                "James attends the conference, but he does not attend the conference remotely.",
                "Jack attends the conference, and he is a student from China."
            ],
            "context_fol": [
                "\u2200x (AttendInPerson(x) \u2192 Registered(x))",
                "\u2200x (Attend(x) \u2192 (AttendInPerson(x) \u2295 AttendRemotely(x)))",
                "\u2200x ((Attend(x) \u2227 FromChina(x)) \u2192 \u00acAttendRemotely(x))",
                "Attend(james) \u2227 (\u00acAttendRemotely(james))",
                "FromChina(jack) \u2227 Attend(jack)"
            ],
            "question": "James attends the conference but not in person.",
            "question_fol": "Attend(james) \u2227 (\u00acAttendInPerson(james))",
            "label": "False",
            "predicates_fol": [
                "AttendInPerson(x)",
                "Registered(x)",
                "Attend(x)",
                "AttendRemotely(x)",
                "FromChina(x)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        }
    ],
    "563": [
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 691,
            "story_id": 248,
            "context": [
                "Kangaroos are an animal.",
                "No Kangaroos live in Germany.",
                "Jane will fly to Germany if she saves enough money for the summer.",
                "If Jane flies to Germany, she will go to the Berlin Zoo.",
                "If someone goes to the Berlin Zoo, they will see some of the animals in Germany."
            ],
            "context_fol": [
                "\u2200x (Kangaroo(x) \u2192 Animal(x))",
                "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))",
                "SavesFor(jane, enoughMoney, theSummer) \u2192 FlyTo(jane, germany)",
                "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ",
                "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 LiveIn(x, germany) \u2227 Animal(y) \u2192 WillSee(y, x, berlinzoo))"
            ],
            "question": "Jane will see a kangaroo if she saves enough money for the summer.",
            "question_fol": "\u2203x (SavesFor(jane, enoughMoney, theSummer)  \u2227 Kangaroo(x) \u2192 WillSee(x, jane, berlinzoo))",
            "label": "False",
            "predicates_fol": [
                "Kangaroo(x)",
                "Animal(x)",
                "LiveIn(x, y)",
                "SavesFor(x, y)",
                "FlyTo(x, y)",
                "GoTo(x, y)",
                "WillSee(x, y)"
            ]
        }
    ],
    "564": [
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 691,
            "story_id": 248,
            "context": [
                "Kangaroos are an animal.",
                "No Kangaroos live in Germany.",
                "Jane will fly to Germany if she saves enough money for the summer.",
                "If Jane flies to Germany, she will go to the Berlin Zoo.",
                "If someone goes to the Berlin Zoo, they will see some of the animals in Germany."
            ],
            "context_fol": [
                "\u2200x (Kangaroo(x) \u2192 Animal(x))",
                "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))",
                "SavesFor(jane, enoughMoney, theSummer) \u2192 FlyTo(jane, germany)",
                "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ",
                "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 LiveIn(x, germany) \u2227 Animal(y) \u2192 WillSee(y, x, berlinzoo))"
            ],
            "question": "Jane will see a kangaroo if she saves enough money for the summer.",
            "question_fol": "\u2203x (SavesFor(jane, enoughMoney, theSummer)  \u2227 Kangaroo(x) \u2192 WillSee(x, jane, berlinzoo))",
            "label": "False",
            "predicates_fol": [
                "Kangaroo(x)",
                "Animal(x)",
                "LiveIn(x, y)",
                "SavesFor(x, y)",
                "FlyTo(x, y)",
                "GoTo(x, y)",
                "WillSee(x, y)"
            ]
        }
    ],
    "565": [
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 691,
            "story_id": 248,
            "context": [
                "Kangaroos are an animal.",
                "No Kangaroos live in Germany.",
                "Jane will fly to Germany if she saves enough money for the summer.",
                "If Jane flies to Germany, she will go to the Berlin Zoo.",
                "If someone goes to the Berlin Zoo, they will see some of the animals in Germany."
            ],
            "context_fol": [
                "\u2200x (Kangaroo(x) \u2192 Animal(x))",
                "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))",
                "SavesFor(jane, enoughMoney, theSummer) \u2192 FlyTo(jane, germany)",
                "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ",
                "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 LiveIn(x, germany) \u2227 Animal(y) \u2192 WillSee(y, x, berlinzoo))"
            ],
            "question": "Jane will see a kangaroo if she saves enough money for the summer.",
            "question_fol": "\u2203x (SavesFor(jane, enoughMoney, theSummer)  \u2227 Kangaroo(x) \u2192 WillSee(x, jane, berlinzoo))",
            "label": "False",
            "predicates_fol": [
                "Kangaroo(x)",
                "Animal(x)",
                "LiveIn(x, y)",
                "SavesFor(x, y)",
                "FlyTo(x, y)",
                "GoTo(x, y)",
                "WillSee(x, y)"
            ]
        }
    ],
    "0": [
        {
            "id": 1264,
            "story_id": 440,
            "context": [
                "All tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "All huskies are dogs.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2295 Cat(fido)"
            ],
            "question": "Fido is a husky animal.",
            "question_fol": "Husky(fido)",
            "label": "False",
            "predicates_fol": [
                "Tiger(x)",
                "Cat(x)",
                "Dog(x)",
                "BengalTiger(x)",
                "Husky(x)"
            ]
        },
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        }
    ],
    "1": [
        {
            "id": 1264,
            "story_id": 440,
            "context": [
                "All tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "All huskies are dogs.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2295 Cat(fido)"
            ],
            "question": "Fido is a husky animal.",
            "question_fol": "Husky(fido)",
            "label": "False",
            "predicates_fol": [
                "Tiger(x)",
                "Cat(x)",
                "Dog(x)",
                "BengalTiger(x)",
                "Husky(x)"
            ]
        },
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        }
    ],
    "2": [
        {
            "id": 1264,
            "story_id": 440,
            "context": [
                "All tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "All huskies are dogs.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2295 Cat(fido)"
            ],
            "question": "Fido is a husky animal.",
            "question_fol": "Husky(fido)",
            "label": "False",
            "predicates_fol": [
                "Tiger(x)",
                "Cat(x)",
                "Dog(x)",
                "BengalTiger(x)",
                "Husky(x)"
            ]
        },
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        }
    ],
    "57": [
        {
            "id": 1152,
            "story_id": 411,
            "context": [
                "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
                "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
                "Some games that support Windows are developed by Nintendo.",
                "All multiplatform games can be played on a wide range of devices.",
                "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
            ],
            "context_fol": [
                "\u2200x (ATop3BestSellingVideoGame(x) \u2192 Multiplatform(x))",
                "\u2200x (SoldMoreThan100MillionCopies(x) \u2192 ATop3BestSellingVideoGame(x))",
                "\u2203x ((SupportsWindows(x) \u2227 AGameDevelopedByNintendo(x)))",
                "\u2200x (Multiplatform(x) \u2192 CanBePlayedOnAWideRangeOfDevices(x))",
                "\u00ac(DevelopedByNintendo(PokemonDiamond) \u2228 CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
            ],
            "question": "Pokemon Diamond version supports Windows.",
            "question_fol": "Game(PokemonDiamond) \u2227 SupportsWindows(PokemonDiamond)",
            "label": "Uncertain",
            "predicates_fol": [
                "ATop3BestSellingVideoGame(x)",
                "Multiplatform(x)",
                "SoldMoreThan100MillionCopies(x)",
                "SupportsWindows(x)",
                "AGameDevelopedByNintendo(x)",
                "CanBePlayedOnAWideRangeOfDevices(x)",
                "DevelopedByNintendo(x)"
            ]
        },
        {
            "id": 273,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo) \u2227 HoldingCompany(x) ",
                "\u2200x (HoldingCompany(x) \u2192 \u2203y(Company(y) \u2227 Holds(x, y)))",
                "DisbandsIn(tecmo, japan) \u2227 Survives(koei) \u2227 Renames(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "question_fol": "\u2203x (Company(x) \u2227 Holds(koeitecmo, x))",
            "label": "True",
            "predicates_fol": [
                "Japanese(x)",
                "VideoGameHoldingCompany(x)",
                "AnimeHoldingCompany(x)",
                "HoldingCompany(x)",
                "Company(x)",
                "Holds(x, y)",
                "DisbandsIn(x, y)",
                "Survives(x)",
                "Renames(x)"
            ]
        },
        {
            "id": 1166,
            "story_id": 415,
            "context": [
                "All books written by Neil Gaiman have sold more than one thousand copies.",
                "Some books that have won Hugo Awards are written by Neil Gaiman.",
                "Tomas has read all books written by Tolkien. ",
                "Either Tomas has read Hamlet, or it has sold more than one thousand copies.",
                "Hamlet has either sold more than one thousand copies or it is written by Neil Gaiman."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))",
                "\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))",
                "\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))",
                "ReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))",
                "\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)"
            ],
            "question": "Hamlet has won a Hugo Award.",
            "question_fol": "Win(hamlet, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "SoldCopies(x, y)",
                "Win(x, y)",
                "ReadBy(x, y)"
            ]
        }
    ],
    "58": [
        {
            "id": 1152,
            "story_id": 411,
            "context": [
                "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
                "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
                "Some games that support Windows are developed by Nintendo.",
                "All multiplatform games can be played on a wide range of devices.",
                "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
            ],
            "context_fol": [
                "\u2200x (ATop3BestSellingVideoGame(x) \u2192 Multiplatform(x))",
                "\u2200x (SoldMoreThan100MillionCopies(x) \u2192 ATop3BestSellingVideoGame(x))",
                "\u2203x ((SupportsWindows(x) \u2227 AGameDevelopedByNintendo(x)))",
                "\u2200x (Multiplatform(x) \u2192 CanBePlayedOnAWideRangeOfDevices(x))",
                "\u00ac(DevelopedByNintendo(PokemonDiamond) \u2228 CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
            ],
            "question": "Pokemon Diamond version supports Windows.",
            "question_fol": "Game(PokemonDiamond) \u2227 SupportsWindows(PokemonDiamond)",
            "label": "Uncertain",
            "predicates_fol": [
                "ATop3BestSellingVideoGame(x)",
                "Multiplatform(x)",
                "SoldMoreThan100MillionCopies(x)",
                "SupportsWindows(x)",
                "AGameDevelopedByNintendo(x)",
                "CanBePlayedOnAWideRangeOfDevices(x)",
                "DevelopedByNintendo(x)"
            ]
        },
        {
            "id": 273,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo) \u2227 HoldingCompany(x) ",
                "\u2200x (HoldingCompany(x) \u2192 \u2203y(Company(y) \u2227 Holds(x, y)))",
                "DisbandsIn(tecmo, japan) \u2227 Survives(koei) \u2227 Renames(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "question_fol": "\u2203x (Company(x) \u2227 Holds(koeitecmo, x))",
            "label": "True",
            "predicates_fol": [
                "Japanese(x)",
                "VideoGameHoldingCompany(x)",
                "AnimeHoldingCompany(x)",
                "HoldingCompany(x)",
                "Company(x)",
                "Holds(x, y)",
                "DisbandsIn(x, y)",
                "Survives(x)",
                "Renames(x)"
            ]
        },
        {
            "id": 1166,
            "story_id": 415,
            "context": [
                "All books written by Neil Gaiman have sold more than one thousand copies.",
                "Some books that have won Hugo Awards are written by Neil Gaiman.",
                "Tomas has read all books written by Tolkien. ",
                "Either Tomas has read Hamlet, or it has sold more than one thousand copies.",
                "Hamlet has either sold more than one thousand copies or it is written by Neil Gaiman."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))",
                "\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))",
                "\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))",
                "ReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))",
                "\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)"
            ],
            "question": "Hamlet has won a Hugo Award.",
            "question_fol": "Win(hamlet, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "SoldCopies(x, y)",
                "Win(x, y)",
                "ReadBy(x, y)"
            ]
        }
    ],
    "59": [
        {
            "id": 1152,
            "story_id": 411,
            "context": [
                "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
                "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
                "Some games that support Windows are developed by Nintendo.",
                "All multiplatform games can be played on a wide range of devices.",
                "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
            ],
            "context_fol": [
                "\u2200x (ATop3BestSellingVideoGame(x) \u2192 Multiplatform(x))",
                "\u2200x (SoldMoreThan100MillionCopies(x) \u2192 ATop3BestSellingVideoGame(x))",
                "\u2203x ((SupportsWindows(x) \u2227 AGameDevelopedByNintendo(x)))",
                "\u2200x (Multiplatform(x) \u2192 CanBePlayedOnAWideRangeOfDevices(x))",
                "\u00ac(DevelopedByNintendo(PokemonDiamond) \u2228 CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
            ],
            "question": "Pokemon Diamond version supports Windows.",
            "question_fol": "Game(PokemonDiamond) \u2227 SupportsWindows(PokemonDiamond)",
            "label": "Uncertain",
            "predicates_fol": [
                "ATop3BestSellingVideoGame(x)",
                "Multiplatform(x)",
                "SoldMoreThan100MillionCopies(x)",
                "SupportsWindows(x)",
                "AGameDevelopedByNintendo(x)",
                "CanBePlayedOnAWideRangeOfDevices(x)",
                "DevelopedByNintendo(x)"
            ]
        },
        {
            "id": 273,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo) \u2227 HoldingCompany(x) ",
                "\u2200x (HoldingCompany(x) \u2192 \u2203y(Company(y) \u2227 Holds(x, y)))",
                "DisbandsIn(tecmo, japan) \u2227 Survives(koei) \u2227 Renames(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "question_fol": "\u2203x (Company(x) \u2227 Holds(koeitecmo, x))",
            "label": "True",
            "predicates_fol": [
                "Japanese(x)",
                "VideoGameHoldingCompany(x)",
                "AnimeHoldingCompany(x)",
                "HoldingCompany(x)",
                "Company(x)",
                "Holds(x, y)",
                "DisbandsIn(x, y)",
                "Survives(x)",
                "Renames(x)"
            ]
        },
        {
            "id": 1166,
            "story_id": 415,
            "context": [
                "All books written by Neil Gaiman have sold more than one thousand copies.",
                "Some books that have won Hugo Awards are written by Neil Gaiman.",
                "Tomas has read all books written by Tolkien. ",
                "Either Tomas has read Hamlet, or it has sold more than one thousand copies.",
                "Hamlet has either sold more than one thousand copies or it is written by Neil Gaiman."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))",
                "\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))",
                "\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))",
                "ReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))",
                "\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)"
            ],
            "question": "Hamlet has won a Hugo Award.",
            "question_fol": "Win(hamlet, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "SoldCopies(x, y)",
                "Win(x, y)",
                "ReadBy(x, y)"
            ]
        }
    ],
    "726": [
        {
            "id": 734,
            "story_id": 290,
            "context": [
                "All tables are round.",
                "Some pieces of furniture are tables."
            ],
            "context_fol": [
                "\u2200x (Table(x) \u2192 Round(x))",
                "\u2203x \u2203y (Furniture(x) \u2227 Furniture(y) \u2227 Table(x) \u2227 Table(y) \u2227 \u00ac(x=y))"
            ],
            "question": "Some pieces of furniture are round.",
            "question_fol": "\u2203x \u2203y (Furniture(x) \u2227 Furniture(y) \u2227 Round(x) \u2227 Round(y) \u2227 \u00ac(x=y))",
            "label": "True",
            "predicates_fol": [
                "Table(x)",
                "Round(x)",
                "Furniture(x)"
            ]
        },
        {
            "id": 728,
            "story_id": 284,
            "context": [
                "Each building is tall. ",
                "Everything tall has height."
            ],
            "context_fol": [
                "\u2200x (Building(x) \u2192 Tall(x))",
                "\u2200x (Tall(x) \u2192 Height(x))"
            ],
            "question": "All buildings are magnificent.",
            "question_fol": "\u2200x (Building(x) \u2192 Magnificent(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Building(x)",
                "Tall(x)",
                "Height(x)"
            ]
        },
        {
            "id": 737,
            "story_id": 293,
            "context": [
                "All dogs sleep.",
                "Some four-legged animals are dogs."
            ],
            "context_fol": [
                "\u2200x (Dog(x) \u2192 Sleep(x))",
                "\u2203x \u2203y (FourLegged(x) \u2227 Animal(x) \u2227 Dog(x) \u2227 FourLegged(y) \u2227 Animal(y) \u2227 Dog(y) \u2227 \u00ac(x=y))"
            ],
            "question": "Some four-legged animals sleep.",
            "question_fol": "\u2203x \u2203y (FourLegged(x) \u2227 Animal(x) \u2227 Sleeps(x) \u2227 FourLegged(y) \u2227 Animal(y) \u2227 Sleeps(y) \u2227 \u00ac(x=y))",
            "label": "True",
            "predicates_fol": [
                "Dog(x)",
                "Sleep(x)",
                "FourLegged(x)",
                "Animal(x)"
            ]
        }
    ],
    "1361": [
        {
            "id": 698,
            "story_id": 254,
            "context": [
                "All rabbits have fur",
                "Some pets are rabbits."
            ],
            "context_fol": [
                "\u2200x (Rabbit(x) \u2192 Have(x, fur))",
                "\u2203x (Pet(x) \u2227 Rabbit(x))"
            ],
            "question": "Some pets do not have fur.",
            "question_fol": "\u2203x \u2203y (Pet(x) \u2227 Pet(y) \u2227 \u00acHave(x, fur) \u2227 \u00acHave(y, fur))",
            "label": "Uncertain",
            "predicates_fol": [
                "Rabbit(x)",
                "Have(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 697,
            "story_id": 253,
            "context": [
                "No reptile has fur.",
                "All snakes are reptiles."
            ],
            "context_fol": [
                "\u2200x (Reptile(x) \u2192 \u00acHave(x, fur))",
                "\u2200x (Snake(x) \u2192 Reptile(x))"
            ],
            "question": "Some snake has fur.",
            "question_fol": "\u2203x (Snake(x) \u2227 Have(x, fur))",
            "label": "False",
            "predicates_fol": [
                "Reptile(x)",
                "Have(x, y)",
                "Snake(x)"
            ]
        }
    ],
    "1362": [
        {
            "id": 698,
            "story_id": 254,
            "context": [
                "All rabbits have fur",
                "Some pets are rabbits."
            ],
            "context_fol": [
                "\u2200x (Rabbit(x) \u2192 Have(x, fur))",
                "\u2203x (Pet(x) \u2227 Rabbit(x))"
            ],
            "question": "Some pets do not have fur.",
            "question_fol": "\u2203x \u2203y (Pet(x) \u2227 Pet(y) \u2227 \u00acHave(x, fur) \u2227 \u00acHave(y, fur))",
            "label": "Uncertain",
            "predicates_fol": [
                "Rabbit(x)",
                "Have(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 697,
            "story_id": 253,
            "context": [
                "No reptile has fur.",
                "All snakes are reptiles."
            ],
            "context_fol": [
                "\u2200x (Reptile(x) \u2192 \u00acHave(x, fur))",
                "\u2200x (Snake(x) \u2192 Reptile(x))"
            ],
            "question": "Some snake has fur.",
            "question_fol": "\u2203x (Snake(x) \u2227 Have(x, fur))",
            "label": "False",
            "predicates_fol": [
                "Reptile(x)",
                "Have(x, y)",
                "Snake(x)"
            ]
        }
    ],
    "1363": [
        {
            "id": 698,
            "story_id": 254,
            "context": [
                "All rabbits have fur",
                "Some pets are rabbits."
            ],
            "context_fol": [
                "\u2200x (Rabbit(x) \u2192 Have(x, fur))",
                "\u2203x (Pet(x) \u2227 Rabbit(x))"
            ],
            "question": "Some pets do not have fur.",
            "question_fol": "\u2203x \u2203y (Pet(x) \u2227 Pet(y) \u2227 \u00acHave(x, fur) \u2227 \u00acHave(y, fur))",
            "label": "Uncertain",
            "predicates_fol": [
                "Rabbit(x)",
                "Have(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 697,
            "story_id": 253,
            "context": [
                "No reptile has fur.",
                "All snakes are reptiles."
            ],
            "context_fol": [
                "\u2200x (Reptile(x) \u2192 \u00acHave(x, fur))",
                "\u2200x (Snake(x) \u2192 Reptile(x))"
            ],
            "question": "Some snake has fur.",
            "question_fol": "\u2203x (Snake(x) \u2227 Have(x, fur))",
            "label": "False",
            "predicates_fol": [
                "Reptile(x)",
                "Have(x, y)",
                "Snake(x)"
            ]
        }
    ],
    "1364": [
        {
            "id": 698,
            "story_id": 254,
            "context": [
                "All rabbits have fur",
                "Some pets are rabbits."
            ],
            "context_fol": [
                "\u2200x (Rabbit(x) \u2192 Have(x, fur))",
                "\u2203x (Pet(x) \u2227 Rabbit(x))"
            ],
            "question": "Some pets do not have fur.",
            "question_fol": "\u2203x \u2203y (Pet(x) \u2227 Pet(y) \u2227 \u00acHave(x, fur) \u2227 \u00acHave(y, fur))",
            "label": "Uncertain",
            "predicates_fol": [
                "Rabbit(x)",
                "Have(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 697,
            "story_id": 253,
            "context": [
                "No reptile has fur.",
                "All snakes are reptiles."
            ],
            "context_fol": [
                "\u2200x (Reptile(x) \u2192 \u00acHave(x, fur))",
                "\u2200x (Snake(x) \u2192 Reptile(x))"
            ],
            "question": "Some snake has fur.",
            "question_fol": "\u2203x (Snake(x) \u2227 Have(x, fur))",
            "label": "False",
            "predicates_fol": [
                "Reptile(x)",
                "Have(x, y)",
                "Snake(x)"
            ]
        }
    ],
    "1365": [
        {
            "id": 698,
            "story_id": 254,
            "context": [
                "All rabbits have fur",
                "Some pets are rabbits."
            ],
            "context_fol": [
                "\u2200x (Rabbit(x) \u2192 Have(x, fur))",
                "\u2203x (Pet(x) \u2227 Rabbit(x))"
            ],
            "question": "Some pets do not have fur.",
            "question_fol": "\u2203x \u2203y (Pet(x) \u2227 Pet(y) \u2227 \u00acHave(x, fur) \u2227 \u00acHave(y, fur))",
            "label": "Uncertain",
            "predicates_fol": [
                "Rabbit(x)",
                "Have(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 697,
            "story_id": 253,
            "context": [
                "No reptile has fur.",
                "All snakes are reptiles."
            ],
            "context_fol": [
                "\u2200x (Reptile(x) \u2192 \u00acHave(x, fur))",
                "\u2200x (Snake(x) \u2192 Reptile(x))"
            ],
            "question": "Some snake has fur.",
            "question_fol": "\u2203x (Snake(x) \u2227 Have(x, fur))",
            "label": "False",
            "predicates_fol": [
                "Reptile(x)",
                "Have(x, y)",
                "Snake(x)"
            ]
        }
    ],
    "530": [
        {
            "id": 1192,
            "story_id": 422,
            "context": [
                "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
                "Some of the customers in James' family go to the cinema every week.",
                "Customers in James' family subscribe to AMC A-List or HBO service. ",
                "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
                "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
                "Lily is in James' family; she watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 SubscribedTo(x, aMCAList)) \u2192  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
                "\u2203x \u2203y (Customer(x) \u2227 In(x, jameSFamily) \u2227 GoToEveryWeek(x, cinema) \u2227 (\u00ac(x=y)) \u2227 Customer(y) \u2227 In(y, jameSFamily) \u2227 GoToEveryWeek(y, cinema))",
                "\u2200x (Customer(x) \u2227 In(x, jameSFamily) \u2227 (SubscribedTo(x, aMCAList) \u2228 SubscribedTo(x, hBO)))",
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 Prefer(x, tVSeries)) \u2192 (\u00acWatchIn(x, tV, cinema)))",
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227  SubscribedTo(x, hBO)) \u2192 Prefer(x, tVSeries))",
                "Customer(lily) \u2227 In(lily, jameSFamily \u2227 WatchIn(lily, tV, cinema)"
            ],
            "question": "Lily goes to cinemas every week.",
            "question_fol": "GoToEveryWeek(lily, cinema)",
            "label": "Uncertain",
            "predicates_fol": [
                "Customer(x)",
                "In(x, y)",
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x)",
                "GoToEveryWeek(x, y)",
                "Prefer(x, y)",
                "WatchIn(x, y)"
            ]
        },
        {
            "id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A-List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, aMCAList)",
                "Prefer(peter, tVSeries)"
            ],
            "question": "James cannot watch 3 movies every week without any additional fees.",
            "question_fol": "\u00acEligibleForThreeFreeMovies(james)",
            "label": "False",
            "predicates_fol": [
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMovies(x)",
                "CinemaEveryWeek(x)",
                "Prefer(x, y)",
                "WatchTVIn(x, y)"
            ]
        },
        {
            "id": 1385,
            "story_id": 477,
            "context": [
                "All social media applications containing chat features are software. ",
                "All social media applications that allow users to send messages to each other have chat features. ",
                "All social media applications have chat features or video features. ",
                "All social media applications that have video features allow users to upload videos. ",
                "All software that is social media applications are computer programs. ",
                "All social media applications that have high engagement metrics are addictive. ",
                "If a social media application is addictive, then it is not ideal for preteens. ",
                "TikTok is a social media application, and it is not ideal for preteens. "
            ],
            "context_fol": [
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, chatFeature) \u2192 Software(x))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 AllowToSendTo(x, user, message) \u2192 Contain(x, chatFeature))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2192 Contain(x, chatFeature) \u2228 Contain(x, videoFeature))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, videoFeature) \u2192 Allow(x, user, uploadVideo))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Software(x) \u2192 ComputerProgram(x))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227Have(x, highEngagementMetric) \u2192 Addictive(x))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Addictive(x) \u2192 \u00acIdealFor(x, preteen))",
                "SocialMedia(tikTok) \u2227 Application(tikTok) \u2227 \u00acIdealFor(tikTok, preteen)"
            ],
            "question": "TikTok is a computer program.",
            "question_fol": "ComputerProgram(tikTok)",
            "label": "True",
            "predicates_fol": [
                "SocialMedia(x)",
                "Application(x)",
                "Contain(x, y)",
                "Software(x)",
                "AllowToSendTo(x, y)",
                "Allow(x, y)",
                "ComputerProgram(x)",
                "Have(x, y)",
                "Addictive(x)",
                "IdealFor(x, y)"
            ]
        }
    ],
    "531": [
        {
            "id": 1192,
            "story_id": 422,
            "context": [
                "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
                "Some of the customers in James' family go to the cinema every week.",
                "Customers in James' family subscribe to AMC A-List or HBO service. ",
                "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
                "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
                "Lily is in James' family; she watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 SubscribedTo(x, aMCAList)) \u2192  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
                "\u2203x \u2203y (Customer(x) \u2227 In(x, jameSFamily) \u2227 GoToEveryWeek(x, cinema) \u2227 (\u00ac(x=y)) \u2227 Customer(y) \u2227 In(y, jameSFamily) \u2227 GoToEveryWeek(y, cinema))",
                "\u2200x (Customer(x) \u2227 In(x, jameSFamily) \u2227 (SubscribedTo(x, aMCAList) \u2228 SubscribedTo(x, hBO)))",
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 Prefer(x, tVSeries)) \u2192 (\u00acWatchIn(x, tV, cinema)))",
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227  SubscribedTo(x, hBO)) \u2192 Prefer(x, tVSeries))",
                "Customer(lily) \u2227 In(lily, jameSFamily \u2227 WatchIn(lily, tV, cinema)"
            ],
            "question": "Lily goes to cinemas every week.",
            "question_fol": "GoToEveryWeek(lily, cinema)",
            "label": "Uncertain",
            "predicates_fol": [
                "Customer(x)",
                "In(x, y)",
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x)",
                "GoToEveryWeek(x, y)",
                "Prefer(x, y)",
                "WatchIn(x, y)"
            ]
        },
        {
            "id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A-List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, aMCAList)",
                "Prefer(peter, tVSeries)"
            ],
            "question": "James cannot watch 3 movies every week without any additional fees.",
            "question_fol": "\u00acEligibleForThreeFreeMovies(james)",
            "label": "False",
            "predicates_fol": [
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMovies(x)",
                "CinemaEveryWeek(x)",
                "Prefer(x, y)",
                "WatchTVIn(x, y)"
            ]
        },
        {
            "id": 1385,
            "story_id": 477,
            "context": [
                "All social media applications containing chat features are software. ",
                "All social media applications that allow users to send messages to each other have chat features. ",
                "All social media applications have chat features or video features. ",
                "All social media applications that have video features allow users to upload videos. ",
                "All software that is social media applications are computer programs. ",
                "All social media applications that have high engagement metrics are addictive. ",
                "If a social media application is addictive, then it is not ideal for preteens. ",
                "TikTok is a social media application, and it is not ideal for preteens. "
            ],
            "context_fol": [
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, chatFeature) \u2192 Software(x))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 AllowToSendTo(x, user, message) \u2192 Contain(x, chatFeature))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2192 Contain(x, chatFeature) \u2228 Contain(x, videoFeature))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, videoFeature) \u2192 Allow(x, user, uploadVideo))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Software(x) \u2192 ComputerProgram(x))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227Have(x, highEngagementMetric) \u2192 Addictive(x))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Addictive(x) \u2192 \u00acIdealFor(x, preteen))",
                "SocialMedia(tikTok) \u2227 Application(tikTok) \u2227 \u00acIdealFor(tikTok, preteen)"
            ],
            "question": "TikTok is a computer program.",
            "question_fol": "ComputerProgram(tikTok)",
            "label": "True",
            "predicates_fol": [
                "SocialMedia(x)",
                "Application(x)",
                "Contain(x, y)",
                "Software(x)",
                "AllowToSendTo(x, y)",
                "Allow(x, y)",
                "ComputerProgram(x)",
                "Have(x, y)",
                "Addictive(x)",
                "IdealFor(x, y)"
            ]
        }
    ],
    "532": [
        {
            "id": 1192,
            "story_id": 422,
            "context": [
                "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
                "Some of the customers in James' family go to the cinema every week.",
                "Customers in James' family subscribe to AMC A-List or HBO service. ",
                "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
                "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
                "Lily is in James' family; she watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 SubscribedTo(x, aMCAList)) \u2192  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
                "\u2203x \u2203y (Customer(x) \u2227 In(x, jameSFamily) \u2227 GoToEveryWeek(x, cinema) \u2227 (\u00ac(x=y)) \u2227 Customer(y) \u2227 In(y, jameSFamily) \u2227 GoToEveryWeek(y, cinema))",
                "\u2200x (Customer(x) \u2227 In(x, jameSFamily) \u2227 (SubscribedTo(x, aMCAList) \u2228 SubscribedTo(x, hBO)))",
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 Prefer(x, tVSeries)) \u2192 (\u00acWatchIn(x, tV, cinema)))",
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227  SubscribedTo(x, hBO)) \u2192 Prefer(x, tVSeries))",
                "Customer(lily) \u2227 In(lily, jameSFamily \u2227 WatchIn(lily, tV, cinema)"
            ],
            "question": "Lily goes to cinemas every week.",
            "question_fol": "GoToEveryWeek(lily, cinema)",
            "label": "Uncertain",
            "predicates_fol": [
                "Customer(x)",
                "In(x, y)",
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x)",
                "GoToEveryWeek(x, y)",
                "Prefer(x, y)",
                "WatchIn(x, y)"
            ]
        },
        {
            "id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A-List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, aMCAList)",
                "Prefer(peter, tVSeries)"
            ],
            "question": "James cannot watch 3 movies every week without any additional fees.",
            "question_fol": "\u00acEligibleForThreeFreeMovies(james)",
            "label": "False",
            "predicates_fol": [
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMovies(x)",
                "CinemaEveryWeek(x)",
                "Prefer(x, y)",
                "WatchTVIn(x, y)"
            ]
        },
        {
            "id": 1385,
            "story_id": 477,
            "context": [
                "All social media applications containing chat features are software. ",
                "All social media applications that allow users to send messages to each other have chat features. ",
                "All social media applications have chat features or video features. ",
                "All social media applications that have video features allow users to upload videos. ",
                "All software that is social media applications are computer programs. ",
                "All social media applications that have high engagement metrics are addictive. ",
                "If a social media application is addictive, then it is not ideal for preteens. ",
                "TikTok is a social media application, and it is not ideal for preteens. "
            ],
            "context_fol": [
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, chatFeature) \u2192 Software(x))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 AllowToSendTo(x, user, message) \u2192 Contain(x, chatFeature))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2192 Contain(x, chatFeature) \u2228 Contain(x, videoFeature))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, videoFeature) \u2192 Allow(x, user, uploadVideo))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Software(x) \u2192 ComputerProgram(x))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227Have(x, highEngagementMetric) \u2192 Addictive(x))",
                "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Addictive(x) \u2192 \u00acIdealFor(x, preteen))",
                "SocialMedia(tikTok) \u2227 Application(tikTok) \u2227 \u00acIdealFor(tikTok, preteen)"
            ],
            "question": "TikTok is a computer program.",
            "question_fol": "ComputerProgram(tikTok)",
            "label": "True",
            "predicates_fol": [
                "SocialMedia(x)",
                "Application(x)",
                "Contain(x, y)",
                "Software(x)",
                "AllowToSendTo(x, y)",
                "Allow(x, y)",
                "ComputerProgram(x)",
                "Have(x, y)",
                "Addictive(x)",
                "IdealFor(x, y)"
            ]
        }
    ],
    "657": [
        {
            "id": 655,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
            ],
            "context_fol": [
                "HeldIn(2008SummerOlympics, beijingChina)",
                "SecondSummerOlympicsGames(2008SummerOlympics) \u2227 BeHeldIn(2008SummerOlympics, communistState)",
                "Won(china, theMostGoldMedals)",
                "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) \u2227 Won(unitedStates, highestNumberOfMedals)",
                "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
                "\u2200x \u2200y (Placed(x, thirdInGoldMedals) \u2227 Won(y, mostGoldMedals) \u2192 FewerGoldMedalsThan(x, y))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "question_fol": "\u00acFewerGoldMedalsThan(russia, china)",
            "label": "False",
            "predicates_fol": [
                "HeldIn(x, y)",
                "SecondSummerOlympicsGames(x)",
                "BeHeldIn(x, y)",
                "Won(x, y)",
                "PlacedSecondInGoldMedalsIn(x, y)",
                "PlacedThirdInGoldMedalsIn(x, y)",
                "Placed(x, y)",
                "FewerGoldMedalsThan(x, y)"
            ]
        },
        {
            "id": 195,
            "story_id": 66,
            "context": [
                "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state in the US, the city is a US city.",
                "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
                "Los Angeles is a city in California.",
                "Atlanta is a US city.",
                "Atlanta is in Georgia.",
                "California is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States held the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y ((SummerOlympicsIn(x,y) \u2227 In(x, unitedStates)) \u2192 SummerOlympicsIn(x, unitedStates))",
                "\u2200x \u2200y ((In(x, y) \u2227 In(y, unitedStates)) \u2192 In(x, unitedStates))",
                "\u2200x \u2200y \u2200z ((In(x, z) \u2227 State(z) \u2227 SummerOlympicsIn(x,y)) \u2192 SummerOlympicsIn(z, y))",
                "SummerOlympicsIn(losAngeles, yr2028)",
                "In(losAngeles, california)",
                "In(atlanta, unitedStates)",
                "In(california, unitedStates)",
                "In(atlanta, georgia)",
                "\u00acInSummerOlympicsIn(boxing, yr2028) \u2227 (\u00acInSummerOlympicsIn(modern_pentathlon, yr2028)) \u2227 (\u00acInSummerOlympicsIn(weightlifting, yr2028))",
                "SummerOlympicsIn(atlanta, yr1996)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "question_fol": "SummerOlympicsIn(unitedStates, yr2028)",
            "label": "True",
            "predicates_fol": [
                "SummerOlympicsIn(x, y)",
                "In(x, y)",
                "State(x)",
                "InSummerOlympicsIn(x, y)"
            ]
        },
        {
            "id": 589,
            "story_id": 206,
            "context": [
                "China is one of the BRICS, and its economy is emerging.",
                "If someone is from China, then they are from a country of BRICS.",
                "India is one of the BRICS, and its economy is emerging.",
                "If someone is from India, then they are in a country of BRICS.",
                "All people from China are Chinese people.",
                "All people from India are Indian people.",
                "There is a person from India."
            ],
            "context_fol": [
                "\u2203x (BRIC(x) \u2227 \u00ac(x=china) \u2227 BRIC(china) \u2227 Emerging(chinaEconomy))",
                "\u2200x (From(x, china) \u2192 From(x, bric))",
                "BRIC(india) \u2227 Emerging(indiaEconomy)",
                "\u2200x (From(x, india) \u2192 From(x, bric))",
                "\u2200x (From(x, china) \u2192 Chinese(x))",
                "\u2200x (From(x, india) \u2192 Indian(x))",
                "\u2203x (From(x, india))"
            ],
            "question": "No people from BRICS are Indian people.",
            "question_fol": "\u2200x (From(x, countryOfBRICS) \u2192 \u00acIndianPeople(x))",
            "label": "False",
            "predicates_fol": [
                "BRIC(x)",
                "Emerging(x)",
                "From(x, y)",
                "Chinese(x)",
                "Indian(x)"
            ]
        }
    ],
    "658": [
        {
            "id": 655,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
            ],
            "context_fol": [
                "HeldIn(2008SummerOlympics, beijingChina)",
                "SecondSummerOlympicsGames(2008SummerOlympics) \u2227 BeHeldIn(2008SummerOlympics, communistState)",
                "Won(china, theMostGoldMedals)",
                "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) \u2227 Won(unitedStates, highestNumberOfMedals)",
                "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
                "\u2200x \u2200y (Placed(x, thirdInGoldMedals) \u2227 Won(y, mostGoldMedals) \u2192 FewerGoldMedalsThan(x, y))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "question_fol": "\u00acFewerGoldMedalsThan(russia, china)",
            "label": "False",
            "predicates_fol": [
                "HeldIn(x, y)",
                "SecondSummerOlympicsGames(x)",
                "BeHeldIn(x, y)",
                "Won(x, y)",
                "PlacedSecondInGoldMedalsIn(x, y)",
                "PlacedThirdInGoldMedalsIn(x, y)",
                "Placed(x, y)",
                "FewerGoldMedalsThan(x, y)"
            ]
        },
        {
            "id": 195,
            "story_id": 66,
            "context": [
                "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state in the US, the city is a US city.",
                "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
                "Los Angeles is a city in California.",
                "Atlanta is a US city.",
                "Atlanta is in Georgia.",
                "California is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States held the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y ((SummerOlympicsIn(x,y) \u2227 In(x, unitedStates)) \u2192 SummerOlympicsIn(x, unitedStates))",
                "\u2200x \u2200y ((In(x, y) \u2227 In(y, unitedStates)) \u2192 In(x, unitedStates))",
                "\u2200x \u2200y \u2200z ((In(x, z) \u2227 State(z) \u2227 SummerOlympicsIn(x,y)) \u2192 SummerOlympicsIn(z, y))",
                "SummerOlympicsIn(losAngeles, yr2028)",
                "In(losAngeles, california)",
                "In(atlanta, unitedStates)",
                "In(california, unitedStates)",
                "In(atlanta, georgia)",
                "\u00acInSummerOlympicsIn(boxing, yr2028) \u2227 (\u00acInSummerOlympicsIn(modern_pentathlon, yr2028)) \u2227 (\u00acInSummerOlympicsIn(weightlifting, yr2028))",
                "SummerOlympicsIn(atlanta, yr1996)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "question_fol": "SummerOlympicsIn(unitedStates, yr2028)",
            "label": "True",
            "predicates_fol": [
                "SummerOlympicsIn(x, y)",
                "In(x, y)",
                "State(x)",
                "InSummerOlympicsIn(x, y)"
            ]
        },
        {
            "id": 589,
            "story_id": 206,
            "context": [
                "China is one of the BRICS, and its economy is emerging.",
                "If someone is from China, then they are from a country of BRICS.",
                "India is one of the BRICS, and its economy is emerging.",
                "If someone is from India, then they are in a country of BRICS.",
                "All people from China are Chinese people.",
                "All people from India are Indian people.",
                "There is a person from India."
            ],
            "context_fol": [
                "\u2203x (BRIC(x) \u2227 \u00ac(x=china) \u2227 BRIC(china) \u2227 Emerging(chinaEconomy))",
                "\u2200x (From(x, china) \u2192 From(x, bric))",
                "BRIC(india) \u2227 Emerging(indiaEconomy)",
                "\u2200x (From(x, india) \u2192 From(x, bric))",
                "\u2200x (From(x, china) \u2192 Chinese(x))",
                "\u2200x (From(x, india) \u2192 Indian(x))",
                "\u2203x (From(x, india))"
            ],
            "question": "No people from BRICS are Indian people.",
            "question_fol": "\u2200x (From(x, countryOfBRICS) \u2192 \u00acIndianPeople(x))",
            "label": "False",
            "predicates_fol": [
                "BRIC(x)",
                "Emerging(x)",
                "From(x, y)",
                "Chinese(x)",
                "Indian(x)"
            ]
        }
    ],
    "659": [
        {
            "id": 655,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
            ],
            "context_fol": [
                "HeldIn(2008SummerOlympics, beijingChina)",
                "SecondSummerOlympicsGames(2008SummerOlympics) \u2227 BeHeldIn(2008SummerOlympics, communistState)",
                "Won(china, theMostGoldMedals)",
                "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) \u2227 Won(unitedStates, highestNumberOfMedals)",
                "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
                "\u2200x \u2200y (Placed(x, thirdInGoldMedals) \u2227 Won(y, mostGoldMedals) \u2192 FewerGoldMedalsThan(x, y))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "question_fol": "\u00acFewerGoldMedalsThan(russia, china)",
            "label": "False",
            "predicates_fol": [
                "HeldIn(x, y)",
                "SecondSummerOlympicsGames(x)",
                "BeHeldIn(x, y)",
                "Won(x, y)",
                "PlacedSecondInGoldMedalsIn(x, y)",
                "PlacedThirdInGoldMedalsIn(x, y)",
                "Placed(x, y)",
                "FewerGoldMedalsThan(x, y)"
            ]
        },
        {
            "id": 195,
            "story_id": 66,
            "context": [
                "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state in the US, the city is a US city.",
                "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
                "Los Angeles is a city in California.",
                "Atlanta is a US city.",
                "Atlanta is in Georgia.",
                "California is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States held the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y ((SummerOlympicsIn(x,y) \u2227 In(x, unitedStates)) \u2192 SummerOlympicsIn(x, unitedStates))",
                "\u2200x \u2200y ((In(x, y) \u2227 In(y, unitedStates)) \u2192 In(x, unitedStates))",
                "\u2200x \u2200y \u2200z ((In(x, z) \u2227 State(z) \u2227 SummerOlympicsIn(x,y)) \u2192 SummerOlympicsIn(z, y))",
                "SummerOlympicsIn(losAngeles, yr2028)",
                "In(losAngeles, california)",
                "In(atlanta, unitedStates)",
                "In(california, unitedStates)",
                "In(atlanta, georgia)",
                "\u00acInSummerOlympicsIn(boxing, yr2028) \u2227 (\u00acInSummerOlympicsIn(modern_pentathlon, yr2028)) \u2227 (\u00acInSummerOlympicsIn(weightlifting, yr2028))",
                "SummerOlympicsIn(atlanta, yr1996)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "question_fol": "SummerOlympicsIn(unitedStates, yr2028)",
            "label": "True",
            "predicates_fol": [
                "SummerOlympicsIn(x, y)",
                "In(x, y)",
                "State(x)",
                "InSummerOlympicsIn(x, y)"
            ]
        },
        {
            "id": 589,
            "story_id": 206,
            "context": [
                "China is one of the BRICS, and its economy is emerging.",
                "If someone is from China, then they are from a country of BRICS.",
                "India is one of the BRICS, and its economy is emerging.",
                "If someone is from India, then they are in a country of BRICS.",
                "All people from China are Chinese people.",
                "All people from India are Indian people.",
                "There is a person from India."
            ],
            "context_fol": [
                "\u2203x (BRIC(x) \u2227 \u00ac(x=china) \u2227 BRIC(china) \u2227 Emerging(chinaEconomy))",
                "\u2200x (From(x, china) \u2192 From(x, bric))",
                "BRIC(india) \u2227 Emerging(indiaEconomy)",
                "\u2200x (From(x, india) \u2192 From(x, bric))",
                "\u2200x (From(x, china) \u2192 Chinese(x))",
                "\u2200x (From(x, india) \u2192 Indian(x))",
                "\u2203x (From(x, india))"
            ],
            "question": "No people from BRICS are Indian people.",
            "question_fol": "\u2200x (From(x, countryOfBRICS) \u2192 \u00acIndianPeople(x))",
            "label": "False",
            "predicates_fol": [
                "BRIC(x)",
                "Emerging(x)",
                "From(x, y)",
                "Chinese(x)",
                "Indian(x)"
            ]
        }
    ],
    "1301": [
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        },
        {
            "id": 782,
            "story_id": 314,
            "context": [
                "No animals are plants.",
                "All humans are animals.",
                "All pupils are humans.",
                "All flowers are plants.",
                "Bailey is either both a human and a flower or neither a human nor a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u00ac(Human(bailey) \u2295 Flower(bailey))"
            ],
            "question": "Bailey is a pupil.",
            "question_fol": "Pupil(bailey)",
            "label": "False",
            "predicates_fol": [
                "Animal(x)",
                "Plant(x)",
                "Human(x)",
                "Pupil(x)",
                "Flower(x)"
            ]
        }
    ],
    "1302": [
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        },
        {
            "id": 782,
            "story_id": 314,
            "context": [
                "No animals are plants.",
                "All humans are animals.",
                "All pupils are humans.",
                "All flowers are plants.",
                "Bailey is either both a human and a flower or neither a human nor a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u00ac(Human(bailey) \u2295 Flower(bailey))"
            ],
            "question": "Bailey is a pupil.",
            "question_fol": "Pupil(bailey)",
            "label": "False",
            "predicates_fol": [
                "Animal(x)",
                "Plant(x)",
                "Human(x)",
                "Pupil(x)",
                "Flower(x)"
            ]
        }
    ],
    "1303": [
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        },
        {
            "id": 782,
            "story_id": 314,
            "context": [
                "No animals are plants.",
                "All humans are animals.",
                "All pupils are humans.",
                "All flowers are plants.",
                "Bailey is either both a human and a flower or neither a human nor a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u00ac(Human(bailey) \u2295 Flower(bailey))"
            ],
            "question": "Bailey is a pupil.",
            "question_fol": "Pupil(bailey)",
            "label": "False",
            "predicates_fol": [
                "Animal(x)",
                "Plant(x)",
                "Human(x)",
                "Pupil(x)",
                "Flower(x)"
            ]
        }
    ],
    "893": [
        {
            "id": 887,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "question_fol": "GrandSlamUmpire(nadal)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalTennisUmpire(x)",
                "ProfessionalTennisPlayer(x)",
                "WorldTourPlayer(x)",
                "GrandSlamChampion(x)",
                "GrandSlamUmpire(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        },
        {
            "id": 913,
            "story_id": 346,
            "context": [
                "All professional athletes spend most of their time on sports.",
                "All Olympic gold medal winners are professional athletes.",
                "No full-time scientists spend the majority of their time on sports.",
                "All Nobel physics laureates are full-time scientists.",
                "Amy spends the most time on sports, or Amy is an Olympic gold medal winner.",
                "If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner."
            ],
            "context_fol": [
                "\u2200x (ProfessionalAthlete(x) \u2192 SpendOn(x, mostOfTheirTime, sports))",
                "\u2200x (OlympicGoldMedalWinner(x) \u2192 ProfessionalAthlete(x))",
                "\u2200x (FullTimeScientist(x) \u2192 \u00acSpendOn(x, mostOfTheirTime, sports))",
                "\u2200x (NobelPhysicsLaureate(x) \u2192 FullTimeScientist(x))",
                "SpendOn(amy, mostOfTheirTime, sports) \u2228 OlympicGoldMedalWinner(amy)",
                "\u00acNobelPhysicsLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
            ],
            "question": "Amy is a professional athlete.",
            "question_fol": "ProfessionalAthlete(amy)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalAthlete(x)",
                "SpendOn(x, y)",
                "OlympicGoldMedalWinner(x)",
                "FullTimeScientist(x)",
                "NobelPhysicsLaureate(x)"
            ]
        }
    ],
    "894": [
        {
            "id": 887,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "question_fol": "GrandSlamUmpire(nadal)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalTennisUmpire(x)",
                "ProfessionalTennisPlayer(x)",
                "WorldTourPlayer(x)",
                "GrandSlamChampion(x)",
                "GrandSlamUmpire(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        },
        {
            "id": 913,
            "story_id": 346,
            "context": [
                "All professional athletes spend most of their time on sports.",
                "All Olympic gold medal winners are professional athletes.",
                "No full-time scientists spend the majority of their time on sports.",
                "All Nobel physics laureates are full-time scientists.",
                "Amy spends the most time on sports, or Amy is an Olympic gold medal winner.",
                "If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner."
            ],
            "context_fol": [
                "\u2200x (ProfessionalAthlete(x) \u2192 SpendOn(x, mostOfTheirTime, sports))",
                "\u2200x (OlympicGoldMedalWinner(x) \u2192 ProfessionalAthlete(x))",
                "\u2200x (FullTimeScientist(x) \u2192 \u00acSpendOn(x, mostOfTheirTime, sports))",
                "\u2200x (NobelPhysicsLaureate(x) \u2192 FullTimeScientist(x))",
                "SpendOn(amy, mostOfTheirTime, sports) \u2228 OlympicGoldMedalWinner(amy)",
                "\u00acNobelPhysicsLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
            ],
            "question": "Amy is a professional athlete.",
            "question_fol": "ProfessionalAthlete(amy)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalAthlete(x)",
                "SpendOn(x, y)",
                "OlympicGoldMedalWinner(x)",
                "FullTimeScientist(x)",
                "NobelPhysicsLaureate(x)"
            ]
        }
    ],
    "895": [
        {
            "id": 887,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "question_fol": "GrandSlamUmpire(nadal)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalTennisUmpire(x)",
                "ProfessionalTennisPlayer(x)",
                "WorldTourPlayer(x)",
                "GrandSlamChampion(x)",
                "GrandSlamUmpire(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        },
        {
            "id": 913,
            "story_id": 346,
            "context": [
                "All professional athletes spend most of their time on sports.",
                "All Olympic gold medal winners are professional athletes.",
                "No full-time scientists spend the majority of their time on sports.",
                "All Nobel physics laureates are full-time scientists.",
                "Amy spends the most time on sports, or Amy is an Olympic gold medal winner.",
                "If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner."
            ],
            "context_fol": [
                "\u2200x (ProfessionalAthlete(x) \u2192 SpendOn(x, mostOfTheirTime, sports))",
                "\u2200x (OlympicGoldMedalWinner(x) \u2192 ProfessionalAthlete(x))",
                "\u2200x (FullTimeScientist(x) \u2192 \u00acSpendOn(x, mostOfTheirTime, sports))",
                "\u2200x (NobelPhysicsLaureate(x) \u2192 FullTimeScientist(x))",
                "SpendOn(amy, mostOfTheirTime, sports) \u2228 OlympicGoldMedalWinner(amy)",
                "\u00acNobelPhysicsLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
            ],
            "question": "Amy is a professional athlete.",
            "question_fol": "ProfessionalAthlete(amy)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalAthlete(x)",
                "SpendOn(x, y)",
                "OlympicGoldMedalWinner(x)",
                "FullTimeScientist(x)",
                "NobelPhysicsLaureate(x)"
            ]
        }
    ],
    "289": [
        {
            "id": 491,
            "story_id": 171,
            "context": [
                "Some fish stings people.",
                "Stonefish is a fish.",
                "Stonefish stings when stepped on. ",
                "If a stonefish stings someone and they are not treated, it can cause death to them.",
                "To treat stonefish stings, apply heat to the affected area or use an antivenom."
            ],
            "context_fol": [
                "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))",
                "Fish(stonefish)",
                "\u2200x (SteppedOnBy(stonefish, x) \u2192 Sting(stonefish, x))",
                "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeathTo(stonefish, x))",
                "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeatTo(x) \u2228 UseAntivenomOn(x)) \u2192 Treated(x))"
            ],
            "question": "If a stonefish stings you and you don\u2019t use an antivenom, it can cause death to you.",
            "question_fol": "\u2200x (Sting(stonefish, x) \u2227 \u00acUseAntivenomOn(x) \u2192 CauseDeathTo(stonefish, x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Fish(x)",
                "Sting(x, y)",
                "SteppedOnBy(x, y)",
                "Treated(x)",
                "CauseDeathTo(x, y)",
                "ApplyHeatTo(x)",
                "UseAntivenomOn(x)"
            ]
        },
        {
            "id": 887,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "question_fol": "GrandSlamUmpire(nadal)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalTennisUmpire(x)",
                "ProfessionalTennisPlayer(x)",
                "WorldTourPlayer(x)",
                "GrandSlamChampion(x)",
                "GrandSlamUmpire(x)"
            ]
        },
        {
            "id": 101,
            "story_id": 35,
            "context": [
                "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
                "Carlos Reyes trains for an Olympic sport.",
                "Carlos Reyes went to the Olympics.",
                "Carlos Reyes is a welterweight.",
                "Heavy weights are not welterweights."
            ],
            "context_fol": [
                "\u2200x ((DoesOlympicSport(x) \u2227 GoesToOlympicGames(x)) \u2192 Olympian(x))",
                "DoesOlympicSport(carlosReyes)",
                "GoesToOlympicGames(carlosReyes)",
                "WelterWeight(carlosReyes)",
                "\u2200x (WelterWeight(x) \u2192 \u00ac HeavyWeight(x))"
            ],
            "question": "Carlos Reyes is an Olympian.",
            "question_fol": "Olympian(carlosReyes)",
            "label": "True",
            "predicates_fol": [
                "DoesOlympicSport(x)",
                "GoesToOlympicGames(x)",
                "Olympian(x)",
                "WelterWeight(x)",
                "HeavyWeight(x)"
            ]
        }
    ],
    "290": [
        {
            "id": 491,
            "story_id": 171,
            "context": [
                "Some fish stings people.",
                "Stonefish is a fish.",
                "Stonefish stings when stepped on. ",
                "If a stonefish stings someone and they are not treated, it can cause death to them.",
                "To treat stonefish stings, apply heat to the affected area or use an antivenom."
            ],
            "context_fol": [
                "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))",
                "Fish(stonefish)",
                "\u2200x (SteppedOnBy(stonefish, x) \u2192 Sting(stonefish, x))",
                "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeathTo(stonefish, x))",
                "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeatTo(x) \u2228 UseAntivenomOn(x)) \u2192 Treated(x))"
            ],
            "question": "If a stonefish stings you and you don\u2019t use an antivenom, it can cause death to you.",
            "question_fol": "\u2200x (Sting(stonefish, x) \u2227 \u00acUseAntivenomOn(x) \u2192 CauseDeathTo(stonefish, x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Fish(x)",
                "Sting(x, y)",
                "SteppedOnBy(x, y)",
                "Treated(x)",
                "CauseDeathTo(x, y)",
                "ApplyHeatTo(x)",
                "UseAntivenomOn(x)"
            ]
        },
        {
            "id": 887,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "question_fol": "GrandSlamUmpire(nadal)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalTennisUmpire(x)",
                "ProfessionalTennisPlayer(x)",
                "WorldTourPlayer(x)",
                "GrandSlamChampion(x)",
                "GrandSlamUmpire(x)"
            ]
        },
        {
            "id": 101,
            "story_id": 35,
            "context": [
                "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
                "Carlos Reyes trains for an Olympic sport.",
                "Carlos Reyes went to the Olympics.",
                "Carlos Reyes is a welterweight.",
                "Heavy weights are not welterweights."
            ],
            "context_fol": [
                "\u2200x ((DoesOlympicSport(x) \u2227 GoesToOlympicGames(x)) \u2192 Olympian(x))",
                "DoesOlympicSport(carlosReyes)",
                "GoesToOlympicGames(carlosReyes)",
                "WelterWeight(carlosReyes)",
                "\u2200x (WelterWeight(x) \u2192 \u00ac HeavyWeight(x))"
            ],
            "question": "Carlos Reyes is an Olympian.",
            "question_fol": "Olympian(carlosReyes)",
            "label": "True",
            "predicates_fol": [
                "DoesOlympicSport(x)",
                "GoesToOlympicGames(x)",
                "Olympian(x)",
                "WelterWeight(x)",
                "HeavyWeight(x)"
            ]
        }
    ],
    "291": [
        {
            "id": 491,
            "story_id": 171,
            "context": [
                "Some fish stings people.",
                "Stonefish is a fish.",
                "Stonefish stings when stepped on. ",
                "If a stonefish stings someone and they are not treated, it can cause death to them.",
                "To treat stonefish stings, apply heat to the affected area or use an antivenom."
            ],
            "context_fol": [
                "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))",
                "Fish(stonefish)",
                "\u2200x (SteppedOnBy(stonefish, x) \u2192 Sting(stonefish, x))",
                "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeathTo(stonefish, x))",
                "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeatTo(x) \u2228 UseAntivenomOn(x)) \u2192 Treated(x))"
            ],
            "question": "If a stonefish stings you and you don\u2019t use an antivenom, it can cause death to you.",
            "question_fol": "\u2200x (Sting(stonefish, x) \u2227 \u00acUseAntivenomOn(x) \u2192 CauseDeathTo(stonefish, x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Fish(x)",
                "Sting(x, y)",
                "SteppedOnBy(x, y)",
                "Treated(x)",
                "CauseDeathTo(x, y)",
                "ApplyHeatTo(x)",
                "UseAntivenomOn(x)"
            ]
        },
        {
            "id": 887,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "question_fol": "GrandSlamUmpire(nadal)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalTennisUmpire(x)",
                "ProfessionalTennisPlayer(x)",
                "WorldTourPlayer(x)",
                "GrandSlamChampion(x)",
                "GrandSlamUmpire(x)"
            ]
        },
        {
            "id": 101,
            "story_id": 35,
            "context": [
                "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
                "Carlos Reyes trains for an Olympic sport.",
                "Carlos Reyes went to the Olympics.",
                "Carlos Reyes is a welterweight.",
                "Heavy weights are not welterweights."
            ],
            "context_fol": [
                "\u2200x ((DoesOlympicSport(x) \u2227 GoesToOlympicGames(x)) \u2192 Olympian(x))",
                "DoesOlympicSport(carlosReyes)",
                "GoesToOlympicGames(carlosReyes)",
                "WelterWeight(carlosReyes)",
                "\u2200x (WelterWeight(x) \u2192 \u00ac HeavyWeight(x))"
            ],
            "question": "Carlos Reyes is an Olympian.",
            "question_fol": "Olympian(carlosReyes)",
            "label": "True",
            "predicates_fol": [
                "DoesOlympicSport(x)",
                "GoesToOlympicGames(x)",
                "Olympian(x)",
                "WelterWeight(x)",
                "HeavyWeight(x)"
            ]
        }
    ],
    "621": [
        {
            "id": 1130,
            "story_id": 407,
            "context": [
                "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
                "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
                "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
                "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
                "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
                "Ryan is performing at New Haven Symphony Orchestra.",
                "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
            ],
            "context_fol": [
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusician(x)) \u2192 \u00acPermanentMemberOf(x, theOrchestra))",
                "\u2200x (PerformAt(x, newHavenSymphonyOrchestra) \u2192 (PermanentMemberOf(x, theOrchestra) \u2228 HaveTemporaryRoleAt(x, theOrchestra)))",
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusicians(x)) \u2192 HaveTemporaryRoleAt(x, theOrchestra))",
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 HaveTemporaryRoleAt(x, theOrchestra)) \u2192 InterestingSoloist(x))",
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 InterestingSoloist(x)) \u2192 CapableOfAttractingAudiences(x))",
                "PerformAt(ryan, newHavenSymphonyOrchestra)",
                "(InterestingSoloist(ryan) \u2227 HaveTemporaryRoleAt(ryan, theOrchestra)) \u2192 \u00ac(TouringMusician(ryan) \u2295 CapableOfAttractingAudiences(ryan))"
            ],
            "question": "Ryan is an interesting soloist.",
            "question_fol": "InterestingSoloist(ryan)",
            "label": "Uncertain",
            "predicates_fol": [
                "PerformAt(x, y)",
                "TouringMusician(x)",
                "PermanentMemberOf(x, y)",
                "HaveTemporaryRoleAt(x, y)",
                "TouringMusicians(x)",
                "InterestingSoloist(x)",
                "CapableOfAttractingAudiences(x)"
            ]
        },
        {
            "id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 SpecializeInPerformanceOf(miroslav, renaissanceMusic) \u2227 SpecializeInPerformanceOf(miroslav, baroqueMusic)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x \u2203y ((Musician(x) \u2192 Love(x, music)) \u2227 (\u00ac(x=y) \u2227 Musician(y) \u2192 Love(y, music)))",
                "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "question_fol": "Love(miroslav, music)",
            "label": "Uncertain",
            "predicates_fol": [
                "Czech(x)",
                "ChoralConductor(x)",
                "SpecializeInPerformanceOf(x, y)",
                "Musician(x)",
                "Love(x, y)",
                "PublishedBook(x, y)"
            ]
        },
        {
            "id": 464,
            "story_id": 162,
            "context": [
                "If a person plays an instrument in a concert, they are good at playing this kind of instrument.",
                "Peter plays piano, violin, and saxophone.",
                "Peter plays piano in a concert.",
                "Oliver and Peter both play instruments in a concert.",
                "Oliver plays a different musical instrument from Peter in the concert."
            ],
            "context_fol": [
                "\u2200x \u2200y (PlayIn(y, x, concert) \u2192 GoodAtPlaying(y, x))",
                "Play(peter, piano) \u2227 Play(peter, violin) \u2227 Play(peter, saxophone)",
                "PlayIn(peter, piano, concert)",
                "\u2203x \u2203y (PlayIn(peter, x, concert) \u2227 PlayIn(oliver, y, concert))",
                "\u2200x (PlayIn(oliver, x, concert) \u2192 \u00acPlayIn(peter, y, concert))"
            ],
            "question": "Oliver plays piano in the concert.",
            "question_fol": "PlayIn(oliver, piano, concert)",
            "label": "False",
            "predicates_fol": [
                "PlayIn(x, y)",
                "GoodAtPlaying(x, y)",
                "Play(x, y)"
            ]
        }
    ],
    "622": [
        {
            "id": 1130,
            "story_id": 407,
            "context": [
                "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
                "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
                "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
                "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
                "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
                "Ryan is performing at New Haven Symphony Orchestra.",
                "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
            ],
            "context_fol": [
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusician(x)) \u2192 \u00acPermanentMemberOf(x, theOrchestra))",
                "\u2200x (PerformAt(x, newHavenSymphonyOrchestra) \u2192 (PermanentMemberOf(x, theOrchestra) \u2228 HaveTemporaryRoleAt(x, theOrchestra)))",
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusicians(x)) \u2192 HaveTemporaryRoleAt(x, theOrchestra))",
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 HaveTemporaryRoleAt(x, theOrchestra)) \u2192 InterestingSoloist(x))",
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 InterestingSoloist(x)) \u2192 CapableOfAttractingAudiences(x))",
                "PerformAt(ryan, newHavenSymphonyOrchestra)",
                "(InterestingSoloist(ryan) \u2227 HaveTemporaryRoleAt(ryan, theOrchestra)) \u2192 \u00ac(TouringMusician(ryan) \u2295 CapableOfAttractingAudiences(ryan))"
            ],
            "question": "Ryan is an interesting soloist.",
            "question_fol": "InterestingSoloist(ryan)",
            "label": "Uncertain",
            "predicates_fol": [
                "PerformAt(x, y)",
                "TouringMusician(x)",
                "PermanentMemberOf(x, y)",
                "HaveTemporaryRoleAt(x, y)",
                "TouringMusicians(x)",
                "InterestingSoloist(x)",
                "CapableOfAttractingAudiences(x)"
            ]
        },
        {
            "id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 SpecializeInPerformanceOf(miroslav, renaissanceMusic) \u2227 SpecializeInPerformanceOf(miroslav, baroqueMusic)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x \u2203y ((Musician(x) \u2192 Love(x, music)) \u2227 (\u00ac(x=y) \u2227 Musician(y) \u2192 Love(y, music)))",
                "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "question_fol": "Love(miroslav, music)",
            "label": "Uncertain",
            "predicates_fol": [
                "Czech(x)",
                "ChoralConductor(x)",
                "SpecializeInPerformanceOf(x, y)",
                "Musician(x)",
                "Love(x, y)",
                "PublishedBook(x, y)"
            ]
        },
        {
            "id": 464,
            "story_id": 162,
            "context": [
                "If a person plays an instrument in a concert, they are good at playing this kind of instrument.",
                "Peter plays piano, violin, and saxophone.",
                "Peter plays piano in a concert.",
                "Oliver and Peter both play instruments in a concert.",
                "Oliver plays a different musical instrument from Peter in the concert."
            ],
            "context_fol": [
                "\u2200x \u2200y (PlayIn(y, x, concert) \u2192 GoodAtPlaying(y, x))",
                "Play(peter, piano) \u2227 Play(peter, violin) \u2227 Play(peter, saxophone)",
                "PlayIn(peter, piano, concert)",
                "\u2203x \u2203y (PlayIn(peter, x, concert) \u2227 PlayIn(oliver, y, concert))",
                "\u2200x (PlayIn(oliver, x, concert) \u2192 \u00acPlayIn(peter, y, concert))"
            ],
            "question": "Oliver plays piano in the concert.",
            "question_fol": "PlayIn(oliver, piano, concert)",
            "label": "False",
            "predicates_fol": [
                "PlayIn(x, y)",
                "GoodAtPlaying(x, y)",
                "Play(x, y)"
            ]
        }
    ],
    "623": [
        {
            "id": 1130,
            "story_id": 407,
            "context": [
                "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
                "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
                "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
                "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
                "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
                "Ryan is performing at New Haven Symphony Orchestra.",
                "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
            ],
            "context_fol": [
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusician(x)) \u2192 \u00acPermanentMemberOf(x, theOrchestra))",
                "\u2200x (PerformAt(x, newHavenSymphonyOrchestra) \u2192 (PermanentMemberOf(x, theOrchestra) \u2228 HaveTemporaryRoleAt(x, theOrchestra)))",
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusicians(x)) \u2192 HaveTemporaryRoleAt(x, theOrchestra))",
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 HaveTemporaryRoleAt(x, theOrchestra)) \u2192 InterestingSoloist(x))",
                "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 InterestingSoloist(x)) \u2192 CapableOfAttractingAudiences(x))",
                "PerformAt(ryan, newHavenSymphonyOrchestra)",
                "(InterestingSoloist(ryan) \u2227 HaveTemporaryRoleAt(ryan, theOrchestra)) \u2192 \u00ac(TouringMusician(ryan) \u2295 CapableOfAttractingAudiences(ryan))"
            ],
            "question": "Ryan is an interesting soloist.",
            "question_fol": "InterestingSoloist(ryan)",
            "label": "Uncertain",
            "predicates_fol": [
                "PerformAt(x, y)",
                "TouringMusician(x)",
                "PermanentMemberOf(x, y)",
                "HaveTemporaryRoleAt(x, y)",
                "TouringMusicians(x)",
                "InterestingSoloist(x)",
                "CapableOfAttractingAudiences(x)"
            ]
        },
        {
            "id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 SpecializeInPerformanceOf(miroslav, renaissanceMusic) \u2227 SpecializeInPerformanceOf(miroslav, baroqueMusic)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x \u2203y ((Musician(x) \u2192 Love(x, music)) \u2227 (\u00ac(x=y) \u2227 Musician(y) \u2192 Love(y, music)))",
                "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "question_fol": "Love(miroslav, music)",
            "label": "Uncertain",
            "predicates_fol": [
                "Czech(x)",
                "ChoralConductor(x)",
                "SpecializeInPerformanceOf(x, y)",
                "Musician(x)",
                "Love(x, y)",
                "PublishedBook(x, y)"
            ]
        },
        {
            "id": 464,
            "story_id": 162,
            "context": [
                "If a person plays an instrument in a concert, they are good at playing this kind of instrument.",
                "Peter plays piano, violin, and saxophone.",
                "Peter plays piano in a concert.",
                "Oliver and Peter both play instruments in a concert.",
                "Oliver plays a different musical instrument from Peter in the concert."
            ],
            "context_fol": [
                "\u2200x \u2200y (PlayIn(y, x, concert) \u2192 GoodAtPlaying(y, x))",
                "Play(peter, piano) \u2227 Play(peter, violin) \u2227 Play(peter, saxophone)",
                "PlayIn(peter, piano, concert)",
                "\u2203x \u2203y (PlayIn(peter, x, concert) \u2227 PlayIn(oliver, y, concert))",
                "\u2200x (PlayIn(oliver, x, concert) \u2192 \u00acPlayIn(peter, y, concert))"
            ],
            "question": "Oliver plays piano in the concert.",
            "question_fol": "PlayIn(oliver, piano, concert)",
            "label": "False",
            "predicates_fol": [
                "PlayIn(x, y)",
                "GoodAtPlaying(x, y)",
                "Play(x, y)"
            ]
        }
    ],
    "927": [
        {
            "id": 672,
            "story_id": 237,
            "context": [
                "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
                "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
                "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
                "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
            ],
            "context_fol": [
                "British-Iraqi(zahaHadid) \u2227 Architect(zahaHadid) \u2227 Artist(zahaHadid) \u2227 Designer(zahaHadid)",
                "BornOn(zahaHadid, 31October1950) \u2227 BornIn(zahaHadid, baghdadIraq)",
                "VisitingProfessorOf(zahaHadid, architecturalDesign) \u2227 VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
                "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
            ],
            "question": "Zaha Hadid was a citizen of Britain and Iraq.",
            "question_fol": "British-Iraqi(zahaHadid)",
            "label": "True",
            "predicates_fol": [
                "British-Iraqi(x)",
                "Architect(x)",
                "Artist(x)",
                "Designer(x)",
                "BornOn(x, y)",
                "BornIn(x, y)",
                "VisitingProfessorOf(x, y)",
                "VisitingProfessorAt(x, y)",
                "AspiringArchitectureStudent(x)",
                "PlansToApplyTo(x, y)"
            ]
        },
        {
            "id": 936,
            "story_id": 353,
            "context": [
                "If Max listens to music, he either listens to classical music or rap.",
                "All the classical songs that Max listens to are from the 12th century. ",
                "If Max is listening to a rap song, then the song is by Kanye West. ",
                "All songs by Kanye West are full of lyrics. ",
                "All songs that are full of lyrics need to be written with words",
                "It is not true that \u201cAs it was\u201d by Harry Styles is classical music that Max listens to and is from the 12th century.",
                "Max listens to \"As it was\" by Harry Styles."
            ],
            "context_fol": [
                "\u2200x (MaxListenTo(x) \u2192 (ClassicalMusic(x) \u2295 Rap(x)))",
                "\u2200x (MaxListenTo(x) \u2227 ClassicalMusic(x) \u2192 Song(x) \u2227 From(x, 12thCentury))",
                "\u2200x (MaxListenTo(x) \u2227 Rap(x) \u2192 Song(x) \u2227 By(x, kanyeWest))",
                "\u2200x (Song(x) \u2227 By(x, kanyeWest) \u2192 Song(x) \u2227 FullOfLyrics(x))",
                "\u2200x (Song(x) \u2227 FullOfLyrics(x) \u2192 NeedToBeWrittenWith(x, words))",
                "\u00ac(ClassicalMusic(asItWasByHarryStyles) \u2227 Song(asItWasByHarryStyles) \u2227 From(asItWasByHarryStyles, 12thCentury))",
                "MaxListenTo(asItWasByHarryStyles)"
            ],
            "question": "\u201cAs it was\u201d by Harry Styles needs to be written with words.",
            "question_fol": "NeedToBeWrittenWith(asItWasByHarryStyles, words)",
            "label": "True",
            "predicates_fol": [
                "MaxListenTo(x)",
                "ClassicalMusic(x)",
                "Rap(x)",
                "Song(x)",
                "From(x, y)",
                "By(x, y)",
                "FullOfLyrics(x)",
                "NeedToBeWrittenWith(x, y)"
            ]
        },
        {
            "id": 789,
            "story_id": 316,
            "context": [
                "There are no mansion houses in an urban area.",
                "All skyscrapers are in urban areas.",
                "Every creepy haunted house is a mansion house.",
                "Every terrifying building on Halloween is a creepy haunted house.",
                "The LaLaurie House is a creepy haunted house or a terrifying building on Halloween."
            ],
            "context_fol": [
                "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))",
                "\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))",
                "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
                "\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))",
                "CreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)"
            ],
            "question": "The LaLaurie House is a skyscraper.",
            "question_fol": "Skyscraper(laLaurieHouse)",
            "label": "False",
            "predicates_fol": [
                "InUrbanArea(x)",
                "MansionHouse(x)",
                "Skyscraper(x)",
                "CreepyHauntedHouse(x)",
                "TerrifyingBuilding(x)",
                "OnHalloween(x)"
            ]
        }
    ],
    "928": [
        {
            "id": 672,
            "story_id": 237,
            "context": [
                "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
                "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
                "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
                "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
            ],
            "context_fol": [
                "British-Iraqi(zahaHadid) \u2227 Architect(zahaHadid) \u2227 Artist(zahaHadid) \u2227 Designer(zahaHadid)",
                "BornOn(zahaHadid, 31October1950) \u2227 BornIn(zahaHadid, baghdadIraq)",
                "VisitingProfessorOf(zahaHadid, architecturalDesign) \u2227 VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
                "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
            ],
            "question": "Zaha Hadid was a citizen of Britain and Iraq.",
            "question_fol": "British-Iraqi(zahaHadid)",
            "label": "True",
            "predicates_fol": [
                "British-Iraqi(x)",
                "Architect(x)",
                "Artist(x)",
                "Designer(x)",
                "BornOn(x, y)",
                "BornIn(x, y)",
                "VisitingProfessorOf(x, y)",
                "VisitingProfessorAt(x, y)",
                "AspiringArchitectureStudent(x)",
                "PlansToApplyTo(x, y)"
            ]
        },
        {
            "id": 936,
            "story_id": 353,
            "context": [
                "If Max listens to music, he either listens to classical music or rap.",
                "All the classical songs that Max listens to are from the 12th century. ",
                "If Max is listening to a rap song, then the song is by Kanye West. ",
                "All songs by Kanye West are full of lyrics. ",
                "All songs that are full of lyrics need to be written with words",
                "It is not true that \u201cAs it was\u201d by Harry Styles is classical music that Max listens to and is from the 12th century.",
                "Max listens to \"As it was\" by Harry Styles."
            ],
            "context_fol": [
                "\u2200x (MaxListenTo(x) \u2192 (ClassicalMusic(x) \u2295 Rap(x)))",
                "\u2200x (MaxListenTo(x) \u2227 ClassicalMusic(x) \u2192 Song(x) \u2227 From(x, 12thCentury))",
                "\u2200x (MaxListenTo(x) \u2227 Rap(x) \u2192 Song(x) \u2227 By(x, kanyeWest))",
                "\u2200x (Song(x) \u2227 By(x, kanyeWest) \u2192 Song(x) \u2227 FullOfLyrics(x))",
                "\u2200x (Song(x) \u2227 FullOfLyrics(x) \u2192 NeedToBeWrittenWith(x, words))",
                "\u00ac(ClassicalMusic(asItWasByHarryStyles) \u2227 Song(asItWasByHarryStyles) \u2227 From(asItWasByHarryStyles, 12thCentury))",
                "MaxListenTo(asItWasByHarryStyles)"
            ],
            "question": "\u201cAs it was\u201d by Harry Styles needs to be written with words.",
            "question_fol": "NeedToBeWrittenWith(asItWasByHarryStyles, words)",
            "label": "True",
            "predicates_fol": [
                "MaxListenTo(x)",
                "ClassicalMusic(x)",
                "Rap(x)",
                "Song(x)",
                "From(x, y)",
                "By(x, y)",
                "FullOfLyrics(x)",
                "NeedToBeWrittenWith(x, y)"
            ]
        },
        {
            "id": 789,
            "story_id": 316,
            "context": [
                "There are no mansion houses in an urban area.",
                "All skyscrapers are in urban areas.",
                "Every creepy haunted house is a mansion house.",
                "Every terrifying building on Halloween is a creepy haunted house.",
                "The LaLaurie House is a creepy haunted house or a terrifying building on Halloween."
            ],
            "context_fol": [
                "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))",
                "\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))",
                "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
                "\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))",
                "CreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)"
            ],
            "question": "The LaLaurie House is a skyscraper.",
            "question_fol": "Skyscraper(laLaurieHouse)",
            "label": "False",
            "predicates_fol": [
                "InUrbanArea(x)",
                "MansionHouse(x)",
                "Skyscraper(x)",
                "CreepyHauntedHouse(x)",
                "TerrifyingBuilding(x)",
                "OnHalloween(x)"
            ]
        }
    ],
    "929": [
        {
            "id": 672,
            "story_id": 237,
            "context": [
                "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
                "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
                "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
                "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
            ],
            "context_fol": [
                "British-Iraqi(zahaHadid) \u2227 Architect(zahaHadid) \u2227 Artist(zahaHadid) \u2227 Designer(zahaHadid)",
                "BornOn(zahaHadid, 31October1950) \u2227 BornIn(zahaHadid, baghdadIraq)",
                "VisitingProfessorOf(zahaHadid, architecturalDesign) \u2227 VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
                "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
            ],
            "question": "Zaha Hadid was a citizen of Britain and Iraq.",
            "question_fol": "British-Iraqi(zahaHadid)",
            "label": "True",
            "predicates_fol": [
                "British-Iraqi(x)",
                "Architect(x)",
                "Artist(x)",
                "Designer(x)",
                "BornOn(x, y)",
                "BornIn(x, y)",
                "VisitingProfessorOf(x, y)",
                "VisitingProfessorAt(x, y)",
                "AspiringArchitectureStudent(x)",
                "PlansToApplyTo(x, y)"
            ]
        },
        {
            "id": 936,
            "story_id": 353,
            "context": [
                "If Max listens to music, he either listens to classical music or rap.",
                "All the classical songs that Max listens to are from the 12th century. ",
                "If Max is listening to a rap song, then the song is by Kanye West. ",
                "All songs by Kanye West are full of lyrics. ",
                "All songs that are full of lyrics need to be written with words",
                "It is not true that \u201cAs it was\u201d by Harry Styles is classical music that Max listens to and is from the 12th century.",
                "Max listens to \"As it was\" by Harry Styles."
            ],
            "context_fol": [
                "\u2200x (MaxListenTo(x) \u2192 (ClassicalMusic(x) \u2295 Rap(x)))",
                "\u2200x (MaxListenTo(x) \u2227 ClassicalMusic(x) \u2192 Song(x) \u2227 From(x, 12thCentury))",
                "\u2200x (MaxListenTo(x) \u2227 Rap(x) \u2192 Song(x) \u2227 By(x, kanyeWest))",
                "\u2200x (Song(x) \u2227 By(x, kanyeWest) \u2192 Song(x) \u2227 FullOfLyrics(x))",
                "\u2200x (Song(x) \u2227 FullOfLyrics(x) \u2192 NeedToBeWrittenWith(x, words))",
                "\u00ac(ClassicalMusic(asItWasByHarryStyles) \u2227 Song(asItWasByHarryStyles) \u2227 From(asItWasByHarryStyles, 12thCentury))",
                "MaxListenTo(asItWasByHarryStyles)"
            ],
            "question": "\u201cAs it was\u201d by Harry Styles needs to be written with words.",
            "question_fol": "NeedToBeWrittenWith(asItWasByHarryStyles, words)",
            "label": "True",
            "predicates_fol": [
                "MaxListenTo(x)",
                "ClassicalMusic(x)",
                "Rap(x)",
                "Song(x)",
                "From(x, y)",
                "By(x, y)",
                "FullOfLyrics(x)",
                "NeedToBeWrittenWith(x, y)"
            ]
        },
        {
            "id": 789,
            "story_id": 316,
            "context": [
                "There are no mansion houses in an urban area.",
                "All skyscrapers are in urban areas.",
                "Every creepy haunted house is a mansion house.",
                "Every terrifying building on Halloween is a creepy haunted house.",
                "The LaLaurie House is a creepy haunted house or a terrifying building on Halloween."
            ],
            "context_fol": [
                "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))",
                "\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))",
                "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
                "\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))",
                "CreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)"
            ],
            "question": "The LaLaurie House is a skyscraper.",
            "question_fol": "Skyscraper(laLaurieHouse)",
            "label": "False",
            "predicates_fol": [
                "InUrbanArea(x)",
                "MansionHouse(x)",
                "Skyscraper(x)",
                "CreepyHauntedHouse(x)",
                "TerrifyingBuilding(x)",
                "OnHalloween(x)"
            ]
        }
    ],
    "1029": [
        {
            "id": 887,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "question_fol": "GrandSlamUmpire(nadal)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalTennisUmpire(x)",
                "ProfessionalTennisPlayer(x)",
                "WorldTourPlayer(x)",
                "GrandSlamChampion(x)",
                "GrandSlamUmpire(x)"
            ]
        },
        {
            "id": 98,
            "story_id": 34,
            "context": [
                "Rafa Nadal was born in Mallorca.",
                "Rafa Nadal is a professional tennis player.",
                "Nadal's win ratio is high.",
                "All players in the Big 3 are professionals who have a high win ratio."
            ],
            "context_fol": [
                "BornIn(rafaNadal, mallorca)",
                "ProfessionalTennisPlayer(rafaNadal)",
                "HighWinRatio(rafaNadal)",
                "\u2200x ((ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x)) \u2192 InBig3(x))"
            ],
            "question": "Nadal was not born in Mallorca.",
            "question_fol": "\u00acBornIn(rafaNadal, mallorca)",
            "label": "False",
            "predicates_fol": [
                "BornIn(x, y)",
                "ProfessionalTennisPlayer(x)",
                "HighWinRatio(x)",
                "InBig3(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "1030": [
        {
            "id": 887,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "question_fol": "GrandSlamUmpire(nadal)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalTennisUmpire(x)",
                "ProfessionalTennisPlayer(x)",
                "WorldTourPlayer(x)",
                "GrandSlamChampion(x)",
                "GrandSlamUmpire(x)"
            ]
        },
        {
            "id": 98,
            "story_id": 34,
            "context": [
                "Rafa Nadal was born in Mallorca.",
                "Rafa Nadal is a professional tennis player.",
                "Nadal's win ratio is high.",
                "All players in the Big 3 are professionals who have a high win ratio."
            ],
            "context_fol": [
                "BornIn(rafaNadal, mallorca)",
                "ProfessionalTennisPlayer(rafaNadal)",
                "HighWinRatio(rafaNadal)",
                "\u2200x ((ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x)) \u2192 InBig3(x))"
            ],
            "question": "Nadal was not born in Mallorca.",
            "question_fol": "\u00acBornIn(rafaNadal, mallorca)",
            "label": "False",
            "predicates_fol": [
                "BornIn(x, y)",
                "ProfessionalTennisPlayer(x)",
                "HighWinRatio(x)",
                "InBig3(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "1031": [
        {
            "id": 887,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "question_fol": "GrandSlamUmpire(nadal)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalTennisUmpire(x)",
                "ProfessionalTennisPlayer(x)",
                "WorldTourPlayer(x)",
                "GrandSlamChampion(x)",
                "GrandSlamUmpire(x)"
            ]
        },
        {
            "id": 98,
            "story_id": 34,
            "context": [
                "Rafa Nadal was born in Mallorca.",
                "Rafa Nadal is a professional tennis player.",
                "Nadal's win ratio is high.",
                "All players in the Big 3 are professionals who have a high win ratio."
            ],
            "context_fol": [
                "BornIn(rafaNadal, mallorca)",
                "ProfessionalTennisPlayer(rafaNadal)",
                "HighWinRatio(rafaNadal)",
                "\u2200x ((ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x)) \u2192 InBig3(x))"
            ],
            "question": "Nadal was not born in Mallorca.",
            "question_fol": "\u00acBornIn(rafaNadal, mallorca)",
            "label": "False",
            "predicates_fol": [
                "BornIn(x, y)",
                "ProfessionalTennisPlayer(x)",
                "HighWinRatio(x)",
                "InBig3(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "700": [
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 1264,
            "story_id": 440,
            "context": [
                "All tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "All huskies are dogs.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2295 Cat(fido)"
            ],
            "question": "Fido is a husky animal.",
            "question_fol": "Husky(fido)",
            "label": "False",
            "predicates_fol": [
                "Tiger(x)",
                "Cat(x)",
                "Dog(x)",
                "BengalTiger(x)",
                "Husky(x)"
            ]
        }
    ],
    "456": [
        {
            "id": 617,
            "story_id": 216,
            "context": [
                "Olivia doesn't prefer warm temperatures during the day.",
                "When Olivia sleeps, she prefers a cool temperature.",
                "Olivia sleeps during the night.",
                "Olivia works during the day.",
                "Olivia either works or sleeps.",
                "It is either the day or the night.",
                "Olivia either prefers warm temperatures or prefers cool temperatures."
            ],
            "context_fol": [
                "\u2200x (Day(x) \u2192 \u00acPrefer(olivia, warmTemperature, x))",
                "\u2200x (Sleep(olivia, x) \u2192 Prefer(olivia, coolTemperature, x))",
                "\u2200x (Night(x) \u2192 Sleep(olivia, x))",
                "\u2200x (Day(x) \u2192 Work(olivia, x))",
                "Work(olivia) \u2295 Sleep(olivia)",
                "\u2200x (Day(x) \u2295 Night(x))",
                "\u2200x (Prefer(olivia, warmTemperature, x) \u2295 Prefer(olivia, coolTemperature, x))"
            ],
            "question": "At all times, Olivia prefers a cool temperature.",
            "question_fol": "\u2200x (Prefer(olivia, coolTemperature, x))",
            "label": "True",
            "predicates_fol": [
                "Day(x)",
                "Prefer(x, y)",
                "Sleep(x, y)",
                "Night(x)",
                "Work(x, y)"
            ]
        },
        {
            "id": 1192,
            "story_id": 422,
            "context": [
                "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
                "Some of the customers in James' family go to the cinema every week.",
                "Customers in James' family subscribe to AMC A-List or HBO service. ",
                "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
                "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
                "Lily is in James' family; she watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 SubscribedTo(x, aMCAList)) \u2192  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
                "\u2203x \u2203y (Customer(x) \u2227 In(x, jameSFamily) \u2227 GoToEveryWeek(x, cinema) \u2227 (\u00ac(x=y)) \u2227 Customer(y) \u2227 In(y, jameSFamily) \u2227 GoToEveryWeek(y, cinema))",
                "\u2200x (Customer(x) \u2227 In(x, jameSFamily) \u2227 (SubscribedTo(x, aMCAList) \u2228 SubscribedTo(x, hBO)))",
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 Prefer(x, tVSeries)) \u2192 (\u00acWatchIn(x, tV, cinema)))",
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227  SubscribedTo(x, hBO)) \u2192 Prefer(x, tVSeries))",
                "Customer(lily) \u2227 In(lily, jameSFamily \u2227 WatchIn(lily, tV, cinema)"
            ],
            "question": "Lily goes to cinemas every week.",
            "question_fol": "GoToEveryWeek(lily, cinema)",
            "label": "Uncertain",
            "predicates_fol": [
                "Customer(x)",
                "In(x, y)",
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x)",
                "GoToEveryWeek(x, y)",
                "Prefer(x, y)",
                "WatchIn(x, y)"
            ]
        },
        {
            "id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A-List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, aMCAList)",
                "Prefer(peter, tVSeries)"
            ],
            "question": "James cannot watch 3 movies every week without any additional fees.",
            "question_fol": "\u00acEligibleForThreeFreeMovies(james)",
            "label": "False",
            "predicates_fol": [
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMovies(x)",
                "CinemaEveryWeek(x)",
                "Prefer(x, y)",
                "WatchTVIn(x, y)"
            ]
        }
    ],
    "457": [
        {
            "id": 617,
            "story_id": 216,
            "context": [
                "Olivia doesn't prefer warm temperatures during the day.",
                "When Olivia sleeps, she prefers a cool temperature.",
                "Olivia sleeps during the night.",
                "Olivia works during the day.",
                "Olivia either works or sleeps.",
                "It is either the day or the night.",
                "Olivia either prefers warm temperatures or prefers cool temperatures."
            ],
            "context_fol": [
                "\u2200x (Day(x) \u2192 \u00acPrefer(olivia, warmTemperature, x))",
                "\u2200x (Sleep(olivia, x) \u2192 Prefer(olivia, coolTemperature, x))",
                "\u2200x (Night(x) \u2192 Sleep(olivia, x))",
                "\u2200x (Day(x) \u2192 Work(olivia, x))",
                "Work(olivia) \u2295 Sleep(olivia)",
                "\u2200x (Day(x) \u2295 Night(x))",
                "\u2200x (Prefer(olivia, warmTemperature, x) \u2295 Prefer(olivia, coolTemperature, x))"
            ],
            "question": "At all times, Olivia prefers a cool temperature.",
            "question_fol": "\u2200x (Prefer(olivia, coolTemperature, x))",
            "label": "True",
            "predicates_fol": [
                "Day(x)",
                "Prefer(x, y)",
                "Sleep(x, y)",
                "Night(x)",
                "Work(x, y)"
            ]
        },
        {
            "id": 1192,
            "story_id": 422,
            "context": [
                "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
                "Some of the customers in James' family go to the cinema every week.",
                "Customers in James' family subscribe to AMC A-List or HBO service. ",
                "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
                "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
                "Lily is in James' family; she watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 SubscribedTo(x, aMCAList)) \u2192  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
                "\u2203x \u2203y (Customer(x) \u2227 In(x, jameSFamily) \u2227 GoToEveryWeek(x, cinema) \u2227 (\u00ac(x=y)) \u2227 Customer(y) \u2227 In(y, jameSFamily) \u2227 GoToEveryWeek(y, cinema))",
                "\u2200x (Customer(x) \u2227 In(x, jameSFamily) \u2227 (SubscribedTo(x, aMCAList) \u2228 SubscribedTo(x, hBO)))",
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 Prefer(x, tVSeries)) \u2192 (\u00acWatchIn(x, tV, cinema)))",
                "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227  SubscribedTo(x, hBO)) \u2192 Prefer(x, tVSeries))",
                "Customer(lily) \u2227 In(lily, jameSFamily \u2227 WatchIn(lily, tV, cinema)"
            ],
            "question": "Lily goes to cinemas every week.",
            "question_fol": "GoToEveryWeek(lily, cinema)",
            "label": "Uncertain",
            "predicates_fol": [
                "Customer(x)",
                "In(x, y)",
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x)",
                "GoToEveryWeek(x, y)",
                "Prefer(x, y)",
                "WatchIn(x, y)"
            ]
        },
        {
            "id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A-List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, aMCAList)",
                "Prefer(peter, tVSeries)"
            ],
            "question": "James cannot watch 3 movies every week without any additional fees.",
            "question_fol": "\u00acEligibleForThreeFreeMovies(james)",
            "label": "False",
            "predicates_fol": [
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMovies(x)",
                "CinemaEveryWeek(x)",
                "Prefer(x, y)",
                "WatchTVIn(x, y)"
            ]
        }
    ],
    "904": [
        {
            "id": 569,
            "story_id": 200,
            "context": [
                "Wildfeed exists as an unannounced program.",
                "Wildfeed can be sporting events, news, or syndicated shows.",
                "Pre-recorded content is a copyright violation.",
                "Programs are pre-recorded."
            ],
            "context_fol": [
                "\u2203x (Wildfeed(x) \u2227 Unannounced(x) \u2227 Program(x))",
                "\u2200x (Wildfeed(x) \u2192 SportingEvent(x) \u2228 News(x) \u2228 SyndicatedShow(x))",
                "\u2200x (Prerecorded(x) \u2192 CopyrightViolation(x))",
                "\u2200x (Program(x) \u2192 Prerecorded(x))"
            ],
            "question": "Some wildfeed is violating copyright laws.",
            "question_fol": "\u2203x (Wildfeed(x) \u2227 CopyrightViolation(x))",
            "label": "True",
            "predicates_fol": [
                "Wildfeed(x)",
                "Unannounced(x)",
                "Program(x)",
                "SportingEvent(x)",
                "News(x)",
                "SyndicatedShow(x)",
                "Prerecorded(x)",
                "CopyrightViolation(x)"
            ]
        },
        {
            "id": 72,
            "story_id": 25,
            "context": [
                "Philatelic literature is divided into the following categories: Stamp catalogs, Periodicals, Auction catalogs, Books, Bibliographies, and Background Material.",
                "Mort is not a Stamp catalog.",
                "Mort is not a periodical, auction catalog, bibliography, or background material.",
                "Mort is a piece of Philatelic literature."
            ],
            "context_fol": [
                "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))",
                "\u00acStamp(mort)",
                "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))",
                "PhilatelicLit(mort)"
            ],
            "question": "Mort is background material.",
            "question_fol": "Background(mort)",
            "label": "False",
            "predicates_fol": [
                "PhilatelicLit(x)",
                "Stamp(x)",
                "Periodical(x)",
                "Auction(x)",
                "Book(x)",
                "Bibliography(x)",
                "Background(x)"
            ]
        },
        {
            "id": 733,
            "story_id": 289,
            "context": [
                "All iPhones are electronic.",
                "Some phones are iPhones."
            ],
            "context_fol": [
                "\u2200x (IPhone(x) \u2192 Electronic(x))",
                "\u2203x \u2203y (Phone(x) \u2227 Phone(y) \u2227 IPhone(x) \u2227 IPhone(y) \u2227 \u00ac(x=y))"
            ],
            "question": "No phones are electronic.",
            "question_fol": "\u2200x (Phone(x) \u2192 \u00acElectronic(x))",
            "label": "False",
            "predicates_fol": [
                "IPhone(x)",
                "Electronic(x)",
                "Phone(x)"
            ]
        }
    ],
    "905": [
        {
            "id": 569,
            "story_id": 200,
            "context": [
                "Wildfeed exists as an unannounced program.",
                "Wildfeed can be sporting events, news, or syndicated shows.",
                "Pre-recorded content is a copyright violation.",
                "Programs are pre-recorded."
            ],
            "context_fol": [
                "\u2203x (Wildfeed(x) \u2227 Unannounced(x) \u2227 Program(x))",
                "\u2200x (Wildfeed(x) \u2192 SportingEvent(x) \u2228 News(x) \u2228 SyndicatedShow(x))",
                "\u2200x (Prerecorded(x) \u2192 CopyrightViolation(x))",
                "\u2200x (Program(x) \u2192 Prerecorded(x))"
            ],
            "question": "Some wildfeed is violating copyright laws.",
            "question_fol": "\u2203x (Wildfeed(x) \u2227 CopyrightViolation(x))",
            "label": "True",
            "predicates_fol": [
                "Wildfeed(x)",
                "Unannounced(x)",
                "Program(x)",
                "SportingEvent(x)",
                "News(x)",
                "SyndicatedShow(x)",
                "Prerecorded(x)",
                "CopyrightViolation(x)"
            ]
        },
        {
            "id": 72,
            "story_id": 25,
            "context": [
                "Philatelic literature is divided into the following categories: Stamp catalogs, Periodicals, Auction catalogs, Books, Bibliographies, and Background Material.",
                "Mort is not a Stamp catalog.",
                "Mort is not a periodical, auction catalog, bibliography, or background material.",
                "Mort is a piece of Philatelic literature."
            ],
            "context_fol": [
                "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))",
                "\u00acStamp(mort)",
                "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))",
                "PhilatelicLit(mort)"
            ],
            "question": "Mort is background material.",
            "question_fol": "Background(mort)",
            "label": "False",
            "predicates_fol": [
                "PhilatelicLit(x)",
                "Stamp(x)",
                "Periodical(x)",
                "Auction(x)",
                "Book(x)",
                "Bibliography(x)",
                "Background(x)"
            ]
        },
        {
            "id": 733,
            "story_id": 289,
            "context": [
                "All iPhones are electronic.",
                "Some phones are iPhones."
            ],
            "context_fol": [
                "\u2200x (IPhone(x) \u2192 Electronic(x))",
                "\u2203x \u2203y (Phone(x) \u2227 Phone(y) \u2227 IPhone(x) \u2227 IPhone(y) \u2227 \u00ac(x=y))"
            ],
            "question": "No phones are electronic.",
            "question_fol": "\u2200x (Phone(x) \u2192 \u00acElectronic(x))",
            "label": "False",
            "predicates_fol": [
                "IPhone(x)",
                "Electronic(x)",
                "Phone(x)"
            ]
        }
    ],
    "906": [
        {
            "id": 569,
            "story_id": 200,
            "context": [
                "Wildfeed exists as an unannounced program.",
                "Wildfeed can be sporting events, news, or syndicated shows.",
                "Pre-recorded content is a copyright violation.",
                "Programs are pre-recorded."
            ],
            "context_fol": [
                "\u2203x (Wildfeed(x) \u2227 Unannounced(x) \u2227 Program(x))",
                "\u2200x (Wildfeed(x) \u2192 SportingEvent(x) \u2228 News(x) \u2228 SyndicatedShow(x))",
                "\u2200x (Prerecorded(x) \u2192 CopyrightViolation(x))",
                "\u2200x (Program(x) \u2192 Prerecorded(x))"
            ],
            "question": "Some wildfeed is violating copyright laws.",
            "question_fol": "\u2203x (Wildfeed(x) \u2227 CopyrightViolation(x))",
            "label": "True",
            "predicates_fol": [
                "Wildfeed(x)",
                "Unannounced(x)",
                "Program(x)",
                "SportingEvent(x)",
                "News(x)",
                "SyndicatedShow(x)",
                "Prerecorded(x)",
                "CopyrightViolation(x)"
            ]
        },
        {
            "id": 72,
            "story_id": 25,
            "context": [
                "Philatelic literature is divided into the following categories: Stamp catalogs, Periodicals, Auction catalogs, Books, Bibliographies, and Background Material.",
                "Mort is not a Stamp catalog.",
                "Mort is not a periodical, auction catalog, bibliography, or background material.",
                "Mort is a piece of Philatelic literature."
            ],
            "context_fol": [
                "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))",
                "\u00acStamp(mort)",
                "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))",
                "PhilatelicLit(mort)"
            ],
            "question": "Mort is background material.",
            "question_fol": "Background(mort)",
            "label": "False",
            "predicates_fol": [
                "PhilatelicLit(x)",
                "Stamp(x)",
                "Periodical(x)",
                "Auction(x)",
                "Book(x)",
                "Bibliography(x)",
                "Background(x)"
            ]
        },
        {
            "id": 733,
            "story_id": 289,
            "context": [
                "All iPhones are electronic.",
                "Some phones are iPhones."
            ],
            "context_fol": [
                "\u2200x (IPhone(x) \u2192 Electronic(x))",
                "\u2203x \u2203y (Phone(x) \u2227 Phone(y) \u2227 IPhone(x) \u2227 IPhone(y) \u2227 \u00ac(x=y))"
            ],
            "question": "No phones are electronic.",
            "question_fol": "\u2200x (Phone(x) \u2192 \u00acElectronic(x))",
            "label": "False",
            "predicates_fol": [
                "IPhone(x)",
                "Electronic(x)",
                "Phone(x)"
            ]
        }
    ],
    "608": [
        {
            "id": 690,
            "story_id": 247,
            "context": [
                "LanguageA is a universal language",
                "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
                "Katya cannot communicate with Danil.",
                "Katya knows LanguageA. "
            ],
            "context_fol": [
                "UniversalLanguage(languageA)",
                "\u2200x \u2200y (\u2203z (\u00ac(x=y) \u2227 Know(x, z) \u2227 Know(y, z) \u2227 UniversalLanguage(z)) \u2192 CanCommunicateWith(x, y) \u2227 CanCommunicateWith(y, x))",
                "\u00acCanCommunicateWith(katya, danil)",
                "Know(katya, languageA)"
            ],
            "question": "Danil knows LanguageA.",
            "question_fol": "Know(danil, languageA)",
            "label": "False",
            "predicates_fol": [
                "UniversalLanguage(x)",
                "Know(x, y)",
                "CanCommunicateWith(x, y)"
            ]
        },
        {
            "id": 596,
            "story_id": 209,
            "context": [
                "If someone lives in a place named Galicia, then they live in either Spain or Poland.",
                "Spain is in Europe.",
                "Poland is in Europe.",
                "Rochelle lives in Europe.",
                "Dominique does not live in Europe.",
                "Alfonso lives in a place named Galicia."
            ],
            "context_fol": [
                "\u2200x (\u2203y (LiveIn(x, y) \u2227 Place(y) \u2227 Named(y, galicia)) \u2192 LiveIn(x, spain) \u2295 LiveIn(x, poland))",
                "\u2200x (LiveIn(x, spain) \u2192 LiveIn(x, europe))",
                "\u2200x (LiveIn(x, poland) \u2192 LiveIn(x, europe))",
                "LiveIn(rochelle, europe)",
                "\u00acLiveIn(dominique, europe)",
                "\u2203y (LiveIn(alfonso, y) \u2227 Place(y) \u2227 Named(y, galicia))"
            ],
            "question": "Rochelle lives in a place namedGalicia.",
            "question_fol": "\u2203y (LiveIn(rochelle, y) \u2227 Place(y) \u2227 Named(y, galicia))",
            "label": "Uncertain",
            "predicates_fol": [
                "LiveIn(x, y)",
                "Place(x)",
                "Named(x, y)"
            ]
        },
        {
            "id": 1117,
            "story_id": 403,
            "context": [
                "There's a person in Benji's family who likes eating cheese or is a francophile.",
                "There is no francophile in Benji's family whose favorite country is Spain.",
                "There is a person in Benji's family who likes eating cheese or whose favorite country is Spain.",
                "Fabien is in Benji's family and  does not both study Spanish and also like eating cheese.",
                "Fabien studies Spanish."
            ],
            "context_fol": [
                "\u2203x (InBenjiSFamily(x) \u2192 (LikeEating(x, cheese) \u2228 Francophile(x)))",
                "\u2200x ((InBenjiSFamily(x) \u2227 Francophile(x)) \u2192 \u00acFavor(x, spain))",
                "\u2203x (InBenjiSFamily(x) \u2227 (Favor(x, spain) \u2228 LikeEating(x, cheese)))",
                "InBenjiSFamily(fabien) \u2227 (\u00ac(LikeEating(fabien, cheese) \u2227 Study(fabien, spanish)))",
                "Study(fabien, spanish)"
            ],
            "question": "Fabien is a person who likes eating cheese.",
            "question_fol": "LikeEating(fabien, cheese)",
            "label": "Uncertain",
            "predicates_fol": [
                "InBenjiSFamily(x)",
                "LikeEating(x, y)",
                "Francophile(x)",
                "Favor(x, y)",
                "Study(x, y)"
            ]
        }
    ],
    "609": [
        {
            "id": 690,
            "story_id": 247,
            "context": [
                "LanguageA is a universal language",
                "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
                "Katya cannot communicate with Danil.",
                "Katya knows LanguageA. "
            ],
            "context_fol": [
                "UniversalLanguage(languageA)",
                "\u2200x \u2200y (\u2203z (\u00ac(x=y) \u2227 Know(x, z) \u2227 Know(y, z) \u2227 UniversalLanguage(z)) \u2192 CanCommunicateWith(x, y) \u2227 CanCommunicateWith(y, x))",
                "\u00acCanCommunicateWith(katya, danil)",
                "Know(katya, languageA)"
            ],
            "question": "Danil knows LanguageA.",
            "question_fol": "Know(danil, languageA)",
            "label": "False",
            "predicates_fol": [
                "UniversalLanguage(x)",
                "Know(x, y)",
                "CanCommunicateWith(x, y)"
            ]
        },
        {
            "id": 596,
            "story_id": 209,
            "context": [
                "If someone lives in a place named Galicia, then they live in either Spain or Poland.",
                "Spain is in Europe.",
                "Poland is in Europe.",
                "Rochelle lives in Europe.",
                "Dominique does not live in Europe.",
                "Alfonso lives in a place named Galicia."
            ],
            "context_fol": [
                "\u2200x (\u2203y (LiveIn(x, y) \u2227 Place(y) \u2227 Named(y, galicia)) \u2192 LiveIn(x, spain) \u2295 LiveIn(x, poland))",
                "\u2200x (LiveIn(x, spain) \u2192 LiveIn(x, europe))",
                "\u2200x (LiveIn(x, poland) \u2192 LiveIn(x, europe))",
                "LiveIn(rochelle, europe)",
                "\u00acLiveIn(dominique, europe)",
                "\u2203y (LiveIn(alfonso, y) \u2227 Place(y) \u2227 Named(y, galicia))"
            ],
            "question": "Rochelle lives in a place namedGalicia.",
            "question_fol": "\u2203y (LiveIn(rochelle, y) \u2227 Place(y) \u2227 Named(y, galicia))",
            "label": "Uncertain",
            "predicates_fol": [
                "LiveIn(x, y)",
                "Place(x)",
                "Named(x, y)"
            ]
        },
        {
            "id": 1117,
            "story_id": 403,
            "context": [
                "There's a person in Benji's family who likes eating cheese or is a francophile.",
                "There is no francophile in Benji's family whose favorite country is Spain.",
                "There is a person in Benji's family who likes eating cheese or whose favorite country is Spain.",
                "Fabien is in Benji's family and  does not both study Spanish and also like eating cheese.",
                "Fabien studies Spanish."
            ],
            "context_fol": [
                "\u2203x (InBenjiSFamily(x) \u2192 (LikeEating(x, cheese) \u2228 Francophile(x)))",
                "\u2200x ((InBenjiSFamily(x) \u2227 Francophile(x)) \u2192 \u00acFavor(x, spain))",
                "\u2203x (InBenjiSFamily(x) \u2227 (Favor(x, spain) \u2228 LikeEating(x, cheese)))",
                "InBenjiSFamily(fabien) \u2227 (\u00ac(LikeEating(fabien, cheese) \u2227 Study(fabien, spanish)))",
                "Study(fabien, spanish)"
            ],
            "question": "Fabien is a person who likes eating cheese.",
            "question_fol": "LikeEating(fabien, cheese)",
            "label": "Uncertain",
            "predicates_fol": [
                "InBenjiSFamily(x)",
                "LikeEating(x, y)",
                "Francophile(x)",
                "Favor(x, y)",
                "Study(x, y)"
            ]
        }
    ],
    "610": [
        {
            "id": 690,
            "story_id": 247,
            "context": [
                "LanguageA is a universal language",
                "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
                "Katya cannot communicate with Danil.",
                "Katya knows LanguageA. "
            ],
            "context_fol": [
                "UniversalLanguage(languageA)",
                "\u2200x \u2200y (\u2203z (\u00ac(x=y) \u2227 Know(x, z) \u2227 Know(y, z) \u2227 UniversalLanguage(z)) \u2192 CanCommunicateWith(x, y) \u2227 CanCommunicateWith(y, x))",
                "\u00acCanCommunicateWith(katya, danil)",
                "Know(katya, languageA)"
            ],
            "question": "Danil knows LanguageA.",
            "question_fol": "Know(danil, languageA)",
            "label": "False",
            "predicates_fol": [
                "UniversalLanguage(x)",
                "Know(x, y)",
                "CanCommunicateWith(x, y)"
            ]
        },
        {
            "id": 596,
            "story_id": 209,
            "context": [
                "If someone lives in a place named Galicia, then they live in either Spain or Poland.",
                "Spain is in Europe.",
                "Poland is in Europe.",
                "Rochelle lives in Europe.",
                "Dominique does not live in Europe.",
                "Alfonso lives in a place named Galicia."
            ],
            "context_fol": [
                "\u2200x (\u2203y (LiveIn(x, y) \u2227 Place(y) \u2227 Named(y, galicia)) \u2192 LiveIn(x, spain) \u2295 LiveIn(x, poland))",
                "\u2200x (LiveIn(x, spain) \u2192 LiveIn(x, europe))",
                "\u2200x (LiveIn(x, poland) \u2192 LiveIn(x, europe))",
                "LiveIn(rochelle, europe)",
                "\u00acLiveIn(dominique, europe)",
                "\u2203y (LiveIn(alfonso, y) \u2227 Place(y) \u2227 Named(y, galicia))"
            ],
            "question": "Rochelle lives in a place namedGalicia.",
            "question_fol": "\u2203y (LiveIn(rochelle, y) \u2227 Place(y) \u2227 Named(y, galicia))",
            "label": "Uncertain",
            "predicates_fol": [
                "LiveIn(x, y)",
                "Place(x)",
                "Named(x, y)"
            ]
        },
        {
            "id": 1117,
            "story_id": 403,
            "context": [
                "There's a person in Benji's family who likes eating cheese or is a francophile.",
                "There is no francophile in Benji's family whose favorite country is Spain.",
                "There is a person in Benji's family who likes eating cheese or whose favorite country is Spain.",
                "Fabien is in Benji's family and  does not both study Spanish and also like eating cheese.",
                "Fabien studies Spanish."
            ],
            "context_fol": [
                "\u2203x (InBenjiSFamily(x) \u2192 (LikeEating(x, cheese) \u2228 Francophile(x)))",
                "\u2200x ((InBenjiSFamily(x) \u2227 Francophile(x)) \u2192 \u00acFavor(x, spain))",
                "\u2203x (InBenjiSFamily(x) \u2227 (Favor(x, spain) \u2228 LikeEating(x, cheese)))",
                "InBenjiSFamily(fabien) \u2227 (\u00ac(LikeEating(fabien, cheese) \u2227 Study(fabien, spanish)))",
                "Study(fabien, spanish)"
            ],
            "question": "Fabien is a person who likes eating cheese.",
            "question_fol": "LikeEating(fabien, cheese)",
            "label": "Uncertain",
            "predicates_fol": [
                "InBenjiSFamily(x)",
                "LikeEating(x, y)",
                "Francophile(x)",
                "Favor(x, y)",
                "Study(x, y)"
            ]
        }
    ],
    "240": [
        {
            "id": 373,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
                "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
                "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo has scored many goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 Have(x, leftFoot) \u2227 Have(x, rightFoot))",
                "\u2200x (SoccerPlayer(x) \u2227 UseEfficiently(x, leftFoot) \u2227 UseEfficiently(x, rightFoot) \u2192 TopSoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, leftFoot) \u2192 UseEfficiently(x, leftFoot))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, rightFoot) \u2192 UseEfficiently(x, rightFoot))",
                "SoccerPlayer(ronaldo)",
                "UseEfficiently(ronaldo, rightFoot)",
                "ScoreUsing(ronaldo, manyGoals, leftFoot)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "question_fol": "TopSoccerPlayer(ronaldo)",
            "label": "True",
            "predicates_fol": [
                "SoccerPlayer(x)",
                "Have(x, y)",
                "UseEfficiently(x, y)",
                "TopSoccerPlayer(x)",
                "ScoreUsing(x, y)"
            ]
        },
        {
            "id": 626,
            "story_id": 221,
            "context": [
                "Ernest Pohl was a Polish football player. ",
                "A football player in the Polish First Division has scored over 180 goals. ",
                "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
                "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ",
                "Ernest Pohl is from Ruda \u015al\u0105ska. "
            ],
            "context_fol": [
                "Polish(ernestPohl) \u2227 FootballPlayer(ernestPohl)",
                "\u2203x (FootballPlayer(x) \u2227 In(x, polishFirstDivision) \u2227 ScoredOver(x, 180Goals))",
                "In(ernestPohl, polishFirstDivision) \u2227 ScoredOver(ernestPohl, 180Goals)",
                "\u2203x \u2203y (GornikZabrzes(x) \u2227 Stadium(x) \u2227 NamedAfter(x, y) \u2227 SoccerPlayer(y) \u2227 From(y, ruda\u015al\u0105ska))",
                "From(ernestPohl, ruda\u015al\u0105ska))"
            ],
            "question": "Ernest Pohl has not scored more than 180 goals.",
            "question_fol": "\u00acScoredOver(ernestPohl, 180Goals)",
            "label": "False",
            "predicates_fol": [
                "Polish(x)",
                "FootballPlayer(x)",
                "In(x, y)",
                "ScoredOver(x, y)",
                "GornikZabrzes(x)",
                "Stadium(x)",
                "NamedAfter(x, y)",
                "SoccerPlayer(x)",
                "From(x, y)"
            ]
        },
        {
            "id": 718,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adamBuska) \u2227 European(adamBuska)",
                "\u2200x (FootballPlayer(x) \u2227 European(x) \u2192 \u2203y (Call(american, y, soccer) \u2227 Play(x, y)))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "question_fol": "\u2203y (Call(american, y, soccer) \u2227 Play(adamBuska, y))",
            "label": "True",
            "predicates_fol": [
                "FootballPlayer(x)",
                "European(x)",
                "Call(x, y, z)",
                "Play(x, y)"
            ]
        }
    ],
    "241": [
        {
            "id": 373,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
                "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
                "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo has scored many goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 Have(x, leftFoot) \u2227 Have(x, rightFoot))",
                "\u2200x (SoccerPlayer(x) \u2227 UseEfficiently(x, leftFoot) \u2227 UseEfficiently(x, rightFoot) \u2192 TopSoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, leftFoot) \u2192 UseEfficiently(x, leftFoot))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, rightFoot) \u2192 UseEfficiently(x, rightFoot))",
                "SoccerPlayer(ronaldo)",
                "UseEfficiently(ronaldo, rightFoot)",
                "ScoreUsing(ronaldo, manyGoals, leftFoot)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "question_fol": "TopSoccerPlayer(ronaldo)",
            "label": "True",
            "predicates_fol": [
                "SoccerPlayer(x)",
                "Have(x, y)",
                "UseEfficiently(x, y)",
                "TopSoccerPlayer(x)",
                "ScoreUsing(x, y)"
            ]
        },
        {
            "id": 626,
            "story_id": 221,
            "context": [
                "Ernest Pohl was a Polish football player. ",
                "A football player in the Polish First Division has scored over 180 goals. ",
                "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
                "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ",
                "Ernest Pohl is from Ruda \u015al\u0105ska. "
            ],
            "context_fol": [
                "Polish(ernestPohl) \u2227 FootballPlayer(ernestPohl)",
                "\u2203x (FootballPlayer(x) \u2227 In(x, polishFirstDivision) \u2227 ScoredOver(x, 180Goals))",
                "In(ernestPohl, polishFirstDivision) \u2227 ScoredOver(ernestPohl, 180Goals)",
                "\u2203x \u2203y (GornikZabrzes(x) \u2227 Stadium(x) \u2227 NamedAfter(x, y) \u2227 SoccerPlayer(y) \u2227 From(y, ruda\u015al\u0105ska))",
                "From(ernestPohl, ruda\u015al\u0105ska))"
            ],
            "question": "Ernest Pohl has not scored more than 180 goals.",
            "question_fol": "\u00acScoredOver(ernestPohl, 180Goals)",
            "label": "False",
            "predicates_fol": [
                "Polish(x)",
                "FootballPlayer(x)",
                "In(x, y)",
                "ScoredOver(x, y)",
                "GornikZabrzes(x)",
                "Stadium(x)",
                "NamedAfter(x, y)",
                "SoccerPlayer(x)",
                "From(x, y)"
            ]
        },
        {
            "id": 718,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adamBuska) \u2227 European(adamBuska)",
                "\u2200x (FootballPlayer(x) \u2227 European(x) \u2192 \u2203y (Call(american, y, soccer) \u2227 Play(x, y)))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "question_fol": "\u2203y (Call(american, y, soccer) \u2227 Play(adamBuska, y))",
            "label": "True",
            "predicates_fol": [
                "FootballPlayer(x)",
                "European(x)",
                "Call(x, y, z)",
                "Play(x, y)"
            ]
        }
    ],
    "242": [
        {
            "id": 373,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
                "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
                "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo has scored many goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 Have(x, leftFoot) \u2227 Have(x, rightFoot))",
                "\u2200x (SoccerPlayer(x) \u2227 UseEfficiently(x, leftFoot) \u2227 UseEfficiently(x, rightFoot) \u2192 TopSoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, leftFoot) \u2192 UseEfficiently(x, leftFoot))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, rightFoot) \u2192 UseEfficiently(x, rightFoot))",
                "SoccerPlayer(ronaldo)",
                "UseEfficiently(ronaldo, rightFoot)",
                "ScoreUsing(ronaldo, manyGoals, leftFoot)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "question_fol": "TopSoccerPlayer(ronaldo)",
            "label": "True",
            "predicates_fol": [
                "SoccerPlayer(x)",
                "Have(x, y)",
                "UseEfficiently(x, y)",
                "TopSoccerPlayer(x)",
                "ScoreUsing(x, y)"
            ]
        },
        {
            "id": 626,
            "story_id": 221,
            "context": [
                "Ernest Pohl was a Polish football player. ",
                "A football player in the Polish First Division has scored over 180 goals. ",
                "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
                "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ",
                "Ernest Pohl is from Ruda \u015al\u0105ska. "
            ],
            "context_fol": [
                "Polish(ernestPohl) \u2227 FootballPlayer(ernestPohl)",
                "\u2203x (FootballPlayer(x) \u2227 In(x, polishFirstDivision) \u2227 ScoredOver(x, 180Goals))",
                "In(ernestPohl, polishFirstDivision) \u2227 ScoredOver(ernestPohl, 180Goals)",
                "\u2203x \u2203y (GornikZabrzes(x) \u2227 Stadium(x) \u2227 NamedAfter(x, y) \u2227 SoccerPlayer(y) \u2227 From(y, ruda\u015al\u0105ska))",
                "From(ernestPohl, ruda\u015al\u0105ska))"
            ],
            "question": "Ernest Pohl has not scored more than 180 goals.",
            "question_fol": "\u00acScoredOver(ernestPohl, 180Goals)",
            "label": "False",
            "predicates_fol": [
                "Polish(x)",
                "FootballPlayer(x)",
                "In(x, y)",
                "ScoredOver(x, y)",
                "GornikZabrzes(x)",
                "Stadium(x)",
                "NamedAfter(x, y)",
                "SoccerPlayer(x)",
                "From(x, y)"
            ]
        },
        {
            "id": 718,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adamBuska) \u2227 European(adamBuska)",
                "\u2200x (FootballPlayer(x) \u2227 European(x) \u2192 \u2203y (Call(american, y, soccer) \u2227 Play(x, y)))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "question_fol": "\u2203y (Call(american, y, soccer) \u2227 Play(adamBuska, y))",
            "label": "True",
            "predicates_fol": [
                "FootballPlayer(x)",
                "European(x)",
                "Call(x, y, z)",
                "Play(x, y)"
            ]
        }
    ],
    "4": [
        {
            "id": 231,
            "story_id": 76,
            "context": [
                "Asa Hoffmann was born in New York City.",
                "Asa Hoffman lives in Manhattan.",
                "Asa Hoffman is a chess player.",
                "Some chess players are grandmasters.",
                "People born and living in New York City are New Yorkers.",
                "People living in Manhattan live in New York City."
            ],
            "context_fol": [
                "BornIn(asaHoffmann, newYorkCity)",
                "LiveIn(asaHoffmann, manhattan)",
                "ChessPlayer(asaHoffmann)",
                "\u2203x \u2203y (ChessPlayer(x) \u2227 GrandMaster(x) \u2227 (\u00ac(x=y)) \u2227 ChessPlayer(y) \u2227 GrandMaster(y))",
                "\u2200x ((BornIn(x, newYorkCity) \u2227 LiveIn(x, newYorkCity)) \u2192 NewYorker(x))",
                "\u2200x (LiveIn(x, manhattan) \u2192 LiveIn(x, newYorkCity))"
            ],
            "question": "Asa Hoffmann is a New Yorker.",
            "question_fol": "NewYorker(asaHoffmann)",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "LiveIn(x, y)",
                "ChessPlayer(x)",
                "GrandMaster(x)",
                "NewYorker(x)"
            ]
        },
        {
            "id": 594,
            "story_id": 208,
            "context": [
                "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
                "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
                "NY, PA, OH, and MI are states in the US.",
                "ON is a state of Canada.",
                "There is a major settlement of Lake Huron in ON. ",
                "All states are in their country.",
                "The US is in North America.",
                "The Great Lakes began to form at the end of the Last Glacial Period."
            ],
            "context_fol": [
                "\u2200x (GreatLake(x) \u2192 Superior(x) \u2295 Michigan(x) \u2295 Huron(x) \u2295 Erie(x) \u2295 Ontario(x))",
                "\u2200x (Erie (x) \u2227 MajorSettlement(x) \u2192 In(x, nY) \u2228 In(x, pA) \u2228 In(x, oH) \u2228 In(x, mI))",
                "StateOf(nY, uS) \u2227 StateOf(pA, uS) \u2227 StateOf(oH, uS) \u2227 StateOf(mI, uS)",
                "StateOf(oN, canada)",
                "\u2203x (Huron(x) \u2227 MajorSettlement(x) \u2227 In(x, oN))",
                "\u2200x \u2200y (StateOf(x, y) \u2192 In(x, y))",
                "In(us, northAmerica)",
                "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastGlacialPeriod))"
            ],
            "question": "Lake Erie has a major settlement.",
            "question_fol": "\u2203x \u2203y (Erie(y) \u2227 MajorSettlementOf(x, y))",
            "label": "True",
            "predicates_fol": [
                "GreatLake(x)",
                "Superior(x)",
                "Michigan(x)",
                "Huron(x)",
                "Erie(x)",
                "Ontario(x)",
                "MajorSettlement(x)",
                "In(x, y)",
                "StateOf(x, y)",
                "FormAtEndOf(x, y)"
            ]
        },
        {
            "id": 376,
            "story_id": 127,
            "context": [
                "New York City is Located in the United States of America.",
                "The United States of America is part of North America.",
                "North America is in the western hemisphere of the earth.",
                "New York City is a highly developed city.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "LocatedIn(newYorkCity, unitedStatesOfAmerica)",
                "LocatedIn(usa, northAmerica)",
                "LocatedIn(northAmerica, westernHemisphere)",
                "HighlyDeveloped(newYorkCity)",
                "\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))"
            ],
            "question": "A highly developed city is located in the western hemisphere of the earth.",
            "question_fol": "\u2203x (HighlyDeveloped(x) \u2227 LocatedIn(x, westernHemisphere))",
            "label": "True",
            "predicates_fol": [
                "LocatedIn(x, y)",
                "HighlyDeveloped(x)"
            ]
        }
    ],
    "5": [
        {
            "id": 231,
            "story_id": 76,
            "context": [
                "Asa Hoffmann was born in New York City.",
                "Asa Hoffman lives in Manhattan.",
                "Asa Hoffman is a chess player.",
                "Some chess players are grandmasters.",
                "People born and living in New York City are New Yorkers.",
                "People living in Manhattan live in New York City."
            ],
            "context_fol": [
                "BornIn(asaHoffmann, newYorkCity)",
                "LiveIn(asaHoffmann, manhattan)",
                "ChessPlayer(asaHoffmann)",
                "\u2203x \u2203y (ChessPlayer(x) \u2227 GrandMaster(x) \u2227 (\u00ac(x=y)) \u2227 ChessPlayer(y) \u2227 GrandMaster(y))",
                "\u2200x ((BornIn(x, newYorkCity) \u2227 LiveIn(x, newYorkCity)) \u2192 NewYorker(x))",
                "\u2200x (LiveIn(x, manhattan) \u2192 LiveIn(x, newYorkCity))"
            ],
            "question": "Asa Hoffmann is a New Yorker.",
            "question_fol": "NewYorker(asaHoffmann)",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "LiveIn(x, y)",
                "ChessPlayer(x)",
                "GrandMaster(x)",
                "NewYorker(x)"
            ]
        },
        {
            "id": 594,
            "story_id": 208,
            "context": [
                "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
                "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
                "NY, PA, OH, and MI are states in the US.",
                "ON is a state of Canada.",
                "There is a major settlement of Lake Huron in ON. ",
                "All states are in their country.",
                "The US is in North America.",
                "The Great Lakes began to form at the end of the Last Glacial Period."
            ],
            "context_fol": [
                "\u2200x (GreatLake(x) \u2192 Superior(x) \u2295 Michigan(x) \u2295 Huron(x) \u2295 Erie(x) \u2295 Ontario(x))",
                "\u2200x (Erie (x) \u2227 MajorSettlement(x) \u2192 In(x, nY) \u2228 In(x, pA) \u2228 In(x, oH) \u2228 In(x, mI))",
                "StateOf(nY, uS) \u2227 StateOf(pA, uS) \u2227 StateOf(oH, uS) \u2227 StateOf(mI, uS)",
                "StateOf(oN, canada)",
                "\u2203x (Huron(x) \u2227 MajorSettlement(x) \u2227 In(x, oN))",
                "\u2200x \u2200y (StateOf(x, y) \u2192 In(x, y))",
                "In(us, northAmerica)",
                "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastGlacialPeriod))"
            ],
            "question": "Lake Erie has a major settlement.",
            "question_fol": "\u2203x \u2203y (Erie(y) \u2227 MajorSettlementOf(x, y))",
            "label": "True",
            "predicates_fol": [
                "GreatLake(x)",
                "Superior(x)",
                "Michigan(x)",
                "Huron(x)",
                "Erie(x)",
                "Ontario(x)",
                "MajorSettlement(x)",
                "In(x, y)",
                "StateOf(x, y)",
                "FormAtEndOf(x, y)"
            ]
        },
        {
            "id": 376,
            "story_id": 127,
            "context": [
                "New York City is Located in the United States of America.",
                "The United States of America is part of North America.",
                "North America is in the western hemisphere of the earth.",
                "New York City is a highly developed city.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "LocatedIn(newYorkCity, unitedStatesOfAmerica)",
                "LocatedIn(usa, northAmerica)",
                "LocatedIn(northAmerica, westernHemisphere)",
                "HighlyDeveloped(newYorkCity)",
                "\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))"
            ],
            "question": "A highly developed city is located in the western hemisphere of the earth.",
            "question_fol": "\u2203x (HighlyDeveloped(x) \u2227 LocatedIn(x, westernHemisphere))",
            "label": "True",
            "predicates_fol": [
                "LocatedIn(x, y)",
                "HighlyDeveloped(x)"
            ]
        }
    ],
    "6": [
        {
            "id": 231,
            "story_id": 76,
            "context": [
                "Asa Hoffmann was born in New York City.",
                "Asa Hoffman lives in Manhattan.",
                "Asa Hoffman is a chess player.",
                "Some chess players are grandmasters.",
                "People born and living in New York City are New Yorkers.",
                "People living in Manhattan live in New York City."
            ],
            "context_fol": [
                "BornIn(asaHoffmann, newYorkCity)",
                "LiveIn(asaHoffmann, manhattan)",
                "ChessPlayer(asaHoffmann)",
                "\u2203x \u2203y (ChessPlayer(x) \u2227 GrandMaster(x) \u2227 (\u00ac(x=y)) \u2227 ChessPlayer(y) \u2227 GrandMaster(y))",
                "\u2200x ((BornIn(x, newYorkCity) \u2227 LiveIn(x, newYorkCity)) \u2192 NewYorker(x))",
                "\u2200x (LiveIn(x, manhattan) \u2192 LiveIn(x, newYorkCity))"
            ],
            "question": "Asa Hoffmann is a New Yorker.",
            "question_fol": "NewYorker(asaHoffmann)",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "LiveIn(x, y)",
                "ChessPlayer(x)",
                "GrandMaster(x)",
                "NewYorker(x)"
            ]
        },
        {
            "id": 594,
            "story_id": 208,
            "context": [
                "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
                "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
                "NY, PA, OH, and MI are states in the US.",
                "ON is a state of Canada.",
                "There is a major settlement of Lake Huron in ON. ",
                "All states are in their country.",
                "The US is in North America.",
                "The Great Lakes began to form at the end of the Last Glacial Period."
            ],
            "context_fol": [
                "\u2200x (GreatLake(x) \u2192 Superior(x) \u2295 Michigan(x) \u2295 Huron(x) \u2295 Erie(x) \u2295 Ontario(x))",
                "\u2200x (Erie (x) \u2227 MajorSettlement(x) \u2192 In(x, nY) \u2228 In(x, pA) \u2228 In(x, oH) \u2228 In(x, mI))",
                "StateOf(nY, uS) \u2227 StateOf(pA, uS) \u2227 StateOf(oH, uS) \u2227 StateOf(mI, uS)",
                "StateOf(oN, canada)",
                "\u2203x (Huron(x) \u2227 MajorSettlement(x) \u2227 In(x, oN))",
                "\u2200x \u2200y (StateOf(x, y) \u2192 In(x, y))",
                "In(us, northAmerica)",
                "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastGlacialPeriod))"
            ],
            "question": "Lake Erie has a major settlement.",
            "question_fol": "\u2203x \u2203y (Erie(y) \u2227 MajorSettlementOf(x, y))",
            "label": "True",
            "predicates_fol": [
                "GreatLake(x)",
                "Superior(x)",
                "Michigan(x)",
                "Huron(x)",
                "Erie(x)",
                "Ontario(x)",
                "MajorSettlement(x)",
                "In(x, y)",
                "StateOf(x, y)",
                "FormAtEndOf(x, y)"
            ]
        },
        {
            "id": 376,
            "story_id": 127,
            "context": [
                "New York City is Located in the United States of America.",
                "The United States of America is part of North America.",
                "North America is in the western hemisphere of the earth.",
                "New York City is a highly developed city.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "LocatedIn(newYorkCity, unitedStatesOfAmerica)",
                "LocatedIn(usa, northAmerica)",
                "LocatedIn(northAmerica, westernHemisphere)",
                "HighlyDeveloped(newYorkCity)",
                "\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))"
            ],
            "question": "A highly developed city is located in the western hemisphere of the earth.",
            "question_fol": "\u2203x (HighlyDeveloped(x) \u2227 LocatedIn(x, westernHemisphere))",
            "label": "True",
            "predicates_fol": [
                "LocatedIn(x, y)",
                "HighlyDeveloped(x)"
            ]
        }
    ],
    "548": [
        {
            "id": 776,
            "story_id": 312,
            "context": [
                "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
                "Those who are enrolled in an academic program can not work full-time.",
                "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
                "All PhD graduate can work full-time. ",
                "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
            ],
            "context_fol": [
                "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))",
                "\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))",
                "\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))",
                "\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))",
                "\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)"
            ],
            "question": "Tom is a PhD graduate.",
            "question_fol": "PhdGraduate(tom)",
            "label": "False",
            "predicates_fol": [
                "Have(x, y)",
                "EnrolledIn(x, y)",
                "Work(x, y)",
                "StudyIn(x, y)",
                "PhDGraduate(x)"
            ]
        },
        {
            "id": 779,
            "story_id": 313,
            "context": [
                "Some of those who apply for a Schengen visa get it.",
                "To apply for a Schengen Visa, you need to provide financial guarantees.",
                "If you need to provide financial guarantees, you must request documents from the bank.",
                "Do not close your bank account if you request documents from the bank.",
                "Philip closed his bank account."
            ],
            "context_fol": [
                "\u2203x (Apply(x, schengenVisa) \u2192 Get(x, schengenVisa))",
                "\u2200x (Apply(x, schengenVisa) \u2192 Provide(x, financialGuarantees))",
                "\u2200x (Provide(x, financialGuarantees) \u2192 Request(x, documentsFromBank))",
                "\u2200x (Request(x, documentsFromBank) \u2192 \u00acClose(x, bankAccount))",
                "Close(philip, bankAccount)"
            ],
            "question": "Philip got a Schengen visa.",
            "question_fol": "Get(philip, schengenVisa)",
            "label": "Uncertain",
            "predicates_fol": [
                "Apply(x, y)",
                "Get(x, y)",
                "Provide(x, y)",
                "Request(x, y)",
                "Close(x, y)"
            ]
        },
        {
            "id": 773,
            "story_id": 311,
            "context": [
                "No payment cards issued by Russian banks can be used with ApplePay.",
                "All MIR payment cards are issued by Russian banks.",
                "Some international payment cards can be used with ApplePay.",
                "Social payments in Russia can only be transferred to MIR payment cards.",
                "Bank of America payment cards can be used with ApplePay."
            ],
            "context_fol": [
                "\u2200x \u2200y (PaymentCard(x) \u2227 RussianBank(y) \u2227 IssuedBy(x, y) \u2192 \u00acUsedWith(x, applePay))",
                "\u2200x \u2200y (PaymentCard(x) \u2227 MIR(x) \u2192 RussianBank(y) \u2227 IssuedBy(x, y))",
                "\u2203x (PaymentCard(x) \u2227 International(x) \u2192 UsedWith(x, applePay))",
                "\u2200x \u2200y (SocialPayment(x) \u2227TransferredTo(x, y) \u2192 PaymentCard(y) \u2227 MIR(y))",
                "PaymentCard(bankOfAmerica) \u2227 UsedWith(bankOfAmerica, applePay)"
            ],
            "question": "Bank of America payment cards are international.",
            "question_fol": "PaymentCard(bankOfAmerica) \u2227 International(bankOfAmerica)",
            "label": "Uncertain",
            "predicates_fol": [
                "PaymentCard(x)",
                "RussianBank(x)",
                "IssuedBy(x, y)",
                "UsedWith(x, y)",
                "MIR(x)",
                "International(x)",
                "SocialPayment(x)",
                "TransferredTo(x, y)"
            ]
        }
    ],
    "549": [
        {
            "id": 776,
            "story_id": 312,
            "context": [
                "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
                "Those who are enrolled in an academic program can not work full-time.",
                "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
                "All PhD graduate can work full-time. ",
                "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
            ],
            "context_fol": [
                "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))",
                "\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))",
                "\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))",
                "\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))",
                "\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)"
            ],
            "question": "Tom is a PhD graduate.",
            "question_fol": "PhdGraduate(tom)",
            "label": "False",
            "predicates_fol": [
                "Have(x, y)",
                "EnrolledIn(x, y)",
                "Work(x, y)",
                "StudyIn(x, y)",
                "PhDGraduate(x)"
            ]
        },
        {
            "id": 779,
            "story_id": 313,
            "context": [
                "Some of those who apply for a Schengen visa get it.",
                "To apply for a Schengen Visa, you need to provide financial guarantees.",
                "If you need to provide financial guarantees, you must request documents from the bank.",
                "Do not close your bank account if you request documents from the bank.",
                "Philip closed his bank account."
            ],
            "context_fol": [
                "\u2203x (Apply(x, schengenVisa) \u2192 Get(x, schengenVisa))",
                "\u2200x (Apply(x, schengenVisa) \u2192 Provide(x, financialGuarantees))",
                "\u2200x (Provide(x, financialGuarantees) \u2192 Request(x, documentsFromBank))",
                "\u2200x (Request(x, documentsFromBank) \u2192 \u00acClose(x, bankAccount))",
                "Close(philip, bankAccount)"
            ],
            "question": "Philip got a Schengen visa.",
            "question_fol": "Get(philip, schengenVisa)",
            "label": "Uncertain",
            "predicates_fol": [
                "Apply(x, y)",
                "Get(x, y)",
                "Provide(x, y)",
                "Request(x, y)",
                "Close(x, y)"
            ]
        },
        {
            "id": 773,
            "story_id": 311,
            "context": [
                "No payment cards issued by Russian banks can be used with ApplePay.",
                "All MIR payment cards are issued by Russian banks.",
                "Some international payment cards can be used with ApplePay.",
                "Social payments in Russia can only be transferred to MIR payment cards.",
                "Bank of America payment cards can be used with ApplePay."
            ],
            "context_fol": [
                "\u2200x \u2200y (PaymentCard(x) \u2227 RussianBank(y) \u2227 IssuedBy(x, y) \u2192 \u00acUsedWith(x, applePay))",
                "\u2200x \u2200y (PaymentCard(x) \u2227 MIR(x) \u2192 RussianBank(y) \u2227 IssuedBy(x, y))",
                "\u2203x (PaymentCard(x) \u2227 International(x) \u2192 UsedWith(x, applePay))",
                "\u2200x \u2200y (SocialPayment(x) \u2227TransferredTo(x, y) \u2192 PaymentCard(y) \u2227 MIR(y))",
                "PaymentCard(bankOfAmerica) \u2227 UsedWith(bankOfAmerica, applePay)"
            ],
            "question": "Bank of America payment cards are international.",
            "question_fol": "PaymentCard(bankOfAmerica) \u2227 International(bankOfAmerica)",
            "label": "Uncertain",
            "predicates_fol": [
                "PaymentCard(x)",
                "RussianBank(x)",
                "IssuedBy(x, y)",
                "UsedWith(x, y)",
                "MIR(x)",
                "International(x)",
                "SocialPayment(x)",
                "TransferredTo(x, y)"
            ]
        }
    ],
    "1271": [
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "1272": [
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "1273": [
        {
            "id": 725,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))",
                "\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))"
            ],
            "question": "Not all bears are wild.",
            "question_fol": "\u2203x (Bear(x) \u2227 \u00acWild(x))",
            "label": "True",
            "predicates_fol": [
                "Bear(x)",
                "In(x, y)",
                "Wild(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "663": [
        {
            "id": 1231,
            "story_id": 432,
            "context": [
                "All Yale dormitories are located on the Yale campus. ",
                "All Yale buildings managed by Yale Housing are dormitories. ",
                "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
                "None of the Yale buildings open to students were built before 1701. ",
                "All Yale buildings located on the Yale campus are open to students. ",
                "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
            ],
            "context_fol": [
                "\u2200x (YaleDormitory(x) \u2192 LocatedOn(x, yaleCampus))",
                "\u2200x ((YaleBuildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 YaleDormitory(x))",
                "\u2200x ((YaleBuildings(x) \u2227 OperatedBy(x, yaleHousingStaff)) \u2192 ManagedBy(x, yaleHousing))",
                "\u2200x ((YaleBuildings(x) \u2227 OpenToStudents(x)) \u2192 (\u00ac\u2203y(Before(y, yr1701) \u2227 Established(x, y))))",
                "\u2200x ((YaleBuildings(x) \u2227 LocatedOn(x, yaleCampus)) \u2192 OpenToStudents(x))",
                "YaleBuildings(harkness) \u2227 (OperatedBy(x, harkness) \u2295 LocatedOn(harkness, yaleCampus))"
            ],
            "question": "Harkness is a Yale dormitory.",
            "question_fol": "YaleDormitory(harkness)",
            "label": "Uncertain",
            "predicates_fol": [
                "YaleDormitory(x)",
                "LocatedOn(x, y)",
                "YaleBuildings(x)",
                "ManagedBy(x, y)",
                "OperatedBy(x, y)",
                "OpenToStudents(x)",
                "Before(x, y)",
                "Established(x, y)"
            ]
        },
        {
            "id": 177,
            "story_id": 60,
            "context": [
                "All buildings in New Haven are not high.",
                "All buildings managed by Yale Housing are located in New Haven. ",
                "All buildings in Manhattans are high. ",
                "All buildings owned by Bloomberg are located in Manhattans. ",
                "All buildings with the Bloomberg logo are owned by Bloomberg. ",
                "Tower A is managed by Yale Housing.",
                "Tower B is with the Bloomberg logo."
            ],
            "context_fol": [
                "\u2200x (In(x, newHaven) \u2192 \u00acHigh(x))",
                "\u2200x (YaleHousing(x) \u2192 In(x, newHaven))",
                "\u2200x (In(x, manhattan) \u2192 High(x))",
                "\u2200x (Bloomberg(x) \u2192 In(x, manhattan))",
                "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
                "YaleHousing(tower-a)",
                "BloombergLogo(tower-b)"
            ],
            "question": "Tower A is low.",
            "question_fol": "\u00acHigh(tower-a)",
            "label": "True",
            "predicates_fol": [
                "In(x, y)",
                "High(x)",
                "YaleHousing(x)",
                "Bloomberg(x)",
                "BloombergLogo(x)"
            ]
        },
        {
            "id": 1235,
            "story_id": 433,
            "context": [
                "There are no buildings in New Haven higher than 400 meters. ",
                "All buildings managed by Yale Housing are in New Haven. ",
                "All Manhattan skyscrapers are higher than 400 meters. ",
                "All buildings owned by Bloomberg are in Manhattan. ",
                "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ",
                "Tower A is neither a building in New Haven nor a skyscraper in Manhattan.",
                "Tower B is a skyscraper building in Manhattan with a Bloomberg logo. "
            ],
            "context_fol": [
                "\u2200x ((Buildings(x) \u2227 In(x, newHaven)) \u2192 \u00acHigherThan(x, num400))",
                "\u2200x ((Buildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 In(x, newHaven))",
                "\u2200x ((Buildings(x) \u2227 Skyscraper(x) \u2227 In(x, manhattan)) \u2192 HigherThan(x, num400))",
                "\u2200x ((Buildings(x) \u2227 OwnedBy(x, bloomberg)) \u2192 Skyscraper(x) \u2227 In(x, manhattan))",
                "\u2200x ((Buildings(x) \u2227 HasLogo(x, bloomberg)) \u2192 OwnedBy(x, bloomberg))",
                "Buildings(towerA) \u2227 (\u00acInNewHaven(towerA)) \u2227 (\u00acManhattanSkyscraper(towerA))",
                "Buildings(towerB) \u2227 HasLogo(towerB, bloomberg) \u2227 Skyscraper(towerB) \u2227 In(towerB, manhattan)"
            ],
            "question": "Tower A is higher than 400 meters.",
            "question_fol": "HigherThan(towerA, num400)",
            "label": "Uncertain",
            "predicates_fol": [
                "Buildings(x)",
                "In(x, y)",
                "HigherThan(x, y)",
                "ManagedBy(x, y)",
                "Skyscraper(x)",
                "OwnedBy(x, y)",
                "HasLogo(x, y)",
                "InNewHaven(x)",
                "ManhattanSkyscraper(x)"
            ]
        }
    ],
    "664": [
        {
            "id": 1231,
            "story_id": 432,
            "context": [
                "All Yale dormitories are located on the Yale campus. ",
                "All Yale buildings managed by Yale Housing are dormitories. ",
                "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
                "None of the Yale buildings open to students were built before 1701. ",
                "All Yale buildings located on the Yale campus are open to students. ",
                "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
            ],
            "context_fol": [
                "\u2200x (YaleDormitory(x) \u2192 LocatedOn(x, yaleCampus))",
                "\u2200x ((YaleBuildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 YaleDormitory(x))",
                "\u2200x ((YaleBuildings(x) \u2227 OperatedBy(x, yaleHousingStaff)) \u2192 ManagedBy(x, yaleHousing))",
                "\u2200x ((YaleBuildings(x) \u2227 OpenToStudents(x)) \u2192 (\u00ac\u2203y(Before(y, yr1701) \u2227 Established(x, y))))",
                "\u2200x ((YaleBuildings(x) \u2227 LocatedOn(x, yaleCampus)) \u2192 OpenToStudents(x))",
                "YaleBuildings(harkness) \u2227 (OperatedBy(x, harkness) \u2295 LocatedOn(harkness, yaleCampus))"
            ],
            "question": "Harkness is a Yale dormitory.",
            "question_fol": "YaleDormitory(harkness)",
            "label": "Uncertain",
            "predicates_fol": [
                "YaleDormitory(x)",
                "LocatedOn(x, y)",
                "YaleBuildings(x)",
                "ManagedBy(x, y)",
                "OperatedBy(x, y)",
                "OpenToStudents(x)",
                "Before(x, y)",
                "Established(x, y)"
            ]
        },
        {
            "id": 177,
            "story_id": 60,
            "context": [
                "All buildings in New Haven are not high.",
                "All buildings managed by Yale Housing are located in New Haven. ",
                "All buildings in Manhattans are high. ",
                "All buildings owned by Bloomberg are located in Manhattans. ",
                "All buildings with the Bloomberg logo are owned by Bloomberg. ",
                "Tower A is managed by Yale Housing.",
                "Tower B is with the Bloomberg logo."
            ],
            "context_fol": [
                "\u2200x (In(x, newHaven) \u2192 \u00acHigh(x))",
                "\u2200x (YaleHousing(x) \u2192 In(x, newHaven))",
                "\u2200x (In(x, manhattan) \u2192 High(x))",
                "\u2200x (Bloomberg(x) \u2192 In(x, manhattan))",
                "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
                "YaleHousing(tower-a)",
                "BloombergLogo(tower-b)"
            ],
            "question": "Tower A is low.",
            "question_fol": "\u00acHigh(tower-a)",
            "label": "True",
            "predicates_fol": [
                "In(x, y)",
                "High(x)",
                "YaleHousing(x)",
                "Bloomberg(x)",
                "BloombergLogo(x)"
            ]
        },
        {
            "id": 1235,
            "story_id": 433,
            "context": [
                "There are no buildings in New Haven higher than 400 meters. ",
                "All buildings managed by Yale Housing are in New Haven. ",
                "All Manhattan skyscrapers are higher than 400 meters. ",
                "All buildings owned by Bloomberg are in Manhattan. ",
                "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ",
                "Tower A is neither a building in New Haven nor a skyscraper in Manhattan.",
                "Tower B is a skyscraper building in Manhattan with a Bloomberg logo. "
            ],
            "context_fol": [
                "\u2200x ((Buildings(x) \u2227 In(x, newHaven)) \u2192 \u00acHigherThan(x, num400))",
                "\u2200x ((Buildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 In(x, newHaven))",
                "\u2200x ((Buildings(x) \u2227 Skyscraper(x) \u2227 In(x, manhattan)) \u2192 HigherThan(x, num400))",
                "\u2200x ((Buildings(x) \u2227 OwnedBy(x, bloomberg)) \u2192 Skyscraper(x) \u2227 In(x, manhattan))",
                "\u2200x ((Buildings(x) \u2227 HasLogo(x, bloomberg)) \u2192 OwnedBy(x, bloomberg))",
                "Buildings(towerA) \u2227 (\u00acInNewHaven(towerA)) \u2227 (\u00acManhattanSkyscraper(towerA))",
                "Buildings(towerB) \u2227 HasLogo(towerB, bloomberg) \u2227 Skyscraper(towerB) \u2227 In(towerB, manhattan)"
            ],
            "question": "Tower A is higher than 400 meters.",
            "question_fol": "HigherThan(towerA, num400)",
            "label": "Uncertain",
            "predicates_fol": [
                "Buildings(x)",
                "In(x, y)",
                "HigherThan(x, y)",
                "ManagedBy(x, y)",
                "Skyscraper(x)",
                "OwnedBy(x, y)",
                "HasLogo(x, y)",
                "InNewHaven(x)",
                "ManhattanSkyscraper(x)"
            ]
        }
    ],
    "665": [
        {
            "id": 1231,
            "story_id": 432,
            "context": [
                "All Yale dormitories are located on the Yale campus. ",
                "All Yale buildings managed by Yale Housing are dormitories. ",
                "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
                "None of the Yale buildings open to students were built before 1701. ",
                "All Yale buildings located on the Yale campus are open to students. ",
                "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
            ],
            "context_fol": [
                "\u2200x (YaleDormitory(x) \u2192 LocatedOn(x, yaleCampus))",
                "\u2200x ((YaleBuildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 YaleDormitory(x))",
                "\u2200x ((YaleBuildings(x) \u2227 OperatedBy(x, yaleHousingStaff)) \u2192 ManagedBy(x, yaleHousing))",
                "\u2200x ((YaleBuildings(x) \u2227 OpenToStudents(x)) \u2192 (\u00ac\u2203y(Before(y, yr1701) \u2227 Established(x, y))))",
                "\u2200x ((YaleBuildings(x) \u2227 LocatedOn(x, yaleCampus)) \u2192 OpenToStudents(x))",
                "YaleBuildings(harkness) \u2227 (OperatedBy(x, harkness) \u2295 LocatedOn(harkness, yaleCampus))"
            ],
            "question": "Harkness is a Yale dormitory.",
            "question_fol": "YaleDormitory(harkness)",
            "label": "Uncertain",
            "predicates_fol": [
                "YaleDormitory(x)",
                "LocatedOn(x, y)",
                "YaleBuildings(x)",
                "ManagedBy(x, y)",
                "OperatedBy(x, y)",
                "OpenToStudents(x)",
                "Before(x, y)",
                "Established(x, y)"
            ]
        },
        {
            "id": 177,
            "story_id": 60,
            "context": [
                "All buildings in New Haven are not high.",
                "All buildings managed by Yale Housing are located in New Haven. ",
                "All buildings in Manhattans are high. ",
                "All buildings owned by Bloomberg are located in Manhattans. ",
                "All buildings with the Bloomberg logo are owned by Bloomberg. ",
                "Tower A is managed by Yale Housing.",
                "Tower B is with the Bloomberg logo."
            ],
            "context_fol": [
                "\u2200x (In(x, newHaven) \u2192 \u00acHigh(x))",
                "\u2200x (YaleHousing(x) \u2192 In(x, newHaven))",
                "\u2200x (In(x, manhattan) \u2192 High(x))",
                "\u2200x (Bloomberg(x) \u2192 In(x, manhattan))",
                "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
                "YaleHousing(tower-a)",
                "BloombergLogo(tower-b)"
            ],
            "question": "Tower A is low.",
            "question_fol": "\u00acHigh(tower-a)",
            "label": "True",
            "predicates_fol": [
                "In(x, y)",
                "High(x)",
                "YaleHousing(x)",
                "Bloomberg(x)",
                "BloombergLogo(x)"
            ]
        },
        {
            "id": 1235,
            "story_id": 433,
            "context": [
                "There are no buildings in New Haven higher than 400 meters. ",
                "All buildings managed by Yale Housing are in New Haven. ",
                "All Manhattan skyscrapers are higher than 400 meters. ",
                "All buildings owned by Bloomberg are in Manhattan. ",
                "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ",
                "Tower A is neither a building in New Haven nor a skyscraper in Manhattan.",
                "Tower B is a skyscraper building in Manhattan with a Bloomberg logo. "
            ],
            "context_fol": [
                "\u2200x ((Buildings(x) \u2227 In(x, newHaven)) \u2192 \u00acHigherThan(x, num400))",
                "\u2200x ((Buildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 In(x, newHaven))",
                "\u2200x ((Buildings(x) \u2227 Skyscraper(x) \u2227 In(x, manhattan)) \u2192 HigherThan(x, num400))",
                "\u2200x ((Buildings(x) \u2227 OwnedBy(x, bloomberg)) \u2192 Skyscraper(x) \u2227 In(x, manhattan))",
                "\u2200x ((Buildings(x) \u2227 HasLogo(x, bloomberg)) \u2192 OwnedBy(x, bloomberg))",
                "Buildings(towerA) \u2227 (\u00acInNewHaven(towerA)) \u2227 (\u00acManhattanSkyscraper(towerA))",
                "Buildings(towerB) \u2227 HasLogo(towerB, bloomberg) \u2227 Skyscraper(towerB) \u2227 In(towerB, manhattan)"
            ],
            "question": "Tower A is higher than 400 meters.",
            "question_fol": "HigherThan(towerA, num400)",
            "label": "Uncertain",
            "predicates_fol": [
                "Buildings(x)",
                "In(x, y)",
                "HigherThan(x, y)",
                "ManagedBy(x, y)",
                "Skyscraper(x)",
                "OwnedBy(x, y)",
                "HasLogo(x, y)",
                "InNewHaven(x)",
                "ManhattanSkyscraper(x)"
            ]
        }
    ],
    "360": [
        {
            "id": 35,
            "story_id": 13,
            "context": [
                "System 7 is a UK-based electronic dance music band.",
                "Steve Hillage and Miquette Giraudy formed System 7.",
                "Steve Hillage and Miquette Giraudy are former members of the band Gong.",
                "Electric dance music bands are bands.",
                "System 7 has released several club singles.",
                "Club singles are not singles."
            ],
            "context_fol": [
                "BasedIn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)",
                "Form(stevehillage, system7) \u2227 Form(miquettegiraudy, system7)",
                "FormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)",
                "\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))",
                "\u2203x (ClubSingle(x) \u2227 Release(system7, x))",
                "\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))"
            ],
            "question": "System 7 was formed by former members of Gong.",
            "question_fol": "\u2203x (Form(x, system7) \u2227 FormerMemberOf(x, gong))",
            "label": "True",
            "predicates_fol": [
                "BasedIn(x, y)",
                "ElectronicDanceMusicBand(x)",
                "Form(x, y)",
                "FormerMemberOf(x, y)",
                "Band(x)",
                "ClubSingle(x)",
                "Release(x, y)",
                "Single(x)"
            ]
        },
        {
            "id": 1330,
            "story_id": 461,
            "context": [
                "Any convicted criminal that is innocent is not truly guilty.",
                "All convicted criminals who did not commit a crime are truly innocent.",
                "All convicted criminals are truly guilty or found guilty.",
                "If a convicted criminal is found guilty, then they are sentenced to a punishment.",
                "If a convicted criminal is found guilty, then they can argue against their punishment.",
                "Garry is a convicted criminal who not found guilty or is sentenced to punishment."
            ],
            "context_fol": [
                "\u2200x (ConvictedCriminal(x) \u2227 Innocent(x) \u2192 \u00acTrulyGuilty(x))",
                "\u2200x (ConvictedCriminal(x) \u2227 \u00acCommitCrime(x) \u2192 Innocent(x))",
                "\u2200x (ConvictedCriminal(x) \u2227 (TrulyGuilty(x) \u2228 FoundGuilty(x)))",
                "\u2200x (ConvictedCriminal(x) \u2227 FoundGuilty(x) \u2192 SentencedToPunishment(x))",
                "\u2200x (ConvictedCriminal(x) \u2227 FoundGuilty(x) \u2192 CanArgueAgainst(x, punishment))",
                "ConvictedCriminal(garry) \u2227 (\u00ac(FoundGuilty(garry) \u2228 SentencedToPunishment(garry)))"
            ],
            "question": "Garry is sentenced to a punishment.",
            "question_fol": "SentencedToPunishment(garry)",
            "label": "Uncertain",
            "predicates_fol": [
                "ConvictedCriminal(x)",
                "Innocent(x)",
                "TrulyGuilty(x)",
                "CommitCrime(x)",
                "FoundGuilty(x)",
                "SentencedToPunishment(x)",
                "CanArgueAgainst(x, y)"
            ]
        },
        {
            "id": 419,
            "story_id": 143,
            "context": [
                "Video Gag is a French television series that airs weekly.",
                "Video Gag airs on the French broadcast channel TF1. ",
                "If viewers send funny videos to the French broadcast channel TF1, then Video Gag airs them weekly.",
                "All videos aired on Video Gag are in French."
            ],
            "context_fol": [
                "FrenchTelevision(videoGag) \u2227 AirWeekly(videoGag)",
                "AirOn(videoGag, frenchBroadcastChannelTF1)",
                "\u2200x (Funny(x) \u2227 Video(x) \u2227 SendIn(viewers, x, frenchBroadcastChannelTF1)  \u2192 AirWeekly(x) ) \u2227 AirOn(videoGag, x))",
                "\u2200x (Video(x) \u2227 AirOn(videoGag, x) \u2192 In(x, french))"
            ],
            "question": "Viewers send funny videos to the French broadcast channel TF1 that are in French.",
            "question_fol": "\u2203x (SendIn(viewers, x, frenchBroadcastChannelTF1) \u2227 French(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "FrenchTelevision(x)",
                "AirWeekly(x)",
                "AirOn(x, y)",
                "Funny(x)",
                "Video(x)",
                "SendIn(x, y, z)",
                "In(x, y)"
            ]
        }
    ],
    "361": [
        {
            "id": 35,
            "story_id": 13,
            "context": [
                "System 7 is a UK-based electronic dance music band.",
                "Steve Hillage and Miquette Giraudy formed System 7.",
                "Steve Hillage and Miquette Giraudy are former members of the band Gong.",
                "Electric dance music bands are bands.",
                "System 7 has released several club singles.",
                "Club singles are not singles."
            ],
            "context_fol": [
                "BasedIn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)",
                "Form(stevehillage, system7) \u2227 Form(miquettegiraudy, system7)",
                "FormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)",
                "\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))",
                "\u2203x (ClubSingle(x) \u2227 Release(system7, x))",
                "\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))"
            ],
            "question": "System 7 was formed by former members of Gong.",
            "question_fol": "\u2203x (Form(x, system7) \u2227 FormerMemberOf(x, gong))",
            "label": "True",
            "predicates_fol": [
                "BasedIn(x, y)",
                "ElectronicDanceMusicBand(x)",
                "Form(x, y)",
                "FormerMemberOf(x, y)",
                "Band(x)",
                "ClubSingle(x)",
                "Release(x, y)",
                "Single(x)"
            ]
        },
        {
            "id": 1330,
            "story_id": 461,
            "context": [
                "Any convicted criminal that is innocent is not truly guilty.",
                "All convicted criminals who did not commit a crime are truly innocent.",
                "All convicted criminals are truly guilty or found guilty.",
                "If a convicted criminal is found guilty, then they are sentenced to a punishment.",
                "If a convicted criminal is found guilty, then they can argue against their punishment.",
                "Garry is a convicted criminal who not found guilty or is sentenced to punishment."
            ],
            "context_fol": [
                "\u2200x (ConvictedCriminal(x) \u2227 Innocent(x) \u2192 \u00acTrulyGuilty(x))",
                "\u2200x (ConvictedCriminal(x) \u2227 \u00acCommitCrime(x) \u2192 Innocent(x))",
                "\u2200x (ConvictedCriminal(x) \u2227 (TrulyGuilty(x) \u2228 FoundGuilty(x)))",
                "\u2200x (ConvictedCriminal(x) \u2227 FoundGuilty(x) \u2192 SentencedToPunishment(x))",
                "\u2200x (ConvictedCriminal(x) \u2227 FoundGuilty(x) \u2192 CanArgueAgainst(x, punishment))",
                "ConvictedCriminal(garry) \u2227 (\u00ac(FoundGuilty(garry) \u2228 SentencedToPunishment(garry)))"
            ],
            "question": "Garry is sentenced to a punishment.",
            "question_fol": "SentencedToPunishment(garry)",
            "label": "Uncertain",
            "predicates_fol": [
                "ConvictedCriminal(x)",
                "Innocent(x)",
                "TrulyGuilty(x)",
                "CommitCrime(x)",
                "FoundGuilty(x)",
                "SentencedToPunishment(x)",
                "CanArgueAgainst(x, y)"
            ]
        },
        {
            "id": 419,
            "story_id": 143,
            "context": [
                "Video Gag is a French television series that airs weekly.",
                "Video Gag airs on the French broadcast channel TF1. ",
                "If viewers send funny videos to the French broadcast channel TF1, then Video Gag airs them weekly.",
                "All videos aired on Video Gag are in French."
            ],
            "context_fol": [
                "FrenchTelevision(videoGag) \u2227 AirWeekly(videoGag)",
                "AirOn(videoGag, frenchBroadcastChannelTF1)",
                "\u2200x (Funny(x) \u2227 Video(x) \u2227 SendIn(viewers, x, frenchBroadcastChannelTF1)  \u2192 AirWeekly(x) ) \u2227 AirOn(videoGag, x))",
                "\u2200x (Video(x) \u2227 AirOn(videoGag, x) \u2192 In(x, french))"
            ],
            "question": "Viewers send funny videos to the French broadcast channel TF1 that are in French.",
            "question_fol": "\u2203x (SendIn(viewers, x, frenchBroadcastChannelTF1) \u2227 French(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "FrenchTelevision(x)",
                "AirWeekly(x)",
                "AirOn(x, y)",
                "Funny(x)",
                "Video(x)",
                "SendIn(x, y, z)",
                "In(x, y)"
            ]
        }
    ],
    "819": [
        {
            "id": 273,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo) \u2227 HoldingCompany(x) ",
                "\u2200x (HoldingCompany(x) \u2192 \u2203y(Company(y) \u2227 Holds(x, y)))",
                "DisbandsIn(tecmo, japan) \u2227 Survives(koei) \u2227 Renames(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "question_fol": "\u2203x (Company(x) \u2227 Holds(koeitecmo, x))",
            "label": "True",
            "predicates_fol": [
                "Japanese(x)",
                "VideoGameHoldingCompany(x)",
                "AnimeHoldingCompany(x)",
                "HoldingCompany(x)",
                "Company(x)",
                "Holds(x, y)",
                "DisbandsIn(x, y)",
                "Survives(x)",
                "Renames(x)"
            ]
        },
        {
            "id": 961,
            "story_id": 362,
            "context": [
                "People who like financial risks invest in the public stock market regularly or enjoy gambling regularly.",
                "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
                "All people who enjoy enjoy gambling regularly spend a lot of money at casinos or other betting games.",
                "People who spend a lot of money at casinos and other betting games would enjoy visiting the Las Vegas Strip.",
                "People who spend a lot of money at casinos and other betting games are at risk of gambling addiction.",
                "Matt does not invest in the public stock market regularly. ",
                "Matt likes financial risks."
            ],
            "context_fol": [
                "\u2200x (Like(x, financialRisk) \u2192 InvestInRegularly(x, publicStockMarket) \u2228 EnjoyRegularly(x, gambling))",
                "\u2200x (InvestInRegularly(x, publicStockMarket) \u2192 ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) \u2228 (\u2203y (\u00ac(y=theWallStreetJournal) \u2227 NewsPaper(y) \u2227 ReadToKeepUpdatedOn(x, y, financialMetric))))",
                "\u2200x (EnjoyRegularly(x, gambling) \u2192 SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)))",
                "\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y))) \u2192 EnjoyVisiting(x, theLasVegasStrip))",
                "\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)) \u2192 AtRiskOf(x, gamblingAddiction))",
                "InvestInRegularly(matt, publicStockMarket)",
                "Like(matt, financialRisk)"
            ],
            "question": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
            "question_fol": "Newspapers(matt)",
            "label": "Uncertain",
            "predicates_fol": [
                "Like(x, y)",
                "InvestInRegularly(x, y)",
                "EnjoyRegularly(x, y)",
                "ReadToKeepUpdatedOn(x, y, z)",
                "NewsPaper(x)",
                "SpendAt(x, y, z)",
                "BettingGame(x)",
                "EnjoyVisiting(x, y)",
                "AtRiskOf(x, y)"
            ]
        },
        {
            "id": 668,
            "story_id": 236,
            "context": [
                "Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. ",
                "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value.",
                "P values are thresholds for belief, not metrics of effect. "
            ],
            "context_fol": [
                "Finding(cancerBiology, geneticAlteration) \u2227 Confer(geneticAlteration, selectiveAdvantage, toCancerCell)",
                "\u2203x \u2203y (CancerResearcher(x) \u2227 Ranked(x, importanceOfSubstitutionsToCancerGrowth) \u2227 PValue(y) \u2227 RankedBy(importanceOfSubstitutionsToCancerGrowth, y))",
                "\u2200x (PValue(x) \u2192 ThresholdForBelief(x) \u2227 \u00acMetricOfEffect(x))"
            ],
            "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
            "question_fol": "\u2203x \u2203y (CancerResearcher(x) \u2227 Use(x, cancerEffectSize) \u2227 UsedToDetermine(cancerEffectSize, relativeImportanceOfGeneteticAlterations))",
            "label": "Uncertain",
            "predicates_fol": [
                "Finding(x, y)",
                "Confer(x, y)",
                "CancerResearcher(x)",
                "Ranked(x, y)",
                "PValue(x)",
                "RankedBy(x, y)",
                "ThresholdForBelief(x)",
                "MetricOfEffect(x)"
            ]
        }
    ],
    "820": [
        {
            "id": 273,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo) \u2227 HoldingCompany(x) ",
                "\u2200x (HoldingCompany(x) \u2192 \u2203y(Company(y) \u2227 Holds(x, y)))",
                "DisbandsIn(tecmo, japan) \u2227 Survives(koei) \u2227 Renames(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "question_fol": "\u2203x (Company(x) \u2227 Holds(koeitecmo, x))",
            "label": "True",
            "predicates_fol": [
                "Japanese(x)",
                "VideoGameHoldingCompany(x)",
                "AnimeHoldingCompany(x)",
                "HoldingCompany(x)",
                "Company(x)",
                "Holds(x, y)",
                "DisbandsIn(x, y)",
                "Survives(x)",
                "Renames(x)"
            ]
        },
        {
            "id": 961,
            "story_id": 362,
            "context": [
                "People who like financial risks invest in the public stock market regularly or enjoy gambling regularly.",
                "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
                "All people who enjoy enjoy gambling regularly spend a lot of money at casinos or other betting games.",
                "People who spend a lot of money at casinos and other betting games would enjoy visiting the Las Vegas Strip.",
                "People who spend a lot of money at casinos and other betting games are at risk of gambling addiction.",
                "Matt does not invest in the public stock market regularly. ",
                "Matt likes financial risks."
            ],
            "context_fol": [
                "\u2200x (Like(x, financialRisk) \u2192 InvestInRegularly(x, publicStockMarket) \u2228 EnjoyRegularly(x, gambling))",
                "\u2200x (InvestInRegularly(x, publicStockMarket) \u2192 ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) \u2228 (\u2203y (\u00ac(y=theWallStreetJournal) \u2227 NewsPaper(y) \u2227 ReadToKeepUpdatedOn(x, y, financialMetric))))",
                "\u2200x (EnjoyRegularly(x, gambling) \u2192 SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)))",
                "\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y))) \u2192 EnjoyVisiting(x, theLasVegasStrip))",
                "\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)) \u2192 AtRiskOf(x, gamblingAddiction))",
                "InvestInRegularly(matt, publicStockMarket)",
                "Like(matt, financialRisk)"
            ],
            "question": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
            "question_fol": "Newspapers(matt)",
            "label": "Uncertain",
            "predicates_fol": [
                "Like(x, y)",
                "InvestInRegularly(x, y)",
                "EnjoyRegularly(x, y)",
                "ReadToKeepUpdatedOn(x, y, z)",
                "NewsPaper(x)",
                "SpendAt(x, y, z)",
                "BettingGame(x)",
                "EnjoyVisiting(x, y)",
                "AtRiskOf(x, y)"
            ]
        },
        {
            "id": 668,
            "story_id": 236,
            "context": [
                "Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. ",
                "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value.",
                "P values are thresholds for belief, not metrics of effect. "
            ],
            "context_fol": [
                "Finding(cancerBiology, geneticAlteration) \u2227 Confer(geneticAlteration, selectiveAdvantage, toCancerCell)",
                "\u2203x \u2203y (CancerResearcher(x) \u2227 Ranked(x, importanceOfSubstitutionsToCancerGrowth) \u2227 PValue(y) \u2227 RankedBy(importanceOfSubstitutionsToCancerGrowth, y))",
                "\u2200x (PValue(x) \u2192 ThresholdForBelief(x) \u2227 \u00acMetricOfEffect(x))"
            ],
            "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
            "question_fol": "\u2203x \u2203y (CancerResearcher(x) \u2227 Use(x, cancerEffectSize) \u2227 UsedToDetermine(cancerEffectSize, relativeImportanceOfGeneteticAlterations))",
            "label": "Uncertain",
            "predicates_fol": [
                "Finding(x, y)",
                "Confer(x, y)",
                "CancerResearcher(x)",
                "Ranked(x, y)",
                "PValue(x)",
                "RankedBy(x, y)",
                "ThresholdForBelief(x)",
                "MetricOfEffect(x)"
            ]
        }
    ],
    "821": [
        {
            "id": 273,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo) \u2227 HoldingCompany(x) ",
                "\u2200x (HoldingCompany(x) \u2192 \u2203y(Company(y) \u2227 Holds(x, y)))",
                "DisbandsIn(tecmo, japan) \u2227 Survives(koei) \u2227 Renames(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "question_fol": "\u2203x (Company(x) \u2227 Holds(koeitecmo, x))",
            "label": "True",
            "predicates_fol": [
                "Japanese(x)",
                "VideoGameHoldingCompany(x)",
                "AnimeHoldingCompany(x)",
                "HoldingCompany(x)",
                "Company(x)",
                "Holds(x, y)",
                "DisbandsIn(x, y)",
                "Survives(x)",
                "Renames(x)"
            ]
        },
        {
            "id": 961,
            "story_id": 362,
            "context": [
                "People who like financial risks invest in the public stock market regularly or enjoy gambling regularly.",
                "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
                "All people who enjoy enjoy gambling regularly spend a lot of money at casinos or other betting games.",
                "People who spend a lot of money at casinos and other betting games would enjoy visiting the Las Vegas Strip.",
                "People who spend a lot of money at casinos and other betting games are at risk of gambling addiction.",
                "Matt does not invest in the public stock market regularly. ",
                "Matt likes financial risks."
            ],
            "context_fol": [
                "\u2200x (Like(x, financialRisk) \u2192 InvestInRegularly(x, publicStockMarket) \u2228 EnjoyRegularly(x, gambling))",
                "\u2200x (InvestInRegularly(x, publicStockMarket) \u2192 ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) \u2228 (\u2203y (\u00ac(y=theWallStreetJournal) \u2227 NewsPaper(y) \u2227 ReadToKeepUpdatedOn(x, y, financialMetric))))",
                "\u2200x (EnjoyRegularly(x, gambling) \u2192 SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)))",
                "\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y))) \u2192 EnjoyVisiting(x, theLasVegasStrip))",
                "\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)) \u2192 AtRiskOf(x, gamblingAddiction))",
                "InvestInRegularly(matt, publicStockMarket)",
                "Like(matt, financialRisk)"
            ],
            "question": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
            "question_fol": "Newspapers(matt)",
            "label": "Uncertain",
            "predicates_fol": [
                "Like(x, y)",
                "InvestInRegularly(x, y)",
                "EnjoyRegularly(x, y)",
                "ReadToKeepUpdatedOn(x, y, z)",
                "NewsPaper(x)",
                "SpendAt(x, y, z)",
                "BettingGame(x)",
                "EnjoyVisiting(x, y)",
                "AtRiskOf(x, y)"
            ]
        },
        {
            "id": 668,
            "story_id": 236,
            "context": [
                "Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. ",
                "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value.",
                "P values are thresholds for belief, not metrics of effect. "
            ],
            "context_fol": [
                "Finding(cancerBiology, geneticAlteration) \u2227 Confer(geneticAlteration, selectiveAdvantage, toCancerCell)",
                "\u2203x \u2203y (CancerResearcher(x) \u2227 Ranked(x, importanceOfSubstitutionsToCancerGrowth) \u2227 PValue(y) \u2227 RankedBy(importanceOfSubstitutionsToCancerGrowth, y))",
                "\u2200x (PValue(x) \u2192 ThresholdForBelief(x) \u2227 \u00acMetricOfEffect(x))"
            ],
            "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
            "question_fol": "\u2203x \u2203y (CancerResearcher(x) \u2227 Use(x, cancerEffectSize) \u2227 UsedToDetermine(cancerEffectSize, relativeImportanceOfGeneteticAlterations))",
            "label": "Uncertain",
            "predicates_fol": [
                "Finding(x, y)",
                "Confer(x, y)",
                "CancerResearcher(x)",
                "Ranked(x, y)",
                "PValue(x)",
                "RankedBy(x, y)",
                "ThresholdForBelief(x)",
                "MetricOfEffect(x)"
            ]
        }
    ],
    "253": [
        {
            "id": 1227,
            "story_id": 431,
            "context": [
                "No Boeing-737 plane has more than 300 seats. ",
                "All of the planes acquired by Delta in this batch are Boeing-737. ",
                "Planes either have more than 300 seats or have a capacity of 100 passengers. ",
                "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
                "All planes with a capacity of 100 passengers are produced before 2010. ",
                "Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.",
                "T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."
            ],
            "context_fol": [
                "\u2200x (Plane(x) \u2227 Boeing737(x) \u2192 (\u00ac\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y)))",
                "\u2200x (Plane(x) \u2227 AcquiredBy(x, delta) \u2192 Boeing737(x))",
                "\u2200x (Plane(x) \u2192 ((\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y))) \u2295 (\u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y))))",
                "\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 ScheduledFor(x, shortdistanceflight))",
                "\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 \u2203z(Before(z, yr2010) \u2227 Produced(x, z))",
                "(Boeing737(jake32) \u2227 Plane(jake32)) \u2295 (AcquiredByDeltaInThisBatch(jake32) \u2227 Plane(jake32))",
                "\u00ac((Boeing737(t10) \u2227 Plane(t10)) \u2295 (AcquiredByDeltaInThisBatch(t10) \u2227 Plane(t10)))"
            ],
            "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
            "question_fol": "\u2203z(Before(z, year2010) \u2227 Produced(jake32, z)) \u2227 ScheduledFor(jake32, shortdistanceflight))",
            "label": "True",
            "predicates_fol": [
                "Plane(x)",
                "GreaterThan(x, y)",
                "EquippedWithSeats(x, y)",
                "AcquiredBy(x, y)",
                "Boeing737(x)",
                "Equals(x, y)",
                "ScheduledFor(x, y)",
                "Before(x, y)",
                "Produced(x, y)",
                "AcquiredByDeltaInThisBatch(x)"
            ]
        },
        {
            "id": 615,
            "story_id": 215,
            "context": [
                "Adam owns cars.",
                "Adam has a favorite car.",
                "Among the cars he owns, Adam's favorite car is European.",
                "Adam broke his favorite car."
            ],
            "context_fol": [
                "\u2203x\u2203y (Car(x) \u2227 Car(y) \u2227 (x\u2260y) \u2227 Owns(adam, x)) ",
                "\u2203x (Car(x) \u2227 Favorite(adam, x))",
                "\u2200x ((Car(x) \u2227 Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))",
                "\u2200x ((Car(x) \u2227 Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))"
            ],
            "question": "Adam owns a Japanese car.",
            "question_fol": "\u2203x (Japanese(x) \u2227 Owns(adam, x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Car(x)",
                "Owns(x, y)",
                "Favorite(x, y)",
                "European(x)",
                "Broke(x, y)"
            ]
        },
        {
            "id": 773,
            "story_id": 311,
            "context": [
                "No payment cards issued by Russian banks can be used with ApplePay.",
                "All MIR payment cards are issued by Russian banks.",
                "Some international payment cards can be used with ApplePay.",
                "Social payments in Russia can only be transferred to MIR payment cards.",
                "Bank of America payment cards can be used with ApplePay."
            ],
            "context_fol": [
                "\u2200x \u2200y (PaymentCard(x) \u2227 RussianBank(y) \u2227 IssuedBy(x, y) \u2192 \u00acUsedWith(x, applePay))",
                "\u2200x \u2200y (PaymentCard(x) \u2227 MIR(x) \u2192 RussianBank(y) \u2227 IssuedBy(x, y))",
                "\u2203x (PaymentCard(x) \u2227 International(x) \u2192 UsedWith(x, applePay))",
                "\u2200x \u2200y (SocialPayment(x) \u2227TransferredTo(x, y) \u2192 PaymentCard(y) \u2227 MIR(y))",
                "PaymentCard(bankOfAmerica) \u2227 UsedWith(bankOfAmerica, applePay)"
            ],
            "question": "Bank of America payment cards are international.",
            "question_fol": "PaymentCard(bankOfAmerica) \u2227 International(bankOfAmerica)",
            "label": "Uncertain",
            "predicates_fol": [
                "PaymentCard(x)",
                "RussianBank(x)",
                "IssuedBy(x, y)",
                "UsedWith(x, y)",
                "MIR(x)",
                "International(x)",
                "SocialPayment(x)",
                "TransferredTo(x, y)"
            ]
        }
    ],
    "254": [
        {
            "id": 1227,
            "story_id": 431,
            "context": [
                "No Boeing-737 plane has more than 300 seats. ",
                "All of the planes acquired by Delta in this batch are Boeing-737. ",
                "Planes either have more than 300 seats or have a capacity of 100 passengers. ",
                "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
                "All planes with a capacity of 100 passengers are produced before 2010. ",
                "Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.",
                "T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."
            ],
            "context_fol": [
                "\u2200x (Plane(x) \u2227 Boeing737(x) \u2192 (\u00ac\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y)))",
                "\u2200x (Plane(x) \u2227 AcquiredBy(x, delta) \u2192 Boeing737(x))",
                "\u2200x (Plane(x) \u2192 ((\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y))) \u2295 (\u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y))))",
                "\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 ScheduledFor(x, shortdistanceflight))",
                "\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 \u2203z(Before(z, yr2010) \u2227 Produced(x, z))",
                "(Boeing737(jake32) \u2227 Plane(jake32)) \u2295 (AcquiredByDeltaInThisBatch(jake32) \u2227 Plane(jake32))",
                "\u00ac((Boeing737(t10) \u2227 Plane(t10)) \u2295 (AcquiredByDeltaInThisBatch(t10) \u2227 Plane(t10)))"
            ],
            "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
            "question_fol": "\u2203z(Before(z, year2010) \u2227 Produced(jake32, z)) \u2227 ScheduledFor(jake32, shortdistanceflight))",
            "label": "True",
            "predicates_fol": [
                "Plane(x)",
                "GreaterThan(x, y)",
                "EquippedWithSeats(x, y)",
                "AcquiredBy(x, y)",
                "Boeing737(x)",
                "Equals(x, y)",
                "ScheduledFor(x, y)",
                "Before(x, y)",
                "Produced(x, y)",
                "AcquiredByDeltaInThisBatch(x)"
            ]
        },
        {
            "id": 615,
            "story_id": 215,
            "context": [
                "Adam owns cars.",
                "Adam has a favorite car.",
                "Among the cars he owns, Adam's favorite car is European.",
                "Adam broke his favorite car."
            ],
            "context_fol": [
                "\u2203x\u2203y (Car(x) \u2227 Car(y) \u2227 (x\u2260y) \u2227 Owns(adam, x)) ",
                "\u2203x (Car(x) \u2227 Favorite(adam, x))",
                "\u2200x ((Car(x) \u2227 Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))",
                "\u2200x ((Car(x) \u2227 Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))"
            ],
            "question": "Adam owns a Japanese car.",
            "question_fol": "\u2203x (Japanese(x) \u2227 Owns(adam, x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Car(x)",
                "Owns(x, y)",
                "Favorite(x, y)",
                "European(x)",
                "Broke(x, y)"
            ]
        },
        {
            "id": 773,
            "story_id": 311,
            "context": [
                "No payment cards issued by Russian banks can be used with ApplePay.",
                "All MIR payment cards are issued by Russian banks.",
                "Some international payment cards can be used with ApplePay.",
                "Social payments in Russia can only be transferred to MIR payment cards.",
                "Bank of America payment cards can be used with ApplePay."
            ],
            "context_fol": [
                "\u2200x \u2200y (PaymentCard(x) \u2227 RussianBank(y) \u2227 IssuedBy(x, y) \u2192 \u00acUsedWith(x, applePay))",
                "\u2200x \u2200y (PaymentCard(x) \u2227 MIR(x) \u2192 RussianBank(y) \u2227 IssuedBy(x, y))",
                "\u2203x (PaymentCard(x) \u2227 International(x) \u2192 UsedWith(x, applePay))",
                "\u2200x \u2200y (SocialPayment(x) \u2227TransferredTo(x, y) \u2192 PaymentCard(y) \u2227 MIR(y))",
                "PaymentCard(bankOfAmerica) \u2227 UsedWith(bankOfAmerica, applePay)"
            ],
            "question": "Bank of America payment cards are international.",
            "question_fol": "PaymentCard(bankOfAmerica) \u2227 International(bankOfAmerica)",
            "label": "Uncertain",
            "predicates_fol": [
                "PaymentCard(x)",
                "RussianBank(x)",
                "IssuedBy(x, y)",
                "UsedWith(x, y)",
                "MIR(x)",
                "International(x)",
                "SocialPayment(x)",
                "TransferredTo(x, y)"
            ]
        }
    ],
    "979": [
        {
            "id": 843,
            "story_id": 329,
            "context": [
                "All young working professionals who have regular 9-5 jobs have stable jobs.",
                "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
                "All people who have stable jobs are people who work regularly.",
                "People who work regularly do not frequently disobey their bosses.",
                "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
            ],
            "context_fol": [
                "\u2200x (YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job) \u2192 Have(x, stableJob))",
                "\u2203x (LiveIn(x, manhattan) \u2227 YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job))",
                "\u2200x (Have(x, stableJob) \u2192 WorkRegularly(x))",
                "\u2200x (WorkRegularly(x) \u2192 \u00acDisobeyFrequently(x, boss))",
                "\u00ac(DisobeyFrequently(mary, boss) \u2295 WorkRegularly(mary))"
            ],
            "question": "Mary lives in Manhattan.",
            "question_fol": "LiveIn(mary, manhattan)",
            "label": "Uncertain",
            "predicates_fol": [
                "YoungWorkingProfessional(x)",
                "Have(x, y)",
                "LiveIn(x, y)",
                "WorkRegularly(x)",
                "DisobeyFrequently(x, y)"
            ]
        },
        {
            "id": 1298,
            "story_id": 451,
            "context": [
                "People on the payroll are being paid by the school.",
                "If someone has a job at a school, then they are on the payroll.",
                "All faculty members have a job at a school.",
                "If someone teaches students, they are a faculty member or a teacher.",
                "Every teacher has students.",
                "If Nancy is a teacher, then they are on the payroll.",
                "If Nancy is not a teacher, then they are not paid by the school.",
                "Nancy teaches students."
            ],
            "context_fol": [
                "\u2200x (OnPayroll(x) \u2192 PaidBy(x, school))",
                "\u2200x (HaveJobAt(x, school) \u2192 OnPayroll(x))",
                "\u2200x (FacultyMember(x) \u2192 HaveJobAt(x, school))",
                "\u2200x (Teach(x, student) \u2192 FacultyMember(x) \u2228 Teacher(x))",
                "\u2200x (Teacher(x) \u2192 Have(x, student))",
                "Teacher(nancy) \u2192 OnPayroll(nancy)",
                "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)",
                "Teach(nancy, student)"
            ],
            "question": "Nancy is a faculty member.",
            "question_fol": "FacultyMember(nancy)",
            "label": "Uncertain",
            "predicates_fol": [
                "OnPayroll(x)",
                "PaidBy(x, y)",
                "HaveJobAt(x, y)",
                "FacultyMember(x)",
                "Teach(x, y)",
                "Teacher(x)",
                "Have(x, y)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        }
    ],
    "980": [
        {
            "id": 843,
            "story_id": 329,
            "context": [
                "All young working professionals who have regular 9-5 jobs have stable jobs.",
                "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
                "All people who have stable jobs are people who work regularly.",
                "People who work regularly do not frequently disobey their bosses.",
                "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
            ],
            "context_fol": [
                "\u2200x (YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job) \u2192 Have(x, stableJob))",
                "\u2203x (LiveIn(x, manhattan) \u2227 YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job))",
                "\u2200x (Have(x, stableJob) \u2192 WorkRegularly(x))",
                "\u2200x (WorkRegularly(x) \u2192 \u00acDisobeyFrequently(x, boss))",
                "\u00ac(DisobeyFrequently(mary, boss) \u2295 WorkRegularly(mary))"
            ],
            "question": "Mary lives in Manhattan.",
            "question_fol": "LiveIn(mary, manhattan)",
            "label": "Uncertain",
            "predicates_fol": [
                "YoungWorkingProfessional(x)",
                "Have(x, y)",
                "LiveIn(x, y)",
                "WorkRegularly(x)",
                "DisobeyFrequently(x, y)"
            ]
        },
        {
            "id": 1298,
            "story_id": 451,
            "context": [
                "People on the payroll are being paid by the school.",
                "If someone has a job at a school, then they are on the payroll.",
                "All faculty members have a job at a school.",
                "If someone teaches students, they are a faculty member or a teacher.",
                "Every teacher has students.",
                "If Nancy is a teacher, then they are on the payroll.",
                "If Nancy is not a teacher, then they are not paid by the school.",
                "Nancy teaches students."
            ],
            "context_fol": [
                "\u2200x (OnPayroll(x) \u2192 PaidBy(x, school))",
                "\u2200x (HaveJobAt(x, school) \u2192 OnPayroll(x))",
                "\u2200x (FacultyMember(x) \u2192 HaveJobAt(x, school))",
                "\u2200x (Teach(x, student) \u2192 FacultyMember(x) \u2228 Teacher(x))",
                "\u2200x (Teacher(x) \u2192 Have(x, student))",
                "Teacher(nancy) \u2192 OnPayroll(nancy)",
                "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)",
                "Teach(nancy, student)"
            ],
            "question": "Nancy is a faculty member.",
            "question_fol": "FacultyMember(nancy)",
            "label": "Uncertain",
            "predicates_fol": [
                "OnPayroll(x)",
                "PaidBy(x, y)",
                "HaveJobAt(x, y)",
                "FacultyMember(x)",
                "Teach(x, y)",
                "Teacher(x)",
                "Have(x, y)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        }
    ],
    "981": [
        {
            "id": 843,
            "story_id": 329,
            "context": [
                "All young working professionals who have regular 9-5 jobs have stable jobs.",
                "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
                "All people who have stable jobs are people who work regularly.",
                "People who work regularly do not frequently disobey their bosses.",
                "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
            ],
            "context_fol": [
                "\u2200x (YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job) \u2192 Have(x, stableJob))",
                "\u2203x (LiveIn(x, manhattan) \u2227 YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job))",
                "\u2200x (Have(x, stableJob) \u2192 WorkRegularly(x))",
                "\u2200x (WorkRegularly(x) \u2192 \u00acDisobeyFrequently(x, boss))",
                "\u00ac(DisobeyFrequently(mary, boss) \u2295 WorkRegularly(mary))"
            ],
            "question": "Mary lives in Manhattan.",
            "question_fol": "LiveIn(mary, manhattan)",
            "label": "Uncertain",
            "predicates_fol": [
                "YoungWorkingProfessional(x)",
                "Have(x, y)",
                "LiveIn(x, y)",
                "WorkRegularly(x)",
                "DisobeyFrequently(x, y)"
            ]
        },
        {
            "id": 1298,
            "story_id": 451,
            "context": [
                "People on the payroll are being paid by the school.",
                "If someone has a job at a school, then they are on the payroll.",
                "All faculty members have a job at a school.",
                "If someone teaches students, they are a faculty member or a teacher.",
                "Every teacher has students.",
                "If Nancy is a teacher, then they are on the payroll.",
                "If Nancy is not a teacher, then they are not paid by the school.",
                "Nancy teaches students."
            ],
            "context_fol": [
                "\u2200x (OnPayroll(x) \u2192 PaidBy(x, school))",
                "\u2200x (HaveJobAt(x, school) \u2192 OnPayroll(x))",
                "\u2200x (FacultyMember(x) \u2192 HaveJobAt(x, school))",
                "\u2200x (Teach(x, student) \u2192 FacultyMember(x) \u2228 Teacher(x))",
                "\u2200x (Teacher(x) \u2192 Have(x, student))",
                "Teacher(nancy) \u2192 OnPayroll(nancy)",
                "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)",
                "Teach(nancy, student)"
            ],
            "question": "Nancy is a faculty member.",
            "question_fol": "FacultyMember(nancy)",
            "label": "Uncertain",
            "predicates_fol": [
                "OnPayroll(x)",
                "PaidBy(x, y)",
                "HaveJobAt(x, y)",
                "FacultyMember(x)",
                "Teach(x, y)",
                "Teacher(x)",
                "Have(x, y)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        }
    ],
    "805": [
        {
            "id": 686,
            "story_id": 243,
            "context": [
                "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.",
                "People who have a talent of cooking can distinguish the taste of different condiments.",
                "Only people with the talent of cooking can make delicious meals.",
                "If the meal is popular at the party, then it is delicious.",
                "John can make meals which are popular at the party."
            ],
            "context_fol": [
                "\u2200x (Person(x) \u2227 Can(x, distinguishTheTasteOfDifferentCondiments) \u2192 Can(x, useDifferentCondimentsToCook))",
                "\u2200x (Person(x) \u2227 Has(x, talentOfCooking) \u2192 Can(x, distinguishTheTasteOfDifferentCondiments))",
                "\u2200x \u2200y (CanMake(x, y) \u2227 Meal(y) \u2227 Delicious(y) \u2227 Person(x) \u2192 Has(x, talentOfCooking)) ",
                "\u2200x \u2200y (Meal(y) \u2227 PopularAt(y, party) \u2192 Delicious(y))",
                "\u2203x (Person(john) \u2227 MakeMeal(john, x) \u2227 Meal(x) \u2227 PopularAt(x, party))"
            ],
            "question": "John cannot use different condiments for cooking.",
            "question_fol": "\u00acCan(john, useDifferentCondimentsToCook)",
            "label": "False",
            "predicates_fol": [
                "Person(x)",
                "Can(x, y)",
                "Has(x, y)",
                "CanMake(x, y)",
                "Meal(x)",
                "Delicious(x)",
                "PopularAt(x, y)",
                "MakeMeal(x, y)"
            ]
        },
        {
            "id": 692,
            "story_id": 249,
            "context": [
                "Every chef can cook.",
                "Some people who aren\u2019t chefs can cook.",
                "People who cook can make scrambled eggs and pasta.",
                "If someone can make cookies and muffins, they are a baker.",
                "Bakers who can also make scrambled eggs can make a good breakfast.",
                "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
            ],
            "context_fol": [
                "\u2200x (Chef(x) \u2192 Can(x, cook))",
                "\u2203x (\u00acChef(x) \u2227 Can(x, cook))",
                "\u2200x (Can(x, cook) \u2192 (CanMake(x, scrambledEggs) \u2227 CanMake(x, pasta)))",
                "\u2200x (CanMake(x, cookies) \u2227 CanMake(x, muffins) \u2192 Baker(x))",
                "\u2200x ((Baker(x) \u2227 CanMake(x, scrambledEggs)) \u2192 CanMake(x, goodBreakfast))",
                "CanMake(luke, cookies) \u2227 (CanMake(luke, scrambledEggs) \u2227 CanMake(luke, muffins) \u2227 \u00acCanMake(luke, pasta)"
            ],
            "question": "Luke can make a good breakfast.",
            "question_fol": "CanMake(luke, goodBreakfast)",
            "label": "True",
            "predicates_fol": [
                "Chef(x)",
                "Can(x, y)",
                "CanMake(x, y)",
                "Baker(x)"
            ]
        },
        {
            "id": 730,
            "story_id": 286,
            "context": [
                "No sandwich cookies are healthy.",
                "Oreos are sandwich cookies."
            ],
            "context_fol": [
                "\u2200x (SandwichCookie(x) \u2192 \u00acHealthy(x))",
                "\u2200x (Oreo(x) \u2192 SandwichCookie(x))"
            ],
            "question": "All sandwich cookies are delicious.",
            "question_fol": "\u2200x (SandwichCookie(x) \u2192 Delicious(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "SandwichCookie(x)",
                "Healthy(x)",
                "Oreo(x)"
            ]
        }
    ],
    "806": [
        {
            "id": 686,
            "story_id": 243,
            "context": [
                "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.",
                "People who have a talent of cooking can distinguish the taste of different condiments.",
                "Only people with the talent of cooking can make delicious meals.",
                "If the meal is popular at the party, then it is delicious.",
                "John can make meals which are popular at the party."
            ],
            "context_fol": [
                "\u2200x (Person(x) \u2227 Can(x, distinguishTheTasteOfDifferentCondiments) \u2192 Can(x, useDifferentCondimentsToCook))",
                "\u2200x (Person(x) \u2227 Has(x, talentOfCooking) \u2192 Can(x, distinguishTheTasteOfDifferentCondiments))",
                "\u2200x \u2200y (CanMake(x, y) \u2227 Meal(y) \u2227 Delicious(y) \u2227 Person(x) \u2192 Has(x, talentOfCooking)) ",
                "\u2200x \u2200y (Meal(y) \u2227 PopularAt(y, party) \u2192 Delicious(y))",
                "\u2203x (Person(john) \u2227 MakeMeal(john, x) \u2227 Meal(x) \u2227 PopularAt(x, party))"
            ],
            "question": "John cannot use different condiments for cooking.",
            "question_fol": "\u00acCan(john, useDifferentCondimentsToCook)",
            "label": "False",
            "predicates_fol": [
                "Person(x)",
                "Can(x, y)",
                "Has(x, y)",
                "CanMake(x, y)",
                "Meal(x)",
                "Delicious(x)",
                "PopularAt(x, y)",
                "MakeMeal(x, y)"
            ]
        },
        {
            "id": 692,
            "story_id": 249,
            "context": [
                "Every chef can cook.",
                "Some people who aren\u2019t chefs can cook.",
                "People who cook can make scrambled eggs and pasta.",
                "If someone can make cookies and muffins, they are a baker.",
                "Bakers who can also make scrambled eggs can make a good breakfast.",
                "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
            ],
            "context_fol": [
                "\u2200x (Chef(x) \u2192 Can(x, cook))",
                "\u2203x (\u00acChef(x) \u2227 Can(x, cook))",
                "\u2200x (Can(x, cook) \u2192 (CanMake(x, scrambledEggs) \u2227 CanMake(x, pasta)))",
                "\u2200x (CanMake(x, cookies) \u2227 CanMake(x, muffins) \u2192 Baker(x))",
                "\u2200x ((Baker(x) \u2227 CanMake(x, scrambledEggs)) \u2192 CanMake(x, goodBreakfast))",
                "CanMake(luke, cookies) \u2227 (CanMake(luke, scrambledEggs) \u2227 CanMake(luke, muffins) \u2227 \u00acCanMake(luke, pasta)"
            ],
            "question": "Luke can make a good breakfast.",
            "question_fol": "CanMake(luke, goodBreakfast)",
            "label": "True",
            "predicates_fol": [
                "Chef(x)",
                "Can(x, y)",
                "CanMake(x, y)",
                "Baker(x)"
            ]
        },
        {
            "id": 730,
            "story_id": 286,
            "context": [
                "No sandwich cookies are healthy.",
                "Oreos are sandwich cookies."
            ],
            "context_fol": [
                "\u2200x (SandwichCookie(x) \u2192 \u00acHealthy(x))",
                "\u2200x (Oreo(x) \u2192 SandwichCookie(x))"
            ],
            "question": "All sandwich cookies are delicious.",
            "question_fol": "\u2200x (SandwichCookie(x) \u2192 Delicious(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "SandwichCookie(x)",
                "Healthy(x)",
                "Oreo(x)"
            ]
        }
    ],
    "807": [
        {
            "id": 686,
            "story_id": 243,
            "context": [
                "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.",
                "People who have a talent of cooking can distinguish the taste of different condiments.",
                "Only people with the talent of cooking can make delicious meals.",
                "If the meal is popular at the party, then it is delicious.",
                "John can make meals which are popular at the party."
            ],
            "context_fol": [
                "\u2200x (Person(x) \u2227 Can(x, distinguishTheTasteOfDifferentCondiments) \u2192 Can(x, useDifferentCondimentsToCook))",
                "\u2200x (Person(x) \u2227 Has(x, talentOfCooking) \u2192 Can(x, distinguishTheTasteOfDifferentCondiments))",
                "\u2200x \u2200y (CanMake(x, y) \u2227 Meal(y) \u2227 Delicious(y) \u2227 Person(x) \u2192 Has(x, talentOfCooking)) ",
                "\u2200x \u2200y (Meal(y) \u2227 PopularAt(y, party) \u2192 Delicious(y))",
                "\u2203x (Person(john) \u2227 MakeMeal(john, x) \u2227 Meal(x) \u2227 PopularAt(x, party))"
            ],
            "question": "John cannot use different condiments for cooking.",
            "question_fol": "\u00acCan(john, useDifferentCondimentsToCook)",
            "label": "False",
            "predicates_fol": [
                "Person(x)",
                "Can(x, y)",
                "Has(x, y)",
                "CanMake(x, y)",
                "Meal(x)",
                "Delicious(x)",
                "PopularAt(x, y)",
                "MakeMeal(x, y)"
            ]
        },
        {
            "id": 692,
            "story_id": 249,
            "context": [
                "Every chef can cook.",
                "Some people who aren\u2019t chefs can cook.",
                "People who cook can make scrambled eggs and pasta.",
                "If someone can make cookies and muffins, they are a baker.",
                "Bakers who can also make scrambled eggs can make a good breakfast.",
                "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
            ],
            "context_fol": [
                "\u2200x (Chef(x) \u2192 Can(x, cook))",
                "\u2203x (\u00acChef(x) \u2227 Can(x, cook))",
                "\u2200x (Can(x, cook) \u2192 (CanMake(x, scrambledEggs) \u2227 CanMake(x, pasta)))",
                "\u2200x (CanMake(x, cookies) \u2227 CanMake(x, muffins) \u2192 Baker(x))",
                "\u2200x ((Baker(x) \u2227 CanMake(x, scrambledEggs)) \u2192 CanMake(x, goodBreakfast))",
                "CanMake(luke, cookies) \u2227 (CanMake(luke, scrambledEggs) \u2227 CanMake(luke, muffins) \u2227 \u00acCanMake(luke, pasta)"
            ],
            "question": "Luke can make a good breakfast.",
            "question_fol": "CanMake(luke, goodBreakfast)",
            "label": "True",
            "predicates_fol": [
                "Chef(x)",
                "Can(x, y)",
                "CanMake(x, y)",
                "Baker(x)"
            ]
        },
        {
            "id": 730,
            "story_id": 286,
            "context": [
                "No sandwich cookies are healthy.",
                "Oreos are sandwich cookies."
            ],
            "context_fol": [
                "\u2200x (SandwichCookie(x) \u2192 \u00acHealthy(x))",
                "\u2200x (Oreo(x) \u2192 SandwichCookie(x))"
            ],
            "question": "All sandwich cookies are delicious.",
            "question_fol": "\u2200x (SandwichCookie(x) \u2192 Delicious(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "SandwichCookie(x)",
                "Healthy(x)",
                "Oreo(x)"
            ]
        }
    ],
    "808": [
        {
            "id": 686,
            "story_id": 243,
            "context": [
                "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.",
                "People who have a talent of cooking can distinguish the taste of different condiments.",
                "Only people with the talent of cooking can make delicious meals.",
                "If the meal is popular at the party, then it is delicious.",
                "John can make meals which are popular at the party."
            ],
            "context_fol": [
                "\u2200x (Person(x) \u2227 Can(x, distinguishTheTasteOfDifferentCondiments) \u2192 Can(x, useDifferentCondimentsToCook))",
                "\u2200x (Person(x) \u2227 Has(x, talentOfCooking) \u2192 Can(x, distinguishTheTasteOfDifferentCondiments))",
                "\u2200x \u2200y (CanMake(x, y) \u2227 Meal(y) \u2227 Delicious(y) \u2227 Person(x) \u2192 Has(x, talentOfCooking)) ",
                "\u2200x \u2200y (Meal(y) \u2227 PopularAt(y, party) \u2192 Delicious(y))",
                "\u2203x (Person(john) \u2227 MakeMeal(john, x) \u2227 Meal(x) \u2227 PopularAt(x, party))"
            ],
            "question": "John cannot use different condiments for cooking.",
            "question_fol": "\u00acCan(john, useDifferentCondimentsToCook)",
            "label": "False",
            "predicates_fol": [
                "Person(x)",
                "Can(x, y)",
                "Has(x, y)",
                "CanMake(x, y)",
                "Meal(x)",
                "Delicious(x)",
                "PopularAt(x, y)",
                "MakeMeal(x, y)"
            ]
        },
        {
            "id": 692,
            "story_id": 249,
            "context": [
                "Every chef can cook.",
                "Some people who aren\u2019t chefs can cook.",
                "People who cook can make scrambled eggs and pasta.",
                "If someone can make cookies and muffins, they are a baker.",
                "Bakers who can also make scrambled eggs can make a good breakfast.",
                "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
            ],
            "context_fol": [
                "\u2200x (Chef(x) \u2192 Can(x, cook))",
                "\u2203x (\u00acChef(x) \u2227 Can(x, cook))",
                "\u2200x (Can(x, cook) \u2192 (CanMake(x, scrambledEggs) \u2227 CanMake(x, pasta)))",
                "\u2200x (CanMake(x, cookies) \u2227 CanMake(x, muffins) \u2192 Baker(x))",
                "\u2200x ((Baker(x) \u2227 CanMake(x, scrambledEggs)) \u2192 CanMake(x, goodBreakfast))",
                "CanMake(luke, cookies) \u2227 (CanMake(luke, scrambledEggs) \u2227 CanMake(luke, muffins) \u2227 \u00acCanMake(luke, pasta)"
            ],
            "question": "Luke can make a good breakfast.",
            "question_fol": "CanMake(luke, goodBreakfast)",
            "label": "True",
            "predicates_fol": [
                "Chef(x)",
                "Can(x, y)",
                "CanMake(x, y)",
                "Baker(x)"
            ]
        },
        {
            "id": 730,
            "story_id": 286,
            "context": [
                "No sandwich cookies are healthy.",
                "Oreos are sandwich cookies."
            ],
            "context_fol": [
                "\u2200x (SandwichCookie(x) \u2192 \u00acHealthy(x))",
                "\u2200x (Oreo(x) \u2192 SandwichCookie(x))"
            ],
            "question": "All sandwich cookies are delicious.",
            "question_fol": "\u2200x (SandwichCookie(x) \u2192 Delicious(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "SandwichCookie(x)",
                "Healthy(x)",
                "Oreo(x)"
            ]
        }
    ],
    "809": [
        {
            "id": 686,
            "story_id": 243,
            "context": [
                "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.",
                "People who have a talent of cooking can distinguish the taste of different condiments.",
                "Only people with the talent of cooking can make delicious meals.",
                "If the meal is popular at the party, then it is delicious.",
                "John can make meals which are popular at the party."
            ],
            "context_fol": [
                "\u2200x (Person(x) \u2227 Can(x, distinguishTheTasteOfDifferentCondiments) \u2192 Can(x, useDifferentCondimentsToCook))",
                "\u2200x (Person(x) \u2227 Has(x, talentOfCooking) \u2192 Can(x, distinguishTheTasteOfDifferentCondiments))",
                "\u2200x \u2200y (CanMake(x, y) \u2227 Meal(y) \u2227 Delicious(y) \u2227 Person(x) \u2192 Has(x, talentOfCooking)) ",
                "\u2200x \u2200y (Meal(y) \u2227 PopularAt(y, party) \u2192 Delicious(y))",
                "\u2203x (Person(john) \u2227 MakeMeal(john, x) \u2227 Meal(x) \u2227 PopularAt(x, party))"
            ],
            "question": "John cannot use different condiments for cooking.",
            "question_fol": "\u00acCan(john, useDifferentCondimentsToCook)",
            "label": "False",
            "predicates_fol": [
                "Person(x)",
                "Can(x, y)",
                "Has(x, y)",
                "CanMake(x, y)",
                "Meal(x)",
                "Delicious(x)",
                "PopularAt(x, y)",
                "MakeMeal(x, y)"
            ]
        },
        {
            "id": 692,
            "story_id": 249,
            "context": [
                "Every chef can cook.",
                "Some people who aren\u2019t chefs can cook.",
                "People who cook can make scrambled eggs and pasta.",
                "If someone can make cookies and muffins, they are a baker.",
                "Bakers who can also make scrambled eggs can make a good breakfast.",
                "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
            ],
            "context_fol": [
                "\u2200x (Chef(x) \u2192 Can(x, cook))",
                "\u2203x (\u00acChef(x) \u2227 Can(x, cook))",
                "\u2200x (Can(x, cook) \u2192 (CanMake(x, scrambledEggs) \u2227 CanMake(x, pasta)))",
                "\u2200x (CanMake(x, cookies) \u2227 CanMake(x, muffins) \u2192 Baker(x))",
                "\u2200x ((Baker(x) \u2227 CanMake(x, scrambledEggs)) \u2192 CanMake(x, goodBreakfast))",
                "CanMake(luke, cookies) \u2227 (CanMake(luke, scrambledEggs) \u2227 CanMake(luke, muffins) \u2227 \u00acCanMake(luke, pasta)"
            ],
            "question": "Luke can make a good breakfast.",
            "question_fol": "CanMake(luke, goodBreakfast)",
            "label": "True",
            "predicates_fol": [
                "Chef(x)",
                "Can(x, y)",
                "CanMake(x, y)",
                "Baker(x)"
            ]
        },
        {
            "id": 730,
            "story_id": 286,
            "context": [
                "No sandwich cookies are healthy.",
                "Oreos are sandwich cookies."
            ],
            "context_fol": [
                "\u2200x (SandwichCookie(x) \u2192 \u00acHealthy(x))",
                "\u2200x (Oreo(x) \u2192 SandwichCookie(x))"
            ],
            "question": "All sandwich cookies are delicious.",
            "question_fol": "\u2200x (SandwichCookie(x) \u2192 Delicious(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "SandwichCookie(x)",
                "Healthy(x)",
                "Oreo(x)"
            ]
        }
    ],
    "754": [
        {
            "id": 1023,
            "story_id": 383,
            "context": [
                "People who work at Jess's company and go to the spa frequently are not people who are miserly and need to save a large portion of their income.",
                "People who work at Jess's company are either miserly and need to save a large portion of their income, or frivolously spend a lot of money.",
                "If people who work at Jess's company frivolously spend a lot of money when they go out, then they value quality manufacturing and luxury items.",
                "If people who work at Jess's company value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
                "Thomas works at Jess's company.",
                "If Thomas is not miserly and needs to save a large portion of his income, then Thomas does not value quality manufacturing and luxury items.",
                "Thomas values quality manufacturing and luxury items or he is not miserly."
            ],
            "context_fol": [
                "\u2200x (WorkAt(x, jesssCompany) \u2227 GoToSpafrequently(x) \u2192 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)))",
                "\u2200x (WorkAt(x, jesssCompany) \u2192 Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)\u2295 SpendFrivolously(x, aLotOfMoney))",
                "\u2200x (WorkAt(x, jesssCompany) \u2227 SpendFrivolously(x, aLotOfMoney) \u2192 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem))",
                "\u2200x (WorkAt(x, jesssCompany) \u2227 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem) \u2192 Enjoy(x, shopping, materialisticItem))",
                "WorkAt(thomas, jesssCompany)",
                "\u00ac(Miserly(thomas) \u2227 NeedToSave(thomas, aLargePortionOfIncome)) \u2192 \u00ac((Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)))",
                "(Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)) \u2228 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome))"
            ],
            "question": "Thomas frivolously spends a lot of money.",
            "question_fol": "SpendFrivolously(thomas, aLotOfMoney)",
            "label": "False",
            "predicates_fol": [
                "WorkAt(x, y)",
                "GoToSpafrequently(x)",
                "Miserly(x)",
                "NeedToSave(x, y)",
                "SpendFrivolously(x, y)",
                "Value(x, y)",
                "Enjoy(x, y)"
            ]
        },
        {
            "id": 967,
            "story_id": 364,
            "context": [
                "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
                "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
                "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (In(x, thisNeighborhood) \u2227 VisitRegularly(x, coffeeShop) \u2192 AddictedTo(x, coffee))",
                "\u2200x (In(x, thisNeighborhood) \u2192 (VisitRegularly(x, coffeeShop) \u2228 (\u2203y (TakeOut(y) \u2227 Order(x, y, aDay))))",
                "\u2200x (In(x, thisNeighborhood) \u2227 MakeAtUsing(x, home, ownFood, recipe) \u2192 \u2203y (TakeOut(y) \u2227 Order(x, y)))",
                "\u2200x (In(x, thisNeighborhood) \u2227 \u2203y (CoffeemakerAndBlender(y) \u2227 Own(x, y)) \u2192 \u00acOrderAtLeastOnceADay(x, takeout))",
                "\u2200x (In(x, thisNeighborhood) \u2227 BusyWith(x, 12HourWorkHour) \u2192 MakeAtUsing(x, home, ownFood, recipe))",
                "In(sam, thisNeighborhood) \u2227 \u00ac(AddictedTo(sam, coffee) \u2295 BusyWith(sam, 12HourWorkHour))"
            ],
            "question": "Sam is living in this neighborhood and he is addicted to coffee.",
            "question_fol": "InThisNeighborhood(sam) \u2227 AddictedTo(sam, coffee)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "VisitRegularly(x, y)",
                "AddictedTo(x, y)",
                "TakeOut(x)",
                "Order(x, y, z)",
                "MakeAtUsing(x, y, z, w)",
                "CoffeemakerAndBlender(x)",
                "Own(x, y)",
                "OrderAtLeastOnceADay(x, y)",
                "BusyWith(x, y)"
            ]
        },
        {
            "id": 843,
            "story_id": 329,
            "context": [
                "All young working professionals who have regular 9-5 jobs have stable jobs.",
                "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
                "All people who have stable jobs are people who work regularly.",
                "People who work regularly do not frequently disobey their bosses.",
                "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
            ],
            "context_fol": [
                "\u2200x (YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job) \u2192 Have(x, stableJob))",
                "\u2203x (LiveIn(x, manhattan) \u2227 YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job))",
                "\u2200x (Have(x, stableJob) \u2192 WorkRegularly(x))",
                "\u2200x (WorkRegularly(x) \u2192 \u00acDisobeyFrequently(x, boss))",
                "\u00ac(DisobeyFrequently(mary, boss) \u2295 WorkRegularly(mary))"
            ],
            "question": "Mary lives in Manhattan.",
            "question_fol": "LiveIn(mary, manhattan)",
            "label": "Uncertain",
            "predicates_fol": [
                "YoungWorkingProfessional(x)",
                "Have(x, y)",
                "LiveIn(x, y)",
                "WorkRegularly(x)",
                "DisobeyFrequently(x, y)"
            ]
        }
    ],
    "755": [
        {
            "id": 1023,
            "story_id": 383,
            "context": [
                "People who work at Jess's company and go to the spa frequently are not people who are miserly and need to save a large portion of their income.",
                "People who work at Jess's company are either miserly and need to save a large portion of their income, or frivolously spend a lot of money.",
                "If people who work at Jess's company frivolously spend a lot of money when they go out, then they value quality manufacturing and luxury items.",
                "If people who work at Jess's company value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
                "Thomas works at Jess's company.",
                "If Thomas is not miserly and needs to save a large portion of his income, then Thomas does not value quality manufacturing and luxury items.",
                "Thomas values quality manufacturing and luxury items or he is not miserly."
            ],
            "context_fol": [
                "\u2200x (WorkAt(x, jesssCompany) \u2227 GoToSpafrequently(x) \u2192 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)))",
                "\u2200x (WorkAt(x, jesssCompany) \u2192 Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)\u2295 SpendFrivolously(x, aLotOfMoney))",
                "\u2200x (WorkAt(x, jesssCompany) \u2227 SpendFrivolously(x, aLotOfMoney) \u2192 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem))",
                "\u2200x (WorkAt(x, jesssCompany) \u2227 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem) \u2192 Enjoy(x, shopping, materialisticItem))",
                "WorkAt(thomas, jesssCompany)",
                "\u00ac(Miserly(thomas) \u2227 NeedToSave(thomas, aLargePortionOfIncome)) \u2192 \u00ac((Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)))",
                "(Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)) \u2228 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome))"
            ],
            "question": "Thomas frivolously spends a lot of money.",
            "question_fol": "SpendFrivolously(thomas, aLotOfMoney)",
            "label": "False",
            "predicates_fol": [
                "WorkAt(x, y)",
                "GoToSpafrequently(x)",
                "Miserly(x)",
                "NeedToSave(x, y)",
                "SpendFrivolously(x, y)",
                "Value(x, y)",
                "Enjoy(x, y)"
            ]
        },
        {
            "id": 967,
            "story_id": 364,
            "context": [
                "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
                "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
                "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (In(x, thisNeighborhood) \u2227 VisitRegularly(x, coffeeShop) \u2192 AddictedTo(x, coffee))",
                "\u2200x (In(x, thisNeighborhood) \u2192 (VisitRegularly(x, coffeeShop) \u2228 (\u2203y (TakeOut(y) \u2227 Order(x, y, aDay))))",
                "\u2200x (In(x, thisNeighborhood) \u2227 MakeAtUsing(x, home, ownFood, recipe) \u2192 \u2203y (TakeOut(y) \u2227 Order(x, y)))",
                "\u2200x (In(x, thisNeighborhood) \u2227 \u2203y (CoffeemakerAndBlender(y) \u2227 Own(x, y)) \u2192 \u00acOrderAtLeastOnceADay(x, takeout))",
                "\u2200x (In(x, thisNeighborhood) \u2227 BusyWith(x, 12HourWorkHour) \u2192 MakeAtUsing(x, home, ownFood, recipe))",
                "In(sam, thisNeighborhood) \u2227 \u00ac(AddictedTo(sam, coffee) \u2295 BusyWith(sam, 12HourWorkHour))"
            ],
            "question": "Sam is living in this neighborhood and he is addicted to coffee.",
            "question_fol": "InThisNeighborhood(sam) \u2227 AddictedTo(sam, coffee)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "VisitRegularly(x, y)",
                "AddictedTo(x, y)",
                "TakeOut(x)",
                "Order(x, y, z)",
                "MakeAtUsing(x, y, z, w)",
                "CoffeemakerAndBlender(x)",
                "Own(x, y)",
                "OrderAtLeastOnceADay(x, y)",
                "BusyWith(x, y)"
            ]
        },
        {
            "id": 843,
            "story_id": 329,
            "context": [
                "All young working professionals who have regular 9-5 jobs have stable jobs.",
                "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
                "All people who have stable jobs are people who work regularly.",
                "People who work regularly do not frequently disobey their bosses.",
                "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
            ],
            "context_fol": [
                "\u2200x (YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job) \u2192 Have(x, stableJob))",
                "\u2203x (LiveIn(x, manhattan) \u2227 YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job))",
                "\u2200x (Have(x, stableJob) \u2192 WorkRegularly(x))",
                "\u2200x (WorkRegularly(x) \u2192 \u00acDisobeyFrequently(x, boss))",
                "\u00ac(DisobeyFrequently(mary, boss) \u2295 WorkRegularly(mary))"
            ],
            "question": "Mary lives in Manhattan.",
            "question_fol": "LiveIn(mary, manhattan)",
            "label": "Uncertain",
            "predicates_fol": [
                "YoungWorkingProfessional(x)",
                "Have(x, y)",
                "LiveIn(x, y)",
                "WorkRegularly(x)",
                "DisobeyFrequently(x, y)"
            ]
        }
    ],
    "756": [
        {
            "id": 1023,
            "story_id": 383,
            "context": [
                "People who work at Jess's company and go to the spa frequently are not people who are miserly and need to save a large portion of their income.",
                "People who work at Jess's company are either miserly and need to save a large portion of their income, or frivolously spend a lot of money.",
                "If people who work at Jess's company frivolously spend a lot of money when they go out, then they value quality manufacturing and luxury items.",
                "If people who work at Jess's company value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
                "Thomas works at Jess's company.",
                "If Thomas is not miserly and needs to save a large portion of his income, then Thomas does not value quality manufacturing and luxury items.",
                "Thomas values quality manufacturing and luxury items or he is not miserly."
            ],
            "context_fol": [
                "\u2200x (WorkAt(x, jesssCompany) \u2227 GoToSpafrequently(x) \u2192 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)))",
                "\u2200x (WorkAt(x, jesssCompany) \u2192 Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)\u2295 SpendFrivolously(x, aLotOfMoney))",
                "\u2200x (WorkAt(x, jesssCompany) \u2227 SpendFrivolously(x, aLotOfMoney) \u2192 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem))",
                "\u2200x (WorkAt(x, jesssCompany) \u2227 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem) \u2192 Enjoy(x, shopping, materialisticItem))",
                "WorkAt(thomas, jesssCompany)",
                "\u00ac(Miserly(thomas) \u2227 NeedToSave(thomas, aLargePortionOfIncome)) \u2192 \u00ac((Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)))",
                "(Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)) \u2228 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome))"
            ],
            "question": "Thomas frivolously spends a lot of money.",
            "question_fol": "SpendFrivolously(thomas, aLotOfMoney)",
            "label": "False",
            "predicates_fol": [
                "WorkAt(x, y)",
                "GoToSpafrequently(x)",
                "Miserly(x)",
                "NeedToSave(x, y)",
                "SpendFrivolously(x, y)",
                "Value(x, y)",
                "Enjoy(x, y)"
            ]
        },
        {
            "id": 967,
            "story_id": 364,
            "context": [
                "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
                "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
                "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (In(x, thisNeighborhood) \u2227 VisitRegularly(x, coffeeShop) \u2192 AddictedTo(x, coffee))",
                "\u2200x (In(x, thisNeighborhood) \u2192 (VisitRegularly(x, coffeeShop) \u2228 (\u2203y (TakeOut(y) \u2227 Order(x, y, aDay))))",
                "\u2200x (In(x, thisNeighborhood) \u2227 MakeAtUsing(x, home, ownFood, recipe) \u2192 \u2203y (TakeOut(y) \u2227 Order(x, y)))",
                "\u2200x (In(x, thisNeighborhood) \u2227 \u2203y (CoffeemakerAndBlender(y) \u2227 Own(x, y)) \u2192 \u00acOrderAtLeastOnceADay(x, takeout))",
                "\u2200x (In(x, thisNeighborhood) \u2227 BusyWith(x, 12HourWorkHour) \u2192 MakeAtUsing(x, home, ownFood, recipe))",
                "In(sam, thisNeighborhood) \u2227 \u00ac(AddictedTo(sam, coffee) \u2295 BusyWith(sam, 12HourWorkHour))"
            ],
            "question": "Sam is living in this neighborhood and he is addicted to coffee.",
            "question_fol": "InThisNeighborhood(sam) \u2227 AddictedTo(sam, coffee)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "VisitRegularly(x, y)",
                "AddictedTo(x, y)",
                "TakeOut(x)",
                "Order(x, y, z)",
                "MakeAtUsing(x, y, z, w)",
                "CoffeemakerAndBlender(x)",
                "Own(x, y)",
                "OrderAtLeastOnceADay(x, y)",
                "BusyWith(x, y)"
            ]
        },
        {
            "id": 843,
            "story_id": 329,
            "context": [
                "All young working professionals who have regular 9-5 jobs have stable jobs.",
                "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
                "All people who have stable jobs are people who work regularly.",
                "People who work regularly do not frequently disobey their bosses.",
                "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
            ],
            "context_fol": [
                "\u2200x (YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job) \u2192 Have(x, stableJob))",
                "\u2203x (LiveIn(x, manhattan) \u2227 YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job))",
                "\u2200x (Have(x, stableJob) \u2192 WorkRegularly(x))",
                "\u2200x (WorkRegularly(x) \u2192 \u00acDisobeyFrequently(x, boss))",
                "\u00ac(DisobeyFrequently(mary, boss) \u2295 WorkRegularly(mary))"
            ],
            "question": "Mary lives in Manhattan.",
            "question_fol": "LiveIn(mary, manhattan)",
            "label": "Uncertain",
            "predicates_fol": [
                "YoungWorkingProfessional(x)",
                "Have(x, y)",
                "LiveIn(x, y)",
                "WorkRegularly(x)",
                "DisobeyFrequently(x, y)"
            ]
        }
    ],
    "688": [
        {
            "id": 521,
            "story_id": 181,
            "context": [
                "American superheroes come from either the DC Universe or Marvel Universe.",
                "Captain America is one of America's top-ten favorite superheroes",
                "Captain America does not come from the DC Universe.",
                "America's top-ten favorite superheroes speak English.",
                "Some superheroes speak both English and Spanish. "
            ],
            "context_fol": [
                "\u2200x (Superhero(x) \u2227 American(x) \u2192 ComeFrom(x, dCUniverse) \u2295 ComeFrom(x, marvelUniverse)) ",
                "American(captainAmerica) \u2227 TopTenFavorite(captainAmerica) \u2227 Superhero(captainAmerica) ",
                "\u00acComeFrom(captainAmerica, dCUniverse)",
                "\u2200x (American(x) \u2227 TopTenFavorite(x) \u2227 Superhero(x)  \u2192 Speak(x, english)) ",
                "\u2203x (Superhero(x) \u2192 (Speak(x, english) \u2227 Speak(x, spanish)))"
            ],
            "question": "Captain America does not speak English.",
            "question_fol": "\u00acSpeak(captainAmerica, english)",
            "label": "False",
            "predicates_fol": [
                "Superhero(x)",
                "American(x)",
                "ComeFrom(x, y)",
                "TopTenFavorite(x)",
                "Speak(x, y)"
            ]
        },
        {
            "id": 11,
            "story_id": 5,
            "context": [
                "Peter Parker is either a superhero or a civilian.",
                "The Hulk is a destroyer.",
                "The Hulk wakes up when he is angry.",
                "If the Hulk wakes up, then he will break a bridge.",
                "Thor is a god.",
                "Thor will break a bridge when he is happy.",
                "A god is not a destroyer.",
                "Peter Parker wears a uniform when he is a superhero.",
                "Peter Parker is not a civilian if a destroyer is breaking a bridge.",
                "If Thor is happy, the Hulk is angry."
            ],
            "context_fol": [
                "Superhero(peterParker) \u2295 Civilian(peterParker)",
                "Destroyer(theHulk)",
                "Angry(theHulk) \u2192 WakesUp(theHulk)",
                "WakesUp(theHulk) \u2192 Breaks(theHulk, bridge)",
                "God(thor)",
                "Happy(thor) \u2192 Breaks(thor, bridge)",
                "\u2200x (God(x) \u2192 \u00acDestroyer(x))",
                "Superhero(peter) \u2192 Wears(peter, uniform)",
                "\u2200x ((Destroyer(x) \u2227 Breaks(x,bridge)) \u2192 \u00acCivilian(peter))",
                "Happy(thor) \u2192 Angry(theHulk)"
            ],
            "question": "If the Hulk does not wake up, then Thor is not happy.",
            "question_fol": "\u00acWakesUp(theHulk) \u2192 \u00acHappy(thor)",
            "label": "True",
            "predicates_fol": [
                "Superhero(x)",
                "Civilian(x)",
                "Destroyer(x)",
                "Angry(x)",
                "WakesUp(x)",
                "Breaks(x, y)",
                "God(x)",
                "Happy(x)",
                "Wears(x, y)"
            ]
        },
        {
            "id": 375,
            "story_id": 126,
            "context": [
                "A cat named Garfield, the main character of the film Garfield, is orange and fat and likes having lasagna. ",
                "Garfield shares a home with Odie, another pet of Jon's. ",
                "Garfield hates Odie.",
                "A pet who hates the pet with whom he shares the same owner is childish and possessive."
            ],
            "context_fol": [
                "Cat(garfield) \u2227 MainCharacterOf(garfield, filmGarfield) \u2227 Orange(garfield) \u2227 Fat(garfield) \u2227 Like(garfield, lasagna)",
                "PetOf(garfield, jon) \u2227 PetOf(odie, jon) \u2227 ShareHomeWith(garfield, odie)",
                "Hate(garfield, odie)",
                "\u2200x \u2200y \u2203z (PetOf(x, z) \u2227 PetOf(y, z) \u2227 Hate(x, y) \u2192 Childish(x) \u2227 Possessive(x))"
            ],
            "question": "The main character of the film Garfield is childish and possessive.",
            "question_fol": "\u2203x (MainCharacterOf(x, garfield) \u2227 Childish(x) \u2227 Possessive(x))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "MainCharacterOf(x, y)",
                "Orange(x)",
                "Fat(x)",
                "Like(x, y)",
                "PetOf(x, y)",
                "ShareHomeWith(x, y)",
                "Hate(x, y)",
                "Childish(x)",
                "Possessive(x)"
            ]
        }
    ],
    "171": [
        {
            "id": 1166,
            "story_id": 415,
            "context": [
                "All books written by Neil Gaiman have sold more than one thousand copies.",
                "Some books that have won Hugo Awards are written by Neil Gaiman.",
                "Tomas has read all books written by Tolkien. ",
                "Either Tomas has read Hamlet, or it has sold more than one thousand copies.",
                "Hamlet has either sold more than one thousand copies or it is written by Neil Gaiman."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))",
                "\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))",
                "\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))",
                "ReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))",
                "\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)"
            ],
            "question": "Hamlet has won a Hugo Award.",
            "question_fol": "Win(hamlet, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "SoldCopies(x, y)",
                "Win(x, y)",
                "ReadBy(x, y)"
            ]
        },
        {
            "id": 1047,
            "story_id": 391,
            "context": [
                "All imaginative processes that Dan knows are results of creative processes.",
                "All science fiction that Dan knows comes from an imaginative process.",
                "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
                "No facts that Dan knows have proven to be false.",
                "Dan knows that Dune is science fiction or has proven to be false."
            ],
            "context_fol": [
                "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))",
                "\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) ",
                "\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))",
                "\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) ",
                "(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))"
            ],
            "question": "Dune is realistic fiction.",
            "question_fol": "RealisticFiction(dune)",
            "label": "Uncertain",
            "predicates_fol": [
                "Knows(x, y)",
                "ImaginativeProcess(x)",
                "ResultOf(x, y)",
                "ScienceFiction(x)",
                "RealisticFiction(x)",
                "Fact(x)",
                "ProvedToBe(x, y)"
            ]
        },
        {
            "id": 138,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)",
                "About(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))",
                "\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))"
            ],
            "question": "Douglas Adams is a writer.",
            "question_fol": "Writer(douglasAdams)",
            "label": "True",
            "predicates_fol": [
                "Author(x)",
                "Authored(x, y)",
                "Book(x)",
                "About(x, y)",
                "Writer(x)",
                "Create(x, y)",
                "Contain(x, y)"
            ]
        }
    ],
    "172": [
        {
            "id": 1166,
            "story_id": 415,
            "context": [
                "All books written by Neil Gaiman have sold more than one thousand copies.",
                "Some books that have won Hugo Awards are written by Neil Gaiman.",
                "Tomas has read all books written by Tolkien. ",
                "Either Tomas has read Hamlet, or it has sold more than one thousand copies.",
                "Hamlet has either sold more than one thousand copies or it is written by Neil Gaiman."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))",
                "\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))",
                "\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))",
                "ReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))",
                "\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)"
            ],
            "question": "Hamlet has won a Hugo Award.",
            "question_fol": "Win(hamlet, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "SoldCopies(x, y)",
                "Win(x, y)",
                "ReadBy(x, y)"
            ]
        },
        {
            "id": 1047,
            "story_id": 391,
            "context": [
                "All imaginative processes that Dan knows are results of creative processes.",
                "All science fiction that Dan knows comes from an imaginative process.",
                "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
                "No facts that Dan knows have proven to be false.",
                "Dan knows that Dune is science fiction or has proven to be false."
            ],
            "context_fol": [
                "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))",
                "\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) ",
                "\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))",
                "\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) ",
                "(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))"
            ],
            "question": "Dune is realistic fiction.",
            "question_fol": "RealisticFiction(dune)",
            "label": "Uncertain",
            "predicates_fol": [
                "Knows(x, y)",
                "ImaginativeProcess(x)",
                "ResultOf(x, y)",
                "ScienceFiction(x)",
                "RealisticFiction(x)",
                "Fact(x)",
                "ProvedToBe(x, y)"
            ]
        },
        {
            "id": 138,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)",
                "About(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))",
                "\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))"
            ],
            "question": "Douglas Adams is a writer.",
            "question_fol": "Writer(douglasAdams)",
            "label": "True",
            "predicates_fol": [
                "Author(x)",
                "Authored(x, y)",
                "Book(x)",
                "About(x, y)",
                "Writer(x)",
                "Create(x, y)",
                "Contain(x, y)"
            ]
        }
    ],
    "173": [
        {
            "id": 1166,
            "story_id": 415,
            "context": [
                "All books written by Neil Gaiman have sold more than one thousand copies.",
                "Some books that have won Hugo Awards are written by Neil Gaiman.",
                "Tomas has read all books written by Tolkien. ",
                "Either Tomas has read Hamlet, or it has sold more than one thousand copies.",
                "Hamlet has either sold more than one thousand copies or it is written by Neil Gaiman."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))",
                "\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))",
                "\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))",
                "ReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))",
                "\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)"
            ],
            "question": "Hamlet has won a Hugo Award.",
            "question_fol": "Win(hamlet, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "SoldCopies(x, y)",
                "Win(x, y)",
                "ReadBy(x, y)"
            ]
        },
        {
            "id": 1047,
            "story_id": 391,
            "context": [
                "All imaginative processes that Dan knows are results of creative processes.",
                "All science fiction that Dan knows comes from an imaginative process.",
                "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
                "No facts that Dan knows have proven to be false.",
                "Dan knows that Dune is science fiction or has proven to be false."
            ],
            "context_fol": [
                "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))",
                "\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) ",
                "\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))",
                "\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) ",
                "(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))"
            ],
            "question": "Dune is realistic fiction.",
            "question_fol": "RealisticFiction(dune)",
            "label": "Uncertain",
            "predicates_fol": [
                "Knows(x, y)",
                "ImaginativeProcess(x)",
                "ResultOf(x, y)",
                "ScienceFiction(x)",
                "RealisticFiction(x)",
                "Fact(x)",
                "ProvedToBe(x, y)"
            ]
        },
        {
            "id": 138,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)",
                "About(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))",
                "\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))"
            ],
            "question": "Douglas Adams is a writer.",
            "question_fol": "Writer(douglasAdams)",
            "label": "True",
            "predicates_fol": [
                "Author(x)",
                "Authored(x, y)",
                "Book(x)",
                "About(x, y)",
                "Writer(x)",
                "Create(x, y)",
                "Contain(x, y)"
            ]
        }
    ],
    "546": [
        {
            "id": 542,
            "story_id": 189,
            "context": [
                "A summarization model is always faithful if it uses content from the input documents.",
                "Extractive models are summarization models.",
                "An extractive model can only use content from the input documents."
            ],
            "context_fol": [
                "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Model(x) \u2227 Summarization(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
            ],
            "question": "Extractive models are always faithful.",
            "question_fol": "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Faithful(x))",
            "label": "True",
            "predicates_fol": [
                "Model(x)",
                "Summarization(x)",
                "OnlyUseInputDocument(x)",
                "Faithful(x)",
                "Extractive(x)"
            ]
        },
        {
            "id": 1357,
            "story_id": 470,
            "context": [
                "A Unix operating system used in the lab computers is a piece of software.",
                "All versions of MacOS used in the lab computer are based on Unix operating systems.",
                "A lab computer uses either MacOS or Linux. ",
                "All Linux computers in the lab are convenient.",
                "All software used in the lab computers is written with code.",
                "If something is convenient in the lab computer, then it is popular.",
                "Burger is used in the lab computer, and it is written with code and a new version of MacOS.",
                "PyTorch is used in the lab computer, and PyTorch is neither a Linux system nor a piece of software."
            ],
            "context_fol": [
                "\u2200x (UsedIn(x, labComputer) \u2227 UnixOperatingSystem(x) \u2192 Software(x))",
                "\u2200x (UsedIn(x, labComputer) \u2227 MacOS(x) \u2192 UnixOperatingSystem(x))",
                "\u2200x (UsedIn(x, labComputer) \u2192 MacOS(x) \u2295 Linux(x))",
                "\u2200x (UsedIn(x, labComputer) \u2227 Linux(x) \u2192 Convenient(x))",
                "\u2200x (UsedIn(x, labComputer) \u2227 Software(x) \u2192 WrittenWithCode(x))",
                "\u2200x (UsedIn(x, labComputer) \u2227 Convenient(x) \u2192 Popular(x))",
                "UsedIn(burger, labComputer) \u2227 WrittenWithCode(burger) \u2227 MacOS(burger))",
                "UsedIn(pytorch, labComputer) \u2227 \u00ac(Linux(pytorch) \u2295 Software(pytorch))"
            ],
            "question": "Burger is popular.",
            "question_fol": "Popular(burger)",
            "label": "Uncertain",
            "predicates_fol": [
                "UsedIn(x, y)",
                "UnixOperatingSystem(x)",
                "Software(x)",
                "MacOS(x)",
                "Linux(x)",
                "Convenient(x)",
                "WrittenWithCode(x)",
                "Popular(x)"
            ]
        },
        {
            "id": 682,
            "story_id": 240,
            "context": [
                "It is not true that some giant language models do not have good performance. ",
                "All language models with good performance are used by some researchers.",
                "If a language model is used by some researchers, it is popular. ",
                "If BERT is a giant language model, then GPT-3 is also a giant language model. ",
                "BERT is a giant language model. "
            ],
            "context_fol": [
                "\u00ac(\u2203x (LanguageModel(x) \u2227 Giant(x) \u2227 \u00acGoodPerformance(x)))",
                "\u2200x \u2203y \u2203z (LanguageModel(x) \u2227 GoodPerformance(x) \u2192 \u00ac(x=y) \u2227 Researcher(y) \u2227 UsedBy(x, y) \u2227 Researcher(z) \u2227 UsedBy(x, z))",
                "\u2200x \u2203y \u2203z (LanguageModel(x) \u2227 \u00ac(x=y) \u2227 Researcher(y) \u2227 UsedBy(x, y) \u2227 Researcher(z) \u2227 UsedBy(x, z) \u2192 Popular(x))",
                "(LanguageModel(bert) \u2227 Giant(bert)) \u2192 (LanguageModel(gpt-3) \u2227 Giant(gpt-3)).",
                "LanguageModel(bert) \u2227 Giant(bert)"
            ],
            "question": "GPT-3 is popular.",
            "question_fol": "Popular(gpt-3)",
            "label": "True",
            "predicates_fol": [
                "LanguageModel(x)",
                "Giant(x)",
                "GoodPerformance(x)",
                "Researcher(x)",
                "UsedBy(x, y)",
                "Popular(x)"
            ]
        }
    ],
    "547": [
        {
            "id": 542,
            "story_id": 189,
            "context": [
                "A summarization model is always faithful if it uses content from the input documents.",
                "Extractive models are summarization models.",
                "An extractive model can only use content from the input documents."
            ],
            "context_fol": [
                "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Model(x) \u2227 Summarization(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
            ],
            "question": "Extractive models are always faithful.",
            "question_fol": "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Faithful(x))",
            "label": "True",
            "predicates_fol": [
                "Model(x)",
                "Summarization(x)",
                "OnlyUseInputDocument(x)",
                "Faithful(x)",
                "Extractive(x)"
            ]
        },
        {
            "id": 1357,
            "story_id": 470,
            "context": [
                "A Unix operating system used in the lab computers is a piece of software.",
                "All versions of MacOS used in the lab computer are based on Unix operating systems.",
                "A lab computer uses either MacOS or Linux. ",
                "All Linux computers in the lab are convenient.",
                "All software used in the lab computers is written with code.",
                "If something is convenient in the lab computer, then it is popular.",
                "Burger is used in the lab computer, and it is written with code and a new version of MacOS.",
                "PyTorch is used in the lab computer, and PyTorch is neither a Linux system nor a piece of software."
            ],
            "context_fol": [
                "\u2200x (UsedIn(x, labComputer) \u2227 UnixOperatingSystem(x) \u2192 Software(x))",
                "\u2200x (UsedIn(x, labComputer) \u2227 MacOS(x) \u2192 UnixOperatingSystem(x))",
                "\u2200x (UsedIn(x, labComputer) \u2192 MacOS(x) \u2295 Linux(x))",
                "\u2200x (UsedIn(x, labComputer) \u2227 Linux(x) \u2192 Convenient(x))",
                "\u2200x (UsedIn(x, labComputer) \u2227 Software(x) \u2192 WrittenWithCode(x))",
                "\u2200x (UsedIn(x, labComputer) \u2227 Convenient(x) \u2192 Popular(x))",
                "UsedIn(burger, labComputer) \u2227 WrittenWithCode(burger) \u2227 MacOS(burger))",
                "UsedIn(pytorch, labComputer) \u2227 \u00ac(Linux(pytorch) \u2295 Software(pytorch))"
            ],
            "question": "Burger is popular.",
            "question_fol": "Popular(burger)",
            "label": "Uncertain",
            "predicates_fol": [
                "UsedIn(x, y)",
                "UnixOperatingSystem(x)",
                "Software(x)",
                "MacOS(x)",
                "Linux(x)",
                "Convenient(x)",
                "WrittenWithCode(x)",
                "Popular(x)"
            ]
        },
        {
            "id": 682,
            "story_id": 240,
            "context": [
                "It is not true that some giant language models do not have good performance. ",
                "All language models with good performance are used by some researchers.",
                "If a language model is used by some researchers, it is popular. ",
                "If BERT is a giant language model, then GPT-3 is also a giant language model. ",
                "BERT is a giant language model. "
            ],
            "context_fol": [
                "\u00ac(\u2203x (LanguageModel(x) \u2227 Giant(x) \u2227 \u00acGoodPerformance(x)))",
                "\u2200x \u2203y \u2203z (LanguageModel(x) \u2227 GoodPerformance(x) \u2192 \u00ac(x=y) \u2227 Researcher(y) \u2227 UsedBy(x, y) \u2227 Researcher(z) \u2227 UsedBy(x, z))",
                "\u2200x \u2203y \u2203z (LanguageModel(x) \u2227 \u00ac(x=y) \u2227 Researcher(y) \u2227 UsedBy(x, y) \u2227 Researcher(z) \u2227 UsedBy(x, z) \u2192 Popular(x))",
                "(LanguageModel(bert) \u2227 Giant(bert)) \u2192 (LanguageModel(gpt-3) \u2227 Giant(gpt-3)).",
                "LanguageModel(bert) \u2227 Giant(bert)"
            ],
            "question": "GPT-3 is popular.",
            "question_fol": "Popular(gpt-3)",
            "label": "True",
            "predicates_fol": [
                "LanguageModel(x)",
                "Giant(x)",
                "GoodPerformance(x)",
                "Researcher(x)",
                "UsedBy(x, y)",
                "Popular(x)"
            ]
        }
    ],
    "476": [
        {
            "id": 982,
            "story_id": 369,
            "context": [
                "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
                "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
                "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
                "Everybody in Emma's family live with at least one roommate, does not own any pets.",
                "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
                "Emily is in Emma's family.",
                "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (InEmmasFamily(x) \u2227 UpgradeToEveryYear(x, newestIphoneModel) \u2192 \u00acSavingMoneyForOn(x, downPayment, newHouse))",
                "\u2200x (InEmmasFamily(x) \u2227 EnjoyReading(x, techSpec) \u2227 KeepUpdatedOn(x, latestTechnology) \u2192 UpgradeToEveryYear(x, newestIphoneModel))",
                "\u2200x (InEmmasFamily(x) \u2227 (SavingMoneyForOn(x, downPayment, newHouse) \u2228 LiveIn(x, apartment, bigMetropolitanCity)))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))) \u2192 \u00ac(\u2203y (Own(x, y) \u2227 Pet(y))))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (Own(x, y) \u2227 Pet(y))) \u2192 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))))",
                "InEmmasFamily(emily)",
                "((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2192 ((\u2203y (Own(emily, y) \u2227 Pet(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2295 \u00ac((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2228 LiveIn(emily, apartment, bigMetropolitanCity))"
            ],
            "question": "Emily is in Emma's family and she lives with at least one roommate.",
            "question_fol": "\u2203y (LiveWith(emily, y) \u2227 Roommate(y))",
            "label": "Uncertain",
            "predicates_fol": [
                "InEmmasFamily(x)",
                "UpgradeToEveryYear(x, y)",
                "SavingMoneyForOn(x, y)",
                "EnjoyReading(x, y)",
                "KeepUpdatedOn(x, y)",
                "LiveIn(x, y, z)",
                "LiveWith(x, y)",
                "Roommate(x)",
                "Own(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        },
        {
            "id": 458,
            "story_id": 160,
            "context": [
                "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
                "Many apartment rents cover the cost of water and electricity.",
                "Susan lives in an apartment where the rent covers all utilities.",
                "The rent of the apartment where Ava lives does not cover any utility expenses.",
                "Noah lives in an apartment where the rent does not cover heating."
            ],
            "context_fol": [
                "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)",
                "\u2203x (Apartment(x) \u2227 Cover(x, water) \u2227 Cover(x, electricity))",
                "\u2200x (Apartment(x) \u2227 LiveIn(susan, x) \u2227 Cover(x, water) \u2227 Cover(x, electricity) \u2227 Cover(x, gas) \u2227 Cover(x, heating))",
                "\u2200x (Apartment(x) \u2227 LiveIn(ava, x) \u2227 \u00acCover(x, water) \u2227 \u00acCover(x, electricity) \u2227 \u00acCover(x, gas) \u2227 \u00acCover(x, heating))",
                "\u2200x (Apartment(x) \u2227 LiveIn(noah, x) \u2227 \u00acCover(x, heating))"
            ],
            "question": "Noah needs to pay the water bill.",
            "question_fol": "\u2200x (Apartment(x) \u2227 LiveIn(noah, x) \u2227 \u00acCover(x, water))",
            "label": "Uncertain",
            "predicates_fol": [
                "CommonUtilities(x)",
                "Apartment(x)",
                "Cover(x, y)",
                "LiveIn(x, y)"
            ]
        }
    ],
    "477": [
        {
            "id": 982,
            "story_id": 369,
            "context": [
                "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
                "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
                "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
                "Everybody in Emma's family live with at least one roommate, does not own any pets.",
                "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
                "Emily is in Emma's family.",
                "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (InEmmasFamily(x) \u2227 UpgradeToEveryYear(x, newestIphoneModel) \u2192 \u00acSavingMoneyForOn(x, downPayment, newHouse))",
                "\u2200x (InEmmasFamily(x) \u2227 EnjoyReading(x, techSpec) \u2227 KeepUpdatedOn(x, latestTechnology) \u2192 UpgradeToEveryYear(x, newestIphoneModel))",
                "\u2200x (InEmmasFamily(x) \u2227 (SavingMoneyForOn(x, downPayment, newHouse) \u2228 LiveIn(x, apartment, bigMetropolitanCity)))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))) \u2192 \u00ac(\u2203y (Own(x, y) \u2227 Pet(y))))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (Own(x, y) \u2227 Pet(y))) \u2192 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))))",
                "InEmmasFamily(emily)",
                "((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2192 ((\u2203y (Own(emily, y) \u2227 Pet(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2295 \u00ac((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2228 LiveIn(emily, apartment, bigMetropolitanCity))"
            ],
            "question": "Emily is in Emma's family and she lives with at least one roommate.",
            "question_fol": "\u2203y (LiveWith(emily, y) \u2227 Roommate(y))",
            "label": "Uncertain",
            "predicates_fol": [
                "InEmmasFamily(x)",
                "UpgradeToEveryYear(x, y)",
                "SavingMoneyForOn(x, y)",
                "EnjoyReading(x, y)",
                "KeepUpdatedOn(x, y)",
                "LiveIn(x, y, z)",
                "LiveWith(x, y)",
                "Roommate(x)",
                "Own(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        },
        {
            "id": 458,
            "story_id": 160,
            "context": [
                "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
                "Many apartment rents cover the cost of water and electricity.",
                "Susan lives in an apartment where the rent covers all utilities.",
                "The rent of the apartment where Ava lives does not cover any utility expenses.",
                "Noah lives in an apartment where the rent does not cover heating."
            ],
            "context_fol": [
                "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)",
                "\u2203x (Apartment(x) \u2227 Cover(x, water) \u2227 Cover(x, electricity))",
                "\u2200x (Apartment(x) \u2227 LiveIn(susan, x) \u2227 Cover(x, water) \u2227 Cover(x, electricity) \u2227 Cover(x, gas) \u2227 Cover(x, heating))",
                "\u2200x (Apartment(x) \u2227 LiveIn(ava, x) \u2227 \u00acCover(x, water) \u2227 \u00acCover(x, electricity) \u2227 \u00acCover(x, gas) \u2227 \u00acCover(x, heating))",
                "\u2200x (Apartment(x) \u2227 LiveIn(noah, x) \u2227 \u00acCover(x, heating))"
            ],
            "question": "Noah needs to pay the water bill.",
            "question_fol": "\u2200x (Apartment(x) \u2227 LiveIn(noah, x) \u2227 \u00acCover(x, water))",
            "label": "Uncertain",
            "predicates_fol": [
                "CommonUtilities(x)",
                "Apartment(x)",
                "Cover(x, y)",
                "LiveIn(x, y)"
            ]
        }
    ],
    "478": [
        {
            "id": 982,
            "story_id": 369,
            "context": [
                "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
                "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
                "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
                "Everybody in Emma's family live with at least one roommate, does not own any pets.",
                "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
                "Emily is in Emma's family.",
                "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (InEmmasFamily(x) \u2227 UpgradeToEveryYear(x, newestIphoneModel) \u2192 \u00acSavingMoneyForOn(x, downPayment, newHouse))",
                "\u2200x (InEmmasFamily(x) \u2227 EnjoyReading(x, techSpec) \u2227 KeepUpdatedOn(x, latestTechnology) \u2192 UpgradeToEveryYear(x, newestIphoneModel))",
                "\u2200x (InEmmasFamily(x) \u2227 (SavingMoneyForOn(x, downPayment, newHouse) \u2228 LiveIn(x, apartment, bigMetropolitanCity)))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))) \u2192 \u00ac(\u2203y (Own(x, y) \u2227 Pet(y))))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (Own(x, y) \u2227 Pet(y))) \u2192 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))))",
                "InEmmasFamily(emily)",
                "((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2192 ((\u2203y (Own(emily, y) \u2227 Pet(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2295 \u00ac((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2228 LiveIn(emily, apartment, bigMetropolitanCity))"
            ],
            "question": "Emily is in Emma's family and she lives with at least one roommate.",
            "question_fol": "\u2203y (LiveWith(emily, y) \u2227 Roommate(y))",
            "label": "Uncertain",
            "predicates_fol": [
                "InEmmasFamily(x)",
                "UpgradeToEveryYear(x, y)",
                "SavingMoneyForOn(x, y)",
                "EnjoyReading(x, y)",
                "KeepUpdatedOn(x, y)",
                "LiveIn(x, y, z)",
                "LiveWith(x, y)",
                "Roommate(x)",
                "Own(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        },
        {
            "id": 458,
            "story_id": 160,
            "context": [
                "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
                "Many apartment rents cover the cost of water and electricity.",
                "Susan lives in an apartment where the rent covers all utilities.",
                "The rent of the apartment where Ava lives does not cover any utility expenses.",
                "Noah lives in an apartment where the rent does not cover heating."
            ],
            "context_fol": [
                "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)",
                "\u2203x (Apartment(x) \u2227 Cover(x, water) \u2227 Cover(x, electricity))",
                "\u2200x (Apartment(x) \u2227 LiveIn(susan, x) \u2227 Cover(x, water) \u2227 Cover(x, electricity) \u2227 Cover(x, gas) \u2227 Cover(x, heating))",
                "\u2200x (Apartment(x) \u2227 LiveIn(ava, x) \u2227 \u00acCover(x, water) \u2227 \u00acCover(x, electricity) \u2227 \u00acCover(x, gas) \u2227 \u00acCover(x, heating))",
                "\u2200x (Apartment(x) \u2227 LiveIn(noah, x) \u2227 \u00acCover(x, heating))"
            ],
            "question": "Noah needs to pay the water bill.",
            "question_fol": "\u2200x (Apartment(x) \u2227 LiveIn(noah, x) \u2227 \u00acCover(x, water))",
            "label": "Uncertain",
            "predicates_fol": [
                "CommonUtilities(x)",
                "Apartment(x)",
                "Cover(x, y)",
                "LiveIn(x, y)"
            ]
        }
    ],
    "933": [
        {
            "id": 367,
            "story_id": 123,
            "context": [
                "Businesses are either sanctioned or unsanctioned.",
                "Sanctioned businesses are limited.",
                "Unsanctioned businesses are free.",
                "The Crude Oil Data Exchange is a business that isn't free."
            ],
            "context_fol": [
                "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))",
                "\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))",
                "\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))",
                "Buisness(crudeOilDataExchange) \u2227 \u00acFree(crudeOilDataExchange)"
            ],
            "question": "Crude Oil Data Exchange is sanctioned.",
            "question_fol": "Sanctioned(crudeOilDataExchange)",
            "label": "True",
            "predicates_fol": [
                "Buisness(x)",
                "Sanctioned(x)",
                "Limited(x)",
                "Free(x)"
            ]
        },
        {
            "id": 1197,
            "story_id": 423,
            "context": [
                "Everyone at the business conference is either an investor or an entrepreneur.",
                "None of those at the business conference who enjoy the opportunity of starting a business prefer a planned economy. ",
                "All entrepreneurs at the business conference enjoy the opportunity of starting a business. ",
                "Everyone at the business conference who enjoys state ownership of means of production prefers a planned economy. ",
                "Everyone at the business conference who is an ardent communist prefers state ownership of the means of production.",
                "Ho is at the business conference and prefers state ownership of the means of production. "
            ],
            "context_fol": [
                "\u2200x (At(x, businessConference) \u2192 (Investor(x) \u2295 Entrepreneur(x)))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, opportunityOfStartingOwnBusiness)) \u2192 \u00acPrefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 Entrepreneur(x)) \u2192 Enjoy(x, opportunityOfStartingOwnBusiness))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, stateOwnershipOfMeansOfProduction)) \u2192 Prefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 ArdentCommunist(x)) \u2192 Prefer(x, stateOwnershipOfMeansOfProduction))",
                "At(ho, businessConference) \u2227 Prefer(ho, stateOwnershipOfMeansOfProduction)"
            ],
            "question": "Ho is not an ardent communist.",
            "question_fol": "\u00acArdentCommunist(ho)",
            "label": "Uncertain",
            "predicates_fol": [
                "At(x, y)",
                "Investor(x)",
                "Entrepreneur(x)",
                "Enjoy(x, y)",
                "Prefer(x, y)",
                "ArdentCommunist(x)"
            ]
        },
        {
            "id": 840,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerback players are soccer defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "question_fol": "NBAPlayer(stephenCurry)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalSoccerPlayer(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "934": [
        {
            "id": 367,
            "story_id": 123,
            "context": [
                "Businesses are either sanctioned or unsanctioned.",
                "Sanctioned businesses are limited.",
                "Unsanctioned businesses are free.",
                "The Crude Oil Data Exchange is a business that isn't free."
            ],
            "context_fol": [
                "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))",
                "\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))",
                "\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))",
                "Buisness(crudeOilDataExchange) \u2227 \u00acFree(crudeOilDataExchange)"
            ],
            "question": "Crude Oil Data Exchange is sanctioned.",
            "question_fol": "Sanctioned(crudeOilDataExchange)",
            "label": "True",
            "predicates_fol": [
                "Buisness(x)",
                "Sanctioned(x)",
                "Limited(x)",
                "Free(x)"
            ]
        },
        {
            "id": 1197,
            "story_id": 423,
            "context": [
                "Everyone at the business conference is either an investor or an entrepreneur.",
                "None of those at the business conference who enjoy the opportunity of starting a business prefer a planned economy. ",
                "All entrepreneurs at the business conference enjoy the opportunity of starting a business. ",
                "Everyone at the business conference who enjoys state ownership of means of production prefers a planned economy. ",
                "Everyone at the business conference who is an ardent communist prefers state ownership of the means of production.",
                "Ho is at the business conference and prefers state ownership of the means of production. "
            ],
            "context_fol": [
                "\u2200x (At(x, businessConference) \u2192 (Investor(x) \u2295 Entrepreneur(x)))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, opportunityOfStartingOwnBusiness)) \u2192 \u00acPrefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 Entrepreneur(x)) \u2192 Enjoy(x, opportunityOfStartingOwnBusiness))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, stateOwnershipOfMeansOfProduction)) \u2192 Prefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 ArdentCommunist(x)) \u2192 Prefer(x, stateOwnershipOfMeansOfProduction))",
                "At(ho, businessConference) \u2227 Prefer(ho, stateOwnershipOfMeansOfProduction)"
            ],
            "question": "Ho is not an ardent communist.",
            "question_fol": "\u00acArdentCommunist(ho)",
            "label": "Uncertain",
            "predicates_fol": [
                "At(x, y)",
                "Investor(x)",
                "Entrepreneur(x)",
                "Enjoy(x, y)",
                "Prefer(x, y)",
                "ArdentCommunist(x)"
            ]
        },
        {
            "id": 840,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerback players are soccer defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "question_fol": "NBAPlayer(stephenCurry)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalSoccerPlayer(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "935": [
        {
            "id": 367,
            "story_id": 123,
            "context": [
                "Businesses are either sanctioned or unsanctioned.",
                "Sanctioned businesses are limited.",
                "Unsanctioned businesses are free.",
                "The Crude Oil Data Exchange is a business that isn't free."
            ],
            "context_fol": [
                "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))",
                "\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))",
                "\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))",
                "Buisness(crudeOilDataExchange) \u2227 \u00acFree(crudeOilDataExchange)"
            ],
            "question": "Crude Oil Data Exchange is sanctioned.",
            "question_fol": "Sanctioned(crudeOilDataExchange)",
            "label": "True",
            "predicates_fol": [
                "Buisness(x)",
                "Sanctioned(x)",
                "Limited(x)",
                "Free(x)"
            ]
        },
        {
            "id": 1197,
            "story_id": 423,
            "context": [
                "Everyone at the business conference is either an investor or an entrepreneur.",
                "None of those at the business conference who enjoy the opportunity of starting a business prefer a planned economy. ",
                "All entrepreneurs at the business conference enjoy the opportunity of starting a business. ",
                "Everyone at the business conference who enjoys state ownership of means of production prefers a planned economy. ",
                "Everyone at the business conference who is an ardent communist prefers state ownership of the means of production.",
                "Ho is at the business conference and prefers state ownership of the means of production. "
            ],
            "context_fol": [
                "\u2200x (At(x, businessConference) \u2192 (Investor(x) \u2295 Entrepreneur(x)))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, opportunityOfStartingOwnBusiness)) \u2192 \u00acPrefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 Entrepreneur(x)) \u2192 Enjoy(x, opportunityOfStartingOwnBusiness))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, stateOwnershipOfMeansOfProduction)) \u2192 Prefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 ArdentCommunist(x)) \u2192 Prefer(x, stateOwnershipOfMeansOfProduction))",
                "At(ho, businessConference) \u2227 Prefer(ho, stateOwnershipOfMeansOfProduction)"
            ],
            "question": "Ho is not an ardent communist.",
            "question_fol": "\u00acArdentCommunist(ho)",
            "label": "Uncertain",
            "predicates_fol": [
                "At(x, y)",
                "Investor(x)",
                "Entrepreneur(x)",
                "Enjoy(x, y)",
                "Prefer(x, y)",
                "ArdentCommunist(x)"
            ]
        },
        {
            "id": 840,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerback players are soccer defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "question_fol": "NBAPlayer(stephenCurry)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalSoccerPlayer(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "1366": [
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 1277,
            "story_id": 444,
            "context": [
                "All birds have wings.",
                "Animals with wings aren't reptiles.",
                "Some animals that fly are birds.",
                "If something is an iguana, then it is a reptile. Simeng: All iguanas are reptiles. ",
                "John is either both an iguana and a bird, or he is neither. ",
                "John is an animal. "
            ],
            "context_fol": [
                "\u2200x (Bird(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
                "\u2200x (Animal(x) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z))) \u2192 \u00acReptile(x))",
                "\u2203x (Animal(x) \u2227 Fly(x) \u2227 Bird(x))",
                "\u2200x (Iguana(x) \u2192 Reptile(x))",
                "\u00ac(Iguana(john) \u2295 Bird(john))",
                "Animal(john)"
            ],
            "question": "John is a reptile.",
            "question_fol": "Reptile(john)",
            "label": "Uncertain",
            "predicates_fol": [
                "Bird(x)",
                "Wing(x)",
                "Have(x, y)",
                "Animal(x)",
                "Reptile(x)",
                "Fly(x)",
                "Iguana(x)"
            ]
        },
        {
            "id": 782,
            "story_id": 314,
            "context": [
                "No animals are plants.",
                "All humans are animals.",
                "All pupils are humans.",
                "All flowers are plants.",
                "Bailey is either both a human and a flower or neither a human nor a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u00ac(Human(bailey) \u2295 Flower(bailey))"
            ],
            "question": "Bailey is a pupil.",
            "question_fol": "Pupil(bailey)",
            "label": "False",
            "predicates_fol": [
                "Animal(x)",
                "Plant(x)",
                "Human(x)",
                "Pupil(x)",
                "Flower(x)"
            ]
        }
    ],
    "1367": [
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 1277,
            "story_id": 444,
            "context": [
                "All birds have wings.",
                "Animals with wings aren't reptiles.",
                "Some animals that fly are birds.",
                "If something is an iguana, then it is a reptile. Simeng: All iguanas are reptiles. ",
                "John is either both an iguana and a bird, or he is neither. ",
                "John is an animal. "
            ],
            "context_fol": [
                "\u2200x (Bird(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
                "\u2200x (Animal(x) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z))) \u2192 \u00acReptile(x))",
                "\u2203x (Animal(x) \u2227 Fly(x) \u2227 Bird(x))",
                "\u2200x (Iguana(x) \u2192 Reptile(x))",
                "\u00ac(Iguana(john) \u2295 Bird(john))",
                "Animal(john)"
            ],
            "question": "John is a reptile.",
            "question_fol": "Reptile(john)",
            "label": "Uncertain",
            "predicates_fol": [
                "Bird(x)",
                "Wing(x)",
                "Have(x, y)",
                "Animal(x)",
                "Reptile(x)",
                "Fly(x)",
                "Iguana(x)"
            ]
        },
        {
            "id": 782,
            "story_id": 314,
            "context": [
                "No animals are plants.",
                "All humans are animals.",
                "All pupils are humans.",
                "All flowers are plants.",
                "Bailey is either both a human and a flower or neither a human nor a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u00ac(Human(bailey) \u2295 Flower(bailey))"
            ],
            "question": "Bailey is a pupil.",
            "question_fol": "Pupil(bailey)",
            "label": "False",
            "predicates_fol": [
                "Animal(x)",
                "Plant(x)",
                "Human(x)",
                "Pupil(x)",
                "Flower(x)"
            ]
        }
    ],
    "1368": [
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 1277,
            "story_id": 444,
            "context": [
                "All birds have wings.",
                "Animals with wings aren't reptiles.",
                "Some animals that fly are birds.",
                "If something is an iguana, then it is a reptile. Simeng: All iguanas are reptiles. ",
                "John is either both an iguana and a bird, or he is neither. ",
                "John is an animal. "
            ],
            "context_fol": [
                "\u2200x (Bird(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
                "\u2200x (Animal(x) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z))) \u2192 \u00acReptile(x))",
                "\u2203x (Animal(x) \u2227 Fly(x) \u2227 Bird(x))",
                "\u2200x (Iguana(x) \u2192 Reptile(x))",
                "\u00ac(Iguana(john) \u2295 Bird(john))",
                "Animal(john)"
            ],
            "question": "John is a reptile.",
            "question_fol": "Reptile(john)",
            "label": "Uncertain",
            "predicates_fol": [
                "Bird(x)",
                "Wing(x)",
                "Have(x, y)",
                "Animal(x)",
                "Reptile(x)",
                "Fly(x)",
                "Iguana(x)"
            ]
        },
        {
            "id": 782,
            "story_id": 314,
            "context": [
                "No animals are plants.",
                "All humans are animals.",
                "All pupils are humans.",
                "All flowers are plants.",
                "Bailey is either both a human and a flower or neither a human nor a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u00ac(Human(bailey) \u2295 Flower(bailey))"
            ],
            "question": "Bailey is a pupil.",
            "question_fol": "Pupil(bailey)",
            "label": "False",
            "predicates_fol": [
                "Animal(x)",
                "Plant(x)",
                "Human(x)",
                "Pupil(x)",
                "Flower(x)"
            ]
        }
    ],
    "1011": [
        {
            "id": 982,
            "story_id": 369,
            "context": [
                "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
                "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
                "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
                "Everybody in Emma's family live with at least one roommate, does not own any pets.",
                "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
                "Emily is in Emma's family.",
                "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (InEmmasFamily(x) \u2227 UpgradeToEveryYear(x, newestIphoneModel) \u2192 \u00acSavingMoneyForOn(x, downPayment, newHouse))",
                "\u2200x (InEmmasFamily(x) \u2227 EnjoyReading(x, techSpec) \u2227 KeepUpdatedOn(x, latestTechnology) \u2192 UpgradeToEveryYear(x, newestIphoneModel))",
                "\u2200x (InEmmasFamily(x) \u2227 (SavingMoneyForOn(x, downPayment, newHouse) \u2228 LiveIn(x, apartment, bigMetropolitanCity)))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))) \u2192 \u00ac(\u2203y (Own(x, y) \u2227 Pet(y))))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (Own(x, y) \u2227 Pet(y))) \u2192 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))))",
                "InEmmasFamily(emily)",
                "((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2192 ((\u2203y (Own(emily, y) \u2227 Pet(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2295 \u00ac((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2228 LiveIn(emily, apartment, bigMetropolitanCity))"
            ],
            "question": "Emily is in Emma's family and she lives with at least one roommate.",
            "question_fol": "\u2203y (LiveWith(emily, y) \u2227 Roommate(y))",
            "label": "Uncertain",
            "predicates_fol": [
                "InEmmasFamily(x)",
                "UpgradeToEveryYear(x, y)",
                "SavingMoneyForOn(x, y)",
                "EnjoyReading(x, y)",
                "KeepUpdatedOn(x, y)",
                "LiveIn(x, y, z)",
                "LiveWith(x, y)",
                "Roommate(x)",
                "Own(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 910,
            "story_id": 345,
            "context": [
                "All kids are young.",
                "All toddlers are kids.",
                "If someone is young, then they are not elderly.",
                "All pirates are seafarers.",
                "If Nancy is not a pirate, then Nancy is young.",
                "If Nancy is not a toddler, then Nancy is a seafarer."
            ],
            "context_fol": [
                "\u2200x (Kid(x) \u2192 Young(x))",
                "\u2200x (Toddler(x) \u2192 Kid(x))",
                "\u2200x (Young(x) \u2192 \u00acElderly(x))",
                "\u2200x (Pirate(x) \u2192 Seafarer(x))",
                "\u00acPirate(nancy) \u2192 Young(nancy)",
                "\u00acToddler(nancy) \u2192 Seafarer(nancy)"
            ],
            "question": "Nancy is a pirate.",
            "question_fol": "Pirate(nancy)",
            "label": "Uncertain",
            "predicates_fol": [
                "Kid(x)",
                "Young(x)",
                "Toddler(x)",
                "Elderly(x)",
                "Pirate(x)",
                "Seafarer(x)"
            ]
        }
    ],
    "1012": [
        {
            "id": 982,
            "story_id": 369,
            "context": [
                "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
                "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
                "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
                "Everybody in Emma's family live with at least one roommate, does not own any pets.",
                "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
                "Emily is in Emma's family.",
                "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (InEmmasFamily(x) \u2227 UpgradeToEveryYear(x, newestIphoneModel) \u2192 \u00acSavingMoneyForOn(x, downPayment, newHouse))",
                "\u2200x (InEmmasFamily(x) \u2227 EnjoyReading(x, techSpec) \u2227 KeepUpdatedOn(x, latestTechnology) \u2192 UpgradeToEveryYear(x, newestIphoneModel))",
                "\u2200x (InEmmasFamily(x) \u2227 (SavingMoneyForOn(x, downPayment, newHouse) \u2228 LiveIn(x, apartment, bigMetropolitanCity)))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))) \u2192 \u00ac(\u2203y (Own(x, y) \u2227 Pet(y))))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (Own(x, y) \u2227 Pet(y))) \u2192 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))))",
                "InEmmasFamily(emily)",
                "((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2192 ((\u2203y (Own(emily, y) \u2227 Pet(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2295 \u00ac((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2228 LiveIn(emily, apartment, bigMetropolitanCity))"
            ],
            "question": "Emily is in Emma's family and she lives with at least one roommate.",
            "question_fol": "\u2203y (LiveWith(emily, y) \u2227 Roommate(y))",
            "label": "Uncertain",
            "predicates_fol": [
                "InEmmasFamily(x)",
                "UpgradeToEveryYear(x, y)",
                "SavingMoneyForOn(x, y)",
                "EnjoyReading(x, y)",
                "KeepUpdatedOn(x, y)",
                "LiveIn(x, y, z)",
                "LiveWith(x, y)",
                "Roommate(x)",
                "Own(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 910,
            "story_id": 345,
            "context": [
                "All kids are young.",
                "All toddlers are kids.",
                "If someone is young, then they are not elderly.",
                "All pirates are seafarers.",
                "If Nancy is not a pirate, then Nancy is young.",
                "If Nancy is not a toddler, then Nancy is a seafarer."
            ],
            "context_fol": [
                "\u2200x (Kid(x) \u2192 Young(x))",
                "\u2200x (Toddler(x) \u2192 Kid(x))",
                "\u2200x (Young(x) \u2192 \u00acElderly(x))",
                "\u2200x (Pirate(x) \u2192 Seafarer(x))",
                "\u00acPirate(nancy) \u2192 Young(nancy)",
                "\u00acToddler(nancy) \u2192 Seafarer(nancy)"
            ],
            "question": "Nancy is a pirate.",
            "question_fol": "Pirate(nancy)",
            "label": "Uncertain",
            "predicates_fol": [
                "Kid(x)",
                "Young(x)",
                "Toddler(x)",
                "Elderly(x)",
                "Pirate(x)",
                "Seafarer(x)"
            ]
        }
    ],
    "1013": [
        {
            "id": 982,
            "story_id": 369,
            "context": [
                "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
                "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
                "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
                "Everybody in Emma's family live with at least one roommate, does not own any pets.",
                "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
                "Emily is in Emma's family.",
                "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (InEmmasFamily(x) \u2227 UpgradeToEveryYear(x, newestIphoneModel) \u2192 \u00acSavingMoneyForOn(x, downPayment, newHouse))",
                "\u2200x (InEmmasFamily(x) \u2227 EnjoyReading(x, techSpec) \u2227 KeepUpdatedOn(x, latestTechnology) \u2192 UpgradeToEveryYear(x, newestIphoneModel))",
                "\u2200x (InEmmasFamily(x) \u2227 (SavingMoneyForOn(x, downPayment, newHouse) \u2228 LiveIn(x, apartment, bigMetropolitanCity)))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))) \u2192 \u00ac(\u2203y (Own(x, y) \u2227 Pet(y))))",
                "\u2200x (InEmmasFamily(x) \u2227 (\u2203y (Own(x, y) \u2227 Pet(y))) \u2192 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))))",
                "InEmmasFamily(emily)",
                "((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2192 ((\u2203y (Own(emily, y) \u2227 Pet(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2295 \u00ac((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2228 LiveIn(emily, apartment, bigMetropolitanCity))"
            ],
            "question": "Emily is in Emma's family and she lives with at least one roommate.",
            "question_fol": "\u2203y (LiveWith(emily, y) \u2227 Roommate(y))",
            "label": "Uncertain",
            "predicates_fol": [
                "InEmmasFamily(x)",
                "UpgradeToEveryYear(x, y)",
                "SavingMoneyForOn(x, y)",
                "EnjoyReading(x, y)",
                "KeepUpdatedOn(x, y)",
                "LiveIn(x, y, z)",
                "LiveWith(x, y)",
                "Roommate(x)",
                "Own(x, y)",
                "Pet(x)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 910,
            "story_id": 345,
            "context": [
                "All kids are young.",
                "All toddlers are kids.",
                "If someone is young, then they are not elderly.",
                "All pirates are seafarers.",
                "If Nancy is not a pirate, then Nancy is young.",
                "If Nancy is not a toddler, then Nancy is a seafarer."
            ],
            "context_fol": [
                "\u2200x (Kid(x) \u2192 Young(x))",
                "\u2200x (Toddler(x) \u2192 Kid(x))",
                "\u2200x (Young(x) \u2192 \u00acElderly(x))",
                "\u2200x (Pirate(x) \u2192 Seafarer(x))",
                "\u00acPirate(nancy) \u2192 Young(nancy)",
                "\u00acToddler(nancy) \u2192 Seafarer(nancy)"
            ],
            "question": "Nancy is a pirate.",
            "question_fol": "Pirate(nancy)",
            "label": "Uncertain",
            "predicates_fol": [
                "Kid(x)",
                "Young(x)",
                "Toddler(x)",
                "Elderly(x)",
                "Pirate(x)",
                "Seafarer(x)"
            ]
        }
    ],
    "560": [
        {
            "id": 557,
            "story_id": 196,
            "context": [
                "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
                "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
                "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
                "ETS also develops K-12 statewide assessments used for accountability testing in many states."
            ],
            "context_fol": [
                "\u2203x \u2203y (Develop(eTS, x) \u2227 Develop(eTS, y) \u2227 StandardizedTest(x) \u2227 StandardizedTest(y) \u2227 In(x, unitedState) \u2227 In(y, unitedState) \u2227 For(x, k12AndHigherEducation) \u2227 For(y, k12AndHigherEducation))",
                "\u2203x (Administer(eTS, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTest(x)))",
                "\u2203x (Develop(eTS, x) \u2227 AssociatedWith(x, entryToUSEducationInstitution))",
                "\u2203x (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilityTesting))"
            ],
            "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
            "question_fol": "\u2203x \u2203y (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 Develop(eTS, y) \u2227 AssociatedWith(y, entryToUSEducationInstitution))",
            "label": "True",
            "predicates_fol": [
                "Develop(x, y)",
                "StandardizedTest(x)",
                "In(x, y)",
                "For(x, y)",
                "Administer(x, y)",
                "InternationalTest(x)",
                "TOEFL(x)",
                "TOEIC(x)",
                "GRE(x)",
                "SubjectTest(x)",
                "AssociatedWith(x, y)",
                "StateWideAssesment(x)",
                "UsedFor(x, y)"
            ]
        },
        {
            "id": 776,
            "story_id": 312,
            "context": [
                "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
                "Those who are enrolled in an academic program can not work full-time.",
                "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
                "All PhD graduate can work full-time. ",
                "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
            ],
            "context_fol": [
                "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))",
                "\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))",
                "\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))",
                "\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))",
                "\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)"
            ],
            "question": "Tom is a PhD graduate.",
            "question_fol": "PhdGraduate(tom)",
            "label": "False",
            "predicates_fol": [
                "Have(x, y)",
                "EnrolledIn(x, y)",
                "Work(x, y)",
                "StudyIn(x, y)",
                "PhDGraduate(x)"
            ]
        },
        {
            "id": 555,
            "story_id": 195,
            "context": [
                "The SAT test is wholly owned and developed by the College Board.",
                "The SAT test is intended to assess students' readiness for college.",
                "The SAT was originally designed not to be aligned with high school curricula. ",
                "Several adjustments were made to the version of the SAT introduced in 2016 to align with the high school curriculum."
            ],
            "context_fol": [
                "OwnedBy(sAT, collegeBoard) \u2227 DevelopedBy(sAT, collegeBoard) \u2227 \u00ac(\u2203y (\u00ac(y=collegeBoard) \u2227 (OwnedBy(sAT, y) \u2228 DevelopedBy(sAT, y)))",
                "IntendedToAssess(sAT, studentsReadinessForCollege)",
                "OriginallyDesignedToBeAlignedWith(sAT, highSchoolCurricula)",
                "AdjustmentMadeIn(sAT, 2016, toAlignWithHighSchoolCurriculum)"
            ],
            "question": "The SAT test is owned by the College Board and other third parties.",
            "question_fol": "OwnedBy(sAT, collegeBoard) \u2227 OwnedBy(sAT, otherThirdParties)",
            "label": "False",
            "predicates_fol": [
                "OwnedBy(x, y)",
                "DevelopedBy(x, y)",
                "IntendedToAssess(x, y)",
                "OriginallyDesignedToBeAlignedWith(x, y)",
                "AdjustmentMadeIn(x, y)"
            ]
        }
    ],
    "561": [
        {
            "id": 557,
            "story_id": 196,
            "context": [
                "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
                "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
                "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
                "ETS also develops K-12 statewide assessments used for accountability testing in many states."
            ],
            "context_fol": [
                "\u2203x \u2203y (Develop(eTS, x) \u2227 Develop(eTS, y) \u2227 StandardizedTest(x) \u2227 StandardizedTest(y) \u2227 In(x, unitedState) \u2227 In(y, unitedState) \u2227 For(x, k12AndHigherEducation) \u2227 For(y, k12AndHigherEducation))",
                "\u2203x (Administer(eTS, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTest(x)))",
                "\u2203x (Develop(eTS, x) \u2227 AssociatedWith(x, entryToUSEducationInstitution))",
                "\u2203x (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilityTesting))"
            ],
            "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
            "question_fol": "\u2203x \u2203y (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 Develop(eTS, y) \u2227 AssociatedWith(y, entryToUSEducationInstitution))",
            "label": "True",
            "predicates_fol": [
                "Develop(x, y)",
                "StandardizedTest(x)",
                "In(x, y)",
                "For(x, y)",
                "Administer(x, y)",
                "InternationalTest(x)",
                "TOEFL(x)",
                "TOEIC(x)",
                "GRE(x)",
                "SubjectTest(x)",
                "AssociatedWith(x, y)",
                "StateWideAssesment(x)",
                "UsedFor(x, y)"
            ]
        },
        {
            "id": 776,
            "story_id": 312,
            "context": [
                "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
                "Those who are enrolled in an academic program can not work full-time.",
                "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
                "All PhD graduate can work full-time. ",
                "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
            ],
            "context_fol": [
                "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))",
                "\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))",
                "\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))",
                "\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))",
                "\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)"
            ],
            "question": "Tom is a PhD graduate.",
            "question_fol": "PhdGraduate(tom)",
            "label": "False",
            "predicates_fol": [
                "Have(x, y)",
                "EnrolledIn(x, y)",
                "Work(x, y)",
                "StudyIn(x, y)",
                "PhDGraduate(x)"
            ]
        },
        {
            "id": 555,
            "story_id": 195,
            "context": [
                "The SAT test is wholly owned and developed by the College Board.",
                "The SAT test is intended to assess students' readiness for college.",
                "The SAT was originally designed not to be aligned with high school curricula. ",
                "Several adjustments were made to the version of the SAT introduced in 2016 to align with the high school curriculum."
            ],
            "context_fol": [
                "OwnedBy(sAT, collegeBoard) \u2227 DevelopedBy(sAT, collegeBoard) \u2227 \u00ac(\u2203y (\u00ac(y=collegeBoard) \u2227 (OwnedBy(sAT, y) \u2228 DevelopedBy(sAT, y)))",
                "IntendedToAssess(sAT, studentsReadinessForCollege)",
                "OriginallyDesignedToBeAlignedWith(sAT, highSchoolCurricula)",
                "AdjustmentMadeIn(sAT, 2016, toAlignWithHighSchoolCurriculum)"
            ],
            "question": "The SAT test is owned by the College Board and other third parties.",
            "question_fol": "OwnedBy(sAT, collegeBoard) \u2227 OwnedBy(sAT, otherThirdParties)",
            "label": "False",
            "predicates_fol": [
                "OwnedBy(x, y)",
                "DevelopedBy(x, y)",
                "IntendedToAssess(x, y)",
                "OriginallyDesignedToBeAlignedWith(x, y)",
                "AdjustmentMadeIn(x, y)"
            ]
        }
    ],
    "562": [
        {
            "id": 557,
            "story_id": 196,
            "context": [
                "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
                "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
                "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
                "ETS also develops K-12 statewide assessments used for accountability testing in many states."
            ],
            "context_fol": [
                "\u2203x \u2203y (Develop(eTS, x) \u2227 Develop(eTS, y) \u2227 StandardizedTest(x) \u2227 StandardizedTest(y) \u2227 In(x, unitedState) \u2227 In(y, unitedState) \u2227 For(x, k12AndHigherEducation) \u2227 For(y, k12AndHigherEducation))",
                "\u2203x (Administer(eTS, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTest(x)))",
                "\u2203x (Develop(eTS, x) \u2227 AssociatedWith(x, entryToUSEducationInstitution))",
                "\u2203x (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilityTesting))"
            ],
            "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
            "question_fol": "\u2203x \u2203y (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 Develop(eTS, y) \u2227 AssociatedWith(y, entryToUSEducationInstitution))",
            "label": "True",
            "predicates_fol": [
                "Develop(x, y)",
                "StandardizedTest(x)",
                "In(x, y)",
                "For(x, y)",
                "Administer(x, y)",
                "InternationalTest(x)",
                "TOEFL(x)",
                "TOEIC(x)",
                "GRE(x)",
                "SubjectTest(x)",
                "AssociatedWith(x, y)",
                "StateWideAssesment(x)",
                "UsedFor(x, y)"
            ]
        },
        {
            "id": 776,
            "story_id": 312,
            "context": [
                "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
                "Those who are enrolled in an academic program can not work full-time.",
                "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
                "All PhD graduate can work full-time. ",
                "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
            ],
            "context_fol": [
                "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))",
                "\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))",
                "\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))",
                "\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))",
                "\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)"
            ],
            "question": "Tom is a PhD graduate.",
            "question_fol": "PhdGraduate(tom)",
            "label": "False",
            "predicates_fol": [
                "Have(x, y)",
                "EnrolledIn(x, y)",
                "Work(x, y)",
                "StudyIn(x, y)",
                "PhDGraduate(x)"
            ]
        },
        {
            "id": 555,
            "story_id": 195,
            "context": [
                "The SAT test is wholly owned and developed by the College Board.",
                "The SAT test is intended to assess students' readiness for college.",
                "The SAT was originally designed not to be aligned with high school curricula. ",
                "Several adjustments were made to the version of the SAT introduced in 2016 to align with the high school curriculum."
            ],
            "context_fol": [
                "OwnedBy(sAT, collegeBoard) \u2227 DevelopedBy(sAT, collegeBoard) \u2227 \u00ac(\u2203y (\u00ac(y=collegeBoard) \u2227 (OwnedBy(sAT, y) \u2228 DevelopedBy(sAT, y)))",
                "IntendedToAssess(sAT, studentsReadinessForCollege)",
                "OriginallyDesignedToBeAlignedWith(sAT, highSchoolCurricula)",
                "AdjustmentMadeIn(sAT, 2016, toAlignWithHighSchoolCurriculum)"
            ],
            "question": "The SAT test is owned by the College Board and other third parties.",
            "question_fol": "OwnedBy(sAT, collegeBoard) \u2227 OwnedBy(sAT, otherThirdParties)",
            "label": "False",
            "predicates_fol": [
                "OwnedBy(x, y)",
                "DevelopedBy(x, y)",
                "IntendedToAssess(x, y)",
                "OriginallyDesignedToBeAlignedWith(x, y)",
                "AdjustmentMadeIn(x, y)"
            ]
        }
    ],
    "958": [
        {
            "id": 858,
            "story_id": 332,
            "context": [
                "If people don't often clean their homes, then they do not have tidy houses.",
                "If people don't prioritize cleaning, then they do not often clean their homes.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people don't care about cleanliness, then they do not prioritize cleaning.",
                "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
            ],
            "context_fol": [
                "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))",
                "\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))",
                "\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))",
                "\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))",
                "\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))"
            ],
            "question": "Jack doesn't care about cleanliness.",
            "question_fol": "\u00ac(CareAbout(jack, cleanliness))",
            "label": "False",
            "predicates_fol": [
                "CleanOften(x, y)",
                "Have(x, y)",
                "Prioritize(x, y)",
                "Hire(x, y)",
                "CareAbout(x, y)"
            ]
        },
        {
            "id": 973,
            "story_id": 366,
            "context": [
                "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
                "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
                "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Damon is in Franny's family. ",
                "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
            ],
            "context_fol": [
                "\u2200x (In(x, frannysFamily) \u2227 (Drink(x, kombucha) \u2228 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y))))))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))))",
                "\u2200x (In(x, frannysFamily)) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 HaveToVisitFrequently(x, dentist))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))) \u2192 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y)))",
                "\u2200x (In(x, frannysFamily) \u2227 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y))) \u2192 \u00ac(ConsistentEverydayRoutine(x) \u2227 StickTo(damon, solidSchedule)))",
                "In(damon, frannysFamily)",
                "\u00ac((\u2203y \u2203z(\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(damon, y) \u2227 GrowUpWith(damon, z))) \u2295 (ConsistentEverydayRoutine(damon) \u2227 StickTo(damon, solidSchedule)))"
            ],
            "question": "Damon is in Franny's family and he has to visit the dentist frequently.",
            "question_fol": "HaveToVisitFrequently(damon, dentist)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "Drink(x, y)",
                "PepsiProduct(x)",
                "BusyParent(x)",
                "Pack(x, y)",
                "GrowUpWith(x, y)",
                "HaveToVisitFrequently(x, y)",
                "Have(x, y)",
                "Erratic(x)",
                "Diverse(x)",
                "EatingHabit(x)",
                "ConsistentEverydayRoutine(x)",
                "StickTo(x, y)"
            ]
        },
        {
            "id": 741,
            "story_id": 297,
            "context": [
                "If a person is hungry, the person is uncomfortable.",
                "If a person is uncomfortable, the person is unhappy."
            ],
            "context_fol": [
                "\u2200x (Hungry(x) \u2192 Uncomfortable(x))",
                "\u2200x (Uncomfortable(x) \u2192 \u00acHappy(x))"
            ],
            "question": "If a person is not hungry, the person is unhappy.",
            "question_fol": "\u2200x (\u00acHungry(x) \u2192 \u00acHappy(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Hungry(x)",
                "Uncomfortable(x)",
                "Happy(x)"
            ]
        }
    ],
    "959": [
        {
            "id": 858,
            "story_id": 332,
            "context": [
                "If people don't often clean their homes, then they do not have tidy houses.",
                "If people don't prioritize cleaning, then they do not often clean their homes.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people don't care about cleanliness, then they do not prioritize cleaning.",
                "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
            ],
            "context_fol": [
                "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))",
                "\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))",
                "\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))",
                "\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))",
                "\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))"
            ],
            "question": "Jack doesn't care about cleanliness.",
            "question_fol": "\u00ac(CareAbout(jack, cleanliness))",
            "label": "False",
            "predicates_fol": [
                "CleanOften(x, y)",
                "Have(x, y)",
                "Prioritize(x, y)",
                "Hire(x, y)",
                "CareAbout(x, y)"
            ]
        },
        {
            "id": 973,
            "story_id": 366,
            "context": [
                "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
                "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
                "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Damon is in Franny's family. ",
                "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
            ],
            "context_fol": [
                "\u2200x (In(x, frannysFamily) \u2227 (Drink(x, kombucha) \u2228 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y))))))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))))",
                "\u2200x (In(x, frannysFamily)) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 HaveToVisitFrequently(x, dentist))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))) \u2192 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y)))",
                "\u2200x (In(x, frannysFamily) \u2227 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y))) \u2192 \u00ac(ConsistentEverydayRoutine(x) \u2227 StickTo(damon, solidSchedule)))",
                "In(damon, frannysFamily)",
                "\u00ac((\u2203y \u2203z(\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(damon, y) \u2227 GrowUpWith(damon, z))) \u2295 (ConsistentEverydayRoutine(damon) \u2227 StickTo(damon, solidSchedule)))"
            ],
            "question": "Damon is in Franny's family and he has to visit the dentist frequently.",
            "question_fol": "HaveToVisitFrequently(damon, dentist)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "Drink(x, y)",
                "PepsiProduct(x)",
                "BusyParent(x)",
                "Pack(x, y)",
                "GrowUpWith(x, y)",
                "HaveToVisitFrequently(x, y)",
                "Have(x, y)",
                "Erratic(x)",
                "Diverse(x)",
                "EatingHabit(x)",
                "ConsistentEverydayRoutine(x)",
                "StickTo(x, y)"
            ]
        },
        {
            "id": 741,
            "story_id": 297,
            "context": [
                "If a person is hungry, the person is uncomfortable.",
                "If a person is uncomfortable, the person is unhappy."
            ],
            "context_fol": [
                "\u2200x (Hungry(x) \u2192 Uncomfortable(x))",
                "\u2200x (Uncomfortable(x) \u2192 \u00acHappy(x))"
            ],
            "question": "If a person is not hungry, the person is unhappy.",
            "question_fol": "\u2200x (\u00acHungry(x) \u2192 \u00acHappy(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Hungry(x)",
                "Uncomfortable(x)",
                "Happy(x)"
            ]
        }
    ],
    "960": [
        {
            "id": 858,
            "story_id": 332,
            "context": [
                "If people don't often clean their homes, then they do not have tidy houses.",
                "If people don't prioritize cleaning, then they do not often clean their homes.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people don't care about cleanliness, then they do not prioritize cleaning.",
                "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
            ],
            "context_fol": [
                "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))",
                "\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))",
                "\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))",
                "\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))",
                "\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))"
            ],
            "question": "Jack doesn't care about cleanliness.",
            "question_fol": "\u00ac(CareAbout(jack, cleanliness))",
            "label": "False",
            "predicates_fol": [
                "CleanOften(x, y)",
                "Have(x, y)",
                "Prioritize(x, y)",
                "Hire(x, y)",
                "CareAbout(x, y)"
            ]
        },
        {
            "id": 973,
            "story_id": 366,
            "context": [
                "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
                "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
                "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Damon is in Franny's family. ",
                "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
            ],
            "context_fol": [
                "\u2200x (In(x, frannysFamily) \u2227 (Drink(x, kombucha) \u2228 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y))))))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))))",
                "\u2200x (In(x, frannysFamily)) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 HaveToVisitFrequently(x, dentist))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))) \u2192 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y)))",
                "\u2200x (In(x, frannysFamily) \u2227 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y))) \u2192 \u00ac(ConsistentEverydayRoutine(x) \u2227 StickTo(damon, solidSchedule)))",
                "In(damon, frannysFamily)",
                "\u00ac((\u2203y \u2203z(\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(damon, y) \u2227 GrowUpWith(damon, z))) \u2295 (ConsistentEverydayRoutine(damon) \u2227 StickTo(damon, solidSchedule)))"
            ],
            "question": "Damon is in Franny's family and he has to visit the dentist frequently.",
            "question_fol": "HaveToVisitFrequently(damon, dentist)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "Drink(x, y)",
                "PepsiProduct(x)",
                "BusyParent(x)",
                "Pack(x, y)",
                "GrowUpWith(x, y)",
                "HaveToVisitFrequently(x, y)",
                "Have(x, y)",
                "Erratic(x)",
                "Diverse(x)",
                "EatingHabit(x)",
                "ConsistentEverydayRoutine(x)",
                "StickTo(x, y)"
            ]
        },
        {
            "id": 741,
            "story_id": 297,
            "context": [
                "If a person is hungry, the person is uncomfortable.",
                "If a person is uncomfortable, the person is unhappy."
            ],
            "context_fol": [
                "\u2200x (Hungry(x) \u2192 Uncomfortable(x))",
                "\u2200x (Uncomfortable(x) \u2192 \u00acHappy(x))"
            ],
            "question": "If a person is not hungry, the person is unhappy.",
            "question_fol": "\u2200x (\u00acHungry(x) \u2192 \u00acHappy(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Hungry(x)",
                "Uncomfortable(x)",
                "Happy(x)"
            ]
        }
    ],
    "706": [
        {
            "id": 731,
            "story_id": 287,
            "context": [
                "Trees are plants. ",
                "Some living things are trees."
            ],
            "context_fol": [
                "\u2200x (Tree(x) \u2192 Plant(x))",
                "\u2203x \u2203y (Living(x) \u2227 Living(y) \u2227 Tree(x) \u2227 Tree(y) \u2227 \u00ac(x=y))"
            ],
            "question": "Some living things are plants.",
            "question_fol": "\u2203x \u2203y (Living(x) \u2227 Living(y) \u2227 Plant(x) \u2227 Plant(y) \u2227 \u00ac(x=y))",
            "label": "True",
            "predicates_fol": [
                "Tree(x)",
                "Plant(x)",
                "Living(x)"
            ]
        },
        {
            "id": 782,
            "story_id": 314,
            "context": [
                "No animals are plants.",
                "All humans are animals.",
                "All pupils are humans.",
                "All flowers are plants.",
                "Bailey is either both a human and a flower or neither a human nor a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u00ac(Human(bailey) \u2295 Flower(bailey))"
            ],
            "question": "Bailey is a pupil.",
            "question_fol": "Pupil(bailey)",
            "label": "False",
            "predicates_fol": [
                "Animal(x)",
                "Plant(x)",
                "Human(x)",
                "Pupil(x)",
                "Flower(x)"
            ]
        },
        {
            "id": 41,
            "story_id": 15,
            "context": [
                "Elephantopus is a genus of perennial plants in the daisy family.",
                "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.",
                "Several species of Elephantopus are native to the southeastern United States.",
                "Elephantopus scaber is a traditional medicine."
            ],
            "context_fol": [
                "\u2200x (Elephantopus(x) \u2192 (Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily)))",
                "\u2203x \u2203y \u2203z(Elephantopus(x) \u2227 In(x,africa) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 In(y, southernasia) \u2227 (\u00ac(x=z)) \u2227 (\u00ac(y=z)) \u2227 Elephantopus(z) \u2227 In(z, australia))",
                "\u2203x \u2203y (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 NativeTo(y, southeasternunitedstates))",
                "\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))"
            ],
            "question": "Elephantopus is found in Australia and Southern Asia.",
            "question_fol": "\u2203x\u2203y(Elephantopus(x) \u2227 In(x,africa) \u2227 Elephantopus(y) \u2227 In(y,africa))",
            "label": "True",
            "predicates_fol": [
                "Elephantopus(x)",
                "Genus(x, y)",
                "BelongTo(x, y)",
                "In(x, y)",
                "NativeTo(x, y)",
                "ElephantopusScaber(x)",
                "TraditionalMedicine(x)"
            ]
        }
    ],
    "370": [
        {
            "id": 594,
            "story_id": 208,
            "context": [
                "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
                "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
                "NY, PA, OH, and MI are states in the US.",
                "ON is a state of Canada.",
                "There is a major settlement of Lake Huron in ON. ",
                "All states are in their country.",
                "The US is in North America.",
                "The Great Lakes began to form at the end of the Last Glacial Period."
            ],
            "context_fol": [
                "\u2200x (GreatLake(x) \u2192 Superior(x) \u2295 Michigan(x) \u2295 Huron(x) \u2295 Erie(x) \u2295 Ontario(x))",
                "\u2200x (Erie (x) \u2227 MajorSettlement(x) \u2192 In(x, nY) \u2228 In(x, pA) \u2228 In(x, oH) \u2228 In(x, mI))",
                "StateOf(nY, uS) \u2227 StateOf(pA, uS) \u2227 StateOf(oH, uS) \u2227 StateOf(mI, uS)",
                "StateOf(oN, canada)",
                "\u2203x (Huron(x) \u2227 MajorSettlement(x) \u2227 In(x, oN))",
                "\u2200x \u2200y (StateOf(x, y) \u2192 In(x, y))",
                "In(us, northAmerica)",
                "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastGlacialPeriod))"
            ],
            "question": "Lake Erie has a major settlement.",
            "question_fol": "\u2203x \u2203y (Erie(y) \u2227 MajorSettlementOf(x, y))",
            "label": "True",
            "predicates_fol": [
                "GreatLake(x)",
                "Superior(x)",
                "Michigan(x)",
                "Huron(x)",
                "Erie(x)",
                "Ontario(x)",
                "MajorSettlement(x)",
                "In(x, y)",
                "StateOf(x, y)",
                "FormAtEndOf(x, y)"
            ]
        },
        {
            "id": 110,
            "story_id": 38,
            "context": [
                "The Metropolitan Museum of Art is a museum in NYC.",
                "Whitney Museum of American Art is a museum in NYC.",
                "The Museum of Modern Art (MoMA) is a museum in NYC. ",
                "The Metropolitan Museum of Art includes Byzantine and Islamic Art. ",
                "Whitney Museum of American Art includes American art."
            ],
            "context_fol": [
                "Museum(metropolitanMuseumOfArt) \u2227 In(metropolitanMuseumOfArt, nYC)",
                "Museum(whitneyMuseumOfAmericanArt) \u2227 In(metropolitanMuseumOfArt, nYC)",
                "Museum(museumOfModernArt) \u2227 In(museumOfModernArt, nYC)",
                "Include(metropolitanMuseumOfArt, byzantineArt) \u2227 Include(metropolitanMuseumOfArt, islamicArt)",
                "Include(whitneyMuseumOfAmericanArt, americanArt)"
            ],
            "question": "A museum in NYC includes Byzantine and Islamic Art.",
            "question_fol": "\u2203x (Museum(x) \u2227 In(x, nYC) \u2227 Include(x, byzantineArt) \u2227 Include(x, islamicArt))",
            "label": "True",
            "predicates_fol": [
                "Museum(x)",
                "In(x, y)",
                "Include(x, y)"
            ]
        },
        {
            "id": 552,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "Carmen and Jose are Rosa's parents.",
                "People from Catalan are not from Chile.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "BornIn(rosa, santiago)",
                "CapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)",
                "DaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)",
                "WifeOf(jose, carmen) \u2227 Chilean(carmen)",
                "ParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)",
                "\u2200x (Catalan(x) \u2192 \u00acChilean(x))",
                "\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "question_fol": "\u2203x (BornIn(rosa, x) \u2227 LargestCityOf(x, chile))",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "CapitalOf(x, y)",
                "LargestCityOf(x, y)",
                "DaughterOf(x, y)",
                "BuildingContractor(x)",
                "Catalan(x)",
                "WifeOf(x, y)",
                "Chilean(x)",
                "ParentOf(x, y)",
                "ConstructionSite(x)",
                "Oversee(x, y)"
            ]
        }
    ],
    "371": [
        {
            "id": 594,
            "story_id": 208,
            "context": [
                "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
                "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
                "NY, PA, OH, and MI are states in the US.",
                "ON is a state of Canada.",
                "There is a major settlement of Lake Huron in ON. ",
                "All states are in their country.",
                "The US is in North America.",
                "The Great Lakes began to form at the end of the Last Glacial Period."
            ],
            "context_fol": [
                "\u2200x (GreatLake(x) \u2192 Superior(x) \u2295 Michigan(x) \u2295 Huron(x) \u2295 Erie(x) \u2295 Ontario(x))",
                "\u2200x (Erie (x) \u2227 MajorSettlement(x) \u2192 In(x, nY) \u2228 In(x, pA) \u2228 In(x, oH) \u2228 In(x, mI))",
                "StateOf(nY, uS) \u2227 StateOf(pA, uS) \u2227 StateOf(oH, uS) \u2227 StateOf(mI, uS)",
                "StateOf(oN, canada)",
                "\u2203x (Huron(x) \u2227 MajorSettlement(x) \u2227 In(x, oN))",
                "\u2200x \u2200y (StateOf(x, y) \u2192 In(x, y))",
                "In(us, northAmerica)",
                "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastGlacialPeriod))"
            ],
            "question": "Lake Erie has a major settlement.",
            "question_fol": "\u2203x \u2203y (Erie(y) \u2227 MajorSettlementOf(x, y))",
            "label": "True",
            "predicates_fol": [
                "GreatLake(x)",
                "Superior(x)",
                "Michigan(x)",
                "Huron(x)",
                "Erie(x)",
                "Ontario(x)",
                "MajorSettlement(x)",
                "In(x, y)",
                "StateOf(x, y)",
                "FormAtEndOf(x, y)"
            ]
        },
        {
            "id": 110,
            "story_id": 38,
            "context": [
                "The Metropolitan Museum of Art is a museum in NYC.",
                "Whitney Museum of American Art is a museum in NYC.",
                "The Museum of Modern Art (MoMA) is a museum in NYC. ",
                "The Metropolitan Museum of Art includes Byzantine and Islamic Art. ",
                "Whitney Museum of American Art includes American art."
            ],
            "context_fol": [
                "Museum(metropolitanMuseumOfArt) \u2227 In(metropolitanMuseumOfArt, nYC)",
                "Museum(whitneyMuseumOfAmericanArt) \u2227 In(metropolitanMuseumOfArt, nYC)",
                "Museum(museumOfModernArt) \u2227 In(museumOfModernArt, nYC)",
                "Include(metropolitanMuseumOfArt, byzantineArt) \u2227 Include(metropolitanMuseumOfArt, islamicArt)",
                "Include(whitneyMuseumOfAmericanArt, americanArt)"
            ],
            "question": "A museum in NYC includes Byzantine and Islamic Art.",
            "question_fol": "\u2203x (Museum(x) \u2227 In(x, nYC) \u2227 Include(x, byzantineArt) \u2227 Include(x, islamicArt))",
            "label": "True",
            "predicates_fol": [
                "Museum(x)",
                "In(x, y)",
                "Include(x, y)"
            ]
        },
        {
            "id": 552,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "Carmen and Jose are Rosa's parents.",
                "People from Catalan are not from Chile.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "BornIn(rosa, santiago)",
                "CapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)",
                "DaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)",
                "WifeOf(jose, carmen) \u2227 Chilean(carmen)",
                "ParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)",
                "\u2200x (Catalan(x) \u2192 \u00acChilean(x))",
                "\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "question_fol": "\u2203x (BornIn(rosa, x) \u2227 LargestCityOf(x, chile))",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "CapitalOf(x, y)",
                "LargestCityOf(x, y)",
                "DaughterOf(x, y)",
                "BuildingContractor(x)",
                "Catalan(x)",
                "WifeOf(x, y)",
                "Chilean(x)",
                "ParentOf(x, y)",
                "ConstructionSite(x)",
                "Oversee(x, y)"
            ]
        }
    ],
    "372": [
        {
            "id": 594,
            "story_id": 208,
            "context": [
                "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
                "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
                "NY, PA, OH, and MI are states in the US.",
                "ON is a state of Canada.",
                "There is a major settlement of Lake Huron in ON. ",
                "All states are in their country.",
                "The US is in North America.",
                "The Great Lakes began to form at the end of the Last Glacial Period."
            ],
            "context_fol": [
                "\u2200x (GreatLake(x) \u2192 Superior(x) \u2295 Michigan(x) \u2295 Huron(x) \u2295 Erie(x) \u2295 Ontario(x))",
                "\u2200x (Erie (x) \u2227 MajorSettlement(x) \u2192 In(x, nY) \u2228 In(x, pA) \u2228 In(x, oH) \u2228 In(x, mI))",
                "StateOf(nY, uS) \u2227 StateOf(pA, uS) \u2227 StateOf(oH, uS) \u2227 StateOf(mI, uS)",
                "StateOf(oN, canada)",
                "\u2203x (Huron(x) \u2227 MajorSettlement(x) \u2227 In(x, oN))",
                "\u2200x \u2200y (StateOf(x, y) \u2192 In(x, y))",
                "In(us, northAmerica)",
                "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastGlacialPeriod))"
            ],
            "question": "Lake Erie has a major settlement.",
            "question_fol": "\u2203x \u2203y (Erie(y) \u2227 MajorSettlementOf(x, y))",
            "label": "True",
            "predicates_fol": [
                "GreatLake(x)",
                "Superior(x)",
                "Michigan(x)",
                "Huron(x)",
                "Erie(x)",
                "Ontario(x)",
                "MajorSettlement(x)",
                "In(x, y)",
                "StateOf(x, y)",
                "FormAtEndOf(x, y)"
            ]
        },
        {
            "id": 110,
            "story_id": 38,
            "context": [
                "The Metropolitan Museum of Art is a museum in NYC.",
                "Whitney Museum of American Art is a museum in NYC.",
                "The Museum of Modern Art (MoMA) is a museum in NYC. ",
                "The Metropolitan Museum of Art includes Byzantine and Islamic Art. ",
                "Whitney Museum of American Art includes American art."
            ],
            "context_fol": [
                "Museum(metropolitanMuseumOfArt) \u2227 In(metropolitanMuseumOfArt, nYC)",
                "Museum(whitneyMuseumOfAmericanArt) \u2227 In(metropolitanMuseumOfArt, nYC)",
                "Museum(museumOfModernArt) \u2227 In(museumOfModernArt, nYC)",
                "Include(metropolitanMuseumOfArt, byzantineArt) \u2227 Include(metropolitanMuseumOfArt, islamicArt)",
                "Include(whitneyMuseumOfAmericanArt, americanArt)"
            ],
            "question": "A museum in NYC includes Byzantine and Islamic Art.",
            "question_fol": "\u2203x (Museum(x) \u2227 In(x, nYC) \u2227 Include(x, byzantineArt) \u2227 Include(x, islamicArt))",
            "label": "True",
            "predicates_fol": [
                "Museum(x)",
                "In(x, y)",
                "Include(x, y)"
            ]
        },
        {
            "id": 552,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "Carmen and Jose are Rosa's parents.",
                "People from Catalan are not from Chile.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "BornIn(rosa, santiago)",
                "CapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)",
                "DaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)",
                "WifeOf(jose, carmen) \u2227 Chilean(carmen)",
                "ParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)",
                "\u2200x (Catalan(x) \u2192 \u00acChilean(x))",
                "\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "question_fol": "\u2203x (BornIn(rosa, x) \u2227 LargestCityOf(x, chile))",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "CapitalOf(x, y)",
                "LargestCityOf(x, y)",
                "DaughterOf(x, y)",
                "BuildingContractor(x)",
                "Catalan(x)",
                "WifeOf(x, y)",
                "Chilean(x)",
                "ParentOf(x, y)",
                "ConstructionSite(x)",
                "Oversee(x, y)"
            ]
        }
    ],
    "527": [
        {
            "id": 728,
            "story_id": 284,
            "context": [
                "Each building is tall. ",
                "Everything tall has height."
            ],
            "context_fol": [
                "\u2200x (Building(x) \u2192 Tall(x))",
                "\u2200x (Tall(x) \u2192 Height(x))"
            ],
            "question": "All buildings are magnificent.",
            "question_fol": "\u2200x (Building(x) \u2192 Magnificent(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Building(x)",
                "Tall(x)",
                "Height(x)"
            ]
        },
        {
            "id": 448,
            "story_id": 155,
            "context": [
                "No man can run faster than Bolt. ",
                "Superman is not a man."
            ],
            "context_fol": [
                "\u2200x (Man(x) \u2192 \u00acRunFasterThan(xm bolt))",
                "\u00acMan(superman)"
            ],
            "question": "Superman can run faster than Bolt.",
            "question_fol": "RunFasterThan(superman, bolt)",
            "label": "Uncertain",
            "predicates_fol": [
                "Man(x)",
                "RunFasterThan(x)"
            ]
        },
        {
            "id": 1133,
            "story_id": 408,
            "context": [
                "No trick-shot artist in Yale's varsity team struggles with half court shots.",
                "Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  ",
                "Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  ",
                "No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  ",
                "Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."
            ],
            "context_fol": [
                "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))",
                "\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))",
                "\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))",
                "\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))",
                "In(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))"
            ],
            "question": "Jack struggles at half court shots.",
            "question_fol": "StruggleAt(jack, halfCourtShot)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "TrickShotArtist(x)",
                "StruggleAt(x, y)",
                "GoodAt(x, y)",
                "BadAt(x, y)"
            ]
        }
    ],
    "528": [
        {
            "id": 728,
            "story_id": 284,
            "context": [
                "Each building is tall. ",
                "Everything tall has height."
            ],
            "context_fol": [
                "\u2200x (Building(x) \u2192 Tall(x))",
                "\u2200x (Tall(x) \u2192 Height(x))"
            ],
            "question": "All buildings are magnificent.",
            "question_fol": "\u2200x (Building(x) \u2192 Magnificent(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Building(x)",
                "Tall(x)",
                "Height(x)"
            ]
        },
        {
            "id": 448,
            "story_id": 155,
            "context": [
                "No man can run faster than Bolt. ",
                "Superman is not a man."
            ],
            "context_fol": [
                "\u2200x (Man(x) \u2192 \u00acRunFasterThan(xm bolt))",
                "\u00acMan(superman)"
            ],
            "question": "Superman can run faster than Bolt.",
            "question_fol": "RunFasterThan(superman, bolt)",
            "label": "Uncertain",
            "predicates_fol": [
                "Man(x)",
                "RunFasterThan(x)"
            ]
        },
        {
            "id": 1133,
            "story_id": 408,
            "context": [
                "No trick-shot artist in Yale's varsity team struggles with half court shots.",
                "Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  ",
                "Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  ",
                "No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  ",
                "Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."
            ],
            "context_fol": [
                "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))",
                "\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))",
                "\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))",
                "\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))",
                "In(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))"
            ],
            "question": "Jack struggles at half court shots.",
            "question_fol": "StruggleAt(jack, halfCourtShot)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "TrickShotArtist(x)",
                "StruggleAt(x, y)",
                "GoodAt(x, y)",
                "BadAt(x, y)"
            ]
        }
    ],
    "529": [
        {
            "id": 728,
            "story_id": 284,
            "context": [
                "Each building is tall. ",
                "Everything tall has height."
            ],
            "context_fol": [
                "\u2200x (Building(x) \u2192 Tall(x))",
                "\u2200x (Tall(x) \u2192 Height(x))"
            ],
            "question": "All buildings are magnificent.",
            "question_fol": "\u2200x (Building(x) \u2192 Magnificent(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Building(x)",
                "Tall(x)",
                "Height(x)"
            ]
        },
        {
            "id": 448,
            "story_id": 155,
            "context": [
                "No man can run faster than Bolt. ",
                "Superman is not a man."
            ],
            "context_fol": [
                "\u2200x (Man(x) \u2192 \u00acRunFasterThan(xm bolt))",
                "\u00acMan(superman)"
            ],
            "question": "Superman can run faster than Bolt.",
            "question_fol": "RunFasterThan(superman, bolt)",
            "label": "Uncertain",
            "predicates_fol": [
                "Man(x)",
                "RunFasterThan(x)"
            ]
        },
        {
            "id": 1133,
            "story_id": 408,
            "context": [
                "No trick-shot artist in Yale's varsity team struggles with half court shots.",
                "Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  ",
                "Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  ",
                "No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  ",
                "Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."
            ],
            "context_fol": [
                "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))",
                "\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))",
                "\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))",
                "\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))",
                "In(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))"
            ],
            "question": "Jack struggles at half court shots.",
            "question_fol": "StruggleAt(jack, halfCourtShot)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "TrickShotArtist(x)",
                "StruggleAt(x, y)",
                "GoodAt(x, y)",
                "BadAt(x, y)"
            ]
        }
    ],
    "439": [
        {
            "id": 285,
            "story_id": 94,
            "context": [
                "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
                "Hambleton District is in North Yorkshire.",
                "North Yorkshire is in England.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "Village(ainderbyQuernhow) \u2227 CivilParish(ainderbyQuernhow) \u2227 In(ainderbyQuernhow, hambletonDistrict)",
                "In(hambletonDistrict, northYorkshire)",
                "In(northYorkshire, england)",
                "\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))"
            ],
            "question": "There is a village in England.",
            "question_fol": "\u2203x (Village(x) \u2227 In(x, england))",
            "label": "True",
            "predicates_fol": [
                "Village(x)",
                "CivilParish(x)",
                "In(x, y)"
            ]
        },
        {
            "id": 376,
            "story_id": 127,
            "context": [
                "New York City is Located in the United States of America.",
                "The United States of America is part of North America.",
                "North America is in the western hemisphere of the earth.",
                "New York City is a highly developed city.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "LocatedIn(newYorkCity, unitedStatesOfAmerica)",
                "LocatedIn(usa, northAmerica)",
                "LocatedIn(northAmerica, westernHemisphere)",
                "HighlyDeveloped(newYorkCity)",
                "\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))"
            ],
            "question": "A highly developed city is located in the western hemisphere of the earth.",
            "question_fol": "\u2203x (HighlyDeveloped(x) \u2227 LocatedIn(x, westernHemisphere))",
            "label": "True",
            "predicates_fol": [
                "LocatedIn(x, y)",
                "HighlyDeveloped(x)"
            ]
        },
        {
            "id": 14,
            "story_id": 6,
            "context": [
                "Boves is a railway station located in France. ",
                "The preceding station of Boves is Longueau.",
                "The preceding station of Dommartin is Boves.",
                "France is a European country.",
                "Dommartin is situated on the Paris\u2013Lille railway. ",
                "Any two contiguous stations are on the same railway.",
                "Boves is served by regional TER Hauts-de-France trains.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C.",
                "If place A precedes place B and place B precedes place C, then place A precedes place C."
            ],
            "context_fol": [
                "RailwayStation(boves) \u2227 In(boves, france)",
                "Precede(longueau, boves)",
                "Precede(boves, dommartin)",
                "In(france, europe)",
                "SituatedOn(dommartin, pairsLille)",
                "\u2200x \u2200y \u2200z ((SituatedOn(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x)) \u2192 SituatedOn(y, z))",
                "Serve(boves, hautsDeFrance)",
                "\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))",
                "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))"
            ],
            "question": "Longueau is situated on the Paris\u2013Lille railway.",
            "question_fol": "SituatedOn(longueau, pairsLille)",
            "label": "True",
            "predicates_fol": [
                "RailwayStation(x)",
                "In(x, y)",
                "Precede(x, y)",
                "SituatedOn(x, y)",
                "Serve(x, y)"
            ]
        }
    ],
    "440": [
        {
            "id": 285,
            "story_id": 94,
            "context": [
                "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
                "Hambleton District is in North Yorkshire.",
                "North Yorkshire is in England.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "Village(ainderbyQuernhow) \u2227 CivilParish(ainderbyQuernhow) \u2227 In(ainderbyQuernhow, hambletonDistrict)",
                "In(hambletonDistrict, northYorkshire)",
                "In(northYorkshire, england)",
                "\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))"
            ],
            "question": "There is a village in England.",
            "question_fol": "\u2203x (Village(x) \u2227 In(x, england))",
            "label": "True",
            "predicates_fol": [
                "Village(x)",
                "CivilParish(x)",
                "In(x, y)"
            ]
        },
        {
            "id": 376,
            "story_id": 127,
            "context": [
                "New York City is Located in the United States of America.",
                "The United States of America is part of North America.",
                "North America is in the western hemisphere of the earth.",
                "New York City is a highly developed city.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "LocatedIn(newYorkCity, unitedStatesOfAmerica)",
                "LocatedIn(usa, northAmerica)",
                "LocatedIn(northAmerica, westernHemisphere)",
                "HighlyDeveloped(newYorkCity)",
                "\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))"
            ],
            "question": "A highly developed city is located in the western hemisphere of the earth.",
            "question_fol": "\u2203x (HighlyDeveloped(x) \u2227 LocatedIn(x, westernHemisphere))",
            "label": "True",
            "predicates_fol": [
                "LocatedIn(x, y)",
                "HighlyDeveloped(x)"
            ]
        },
        {
            "id": 14,
            "story_id": 6,
            "context": [
                "Boves is a railway station located in France. ",
                "The preceding station of Boves is Longueau.",
                "The preceding station of Dommartin is Boves.",
                "France is a European country.",
                "Dommartin is situated on the Paris\u2013Lille railway. ",
                "Any two contiguous stations are on the same railway.",
                "Boves is served by regional TER Hauts-de-France trains.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C.",
                "If place A precedes place B and place B precedes place C, then place A precedes place C."
            ],
            "context_fol": [
                "RailwayStation(boves) \u2227 In(boves, france)",
                "Precede(longueau, boves)",
                "Precede(boves, dommartin)",
                "In(france, europe)",
                "SituatedOn(dommartin, pairsLille)",
                "\u2200x \u2200y \u2200z ((SituatedOn(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x)) \u2192 SituatedOn(y, z))",
                "Serve(boves, hautsDeFrance)",
                "\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))",
                "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))"
            ],
            "question": "Longueau is situated on the Paris\u2013Lille railway.",
            "question_fol": "SituatedOn(longueau, pairsLille)",
            "label": "True",
            "predicates_fol": [
                "RailwayStation(x)",
                "In(x, y)",
                "Precede(x, y)",
                "SituatedOn(x, y)",
                "Serve(x, y)"
            ]
        }
    ],
    "441": [
        {
            "id": 285,
            "story_id": 94,
            "context": [
                "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
                "Hambleton District is in North Yorkshire.",
                "North Yorkshire is in England.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "Village(ainderbyQuernhow) \u2227 CivilParish(ainderbyQuernhow) \u2227 In(ainderbyQuernhow, hambletonDistrict)",
                "In(hambletonDistrict, northYorkshire)",
                "In(northYorkshire, england)",
                "\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))"
            ],
            "question": "There is a village in England.",
            "question_fol": "\u2203x (Village(x) \u2227 In(x, england))",
            "label": "True",
            "predicates_fol": [
                "Village(x)",
                "CivilParish(x)",
                "In(x, y)"
            ]
        },
        {
            "id": 376,
            "story_id": 127,
            "context": [
                "New York City is Located in the United States of America.",
                "The United States of America is part of North America.",
                "North America is in the western hemisphere of the earth.",
                "New York City is a highly developed city.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "LocatedIn(newYorkCity, unitedStatesOfAmerica)",
                "LocatedIn(usa, northAmerica)",
                "LocatedIn(northAmerica, westernHemisphere)",
                "HighlyDeveloped(newYorkCity)",
                "\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))"
            ],
            "question": "A highly developed city is located in the western hemisphere of the earth.",
            "question_fol": "\u2203x (HighlyDeveloped(x) \u2227 LocatedIn(x, westernHemisphere))",
            "label": "True",
            "predicates_fol": [
                "LocatedIn(x, y)",
                "HighlyDeveloped(x)"
            ]
        },
        {
            "id": 14,
            "story_id": 6,
            "context": [
                "Boves is a railway station located in France. ",
                "The preceding station of Boves is Longueau.",
                "The preceding station of Dommartin is Boves.",
                "France is a European country.",
                "Dommartin is situated on the Paris\u2013Lille railway. ",
                "Any two contiguous stations are on the same railway.",
                "Boves is served by regional TER Hauts-de-France trains.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C.",
                "If place A precedes place B and place B precedes place C, then place A precedes place C."
            ],
            "context_fol": [
                "RailwayStation(boves) \u2227 In(boves, france)",
                "Precede(longueau, boves)",
                "Precede(boves, dommartin)",
                "In(france, europe)",
                "SituatedOn(dommartin, pairsLille)",
                "\u2200x \u2200y \u2200z ((SituatedOn(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x)) \u2192 SituatedOn(y, z))",
                "Serve(boves, hautsDeFrance)",
                "\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))",
                "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))"
            ],
            "question": "Longueau is situated on the Paris\u2013Lille railway.",
            "question_fol": "SituatedOn(longueau, pairsLille)",
            "label": "True",
            "predicates_fol": [
                "RailwayStation(x)",
                "In(x, y)",
                "Precede(x, y)",
                "SituatedOn(x, y)",
                "Serve(x, y)"
            ]
        }
    ],
    "739": [
        {
            "id": 1090,
            "story_id": 399,
            "context": [
                "In Love City, everyone considers physical touch or words of affirmation to be their most important love language.",
                "If someone in Love City considers physical touch as their most important love language, then they are good with pets.",
                "If someone in Love City is good with pets, then they are not scared of animals.",
                "In Love City, everyone is scared of animals, or loves animals, or both.",
                "Adam, who is in Love City, either values physical touch as his most important love language or loves animals."
            ],
            "context_fol": [
                "\u2200x (In(x, loveCity) \u2192 (ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2228 ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))",
                "\u2200x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2227 In(x, loveCity) \u2192 GoodWith(x, pet))",
                "\u2200x ((GoodWith(x, pet) \u2227 In(x, loveCity)) \u2192 \u00acScaredOf(x, animal))",
                "\u2200x (In(x, loveCity) \u2192 (ScaredOf(x, animal) \u2228 Loves(x, animal)))",
                "(ConsidersMostImportantLoveLanguage(adam, physicalTouch) \u2295 Loves(adam, animal)) \u2227 In(adam, loveCity)"
            ],
            "question": "Adam is scared of animals.",
            "question_fol": "ScaredOf(adam, animal)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "ConsidersMostImportantLoveLanguage(x, y)",
                "GoodWith(x, y)",
                "ScaredOf(x, y)",
                "Loves(x, y)"
            ]
        },
        {
            "id": 745,
            "story_id": 301,
            "context": [
                "When something is depressing, it is sad.",
                "The end of a relationship is depressing. "
            ],
            "context_fol": [
                "\u2200x (Depressing(x) \u2192 Sad(x))",
                "Depressing(v)"
            ],
            "question": "The end of a relationship is invigorating",
            "question_fol": "Invigorating(v)",
            "label": "Uncertain",
            "predicates_fol": [
                "Depressing(x)",
                "Sad(x)"
            ]
        },
        {
            "id": 318,
            "story_id": 105,
            "context": [
                "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.",
                "The lead single of the extended play Inside is Show Your Love.",
                "Show Your Love contains a hopeful message.",
                "BtoB 4u member Hyunsik wrote Show Your Love.",
                "There is a music video for Show Your Love."
            ],
            "context_fol": [
                "Song(showYourLove) \u2227 RecordedBy(showYourLove, bToB4u) \u2227 SouthKorean(bToB4u) \u2227 BoyBand(bToB4u)",
                "ExtendedPlay(inside) \u2227 LeadSingleOf(showYourLove, inside)",
                "Contains(showYourLove, hopefulMessage)",
                "Member(hyunsik, btob4u) \u2227 Wrote(hyunsik, showYourLove)",
                "Have(showYourLove, musicVideo)"
            ],
            "question": "Show Your Love wasn't written by a member of a boy band.",
            "question_fol": "\u2200x \u2200y (Wrote(x, showYourLove) \u2192 \u00ac(BoyBand(y) \u2227 MemberOf(x, y)))",
            "label": "False",
            "predicates_fol": [
                "Song(x)",
                "RecordedBy(x, y)",
                "SouthKorean(x)",
                "BoyBand(x)",
                "ExtendedPlay(x)",
                "LeadSingleOf(x, y)",
                "Contains(x, y)",
                "Member(x, y)",
                "Wrote(x, y)",
                "Have(x, y)"
            ]
        }
    ],
    "786": [
        {
            "id": 1202,
            "story_id": 425,
            "context": [
                "Everyone working at Meta has a high income. ",
                "A person with a high income will not take a bus to their destination.",
                "People will either take a bus or drive to their destination. ",
                "Everyone who has a car will choose to drive to their destination. ",
                "No students drive to their destination. ",
                "James has a car or works at Meta."
            ],
            "context_fol": [
                "\u2200x (WorkAt(x, meta) \u2192 HighIncome(x))",
                "\u2200x (HighIncome(x) \u2192 \u00acMeansToDestination(x, bus))",
                "\u2200x (MeansToDestination(x, bus) \u2295 MeansToDestination(x, drive))",
                "\u2200x (HaveCar(x) \u2192 MeansToDestination(x, drive))",
                "\u2200x (Student(x) \u2192 \u00ac MeansToDestination(x, drive))",
                "HaveCar(james) \u2228 WorkAt(james, meta)"
            ],
            "question": "James has a high income.",
            "question_fol": "HighIncome(james)",
            "label": "Uncertain",
            "predicates_fol": [
                "WorkAt(x, y)",
                "HighIncome(x)",
                "MeansToDestination(x, y)",
                "HaveCar(x)",
                "Student(x)"
            ]
        },
        {
            "id": 1227,
            "story_id": 431,
            "context": [
                "No Boeing-737 plane has more than 300 seats. ",
                "All of the planes acquired by Delta in this batch are Boeing-737. ",
                "Planes either have more than 300 seats or have a capacity of 100 passengers. ",
                "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
                "All planes with a capacity of 100 passengers are produced before 2010. ",
                "Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.",
                "T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."
            ],
            "context_fol": [
                "\u2200x (Plane(x) \u2227 Boeing737(x) \u2192 (\u00ac\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y)))",
                "\u2200x (Plane(x) \u2227 AcquiredBy(x, delta) \u2192 Boeing737(x))",
                "\u2200x (Plane(x) \u2192 ((\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y))) \u2295 (\u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y))))",
                "\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 ScheduledFor(x, shortdistanceflight))",
                "\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 \u2203z(Before(z, yr2010) \u2227 Produced(x, z))",
                "(Boeing737(jake32) \u2227 Plane(jake32)) \u2295 (AcquiredByDeltaInThisBatch(jake32) \u2227 Plane(jake32))",
                "\u00ac((Boeing737(t10) \u2227 Plane(t10)) \u2295 (AcquiredByDeltaInThisBatch(t10) \u2227 Plane(t10)))"
            ],
            "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
            "question_fol": "\u2203z(Before(z, year2010) \u2227 Produced(jake32, z)) \u2227 ScheduledFor(jake32, shortdistanceflight))",
            "label": "True",
            "predicates_fol": [
                "Plane(x)",
                "GreaterThan(x, y)",
                "EquippedWithSeats(x, y)",
                "AcquiredBy(x, y)",
                "Boeing737(x)",
                "Equals(x, y)",
                "ScheduledFor(x, y)",
                "Before(x, y)",
                "Produced(x, y)",
                "AcquiredByDeltaInThisBatch(x)"
            ]
        },
        {
            "id": 687,
            "story_id": 244,
            "context": [
                "Everyone who rents a car spends money.",
                "Whenever Sarah goes to Vermont, Sarah drives there.",
                "Someone who does not own a car to drive somewhere must either borrow a car or rent a car.",
                "Sarah doesn\u2019t own a car.",
                "Sarah never borrows a car to go camping.",
                "Sarah is going to go camping in Vermont.",
                "To go camping somewhere, you must go to that place."
            ],
            "context_fol": [
                "\u2200x (Rent(x, car) \u2192 Spend(x, money))",
                "GoTo(sarah, vermont) \u2192 DriveTo(sarah, vermont)",
                "\u2200x \u2200y (\u00acOwn(x, car) \u2227 DriveTo(x, y) \u2192 Borrow(x, car) \u2295 Rent(x, car))",
                "\u00acOwn(sarah, car)",
                "\u2200x (Camping(sarah, x) \u2192 \u00ac(Borrow(sarah, car)))",
                "Camping(sarah, vermont)",
                "\u2200x \u2200y (Camping(x, y) \u2192 GoTo(x, y))"
            ],
            "question": "Sarah will spend money this weekend.",
            "question_fol": "Spend(sarah, money)",
            "label": "True",
            "predicates_fol": [
                "Rent(x, y)",
                "Spend(x, y)",
                "GoTo(x, y)",
                "DriveTo(x, y)",
                "Own(x, y)",
                "Borrow(x, y)",
                "Camping(x, y)"
            ]
        }
    ],
    "787": [
        {
            "id": 1202,
            "story_id": 425,
            "context": [
                "Everyone working at Meta has a high income. ",
                "A person with a high income will not take a bus to their destination.",
                "People will either take a bus or drive to their destination. ",
                "Everyone who has a car will choose to drive to their destination. ",
                "No students drive to their destination. ",
                "James has a car or works at Meta."
            ],
            "context_fol": [
                "\u2200x (WorkAt(x, meta) \u2192 HighIncome(x))",
                "\u2200x (HighIncome(x) \u2192 \u00acMeansToDestination(x, bus))",
                "\u2200x (MeansToDestination(x, bus) \u2295 MeansToDestination(x, drive))",
                "\u2200x (HaveCar(x) \u2192 MeansToDestination(x, drive))",
                "\u2200x (Student(x) \u2192 \u00ac MeansToDestination(x, drive))",
                "HaveCar(james) \u2228 WorkAt(james, meta)"
            ],
            "question": "James has a high income.",
            "question_fol": "HighIncome(james)",
            "label": "Uncertain",
            "predicates_fol": [
                "WorkAt(x, y)",
                "HighIncome(x)",
                "MeansToDestination(x, y)",
                "HaveCar(x)",
                "Student(x)"
            ]
        },
        {
            "id": 1227,
            "story_id": 431,
            "context": [
                "No Boeing-737 plane has more than 300 seats. ",
                "All of the planes acquired by Delta in this batch are Boeing-737. ",
                "Planes either have more than 300 seats or have a capacity of 100 passengers. ",
                "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
                "All planes with a capacity of 100 passengers are produced before 2010. ",
                "Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.",
                "T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."
            ],
            "context_fol": [
                "\u2200x (Plane(x) \u2227 Boeing737(x) \u2192 (\u00ac\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y)))",
                "\u2200x (Plane(x) \u2227 AcquiredBy(x, delta) \u2192 Boeing737(x))",
                "\u2200x (Plane(x) \u2192 ((\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y))) \u2295 (\u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y))))",
                "\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 ScheduledFor(x, shortdistanceflight))",
                "\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 \u2203z(Before(z, yr2010) \u2227 Produced(x, z))",
                "(Boeing737(jake32) \u2227 Plane(jake32)) \u2295 (AcquiredByDeltaInThisBatch(jake32) \u2227 Plane(jake32))",
                "\u00ac((Boeing737(t10) \u2227 Plane(t10)) \u2295 (AcquiredByDeltaInThisBatch(t10) \u2227 Plane(t10)))"
            ],
            "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
            "question_fol": "\u2203z(Before(z, year2010) \u2227 Produced(jake32, z)) \u2227 ScheduledFor(jake32, shortdistanceflight))",
            "label": "True",
            "predicates_fol": [
                "Plane(x)",
                "GreaterThan(x, y)",
                "EquippedWithSeats(x, y)",
                "AcquiredBy(x, y)",
                "Boeing737(x)",
                "Equals(x, y)",
                "ScheduledFor(x, y)",
                "Before(x, y)",
                "Produced(x, y)",
                "AcquiredByDeltaInThisBatch(x)"
            ]
        },
        {
            "id": 687,
            "story_id": 244,
            "context": [
                "Everyone who rents a car spends money.",
                "Whenever Sarah goes to Vermont, Sarah drives there.",
                "Someone who does not own a car to drive somewhere must either borrow a car or rent a car.",
                "Sarah doesn\u2019t own a car.",
                "Sarah never borrows a car to go camping.",
                "Sarah is going to go camping in Vermont.",
                "To go camping somewhere, you must go to that place."
            ],
            "context_fol": [
                "\u2200x (Rent(x, car) \u2192 Spend(x, money))",
                "GoTo(sarah, vermont) \u2192 DriveTo(sarah, vermont)",
                "\u2200x \u2200y (\u00acOwn(x, car) \u2227 DriveTo(x, y) \u2192 Borrow(x, car) \u2295 Rent(x, car))",
                "\u00acOwn(sarah, car)",
                "\u2200x (Camping(sarah, x) \u2192 \u00ac(Borrow(sarah, car)))",
                "Camping(sarah, vermont)",
                "\u2200x \u2200y (Camping(x, y) \u2192 GoTo(x, y))"
            ],
            "question": "Sarah will spend money this weekend.",
            "question_fol": "Spend(sarah, money)",
            "label": "True",
            "predicates_fol": [
                "Rent(x, y)",
                "Spend(x, y)",
                "GoTo(x, y)",
                "DriveTo(x, y)",
                "Own(x, y)",
                "Borrow(x, y)",
                "Camping(x, y)"
            ]
        }
    ],
    "788": [
        {
            "id": 1202,
            "story_id": 425,
            "context": [
                "Everyone working at Meta has a high income. ",
                "A person with a high income will not take a bus to their destination.",
                "People will either take a bus or drive to their destination. ",
                "Everyone who has a car will choose to drive to their destination. ",
                "No students drive to their destination. ",
                "James has a car or works at Meta."
            ],
            "context_fol": [
                "\u2200x (WorkAt(x, meta) \u2192 HighIncome(x))",
                "\u2200x (HighIncome(x) \u2192 \u00acMeansToDestination(x, bus))",
                "\u2200x (MeansToDestination(x, bus) \u2295 MeansToDestination(x, drive))",
                "\u2200x (HaveCar(x) \u2192 MeansToDestination(x, drive))",
                "\u2200x (Student(x) \u2192 \u00ac MeansToDestination(x, drive))",
                "HaveCar(james) \u2228 WorkAt(james, meta)"
            ],
            "question": "James has a high income.",
            "question_fol": "HighIncome(james)",
            "label": "Uncertain",
            "predicates_fol": [
                "WorkAt(x, y)",
                "HighIncome(x)",
                "MeansToDestination(x, y)",
                "HaveCar(x)",
                "Student(x)"
            ]
        },
        {
            "id": 1227,
            "story_id": 431,
            "context": [
                "No Boeing-737 plane has more than 300 seats. ",
                "All of the planes acquired by Delta in this batch are Boeing-737. ",
                "Planes either have more than 300 seats or have a capacity of 100 passengers. ",
                "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
                "All planes with a capacity of 100 passengers are produced before 2010. ",
                "Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.",
                "T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."
            ],
            "context_fol": [
                "\u2200x (Plane(x) \u2227 Boeing737(x) \u2192 (\u00ac\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y)))",
                "\u2200x (Plane(x) \u2227 AcquiredBy(x, delta) \u2192 Boeing737(x))",
                "\u2200x (Plane(x) \u2192 ((\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y))) \u2295 (\u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y))))",
                "\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 ScheduledFor(x, shortdistanceflight))",
                "\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 \u2203z(Before(z, yr2010) \u2227 Produced(x, z))",
                "(Boeing737(jake32) \u2227 Plane(jake32)) \u2295 (AcquiredByDeltaInThisBatch(jake32) \u2227 Plane(jake32))",
                "\u00ac((Boeing737(t10) \u2227 Plane(t10)) \u2295 (AcquiredByDeltaInThisBatch(t10) \u2227 Plane(t10)))"
            ],
            "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
            "question_fol": "\u2203z(Before(z, year2010) \u2227 Produced(jake32, z)) \u2227 ScheduledFor(jake32, shortdistanceflight))",
            "label": "True",
            "predicates_fol": [
                "Plane(x)",
                "GreaterThan(x, y)",
                "EquippedWithSeats(x, y)",
                "AcquiredBy(x, y)",
                "Boeing737(x)",
                "Equals(x, y)",
                "ScheduledFor(x, y)",
                "Before(x, y)",
                "Produced(x, y)",
                "AcquiredByDeltaInThisBatch(x)"
            ]
        },
        {
            "id": 687,
            "story_id": 244,
            "context": [
                "Everyone who rents a car spends money.",
                "Whenever Sarah goes to Vermont, Sarah drives there.",
                "Someone who does not own a car to drive somewhere must either borrow a car or rent a car.",
                "Sarah doesn\u2019t own a car.",
                "Sarah never borrows a car to go camping.",
                "Sarah is going to go camping in Vermont.",
                "To go camping somewhere, you must go to that place."
            ],
            "context_fol": [
                "\u2200x (Rent(x, car) \u2192 Spend(x, money))",
                "GoTo(sarah, vermont) \u2192 DriveTo(sarah, vermont)",
                "\u2200x \u2200y (\u00acOwn(x, car) \u2227 DriveTo(x, y) \u2192 Borrow(x, car) \u2295 Rent(x, car))",
                "\u00acOwn(sarah, car)",
                "\u2200x (Camping(sarah, x) \u2192 \u00ac(Borrow(sarah, car)))",
                "Camping(sarah, vermont)",
                "\u2200x \u2200y (Camping(x, y) \u2192 GoTo(x, y))"
            ],
            "question": "Sarah will spend money this weekend.",
            "question_fol": "Spend(sarah, money)",
            "label": "True",
            "predicates_fol": [
                "Rent(x, y)",
                "Spend(x, y)",
                "GoTo(x, y)",
                "DriveTo(x, y)",
                "Own(x, y)",
                "Borrow(x, y)",
                "Camping(x, y)"
            ]
        }
    ],
    "1348": [
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        }
    ],
    "1349": [
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        }
    ],
    "1350": [
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        }
    ],
    "846": [
        {
            "id": 1008,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or know the people who are getting married.",
                "No preteens or young children are getting married or know the people who are getting married.",
                "People who enjoy celebrating life milestone events with other people attend weddings.",
                "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and spirited are fond of large group functions.",
                "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
            ],
            "context_fol": [
                "\u2200x (Attend(x, wedding) \u2192 GettingMarried(x) \u2228 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))",
                "\u2200x (PreTeen(x) \u2228 YoungChild(x) \u2192 \u00ac(GettingMarried(x) \u2295 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))))",
                "\u2200x (\u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEvent, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)) \u2192 Attend(x, wedding))",
                "\u2200x (FondOf(x, largeGroupFunction) \u2192 \u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEventWith, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)))",
                "\u2200x (Outgoing(x) \u2227 Sprited(x)  \u2192 FondOf(x, largeGroupFunction))",
                "\u00ac((PreTeen(carol) \u2228 YoungChildren(carol)) \u2227 Attend(carol, wedding)) \u2192 \u00ac(GettingMarried(carol) \u2228 (\u2203y (Know(carol, y) \u2227 GettingMarried(y))))"
            ],
            "question": "Carol is outgoing and very spirited.",
            "question_fol": "Outgoing(carol) \u2227 Sprited(carol)",
            "label": "False",
            "predicates_fol": [
                "Attend(x, y)",
                "GettingMarried(x)",
                "Know(x, y)",
                "PreTeen(x)",
                "YoungChild(x)",
                "Enjoy(x, y, z)",
                "FondOf(x, y)",
                "Outgoing(x)",
                "Sprited(x)",
                "YoungChildren(x)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        },
        {
            "id": 1197,
            "story_id": 423,
            "context": [
                "Everyone at the business conference is either an investor or an entrepreneur.",
                "None of those at the business conference who enjoy the opportunity of starting a business prefer a planned economy. ",
                "All entrepreneurs at the business conference enjoy the opportunity of starting a business. ",
                "Everyone at the business conference who enjoys state ownership of means of production prefers a planned economy. ",
                "Everyone at the business conference who is an ardent communist prefers state ownership of the means of production.",
                "Ho is at the business conference and prefers state ownership of the means of production. "
            ],
            "context_fol": [
                "\u2200x (At(x, businessConference) \u2192 (Investor(x) \u2295 Entrepreneur(x)))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, opportunityOfStartingOwnBusiness)) \u2192 \u00acPrefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 Entrepreneur(x)) \u2192 Enjoy(x, opportunityOfStartingOwnBusiness))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, stateOwnershipOfMeansOfProduction)) \u2192 Prefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 ArdentCommunist(x)) \u2192 Prefer(x, stateOwnershipOfMeansOfProduction))",
                "At(ho, businessConference) \u2227 Prefer(ho, stateOwnershipOfMeansOfProduction)"
            ],
            "question": "Ho is not an ardent communist.",
            "question_fol": "\u00acArdentCommunist(ho)",
            "label": "Uncertain",
            "predicates_fol": [
                "At(x, y)",
                "Investor(x)",
                "Entrepreneur(x)",
                "Enjoy(x, y)",
                "Prefer(x, y)",
                "ArdentCommunist(x)"
            ]
        }
    ],
    "847": [
        {
            "id": 1008,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or know the people who are getting married.",
                "No preteens or young children are getting married or know the people who are getting married.",
                "People who enjoy celebrating life milestone events with other people attend weddings.",
                "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and spirited are fond of large group functions.",
                "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
            ],
            "context_fol": [
                "\u2200x (Attend(x, wedding) \u2192 GettingMarried(x) \u2228 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))",
                "\u2200x (PreTeen(x) \u2228 YoungChild(x) \u2192 \u00ac(GettingMarried(x) \u2295 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))))",
                "\u2200x (\u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEvent, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)) \u2192 Attend(x, wedding))",
                "\u2200x (FondOf(x, largeGroupFunction) \u2192 \u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEventWith, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)))",
                "\u2200x (Outgoing(x) \u2227 Sprited(x)  \u2192 FondOf(x, largeGroupFunction))",
                "\u00ac((PreTeen(carol) \u2228 YoungChildren(carol)) \u2227 Attend(carol, wedding)) \u2192 \u00ac(GettingMarried(carol) \u2228 (\u2203y (Know(carol, y) \u2227 GettingMarried(y))))"
            ],
            "question": "Carol is outgoing and very spirited.",
            "question_fol": "Outgoing(carol) \u2227 Sprited(carol)",
            "label": "False",
            "predicates_fol": [
                "Attend(x, y)",
                "GettingMarried(x)",
                "Know(x, y)",
                "PreTeen(x)",
                "YoungChild(x)",
                "Enjoy(x, y, z)",
                "FondOf(x, y)",
                "Outgoing(x)",
                "Sprited(x)",
                "YoungChildren(x)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        },
        {
            "id": 1197,
            "story_id": 423,
            "context": [
                "Everyone at the business conference is either an investor or an entrepreneur.",
                "None of those at the business conference who enjoy the opportunity of starting a business prefer a planned economy. ",
                "All entrepreneurs at the business conference enjoy the opportunity of starting a business. ",
                "Everyone at the business conference who enjoys state ownership of means of production prefers a planned economy. ",
                "Everyone at the business conference who is an ardent communist prefers state ownership of the means of production.",
                "Ho is at the business conference and prefers state ownership of the means of production. "
            ],
            "context_fol": [
                "\u2200x (At(x, businessConference) \u2192 (Investor(x) \u2295 Entrepreneur(x)))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, opportunityOfStartingOwnBusiness)) \u2192 \u00acPrefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 Entrepreneur(x)) \u2192 Enjoy(x, opportunityOfStartingOwnBusiness))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, stateOwnershipOfMeansOfProduction)) \u2192 Prefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 ArdentCommunist(x)) \u2192 Prefer(x, stateOwnershipOfMeansOfProduction))",
                "At(ho, businessConference) \u2227 Prefer(ho, stateOwnershipOfMeansOfProduction)"
            ],
            "question": "Ho is not an ardent communist.",
            "question_fol": "\u00acArdentCommunist(ho)",
            "label": "Uncertain",
            "predicates_fol": [
                "At(x, y)",
                "Investor(x)",
                "Entrepreneur(x)",
                "Enjoy(x, y)",
                "Prefer(x, y)",
                "ArdentCommunist(x)"
            ]
        }
    ],
    "848": [
        {
            "id": 1008,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or know the people who are getting married.",
                "No preteens or young children are getting married or know the people who are getting married.",
                "People who enjoy celebrating life milestone events with other people attend weddings.",
                "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and spirited are fond of large group functions.",
                "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
            ],
            "context_fol": [
                "\u2200x (Attend(x, wedding) \u2192 GettingMarried(x) \u2228 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))",
                "\u2200x (PreTeen(x) \u2228 YoungChild(x) \u2192 \u00ac(GettingMarried(x) \u2295 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))))",
                "\u2200x (\u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEvent, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)) \u2192 Attend(x, wedding))",
                "\u2200x (FondOf(x, largeGroupFunction) \u2192 \u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEventWith, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)))",
                "\u2200x (Outgoing(x) \u2227 Sprited(x)  \u2192 FondOf(x, largeGroupFunction))",
                "\u00ac((PreTeen(carol) \u2228 YoungChildren(carol)) \u2227 Attend(carol, wedding)) \u2192 \u00ac(GettingMarried(carol) \u2228 (\u2203y (Know(carol, y) \u2227 GettingMarried(y))))"
            ],
            "question": "Carol is outgoing and very spirited.",
            "question_fol": "Outgoing(carol) \u2227 Sprited(carol)",
            "label": "False",
            "predicates_fol": [
                "Attend(x, y)",
                "GettingMarried(x)",
                "Know(x, y)",
                "PreTeen(x)",
                "YoungChild(x)",
                "Enjoy(x, y, z)",
                "FondOf(x, y)",
                "Outgoing(x)",
                "Sprited(x)",
                "YoungChildren(x)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        },
        {
            "id": 1197,
            "story_id": 423,
            "context": [
                "Everyone at the business conference is either an investor or an entrepreneur.",
                "None of those at the business conference who enjoy the opportunity of starting a business prefer a planned economy. ",
                "All entrepreneurs at the business conference enjoy the opportunity of starting a business. ",
                "Everyone at the business conference who enjoys state ownership of means of production prefers a planned economy. ",
                "Everyone at the business conference who is an ardent communist prefers state ownership of the means of production.",
                "Ho is at the business conference and prefers state ownership of the means of production. "
            ],
            "context_fol": [
                "\u2200x (At(x, businessConference) \u2192 (Investor(x) \u2295 Entrepreneur(x)))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, opportunityOfStartingOwnBusiness)) \u2192 \u00acPrefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 Entrepreneur(x)) \u2192 Enjoy(x, opportunityOfStartingOwnBusiness))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, stateOwnershipOfMeansOfProduction)) \u2192 Prefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 ArdentCommunist(x)) \u2192 Prefer(x, stateOwnershipOfMeansOfProduction))",
                "At(ho, businessConference) \u2227 Prefer(ho, stateOwnershipOfMeansOfProduction)"
            ],
            "question": "Ho is not an ardent communist.",
            "question_fol": "\u00acArdentCommunist(ho)",
            "label": "Uncertain",
            "predicates_fol": [
                "At(x, y)",
                "Investor(x)",
                "Entrepreneur(x)",
                "Enjoy(x, y)",
                "Prefer(x, y)",
                "ArdentCommunist(x)"
            ]
        }
    ],
    "849": [
        {
            "id": 1008,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or know the people who are getting married.",
                "No preteens or young children are getting married or know the people who are getting married.",
                "People who enjoy celebrating life milestone events with other people attend weddings.",
                "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and spirited are fond of large group functions.",
                "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
            ],
            "context_fol": [
                "\u2200x (Attend(x, wedding) \u2192 GettingMarried(x) \u2228 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))",
                "\u2200x (PreTeen(x) \u2228 YoungChild(x) \u2192 \u00ac(GettingMarried(x) \u2295 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))))",
                "\u2200x (\u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEvent, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)) \u2192 Attend(x, wedding))",
                "\u2200x (FondOf(x, largeGroupFunction) \u2192 \u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEventWith, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)))",
                "\u2200x (Outgoing(x) \u2227 Sprited(x)  \u2192 FondOf(x, largeGroupFunction))",
                "\u00ac((PreTeen(carol) \u2228 YoungChildren(carol)) \u2227 Attend(carol, wedding)) \u2192 \u00ac(GettingMarried(carol) \u2228 (\u2203y (Know(carol, y) \u2227 GettingMarried(y))))"
            ],
            "question": "Carol is outgoing and very spirited.",
            "question_fol": "Outgoing(carol) \u2227 Sprited(carol)",
            "label": "False",
            "predicates_fol": [
                "Attend(x, y)",
                "GettingMarried(x)",
                "Know(x, y)",
                "PreTeen(x)",
                "YoungChild(x)",
                "Enjoy(x, y, z)",
                "FondOf(x, y)",
                "Outgoing(x)",
                "Sprited(x)",
                "YoungChildren(x)"
            ]
        },
        {
            "id": 1253,
            "story_id": 437,
            "context": [
                "Researchers present their work at the conference or provide a tutorial session there.",
                "Everyone who presents their work at the conference will attend in person. ",
                "Everyone providing a tutorial session at the conference will be invited to join the club. ",
                "Everyone who attends the conference in person is provided with souvenirs. ",
                "Everyone invited to join the club is provided with delicious meals. ",
                "Everyone provided with delicious meals is happy to communicate with each other during the dinner. ",
                "Everyone who is provided with delicious meals is invited to take a photo with the audience. ",
                "It is not true that James both attended the conference in person and was provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))",
                "\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))",
                "\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))",
                "\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))",
                "\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))",
                "\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))",
                "\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))"
            ],
            "question": "James is provided with souvenirs.",
            "question_fol": "ProvidedWith(james, souvenir)",
            "label": "Uncertain",
            "predicates_fol": [
                "PresentWorkAt(x, y)",
                "ProvideAt(x, y)",
                "AttendInPerson(x, y)",
                "ProvideSessionAt(x, y)",
                "InvitedToJoin(x, y)",
                "ProvidedWith(x, y)",
                "HappyToCommunicateWithDuringTheDinner(x, y)",
                "InvitedToTakePhotoWith(x, y)"
            ]
        },
        {
            "id": 1197,
            "story_id": 423,
            "context": [
                "Everyone at the business conference is either an investor or an entrepreneur.",
                "None of those at the business conference who enjoy the opportunity of starting a business prefer a planned economy. ",
                "All entrepreneurs at the business conference enjoy the opportunity of starting a business. ",
                "Everyone at the business conference who enjoys state ownership of means of production prefers a planned economy. ",
                "Everyone at the business conference who is an ardent communist prefers state ownership of the means of production.",
                "Ho is at the business conference and prefers state ownership of the means of production. "
            ],
            "context_fol": [
                "\u2200x (At(x, businessConference) \u2192 (Investor(x) \u2295 Entrepreneur(x)))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, opportunityOfStartingOwnBusiness)) \u2192 \u00acPrefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 Entrepreneur(x)) \u2192 Enjoy(x, opportunityOfStartingOwnBusiness))",
                "\u2200x ((At(x, businessConference) \u2227 Enjoy(x, stateOwnershipOfMeansOfProduction)) \u2192 Prefer(x, plannedEconomy))",
                "\u2200x ((At(x, businessConference) \u2227 ArdentCommunist(x)) \u2192 Prefer(x, stateOwnershipOfMeansOfProduction))",
                "At(ho, businessConference) \u2227 Prefer(ho, stateOwnershipOfMeansOfProduction)"
            ],
            "question": "Ho is not an ardent communist.",
            "question_fol": "\u00acArdentCommunist(ho)",
            "label": "Uncertain",
            "predicates_fol": [
                "At(x, y)",
                "Investor(x)",
                "Entrepreneur(x)",
                "Enjoy(x, y)",
                "Prefer(x, y)",
                "ArdentCommunist(x)"
            ]
        }
    ],
    "74": [
        {
            "id": 599,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are either platypuses or echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "question_fol": "\u2203x (Hyrax(x) \u2227 LayEgg(x))",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LayEgg(x)",
                "Platypus(x)",
                "Echidna(x)",
                "Platypuses(x)",
                "Hyrax(x)",
                "Echidnas(x)",
                "Invertebrate(x)",
                "Animal(x)",
                "Vertebrate(x)",
                "Grebes(x)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "75": [
        {
            "id": 599,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are either platypuses or echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "question_fol": "\u2203x (Hyrax(x) \u2227 LayEgg(x))",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LayEgg(x)",
                "Platypus(x)",
                "Echidna(x)",
                "Platypuses(x)",
                "Hyrax(x)",
                "Echidnas(x)",
                "Invertebrate(x)",
                "Animal(x)",
                "Vertebrate(x)",
                "Grebes(x)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "76": [
        {
            "id": 599,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are either platypuses or echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "question_fol": "\u2203x (Hyrax(x) \u2227 LayEgg(x))",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LayEgg(x)",
                "Platypus(x)",
                "Echidna(x)",
                "Platypuses(x)",
                "Hyrax(x)",
                "Echidnas(x)",
                "Invertebrate(x)",
                "Animal(x)",
                "Vertebrate(x)",
                "Grebes(x)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "578": [
        {
            "id": 735,
            "story_id": 291,
            "context": [
                "No road is dustless.",
                "Some streets are roads."
            ],
            "context_fol": [
                "\u2200x (Road(x) \u2192 \u00acDustless(x))",
                "\u2203x \u2203y (Street(x) \u2227 Street(y) \u2227 Road(x) \u2227 Road(y) \u2227 \u00ac(x=y))"
            ],
            "question": "Some streets are dustless.",
            "question_fol": "\u2203x \u2203y (Street(x) \u2227 Street(y) \u2227 Dustless(x) \u2227 Dustless(y) \u2227 \u00ac(x=y))",
            "label": "Uncertain",
            "predicates_fol": [
                "Road(x)",
                "Dustless(x)",
                "Street(x)"
            ]
        },
        {
            "id": 858,
            "story_id": 332,
            "context": [
                "If people don't often clean their homes, then they do not have tidy houses.",
                "If people don't prioritize cleaning, then they do not often clean their homes.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people don't care about cleanliness, then they do not prioritize cleaning.",
                "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
            ],
            "context_fol": [
                "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))",
                "\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))",
                "\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))",
                "\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))",
                "\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))"
            ],
            "question": "Jack doesn't care about cleanliness.",
            "question_fol": "\u00ac(CareAbout(jack, cleanliness))",
            "label": "False",
            "predicates_fol": [
                "CleanOften(x, y)",
                "Have(x, y)",
                "Prioritize(x, y)",
                "Hire(x, y)",
                "CareAbout(x, y)"
            ]
        },
        {
            "id": 1406,
            "story_id": 482,
            "context": [
                "If someone in Potterville yells, then they are not cool.",
                "If someone in Potterville is angry, then they yell.",
                "If someone in Potterville flies, then they are cool.",
                "Every person in Potterville that knows magic flies.",
                "All wizards in Potterville know magic.",
                "Harry, who lives in Potterville either yells or flies. ",
                "Potter, who lives in Potterville, is a wizard and flies."
            ],
            "context_fol": [
                "\u2200x (In(x, potterville) \u2227 Yell(x) \u2192 \u00acCool(x))",
                "\u2200x (In(x, potterville) \u2227 Angry(x) \u2192 Yell(x))",
                "\u2200x (In(x, potterville) \u2227 Fly(x) \u2192 Cool(x))",
                "\u2200x (In(x, potterville) \u2227 Know(x, magic) \u2192 Fly(x))",
                "\u2200x (In(x, potterville) \u2227 Wizard(x) \u2192 Know(x, magic))",
                "In(harry, potterville) \u2227 (Yell(harry) \u2295 Fly(harry))",
                "Wizard(potter) \u2227 Fly(potter)"
            ],
            "question": "Harry is cool.",
            "question_fol": "Cool(harry)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "Yell(x)",
                "Cool(x)",
                "Angry(x)",
                "Fly(x)",
                "Know(x, y)",
                "Wizard(x)"
            ]
        }
    ],
    "579": [
        {
            "id": 735,
            "story_id": 291,
            "context": [
                "No road is dustless.",
                "Some streets are roads."
            ],
            "context_fol": [
                "\u2200x (Road(x) \u2192 \u00acDustless(x))",
                "\u2203x \u2203y (Street(x) \u2227 Street(y) \u2227 Road(x) \u2227 Road(y) \u2227 \u00ac(x=y))"
            ],
            "question": "Some streets are dustless.",
            "question_fol": "\u2203x \u2203y (Street(x) \u2227 Street(y) \u2227 Dustless(x) \u2227 Dustless(y) \u2227 \u00ac(x=y))",
            "label": "Uncertain",
            "predicates_fol": [
                "Road(x)",
                "Dustless(x)",
                "Street(x)"
            ]
        },
        {
            "id": 858,
            "story_id": 332,
            "context": [
                "If people don't often clean their homes, then they do not have tidy houses.",
                "If people don't prioritize cleaning, then they do not often clean their homes.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people don't care about cleanliness, then they do not prioritize cleaning.",
                "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
            ],
            "context_fol": [
                "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))",
                "\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))",
                "\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))",
                "\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))",
                "\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))"
            ],
            "question": "Jack doesn't care about cleanliness.",
            "question_fol": "\u00ac(CareAbout(jack, cleanliness))",
            "label": "False",
            "predicates_fol": [
                "CleanOften(x, y)",
                "Have(x, y)",
                "Prioritize(x, y)",
                "Hire(x, y)",
                "CareAbout(x, y)"
            ]
        },
        {
            "id": 1406,
            "story_id": 482,
            "context": [
                "If someone in Potterville yells, then they are not cool.",
                "If someone in Potterville is angry, then they yell.",
                "If someone in Potterville flies, then they are cool.",
                "Every person in Potterville that knows magic flies.",
                "All wizards in Potterville know magic.",
                "Harry, who lives in Potterville either yells or flies. ",
                "Potter, who lives in Potterville, is a wizard and flies."
            ],
            "context_fol": [
                "\u2200x (In(x, potterville) \u2227 Yell(x) \u2192 \u00acCool(x))",
                "\u2200x (In(x, potterville) \u2227 Angry(x) \u2192 Yell(x))",
                "\u2200x (In(x, potterville) \u2227 Fly(x) \u2192 Cool(x))",
                "\u2200x (In(x, potterville) \u2227 Know(x, magic) \u2192 Fly(x))",
                "\u2200x (In(x, potterville) \u2227 Wizard(x) \u2192 Know(x, magic))",
                "In(harry, potterville) \u2227 (Yell(harry) \u2295 Fly(harry))",
                "Wizard(potter) \u2227 Fly(potter)"
            ],
            "question": "Harry is cool.",
            "question_fol": "Cool(harry)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "Yell(x)",
                "Cool(x)",
                "Angry(x)",
                "Fly(x)",
                "Know(x, y)",
                "Wizard(x)"
            ]
        }
    ],
    "580": [
        {
            "id": 735,
            "story_id": 291,
            "context": [
                "No road is dustless.",
                "Some streets are roads."
            ],
            "context_fol": [
                "\u2200x (Road(x) \u2192 \u00acDustless(x))",
                "\u2203x \u2203y (Street(x) \u2227 Street(y) \u2227 Road(x) \u2227 Road(y) \u2227 \u00ac(x=y))"
            ],
            "question": "Some streets are dustless.",
            "question_fol": "\u2203x \u2203y (Street(x) \u2227 Street(y) \u2227 Dustless(x) \u2227 Dustless(y) \u2227 \u00ac(x=y))",
            "label": "Uncertain",
            "predicates_fol": [
                "Road(x)",
                "Dustless(x)",
                "Street(x)"
            ]
        },
        {
            "id": 858,
            "story_id": 332,
            "context": [
                "If people don't often clean their homes, then they do not have tidy houses.",
                "If people don't prioritize cleaning, then they do not often clean their homes.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people don't care about cleanliness, then they do not prioritize cleaning.",
                "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
            ],
            "context_fol": [
                "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))",
                "\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))",
                "\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))",
                "\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))",
                "\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))"
            ],
            "question": "Jack doesn't care about cleanliness.",
            "question_fol": "\u00ac(CareAbout(jack, cleanliness))",
            "label": "False",
            "predicates_fol": [
                "CleanOften(x, y)",
                "Have(x, y)",
                "Prioritize(x, y)",
                "Hire(x, y)",
                "CareAbout(x, y)"
            ]
        },
        {
            "id": 1406,
            "story_id": 482,
            "context": [
                "If someone in Potterville yells, then they are not cool.",
                "If someone in Potterville is angry, then they yell.",
                "If someone in Potterville flies, then they are cool.",
                "Every person in Potterville that knows magic flies.",
                "All wizards in Potterville know magic.",
                "Harry, who lives in Potterville either yells or flies. ",
                "Potter, who lives in Potterville, is a wizard and flies."
            ],
            "context_fol": [
                "\u2200x (In(x, potterville) \u2227 Yell(x) \u2192 \u00acCool(x))",
                "\u2200x (In(x, potterville) \u2227 Angry(x) \u2192 Yell(x))",
                "\u2200x (In(x, potterville) \u2227 Fly(x) \u2192 Cool(x))",
                "\u2200x (In(x, potterville) \u2227 Know(x, magic) \u2192 Fly(x))",
                "\u2200x (In(x, potterville) \u2227 Wizard(x) \u2192 Know(x, magic))",
                "In(harry, potterville) \u2227 (Yell(harry) \u2295 Fly(harry))",
                "Wizard(potter) \u2227 Fly(potter)"
            ],
            "question": "Harry is cool.",
            "question_fol": "Cool(harry)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "Yell(x)",
                "Cool(x)",
                "Angry(x)",
                "Fly(x)",
                "Know(x, y)",
                "Wizard(x)"
            ]
        }
    ],
    "388": [
        {
            "id": 542,
            "story_id": 189,
            "context": [
                "A summarization model is always faithful if it uses content from the input documents.",
                "Extractive models are summarization models.",
                "An extractive model can only use content from the input documents."
            ],
            "context_fol": [
                "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Model(x) \u2227 Summarization(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
            ],
            "question": "Extractive models are always faithful.",
            "question_fol": "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Faithful(x))",
            "label": "True",
            "predicates_fol": [
                "Model(x)",
                "Summarization(x)",
                "OnlyUseInputDocument(x)",
                "Faithful(x)",
                "Extractive(x)"
            ]
        },
        {
            "id": 382,
            "story_id": 129,
            "context": [
                "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. ",
                "Donald Knuth made contributions to the analysis of algorithms.",
                "Marvin Minsky is recognized for his contributions to the field of artificial intelligence.",
                "Richard Hamming researched numerical methods.",
                "John McCarthy made contributions to the field of artificial intelligence. "
            ],
            "context_fol": [
                "AwardedTo(turingAward, donaldKnuth) \u2227 AwardedTo(turingAward, marvinMinsky) \u2227 AwardedTo(turingAward, richardHamming) \u2227 AwardedTo(turingAward, johnMccarthy)",
                "ContributedTo(donaldKnuth, analysisOfAlgorithms)",
                "ContributedTo(marvinMinsky, artificialIntelligence)",
                "ContributedTo(richardHamming, numericalMethods)",
                "ContributedTo(johnMccarthy, artificialIntelligence)"
            ],
            "question": "At least two people who have won the Turing Award worked in artificial intelligence.",
            "question_fol": "\u2203x \u2203y (\u00ac(x=y) \u2227 AwardedTo(turingAward, x) \u2227 AwardedTo(turingAward, y) \u2227 ContributedTo(x, artificialIntelligence)  \u2227 ContributedTo(y, artificialIntelligence))",
            "label": "True",
            "predicates_fol": [
                "AwardedTo(x, y)",
                "ContributedTo(x, y)"
            ]
        },
        {
            "id": 666,
            "story_id": 235,
            "context": [
                "Westworld is an American science fiction-thriller TV series.",
                "In 2016, a television series named Westworld debuted on HBO.",
                "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.",
                "The 1973 film Westworld is about robots that malfunction and begin killing human visitors."
            ],
            "context_fol": [
                "American(westworld) \u2227 ScienceFictionThriller(westworld)",
                "Debut(westworld, year2016) \u2227 TvSeries(westworld)",
                "Adapted(westworld, westworldTheFilm) \u2227 Produce(westworldTheFilm, year1973) \u2227 Wrote(michael, westworldTheFilm) \u2227 Directed(michael, westworldTheFilm)",
                "Film(westworldTheFilm) \u2227 About(westworldTheFilm, malfunctioningRobots)"
            ],
            "question": "Michael Crichton has directed a film about malfunctioning robots.",
            "question_fol": "\u2203x (Film(x) \u2227 Directed(michael, x) \u2227 About(x, malfunctioningRobots))",
            "label": "True",
            "predicates_fol": [
                "American(x)",
                "ScienceFictionThriller(x)",
                "Debut(x, y)",
                "TvSeries(x)",
                "Adapted(x, y)",
                "Produce(x, y)",
                "Wrote(x, y)",
                "Directed(x, y)",
                "Film(x)",
                "About(x, y)"
            ]
        }
    ],
    "389": [
        {
            "id": 542,
            "story_id": 189,
            "context": [
                "A summarization model is always faithful if it uses content from the input documents.",
                "Extractive models are summarization models.",
                "An extractive model can only use content from the input documents."
            ],
            "context_fol": [
                "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Model(x) \u2227 Summarization(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
            ],
            "question": "Extractive models are always faithful.",
            "question_fol": "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Faithful(x))",
            "label": "True",
            "predicates_fol": [
                "Model(x)",
                "Summarization(x)",
                "OnlyUseInputDocument(x)",
                "Faithful(x)",
                "Extractive(x)"
            ]
        },
        {
            "id": 382,
            "story_id": 129,
            "context": [
                "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. ",
                "Donald Knuth made contributions to the analysis of algorithms.",
                "Marvin Minsky is recognized for his contributions to the field of artificial intelligence.",
                "Richard Hamming researched numerical methods.",
                "John McCarthy made contributions to the field of artificial intelligence. "
            ],
            "context_fol": [
                "AwardedTo(turingAward, donaldKnuth) \u2227 AwardedTo(turingAward, marvinMinsky) \u2227 AwardedTo(turingAward, richardHamming) \u2227 AwardedTo(turingAward, johnMccarthy)",
                "ContributedTo(donaldKnuth, analysisOfAlgorithms)",
                "ContributedTo(marvinMinsky, artificialIntelligence)",
                "ContributedTo(richardHamming, numericalMethods)",
                "ContributedTo(johnMccarthy, artificialIntelligence)"
            ],
            "question": "At least two people who have won the Turing Award worked in artificial intelligence.",
            "question_fol": "\u2203x \u2203y (\u00ac(x=y) \u2227 AwardedTo(turingAward, x) \u2227 AwardedTo(turingAward, y) \u2227 ContributedTo(x, artificialIntelligence)  \u2227 ContributedTo(y, artificialIntelligence))",
            "label": "True",
            "predicates_fol": [
                "AwardedTo(x, y)",
                "ContributedTo(x, y)"
            ]
        },
        {
            "id": 666,
            "story_id": 235,
            "context": [
                "Westworld is an American science fiction-thriller TV series.",
                "In 2016, a television series named Westworld debuted on HBO.",
                "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.",
                "The 1973 film Westworld is about robots that malfunction and begin killing human visitors."
            ],
            "context_fol": [
                "American(westworld) \u2227 ScienceFictionThriller(westworld)",
                "Debut(westworld, year2016) \u2227 TvSeries(westworld)",
                "Adapted(westworld, westworldTheFilm) \u2227 Produce(westworldTheFilm, year1973) \u2227 Wrote(michael, westworldTheFilm) \u2227 Directed(michael, westworldTheFilm)",
                "Film(westworldTheFilm) \u2227 About(westworldTheFilm, malfunctioningRobots)"
            ],
            "question": "Michael Crichton has directed a film about malfunctioning robots.",
            "question_fol": "\u2203x (Film(x) \u2227 Directed(michael, x) \u2227 About(x, malfunctioningRobots))",
            "label": "True",
            "predicates_fol": [
                "American(x)",
                "ScienceFictionThriller(x)",
                "Debut(x, y)",
                "TvSeries(x)",
                "Adapted(x, y)",
                "Produce(x, y)",
                "Wrote(x, y)",
                "Directed(x, y)",
                "Film(x)",
                "About(x, y)"
            ]
        }
    ],
    "1327": [
        {
            "id": 744,
            "story_id": 300,
            "context": [
                "If a movie is popular, some people enjoy watching it.",
                "All things that some people enjoy attract attention."
            ],
            "context_fol": [
                "\u2200x (Movie(x) \u2227 Popular(x) \u2192 \u2203y \u2203z (Person(y) \u2227 EnjoyWatching(y, x) \u2227 Person(z) \u2227 EnjoyWatching(z, x) \u2227 \u00ac(y=z)))",
                "\u2200x (\u2203y \u2203z (Person(y) \u2227 EnjoyWatching(y, x) \u2227 Person(z) \u2227 EnjoyWatching(z, x)) \u2192 Attract(x, attention))"
            ],
            "question": "If a movie is popular, then it attracts attention.",
            "question_fol": "\u2200x (Movie(x) \u2227 Popular(x) \u2192 Attract(x, attention))",
            "label": "True",
            "predicates_fol": [
                "Movie(x)",
                "Popular(x)",
                "Person(x)",
                "EnjoyWatching(x, y)",
                "Attract(x, y)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 1258,
            "story_id": 438,
            "context": [
                "None of the kids in our family love the opera.",
                "All of the adults in our family love the opera.",
                "If someone in our family is a scientist, then they are an adult.",
                "Some students in our family are kids.",
                "Billy is a kid in our family."
            ],
            "context_fol": [
                "\u2200x ((Kid(x) \u2227 In(x, ourFamily)) \u2192 \u00acLove(x, opera))",
                "\u2200x ((Adult(x) \u2227 In(x, ourFamily)) \u2192 Love(x, opera))",
                "\u2200x ((Scientist(x) \u2227 In(x, ourFamily)) \u2192 Adult(x))",
                "\u2203x (Student(x) \u2227 In(x, ourFamily) \u2227 Kid(x))",
                "Kid(billy) \u2227 In(billy, ourFamily) "
            ],
            "question": "Billy is a student.",
            "question_fol": "Student(billy)",
            "label": "Uncertain",
            "predicates_fol": [
                "Kid(x)",
                "In(x, y)",
                "Love(x, y)",
                "Adult(x)",
                "Scientist(x)",
                "Student(x)"
            ]
        }
    ],
    "1328": [
        {
            "id": 744,
            "story_id": 300,
            "context": [
                "If a movie is popular, some people enjoy watching it.",
                "All things that some people enjoy attract attention."
            ],
            "context_fol": [
                "\u2200x (Movie(x) \u2227 Popular(x) \u2192 \u2203y \u2203z (Person(y) \u2227 EnjoyWatching(y, x) \u2227 Person(z) \u2227 EnjoyWatching(z, x) \u2227 \u00ac(y=z)))",
                "\u2200x (\u2203y \u2203z (Person(y) \u2227 EnjoyWatching(y, x) \u2227 Person(z) \u2227 EnjoyWatching(z, x)) \u2192 Attract(x, attention))"
            ],
            "question": "If a movie is popular, then it attracts attention.",
            "question_fol": "\u2200x (Movie(x) \u2227 Popular(x) \u2192 Attract(x, attention))",
            "label": "True",
            "predicates_fol": [
                "Movie(x)",
                "Popular(x)",
                "Person(x)",
                "EnjoyWatching(x, y)",
                "Attract(x, y)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 1258,
            "story_id": 438,
            "context": [
                "None of the kids in our family love the opera.",
                "All of the adults in our family love the opera.",
                "If someone in our family is a scientist, then they are an adult.",
                "Some students in our family are kids.",
                "Billy is a kid in our family."
            ],
            "context_fol": [
                "\u2200x ((Kid(x) \u2227 In(x, ourFamily)) \u2192 \u00acLove(x, opera))",
                "\u2200x ((Adult(x) \u2227 In(x, ourFamily)) \u2192 Love(x, opera))",
                "\u2200x ((Scientist(x) \u2227 In(x, ourFamily)) \u2192 Adult(x))",
                "\u2203x (Student(x) \u2227 In(x, ourFamily) \u2227 Kid(x))",
                "Kid(billy) \u2227 In(billy, ourFamily) "
            ],
            "question": "Billy is a student.",
            "question_fol": "Student(billy)",
            "label": "Uncertain",
            "predicates_fol": [
                "Kid(x)",
                "In(x, y)",
                "Love(x, y)",
                "Adult(x)",
                "Scientist(x)",
                "Student(x)"
            ]
        }
    ],
    "1329": [
        {
            "id": 744,
            "story_id": 300,
            "context": [
                "If a movie is popular, some people enjoy watching it.",
                "All things that some people enjoy attract attention."
            ],
            "context_fol": [
                "\u2200x (Movie(x) \u2227 Popular(x) \u2192 \u2203y \u2203z (Person(y) \u2227 EnjoyWatching(y, x) \u2227 Person(z) \u2227 EnjoyWatching(z, x) \u2227 \u00ac(y=z)))",
                "\u2200x (\u2203y \u2203z (Person(y) \u2227 EnjoyWatching(y, x) \u2227 Person(z) \u2227 EnjoyWatching(z, x)) \u2192 Attract(x, attention))"
            ],
            "question": "If a movie is popular, then it attracts attention.",
            "question_fol": "\u2200x (Movie(x) \u2227 Popular(x) \u2192 Attract(x, attention))",
            "label": "True",
            "predicates_fol": [
                "Movie(x)",
                "Popular(x)",
                "Person(x)",
                "EnjoyWatching(x, y)",
                "Attract(x, y)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 1258,
            "story_id": 438,
            "context": [
                "None of the kids in our family love the opera.",
                "All of the adults in our family love the opera.",
                "If someone in our family is a scientist, then they are an adult.",
                "Some students in our family are kids.",
                "Billy is a kid in our family."
            ],
            "context_fol": [
                "\u2200x ((Kid(x) \u2227 In(x, ourFamily)) \u2192 \u00acLove(x, opera))",
                "\u2200x ((Adult(x) \u2227 In(x, ourFamily)) \u2192 Love(x, opera))",
                "\u2200x ((Scientist(x) \u2227 In(x, ourFamily)) \u2192 Adult(x))",
                "\u2203x (Student(x) \u2227 In(x, ourFamily) \u2227 Kid(x))",
                "Kid(billy) \u2227 In(billy, ourFamily) "
            ],
            "question": "Billy is a student.",
            "question_fol": "Student(billy)",
            "label": "Uncertain",
            "predicates_fol": [
                "Kid(x)",
                "In(x, y)",
                "Love(x, y)",
                "Adult(x)",
                "Scientist(x)",
                "Student(x)"
            ]
        }
    ],
    "133": [
        {
            "id": 1264,
            "story_id": 440,
            "context": [
                "All tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "All huskies are dogs.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2295 Cat(fido)"
            ],
            "question": "Fido is a husky animal.",
            "question_fol": "Husky(fido)",
            "label": "False",
            "predicates_fol": [
                "Tiger(x)",
                "Cat(x)",
                "Dog(x)",
                "BengalTiger(x)",
                "Husky(x)"
            ]
        },
        {
            "id": 599,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are either platypuses or echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "question_fol": "\u2203x (Hyrax(x) \u2227 LayEgg(x))",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LayEgg(x)",
                "Platypus(x)",
                "Echidna(x)",
                "Platypuses(x)",
                "Hyrax(x)",
                "Echidnas(x)",
                "Invertebrate(x)",
                "Animal(x)",
                "Vertebrate(x)",
                "Grebes(x)"
            ]
        },
        {
            "id": 41,
            "story_id": 15,
            "context": [
                "Elephantopus is a genus of perennial plants in the daisy family.",
                "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.",
                "Several species of Elephantopus are native to the southeastern United States.",
                "Elephantopus scaber is a traditional medicine."
            ],
            "context_fol": [
                "\u2200x (Elephantopus(x) \u2192 (Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily)))",
                "\u2203x \u2203y \u2203z(Elephantopus(x) \u2227 In(x,africa) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 In(y, southernasia) \u2227 (\u00ac(x=z)) \u2227 (\u00ac(y=z)) \u2227 Elephantopus(z) \u2227 In(z, australia))",
                "\u2203x \u2203y (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 NativeTo(y, southeasternunitedstates))",
                "\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))"
            ],
            "question": "Elephantopus is found in Australia and Southern Asia.",
            "question_fol": "\u2203x\u2203y(Elephantopus(x) \u2227 In(x,africa) \u2227 Elephantopus(y) \u2227 In(y,africa))",
            "label": "True",
            "predicates_fol": [
                "Elephantopus(x)",
                "Genus(x, y)",
                "BelongTo(x, y)",
                "In(x, y)",
                "NativeTo(x, y)",
                "ElephantopusScaber(x)",
                "TraditionalMedicine(x)"
            ]
        }
    ],
    "134": [
        {
            "id": 1264,
            "story_id": 440,
            "context": [
                "All tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "All huskies are dogs.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2295 Cat(fido)"
            ],
            "question": "Fido is a husky animal.",
            "question_fol": "Husky(fido)",
            "label": "False",
            "predicates_fol": [
                "Tiger(x)",
                "Cat(x)",
                "Dog(x)",
                "BengalTiger(x)",
                "Husky(x)"
            ]
        },
        {
            "id": 599,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are either platypuses or echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "question_fol": "\u2203x (Hyrax(x) \u2227 LayEgg(x))",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LayEgg(x)",
                "Platypus(x)",
                "Echidna(x)",
                "Platypuses(x)",
                "Hyrax(x)",
                "Echidnas(x)",
                "Invertebrate(x)",
                "Animal(x)",
                "Vertebrate(x)",
                "Grebes(x)"
            ]
        },
        {
            "id": 41,
            "story_id": 15,
            "context": [
                "Elephantopus is a genus of perennial plants in the daisy family.",
                "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.",
                "Several species of Elephantopus are native to the southeastern United States.",
                "Elephantopus scaber is a traditional medicine."
            ],
            "context_fol": [
                "\u2200x (Elephantopus(x) \u2192 (Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily)))",
                "\u2203x \u2203y \u2203z(Elephantopus(x) \u2227 In(x,africa) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 In(y, southernasia) \u2227 (\u00ac(x=z)) \u2227 (\u00ac(y=z)) \u2227 Elephantopus(z) \u2227 In(z, australia))",
                "\u2203x \u2203y (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 NativeTo(y, southeasternunitedstates))",
                "\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))"
            ],
            "question": "Elephantopus is found in Australia and Southern Asia.",
            "question_fol": "\u2203x\u2203y(Elephantopus(x) \u2227 In(x,africa) \u2227 Elephantopus(y) \u2227 In(y,africa))",
            "label": "True",
            "predicates_fol": [
                "Elephantopus(x)",
                "Genus(x, y)",
                "BelongTo(x, y)",
                "In(x, y)",
                "NativeTo(x, y)",
                "ElephantopusScaber(x)",
                "TraditionalMedicine(x)"
            ]
        }
    ],
    "1410": [
        {
            "id": 776,
            "story_id": 312,
            "context": [
                "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
                "Those who are enrolled in an academic program can not work full-time.",
                "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
                "All PhD graduate can work full-time. ",
                "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
            ],
            "context_fol": [
                "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))",
                "\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))",
                "\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))",
                "\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))",
                "\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)"
            ],
            "question": "Tom is a PhD graduate.",
            "question_fol": "PhdGraduate(tom)",
            "label": "False",
            "predicates_fol": [
                "Have(x, y)",
                "EnrolledIn(x, y)",
                "Work(x, y)",
                "StudyIn(x, y)",
                "PhDGraduate(x)"
            ]
        },
        {
            "id": 1378,
            "story_id": 475,
            "context": [
                "Everyone who is entitled to national social insurance coverage can have their medical bills partially covered. ",
                "All PRC nationals are entitled to national social insurance coverage.",
                "Everyone in the Franco-China diplomatic conference is either a PRC national or a French national, but not both. ",
                "All French nationals are citizens of the European Union. ",
                "All Spanish nationals are citizens of the European Union. ",
                "No North Korean nationals are citizens of the European Union. ",
                "Mei is at the Franco-China diplomatic conference. ",
                "Either Mei is a North Korean and can have medical bills partially covered, or neither is true."
            ],
            "context_fol": [
                "\u2200x (EntitledTo(x, nationalSocialInsuranceCoverage) \u2192 CanHavePartiallyCovered(x, medicalBills))",
                "\u2200x (PRCNational(x) \u2192 EntitledTo(x, nationalSocialInsuranceCoverage))",
                "\u2200x (In(x, franco-ChinaDiplomaticConference) \u2192 PRCNational(x) \u2295 FrenchNational(x))",
                "\u2200x (FrenchNational(x) \u2192 CitizenOf(x, europeanUnion))",
                "\u2200x (SpanishNational(x) \u2192 CitizenOf(x, europeanUnion))",
                "\u2200x (NorthKoreanNational(x) \u2192 \u00acCitizenOf(x, europeanUnion))",
                "In(mei, franco-ChinaDiplomaticConference)",
                "\u00ac(NorthKoreanNational(mei) \u2295 CanHavePartiallyCovered(mei, medicalBills))"
            ],
            "question": "Mei is a PRC national.",
            "question_fol": "PRCNational(mei)",
            "label": "Uncertain",
            "predicates_fol": [
                "EntitledTo(x, y)",
                "CanHavePartiallyCovered(x, y)",
                "PRCNational(x)",
                "In(x, y)",
                "FrenchNational(x)",
                "CitizenOf(x, y)",
                "SpanishNational(x)",
                "NorthKoreanNational(x)"
            ]
        },
        {
            "id": 435,
            "story_id": 149,
            "context": [
                "",
                "Guam sent an athlete to the Calgary Winter Olympics.",
                "If Guan sent an athlete to the Calgary Winter Olympics, then the athelete participated in the Olympics in 1988.",
                "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics."
            ],
            "context_fol": [
                "",
                "\u2203x (Send(guam, athlete, calgaryWinterOlympics))",
                "\u2200x (Athlete(x) \u2227 SendTo(guam, x, calgaryWinterOlympics) \u2192 ParticipatedIn(x, winterOlympics, year1988))",
                "\u2200x \u2200y (Athlete(x) \u2227 From(x, guam) \u2227 ParticipatedIn(x, winterOlympics, y) \u2192 x=juddBankert)"
            ],
            "question": "Judd Bankert competed in the 1988 Winter Olympics.",
            "question_fol": "ParticipatedIn(juddBankert, winterOlympics, year1988)",
            "label": "True",
            "predicates_fol": [
                "Send(x, y)",
                "Athlete(x)",
                "SendTo(x, y)",
                "ParticipatedIn(x, y, z)",
                "From(x, y)"
            ]
        }
    ],
    "1411": [
        {
            "id": 776,
            "story_id": 312,
            "context": [
                "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
                "Those who are enrolled in an academic program can not work full-time.",
                "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
                "All PhD graduate can work full-time. ",
                "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
            ],
            "context_fol": [
                "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))",
                "\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))",
                "\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))",
                "\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))",
                "\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)"
            ],
            "question": "Tom is a PhD graduate.",
            "question_fol": "PhdGraduate(tom)",
            "label": "False",
            "predicates_fol": [
                "Have(x, y)",
                "EnrolledIn(x, y)",
                "Work(x, y)",
                "StudyIn(x, y)",
                "PhDGraduate(x)"
            ]
        },
        {
            "id": 1378,
            "story_id": 475,
            "context": [
                "Everyone who is entitled to national social insurance coverage can have their medical bills partially covered. ",
                "All PRC nationals are entitled to national social insurance coverage.",
                "Everyone in the Franco-China diplomatic conference is either a PRC national or a French national, but not both. ",
                "All French nationals are citizens of the European Union. ",
                "All Spanish nationals are citizens of the European Union. ",
                "No North Korean nationals are citizens of the European Union. ",
                "Mei is at the Franco-China diplomatic conference. ",
                "Either Mei is a North Korean and can have medical bills partially covered, or neither is true."
            ],
            "context_fol": [
                "\u2200x (EntitledTo(x, nationalSocialInsuranceCoverage) \u2192 CanHavePartiallyCovered(x, medicalBills))",
                "\u2200x (PRCNational(x) \u2192 EntitledTo(x, nationalSocialInsuranceCoverage))",
                "\u2200x (In(x, franco-ChinaDiplomaticConference) \u2192 PRCNational(x) \u2295 FrenchNational(x))",
                "\u2200x (FrenchNational(x) \u2192 CitizenOf(x, europeanUnion))",
                "\u2200x (SpanishNational(x) \u2192 CitizenOf(x, europeanUnion))",
                "\u2200x (NorthKoreanNational(x) \u2192 \u00acCitizenOf(x, europeanUnion))",
                "In(mei, franco-ChinaDiplomaticConference)",
                "\u00ac(NorthKoreanNational(mei) \u2295 CanHavePartiallyCovered(mei, medicalBills))"
            ],
            "question": "Mei is a PRC national.",
            "question_fol": "PRCNational(mei)",
            "label": "Uncertain",
            "predicates_fol": [
                "EntitledTo(x, y)",
                "CanHavePartiallyCovered(x, y)",
                "PRCNational(x)",
                "In(x, y)",
                "FrenchNational(x)",
                "CitizenOf(x, y)",
                "SpanishNational(x)",
                "NorthKoreanNational(x)"
            ]
        },
        {
            "id": 435,
            "story_id": 149,
            "context": [
                "",
                "Guam sent an athlete to the Calgary Winter Olympics.",
                "If Guan sent an athlete to the Calgary Winter Olympics, then the athelete participated in the Olympics in 1988.",
                "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics."
            ],
            "context_fol": [
                "",
                "\u2203x (Send(guam, athlete, calgaryWinterOlympics))",
                "\u2200x (Athlete(x) \u2227 SendTo(guam, x, calgaryWinterOlympics) \u2192 ParticipatedIn(x, winterOlympics, year1988))",
                "\u2200x \u2200y (Athlete(x) \u2227 From(x, guam) \u2227 ParticipatedIn(x, winterOlympics, y) \u2192 x=juddBankert)"
            ],
            "question": "Judd Bankert competed in the 1988 Winter Olympics.",
            "question_fol": "ParticipatedIn(juddBankert, winterOlympics, year1988)",
            "label": "True",
            "predicates_fol": [
                "Send(x, y)",
                "Athlete(x)",
                "SendTo(x, y)",
                "ParticipatedIn(x, y, z)",
                "From(x, y)"
            ]
        }
    ],
    "1412": [
        {
            "id": 776,
            "story_id": 312,
            "context": [
                "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
                "Those who are enrolled in an academic program can not work full-time.",
                "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
                "All PhD graduate can work full-time. ",
                "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
            ],
            "context_fol": [
                "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))",
                "\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))",
                "\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))",
                "\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))",
                "\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)"
            ],
            "question": "Tom is a PhD graduate.",
            "question_fol": "PhdGraduate(tom)",
            "label": "False",
            "predicates_fol": [
                "Have(x, y)",
                "EnrolledIn(x, y)",
                "Work(x, y)",
                "StudyIn(x, y)",
                "PhDGraduate(x)"
            ]
        },
        {
            "id": 1378,
            "story_id": 475,
            "context": [
                "Everyone who is entitled to national social insurance coverage can have their medical bills partially covered. ",
                "All PRC nationals are entitled to national social insurance coverage.",
                "Everyone in the Franco-China diplomatic conference is either a PRC national or a French national, but not both. ",
                "All French nationals are citizens of the European Union. ",
                "All Spanish nationals are citizens of the European Union. ",
                "No North Korean nationals are citizens of the European Union. ",
                "Mei is at the Franco-China diplomatic conference. ",
                "Either Mei is a North Korean and can have medical bills partially covered, or neither is true."
            ],
            "context_fol": [
                "\u2200x (EntitledTo(x, nationalSocialInsuranceCoverage) \u2192 CanHavePartiallyCovered(x, medicalBills))",
                "\u2200x (PRCNational(x) \u2192 EntitledTo(x, nationalSocialInsuranceCoverage))",
                "\u2200x (In(x, franco-ChinaDiplomaticConference) \u2192 PRCNational(x) \u2295 FrenchNational(x))",
                "\u2200x (FrenchNational(x) \u2192 CitizenOf(x, europeanUnion))",
                "\u2200x (SpanishNational(x) \u2192 CitizenOf(x, europeanUnion))",
                "\u2200x (NorthKoreanNational(x) \u2192 \u00acCitizenOf(x, europeanUnion))",
                "In(mei, franco-ChinaDiplomaticConference)",
                "\u00ac(NorthKoreanNational(mei) \u2295 CanHavePartiallyCovered(mei, medicalBills))"
            ],
            "question": "Mei is a PRC national.",
            "question_fol": "PRCNational(mei)",
            "label": "Uncertain",
            "predicates_fol": [
                "EntitledTo(x, y)",
                "CanHavePartiallyCovered(x, y)",
                "PRCNational(x)",
                "In(x, y)",
                "FrenchNational(x)",
                "CitizenOf(x, y)",
                "SpanishNational(x)",
                "NorthKoreanNational(x)"
            ]
        },
        {
            "id": 435,
            "story_id": 149,
            "context": [
                "",
                "Guam sent an athlete to the Calgary Winter Olympics.",
                "If Guan sent an athlete to the Calgary Winter Olympics, then the athelete participated in the Olympics in 1988.",
                "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics."
            ],
            "context_fol": [
                "",
                "\u2203x (Send(guam, athlete, calgaryWinterOlympics))",
                "\u2200x (Athlete(x) \u2227 SendTo(guam, x, calgaryWinterOlympics) \u2192 ParticipatedIn(x, winterOlympics, year1988))",
                "\u2200x \u2200y (Athlete(x) \u2227 From(x, guam) \u2227 ParticipatedIn(x, winterOlympics, y) \u2192 x=juddBankert)"
            ],
            "question": "Judd Bankert competed in the 1988 Winter Olympics.",
            "question_fol": "ParticipatedIn(juddBankert, winterOlympics, year1988)",
            "label": "True",
            "predicates_fol": [
                "Send(x, y)",
                "Athlete(x)",
                "SendTo(x, y)",
                "ParticipatedIn(x, y, z)",
                "From(x, y)"
            ]
        }
    ],
    "1413": [
        {
            "id": 776,
            "story_id": 312,
            "context": [
                "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
                "Those who are enrolled in an academic program can not work full-time.",
                "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
                "All PhD graduate can work full-time. ",
                "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
            ],
            "context_fol": [
                "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))",
                "\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))",
                "\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))",
                "\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))",
                "\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)"
            ],
            "question": "Tom is a PhD graduate.",
            "question_fol": "PhdGraduate(tom)",
            "label": "False",
            "predicates_fol": [
                "Have(x, y)",
                "EnrolledIn(x, y)",
                "Work(x, y)",
                "StudyIn(x, y)",
                "PhDGraduate(x)"
            ]
        },
        {
            "id": 1378,
            "story_id": 475,
            "context": [
                "Everyone who is entitled to national social insurance coverage can have their medical bills partially covered. ",
                "All PRC nationals are entitled to national social insurance coverage.",
                "Everyone in the Franco-China diplomatic conference is either a PRC national or a French national, but not both. ",
                "All French nationals are citizens of the European Union. ",
                "All Spanish nationals are citizens of the European Union. ",
                "No North Korean nationals are citizens of the European Union. ",
                "Mei is at the Franco-China diplomatic conference. ",
                "Either Mei is a North Korean and can have medical bills partially covered, or neither is true."
            ],
            "context_fol": [
                "\u2200x (EntitledTo(x, nationalSocialInsuranceCoverage) \u2192 CanHavePartiallyCovered(x, medicalBills))",
                "\u2200x (PRCNational(x) \u2192 EntitledTo(x, nationalSocialInsuranceCoverage))",
                "\u2200x (In(x, franco-ChinaDiplomaticConference) \u2192 PRCNational(x) \u2295 FrenchNational(x))",
                "\u2200x (FrenchNational(x) \u2192 CitizenOf(x, europeanUnion))",
                "\u2200x (SpanishNational(x) \u2192 CitizenOf(x, europeanUnion))",
                "\u2200x (NorthKoreanNational(x) \u2192 \u00acCitizenOf(x, europeanUnion))",
                "In(mei, franco-ChinaDiplomaticConference)",
                "\u00ac(NorthKoreanNational(mei) \u2295 CanHavePartiallyCovered(mei, medicalBills))"
            ],
            "question": "Mei is a PRC national.",
            "question_fol": "PRCNational(mei)",
            "label": "Uncertain",
            "predicates_fol": [
                "EntitledTo(x, y)",
                "CanHavePartiallyCovered(x, y)",
                "PRCNational(x)",
                "In(x, y)",
                "FrenchNational(x)",
                "CitizenOf(x, y)",
                "SpanishNational(x)",
                "NorthKoreanNational(x)"
            ]
        },
        {
            "id": 435,
            "story_id": 149,
            "context": [
                "",
                "Guam sent an athlete to the Calgary Winter Olympics.",
                "If Guan sent an athlete to the Calgary Winter Olympics, then the athelete participated in the Olympics in 1988.",
                "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics."
            ],
            "context_fol": [
                "",
                "\u2203x (Send(guam, athlete, calgaryWinterOlympics))",
                "\u2200x (Athlete(x) \u2227 SendTo(guam, x, calgaryWinterOlympics) \u2192 ParticipatedIn(x, winterOlympics, year1988))",
                "\u2200x \u2200y (Athlete(x) \u2227 From(x, guam) \u2227 ParticipatedIn(x, winterOlympics, y) \u2192 x=juddBankert)"
            ],
            "question": "Judd Bankert competed in the 1988 Winter Olympics.",
            "question_fol": "ParticipatedIn(juddBankert, winterOlympics, year1988)",
            "label": "True",
            "predicates_fol": [
                "Send(x, y)",
                "Athlete(x)",
                "SendTo(x, y)",
                "ParticipatedIn(x, y, z)",
                "From(x, y)"
            ]
        }
    ],
    "1414": [
        {
            "id": 776,
            "story_id": 312,
            "context": [
                "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
                "Those who are enrolled in an academic program can not work full-time.",
                "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
                "All PhD graduate can work full-time. ",
                "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
            ],
            "context_fol": [
                "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))",
                "\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))",
                "\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))",
                "\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))",
                "\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)"
            ],
            "question": "Tom is a PhD graduate.",
            "question_fol": "PhdGraduate(tom)",
            "label": "False",
            "predicates_fol": [
                "Have(x, y)",
                "EnrolledIn(x, y)",
                "Work(x, y)",
                "StudyIn(x, y)",
                "PhDGraduate(x)"
            ]
        },
        {
            "id": 1378,
            "story_id": 475,
            "context": [
                "Everyone who is entitled to national social insurance coverage can have their medical bills partially covered. ",
                "All PRC nationals are entitled to national social insurance coverage.",
                "Everyone in the Franco-China diplomatic conference is either a PRC national or a French national, but not both. ",
                "All French nationals are citizens of the European Union. ",
                "All Spanish nationals are citizens of the European Union. ",
                "No North Korean nationals are citizens of the European Union. ",
                "Mei is at the Franco-China diplomatic conference. ",
                "Either Mei is a North Korean and can have medical bills partially covered, or neither is true."
            ],
            "context_fol": [
                "\u2200x (EntitledTo(x, nationalSocialInsuranceCoverage) \u2192 CanHavePartiallyCovered(x, medicalBills))",
                "\u2200x (PRCNational(x) \u2192 EntitledTo(x, nationalSocialInsuranceCoverage))",
                "\u2200x (In(x, franco-ChinaDiplomaticConference) \u2192 PRCNational(x) \u2295 FrenchNational(x))",
                "\u2200x (FrenchNational(x) \u2192 CitizenOf(x, europeanUnion))",
                "\u2200x (SpanishNational(x) \u2192 CitizenOf(x, europeanUnion))",
                "\u2200x (NorthKoreanNational(x) \u2192 \u00acCitizenOf(x, europeanUnion))",
                "In(mei, franco-ChinaDiplomaticConference)",
                "\u00ac(NorthKoreanNational(mei) \u2295 CanHavePartiallyCovered(mei, medicalBills))"
            ],
            "question": "Mei is a PRC national.",
            "question_fol": "PRCNational(mei)",
            "label": "Uncertain",
            "predicates_fol": [
                "EntitledTo(x, y)",
                "CanHavePartiallyCovered(x, y)",
                "PRCNational(x)",
                "In(x, y)",
                "FrenchNational(x)",
                "CitizenOf(x, y)",
                "SpanishNational(x)",
                "NorthKoreanNational(x)"
            ]
        },
        {
            "id": 435,
            "story_id": 149,
            "context": [
                "",
                "Guam sent an athlete to the Calgary Winter Olympics.",
                "If Guan sent an athlete to the Calgary Winter Olympics, then the athelete participated in the Olympics in 1988.",
                "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics."
            ],
            "context_fol": [
                "",
                "\u2203x (Send(guam, athlete, calgaryWinterOlympics))",
                "\u2200x (Athlete(x) \u2227 SendTo(guam, x, calgaryWinterOlympics) \u2192 ParticipatedIn(x, winterOlympics, year1988))",
                "\u2200x \u2200y (Athlete(x) \u2227 From(x, guam) \u2227 ParticipatedIn(x, winterOlympics, y) \u2192 x=juddBankert)"
            ],
            "question": "Judd Bankert competed in the 1988 Winter Olympics.",
            "question_fol": "ParticipatedIn(juddBankert, winterOlympics, year1988)",
            "label": "True",
            "predicates_fol": [
                "Send(x, y)",
                "Athlete(x)",
                "SendTo(x, y)",
                "ParticipatedIn(x, y, z)",
                "From(x, y)"
            ]
        }
    ],
    "243": [
        {
            "id": 364,
            "story_id": 122,
            "context": [
                "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
                "Science fiction novels are not about mythological creatures",
                "Beasts of Prey Is about a creature known as the Shetani.",
                "Shetanis are mythological."
            ],
            "context_fol": [
                "Novel(beastsOfPrey) \u2192 (Fantasy(beastsOfPrey) \u2228 ScienceFiction(beastsOfPrey))",
                "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))",
                "About(beastsOfPrey, shetani) \u2227 Creature(shetani)",
                "Mythological(shetani)"
            ],
            "question": "Beasts of prey is a fantasy novel.",
            "question_fol": "Fantasy(beastsOfpPrey) \u2227 Novel(beastsOfPrey)",
            "label": "True",
            "predicates_fol": [
                "Novel(x)",
                "Fantasy(x)",
                "ScienceFiction(x)",
                "Mythological(x)",
                "Creature(x)",
                "About(x, y)"
            ]
        },
        {
            "id": 1166,
            "story_id": 415,
            "context": [
                "All books written by Neil Gaiman have sold more than one thousand copies.",
                "Some books that have won Hugo Awards are written by Neil Gaiman.",
                "Tomas has read all books written by Tolkien. ",
                "Either Tomas has read Hamlet, or it has sold more than one thousand copies.",
                "Hamlet has either sold more than one thousand copies or it is written by Neil Gaiman."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))",
                "\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))",
                "\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))",
                "ReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))",
                "\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)"
            ],
            "question": "Hamlet has won a Hugo Award.",
            "question_fol": "Win(hamlet, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "SoldCopies(x, y)",
                "Win(x, y)",
                "ReadBy(x, y)"
            ]
        },
        {
            "id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are forward-looking.",
                "The book Three-Body Problem has sold more than 1 million copies.",
                "The Three-Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, cixinLiu)) \u2192 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(x,y)))",
                "\u2203x (Won(x, hugoAward) \u2227 Book(x) \u2227 WrittenBy(x, cixinLiu))",
                "\u2200x ((Book(x) \u2227 AboutFuture(x)) \u2192 FowardLooking(x))",
                "Book(threeBodyProblem) \u2227 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(threeBodyProblem,y))",
                "AboutFuture(threeBodyProblem)"
            ],
            "question": "The Three-Body Problem won the Hugo Award.",
            "question_fol": "Won(threeBodyProblem, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "Sold(x, y)",
                "Won(x, y)",
                "AboutFuture(x)",
                "FowardLooking(x)"
            ]
        }
    ],
    "244": [
        {
            "id": 364,
            "story_id": 122,
            "context": [
                "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
                "Science fiction novels are not about mythological creatures",
                "Beasts of Prey Is about a creature known as the Shetani.",
                "Shetanis are mythological."
            ],
            "context_fol": [
                "Novel(beastsOfPrey) \u2192 (Fantasy(beastsOfPrey) \u2228 ScienceFiction(beastsOfPrey))",
                "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))",
                "About(beastsOfPrey, shetani) \u2227 Creature(shetani)",
                "Mythological(shetani)"
            ],
            "question": "Beasts of prey is a fantasy novel.",
            "question_fol": "Fantasy(beastsOfpPrey) \u2227 Novel(beastsOfPrey)",
            "label": "True",
            "predicates_fol": [
                "Novel(x)",
                "Fantasy(x)",
                "ScienceFiction(x)",
                "Mythological(x)",
                "Creature(x)",
                "About(x, y)"
            ]
        },
        {
            "id": 1166,
            "story_id": 415,
            "context": [
                "All books written by Neil Gaiman have sold more than one thousand copies.",
                "Some books that have won Hugo Awards are written by Neil Gaiman.",
                "Tomas has read all books written by Tolkien. ",
                "Either Tomas has read Hamlet, or it has sold more than one thousand copies.",
                "Hamlet has either sold more than one thousand copies or it is written by Neil Gaiman."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))",
                "\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))",
                "\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))",
                "ReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))",
                "\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)"
            ],
            "question": "Hamlet has won a Hugo Award.",
            "question_fol": "Win(hamlet, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "SoldCopies(x, y)",
                "Win(x, y)",
                "ReadBy(x, y)"
            ]
        },
        {
            "id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are forward-looking.",
                "The book Three-Body Problem has sold more than 1 million copies.",
                "The Three-Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, cixinLiu)) \u2192 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(x,y)))",
                "\u2203x (Won(x, hugoAward) \u2227 Book(x) \u2227 WrittenBy(x, cixinLiu))",
                "\u2200x ((Book(x) \u2227 AboutFuture(x)) \u2192 FowardLooking(x))",
                "Book(threeBodyProblem) \u2227 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(threeBodyProblem,y))",
                "AboutFuture(threeBodyProblem)"
            ],
            "question": "The Three-Body Problem won the Hugo Award.",
            "question_fol": "Won(threeBodyProblem, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "Sold(x, y)",
                "Won(x, y)",
                "AboutFuture(x)",
                "FowardLooking(x)"
            ]
        }
    ],
    "245": [
        {
            "id": 364,
            "story_id": 122,
            "context": [
                "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
                "Science fiction novels are not about mythological creatures",
                "Beasts of Prey Is about a creature known as the Shetani.",
                "Shetanis are mythological."
            ],
            "context_fol": [
                "Novel(beastsOfPrey) \u2192 (Fantasy(beastsOfPrey) \u2228 ScienceFiction(beastsOfPrey))",
                "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))",
                "About(beastsOfPrey, shetani) \u2227 Creature(shetani)",
                "Mythological(shetani)"
            ],
            "question": "Beasts of prey is a fantasy novel.",
            "question_fol": "Fantasy(beastsOfpPrey) \u2227 Novel(beastsOfPrey)",
            "label": "True",
            "predicates_fol": [
                "Novel(x)",
                "Fantasy(x)",
                "ScienceFiction(x)",
                "Mythological(x)",
                "Creature(x)",
                "About(x, y)"
            ]
        },
        {
            "id": 1166,
            "story_id": 415,
            "context": [
                "All books written by Neil Gaiman have sold more than one thousand copies.",
                "Some books that have won Hugo Awards are written by Neil Gaiman.",
                "Tomas has read all books written by Tolkien. ",
                "Either Tomas has read Hamlet, or it has sold more than one thousand copies.",
                "Hamlet has either sold more than one thousand copies or it is written by Neil Gaiman."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))",
                "\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))",
                "\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))",
                "ReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))",
                "\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)"
            ],
            "question": "Hamlet has won a Hugo Award.",
            "question_fol": "Win(hamlet, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "SoldCopies(x, y)",
                "Win(x, y)",
                "ReadBy(x, y)"
            ]
        },
        {
            "id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are forward-looking.",
                "The book Three-Body Problem has sold more than 1 million copies.",
                "The Three-Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x ((Book(x) \u2227 WrittenBy(x, cixinLiu)) \u2192 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(x,y)))",
                "\u2203x (Won(x, hugoAward) \u2227 Book(x) \u2227 WrittenBy(x, cixinLiu))",
                "\u2200x ((Book(x) \u2227 AboutFuture(x)) \u2192 FowardLooking(x))",
                "Book(threeBodyProblem) \u2227 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(threeBodyProblem,y))",
                "AboutFuture(threeBodyProblem)"
            ],
            "question": "The Three-Body Problem won the Hugo Award.",
            "question_fol": "Won(threeBodyProblem, hugoAward)",
            "label": "Uncertain",
            "predicates_fol": [
                "Book(x)",
                "WrittenBy(x, y)",
                "MoreThan(x, y)",
                "Sold(x, y)",
                "Won(x, y)",
                "AboutFuture(x)",
                "FowardLooking(x)"
            ]
        }
    ],
    "964": [
        {
            "id": 713,
            "story_id": 269,
            "context": [
                "All proteins are organic compounds.",
                "All enzymes are organic compounds."
            ],
            "context_fol": [
                "\u2200x (Protein(x) \u2192 OrganicCompound(x))",
                "\u2200x (Enzyme(x) \u2192 OrganicCompound(x))"
            ],
            "question": "All enzymes are proteins.",
            "question_fol": "\u2200x (Enzyme(x) \u2192 Protein(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Protein(x)",
                "OrganicCompound(x)",
                "Enzyme(x)"
            ]
        },
        {
            "id": 715,
            "story_id": 271,
            "context": [
                "No plants are fungi.",
                "Mushrooms are fungi."
            ],
            "context_fol": [
                "\u2200x (Plant(x) \u2192 \u00acFungi(x))",
                "\u2200x (Mushroom(x) \u2192 Fungi(x))"
            ],
            "question": "No plants are mushrooms.",
            "question_fol": "\u2200x (Plant(x) \u2192 \u00acMushroom(x))",
            "label": "True",
            "predicates_fol": [
                "Plant(x)",
                "Fungi(x)",
                "Mushroom(x)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "965": [
        {
            "id": 713,
            "story_id": 269,
            "context": [
                "All proteins are organic compounds.",
                "All enzymes are organic compounds."
            ],
            "context_fol": [
                "\u2200x (Protein(x) \u2192 OrganicCompound(x))",
                "\u2200x (Enzyme(x) \u2192 OrganicCompound(x))"
            ],
            "question": "All enzymes are proteins.",
            "question_fol": "\u2200x (Enzyme(x) \u2192 Protein(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Protein(x)",
                "OrganicCompound(x)",
                "Enzyme(x)"
            ]
        },
        {
            "id": 715,
            "story_id": 271,
            "context": [
                "No plants are fungi.",
                "Mushrooms are fungi."
            ],
            "context_fol": [
                "\u2200x (Plant(x) \u2192 \u00acFungi(x))",
                "\u2200x (Mushroom(x) \u2192 Fungi(x))"
            ],
            "question": "No plants are mushrooms.",
            "question_fol": "\u2200x (Plant(x) \u2192 \u00acMushroom(x))",
            "label": "True",
            "predicates_fol": [
                "Plant(x)",
                "Fungi(x)",
                "Mushroom(x)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "966": [
        {
            "id": 713,
            "story_id": 269,
            "context": [
                "All proteins are organic compounds.",
                "All enzymes are organic compounds."
            ],
            "context_fol": [
                "\u2200x (Protein(x) \u2192 OrganicCompound(x))",
                "\u2200x (Enzyme(x) \u2192 OrganicCompound(x))"
            ],
            "question": "All enzymes are proteins.",
            "question_fol": "\u2200x (Enzyme(x) \u2192 Protein(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Protein(x)",
                "OrganicCompound(x)",
                "Enzyme(x)"
            ]
        },
        {
            "id": 715,
            "story_id": 271,
            "context": [
                "No plants are fungi.",
                "Mushrooms are fungi."
            ],
            "context_fol": [
                "\u2200x (Plant(x) \u2192 \u00acFungi(x))",
                "\u2200x (Mushroom(x) \u2192 Fungi(x))"
            ],
            "question": "No plants are mushrooms.",
            "question_fol": "\u2200x (Plant(x) \u2192 \u00acMushroom(x))",
            "label": "True",
            "predicates_fol": [
                "Plant(x)",
                "Fungi(x)",
                "Mushroom(x)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "702": [
        {
            "id": 1310,
            "story_id": 455,
            "context": [
                "All philosophers reason. ",
                "Some sophists reason. ",
                "All who can reason can distinguish truth from falsehood.",
                "Nobody who can distinguish truth from falsehood is morally perfect.  ",
                "The theistic God is morally perfect."
            ],
            "context_fol": [
                "\u2200x (Philosopher(x) \u2192 Reason(x))",
                "\u2203x (Sophist(x) \u2227 Reason(x))",
                "\u2200x (Reason(x) \u2192 CanDistinguishFrom(x, truth, falsehood))",
                "\u2200x (CanDistinguishFrom(x, truth, falsehood) \u2192 \u00acMorallyPerfect(x))",
                "MorallyPerfect(theisticGod)"
            ],
            "question": "The theistic God is a sophist.",
            "question_fol": "Sophist(theisticGod)",
            "label": "Uncertain",
            "predicates_fol": [
                "Philosopher(x)",
                "Reason(x)",
                "Sophist(x)",
                "CanDistinguishFrom(x, y)",
                "MorallyPerfect(x)"
            ]
        },
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 213,
            "story_id": 71,
            "context": [
                "Herodicus was a Greek physician, dietician, sophist, and gymnast.",
                "Herodicus was born in the city of Selymbria.",
                "Selymbria is a colony of the city-state Megara.",
                "One of the tutors of Hippocrates was Herodicus.",
                "Massages were recommended by Herodicus.",
                "Some of the theories of Herodicus are considered to be the foundation of sports medicine."
            ],
            "context_fol": [
                "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 Gymnast(herodicus)",
                "Born(herodicus, selymbia) \u2227 City(selymbia)",
                "Colony(selymbia, megara) \u2227 CityState(megara)",
                "Tutor(herodicus, hippocrates)",
                "Recommend(herodicus, massages)",
                "\u2203x \u2203y (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine) \u2227 (\u00ac(x=y)) \u2227 Theory(y) \u2227 From(y, herodicus) \u2227 FoundationOf(y, sportsMedicine))"
            ],
            "question": "Herodicus tutored Hippocrates.",
            "question_fol": "Tutor(herodicus, hippocrates)",
            "label": "True",
            "predicates_fol": [
                "Greek(x)",
                "Physician(x)",
                "Dietician(x)",
                "Sophist(x)",
                "Gymnast(x)",
                "Born(x, y)",
                "City(x)",
                "Colony(x, y)",
                "CityState(x)",
                "Tutor(x, y)",
                "Recommend(x, y)",
                "Theory(x)",
                "From(x, y)",
                "FoundationOf(x, y)"
            ]
        }
    ],
    "1244": [
        {
            "id": 1298,
            "story_id": 451,
            "context": [
                "People on the payroll are being paid by the school.",
                "If someone has a job at a school, then they are on the payroll.",
                "All faculty members have a job at a school.",
                "If someone teaches students, they are a faculty member or a teacher.",
                "Every teacher has students.",
                "If Nancy is a teacher, then they are on the payroll.",
                "If Nancy is not a teacher, then they are not paid by the school.",
                "Nancy teaches students."
            ],
            "context_fol": [
                "\u2200x (OnPayroll(x) \u2192 PaidBy(x, school))",
                "\u2200x (HaveJobAt(x, school) \u2192 OnPayroll(x))",
                "\u2200x (FacultyMember(x) \u2192 HaveJobAt(x, school))",
                "\u2200x (Teach(x, student) \u2192 FacultyMember(x) \u2228 Teacher(x))",
                "\u2200x (Teacher(x) \u2192 Have(x, student))",
                "Teacher(nancy) \u2192 OnPayroll(nancy)",
                "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)",
                "Teach(nancy, student)"
            ],
            "question": "Nancy is a faculty member.",
            "question_fol": "FacultyMember(nancy)",
            "label": "Uncertain",
            "predicates_fol": [
                "OnPayroll(x)",
                "PaidBy(x, y)",
                "HaveJobAt(x, y)",
                "FacultyMember(x)",
                "Teach(x, y)",
                "Teacher(x)",
                "Have(x, y)"
            ]
        },
        {
            "id": 1181,
            "story_id": 419,
            "context": [
                "Some employees in James's town who work in business analysis are good at math. ",
                "All of the employees in James's town who work in business analysis are working for this company. ",
                "None of the employees in James's town who work for this company are from China. ",
                "All of the employees in James's town working in software engineering are from China. ",
                "Leif is an employee in James's town, and he is working in software engineering.  "
            ],
            "context_fol": [
                "\u2203x \u2203y (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis) \u2227 GoodAt(x, math) \u2227 (\u00ac(x=y)) \u2227 EmployeeIn(y, jamesSTown) \u2227 WorkIn(y, businessAnalysis) \u2227 GoodAt(y, math))",
                "\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis)) \u2192 WorkFor(x, thisCompany))",
                "\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkFor(x, thisCompany)) \u2192 \u00acFrom(x, china))",
                "\u2200x (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, softwareEngineering) \u2192 From(x, china))",
                "EmployeeIn(leif, jamesSTown) \u2227 WorkIn(leif, softwareEngineering)"
            ],
            "question": "Leif is good at math.",
            "question_fol": "EmployeesInJamesSTown(leif) \u2227 GoodAt(leif, math)",
            "label": "Uncertain",
            "predicates_fol": [
                "EmployeeIn(x, y)",
                "WorkIn(x, y)",
                "GoodAt(x, y)",
                "WorkFor(x, y)",
                "From(x, y)"
            ]
        },
        {
            "id": 1354,
            "story_id": 469,
            "context": [
                "All members of the university faculty are professors.",
                "All principal investigators are members of the university faculty.",
                "No professor is also an undergraduate student.",
                "Anyone pursuing a bachelor's degree is an undergraduate student.",
                "Leon is not pursuing a bachelor's degree, and he is not a principal investigator.",
                "If Leon is not pursuing a bachelor's degree, then he is a professor."
            ],
            "context_fol": [
                "\u2200x (MemberOf(x, universityFaculty) \u2192 Professor(x))",
                "\u2200x (PrincipalInvestigator(x) \u2192 MemberOf(x, universityFaculty))",
                "\u2200x (Professor(x) \u2192 \u00acUndergraduateStudent(x))",
                "\u2200x (Pursuing(x, bachelor) \u2192 UndergraduateStudent(x))",
                "\u00ac(Pursuing(leon, bachelor) \u2295 PrincipalInvestigator(leon))",
                "\u00acPursuing(leon, bachelor) \u2192 Professor(leon)"
            ],
            "question": "Leon is a member of university faculty.",
            "question_fol": "MemberOf(leon, universityFaculty)",
            "label": "Uncertain",
            "predicates_fol": [
                "MemberOf(x, y)",
                "Professor(x)",
                "PrincipalInvestigator(x)",
                "UndergraduateStudent(x)",
                "Pursuing(x, y)"
            ]
        }
    ],
    "1245": [
        {
            "id": 1298,
            "story_id": 451,
            "context": [
                "People on the payroll are being paid by the school.",
                "If someone has a job at a school, then they are on the payroll.",
                "All faculty members have a job at a school.",
                "If someone teaches students, they are a faculty member or a teacher.",
                "Every teacher has students.",
                "If Nancy is a teacher, then they are on the payroll.",
                "If Nancy is not a teacher, then they are not paid by the school.",
                "Nancy teaches students."
            ],
            "context_fol": [
                "\u2200x (OnPayroll(x) \u2192 PaidBy(x, school))",
                "\u2200x (HaveJobAt(x, school) \u2192 OnPayroll(x))",
                "\u2200x (FacultyMember(x) \u2192 HaveJobAt(x, school))",
                "\u2200x (Teach(x, student) \u2192 FacultyMember(x) \u2228 Teacher(x))",
                "\u2200x (Teacher(x) \u2192 Have(x, student))",
                "Teacher(nancy) \u2192 OnPayroll(nancy)",
                "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)",
                "Teach(nancy, student)"
            ],
            "question": "Nancy is a faculty member.",
            "question_fol": "FacultyMember(nancy)",
            "label": "Uncertain",
            "predicates_fol": [
                "OnPayroll(x)",
                "PaidBy(x, y)",
                "HaveJobAt(x, y)",
                "FacultyMember(x)",
                "Teach(x, y)",
                "Teacher(x)",
                "Have(x, y)"
            ]
        },
        {
            "id": 1181,
            "story_id": 419,
            "context": [
                "Some employees in James's town who work in business analysis are good at math. ",
                "All of the employees in James's town who work in business analysis are working for this company. ",
                "None of the employees in James's town who work for this company are from China. ",
                "All of the employees in James's town working in software engineering are from China. ",
                "Leif is an employee in James's town, and he is working in software engineering.  "
            ],
            "context_fol": [
                "\u2203x \u2203y (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis) \u2227 GoodAt(x, math) \u2227 (\u00ac(x=y)) \u2227 EmployeeIn(y, jamesSTown) \u2227 WorkIn(y, businessAnalysis) \u2227 GoodAt(y, math))",
                "\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis)) \u2192 WorkFor(x, thisCompany))",
                "\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkFor(x, thisCompany)) \u2192 \u00acFrom(x, china))",
                "\u2200x (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, softwareEngineering) \u2192 From(x, china))",
                "EmployeeIn(leif, jamesSTown) \u2227 WorkIn(leif, softwareEngineering)"
            ],
            "question": "Leif is good at math.",
            "question_fol": "EmployeesInJamesSTown(leif) \u2227 GoodAt(leif, math)",
            "label": "Uncertain",
            "predicates_fol": [
                "EmployeeIn(x, y)",
                "WorkIn(x, y)",
                "GoodAt(x, y)",
                "WorkFor(x, y)",
                "From(x, y)"
            ]
        },
        {
            "id": 1354,
            "story_id": 469,
            "context": [
                "All members of the university faculty are professors.",
                "All principal investigators are members of the university faculty.",
                "No professor is also an undergraduate student.",
                "Anyone pursuing a bachelor's degree is an undergraduate student.",
                "Leon is not pursuing a bachelor's degree, and he is not a principal investigator.",
                "If Leon is not pursuing a bachelor's degree, then he is a professor."
            ],
            "context_fol": [
                "\u2200x (MemberOf(x, universityFaculty) \u2192 Professor(x))",
                "\u2200x (PrincipalInvestigator(x) \u2192 MemberOf(x, universityFaculty))",
                "\u2200x (Professor(x) \u2192 \u00acUndergraduateStudent(x))",
                "\u2200x (Pursuing(x, bachelor) \u2192 UndergraduateStudent(x))",
                "\u00ac(Pursuing(leon, bachelor) \u2295 PrincipalInvestigator(leon))",
                "\u00acPursuing(leon, bachelor) \u2192 Professor(leon)"
            ],
            "question": "Leon is a member of university faculty.",
            "question_fol": "MemberOf(leon, universityFaculty)",
            "label": "Uncertain",
            "predicates_fol": [
                "MemberOf(x, y)",
                "Professor(x)",
                "PrincipalInvestigator(x)",
                "UndergraduateStudent(x)",
                "Pursuing(x, y)"
            ]
        }
    ],
    "1246": [
        {
            "id": 1298,
            "story_id": 451,
            "context": [
                "People on the payroll are being paid by the school.",
                "If someone has a job at a school, then they are on the payroll.",
                "All faculty members have a job at a school.",
                "If someone teaches students, they are a faculty member or a teacher.",
                "Every teacher has students.",
                "If Nancy is a teacher, then they are on the payroll.",
                "If Nancy is not a teacher, then they are not paid by the school.",
                "Nancy teaches students."
            ],
            "context_fol": [
                "\u2200x (OnPayroll(x) \u2192 PaidBy(x, school))",
                "\u2200x (HaveJobAt(x, school) \u2192 OnPayroll(x))",
                "\u2200x (FacultyMember(x) \u2192 HaveJobAt(x, school))",
                "\u2200x (Teach(x, student) \u2192 FacultyMember(x) \u2228 Teacher(x))",
                "\u2200x (Teacher(x) \u2192 Have(x, student))",
                "Teacher(nancy) \u2192 OnPayroll(nancy)",
                "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)",
                "Teach(nancy, student)"
            ],
            "question": "Nancy is a faculty member.",
            "question_fol": "FacultyMember(nancy)",
            "label": "Uncertain",
            "predicates_fol": [
                "OnPayroll(x)",
                "PaidBy(x, y)",
                "HaveJobAt(x, y)",
                "FacultyMember(x)",
                "Teach(x, y)",
                "Teacher(x)",
                "Have(x, y)"
            ]
        },
        {
            "id": 1181,
            "story_id": 419,
            "context": [
                "Some employees in James's town who work in business analysis are good at math. ",
                "All of the employees in James's town who work in business analysis are working for this company. ",
                "None of the employees in James's town who work for this company are from China. ",
                "All of the employees in James's town working in software engineering are from China. ",
                "Leif is an employee in James's town, and he is working in software engineering.  "
            ],
            "context_fol": [
                "\u2203x \u2203y (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis) \u2227 GoodAt(x, math) \u2227 (\u00ac(x=y)) \u2227 EmployeeIn(y, jamesSTown) \u2227 WorkIn(y, businessAnalysis) \u2227 GoodAt(y, math))",
                "\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis)) \u2192 WorkFor(x, thisCompany))",
                "\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkFor(x, thisCompany)) \u2192 \u00acFrom(x, china))",
                "\u2200x (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, softwareEngineering) \u2192 From(x, china))",
                "EmployeeIn(leif, jamesSTown) \u2227 WorkIn(leif, softwareEngineering)"
            ],
            "question": "Leif is good at math.",
            "question_fol": "EmployeesInJamesSTown(leif) \u2227 GoodAt(leif, math)",
            "label": "Uncertain",
            "predicates_fol": [
                "EmployeeIn(x, y)",
                "WorkIn(x, y)",
                "GoodAt(x, y)",
                "WorkFor(x, y)",
                "From(x, y)"
            ]
        },
        {
            "id": 1354,
            "story_id": 469,
            "context": [
                "All members of the university faculty are professors.",
                "All principal investigators are members of the university faculty.",
                "No professor is also an undergraduate student.",
                "Anyone pursuing a bachelor's degree is an undergraduate student.",
                "Leon is not pursuing a bachelor's degree, and he is not a principal investigator.",
                "If Leon is not pursuing a bachelor's degree, then he is a professor."
            ],
            "context_fol": [
                "\u2200x (MemberOf(x, universityFaculty) \u2192 Professor(x))",
                "\u2200x (PrincipalInvestigator(x) \u2192 MemberOf(x, universityFaculty))",
                "\u2200x (Professor(x) \u2192 \u00acUndergraduateStudent(x))",
                "\u2200x (Pursuing(x, bachelor) \u2192 UndergraduateStudent(x))",
                "\u00ac(Pursuing(leon, bachelor) \u2295 PrincipalInvestigator(leon))",
                "\u00acPursuing(leon, bachelor) \u2192 Professor(leon)"
            ],
            "question": "Leon is a member of university faculty.",
            "question_fol": "MemberOf(leon, universityFaculty)",
            "label": "Uncertain",
            "predicates_fol": [
                "MemberOf(x, y)",
                "Professor(x)",
                "PrincipalInvestigator(x)",
                "UndergraduateStudent(x)",
                "Pursuing(x, y)"
            ]
        }
    ],
    "1247": [
        {
            "id": 1298,
            "story_id": 451,
            "context": [
                "People on the payroll are being paid by the school.",
                "If someone has a job at a school, then they are on the payroll.",
                "All faculty members have a job at a school.",
                "If someone teaches students, they are a faculty member or a teacher.",
                "Every teacher has students.",
                "If Nancy is a teacher, then they are on the payroll.",
                "If Nancy is not a teacher, then they are not paid by the school.",
                "Nancy teaches students."
            ],
            "context_fol": [
                "\u2200x (OnPayroll(x) \u2192 PaidBy(x, school))",
                "\u2200x (HaveJobAt(x, school) \u2192 OnPayroll(x))",
                "\u2200x (FacultyMember(x) \u2192 HaveJobAt(x, school))",
                "\u2200x (Teach(x, student) \u2192 FacultyMember(x) \u2228 Teacher(x))",
                "\u2200x (Teacher(x) \u2192 Have(x, student))",
                "Teacher(nancy) \u2192 OnPayroll(nancy)",
                "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)",
                "Teach(nancy, student)"
            ],
            "question": "Nancy is a faculty member.",
            "question_fol": "FacultyMember(nancy)",
            "label": "Uncertain",
            "predicates_fol": [
                "OnPayroll(x)",
                "PaidBy(x, y)",
                "HaveJobAt(x, y)",
                "FacultyMember(x)",
                "Teach(x, y)",
                "Teacher(x)",
                "Have(x, y)"
            ]
        },
        {
            "id": 1181,
            "story_id": 419,
            "context": [
                "Some employees in James's town who work in business analysis are good at math. ",
                "All of the employees in James's town who work in business analysis are working for this company. ",
                "None of the employees in James's town who work for this company are from China. ",
                "All of the employees in James's town working in software engineering are from China. ",
                "Leif is an employee in James's town, and he is working in software engineering.  "
            ],
            "context_fol": [
                "\u2203x \u2203y (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis) \u2227 GoodAt(x, math) \u2227 (\u00ac(x=y)) \u2227 EmployeeIn(y, jamesSTown) \u2227 WorkIn(y, businessAnalysis) \u2227 GoodAt(y, math))",
                "\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis)) \u2192 WorkFor(x, thisCompany))",
                "\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkFor(x, thisCompany)) \u2192 \u00acFrom(x, china))",
                "\u2200x (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, softwareEngineering) \u2192 From(x, china))",
                "EmployeeIn(leif, jamesSTown) \u2227 WorkIn(leif, softwareEngineering)"
            ],
            "question": "Leif is good at math.",
            "question_fol": "EmployeesInJamesSTown(leif) \u2227 GoodAt(leif, math)",
            "label": "Uncertain",
            "predicates_fol": [
                "EmployeeIn(x, y)",
                "WorkIn(x, y)",
                "GoodAt(x, y)",
                "WorkFor(x, y)",
                "From(x, y)"
            ]
        },
        {
            "id": 1354,
            "story_id": 469,
            "context": [
                "All members of the university faculty are professors.",
                "All principal investigators are members of the university faculty.",
                "No professor is also an undergraduate student.",
                "Anyone pursuing a bachelor's degree is an undergraduate student.",
                "Leon is not pursuing a bachelor's degree, and he is not a principal investigator.",
                "If Leon is not pursuing a bachelor's degree, then he is a professor."
            ],
            "context_fol": [
                "\u2200x (MemberOf(x, universityFaculty) \u2192 Professor(x))",
                "\u2200x (PrincipalInvestigator(x) \u2192 MemberOf(x, universityFaculty))",
                "\u2200x (Professor(x) \u2192 \u00acUndergraduateStudent(x))",
                "\u2200x (Pursuing(x, bachelor) \u2192 UndergraduateStudent(x))",
                "\u00ac(Pursuing(leon, bachelor) \u2295 PrincipalInvestigator(leon))",
                "\u00acPursuing(leon, bachelor) \u2192 Professor(leon)"
            ],
            "question": "Leon is a member of university faculty.",
            "question_fol": "MemberOf(leon, universityFaculty)",
            "label": "Uncertain",
            "predicates_fol": [
                "MemberOf(x, y)",
                "Professor(x)",
                "PrincipalInvestigator(x)",
                "UndergraduateStudent(x)",
                "Pursuing(x, y)"
            ]
        }
    ],
    "618": [
        {
            "id": 518,
            "story_id": 180,
            "context": [
                "Sam is doing a project.",
                "A project is written either in C++ or Python.",
                "If Sam does a project written in Python, he will not use a Mac.",
                "Sam is using a Mac.",
                "If Sam uses a Mac, he will play a song.",
                "If a song is not titled \"Perfect,\" Sam will never play it."
            ],
            "context_fol": [
                "\u2203x (Project(x) \u2227 Do(sam, x))",
                "\u2200x (Project(x) \u2192 (WrittenIn(x, cplusplus) \u2295 WrittenIn(x, python)))",
                "\u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))",
                "Use(sam, mac)",
                "\u2203x (Use(sam, mac) \u2227 Song(x) \u2192 Play(sam, x))",
                "\u2200x (Song(x) \u2227 Play(sam, x) \u2192 Titled(x, perfect))"
            ],
            "question": "The project Sam is doing is written in C++.",
            "question_fol": "\u2200x (Project(x) \u2227 Do(sam, x) \u2227 WrittenIn(x, cplusplus))",
            "label": "True",
            "predicates_fol": [
                "Project(x)",
                "Do(x, y)",
                "WrittenIn(x, y)",
                "Use(x, y)",
                "Song(x)",
                "Play(x, y)",
                "Titled(x, y)"
            ]
        },
        {
            "id": 1123,
            "story_id": 405,
            "context": [
                "Everyone who works in the office is a commuter. ",
                "People either work in the office or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup. ",
                "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
            ],
            "context_fol": [
                "\u2200x (WorkIn(x, office) \u2192 Commuter(x))",
                "\u2200x (WorkIn(x, office) \u2295 WorkFrom(x, home))",
                "\u2200x (WorkFrom(x, home) \u2192 Have(x, relaxedSchedule))",
                "Commuter(george) \u2295 Have(george, homeOffice)",
                "(WorkFrom(george, home) \u2295 Have(george, homeOffice)) \u2192 \u00acWorkFrom(george, home) \u2227 Commuter(george)"
            ],
            "question": "George is a person who works from home.",
            "question_fol": "WorkFrom(george, home)",
            "label": "Uncertain",
            "predicates_fol": [
                "WorkIn(x, y)",
                "Commuter(x)",
                "WorkFrom(x, y)",
                "Have(x, y)"
            ]
        },
        {
            "id": 683,
            "story_id": 241,
            "context": [
                "All students learning piano can strike the right notes. ",
                "All students who can strike the right note can get the rhythms right. ",
                "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ",
                "Some students who start working on coordination between the left and the right hands become good at it, while other students find it challenging. ",
                "If John can strike the right notes, get the rhythms right, and is good at coordination between right and left hands, then he puts emotions into his playing. ",
                "John is a student learning piano. ",
                "John does not find coordination between the left and the right hands challenging. "
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2227 LearningPiano(x) \u2192 Can(x, strike, rightNote))",
                "\u2200x (Student(x) \u2227  Can(x, strike, rightNote) \u2192 Can(x, getTheRhythmRight))",
                "\u2200x (Student(x) \u2227 Can(x, getTheRhythmRight) \u2192 Start(x, workingOnCoordinationBetweenTheLeftAndRightHands))",
                "\u2200x (Student(x) \u2227 Start(x, workingOnCoordinationBetweenTheLeftAndRightHands) \u2192 Become(x, goodAtCoordination) \u2295 Find(x, coordinationChallenging))",
                "(Can(john, getTheRhythmRight) \u2227 Can(john, getTheRhythmRight)) \u2227  Become(john, goodAtCoordination)  \u2192 PutEmotionInto(john, hisPlaying)",
                "Student(john) \u2227 LearningPiano(john)",
                "\u00acFind(john, coordinationChallenging)"
            ],
            "question": "John can get the rhythms right.",
            "question_fol": "Can(john, getTheRhythmRight)",
            "label": "True",
            "predicates_fol": [
                "Student(x)",
                "LearningPiano(x)",
                "Can(x, y)",
                "Start(x, y)",
                "Become(x, y)",
                "Find(x, y)",
                "PutEmotionInto(x, y)"
            ]
        }
    ],
    "619": [
        {
            "id": 518,
            "story_id": 180,
            "context": [
                "Sam is doing a project.",
                "A project is written either in C++ or Python.",
                "If Sam does a project written in Python, he will not use a Mac.",
                "Sam is using a Mac.",
                "If Sam uses a Mac, he will play a song.",
                "If a song is not titled \"Perfect,\" Sam will never play it."
            ],
            "context_fol": [
                "\u2203x (Project(x) \u2227 Do(sam, x))",
                "\u2200x (Project(x) \u2192 (WrittenIn(x, cplusplus) \u2295 WrittenIn(x, python)))",
                "\u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))",
                "Use(sam, mac)",
                "\u2203x (Use(sam, mac) \u2227 Song(x) \u2192 Play(sam, x))",
                "\u2200x (Song(x) \u2227 Play(sam, x) \u2192 Titled(x, perfect))"
            ],
            "question": "The project Sam is doing is written in C++.",
            "question_fol": "\u2200x (Project(x) \u2227 Do(sam, x) \u2227 WrittenIn(x, cplusplus))",
            "label": "True",
            "predicates_fol": [
                "Project(x)",
                "Do(x, y)",
                "WrittenIn(x, y)",
                "Use(x, y)",
                "Song(x)",
                "Play(x, y)",
                "Titled(x, y)"
            ]
        },
        {
            "id": 1123,
            "story_id": 405,
            "context": [
                "Everyone who works in the office is a commuter. ",
                "People either work in the office or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup. ",
                "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
            ],
            "context_fol": [
                "\u2200x (WorkIn(x, office) \u2192 Commuter(x))",
                "\u2200x (WorkIn(x, office) \u2295 WorkFrom(x, home))",
                "\u2200x (WorkFrom(x, home) \u2192 Have(x, relaxedSchedule))",
                "Commuter(george) \u2295 Have(george, homeOffice)",
                "(WorkFrom(george, home) \u2295 Have(george, homeOffice)) \u2192 \u00acWorkFrom(george, home) \u2227 Commuter(george)"
            ],
            "question": "George is a person who works from home.",
            "question_fol": "WorkFrom(george, home)",
            "label": "Uncertain",
            "predicates_fol": [
                "WorkIn(x, y)",
                "Commuter(x)",
                "WorkFrom(x, y)",
                "Have(x, y)"
            ]
        },
        {
            "id": 683,
            "story_id": 241,
            "context": [
                "All students learning piano can strike the right notes. ",
                "All students who can strike the right note can get the rhythms right. ",
                "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ",
                "Some students who start working on coordination between the left and the right hands become good at it, while other students find it challenging. ",
                "If John can strike the right notes, get the rhythms right, and is good at coordination between right and left hands, then he puts emotions into his playing. ",
                "John is a student learning piano. ",
                "John does not find coordination between the left and the right hands challenging. "
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2227 LearningPiano(x) \u2192 Can(x, strike, rightNote))",
                "\u2200x (Student(x) \u2227  Can(x, strike, rightNote) \u2192 Can(x, getTheRhythmRight))",
                "\u2200x (Student(x) \u2227 Can(x, getTheRhythmRight) \u2192 Start(x, workingOnCoordinationBetweenTheLeftAndRightHands))",
                "\u2200x (Student(x) \u2227 Start(x, workingOnCoordinationBetweenTheLeftAndRightHands) \u2192 Become(x, goodAtCoordination) \u2295 Find(x, coordinationChallenging))",
                "(Can(john, getTheRhythmRight) \u2227 Can(john, getTheRhythmRight)) \u2227  Become(john, goodAtCoordination)  \u2192 PutEmotionInto(john, hisPlaying)",
                "Student(john) \u2227 LearningPiano(john)",
                "\u00acFind(john, coordinationChallenging)"
            ],
            "question": "John can get the rhythms right.",
            "question_fol": "Can(john, getTheRhythmRight)",
            "label": "True",
            "predicates_fol": [
                "Student(x)",
                "LearningPiano(x)",
                "Can(x, y)",
                "Start(x, y)",
                "Become(x, y)",
                "Find(x, y)",
                "PutEmotionInto(x, y)"
            ]
        }
    ],
    "736": [
        {
            "id": 1261,
            "story_id": 439,
            "context": [
                "No fish are birds.",
                "An osprey is a bird.",
                "A carp is a fish.",
                "All goldfish are carp.",
                "If Bubbles is either an osprey or a goldfish, then Bubbles is not also a fish."
            ],
            "context_fol": [
                "\u2200x (Fish(x) \u2192 \u00acBird(x))",
                "\u2200x (Osprey(x) \u2192 Bird(x))",
                "\u2200x (Carp(x) \u2192 Fish(x))",
                "\u2200x (Goldfish(x) \u2192 Carp(x))",
                "Osprey(bubbles) \u2295 Goldfish(bubbles) \u2192 \u00acFish(bubbles)"
            ],
            "question": "Bubbles is an Osprey.",
            "question_fol": "Osprey(bubbles)",
            "label": "Uncertain",
            "predicates_fol": [
                "Fish(x)",
                "Bird(x)",
                "Osprey(x)",
                "Carp(x)",
                "Goldfish(x)"
            ]
        },
        {
            "id": 1295,
            "story_id": 450,
            "context": [
                "Those who can fly over a vast distance glide in the air. ",
                "Flightless birds cannot fly over a vast distance. ",
                "Penguins are flightless birds. ",
                "Nonflying birds in Antarctica are penguins. ",
                "Fido is a penguin, or flies over a vast distance. "
            ],
            "context_fol": [
                "\u2200x (FlyOver(x, vastDistance) \u2192 GlideInAir(x))",
                "\u2200x (Flightless(x) \u2227 Bird(x) \u2192 \u00acFlyOver(x, vastDistance))",
                "\u2200x (Penguin(x) \u2192 Flightless(x) \u2227 Bird(x))",
                "\u2200x (NonFlying(x) \u2227 Bird(x) \u2227 In(x, antarctica) \u2192 Penguin(x))",
                "Penguin(fido) \u2228 FlyOver(fido, vastDistance)"
            ],
            "question": "Fido is a flightless bird",
            "question_fol": "Flightless(fido) \u2227 Bird(fido)",
            "label": "Uncertain",
            "predicates_fol": [
                "FlyOver(x, y)",
                "GlideInAir(x)",
                "Flightless(x)",
                "Bird(x)",
                "Penguin(x)",
                "NonFlying(x)",
                "In(x, y)"
            ]
        },
        {
            "id": 1277,
            "story_id": 444,
            "context": [
                "All birds have wings.",
                "Animals with wings aren't reptiles.",
                "Some animals that fly are birds.",
                "If something is an iguana, then it is a reptile. Simeng: All iguanas are reptiles. ",
                "John is either both an iguana and a bird, or he is neither. ",
                "John is an animal. "
            ],
            "context_fol": [
                "\u2200x (Bird(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
                "\u2200x (Animal(x) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z))) \u2192 \u00acReptile(x))",
                "\u2203x (Animal(x) \u2227 Fly(x) \u2227 Bird(x))",
                "\u2200x (Iguana(x) \u2192 Reptile(x))",
                "\u00ac(Iguana(john) \u2295 Bird(john))",
                "Animal(john)"
            ],
            "question": "John is a reptile.",
            "question_fol": "Reptile(john)",
            "label": "Uncertain",
            "predicates_fol": [
                "Bird(x)",
                "Wing(x)",
                "Have(x, y)",
                "Animal(x)",
                "Reptile(x)",
                "Fly(x)",
                "Iguana(x)"
            ]
        }
    ],
    "802": [
        {
            "id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A-List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, aMCAList)",
                "Prefer(peter, tVSeries)"
            ],
            "question": "James cannot watch 3 movies every week without any additional fees.",
            "question_fol": "\u00acEligibleForThreeFreeMovies(james)",
            "label": "False",
            "predicates_fol": [
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMovies(x)",
                "CinemaEveryWeek(x)",
                "Prefer(x, y)",
                "WatchTVIn(x, y)"
            ]
        },
        {
            "id": 939,
            "story_id": 354,
            "context": [
                "People either believe in Santa Claus, or think he is made up.",
                "People who believe in Santa Claus expect to get presents on Christmas morning.",
                "People who think Santa Claus is made up, then they would be surprised to see him in their house.",
                "People who expect presents on Christmas morning are excited for it to be Christmas.",
                "If people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve.",
                "Mercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus."
            ],
            "context_fol": [
                "\u2200x (BelieveIn(x, santaClaus) \u2295 ThinkMadeUp(x, santaClaus))",
                "\u2200x (BelieveIn(x, santaClaus) \u2192 Expect(x, present, christmasMorning))",
                "\u2200x (ThinkMadeUp(x, santaClaus) \u2192 WouldBeSurprisedToSeeIn(x, santaClaus, house))",
                "\u2200x (Expect(x, present, christmasMorning) \u2192 ExcitedFor(x, christmas))",
                "\u2200x (WouldBeSurprisedToSeeIn(x, santaClaus, house) \u2192 \u00acLeaveOut(x, cookies))",
                "\u00ac(Expect(marcy, present, christmasMorning) \u2227 ExcitedFor(marcy, christmas) \u2227 BelieveIn(marcy, santaClaus))"
            ],
            "question": "Marcy either believes in Santa Claus or doesn't leave cookies out on Christmas Eve.",
            "question_fol": "BelieveIn(marcy, santaClaus) \u2295 LeaveOut(marcy, cookies)",
            "label": "True",
            "predicates_fol": [
                "BelieveIn(x, y)",
                "ThinkMadeUp(x, y)",
                "Expect(x, y)",
                "WouldBeSurprisedToSeeIn(x, y)",
                "ExcitedFor(x, y)",
                "LeaveOut(x, y)"
            ]
        },
        {
            "id": 708,
            "story_id": 264,
            "context": [
                "No television stars are certified public accountants.",
                "All certified public accountants have good business sense."
            ],
            "context_fol": [
                "\u2200x (TelevisionStar(x) \u2192 \u00acCertifiedPublicAccoutant(x))",
                "\u2200x (CertifiedPublicAccoutant(x) \u2192 Have(x, goodBusinessSense))"
            ],
            "question": "All television stars have good business sense.",
            "question_fol": "\u2200x (TelevisionStar(x) \u2192 Have(x, goodBusinessSense))",
            "label": "Uncertain",
            "predicates_fol": [
                "TelevisionStar(x)",
                "CertifiedPublicAccoutant(x)",
                "Have(x, y)"
            ]
        }
    ],
    "803": [
        {
            "id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A-List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, aMCAList)",
                "Prefer(peter, tVSeries)"
            ],
            "question": "James cannot watch 3 movies every week without any additional fees.",
            "question_fol": "\u00acEligibleForThreeFreeMovies(james)",
            "label": "False",
            "predicates_fol": [
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMovies(x)",
                "CinemaEveryWeek(x)",
                "Prefer(x, y)",
                "WatchTVIn(x, y)"
            ]
        },
        {
            "id": 939,
            "story_id": 354,
            "context": [
                "People either believe in Santa Claus, or think he is made up.",
                "People who believe in Santa Claus expect to get presents on Christmas morning.",
                "People who think Santa Claus is made up, then they would be surprised to see him in their house.",
                "People who expect presents on Christmas morning are excited for it to be Christmas.",
                "If people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve.",
                "Mercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus."
            ],
            "context_fol": [
                "\u2200x (BelieveIn(x, santaClaus) \u2295 ThinkMadeUp(x, santaClaus))",
                "\u2200x (BelieveIn(x, santaClaus) \u2192 Expect(x, present, christmasMorning))",
                "\u2200x (ThinkMadeUp(x, santaClaus) \u2192 WouldBeSurprisedToSeeIn(x, santaClaus, house))",
                "\u2200x (Expect(x, present, christmasMorning) \u2192 ExcitedFor(x, christmas))",
                "\u2200x (WouldBeSurprisedToSeeIn(x, santaClaus, house) \u2192 \u00acLeaveOut(x, cookies))",
                "\u00ac(Expect(marcy, present, christmasMorning) \u2227 ExcitedFor(marcy, christmas) \u2227 BelieveIn(marcy, santaClaus))"
            ],
            "question": "Marcy either believes in Santa Claus or doesn't leave cookies out on Christmas Eve.",
            "question_fol": "BelieveIn(marcy, santaClaus) \u2295 LeaveOut(marcy, cookies)",
            "label": "True",
            "predicates_fol": [
                "BelieveIn(x, y)",
                "ThinkMadeUp(x, y)",
                "Expect(x, y)",
                "WouldBeSurprisedToSeeIn(x, y)",
                "ExcitedFor(x, y)",
                "LeaveOut(x, y)"
            ]
        },
        {
            "id": 708,
            "story_id": 264,
            "context": [
                "No television stars are certified public accountants.",
                "All certified public accountants have good business sense."
            ],
            "context_fol": [
                "\u2200x (TelevisionStar(x) \u2192 \u00acCertifiedPublicAccoutant(x))",
                "\u2200x (CertifiedPublicAccoutant(x) \u2192 Have(x, goodBusinessSense))"
            ],
            "question": "All television stars have good business sense.",
            "question_fol": "\u2200x (TelevisionStar(x) \u2192 Have(x, goodBusinessSense))",
            "label": "Uncertain",
            "predicates_fol": [
                "TelevisionStar(x)",
                "CertifiedPublicAccoutant(x)",
                "Have(x, y)"
            ]
        }
    ],
    "804": [
        {
            "id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A-List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, aMCAList)",
                "Prefer(peter, tVSeries)"
            ],
            "question": "James cannot watch 3 movies every week without any additional fees.",
            "question_fol": "\u00acEligibleForThreeFreeMovies(james)",
            "label": "False",
            "predicates_fol": [
                "SubscribedTo(x, y)",
                "EligibleForThreeFreeMovies(x)",
                "CinemaEveryWeek(x)",
                "Prefer(x, y)",
                "WatchTVIn(x, y)"
            ]
        },
        {
            "id": 939,
            "story_id": 354,
            "context": [
                "People either believe in Santa Claus, or think he is made up.",
                "People who believe in Santa Claus expect to get presents on Christmas morning.",
                "People who think Santa Claus is made up, then they would be surprised to see him in their house.",
                "People who expect presents on Christmas morning are excited for it to be Christmas.",
                "If people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve.",
                "Mercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus."
            ],
            "context_fol": [
                "\u2200x (BelieveIn(x, santaClaus) \u2295 ThinkMadeUp(x, santaClaus))",
                "\u2200x (BelieveIn(x, santaClaus) \u2192 Expect(x, present, christmasMorning))",
                "\u2200x (ThinkMadeUp(x, santaClaus) \u2192 WouldBeSurprisedToSeeIn(x, santaClaus, house))",
                "\u2200x (Expect(x, present, christmasMorning) \u2192 ExcitedFor(x, christmas))",
                "\u2200x (WouldBeSurprisedToSeeIn(x, santaClaus, house) \u2192 \u00acLeaveOut(x, cookies))",
                "\u00ac(Expect(marcy, present, christmasMorning) \u2227 ExcitedFor(marcy, christmas) \u2227 BelieveIn(marcy, santaClaus))"
            ],
            "question": "Marcy either believes in Santa Claus or doesn't leave cookies out on Christmas Eve.",
            "question_fol": "BelieveIn(marcy, santaClaus) \u2295 LeaveOut(marcy, cookies)",
            "label": "True",
            "predicates_fol": [
                "BelieveIn(x, y)",
                "ThinkMadeUp(x, y)",
                "Expect(x, y)",
                "WouldBeSurprisedToSeeIn(x, y)",
                "ExcitedFor(x, y)",
                "LeaveOut(x, y)"
            ]
        },
        {
            "id": 708,
            "story_id": 264,
            "context": [
                "No television stars are certified public accountants.",
                "All certified public accountants have good business sense."
            ],
            "context_fol": [
                "\u2200x (TelevisionStar(x) \u2192 \u00acCertifiedPublicAccoutant(x))",
                "\u2200x (CertifiedPublicAccoutant(x) \u2192 Have(x, goodBusinessSense))"
            ],
            "question": "All television stars have good business sense.",
            "question_fol": "\u2200x (TelevisionStar(x) \u2192 Have(x, goodBusinessSense))",
            "label": "Uncertain",
            "predicates_fol": [
                "TelevisionStar(x)",
                "CertifiedPublicAccoutant(x)",
                "Have(x, y)"
            ]
        }
    ],
    "323": [
        {
            "id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 SpecializeInPerformanceOf(miroslav, renaissanceMusic) \u2227 SpecializeInPerformanceOf(miroslav, baroqueMusic)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x \u2203y ((Musician(x) \u2192 Love(x, music)) \u2227 (\u00ac(x=y) \u2227 Musician(y) \u2192 Love(y, music)))",
                "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "question_fol": "Love(miroslav, music)",
            "label": "Uncertain",
            "predicates_fol": [
                "Czech(x)",
                "ChoralConductor(x)",
                "SpecializeInPerformanceOf(x, y)",
                "Musician(x)",
                "Love(x, y)",
                "PublishedBook(x, y)"
            ]
        },
        {
            "id": 51,
            "story_id": 18,
            "context": [
                "Miroslav Fiedler was a Czech mathematician.",
                "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
                "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
                "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."
            ],
            "context_fol": [
                "Czech(miroslavFiedler) \u2227 Mathematician(miroslavFiedler)",
                "KnownFor(miroslavFiedler, contributionsToLinearAlgebraAndGraphTheory)",
                "HonoredBy(miroslavFiedler, fiedlerEigenvalue)",
                "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"
            ],
            "question": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.",
            "question_fol": "\u2203x (TheSecondSmallestEigenvalueOf(x, theGraphLaplacian) \u2227 HonoredBy(miroslavFiedler, x))",
            "label": "True",
            "predicates_fol": [
                "Czech(x)",
                "Mathematician(x)",
                "KnownFor(x, y)",
                "HonoredBy(x, y)",
                "TheSecondSmallestEigenvalueOf(x, y)"
            ]
        },
        {
            "id": 44,
            "story_id": 16,
            "context": [
                "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl.",
                "Dagfinn Aarskog is a Norwegian physician.",
                "Dagfinn Dahl is a Norwegian barrister."
            ],
            "context_fol": [
                "",
                "GivenName(nameDagfinn) \u2227 Named(dagfinnAarskog, nameDagfinn) \u2227 NotablePerson(dagfinnAarskog) \u2227 Named(dagfinnBakke, nameDagfinn) \u2227 NotablePerson(dagfinnBakke)  \u2227 Named(dagfinnDahl, nameDagfinn) \u2227 NotablePerson(dagfinnDahl)",
                "Norwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)",
                "Norwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)"
            ],
            "question": "Dagfinn Aarskog is a notable person.",
            "question_fol": "NotablePerson(dagfinnAarskog)",
            "label": "True",
            "predicates_fol": [
                "GivenName(x)",
                "Named(x, y)",
                "NotablePerson(x)",
                "Norwegian(x)",
                "Physician(x)",
                "Barrister(x)"
            ]
        }
    ],
    "324": [
        {
            "id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 SpecializeInPerformanceOf(miroslav, renaissanceMusic) \u2227 SpecializeInPerformanceOf(miroslav, baroqueMusic)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x \u2203y ((Musician(x) \u2192 Love(x, music)) \u2227 (\u00ac(x=y) \u2227 Musician(y) \u2192 Love(y, music)))",
                "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "question_fol": "Love(miroslav, music)",
            "label": "Uncertain",
            "predicates_fol": [
                "Czech(x)",
                "ChoralConductor(x)",
                "SpecializeInPerformanceOf(x, y)",
                "Musician(x)",
                "Love(x, y)",
                "PublishedBook(x, y)"
            ]
        },
        {
            "id": 51,
            "story_id": 18,
            "context": [
                "Miroslav Fiedler was a Czech mathematician.",
                "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
                "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
                "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."
            ],
            "context_fol": [
                "Czech(miroslavFiedler) \u2227 Mathematician(miroslavFiedler)",
                "KnownFor(miroslavFiedler, contributionsToLinearAlgebraAndGraphTheory)",
                "HonoredBy(miroslavFiedler, fiedlerEigenvalue)",
                "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"
            ],
            "question": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.",
            "question_fol": "\u2203x (TheSecondSmallestEigenvalueOf(x, theGraphLaplacian) \u2227 HonoredBy(miroslavFiedler, x))",
            "label": "True",
            "predicates_fol": [
                "Czech(x)",
                "Mathematician(x)",
                "KnownFor(x, y)",
                "HonoredBy(x, y)",
                "TheSecondSmallestEigenvalueOf(x, y)"
            ]
        },
        {
            "id": 44,
            "story_id": 16,
            "context": [
                "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl.",
                "Dagfinn Aarskog is a Norwegian physician.",
                "Dagfinn Dahl is a Norwegian barrister."
            ],
            "context_fol": [
                "",
                "GivenName(nameDagfinn) \u2227 Named(dagfinnAarskog, nameDagfinn) \u2227 NotablePerson(dagfinnAarskog) \u2227 Named(dagfinnBakke, nameDagfinn) \u2227 NotablePerson(dagfinnBakke)  \u2227 Named(dagfinnDahl, nameDagfinn) \u2227 NotablePerson(dagfinnDahl)",
                "Norwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)",
                "Norwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)"
            ],
            "question": "Dagfinn Aarskog is a notable person.",
            "question_fol": "NotablePerson(dagfinnAarskog)",
            "label": "True",
            "predicates_fol": [
                "GivenName(x)",
                "Named(x, y)",
                "NotablePerson(x)",
                "Norwegian(x)",
                "Physician(x)",
                "Barrister(x)"
            ]
        }
    ],
    "325": [
        {
            "id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 SpecializeInPerformanceOf(miroslav, renaissanceMusic) \u2227 SpecializeInPerformanceOf(miroslav, baroqueMusic)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x \u2203y ((Musician(x) \u2192 Love(x, music)) \u2227 (\u00ac(x=y) \u2227 Musician(y) \u2192 Love(y, music)))",
                "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "question_fol": "Love(miroslav, music)",
            "label": "Uncertain",
            "predicates_fol": [
                "Czech(x)",
                "ChoralConductor(x)",
                "SpecializeInPerformanceOf(x, y)",
                "Musician(x)",
                "Love(x, y)",
                "PublishedBook(x, y)"
            ]
        },
        {
            "id": 51,
            "story_id": 18,
            "context": [
                "Miroslav Fiedler was a Czech mathematician.",
                "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
                "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
                "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."
            ],
            "context_fol": [
                "Czech(miroslavFiedler) \u2227 Mathematician(miroslavFiedler)",
                "KnownFor(miroslavFiedler, contributionsToLinearAlgebraAndGraphTheory)",
                "HonoredBy(miroslavFiedler, fiedlerEigenvalue)",
                "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"
            ],
            "question": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.",
            "question_fol": "\u2203x (TheSecondSmallestEigenvalueOf(x, theGraphLaplacian) \u2227 HonoredBy(miroslavFiedler, x))",
            "label": "True",
            "predicates_fol": [
                "Czech(x)",
                "Mathematician(x)",
                "KnownFor(x, y)",
                "HonoredBy(x, y)",
                "TheSecondSmallestEigenvalueOf(x, y)"
            ]
        },
        {
            "id": 44,
            "story_id": 16,
            "context": [
                "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl.",
                "Dagfinn Aarskog is a Norwegian physician.",
                "Dagfinn Dahl is a Norwegian barrister."
            ],
            "context_fol": [
                "",
                "GivenName(nameDagfinn) \u2227 Named(dagfinnAarskog, nameDagfinn) \u2227 NotablePerson(dagfinnAarskog) \u2227 Named(dagfinnBakke, nameDagfinn) \u2227 NotablePerson(dagfinnBakke)  \u2227 Named(dagfinnDahl, nameDagfinn) \u2227 NotablePerson(dagfinnDahl)",
                "Norwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)",
                "Norwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)"
            ],
            "question": "Dagfinn Aarskog is a notable person.",
            "question_fol": "NotablePerson(dagfinnAarskog)",
            "label": "True",
            "predicates_fol": [
                "GivenName(x)",
                "Named(x, y)",
                "NotablePerson(x)",
                "Norwegian(x)",
                "Physician(x)",
                "Barrister(x)"
            ]
        }
    ],
    "1032": [
        {
            "id": 1035,
            "story_id": 387,
            "context": [
                "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
                "All rare diseases require a medical diagnosis.",
                "If a disease is mild, then no lab tests or imaging is required. ",
                "All blood cancers are rare diseases.",
                "All types of leukemia are diseases and blood cancers. ",
                "Bladder cancer is a disease and is blood cancer or Leukemia."
            ],
            "context_fol": [
                "\u2200x (Disease(x) \u2227 Require(x, medicalDiagnosis) \u2192 RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x)) ",
                "\u2200x (RareDisease(x) \u2192 Require(x, medicalDiagnosis))",
                "\u2200x (Disease(x) \u2227 Mild(x) \u2192 \u00ac(RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x))) ",
                "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))",
                "\u2200x (Disease(x) \u2227 Leukemia(x) \u2192 BloodCancer(x))",
                "Disease(bladderCancer) \u2227 (BloodCancer(bladderCancer) \u2228 Leukemia(bladderCancer))"
            ],
            "question": "Bladder cancer is a mild disease.",
            "question_fol": "Mild(bladderCancer)",
            "label": "False",
            "predicates_fol": [
                "Disease(x)",
                "Require(x, y)",
                "RequiredFor(x, y)",
                "RareDisease(x)",
                "Mild(x)",
                "BloodCancer(x)",
                "RareDiseases(x)",
                "Leukemia(x)"
            ]
        },
        {
            "id": 1041,
            "story_id": 389,
            "context": [
                "A diseases affect females or males.",
                "No women have prostate cancer.",
                "A cancer is either prostate cancer or non-prostate cancer. ",
                "No type of cancer is without mutations.",
                "All non-prostate cancers are a type of cancer.",
                "If adenocarcinoma is a type of cancer or without mutations or both, then adenocarcinoma is in women or without mutations or both."
            ],
            "context_fol": [
                "\u2200x (Disease(x) \u2192 (Affects(x, female) \u2228 Affects(x, male)) )",
                "\u2200x (Affect(x, female) \u2192 \u00acProstateCancer(x))",
                "\u2200x (ProstateCancer(x) \u2228 NonProstateCancer(x)) ",
                "\u2200x (Cancer(x) \u2192 \u00acWithout(x, mutation)) ",
                "\u2200x (NonProstateCancer(x) \u2192 Cancer(x)) ",
                "(Cancer(adenocarcinoma) \u2228 Without(adenocarcinoma, mutation)) \u2192 (Affect(adenocarcinoma, female) \u2228 Without(adenocarcinoma, mutation))"
            ],
            "question": "Adenocarcinoma is a prostate cancer.",
            "question_fol": "ProstateCancer(adenocarcinoma)",
            "label": "Uncertain",
            "predicates_fol": [
                "Disease(x)",
                "Affects(x, y)",
                "Affect(x, y)",
                "ProstateCancer(x)",
                "NonProstateCancer(x)",
                "Cancer(x)",
                "Without(x, y)"
            ]
        },
        {
            "id": 668,
            "story_id": 236,
            "context": [
                "Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. ",
                "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value.",
                "P values are thresholds for belief, not metrics of effect. "
            ],
            "context_fol": [
                "Finding(cancerBiology, geneticAlteration) \u2227 Confer(geneticAlteration, selectiveAdvantage, toCancerCell)",
                "\u2203x \u2203y (CancerResearcher(x) \u2227 Ranked(x, importanceOfSubstitutionsToCancerGrowth) \u2227 PValue(y) \u2227 RankedBy(importanceOfSubstitutionsToCancerGrowth, y))",
                "\u2200x (PValue(x) \u2192 ThresholdForBelief(x) \u2227 \u00acMetricOfEffect(x))"
            ],
            "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
            "question_fol": "\u2203x \u2203y (CancerResearcher(x) \u2227 Use(x, cancerEffectSize) \u2227 UsedToDetermine(cancerEffectSize, relativeImportanceOfGeneteticAlterations))",
            "label": "Uncertain",
            "predicates_fol": [
                "Finding(x, y)",
                "Confer(x, y)",
                "CancerResearcher(x)",
                "Ranked(x, y)",
                "PValue(x)",
                "RankedBy(x, y)",
                "ThresholdForBelief(x)",
                "MetricOfEffect(x)"
            ]
        }
    ],
    "1033": [
        {
            "id": 1035,
            "story_id": 387,
            "context": [
                "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
                "All rare diseases require a medical diagnosis.",
                "If a disease is mild, then no lab tests or imaging is required. ",
                "All blood cancers are rare diseases.",
                "All types of leukemia are diseases and blood cancers. ",
                "Bladder cancer is a disease and is blood cancer or Leukemia."
            ],
            "context_fol": [
                "\u2200x (Disease(x) \u2227 Require(x, medicalDiagnosis) \u2192 RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x)) ",
                "\u2200x (RareDisease(x) \u2192 Require(x, medicalDiagnosis))",
                "\u2200x (Disease(x) \u2227 Mild(x) \u2192 \u00ac(RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x))) ",
                "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))",
                "\u2200x (Disease(x) \u2227 Leukemia(x) \u2192 BloodCancer(x))",
                "Disease(bladderCancer) \u2227 (BloodCancer(bladderCancer) \u2228 Leukemia(bladderCancer))"
            ],
            "question": "Bladder cancer is a mild disease.",
            "question_fol": "Mild(bladderCancer)",
            "label": "False",
            "predicates_fol": [
                "Disease(x)",
                "Require(x, y)",
                "RequiredFor(x, y)",
                "RareDisease(x)",
                "Mild(x)",
                "BloodCancer(x)",
                "RareDiseases(x)",
                "Leukemia(x)"
            ]
        },
        {
            "id": 1041,
            "story_id": 389,
            "context": [
                "A diseases affect females or males.",
                "No women have prostate cancer.",
                "A cancer is either prostate cancer or non-prostate cancer. ",
                "No type of cancer is without mutations.",
                "All non-prostate cancers are a type of cancer.",
                "If adenocarcinoma is a type of cancer or without mutations or both, then adenocarcinoma is in women or without mutations or both."
            ],
            "context_fol": [
                "\u2200x (Disease(x) \u2192 (Affects(x, female) \u2228 Affects(x, male)) )",
                "\u2200x (Affect(x, female) \u2192 \u00acProstateCancer(x))",
                "\u2200x (ProstateCancer(x) \u2228 NonProstateCancer(x)) ",
                "\u2200x (Cancer(x) \u2192 \u00acWithout(x, mutation)) ",
                "\u2200x (NonProstateCancer(x) \u2192 Cancer(x)) ",
                "(Cancer(adenocarcinoma) \u2228 Without(adenocarcinoma, mutation)) \u2192 (Affect(adenocarcinoma, female) \u2228 Without(adenocarcinoma, mutation))"
            ],
            "question": "Adenocarcinoma is a prostate cancer.",
            "question_fol": "ProstateCancer(adenocarcinoma)",
            "label": "Uncertain",
            "predicates_fol": [
                "Disease(x)",
                "Affects(x, y)",
                "Affect(x, y)",
                "ProstateCancer(x)",
                "NonProstateCancer(x)",
                "Cancer(x)",
                "Without(x, y)"
            ]
        },
        {
            "id": 668,
            "story_id": 236,
            "context": [
                "Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. ",
                "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value.",
                "P values are thresholds for belief, not metrics of effect. "
            ],
            "context_fol": [
                "Finding(cancerBiology, geneticAlteration) \u2227 Confer(geneticAlteration, selectiveAdvantage, toCancerCell)",
                "\u2203x \u2203y (CancerResearcher(x) \u2227 Ranked(x, importanceOfSubstitutionsToCancerGrowth) \u2227 PValue(y) \u2227 RankedBy(importanceOfSubstitutionsToCancerGrowth, y))",
                "\u2200x (PValue(x) \u2192 ThresholdForBelief(x) \u2227 \u00acMetricOfEffect(x))"
            ],
            "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
            "question_fol": "\u2203x \u2203y (CancerResearcher(x) \u2227 Use(x, cancerEffectSize) \u2227 UsedToDetermine(cancerEffectSize, relativeImportanceOfGeneteticAlterations))",
            "label": "Uncertain",
            "predicates_fol": [
                "Finding(x, y)",
                "Confer(x, y)",
                "CancerResearcher(x)",
                "Ranked(x, y)",
                "PValue(x)",
                "RankedBy(x, y)",
                "ThresholdForBelief(x)",
                "MetricOfEffect(x)"
            ]
        }
    ],
    "1034": [
        {
            "id": 1035,
            "story_id": 387,
            "context": [
                "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
                "All rare diseases require a medical diagnosis.",
                "If a disease is mild, then no lab tests or imaging is required. ",
                "All blood cancers are rare diseases.",
                "All types of leukemia are diseases and blood cancers. ",
                "Bladder cancer is a disease and is blood cancer or Leukemia."
            ],
            "context_fol": [
                "\u2200x (Disease(x) \u2227 Require(x, medicalDiagnosis) \u2192 RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x)) ",
                "\u2200x (RareDisease(x) \u2192 Require(x, medicalDiagnosis))",
                "\u2200x (Disease(x) \u2227 Mild(x) \u2192 \u00ac(RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x))) ",
                "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))",
                "\u2200x (Disease(x) \u2227 Leukemia(x) \u2192 BloodCancer(x))",
                "Disease(bladderCancer) \u2227 (BloodCancer(bladderCancer) \u2228 Leukemia(bladderCancer))"
            ],
            "question": "Bladder cancer is a mild disease.",
            "question_fol": "Mild(bladderCancer)",
            "label": "False",
            "predicates_fol": [
                "Disease(x)",
                "Require(x, y)",
                "RequiredFor(x, y)",
                "RareDisease(x)",
                "Mild(x)",
                "BloodCancer(x)",
                "RareDiseases(x)",
                "Leukemia(x)"
            ]
        },
        {
            "id": 1041,
            "story_id": 389,
            "context": [
                "A diseases affect females or males.",
                "No women have prostate cancer.",
                "A cancer is either prostate cancer or non-prostate cancer. ",
                "No type of cancer is without mutations.",
                "All non-prostate cancers are a type of cancer.",
                "If adenocarcinoma is a type of cancer or without mutations or both, then adenocarcinoma is in women or without mutations or both."
            ],
            "context_fol": [
                "\u2200x (Disease(x) \u2192 (Affects(x, female) \u2228 Affects(x, male)) )",
                "\u2200x (Affect(x, female) \u2192 \u00acProstateCancer(x))",
                "\u2200x (ProstateCancer(x) \u2228 NonProstateCancer(x)) ",
                "\u2200x (Cancer(x) \u2192 \u00acWithout(x, mutation)) ",
                "\u2200x (NonProstateCancer(x) \u2192 Cancer(x)) ",
                "(Cancer(adenocarcinoma) \u2228 Without(adenocarcinoma, mutation)) \u2192 (Affect(adenocarcinoma, female) \u2228 Without(adenocarcinoma, mutation))"
            ],
            "question": "Adenocarcinoma is a prostate cancer.",
            "question_fol": "ProstateCancer(adenocarcinoma)",
            "label": "Uncertain",
            "predicates_fol": [
                "Disease(x)",
                "Affects(x, y)",
                "Affect(x, y)",
                "ProstateCancer(x)",
                "NonProstateCancer(x)",
                "Cancer(x)",
                "Without(x, y)"
            ]
        },
        {
            "id": 668,
            "story_id": 236,
            "context": [
                "Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. ",
                "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value.",
                "P values are thresholds for belief, not metrics of effect. "
            ],
            "context_fol": [
                "Finding(cancerBiology, geneticAlteration) \u2227 Confer(geneticAlteration, selectiveAdvantage, toCancerCell)",
                "\u2203x \u2203y (CancerResearcher(x) \u2227 Ranked(x, importanceOfSubstitutionsToCancerGrowth) \u2227 PValue(y) \u2227 RankedBy(importanceOfSubstitutionsToCancerGrowth, y))",
                "\u2200x (PValue(x) \u2192 ThresholdForBelief(x) \u2227 \u00acMetricOfEffect(x))"
            ],
            "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
            "question_fol": "\u2203x \u2203y (CancerResearcher(x) \u2227 Use(x, cancerEffectSize) \u2227 UsedToDetermine(cancerEffectSize, relativeImportanceOfGeneteticAlterations))",
            "label": "Uncertain",
            "predicates_fol": [
                "Finding(x, y)",
                "Confer(x, y)",
                "CancerResearcher(x)",
                "Ranked(x, y)",
                "PValue(x)",
                "RankedBy(x, y)",
                "ThresholdForBelief(x)",
                "MetricOfEffect(x)"
            ]
        }
    ],
    "941": [
        {
            "id": 973,
            "story_id": 366,
            "context": [
                "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
                "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
                "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Damon is in Franny's family. ",
                "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
            ],
            "context_fol": [
                "\u2200x (In(x, frannysFamily) \u2227 (Drink(x, kombucha) \u2228 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y))))))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))))",
                "\u2200x (In(x, frannysFamily)) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 HaveToVisitFrequently(x, dentist))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))) \u2192 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y)))",
                "\u2200x (In(x, frannysFamily) \u2227 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y))) \u2192 \u00ac(ConsistentEverydayRoutine(x) \u2227 StickTo(damon, solidSchedule)))",
                "In(damon, frannysFamily)",
                "\u00ac((\u2203y \u2203z(\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(damon, y) \u2227 GrowUpWith(damon, z))) \u2295 (ConsistentEverydayRoutine(damon) \u2227 StickTo(damon, solidSchedule)))"
            ],
            "question": "Damon is in Franny's family and he has to visit the dentist frequently.",
            "question_fol": "HaveToVisitFrequently(damon, dentist)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "Drink(x, y)",
                "PepsiProduct(x)",
                "BusyParent(x)",
                "Pack(x, y)",
                "GrowUpWith(x, y)",
                "HaveToVisitFrequently(x, y)",
                "Have(x, y)",
                "Erratic(x)",
                "Diverse(x)",
                "EatingHabit(x)",
                "ConsistentEverydayRoutine(x)",
                "StickTo(x, y)"
            ]
        },
        {
            "id": 999,
            "story_id": 375,
            "context": [
                "All of Michael's neighbors who grow their own fresh vegetables in their home gardens also have ample space.",
                "All of Michael's neighbors who are young working professionals and live in large cities, do not have ample space.",
                "All of Michael's neighbors who order takeout from delivery services often grow their own fresh vegetables in their home garden.",
                "All of Michael's neighbors who enjoy going out often to restaurants with friends order takeout from delivery services often.",
                "All of Michael's neighbors who regularly tout the benefits of homegrown and homecooked meals over fast food enjoy going out often to restaurants with friends. ",
                "Peter, Michael's neighbor, grows his own fresh vegetables in his home garden, or regularly touts the benefits of homegrown and homecooked meals over fast food, or both."
            ],
            "context_fol": [
                "\u2200x (MichaelsNeightbor(x) \u2227 GrowIn(x, vegetable, garden) \u2192 Have(x, ampleSpace))",
                "\u2200x (MichaelsNeightbor(x) \u2227 YoungWorkingProfession(x) \u2227 LiveIn(x, largeCity) \u2192 \u00acHave(x, ampleSpace))",
                "\u2200x (MichaelsNeightbor(x) \u2227 OrderOften(x, takeout) \u2192 Grow(x, vegetable, garden))",
                "\u2200x (MichaelsNeightbor(x) \u2227 EnjoyGoingOutOftenToWith(x, restaurant, friend) \u2192 OrderOften(x, takeout))",
                "\u2200x (MichaelsNeightbor(x) \u2227 ToutOver(x, homecookedMeals, fastFood) \u2192 EnjoyGoingOutOftenToWith(x, restaurant, friend))",
                "MichaelsNeightbor(peter) \u2227 (GrowIn(peter, vegetable, garden) \u2228 ToutOver(peter, homecookedMeals, fastFood))"
            ],
            "question": "Peter enjoys going out often to restaurants with friends.",
            "question_fol": "EnjoyGoingOutOftenTo(peter, restaurant, friend)",
            "label": "Uncertain",
            "predicates_fol": [
                "MichaelsNeightbor(x)",
                "GrowIn(x, y)",
                "Have(x, y)",
                "YoungWorkingProfession(x)",
                "LiveIn(x, y)",
                "OrderOften(x, y)",
                "Grow(x, y)",
                "EnjoyGoingOutOftenToWith(x, y)",
                "ToutOver(x, y)"
            ]
        },
        {
            "id": 967,
            "story_id": 364,
            "context": [
                "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
                "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
                "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (In(x, thisNeighborhood) \u2227 VisitRegularly(x, coffeeShop) \u2192 AddictedTo(x, coffee))",
                "\u2200x (In(x, thisNeighborhood) \u2192 (VisitRegularly(x, coffeeShop) \u2228 (\u2203y (TakeOut(y) \u2227 Order(x, y, aDay))))",
                "\u2200x (In(x, thisNeighborhood) \u2227 MakeAtUsing(x, home, ownFood, recipe) \u2192 \u2203y (TakeOut(y) \u2227 Order(x, y)))",
                "\u2200x (In(x, thisNeighborhood) \u2227 \u2203y (CoffeemakerAndBlender(y) \u2227 Own(x, y)) \u2192 \u00acOrderAtLeastOnceADay(x, takeout))",
                "\u2200x (In(x, thisNeighborhood) \u2227 BusyWith(x, 12HourWorkHour) \u2192 MakeAtUsing(x, home, ownFood, recipe))",
                "In(sam, thisNeighborhood) \u2227 \u00ac(AddictedTo(sam, coffee) \u2295 BusyWith(sam, 12HourWorkHour))"
            ],
            "question": "Sam is living in this neighborhood and he is addicted to coffee.",
            "question_fol": "InThisNeighborhood(sam) \u2227 AddictedTo(sam, coffee)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "VisitRegularly(x, y)",
                "AddictedTo(x, y)",
                "TakeOut(x)",
                "Order(x, y, z)",
                "MakeAtUsing(x, y, z, w)",
                "CoffeemakerAndBlender(x)",
                "Own(x, y)",
                "OrderAtLeastOnceADay(x, y)",
                "BusyWith(x, y)"
            ]
        }
    ],
    "942": [
        {
            "id": 973,
            "story_id": 366,
            "context": [
                "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
                "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
                "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Damon is in Franny's family. ",
                "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
            ],
            "context_fol": [
                "\u2200x (In(x, frannysFamily) \u2227 (Drink(x, kombucha) \u2228 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y))))))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))))",
                "\u2200x (In(x, frannysFamily)) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 HaveToVisitFrequently(x, dentist))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))) \u2192 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y)))",
                "\u2200x (In(x, frannysFamily) \u2227 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y))) \u2192 \u00ac(ConsistentEverydayRoutine(x) \u2227 StickTo(damon, solidSchedule)))",
                "In(damon, frannysFamily)",
                "\u00ac((\u2203y \u2203z(\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(damon, y) \u2227 GrowUpWith(damon, z))) \u2295 (ConsistentEverydayRoutine(damon) \u2227 StickTo(damon, solidSchedule)))"
            ],
            "question": "Damon is in Franny's family and he has to visit the dentist frequently.",
            "question_fol": "HaveToVisitFrequently(damon, dentist)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "Drink(x, y)",
                "PepsiProduct(x)",
                "BusyParent(x)",
                "Pack(x, y)",
                "GrowUpWith(x, y)",
                "HaveToVisitFrequently(x, y)",
                "Have(x, y)",
                "Erratic(x)",
                "Diverse(x)",
                "EatingHabit(x)",
                "ConsistentEverydayRoutine(x)",
                "StickTo(x, y)"
            ]
        },
        {
            "id": 999,
            "story_id": 375,
            "context": [
                "All of Michael's neighbors who grow their own fresh vegetables in their home gardens also have ample space.",
                "All of Michael's neighbors who are young working professionals and live in large cities, do not have ample space.",
                "All of Michael's neighbors who order takeout from delivery services often grow their own fresh vegetables in their home garden.",
                "All of Michael's neighbors who enjoy going out often to restaurants with friends order takeout from delivery services often.",
                "All of Michael's neighbors who regularly tout the benefits of homegrown and homecooked meals over fast food enjoy going out often to restaurants with friends. ",
                "Peter, Michael's neighbor, grows his own fresh vegetables in his home garden, or regularly touts the benefits of homegrown and homecooked meals over fast food, or both."
            ],
            "context_fol": [
                "\u2200x (MichaelsNeightbor(x) \u2227 GrowIn(x, vegetable, garden) \u2192 Have(x, ampleSpace))",
                "\u2200x (MichaelsNeightbor(x) \u2227 YoungWorkingProfession(x) \u2227 LiveIn(x, largeCity) \u2192 \u00acHave(x, ampleSpace))",
                "\u2200x (MichaelsNeightbor(x) \u2227 OrderOften(x, takeout) \u2192 Grow(x, vegetable, garden))",
                "\u2200x (MichaelsNeightbor(x) \u2227 EnjoyGoingOutOftenToWith(x, restaurant, friend) \u2192 OrderOften(x, takeout))",
                "\u2200x (MichaelsNeightbor(x) \u2227 ToutOver(x, homecookedMeals, fastFood) \u2192 EnjoyGoingOutOftenToWith(x, restaurant, friend))",
                "MichaelsNeightbor(peter) \u2227 (GrowIn(peter, vegetable, garden) \u2228 ToutOver(peter, homecookedMeals, fastFood))"
            ],
            "question": "Peter enjoys going out often to restaurants with friends.",
            "question_fol": "EnjoyGoingOutOftenTo(peter, restaurant, friend)",
            "label": "Uncertain",
            "predicates_fol": [
                "MichaelsNeightbor(x)",
                "GrowIn(x, y)",
                "Have(x, y)",
                "YoungWorkingProfession(x)",
                "LiveIn(x, y)",
                "OrderOften(x, y)",
                "Grow(x, y)",
                "EnjoyGoingOutOftenToWith(x, y)",
                "ToutOver(x, y)"
            ]
        },
        {
            "id": 967,
            "story_id": 364,
            "context": [
                "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
                "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
                "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (In(x, thisNeighborhood) \u2227 VisitRegularly(x, coffeeShop) \u2192 AddictedTo(x, coffee))",
                "\u2200x (In(x, thisNeighborhood) \u2192 (VisitRegularly(x, coffeeShop) \u2228 (\u2203y (TakeOut(y) \u2227 Order(x, y, aDay))))",
                "\u2200x (In(x, thisNeighborhood) \u2227 MakeAtUsing(x, home, ownFood, recipe) \u2192 \u2203y (TakeOut(y) \u2227 Order(x, y)))",
                "\u2200x (In(x, thisNeighborhood) \u2227 \u2203y (CoffeemakerAndBlender(y) \u2227 Own(x, y)) \u2192 \u00acOrderAtLeastOnceADay(x, takeout))",
                "\u2200x (In(x, thisNeighborhood) \u2227 BusyWith(x, 12HourWorkHour) \u2192 MakeAtUsing(x, home, ownFood, recipe))",
                "In(sam, thisNeighborhood) \u2227 \u00ac(AddictedTo(sam, coffee) \u2295 BusyWith(sam, 12HourWorkHour))"
            ],
            "question": "Sam is living in this neighborhood and he is addicted to coffee.",
            "question_fol": "InThisNeighborhood(sam) \u2227 AddictedTo(sam, coffee)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "VisitRegularly(x, y)",
                "AddictedTo(x, y)",
                "TakeOut(x)",
                "Order(x, y, z)",
                "MakeAtUsing(x, y, z, w)",
                "CoffeemakerAndBlender(x)",
                "Own(x, y)",
                "OrderAtLeastOnceADay(x, y)",
                "BusyWith(x, y)"
            ]
        }
    ],
    "943": [
        {
            "id": 973,
            "story_id": 366,
            "context": [
                "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
                "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
                "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Damon is in Franny's family. ",
                "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
            ],
            "context_fol": [
                "\u2200x (In(x, frannysFamily) \u2227 (Drink(x, kombucha) \u2228 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y))))))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))))",
                "\u2200x (In(x, frannysFamily)) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 HaveToVisitFrequently(x, dentist))",
                "\u2200x (In(x, frannysFamily) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))) \u2192 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y)))",
                "\u2200x (In(x, frannysFamily) \u2227 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y))) \u2192 \u00ac(ConsistentEverydayRoutine(x) \u2227 StickTo(damon, solidSchedule)))",
                "In(damon, frannysFamily)",
                "\u00ac((\u2203y \u2203z(\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(damon, y) \u2227 GrowUpWith(damon, z))) \u2295 (ConsistentEverydayRoutine(damon) \u2227 StickTo(damon, solidSchedule)))"
            ],
            "question": "Damon is in Franny's family and he has to visit the dentist frequently.",
            "question_fol": "HaveToVisitFrequently(damon, dentist)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "Drink(x, y)",
                "PepsiProduct(x)",
                "BusyParent(x)",
                "Pack(x, y)",
                "GrowUpWith(x, y)",
                "HaveToVisitFrequently(x, y)",
                "Have(x, y)",
                "Erratic(x)",
                "Diverse(x)",
                "EatingHabit(x)",
                "ConsistentEverydayRoutine(x)",
                "StickTo(x, y)"
            ]
        },
        {
            "id": 999,
            "story_id": 375,
            "context": [
                "All of Michael's neighbors who grow their own fresh vegetables in their home gardens also have ample space.",
                "All of Michael's neighbors who are young working professionals and live in large cities, do not have ample space.",
                "All of Michael's neighbors who order takeout from delivery services often grow their own fresh vegetables in their home garden.",
                "All of Michael's neighbors who enjoy going out often to restaurants with friends order takeout from delivery services often.",
                "All of Michael's neighbors who regularly tout the benefits of homegrown and homecooked meals over fast food enjoy going out often to restaurants with friends. ",
                "Peter, Michael's neighbor, grows his own fresh vegetables in his home garden, or regularly touts the benefits of homegrown and homecooked meals over fast food, or both."
            ],
            "context_fol": [
                "\u2200x (MichaelsNeightbor(x) \u2227 GrowIn(x, vegetable, garden) \u2192 Have(x, ampleSpace))",
                "\u2200x (MichaelsNeightbor(x) \u2227 YoungWorkingProfession(x) \u2227 LiveIn(x, largeCity) \u2192 \u00acHave(x, ampleSpace))",
                "\u2200x (MichaelsNeightbor(x) \u2227 OrderOften(x, takeout) \u2192 Grow(x, vegetable, garden))",
                "\u2200x (MichaelsNeightbor(x) \u2227 EnjoyGoingOutOftenToWith(x, restaurant, friend) \u2192 OrderOften(x, takeout))",
                "\u2200x (MichaelsNeightbor(x) \u2227 ToutOver(x, homecookedMeals, fastFood) \u2192 EnjoyGoingOutOftenToWith(x, restaurant, friend))",
                "MichaelsNeightbor(peter) \u2227 (GrowIn(peter, vegetable, garden) \u2228 ToutOver(peter, homecookedMeals, fastFood))"
            ],
            "question": "Peter enjoys going out often to restaurants with friends.",
            "question_fol": "EnjoyGoingOutOftenTo(peter, restaurant, friend)",
            "label": "Uncertain",
            "predicates_fol": [
                "MichaelsNeightbor(x)",
                "GrowIn(x, y)",
                "Have(x, y)",
                "YoungWorkingProfession(x)",
                "LiveIn(x, y)",
                "OrderOften(x, y)",
                "Grow(x, y)",
                "EnjoyGoingOutOftenToWith(x, y)",
                "ToutOver(x, y)"
            ]
        },
        {
            "id": 967,
            "story_id": 364,
            "context": [
                "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
                "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
                "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (In(x, thisNeighborhood) \u2227 VisitRegularly(x, coffeeShop) \u2192 AddictedTo(x, coffee))",
                "\u2200x (In(x, thisNeighborhood) \u2192 (VisitRegularly(x, coffeeShop) \u2228 (\u2203y (TakeOut(y) \u2227 Order(x, y, aDay))))",
                "\u2200x (In(x, thisNeighborhood) \u2227 MakeAtUsing(x, home, ownFood, recipe) \u2192 \u2203y (TakeOut(y) \u2227 Order(x, y)))",
                "\u2200x (In(x, thisNeighborhood) \u2227 \u2203y (CoffeemakerAndBlender(y) \u2227 Own(x, y)) \u2192 \u00acOrderAtLeastOnceADay(x, takeout))",
                "\u2200x (In(x, thisNeighborhood) \u2227 BusyWith(x, 12HourWorkHour) \u2192 MakeAtUsing(x, home, ownFood, recipe))",
                "In(sam, thisNeighborhood) \u2227 \u00ac(AddictedTo(sam, coffee) \u2295 BusyWith(sam, 12HourWorkHour))"
            ],
            "question": "Sam is living in this neighborhood and he is addicted to coffee.",
            "question_fol": "InThisNeighborhood(sam) \u2227 AddictedTo(sam, coffee)",
            "label": "Uncertain",
            "predicates_fol": [
                "In(x, y)",
                "VisitRegularly(x, y)",
                "AddictedTo(x, y)",
                "TakeOut(x)",
                "Order(x, y, z)",
                "MakeAtUsing(x, y, z, w)",
                "CoffeemakerAndBlender(x)",
                "Own(x, y)",
                "OrderAtLeastOnceADay(x, y)",
                "BusyWith(x, y)"
            ]
        }
    ],
    "147": [
        {
            "id": 655,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
            ],
            "context_fol": [
                "HeldIn(2008SummerOlympics, beijingChina)",
                "SecondSummerOlympicsGames(2008SummerOlympics) \u2227 BeHeldIn(2008SummerOlympics, communistState)",
                "Won(china, theMostGoldMedals)",
                "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) \u2227 Won(unitedStates, highestNumberOfMedals)",
                "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
                "\u2200x \u2200y (Placed(x, thirdInGoldMedals) \u2227 Won(y, mostGoldMedals) \u2192 FewerGoldMedalsThan(x, y))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "question_fol": "\u00acFewerGoldMedalsThan(russia, china)",
            "label": "False",
            "predicates_fol": [
                "HeldIn(x, y)",
                "SecondSummerOlympicsGames(x)",
                "BeHeldIn(x, y)",
                "Won(x, y)",
                "PlacedSecondInGoldMedalsIn(x, y)",
                "PlacedThirdInGoldMedalsIn(x, y)",
                "Placed(x, y)",
                "FewerGoldMedalsThan(x, y)"
            ]
        },
        {
            "id": 195,
            "story_id": 66,
            "context": [
                "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state in the US, the city is a US city.",
                "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
                "Los Angeles is a city in California.",
                "Atlanta is a US city.",
                "Atlanta is in Georgia.",
                "California is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States held the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y ((SummerOlympicsIn(x,y) \u2227 In(x, unitedStates)) \u2192 SummerOlympicsIn(x, unitedStates))",
                "\u2200x \u2200y ((In(x, y) \u2227 In(y, unitedStates)) \u2192 In(x, unitedStates))",
                "\u2200x \u2200y \u2200z ((In(x, z) \u2227 State(z) \u2227 SummerOlympicsIn(x,y)) \u2192 SummerOlympicsIn(z, y))",
                "SummerOlympicsIn(losAngeles, yr2028)",
                "In(losAngeles, california)",
                "In(atlanta, unitedStates)",
                "In(california, unitedStates)",
                "In(atlanta, georgia)",
                "\u00acInSummerOlympicsIn(boxing, yr2028) \u2227 (\u00acInSummerOlympicsIn(modern_pentathlon, yr2028)) \u2227 (\u00acInSummerOlympicsIn(weightlifting, yr2028))",
                "SummerOlympicsIn(atlanta, yr1996)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "question_fol": "SummerOlympicsIn(unitedStates, yr2028)",
            "label": "True",
            "predicates_fol": [
                "SummerOlympicsIn(x, y)",
                "In(x, y)",
                "State(x)",
                "InSummerOlympicsIn(x, y)"
            ]
        },
        {
            "id": 650,
            "story_id": 229,
            "context": [
                "Barbara Ann Marshall is a former swimmer and former world record-holder.",
                "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
                "Barbara Ann Marshall's home country is the United States.",
                "All people who competed in the 1972 Summer Olympics represented their home country.",
                "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
                "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
                "Only relay swimmers who participated in the final event at the 1972 Summer Olympics received medals."
            ],
            "context_fol": [
                "FormerSwimmer(barbaraAnnMarshall) \u2227 FormerWorldRecordHolder(barbaraAnnMarshall)",
                "ParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)",
                "HomeCountry(barbaraAnnMarshall, unitedStates)",
                "\u2200x \u2203y (ParticipatedIn(x, 1972SummerOlympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))",
                "ParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)",
                "\u00acParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)",
                "\u2200x ((ParticipatedIn(x, 1972SummerOlympics) \u2227 RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalHeatFreestyleRelay)) \u2194 \u00acRecieved(x, medal)))"
            ],
            "question": "Barbara Ann Marshall did not receive medals.",
            "question_fol": "\u00acRecieved(barbaraAnnMarshall, medal)",
            "label": "Uncertain",
            "predicates_fol": [
                "FormerSwimmer(x)",
                "FormerWorldRecordHolder(x)",
                "ParticipatedIn(x, y)",
                "HomeCountry(x, y)",
                "Represented(x, y)",
                "RelaySwimmer(x)",
                "Recieved(x, y)"
            ]
        }
    ],
    "148": [
        {
            "id": 655,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
            ],
            "context_fol": [
                "HeldIn(2008SummerOlympics, beijingChina)",
                "SecondSummerOlympicsGames(2008SummerOlympics) \u2227 BeHeldIn(2008SummerOlympics, communistState)",
                "Won(china, theMostGoldMedals)",
                "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) \u2227 Won(unitedStates, highestNumberOfMedals)",
                "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
                "\u2200x \u2200y (Placed(x, thirdInGoldMedals) \u2227 Won(y, mostGoldMedals) \u2192 FewerGoldMedalsThan(x, y))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "question_fol": "\u00acFewerGoldMedalsThan(russia, china)",
            "label": "False",
            "predicates_fol": [
                "HeldIn(x, y)",
                "SecondSummerOlympicsGames(x)",
                "BeHeldIn(x, y)",
                "Won(x, y)",
                "PlacedSecondInGoldMedalsIn(x, y)",
                "PlacedThirdInGoldMedalsIn(x, y)",
                "Placed(x, y)",
                "FewerGoldMedalsThan(x, y)"
            ]
        },
        {
            "id": 195,
            "story_id": 66,
            "context": [
                "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state in the US, the city is a US city.",
                "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
                "Los Angeles is a city in California.",
                "Atlanta is a US city.",
                "Atlanta is in Georgia.",
                "California is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States held the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y ((SummerOlympicsIn(x,y) \u2227 In(x, unitedStates)) \u2192 SummerOlympicsIn(x, unitedStates))",
                "\u2200x \u2200y ((In(x, y) \u2227 In(y, unitedStates)) \u2192 In(x, unitedStates))",
                "\u2200x \u2200y \u2200z ((In(x, z) \u2227 State(z) \u2227 SummerOlympicsIn(x,y)) \u2192 SummerOlympicsIn(z, y))",
                "SummerOlympicsIn(losAngeles, yr2028)",
                "In(losAngeles, california)",
                "In(atlanta, unitedStates)",
                "In(california, unitedStates)",
                "In(atlanta, georgia)",
                "\u00acInSummerOlympicsIn(boxing, yr2028) \u2227 (\u00acInSummerOlympicsIn(modern_pentathlon, yr2028)) \u2227 (\u00acInSummerOlympicsIn(weightlifting, yr2028))",
                "SummerOlympicsIn(atlanta, yr1996)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "question_fol": "SummerOlympicsIn(unitedStates, yr2028)",
            "label": "True",
            "predicates_fol": [
                "SummerOlympicsIn(x, y)",
                "In(x, y)",
                "State(x)",
                "InSummerOlympicsIn(x, y)"
            ]
        },
        {
            "id": 650,
            "story_id": 229,
            "context": [
                "Barbara Ann Marshall is a former swimmer and former world record-holder.",
                "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
                "Barbara Ann Marshall's home country is the United States.",
                "All people who competed in the 1972 Summer Olympics represented their home country.",
                "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
                "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
                "Only relay swimmers who participated in the final event at the 1972 Summer Olympics received medals."
            ],
            "context_fol": [
                "FormerSwimmer(barbaraAnnMarshall) \u2227 FormerWorldRecordHolder(barbaraAnnMarshall)",
                "ParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)",
                "HomeCountry(barbaraAnnMarshall, unitedStates)",
                "\u2200x \u2203y (ParticipatedIn(x, 1972SummerOlympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))",
                "ParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)",
                "\u00acParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)",
                "\u2200x ((ParticipatedIn(x, 1972SummerOlympics) \u2227 RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalHeatFreestyleRelay)) \u2194 \u00acRecieved(x, medal)))"
            ],
            "question": "Barbara Ann Marshall did not receive medals.",
            "question_fol": "\u00acRecieved(barbaraAnnMarshall, medal)",
            "label": "Uncertain",
            "predicates_fol": [
                "FormerSwimmer(x)",
                "FormerWorldRecordHolder(x)",
                "ParticipatedIn(x, y)",
                "HomeCountry(x, y)",
                "Represented(x, y)",
                "RelaySwimmer(x)",
                "Recieved(x, y)"
            ]
        }
    ],
    "149": [
        {
            "id": 655,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
            ],
            "context_fol": [
                "HeldIn(2008SummerOlympics, beijingChina)",
                "SecondSummerOlympicsGames(2008SummerOlympics) \u2227 BeHeldIn(2008SummerOlympics, communistState)",
                "Won(china, theMostGoldMedals)",
                "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) \u2227 Won(unitedStates, highestNumberOfMedals)",
                "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
                "\u2200x \u2200y (Placed(x, thirdInGoldMedals) \u2227 Won(y, mostGoldMedals) \u2192 FewerGoldMedalsThan(x, y))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "question_fol": "\u00acFewerGoldMedalsThan(russia, china)",
            "label": "False",
            "predicates_fol": [
                "HeldIn(x, y)",
                "SecondSummerOlympicsGames(x)",
                "BeHeldIn(x, y)",
                "Won(x, y)",
                "PlacedSecondInGoldMedalsIn(x, y)",
                "PlacedThirdInGoldMedalsIn(x, y)",
                "Placed(x, y)",
                "FewerGoldMedalsThan(x, y)"
            ]
        },
        {
            "id": 195,
            "story_id": 66,
            "context": [
                "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state in the US, the city is a US city.",
                "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
                "Los Angeles is a city in California.",
                "Atlanta is a US city.",
                "Atlanta is in Georgia.",
                "California is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States held the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y ((SummerOlympicsIn(x,y) \u2227 In(x, unitedStates)) \u2192 SummerOlympicsIn(x, unitedStates))",
                "\u2200x \u2200y ((In(x, y) \u2227 In(y, unitedStates)) \u2192 In(x, unitedStates))",
                "\u2200x \u2200y \u2200z ((In(x, z) \u2227 State(z) \u2227 SummerOlympicsIn(x,y)) \u2192 SummerOlympicsIn(z, y))",
                "SummerOlympicsIn(losAngeles, yr2028)",
                "In(losAngeles, california)",
                "In(atlanta, unitedStates)",
                "In(california, unitedStates)",
                "In(atlanta, georgia)",
                "\u00acInSummerOlympicsIn(boxing, yr2028) \u2227 (\u00acInSummerOlympicsIn(modern_pentathlon, yr2028)) \u2227 (\u00acInSummerOlympicsIn(weightlifting, yr2028))",
                "SummerOlympicsIn(atlanta, yr1996)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "question_fol": "SummerOlympicsIn(unitedStates, yr2028)",
            "label": "True",
            "predicates_fol": [
                "SummerOlympicsIn(x, y)",
                "In(x, y)",
                "State(x)",
                "InSummerOlympicsIn(x, y)"
            ]
        },
        {
            "id": 650,
            "story_id": 229,
            "context": [
                "Barbara Ann Marshall is a former swimmer and former world record-holder.",
                "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
                "Barbara Ann Marshall's home country is the United States.",
                "All people who competed in the 1972 Summer Olympics represented their home country.",
                "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
                "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
                "Only relay swimmers who participated in the final event at the 1972 Summer Olympics received medals."
            ],
            "context_fol": [
                "FormerSwimmer(barbaraAnnMarshall) \u2227 FormerWorldRecordHolder(barbaraAnnMarshall)",
                "ParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)",
                "HomeCountry(barbaraAnnMarshall, unitedStates)",
                "\u2200x \u2203y (ParticipatedIn(x, 1972SummerOlympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))",
                "ParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)",
                "\u00acParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)",
                "\u2200x ((ParticipatedIn(x, 1972SummerOlympics) \u2227 RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalHeatFreestyleRelay)) \u2194 \u00acRecieved(x, medal)))"
            ],
            "question": "Barbara Ann Marshall did not receive medals.",
            "question_fol": "\u00acRecieved(barbaraAnnMarshall, medal)",
            "label": "Uncertain",
            "predicates_fol": [
                "FormerSwimmer(x)",
                "FormerWorldRecordHolder(x)",
                "ParticipatedIn(x, y)",
                "HomeCountry(x, y)",
                "Represented(x, y)",
                "RelaySwimmer(x)",
                "Recieved(x, y)"
            ]
        }
    ],
    "703": [
        {
            "id": 916,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
                "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "question_fol": "Sleepy(jumbo)",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LivingBeing(x)",
                "Elephant(x)",
                "BabyElephant(x)",
                "Sleepy(x)"
            ]
        },
        {
            "id": 782,
            "story_id": 314,
            "context": [
                "No animals are plants.",
                "All humans are animals.",
                "All pupils are humans.",
                "All flowers are plants.",
                "Bailey is either both a human and a flower or neither a human nor a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u00ac(Human(bailey) \u2295 Flower(bailey))"
            ],
            "question": "Bailey is a pupil.",
            "question_fol": "Pupil(bailey)",
            "label": "False",
            "predicates_fol": [
                "Animal(x)",
                "Plant(x)",
                "Human(x)",
                "Pupil(x)",
                "Flower(x)"
            ]
        },
        {
            "id": 599,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are either platypuses or echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "question_fol": "\u2203x (Hyrax(x) \u2227 LayEgg(x))",
            "label": "False",
            "predicates_fol": [
                "Mammal(x)",
                "LayEgg(x)",
                "Platypus(x)",
                "Echidna(x)",
                "Platypuses(x)",
                "Hyrax(x)",
                "Echidnas(x)",
                "Invertebrate(x)",
                "Animal(x)",
                "Vertebrate(x)",
                "Grebes(x)"
            ]
        }
    ],
    "442": [
        {
            "id": 3,
            "story_id": 1,
            "context": [
                "Mary has the flu.",
                "If someone has the flu, then they have influenza.",
                "Susan doesn't have influenza."
            ],
            "context_fol": [
                "Has(mary, flu)",
                "\u2200x (Has(x, flu) \u2192 Has(x, influenza))",
                "\u00acHas(susan, influenza)"
            ],
            "question": "Either Mary or Susan has influenza.",
            "question_fol": "Has(mary, influenza) \u2295 Has(susan, influenza)",
            "label": "True",
            "predicates_fol": [
                "Has(x, y)"
            ]
        },
        {
            "id": 479,
            "story_id": 167,
            "context": [
                "If you go somewhere by train, you will not lose time.",
                "If you go somewhere by car and meet a traffic jam, you will lose time.",
                "If you lose time, you will be late for work.",
                "Mary can get from New Haven to New York City either by train or car.",
                "Mary is late for work."
            ],
            "context_fol": [
                "\u2200x (GoByTrain(x) \u2192 \u00acLoseTime(x))",
                "\u2200x((GoByCar(x) \u2227 Meet(x, trafficJam)) \u2192 LoseTime(x))",
                "\u2200x (LoseTime(x) \u2192 LateForWork(x))",
                "FromAndTo(newHaven, newYork) \u2227 (GoByTrain(mary) \u2295 GoByCar(mary))",
                "LateForWork(mary)"
            ],
            "question": "Mary gets from New Haven to New York City by train.",
            "question_fol": "FromAndTo(newHaven, newYork) \u2227 GoByTrain(mary)",
            "label": "False",
            "predicates_fol": [
                "GoByTrain(x)",
                "LoseTime(x)",
                "GoByCar(x)",
                "Meet(x, y)",
                "LateForWork(x)",
                "FromAndTo(x, y)"
            ]
        },
        {
            "id": 453,
            "story_id": 158,
            "context": [
                "Mr. and Mrs. Smith make a travel plan: they want to go to a city in California or Florida where neither of them has ever been.",
                "The cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.",
                "Cities in Florida that they are interested in are Orlando and Miami.",
                "Mr. Smith has been to two cities in California.",
                "Mrs. Smith has been to one city in Florida."
            ],
            "context_fol": [
                "\u2200x (WantToGoTo(mr.AndMrs.Smith, x) \u2227 City(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 NeverGo(x))",
                "City(sanFrancisco) \u2227 California(sanFrancisco) \u2227 WantToGoTo(mr.AndMrs.Smith, sanFrancisco) \u2227 City(losAngeles) \u2227 California(losAngeles) \u2227 WantToGoTo(mr.AndMrs.Smith, losAngeles) \u2227 City(sanDiego) \u2227 California(sanDiego) \u2227 WantToGoTo(mr.AndMrs.Smith, sanDiego)",
                "City(orlando) \u2227 Florida(orlando) \u2227 WantToGo(mr.AndMrs.Smith, orlando) \u2227 City(miami) \u2227 Florida(miami) \u2227 WantToGo(mr.AndMrs.Smith, miami)",
                "\u2203x \u2203y \u2200z (\u00ac(x=z) \u2227 \u00ac(y=z) \u2227 \u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 City(z) \u2227 California(x) \u2227 California(y) \u2227 California(z) \u2192 Visit(mr.smith, x) \u2227 Visit(mr.smith, y) \u2227 \u00acVisit(mr.smith, z))",
                "\u2203x \u2200y (\u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 Florida(x) \u2227 Florida(y) \u2192 Visit(mrs.smith, x) \u2227 \u00acVisit(mrs.smith, y))"
            ],
            "question": "Mr. Smith has been to San Francisco.",
            "question_fol": "\u2203x (City(x) \u2227 Visit(mr.smith, sanFrancisco))",
            "label": "Uncertain",
            "predicates_fol": [
                "WantToGoTo(x, y)",
                "City(x)",
                "California(x)",
                "Florida(x)",
                "NeverGo(x)",
                "WantToGo(x, y)",
                "Visit(x, y)"
            ]
        }
    ],
    "443": [
        {
            "id": 3,
            "story_id": 1,
            "context": [
                "Mary has the flu.",
                "If someone has the flu, then they have influenza.",
                "Susan doesn't have influenza."
            ],
            "context_fol": [
                "Has(mary, flu)",
                "\u2200x (Has(x, flu) \u2192 Has(x, influenza))",
                "\u00acHas(susan, influenza)"
            ],
            "question": "Either Mary or Susan has influenza.",
            "question_fol": "Has(mary, influenza) \u2295 Has(susan, influenza)",
            "label": "True",
            "predicates_fol": [
                "Has(x, y)"
            ]
        },
        {
            "id": 479,
            "story_id": 167,
            "context": [
                "If you go somewhere by train, you will not lose time.",
                "If you go somewhere by car and meet a traffic jam, you will lose time.",
                "If you lose time, you will be late for work.",
                "Mary can get from New Haven to New York City either by train or car.",
                "Mary is late for work."
            ],
            "context_fol": [
                "\u2200x (GoByTrain(x) \u2192 \u00acLoseTime(x))",
                "\u2200x((GoByCar(x) \u2227 Meet(x, trafficJam)) \u2192 LoseTime(x))",
                "\u2200x (LoseTime(x) \u2192 LateForWork(x))",
                "FromAndTo(newHaven, newYork) \u2227 (GoByTrain(mary) \u2295 GoByCar(mary))",
                "LateForWork(mary)"
            ],
            "question": "Mary gets from New Haven to New York City by train.",
            "question_fol": "FromAndTo(newHaven, newYork) \u2227 GoByTrain(mary)",
            "label": "False",
            "predicates_fol": [
                "GoByTrain(x)",
                "LoseTime(x)",
                "GoByCar(x)",
                "Meet(x, y)",
                "LateForWork(x)",
                "FromAndTo(x, y)"
            ]
        },
        {
            "id": 453,
            "story_id": 158,
            "context": [
                "Mr. and Mrs. Smith make a travel plan: they want to go to a city in California or Florida where neither of them has ever been.",
                "The cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.",
                "Cities in Florida that they are interested in are Orlando and Miami.",
                "Mr. Smith has been to two cities in California.",
                "Mrs. Smith has been to one city in Florida."
            ],
            "context_fol": [
                "\u2200x (WantToGoTo(mr.AndMrs.Smith, x) \u2227 City(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 NeverGo(x))",
                "City(sanFrancisco) \u2227 California(sanFrancisco) \u2227 WantToGoTo(mr.AndMrs.Smith, sanFrancisco) \u2227 City(losAngeles) \u2227 California(losAngeles) \u2227 WantToGoTo(mr.AndMrs.Smith, losAngeles) \u2227 City(sanDiego) \u2227 California(sanDiego) \u2227 WantToGoTo(mr.AndMrs.Smith, sanDiego)",
                "City(orlando) \u2227 Florida(orlando) \u2227 WantToGo(mr.AndMrs.Smith, orlando) \u2227 City(miami) \u2227 Florida(miami) \u2227 WantToGo(mr.AndMrs.Smith, miami)",
                "\u2203x \u2203y \u2200z (\u00ac(x=z) \u2227 \u00ac(y=z) \u2227 \u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 City(z) \u2227 California(x) \u2227 California(y) \u2227 California(z) \u2192 Visit(mr.smith, x) \u2227 Visit(mr.smith, y) \u2227 \u00acVisit(mr.smith, z))",
                "\u2203x \u2200y (\u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 Florida(x) \u2227 Florida(y) \u2192 Visit(mrs.smith, x) \u2227 \u00acVisit(mrs.smith, y))"
            ],
            "question": "Mr. Smith has been to San Francisco.",
            "question_fol": "\u2203x (City(x) \u2227 Visit(mr.smith, sanFrancisco))",
            "label": "Uncertain",
            "predicates_fol": [
                "WantToGoTo(x, y)",
                "City(x)",
                "California(x)",
                "Florida(x)",
                "NeverGo(x)",
                "WantToGo(x, y)",
                "Visit(x, y)"
            ]
        }
    ],
    "1268": [
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 1283,
            "story_id": 446,
            "context": [
                "If something is a plant, then it is not a cute animal. Simeng: All plants are not cute animals. ",
                "All flowers are plants.",
                "Every kitten is a cute animal.",
                "If something is grown in a garden, then it is a flower.",
                "Piper is a kitten or a cute animal."
            ],
            "context_fol": [
                "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u2200x (Kitten(x) \u2192 CuteAnimal(x))",
                "\u2200x (GrownIn(x, garden) \u2192 Flower(x))",
                "Kitten(piper) \u2228 CuteAnimal(piper)"
            ],
            "question": "Piper was grown in a garden.",
            "question_fol": "GrownIn(piper, garden)",
            "label": "False",
            "predicates_fol": [
                "Plant(x)",
                "CuteAnimal(x)",
                "Flower(x)",
                "Kitten(x)",
                "GrownIn(x, y)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "1269": [
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 1283,
            "story_id": 446,
            "context": [
                "If something is a plant, then it is not a cute animal. Simeng: All plants are not cute animals. ",
                "All flowers are plants.",
                "Every kitten is a cute animal.",
                "If something is grown in a garden, then it is a flower.",
                "Piper is a kitten or a cute animal."
            ],
            "context_fol": [
                "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u2200x (Kitten(x) \u2192 CuteAnimal(x))",
                "\u2200x (GrownIn(x, garden) \u2192 Flower(x))",
                "Kitten(piper) \u2228 CuteAnimal(piper)"
            ],
            "question": "Piper was grown in a garden.",
            "question_fol": "GrownIn(piper, garden)",
            "label": "False",
            "predicates_fol": [
                "Plant(x)",
                "CuteAnimal(x)",
                "Flower(x)",
                "Kitten(x)",
                "GrownIn(x, y)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "1270": [
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        },
        {
            "id": 1283,
            "story_id": 446,
            "context": [
                "If something is a plant, then it is not a cute animal. Simeng: All plants are not cute animals. ",
                "All flowers are plants.",
                "Every kitten is a cute animal.",
                "If something is grown in a garden, then it is a flower.",
                "Piper is a kitten or a cute animal."
            ],
            "context_fol": [
                "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "\u2200x (Kitten(x) \u2192 CuteAnimal(x))",
                "\u2200x (GrownIn(x, garden) \u2192 Flower(x))",
                "Kitten(piper) \u2228 CuteAnimal(piper)"
            ],
            "question": "Piper was grown in a garden.",
            "question_fol": "GrownIn(piper, garden)",
            "label": "False",
            "predicates_fol": [
                "Plant(x)",
                "CuteAnimal(x)",
                "Flower(x)",
                "Kitten(x)",
                "GrownIn(x, y)"
            ]
        },
        {
            "id": 701,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "question_fol": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))",
            "label": "True",
            "predicates_fol": [
                "Cat(x)",
                "Pet(x)",
                "Mammal(x)"
            ]
        }
    ],
    "189": [
        {
            "id": 208,
            "story_id": 70,
            "context": [
                "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
                "One of the word-setters of My Word! was Michael O'Donnell.",
                "The magazine World Medicine was edited by Michael O'Donnell.",
                "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
            ],
            "context_fol": [
                "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
                "WordSetter(michael)",
                "Magazine(worldMedicine) \u2227 EditedBy(worldMedicine, michael)",
                "BornIn(michael, yorkshire) \u2227 \u2203x(SonOf(michael, x) \u2227 GeneralPractitioner(x))"
            ],
            "question": "The son of a general practitioner was a word-setter of My Word!.",
            "question_fol": "\u2203x \u2203y (SonOf(x, y) \u2227 GeneralPractitioner(y) \u2227 WordSetter(x))",
            "label": "True",
            "predicates_fol": [
                "British(x)",
                "Physician(x)",
                "Journalist(x)",
                "Author(x)",
                "Broadcaster(x)",
                "WordSetter(x)",
                "Magazine(x)",
                "EditedBy(x, y)",
                "BornIn(x, y)",
                "SonOf(x, y)",
                "GeneralPractitioner(x)"
            ]
        },
        {
            "id": 138,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)",
                "About(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))",
                "\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))"
            ],
            "question": "Douglas Adams is a writer.",
            "question_fol": "Writer(douglasAdams)",
            "label": "True",
            "predicates_fol": [
                "Author(x)",
                "Authored(x, y)",
                "Book(x)",
                "About(x, y)",
                "Writer(x)",
                "Create(x, y)",
                "Contain(x, y)"
            ]
        },
        {
            "id": 676,
            "story_id": 238,
            "context": [
                "Daniel is a software engineer, and he works at Palantir Technologies.",
                "Daniel studied bioengineering during his undergraduate at Rice University.",
                "Daniel\u2019s older sister works at Meta as a technical sourcer. ",
                "Daniel\u2019s dad and older sister both graduated from Stanford University.",
                "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis."
            ],
            "context_fol": [
                "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)",
                "Studied(daniel, bioengineering) \u2227 UndergraduateAt(daniel, riceUniversity)",
                "WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)",
                " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)",
                "Doctor(danielsDad) \u2227 Practicing(danielsDad, internalMedicine) \u2227 PracticingAt(danielsDad, veteransHospital) \u2227 In(veteransHospital, minneapolis)"
            ],
            "question": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.",
            "question_fol": "AppliedTo(daniel, stanfordUniversity) \u2227 \u00acGotInto(daniel, stanfordUniversity) \u2227 Alumni(danielsFamilyMembers, stanfordUniversity)",
            "label": "Uncertain",
            "predicates_fol": [
                "SoftwareEngineer(x)",
                "WorksAt(x, y)",
                "Studied(x, y)",
                "UndergraduateAt(x, y)",
                "WorksAtMeta(x)",
                "TechnicalSourcer(x)",
                "GraduatedFromStanfordUniversity(x)",
                "Doctor(x)",
                "Practicing(x, y)",
                "PracticingAt(x, y)",
                "In(x, y)"
            ]
        }
    ],
    "190": [
        {
            "id": 208,
            "story_id": 70,
            "context": [
                "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
                "One of the word-setters of My Word! was Michael O'Donnell.",
                "The magazine World Medicine was edited by Michael O'Donnell.",
                "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
            ],
            "context_fol": [
                "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
                "WordSetter(michael)",
                "Magazine(worldMedicine) \u2227 EditedBy(worldMedicine, michael)",
                "BornIn(michael, yorkshire) \u2227 \u2203x(SonOf(michael, x) \u2227 GeneralPractitioner(x))"
            ],
            "question": "The son of a general practitioner was a word-setter of My Word!.",
            "question_fol": "\u2203x \u2203y (SonOf(x, y) \u2227 GeneralPractitioner(y) \u2227 WordSetter(x))",
            "label": "True",
            "predicates_fol": [
                "British(x)",
                "Physician(x)",
                "Journalist(x)",
                "Author(x)",
                "Broadcaster(x)",
                "WordSetter(x)",
                "Magazine(x)",
                "EditedBy(x, y)",
                "BornIn(x, y)",
                "SonOf(x, y)",
                "GeneralPractitioner(x)"
            ]
        },
        {
            "id": 138,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)",
                "About(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))",
                "\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))"
            ],
            "question": "Douglas Adams is a writer.",
            "question_fol": "Writer(douglasAdams)",
            "label": "True",
            "predicates_fol": [
                "Author(x)",
                "Authored(x, y)",
                "Book(x)",
                "About(x, y)",
                "Writer(x)",
                "Create(x, y)",
                "Contain(x, y)"
            ]
        },
        {
            "id": 676,
            "story_id": 238,
            "context": [
                "Daniel is a software engineer, and he works at Palantir Technologies.",
                "Daniel studied bioengineering during his undergraduate at Rice University.",
                "Daniel\u2019s older sister works at Meta as a technical sourcer. ",
                "Daniel\u2019s dad and older sister both graduated from Stanford University.",
                "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis."
            ],
            "context_fol": [
                "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)",
                "Studied(daniel, bioengineering) \u2227 UndergraduateAt(daniel, riceUniversity)",
                "WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)",
                " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)",
                "Doctor(danielsDad) \u2227 Practicing(danielsDad, internalMedicine) \u2227 PracticingAt(danielsDad, veteransHospital) \u2227 In(veteransHospital, minneapolis)"
            ],
            "question": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.",
            "question_fol": "AppliedTo(daniel, stanfordUniversity) \u2227 \u00acGotInto(daniel, stanfordUniversity) \u2227 Alumni(danielsFamilyMembers, stanfordUniversity)",
            "label": "Uncertain",
            "predicates_fol": [
                "SoftwareEngineer(x)",
                "WorksAt(x, y)",
                "Studied(x, y)",
                "UndergraduateAt(x, y)",
                "WorksAtMeta(x)",
                "TechnicalSourcer(x)",
                "GraduatedFromStanfordUniversity(x)",
                "Doctor(x)",
                "Practicing(x, y)",
                "PracticingAt(x, y)",
                "In(x, y)"
            ]
        }
    ],
    "191": [
        {
            "id": 208,
            "story_id": 70,
            "context": [
                "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
                "One of the word-setters of My Word! was Michael O'Donnell.",
                "The magazine World Medicine was edited by Michael O'Donnell.",
                "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
            ],
            "context_fol": [
                "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
                "WordSetter(michael)",
                "Magazine(worldMedicine) \u2227 EditedBy(worldMedicine, michael)",
                "BornIn(michael, yorkshire) \u2227 \u2203x(SonOf(michael, x) \u2227 GeneralPractitioner(x))"
            ],
            "question": "The son of a general practitioner was a word-setter of My Word!.",
            "question_fol": "\u2203x \u2203y (SonOf(x, y) \u2227 GeneralPractitioner(y) \u2227 WordSetter(x))",
            "label": "True",
            "predicates_fol": [
                "British(x)",
                "Physician(x)",
                "Journalist(x)",
                "Author(x)",
                "Broadcaster(x)",
                "WordSetter(x)",
                "Magazine(x)",
                "EditedBy(x, y)",
                "BornIn(x, y)",
                "SonOf(x, y)",
                "GeneralPractitioner(x)"
            ]
        },
        {
            "id": 138,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)",
                "About(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))",
                "\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))"
            ],
            "question": "Douglas Adams is a writer.",
            "question_fol": "Writer(douglasAdams)",
            "label": "True",
            "predicates_fol": [
                "Author(x)",
                "Authored(x, y)",
                "Book(x)",
                "About(x, y)",
                "Writer(x)",
                "Create(x, y)",
                "Contain(x, y)"
            ]
        },
        {
            "id": 676,
            "story_id": 238,
            "context": [
                "Daniel is a software engineer, and he works at Palantir Technologies.",
                "Daniel studied bioengineering during his undergraduate at Rice University.",
                "Daniel\u2019s older sister works at Meta as a technical sourcer. ",
                "Daniel\u2019s dad and older sister both graduated from Stanford University.",
                "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis."
            ],
            "context_fol": [
                "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)",
                "Studied(daniel, bioengineering) \u2227 UndergraduateAt(daniel, riceUniversity)",
                "WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)",
                " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)",
                "Doctor(danielsDad) \u2227 Practicing(danielsDad, internalMedicine) \u2227 PracticingAt(danielsDad, veteransHospital) \u2227 In(veteransHospital, minneapolis)"
            ],
            "question": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.",
            "question_fol": "AppliedTo(daniel, stanfordUniversity) \u2227 \u00acGotInto(daniel, stanfordUniversity) \u2227 Alumni(danielsFamilyMembers, stanfordUniversity)",
            "label": "Uncertain",
            "predicates_fol": [
                "SoftwareEngineer(x)",
                "WorksAt(x, y)",
                "Studied(x, y)",
                "UndergraduateAt(x, y)",
                "WorksAtMeta(x)",
                "TechnicalSourcer(x)",
                "GraduatedFromStanfordUniversity(x)",
                "Doctor(x)",
                "Practicing(x, y)",
                "PracticingAt(x, y)",
                "In(x, y)"
            ]
        }
    ],
    "1313": [
        {
            "id": 881,
            "story_id": 337,
            "context": [
                "No athletes never exercise.",
                "All professional basketball players are athletes. ",
                "All NBA players are professional basketball players. ",
                "All Knicks players are NBA players. ",
                "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 \u00acNeverExercises(x)) Never: does not exist a time",
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))",
                "\u00ac(ProfessionalBasketballPlayer(jim) \u2295 NeverExercises(jim))"
            ],
            "question": "Jim is a Knicks player.",
            "question_fol": "KnicksPlayer(jim)",
            "label": "False",
            "predicates_fol": [
                "Athlete(x)",
                "NeverExercises(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "KnicksPlayer(x)"
            ]
        },
        {
            "id": 840,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerback players are soccer defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "question_fol": "NBAPlayer(stephenCurry)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalSoccerPlayer(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "1314": [
        {
            "id": 881,
            "story_id": 337,
            "context": [
                "No athletes never exercise.",
                "All professional basketball players are athletes. ",
                "All NBA players are professional basketball players. ",
                "All Knicks players are NBA players. ",
                "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 \u00acNeverExercises(x)) Never: does not exist a time",
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))",
                "\u00ac(ProfessionalBasketballPlayer(jim) \u2295 NeverExercises(jim))"
            ],
            "question": "Jim is a Knicks player.",
            "question_fol": "KnicksPlayer(jim)",
            "label": "False",
            "predicates_fol": [
                "Athlete(x)",
                "NeverExercises(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "KnicksPlayer(x)"
            ]
        },
        {
            "id": 840,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerback players are soccer defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "question_fol": "NBAPlayer(stephenCurry)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalSoccerPlayer(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "1315": [
        {
            "id": 881,
            "story_id": 337,
            "context": [
                "No athletes never exercise.",
                "All professional basketball players are athletes. ",
                "All NBA players are professional basketball players. ",
                "All Knicks players are NBA players. ",
                "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 \u00acNeverExercises(x)) Never: does not exist a time",
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))",
                "\u00ac(ProfessionalBasketballPlayer(jim) \u2295 NeverExercises(jim))"
            ],
            "question": "Jim is a Knicks player.",
            "question_fol": "KnicksPlayer(jim)",
            "label": "False",
            "predicates_fol": [
                "Athlete(x)",
                "NeverExercises(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "KnicksPlayer(x)"
            ]
        },
        {
            "id": 840,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerback players are soccer defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "question_fol": "NBAPlayer(stephenCurry)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalSoccerPlayer(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "1316": [
        {
            "id": 881,
            "story_id": 337,
            "context": [
                "No athletes never exercise.",
                "All professional basketball players are athletes. ",
                "All NBA players are professional basketball players. ",
                "All Knicks players are NBA players. ",
                "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 \u00acNeverExercises(x)) Never: does not exist a time",
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))",
                "\u00ac(ProfessionalBasketballPlayer(jim) \u2295 NeverExercises(jim))"
            ],
            "question": "Jim is a Knicks player.",
            "question_fol": "KnicksPlayer(jim)",
            "label": "False",
            "predicates_fol": [
                "Athlete(x)",
                "NeverExercises(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "KnicksPlayer(x)"
            ]
        },
        {
            "id": 840,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerback players are soccer defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "question_fol": "NBAPlayer(stephenCurry)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalSoccerPlayer(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "1317": [
        {
            "id": 881,
            "story_id": 337,
            "context": [
                "No athletes never exercise.",
                "All professional basketball players are athletes. ",
                "All NBA players are professional basketball players. ",
                "All Knicks players are NBA players. ",
                "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 \u00acNeverExercises(x)) Never: does not exist a time",
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))",
                "\u00ac(ProfessionalBasketballPlayer(jim) \u2295 NeverExercises(jim))"
            ],
            "question": "Jim is a Knicks player.",
            "question_fol": "KnicksPlayer(jim)",
            "label": "False",
            "predicates_fol": [
                "Athlete(x)",
                "NeverExercises(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "KnicksPlayer(x)"
            ]
        },
        {
            "id": 840,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerback players are soccer defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "question_fol": "NBAPlayer(stephenCurry)",
            "label": "Uncertain",
            "predicates_fol": [
                "ProfessionalSoccerPlayer(x)",
                "ProfessionalBasketballPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        },
        {
            "id": 837,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All soccer defenders are soccer players.",
                "All centerbacks are soccer defenders.",
                "Roger Federer is either both an NBA player and a soccer defender, or neither."
            ],
            "context_fol": [
                "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))",
                "\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "question_fol": "ProfessionalCenterback(rogerFederer)",
            "label": "False",
            "predicates_fol": [
                "ProfessionalBasketballPlayer(x)",
                "ProfessionalSoccerPlayer(x)",
                "NBAPlayer(x)",
                "ProfessionalSoccerDefender(x)",
                "ProfessionalCenterback(x)"
            ]
        }
    ],
    "724": [
        {
            "id": 745,
            "story_id": 301,
            "context": [
                "When something is depressing, it is sad.",
                "The end of a relationship is depressing. "
            ],
            "context_fol": [
                "\u2200x (Depressing(x) \u2192 Sad(x))",
                "Depressing(v)"
            ],
            "question": "The end of a relationship is invigorating",
            "question_fol": "Invigorating(v)",
            "label": "Uncertain",
            "predicates_fol": [
                "Depressing(x)",
                "Sad(x)"
            ]
        },
        {
            "id": 723,
            "story_id": 279,
            "context": [
                "Surprises are either fun or dreadful.",
                "All scares are surprises."
            ],
            "context_fol": [
                "\u2200x (Surprise(x) \u2192 (Fun(x) \u2295 Dreadful(x)))",
                "\u2200x (Scare(x) \u2192 Surprise(x))"
            ],
            "question": "All scares are fun.",
            "question_fol": "\u2200x (Scare(x) \u2192 Fun(x))",
            "label": "Uncertain",
            "predicates_fol": [
                "Surprise(x)",
                "Fun(x)",
                "Dreadful(x)",
                "Scare(x)"
            ]
        },
        {
            "id": 1008,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or know the people who are getting married.",
                "No preteens or young children are getting married or know the people who are getting married.",
                "People who enjoy celebrating life milestone events with other people attend weddings.",
                "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and spirited are fond of large group functions.",
                "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
            ],
            "context_fol": [
                "\u2200x (Attend(x, wedding) \u2192 GettingMarried(x) \u2228 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))",
                "\u2200x (PreTeen(x) \u2228 YoungChild(x) \u2192 \u00ac(GettingMarried(x) \u2295 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))))",
                "\u2200x (\u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEvent, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)) \u2192 Attend(x, wedding))",
                "\u2200x (FondOf(x, largeGroupFunction) \u2192 \u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEventWith, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)))",
                "\u2200x (Outgoing(x) \u2227 Sprited(x)  \u2192 FondOf(x, largeGroupFunction))",
                "\u00ac((PreTeen(carol) \u2228 YoungChildren(carol)) \u2227 Attend(carol, wedding)) \u2192 \u00ac(GettingMarried(carol) \u2228 (\u2203y (Know(carol, y) \u2227 GettingMarried(y))))"
            ],
            "question": "Carol is outgoing and very spirited.",
            "question_fol": "Outgoing(carol) \u2227 Sprited(carol)",
            "label": "False",
            "predicates_fol": [
                "Attend(x, y)",
                "GettingMarried(x)",
                "Know(x, y)",
                "PreTeen(x)",
                "YoungChild(x)",
                "Enjoy(x, y, z)",
                "FondOf(x, y)",
                "Outgoing(x)",
                "Sprited(x)",
                "YoungChildren(x)"
            ]
        }
    ],
    "411": [
        {
            "id": 650,
            "story_id": 229,
            "context": [
                "Barbara Ann Marshall is a former swimmer and former world record-holder.",
                "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
                "Barbara Ann Marshall's home country is the United States.",
                "All people who competed in the 1972 Summer Olympics represented their home country.",
                "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
                "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
                "Only relay swimmers who participated in the final event at the 1972 Summer Olympics received medals."
            ],
            "context_fol": [
                "FormerSwimmer(barbaraAnnMarshall) \u2227 FormerWorldRecordHolder(barbaraAnnMarshall)",
                "ParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)",
                "HomeCountry(barbaraAnnMarshall, unitedStates)",
                "\u2200x \u2203y (ParticipatedIn(x, 1972SummerOlympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))",
                "ParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)",
                "\u00acParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)",
                "\u2200x ((ParticipatedIn(x, 1972SummerOlympics) \u2227 RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalHeatFreestyleRelay)) \u2194 \u00acRecieved(x, medal)))"
            ],
            "question": "Barbara Ann Marshall did not receive medals.",
            "question_fol": "\u00acRecieved(barbaraAnnMarshall, medal)",
            "label": "Uncertain",
            "predicates_fol": [
                "FormerSwimmer(x)",
                "FormerWorldRecordHolder(x)",
                "ParticipatedIn(x, y)",
                "HomeCountry(x, y)",
                "Represented(x, y)",
                "RelaySwimmer(x)",
                "Recieved(x, y)"
            ]
        },
        {
            "id": 10,
            "story_id": 4,
            "context": [
                "S\u016bduva Marijampol\u0117 holds the Lithuanian Super Cup.",
                "S\u016bduva Marijampol\u0117 is a soccer team."
            ],
            "context_fol": [
                "Holds(suduva, theLithuanianSuperCup)",
                "SoccerTeam(suduva)"
            ],
            "question": "Some soccer team holds the Lithuanian Super Cup.",
            "question_fol": "\u2203x (SoccerTeam(x) \u2227 Holds(x, theLithuanianSuperCup))",
            "label": "True",
            "predicates_fol": [
                "Holds(x, y)",
                "SoccerTeam(x)"
            ]
        },
        {
            "id": 336,
            "story_id": 111,
            "context": [
                "Aberdeen won the cup in the 2013 final.",
                "Rangers won the cup in the 2014 final.",
                "Aberdeen and Rangers are different teams.",
                "Different teams cannot win the cup in the same year's final."
            ],
            "context_fol": [
                "WonCup(aberdeen, year2013Final)",
                "WonCup(rangers, year2014Final)",
                "\u00ac(aberdeen=rangers)",
                "\u2200x \u2200y \u2200z \u2200w (\u00ac(x=y) \u2227 WonCup(x, z) \u2227 WonCup(y, w) \u2192 \u00ac(z=w))"
            ],
            "question": "Rangers won the cup in 2015.",
            "question_fol": "WonCup(rangers, year2015Final)",
            "label": "Uncertain",
            "predicates_fol": [
                "WonCup(x, y)"
            ]
        }
    ],
    "412": [
        {
            "id": 650,
            "story_id": 229,
            "context": [
                "Barbara Ann Marshall is a former swimmer and former world record-holder.",
                "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
                "Barbara Ann Marshall's home country is the United States.",
                "All people who competed in the 1972 Summer Olympics represented their home country.",
                "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
                "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
                "Only relay swimmers who participated in the final event at the 1972 Summer Olympics received medals."
            ],
            "context_fol": [
                "FormerSwimmer(barbaraAnnMarshall) \u2227 FormerWorldRecordHolder(barbaraAnnMarshall)",
                "ParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)",
                "HomeCountry(barbaraAnnMarshall, unitedStates)",
                "\u2200x \u2203y (ParticipatedIn(x, 1972SummerOlympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))",
                "ParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)",
                "\u00acParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)",
                "\u2200x ((ParticipatedIn(x, 1972SummerOlympics) \u2227 RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalHeatFreestyleRelay)) \u2194 \u00acRecieved(x, medal)))"
            ],
            "question": "Barbara Ann Marshall did not receive medals.",
            "question_fol": "\u00acRecieved(barbaraAnnMarshall, medal)",
            "label": "Uncertain",
            "predicates_fol": [
                "FormerSwimmer(x)",
                "FormerWorldRecordHolder(x)",
                "ParticipatedIn(x, y)",
                "HomeCountry(x, y)",
                "Represented(x, y)",
                "RelaySwimmer(x)",
                "Recieved(x, y)"
            ]
        },
        {
            "id": 10,
            "story_id": 4,
            "context": [
                "S\u016bduva Marijampol\u0117 holds the Lithuanian Super Cup.",
                "S\u016bduva Marijampol\u0117 is a soccer team."
            ],
            "context_fol": [
                "Holds(suduva, theLithuanianSuperCup)",
                "SoccerTeam(suduva)"
            ],
            "question": "Some soccer team holds the Lithuanian Super Cup.",
            "question_fol": "\u2203x (SoccerTeam(x) \u2227 Holds(x, theLithuanianSuperCup))",
            "label": "True",
            "predicates_fol": [
                "Holds(x, y)",
                "SoccerTeam(x)"
            ]
        },
        {
            "id": 336,
            "story_id": 111,
            "context": [
                "Aberdeen won the cup in the 2013 final.",
                "Rangers won the cup in the 2014 final.",
                "Aberdeen and Rangers are different teams.",
                "Different teams cannot win the cup in the same year's final."
            ],
            "context_fol": [
                "WonCup(aberdeen, year2013Final)",
                "WonCup(rangers, year2014Final)",
                "\u00ac(aberdeen=rangers)",
                "\u2200x \u2200y \u2200z \u2200w (\u00ac(x=y) \u2227 WonCup(x, z) \u2227 WonCup(y, w) \u2192 \u00ac(z=w))"
            ],
            "question": "Rangers won the cup in 2015.",
            "question_fol": "WonCup(rangers, year2015Final)",
            "label": "Uncertain",
            "predicates_fol": [
                "WonCup(x, y)"
            ]
        }
    ],
    "1324": [
        {
            "id": 1369,
            "story_id": 473,
            "context": [
                "All pets in my house are either cats or dogs.",
                "All the dogs in my house bark.",
                "Ghosts do not exist.",
                "If some pet in my house barks, then it is not dead.",
                "All of the pets in my house are either dead or alive.",
                "Jojo is a pet in my house, and it is not alive."
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Cat(x) \u2295 Dog(x))",
                "\u2200x (Dog(x) \u2227 In(x, myHouse) \u2192 Bark(x))",
                "\u2200x (\u00acGhost(x))",
                "\u2200x (Bark(x) \u2227 Pet(x) \u2227 In(x, myHouse) \u2192 \u00acDead(x))",
                "\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Dead(x) \u2295 Alive(x))",
                "Pet(jojo) \u2227 InMyHouse(jojo)\u2227 \u00acAlive(jojo)"
            ],
            "question": "Jojo is a ghost.",
            "question_fol": "Ghost(jojo)",
            "label": "False",
            "predicates_fol": [
                "Pet(x)",
                "In(x, y)",
                "Cat(x)",
                "Dog(x)",
                "Bark(x)",
                "Ghost(x)",
                "Dead(x)",
                "Alive(x)",
                "InMyHouse(x)"
            ]
        },
        {
            "id": 1264,
            "story_id": 440,
            "context": [
                "All tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "All huskies are dogs.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2295 Cat(fido)"
            ],
            "question": "Fido is a husky animal.",
            "question_fol": "Husky(fido)",
            "label": "False",
            "predicates_fol": [
                "Tiger(x)",
                "Cat(x)",
                "Dog(x)",
                "BengalTiger(x)",
                "Husky(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        }
    ],
    "1325": [
        {
            "id": 1369,
            "story_id": 473,
            "context": [
                "All pets in my house are either cats or dogs.",
                "All the dogs in my house bark.",
                "Ghosts do not exist.",
                "If some pet in my house barks, then it is not dead.",
                "All of the pets in my house are either dead or alive.",
                "Jojo is a pet in my house, and it is not alive."
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Cat(x) \u2295 Dog(x))",
                "\u2200x (Dog(x) \u2227 In(x, myHouse) \u2192 Bark(x))",
                "\u2200x (\u00acGhost(x))",
                "\u2200x (Bark(x) \u2227 Pet(x) \u2227 In(x, myHouse) \u2192 \u00acDead(x))",
                "\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Dead(x) \u2295 Alive(x))",
                "Pet(jojo) \u2227 InMyHouse(jojo)\u2227 \u00acAlive(jojo)"
            ],
            "question": "Jojo is a ghost.",
            "question_fol": "Ghost(jojo)",
            "label": "False",
            "predicates_fol": [
                "Pet(x)",
                "In(x, y)",
                "Cat(x)",
                "Dog(x)",
                "Bark(x)",
                "Ghost(x)",
                "Dead(x)",
                "Alive(x)",
                "InMyHouse(x)"
            ]
        },
        {
            "id": 1264,
            "story_id": 440,
            "context": [
                "All tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "All huskies are dogs.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2295 Cat(fido)"
            ],
            "question": "Fido is a husky animal.",
            "question_fol": "Husky(fido)",
            "label": "False",
            "predicates_fol": [
                "Tiger(x)",
                "Cat(x)",
                "Dog(x)",
                "BengalTiger(x)",
                "Husky(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        }
    ],
    "1326": [
        {
            "id": 1369,
            "story_id": 473,
            "context": [
                "All pets in my house are either cats or dogs.",
                "All the dogs in my house bark.",
                "Ghosts do not exist.",
                "If some pet in my house barks, then it is not dead.",
                "All of the pets in my house are either dead or alive.",
                "Jojo is a pet in my house, and it is not alive."
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Cat(x) \u2295 Dog(x))",
                "\u2200x (Dog(x) \u2227 In(x, myHouse) \u2192 Bark(x))",
                "\u2200x (\u00acGhost(x))",
                "\u2200x (Bark(x) \u2227 Pet(x) \u2227 In(x, myHouse) \u2192 \u00acDead(x))",
                "\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Dead(x) \u2295 Alive(x))",
                "Pet(jojo) \u2227 InMyHouse(jojo)\u2227 \u00acAlive(jojo)"
            ],
            "question": "Jojo is a ghost.",
            "question_fol": "Ghost(jojo)",
            "label": "False",
            "predicates_fol": [
                "Pet(x)",
                "In(x, y)",
                "Cat(x)",
                "Dog(x)",
                "Bark(x)",
                "Ghost(x)",
                "Dead(x)",
                "Alive(x)",
                "InMyHouse(x)"
            ]
        },
        {
            "id": 1264,
            "story_id": 440,
            "context": [
                "All tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "All huskies are dogs.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2295 Cat(fido)"
            ],
            "question": "Fido is a husky animal.",
            "question_fol": "Husky(fido)",
            "label": "False",
            "predicates_fol": [
                "Tiger(x)",
                "Cat(x)",
                "Dog(x)",
                "BengalTiger(x)",
                "Husky(x)"
            ]
        },
        {
            "id": 168,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))",
                "\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))",
                "\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))",
                "\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))",
                "OwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "question_fol": "Animal(leo)",
            "label": "True",
            "predicates_fol": [
                "Pet(x)",
                "Animal(x)",
                "Dog(x)",
                "Cat(x)",
                "OwnedBy(x, y)",
                "Cares(x, y)",
                "Naughty(x)",
                "Liked(x, y)"
            ]
        }
    ],
    "304": [
        {
            "id": 718,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adamBuska) \u2227 European(adamBuska)",
                "\u2200x (FootballPlayer(x) \u2227 European(x) \u2192 \u2203y (Call(american, y, soccer) \u2227 Play(x, y)))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "question_fol": "\u2203y (Call(american, y, soccer) \u2227 Play(adamBuska, y))",
            "label": "True",
            "predicates_fol": [
                "FootballPlayer(x)",
                "European(x)",
                "Call(x, y, z)",
                "Play(x, y)"
            ]
        },
        {
            "id": 632,
            "story_id": 224,
            "context": [
                "Rhos Aelwyd F.C. is a Welsh football club.",
                "Rhos Aelwyd F.C. is the only football club located in Ponciau. ",
                "The Premier Division was won in June 2005 by a team from Ponciau. ",
                "The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.",
                "The Premier Division in October 2009 was won by the same team that won in June 2005. "
            ],
            "context_fol": [
                "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 Welsh(x))",
                "\u2200x (FootballClub(x) \u2227 LocatedIn(x, ponciau) \u2194 Rhosaelwydfc(x))",
                "\u2203x (LocatedIn(x, ponciau) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))",
                "\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2192 PromotedTo(x, cymruAlliance))",
                "\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2194 WonPremierDivisionDuring(x, y2005MonthJune))"
            ],
            "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
            "question_fol": "\u2203x (Rhosaelwydfc(x) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))",
            "label": "True",
            "predicates_fol": [
                "Rhosaelwydfc(x)",
                "FootballClub(x)",
                "Welsh(x)",
                "LocatedIn(x, y)",
                "WonPremierDivisionDuring(x, y)",
                "PromotedTo(x, y)"
            ]
        },
        {
            "id": 552,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "Carmen and Jose are Rosa's parents.",
                "People from Catalan are not from Chile.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "BornIn(rosa, santiago)",
                "CapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)",
                "DaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)",
                "WifeOf(jose, carmen) \u2227 Chilean(carmen)",
                "ParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)",
                "\u2200x (Catalan(x) \u2192 \u00acChilean(x))",
                "\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "question_fol": "\u2203x (BornIn(rosa, x) \u2227 LargestCityOf(x, chile))",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "CapitalOf(x, y)",
                "LargestCityOf(x, y)",
                "DaughterOf(x, y)",
                "BuildingContractor(x)",
                "Catalan(x)",
                "WifeOf(x, y)",
                "Chilean(x)",
                "ParentOf(x, y)",
                "ConstructionSite(x)",
                "Oversee(x, y)"
            ]
        }
    ],
    "305": [
        {
            "id": 718,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adamBuska) \u2227 European(adamBuska)",
                "\u2200x (FootballPlayer(x) \u2227 European(x) \u2192 \u2203y (Call(american, y, soccer) \u2227 Play(x, y)))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "question_fol": "\u2203y (Call(american, y, soccer) \u2227 Play(adamBuska, y))",
            "label": "True",
            "predicates_fol": [
                "FootballPlayer(x)",
                "European(x)",
                "Call(x, y, z)",
                "Play(x, y)"
            ]
        },
        {
            "id": 632,
            "story_id": 224,
            "context": [
                "Rhos Aelwyd F.C. is a Welsh football club.",
                "Rhos Aelwyd F.C. is the only football club located in Ponciau. ",
                "The Premier Division was won in June 2005 by a team from Ponciau. ",
                "The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.",
                "The Premier Division in October 2009 was won by the same team that won in June 2005. "
            ],
            "context_fol": [
                "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 Welsh(x))",
                "\u2200x (FootballClub(x) \u2227 LocatedIn(x, ponciau) \u2194 Rhosaelwydfc(x))",
                "\u2203x (LocatedIn(x, ponciau) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))",
                "\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2192 PromotedTo(x, cymruAlliance))",
                "\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2194 WonPremierDivisionDuring(x, y2005MonthJune))"
            ],
            "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
            "question_fol": "\u2203x (Rhosaelwydfc(x) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))",
            "label": "True",
            "predicates_fol": [
                "Rhosaelwydfc(x)",
                "FootballClub(x)",
                "Welsh(x)",
                "LocatedIn(x, y)",
                "WonPremierDivisionDuring(x, y)",
                "PromotedTo(x, y)"
            ]
        },
        {
            "id": 552,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "Carmen and Jose are Rosa's parents.",
                "People from Catalan are not from Chile.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "BornIn(rosa, santiago)",
                "CapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)",
                "DaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)",
                "WifeOf(jose, carmen) \u2227 Chilean(carmen)",
                "ParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)",
                "\u2200x (Catalan(x) \u2192 \u00acChilean(x))",
                "\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "question_fol": "\u2203x (BornIn(rosa, x) \u2227 LargestCityOf(x, chile))",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "CapitalOf(x, y)",
                "LargestCityOf(x, y)",
                "DaughterOf(x, y)",
                "BuildingContractor(x)",
                "Catalan(x)",
                "WifeOf(x, y)",
                "Chilean(x)",
                "ParentOf(x, y)",
                "ConstructionSite(x)",
                "Oversee(x, y)"
            ]
        }
    ],
    "306": [
        {
            "id": 718,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adamBuska) \u2227 European(adamBuska)",
                "\u2200x (FootballPlayer(x) \u2227 European(x) \u2192 \u2203y (Call(american, y, soccer) \u2227 Play(x, y)))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "question_fol": "\u2203y (Call(american, y, soccer) \u2227 Play(adamBuska, y))",
            "label": "True",
            "predicates_fol": [
                "FootballPlayer(x)",
                "European(x)",
                "Call(x, y, z)",
                "Play(x, y)"
            ]
        },
        {
            "id": 632,
            "story_id": 224,
            "context": [
                "Rhos Aelwyd F.C. is a Welsh football club.",
                "Rhos Aelwyd F.C. is the only football club located in Ponciau. ",
                "The Premier Division was won in June 2005 by a team from Ponciau. ",
                "The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.",
                "The Premier Division in October 2009 was won by the same team that won in June 2005. "
            ],
            "context_fol": [
                "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 Welsh(x))",
                "\u2200x (FootballClub(x) \u2227 LocatedIn(x, ponciau) \u2194 Rhosaelwydfc(x))",
                "\u2203x (LocatedIn(x, ponciau) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))",
                "\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2192 PromotedTo(x, cymruAlliance))",
                "\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2194 WonPremierDivisionDuring(x, y2005MonthJune))"
            ],
            "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
            "question_fol": "\u2203x (Rhosaelwydfc(x) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))",
            "label": "True",
            "predicates_fol": [
                "Rhosaelwydfc(x)",
                "FootballClub(x)",
                "Welsh(x)",
                "LocatedIn(x, y)",
                "WonPremierDivisionDuring(x, y)",
                "PromotedTo(x, y)"
            ]
        },
        {
            "id": 552,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "Carmen and Jose are Rosa's parents.",
                "People from Catalan are not from Chile.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "BornIn(rosa, santiago)",
                "CapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)",
                "DaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)",
                "WifeOf(jose, carmen) \u2227 Chilean(carmen)",
                "ParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)",
                "\u2200x (Catalan(x) \u2192 \u00acChilean(x))",
                "\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "question_fol": "\u2203x (BornIn(rosa, x) \u2227 LargestCityOf(x, chile))",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "CapitalOf(x, y)",
                "LargestCityOf(x, y)",
                "DaughterOf(x, y)",
                "BuildingContractor(x)",
                "Catalan(x)",
                "WifeOf(x, y)",
                "Chilean(x)",
                "ParentOf(x, y)",
                "ConstructionSite(x)",
                "Oversee(x, y)"
            ]
        }
    ],
    "307": [
        {
            "id": 718,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adamBuska) \u2227 European(adamBuska)",
                "\u2200x (FootballPlayer(x) \u2227 European(x) \u2192 \u2203y (Call(american, y, soccer) \u2227 Play(x, y)))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "question_fol": "\u2203y (Call(american, y, soccer) \u2227 Play(adamBuska, y))",
            "label": "True",
            "predicates_fol": [
                "FootballPlayer(x)",
                "European(x)",
                "Call(x, y, z)",
                "Play(x, y)"
            ]
        },
        {
            "id": 632,
            "story_id": 224,
            "context": [
                "Rhos Aelwyd F.C. is a Welsh football club.",
                "Rhos Aelwyd F.C. is the only football club located in Ponciau. ",
                "The Premier Division was won in June 2005 by a team from Ponciau. ",
                "The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.",
                "The Premier Division in October 2009 was won by the same team that won in June 2005. "
            ],
            "context_fol": [
                "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 Welsh(x))",
                "\u2200x (FootballClub(x) \u2227 LocatedIn(x, ponciau) \u2194 Rhosaelwydfc(x))",
                "\u2203x (LocatedIn(x, ponciau) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))",
                "\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2192 PromotedTo(x, cymruAlliance))",
                "\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2194 WonPremierDivisionDuring(x, y2005MonthJune))"
            ],
            "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
            "question_fol": "\u2203x (Rhosaelwydfc(x) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))",
            "label": "True",
            "predicates_fol": [
                "Rhosaelwydfc(x)",
                "FootballClub(x)",
                "Welsh(x)",
                "LocatedIn(x, y)",
                "WonPremierDivisionDuring(x, y)",
                "PromotedTo(x, y)"
            ]
        },
        {
            "id": 552,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "Carmen and Jose are Rosa's parents.",
                "People from Catalan are not from Chile.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "BornIn(rosa, santiago)",
                "CapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)",
                "DaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)",
                "WifeOf(jose, carmen) \u2227 Chilean(carmen)",
                "ParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)",
                "\u2200x (Catalan(x) \u2192 \u00acChilean(x))",
                "\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "question_fol": "\u2203x (BornIn(rosa, x) \u2227 LargestCityOf(x, chile))",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "CapitalOf(x, y)",
                "LargestCityOf(x, y)",
                "DaughterOf(x, y)",
                "BuildingContractor(x)",
                "Catalan(x)",
                "WifeOf(x, y)",
                "Chilean(x)",
                "ParentOf(x, y)",
                "ConstructionSite(x)",
                "Oversee(x, y)"
            ]
        }
    ],
    "308": [
        {
            "id": 718,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adamBuska) \u2227 European(adamBuska)",
                "\u2200x (FootballPlayer(x) \u2227 European(x) \u2192 \u2203y (Call(american, y, soccer) \u2227 Play(x, y)))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "question_fol": "\u2203y (Call(american, y, soccer) \u2227 Play(adamBuska, y))",
            "label": "True",
            "predicates_fol": [
                "FootballPlayer(x)",
                "European(x)",
                "Call(x, y, z)",
                "Play(x, y)"
            ]
        },
        {
            "id": 632,
            "story_id": 224,
            "context": [
                "Rhos Aelwyd F.C. is a Welsh football club.",
                "Rhos Aelwyd F.C. is the only football club located in Ponciau. ",
                "The Premier Division was won in June 2005 by a team from Ponciau. ",
                "The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.",
                "The Premier Division in October 2009 was won by the same team that won in June 2005. "
            ],
            "context_fol": [
                "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 Welsh(x))",
                "\u2200x (FootballClub(x) \u2227 LocatedIn(x, ponciau) \u2194 Rhosaelwydfc(x))",
                "\u2203x (LocatedIn(x, ponciau) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))",
                "\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2192 PromotedTo(x, cymruAlliance))",
                "\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2194 WonPremierDivisionDuring(x, y2005MonthJune))"
            ],
            "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
            "question_fol": "\u2203x (Rhosaelwydfc(x) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))",
            "label": "True",
            "predicates_fol": [
                "Rhosaelwydfc(x)",
                "FootballClub(x)",
                "Welsh(x)",
                "LocatedIn(x, y)",
                "WonPremierDivisionDuring(x, y)",
                "PromotedTo(x, y)"
            ]
        },
        {
            "id": 552,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "Carmen and Jose are Rosa's parents.",
                "People from Catalan are not from Chile.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "BornIn(rosa, santiago)",
                "CapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)",
                "DaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)",
                "WifeOf(jose, carmen) \u2227 Chilean(carmen)",
                "ParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)",
                "\u2200x (Catalan(x) \u2192 \u00acChilean(x))",
                "\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "question_fol": "\u2203x (BornIn(rosa, x) \u2227 LargestCityOf(x, chile))",
            "label": "True",
            "predicates_fol": [
                "BornIn(x, y)",
                "CapitalOf(x, y)",
                "LargestCityOf(x, y)",
                "DaughterOf(x, y)",
                "BuildingContractor(x)",
                "Catalan(x)",
                "WifeOf(x, y)",
                "Chilean(x)",
                "ParentOf(x, y)",
                "ConstructionSite(x)",
                "Oversee(x, y)"
            ]
        }
    ]
}