{
  "1014": [
    {
      "id": 866,
      "story_id": 333,
      "context": [
        "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
        "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))",
        "∀x (Ambitious(x) → MoveOutEasily(x))",
        "∀x (BigFanOfMusic(x) → MusicDecorations(x, room))",
        "∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))",
        "Ambitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)"
      ],
      "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl attending music festival frequently",
      "question_fol": "¬(Ambitious(sam) ∨ (Attend(sam, festival) ∧ YoungTeenageGirl(sam)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 870,
      "story_id": 333,
      "context": [
        "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
        "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))",
        "∀x (Ambitious(x) → MoveOutEasily(x))",
        "∀x (BigFanOfMusic(x) → MusicDecorations(x, room))",
        "∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))",
        "Ambitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals and is a young teenage girl attending college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl attending college.",
      "question_fol": "Ambitious(sam) ∧ Attend(sam, festival) ∧ YoungTeenageGirl(sam) → ¬(Ambitious(sam) ∨ (Attend(sam, festival) ∧ YoungTeenageGirl(sam)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 871,
      "story_id": 333,
      "context": [
        "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
        "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))",
        "∀x (Ambitious(x) → MoveOutEasily(x))",
        "∀x (BigFanOfMusic(x) → MusicDecorations(x, room))",
        "∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))",
        "Ambitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl attending college.",
      "question_fol": "Ambitious(sam) → Attend(sam, festival) ∧ YoungTeenageGirl(sam)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1015": [
    {
      "id": 866,
      "story_id": 333,
      "context": [
        "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
        "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))",
        "∀x (Ambitious(x) → MoveOutEasily(x))",
        "∀x (BigFanOfMusic(x) → MusicDecorations(x, room))",
        "∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))",
        "Ambitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)"
      ],
      "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl attending music festival frequently",
      "question_fol": "¬(Ambitious(sam) ∨ (Attend(sam, festival) ∧ YoungTeenageGirl(sam)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 870,
      "story_id": 333,
      "context": [
        "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
        "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))",
        "∀x (Ambitious(x) → MoveOutEasily(x))",
        "∀x (BigFanOfMusic(x) → MusicDecorations(x, room))",
        "∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))",
        "Ambitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals and is a young teenage girl attending college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl attending college.",
      "question_fol": "Ambitious(sam) ∧ Attend(sam, festival) ∧ YoungTeenageGirl(sam) → ¬(Ambitious(sam) ∨ (Attend(sam, festival) ∧ YoungTeenageGirl(sam)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 871,
      "story_id": 333,
      "context": [
        "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
        "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))",
        "∀x (Ambitious(x) → MoveOutEasily(x))",
        "∀x (BigFanOfMusic(x) → MusicDecorations(x, room))",
        "∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))",
        "Ambitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl attending college.",
      "question_fol": "Ambitious(sam) → Attend(sam, festival) ∧ YoungTeenageGirl(sam)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1016": [
    {
      "id": 866,
      "story_id": 333,
      "context": [
        "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
        "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))",
        "∀x (Ambitious(x) → MoveOutEasily(x))",
        "∀x (BigFanOfMusic(x) → MusicDecorations(x, room))",
        "∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))",
        "Ambitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)"
      ],
      "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl attending music festival frequently",
      "question_fol": "¬(Ambitious(sam) ∨ (Attend(sam, festival) ∧ YoungTeenageGirl(sam)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 870,
      "story_id": 333,
      "context": [
        "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
        "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))",
        "∀x (Ambitious(x) → MoveOutEasily(x))",
        "∀x (BigFanOfMusic(x) → MusicDecorations(x, room))",
        "∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))",
        "Ambitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals and is a young teenage girl attending college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl attending college.",
      "question_fol": "Ambitious(sam) ∧ Attend(sam, festival) ∧ YoungTeenageGirl(sam) → ¬(Ambitious(sam) ∨ (Attend(sam, festival) ∧ YoungTeenageGirl(sam)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 871,
      "story_id": 333,
      "context": [
        "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of music decorations in their room.",
        "All young teenage girls who attend music festival frequently are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))",
        "∀x (Ambitious(x) → MoveOutEasily(x))",
        "∀x (BigFanOfMusic(x) → MusicDecorations(x, room))",
        "∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))",
        "Ambitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl attending college.",
      "question_fol": "Ambitious(sam) → Attend(sam, festival) ∧ YoungTeenageGirl(sam)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1208": [
    {
      "id": 1123,
      "story_id": 405,
      "context": [
        "Everyone who works in the office is a commuter. ",
        "People either work in the office or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup. ",
        "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
      ],
      "context_fol": [
        "∀x (WorkIn(x, office) → Commuter(x))",
        "∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))",
        "∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))",
        "Commuter(george) ⊕ Have(george, homeOffice)",
        "(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)"
      ],
      "question": "George is a person who works from home.",
      "question_fol": "WorkFrom(george, home)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1125,
      "story_id": 405,
      "context": [
        "Everyone who works in the office is a commuter. ",
        "People either work in the office or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup. ",
        "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
      ],
      "context_fol": [
        "∀x (WorkIn(x, office) → Commuter(x))",
        "∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))",
        "∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))",
        "Commuter(george) ⊕ Have(george, homeOffice)",
        "(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)"
      ],
      "question": "If George is either a person who has a home office setup and a person who works in the office, or neither a person who has a home office setup nor a person who works in the office, then George is either a person who works from home or a person who has a relaxed schedule.",
      "question_fol": "¬(Have(george, homeOffice) ⊕ WorkIn(george, office)) → (WorkFrom(george, home) ⊕ Have(george, relaxedSchedule))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 187,
      "story_id": 63,
      "context": [
        "All students who attend in person have registered for the conference. ",
        "Students either attend the conference in person or remotely. ",
        "No students from China attend the conference remotely. ",
        "James attends the conference, but he does not attend the conference remotely.",
        "Jack attends the conference, and he is a student from China."
      ],
      "context_fol": [
        "∀x (AttendInPerson(x) → Registered(x))",
        "∀x (Attend(x) → (AttendInPerson(x) ⊕ AttendRemotely(x)))",
        "∀x ((Attend(x) ∧ FromChina(x)) → ¬AttendRemotely(x))",
        "Attend(james) ∧ (¬AttendRemotely(james))",
        "FromChina(jack) ∧ Attend(jack)"
      ],
      "question": "Jack attends the conference in person.",
      "question_fol": "Attend(jack) ∧ AttendInPerson(jack)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1209": [
    {
      "id": 187,
      "story_id": 63,
      "context": [
        "All students who attend in person have registered for the conference. ",
        "Students either attend the conference in person or remotely. ",
        "No students from China attend the conference remotely. ",
        "James attends the conference, but he does not attend the conference remotely.",
        "Jack attends the conference, and he is a student from China."
      ],
      "context_fol": [
        "∀x (AttendInPerson(x) → Registered(x))",
        "∀x (Attend(x) → (AttendInPerson(x) ⊕ AttendRemotely(x)))",
        "∀x ((Attend(x) ∧ FromChina(x)) → ¬AttendRemotely(x))",
        "Attend(james) ∧ (¬AttendRemotely(james))",
        "FromChina(jack) ∧ Attend(jack)"
      ],
      "question": "Jack attends the conference in person.",
      "question_fol": "Attend(jack) ∧ AttendInPerson(jack)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1124,
      "story_id": 405,
      "context": [
        "Everyone who works in the office is a commuter. ",
        "People either work in the office or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup. ",
        "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
      ],
      "context_fol": [
        "∀x (WorkIn(x, office) → Commuter(x))",
        "∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))",
        "∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))",
        "Commuter(george) ⊕ Have(george, homeOffice)",
        "(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)"
      ],
      "question": "If George is not a person who works from home and a person who works in the office, then George is neither a commuter nor a person who has a relaxed schedule.",
      "question_fol": "¬(WorkFrom(george, home) ∧ WorkIn(george, office)) → ¬(Commuter(george) ∨ Have(george, relaxedSchedule))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1123,
      "story_id": 405,
      "context": [
        "Everyone who works in the office is a commuter. ",
        "People either work in the office or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup. ",
        "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
      ],
      "context_fol": [
        "∀x (WorkIn(x, office) → Commuter(x))",
        "∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))",
        "∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))",
        "Commuter(george) ⊕ Have(george, homeOffice)",
        "(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)"
      ],
      "question": "George is a person who works from home.",
      "question_fol": "WorkFrom(george, home)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1210": [
    {
      "id": 1124,
      "story_id": 405,
      "context": [
        "Everyone who works in the office is a commuter. ",
        "People either work in the office or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup. ",
        "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
      ],
      "context_fol": [
        "∀x (WorkIn(x, office) → Commuter(x))",
        "∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))",
        "∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))",
        "Commuter(george) ⊕ Have(george, homeOffice)",
        "(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)"
      ],
      "question": "If George is not a person who works from home and a person who works in the office, then George is neither a commuter nor a person who has a relaxed schedule.",
      "question_fol": "¬(WorkFrom(george, home) ∧ WorkIn(george, office)) → ¬(Commuter(george) ∨ Have(george, relaxedSchedule))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1125,
      "story_id": 405,
      "context": [
        "Everyone who works in the office is a commuter. ",
        "People either work in the office or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup. ",
        "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
      ],
      "context_fol": [
        "∀x (WorkIn(x, office) → Commuter(x))",
        "∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))",
        "∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))",
        "Commuter(george) ⊕ Have(george, homeOffice)",
        "(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)"
      ],
      "question": "If George is either a person who has a home office setup and a person who works in the office, or neither a person who has a home office setup nor a person who works in the office, then George is either a person who works from home or a person who has a relaxed schedule.",
      "question_fol": "¬(Have(george, homeOffice) ⊕ WorkIn(george, office)) → (WorkFrom(george, home) ⊕ Have(george, relaxedSchedule))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1123,
      "story_id": 405,
      "context": [
        "Everyone who works in the office is a commuter. ",
        "People either work in the office or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup. ",
        "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
      ],
      "context_fol": [
        "∀x (WorkIn(x, office) → Commuter(x))",
        "∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))",
        "∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))",
        "Commuter(george) ⊕ Have(george, homeOffice)",
        "(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)"
      ],
      "question": "George is a person who works from home.",
      "question_fol": "WorkFrom(george, home)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "563": [
    {
      "id": 918,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is a living being.",
      "question_fol": "LivingBeing(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 916,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "question_fol": "Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 917,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "question_fol": "¬Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "564": [
    {
      "id": 918,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is a living being.",
      "question_fol": "LivingBeing(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 916,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "question_fol": "Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 917,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "question_fol": "¬Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "565": [
    {
      "id": 918,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is a living being.",
      "question_fol": "LivingBeing(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 916,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "question_fol": "Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 917,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "question_fol": "¬Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "0": [
    {
      "id": 1265,
      "story_id": 440,
      "context": [
        "All tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "All huskies are dogs.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ⊕ Cat(fido)"
      ],
      "question": "Fido is not a husky.",
      "question_fol": "¬Husky(fido)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1266,
      "story_id": 440,
      "context": [
        "All tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "All huskies are dogs.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ⊕ Cat(fido)"
      ],
      "question": "Fido is a Bengal tiger.",
      "question_fol": "BengalTiger(fido)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1": [
    {
      "id": 725,
      "story_id": 281,
      "context": [
        "All bears in zoos are not wild. ",
        "Some bears are in zoos. "
      ],
      "context_fol": [
        "∀x ((Bear(x) ∧ In(x, zoo)) → ¬Wild(x))",
        "∃x ∃y (Bear(x) ∧ Bear(y) ∧ In(x, zoo) ∧ In(y, zoo) ∧ ¬(x=y))"
      ],
      "question": "Not all bears are wild.",
      "question_fol": "∃x (Bear(x) ∧ ¬Wild(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1265,
      "story_id": 440,
      "context": [
        "All tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "All huskies are dogs.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ⊕ Cat(fido)"
      ],
      "question": "Fido is not a husky.",
      "question_fol": "¬Husky(fido)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "2": [
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1266,
      "story_id": 440,
      "context": [
        "All tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "All huskies are dogs.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ⊕ Cat(fido)"
      ],
      "question": "Fido is a Bengal tiger.",
      "question_fol": "BengalTiger(fido)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "57": [
    {
      "id": 1153,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "Pokemon Diamond version supports Windows and has sold more than 100 million copies.",
      "question_fol": "(Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ∧ (Game(PokemonDiamond) ∧ SoldMoreThan100MillionCopies(PokemonDiamond))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1152,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "Pokemon Diamond version supports Windows.",
      "question_fol": "Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1154,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "If Pokemon Diamond version either supports Windows or has sold more than 100 million copies, then Pokemon Diamond version either is both multiplatform and one of the top-3 best selling video games, or is neither multiplatform nor one of the top-3 best selling video games.",
      "question_fol": "((Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ⊕ ((Game(PokemonDiamond) v (SoldMoreThan100MillionCopies(PokemonDiamond))) → (Multiplatform(PokemonDiamond) ∧ (Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond))) ⊕ (¬Multiplatform(PokemonDiamond) ∧ ¬(Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "58": [
    {
      "id": 1153,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "Pokemon Diamond version supports Windows and has sold more than 100 million copies.",
      "question_fol": "(Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ∧ (Game(PokemonDiamond) ∧ SoldMoreThan100MillionCopies(PokemonDiamond))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1152,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "Pokemon Diamond version supports Windows.",
      "question_fol": "Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1154,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "If Pokemon Diamond version either supports Windows or has sold more than 100 million copies, then Pokemon Diamond version either is both multiplatform and one of the top-3 best selling video games, or is neither multiplatform nor one of the top-3 best selling video games.",
      "question_fol": "((Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ⊕ ((Game(PokemonDiamond) v (SoldMoreThan100MillionCopies(PokemonDiamond))) → (Multiplatform(PokemonDiamond) ∧ (Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond))) ⊕ (¬Multiplatform(PokemonDiamond) ∧ ¬(Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "59": [
    {
      "id": 1153,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "Pokemon Diamond version supports Windows and has sold more than 100 million copies.",
      "question_fol": "(Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ∧ (Game(PokemonDiamond) ∧ SoldMoreThan100MillionCopies(PokemonDiamond))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1152,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "Pokemon Diamond version supports Windows.",
      "question_fol": "Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1154,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "If Pokemon Diamond version either supports Windows or has sold more than 100 million copies, then Pokemon Diamond version either is both multiplatform and one of the top-3 best selling video games, or is neither multiplatform nor one of the top-3 best selling video games.",
      "question_fol": "((Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ⊕ ((Game(PokemonDiamond) v (SoldMoreThan100MillionCopies(PokemonDiamond))) → (Multiplatform(PokemonDiamond) ∧ (Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond))) ⊕ (¬Multiplatform(PokemonDiamond) ∧ ¬(Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "726": [
    {
      "id": 734,
      "story_id": 290,
      "context": [
        "All tables are round.",
        "Some pieces of furniture are tables."
      ],
      "context_fol": [
        "∀x (Table(x) → Round(x))",
        "∃x ∃y (Furniture(x) ∧ Furniture(y) ∧ Table(x) ∧ Table(y) ∧ ¬(x=y))"
      ],
      "question": "Some pieces of furniture are round.",
      "question_fol": "∃x ∃y (Furniture(x) ∧ Furniture(y) ∧ Round(x) ∧ Round(y) ∧ ¬(x=y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 737,
      "story_id": 293,
      "context": [
        "All dogs sleep.",
        "Some four-legged animals are dogs."
      ],
      "context_fol": [
        "∀x (Dog(x) → Sleep(x))",
        "∃x ∃y (FourLegged(x) ∧ Animal(x) ∧ Dog(x) ∧ FourLegged(y) ∧ Animal(y) ∧ Dog(y) ∧ ¬(x=y))"
      ],
      "question": "Some four-legged animals sleep.",
      "question_fol": "∃x ∃y (FourLegged(x) ∧ Animal(x) ∧ Sleeps(x) ∧ FourLegged(y) ∧ Animal(y) ∧ Sleeps(y) ∧ ¬(x=y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 600,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Grebes are not mammals.",
      "question_fol": "∀x (Grebes(x) → ¬Mammal(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1361": [
    {
      "id": 698,
      "story_id": 254,
      "context": [
        "All rabbits have fur",
        "Some pets are rabbits."
      ],
      "context_fol": [
        "∀x (Rabbit(x) → Have(x, fur))",
        "∃x (Pet(x) ∧ Rabbit(x))"
      ],
      "question": "Some pets do not have fur.",
      "question_fol": "∃x ∃y (Pet(x) ∧ Pet(y) ∧ ¬Have(x, fur) ∧ ¬Have(y, fur))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 725,
      "story_id": 281,
      "context": [
        "All bears in zoos are not wild. ",
        "Some bears are in zoos. "
      ],
      "context_fol": [
        "∀x ((Bear(x) ∧ In(x, zoo)) → ¬Wild(x))",
        "∃x ∃y (Bear(x) ∧ Bear(y) ∧ In(x, zoo) ∧ In(y, zoo) ∧ ¬(x=y))"
      ],
      "question": "Not all bears are wild.",
      "question_fol": "∃x (Bear(x) ∧ ¬Wild(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1279,
      "story_id": 444,
      "context": [
        "All birds have wings.",
        "Animals with wings aren't reptiles.",
        "Some animals that fly are birds.",
        "If something is an iguana, then it is a reptile. Simeng: All iguanas are reptiles. ",
        "John is either both an iguana and a bird, or he is neither. ",
        "John is an animal. "
      ],
      "context_fol": [
        "∀x (Bird(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))",
        "∀x (Animal(x) ∧ (∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z))) → ¬Reptile(x))",
        "∃x (Animal(x) ∧ Fly(x) ∧ Bird(x))",
        "∀x (Iguana(x) → Reptile(x))",
        "¬(Iguana(john) ⊕ Bird(john))",
        "Animal(john)"
      ],
      "question": "John is an animal that can fly and John is a bird.",
      "question_fol": "Animal(john) ∧ Fly(john) ∧ Bird(john)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1362": [
    {
      "id": 698,
      "story_id": 254,
      "context": [
        "All rabbits have fur",
        "Some pets are rabbits."
      ],
      "context_fol": [
        "∀x (Rabbit(x) → Have(x, fur))",
        "∃x (Pet(x) ∧ Rabbit(x))"
      ],
      "question": "Some pets do not have fur.",
      "question_fol": "∃x ∃y (Pet(x) ∧ Pet(y) ∧ ¬Have(x, fur) ∧ ¬Have(y, fur))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 725,
      "story_id": 281,
      "context": [
        "All bears in zoos are not wild. ",
        "Some bears are in zoos. "
      ],
      "context_fol": [
        "∀x ((Bear(x) ∧ In(x, zoo)) → ¬Wild(x))",
        "∃x ∃y (Bear(x) ∧ Bear(y) ∧ In(x, zoo) ∧ In(y, zoo) ∧ ¬(x=y))"
      ],
      "question": "Not all bears are wild.",
      "question_fol": "∃x (Bear(x) ∧ ¬Wild(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 697,
      "story_id": 253,
      "context": [
        "No reptile has fur.",
        "All snakes are reptiles."
      ],
      "context_fol": [
        "∀x (Reptile(x) → ¬Have(x, fur))",
        "∀x (Snake(x) → Reptile(x))"
      ],
      "question": "Some snake has fur.",
      "question_fol": "∃x (Snake(x) ∧ Have(x, fur))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1363": [
    {
      "id": 698,
      "story_id": 254,
      "context": [
        "All rabbits have fur",
        "Some pets are rabbits."
      ],
      "context_fol": [
        "∀x (Rabbit(x) → Have(x, fur))",
        "∃x (Pet(x) ∧ Rabbit(x))"
      ],
      "question": "Some pets do not have fur.",
      "question_fol": "∃x ∃y (Pet(x) ∧ Pet(y) ∧ ¬Have(x, fur) ∧ ¬Have(y, fur))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 725,
      "story_id": 281,
      "context": [
        "All bears in zoos are not wild. ",
        "Some bears are in zoos. "
      ],
      "context_fol": [
        "∀x ((Bear(x) ∧ In(x, zoo)) → ¬Wild(x))",
        "∃x ∃y (Bear(x) ∧ Bear(y) ∧ In(x, zoo) ∧ In(y, zoo) ∧ ¬(x=y))"
      ],
      "question": "Not all bears are wild.",
      "question_fol": "∃x (Bear(x) ∧ ¬Wild(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 697,
      "story_id": 253,
      "context": [
        "No reptile has fur.",
        "All snakes are reptiles."
      ],
      "context_fol": [
        "∀x (Reptile(x) → ¬Have(x, fur))",
        "∀x (Snake(x) → Reptile(x))"
      ],
      "question": "Some snake has fur.",
      "question_fol": "∃x (Snake(x) ∧ Have(x, fur))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1364": [
    {
      "id": 698,
      "story_id": 254,
      "context": [
        "All rabbits have fur",
        "Some pets are rabbits."
      ],
      "context_fol": [
        "∀x (Rabbit(x) → Have(x, fur))",
        "∃x (Pet(x) ∧ Rabbit(x))"
      ],
      "question": "Some pets do not have fur.",
      "question_fol": "∃x ∃y (Pet(x) ∧ Pet(y) ∧ ¬Have(x, fur) ∧ ¬Have(y, fur))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 725,
      "story_id": 281,
      "context": [
        "All bears in zoos are not wild. ",
        "Some bears are in zoos. "
      ],
      "context_fol": [
        "∀x ((Bear(x) ∧ In(x, zoo)) → ¬Wild(x))",
        "∃x ∃y (Bear(x) ∧ Bear(y) ∧ In(x, zoo) ∧ In(y, zoo) ∧ ¬(x=y))"
      ],
      "question": "Not all bears are wild.",
      "question_fol": "∃x (Bear(x) ∧ ¬Wild(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 697,
      "story_id": 253,
      "context": [
        "No reptile has fur.",
        "All snakes are reptiles."
      ],
      "context_fol": [
        "∀x (Reptile(x) → ¬Have(x, fur))",
        "∀x (Snake(x) → Reptile(x))"
      ],
      "question": "Some snake has fur.",
      "question_fol": "∃x (Snake(x) ∧ Have(x, fur))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1365": [
    {
      "id": 698,
      "story_id": 254,
      "context": [
        "All rabbits have fur",
        "Some pets are rabbits."
      ],
      "context_fol": [
        "∀x (Rabbit(x) → Have(x, fur))",
        "∃x (Pet(x) ∧ Rabbit(x))"
      ],
      "question": "Some pets do not have fur.",
      "question_fol": "∃x ∃y (Pet(x) ∧ Pet(y) ∧ ¬Have(x, fur) ∧ ¬Have(y, fur))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 697,
      "story_id": 253,
      "context": [
        "No reptile has fur.",
        "All snakes are reptiles."
      ],
      "context_fol": [
        "∀x (Reptile(x) → ¬Have(x, fur))",
        "∀x (Snake(x) → Reptile(x))"
      ],
      "question": "Some snake has fur.",
      "question_fol": "∃x (Snake(x) ∧ Have(x, fur))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 725,
      "story_id": 281,
      "context": [
        "All bears in zoos are not wild. ",
        "Some bears are in zoos. "
      ],
      "context_fol": [
        "∀x ((Bear(x) ∧ In(x, zoo)) → ¬Wild(x))",
        "∃x ∃y (Bear(x) ∧ Bear(y) ∧ In(x, zoo) ∧ In(y, zoo) ∧ ¬(x=y))"
      ],
      "question": "Not all bears are wild.",
      "question_fol": "∃x (Bear(x) ∧ ¬Wild(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "530": [
    {
      "id": 1196,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "If Lily is available to watch 3 movies every week without any additional fees and she watches TV series in cinemas, then she goes to cinemas every week and prefers TV series more.",
      "question_fol": "(EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(lily) ∧ WatchIn(lily, tV, cinema)) → (GoToEveryWeek(lily, cinema) ∧ Prefer(lily, tVSeries))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1195,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "If Lily does not both go to cinemas every week and subscribe to HBO service, then Lily is either available to watch 3 movies every week without any additional fees or she prefers TV more.",
      "question_fol": "(GoToEveryWeek(lily, cinema) ∧ SubscribedTo(lily, hBO)) → (EligibleForThreeFreeMoviesEveryWeek(lily) ⊕ Prefer(lily, tVSeries))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1194,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "Lily goes to cinemas every week or watches 3 movies every week without any additional fees.",
      "question_fol": "GoToEveryWeek(lily, cinema) ∨ EligibleForThreeFreeMoviesWithoutAdditionalFees(lily)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "531": [
    {
      "id": 1196,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "If Lily is available to watch 3 movies every week without any additional fees and she watches TV series in cinemas, then she goes to cinemas every week and prefers TV series more.",
      "question_fol": "(EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(lily) ∧ WatchIn(lily, tV, cinema)) → (GoToEveryWeek(lily, cinema) ∧ Prefer(lily, tVSeries))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1195,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "If Lily does not both go to cinemas every week and subscribe to HBO service, then Lily is either available to watch 3 movies every week without any additional fees or she prefers TV more.",
      "question_fol": "(GoToEveryWeek(lily, cinema) ∧ SubscribedTo(lily, hBO)) → (EligibleForThreeFreeMoviesEveryWeek(lily) ⊕ Prefer(lily, tVSeries))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1194,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "Lily goes to cinemas every week or watches 3 movies every week without any additional fees.",
      "question_fol": "GoToEveryWeek(lily, cinema) ∨ EligibleForThreeFreeMoviesWithoutAdditionalFees(lily)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "532": [
    {
      "id": 1196,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "If Lily is available to watch 3 movies every week without any additional fees and she watches TV series in cinemas, then she goes to cinemas every week and prefers TV series more.",
      "question_fol": "(EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(lily) ∧ WatchIn(lily, tV, cinema)) → (GoToEveryWeek(lily, cinema) ∧ Prefer(lily, tVSeries))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1195,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "If Lily does not both go to cinemas every week and subscribe to HBO service, then Lily is either available to watch 3 movies every week without any additional fees or she prefers TV more.",
      "question_fol": "(GoToEveryWeek(lily, cinema) ∧ SubscribedTo(lily, hBO)) → (EligibleForThreeFreeMoviesEveryWeek(lily) ⊕ Prefer(lily, tVSeries))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1194,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "Lily goes to cinemas every week or watches 3 movies every week without any additional fees.",
      "question_fol": "GoToEveryWeek(lily, cinema) ∨ EligibleForThreeFreeMoviesWithoutAdditionalFees(lily)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "657": [
    {
      "id": 656,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "question_fol": "FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 655,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "question_fol": "¬FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 196,
      "story_id": 66,
      "context": [
        "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "If a city is in a state in the US, the city is a US city.",
        "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
        "Los Angeles is a city in California.",
        "Atlanta is a US city.",
        "Atlanta is in Georgia.",
        "California is a state in the United States.",
        "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
        "Atlanta in the United States held the 1996 Summer Olympics."
      ],
      "context_fol": [
        "∀x ∀y ((SummerOlympicsIn(x,y) ∧ In(x, unitedStates)) → SummerOlympicsIn(x, unitedStates))",
        "∀x ∀y ((In(x, y) ∧ In(y, unitedStates)) → In(x, unitedStates))",
        "∀x ∀y ∀z ((In(x, z) ∧ State(z) ∧ SummerOlympicsIn(x,y)) → SummerOlympicsIn(z, y))",
        "SummerOlympicsIn(losAngeles, yr2028)",
        "In(losAngeles, california)",
        "In(atlanta, unitedStates)",
        "In(california, unitedStates)",
        "In(atlanta, georgia)",
        "¬InSummerOlympicsIn(boxing, yr2028) ∧ (¬InSummerOlympicsIn(modern_pentathlon, yr2028)) ∧ (¬InSummerOlympicsIn(weightlifting, yr2028))",
        "SummerOlympicsIn(atlanta, yr1996)"
      ],
      "question": "The 1996 Summer Olympics is not in Georgia.",
      "question_fol": "¬SummerOlympicsIn(georgia, yr1996)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "658": [
    {
      "id": 656,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "question_fol": "FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 655,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "question_fol": "¬FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 196,
      "story_id": 66,
      "context": [
        "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "If a city is in a state in the US, the city is a US city.",
        "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
        "Los Angeles is a city in California.",
        "Atlanta is a US city.",
        "Atlanta is in Georgia.",
        "California is a state in the United States.",
        "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
        "Atlanta in the United States held the 1996 Summer Olympics."
      ],
      "context_fol": [
        "∀x ∀y ((SummerOlympicsIn(x,y) ∧ In(x, unitedStates)) → SummerOlympicsIn(x, unitedStates))",
        "∀x ∀y ((In(x, y) ∧ In(y, unitedStates)) → In(x, unitedStates))",
        "∀x ∀y ∀z ((In(x, z) ∧ State(z) ∧ SummerOlympicsIn(x,y)) → SummerOlympicsIn(z, y))",
        "SummerOlympicsIn(losAngeles, yr2028)",
        "In(losAngeles, california)",
        "In(atlanta, unitedStates)",
        "In(california, unitedStates)",
        "In(atlanta, georgia)",
        "¬InSummerOlympicsIn(boxing, yr2028) ∧ (¬InSummerOlympicsIn(modern_pentathlon, yr2028)) ∧ (¬InSummerOlympicsIn(weightlifting, yr2028))",
        "SummerOlympicsIn(atlanta, yr1996)"
      ],
      "question": "The 1996 Summer Olympics is not in Georgia.",
      "question_fol": "¬SummerOlympicsIn(georgia, yr1996)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "659": [
    {
      "id": 656,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "question_fol": "FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 655,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "question_fol": "¬FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 196,
      "story_id": 66,
      "context": [
        "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "If a city is in a state in the US, the city is a US city.",
        "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
        "Los Angeles is a city in California.",
        "Atlanta is a US city.",
        "Atlanta is in Georgia.",
        "California is a state in the United States.",
        "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
        "Atlanta in the United States held the 1996 Summer Olympics."
      ],
      "context_fol": [
        "∀x ∀y ((SummerOlympicsIn(x,y) ∧ In(x, unitedStates)) → SummerOlympicsIn(x, unitedStates))",
        "∀x ∀y ((In(x, y) ∧ In(y, unitedStates)) → In(x, unitedStates))",
        "∀x ∀y ∀z ((In(x, z) ∧ State(z) ∧ SummerOlympicsIn(x,y)) → SummerOlympicsIn(z, y))",
        "SummerOlympicsIn(losAngeles, yr2028)",
        "In(losAngeles, california)",
        "In(atlanta, unitedStates)",
        "In(california, unitedStates)",
        "In(atlanta, georgia)",
        "¬InSummerOlympicsIn(boxing, yr2028) ∧ (¬InSummerOlympicsIn(modern_pentathlon, yr2028)) ∧ (¬InSummerOlympicsIn(weightlifting, yr2028))",
        "SummerOlympicsIn(atlanta, yr1996)"
      ],
      "question": "The 1996 Summer Olympics is not in Georgia.",
      "question_fol": "¬SummerOlympicsIn(georgia, yr1996)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1301": [
    {
      "id": 503,
      "story_id": 175,
      "context": [
        "A werewolf is a human that can turn into a wolf.",
        "A werewolf has been scratched or bitten by another werewolf.",
        "If someone has been scratched or bitten by some entity, they have been attacked by that entity."
      ],
      "context_fol": [
        "∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))",
        "∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))",
        "∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)"
      ],
      "question": "All humans are werewolves.",
      "question_fol": "∀x (Human(x) → Werewolf(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 784,
      "story_id": 314,
      "context": [
        "No animals are plants.",
        "All humans are animals.",
        "All pupils are humans.",
        "All flowers are plants.",
        "Bailey is either both a human and a flower or neither a human nor a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "¬(Human(bailey) ⊕ Flower(bailey))"
      ],
      "question": "Bailey is a plant.",
      "question_fol": "Plant(bailey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1302": [
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 503,
      "story_id": 175,
      "context": [
        "A werewolf is a human that can turn into a wolf.",
        "A werewolf has been scratched or bitten by another werewolf.",
        "If someone has been scratched or bitten by some entity, they have been attacked by that entity."
      ],
      "context_fol": [
        "∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))",
        "∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))",
        "∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)"
      ],
      "question": "All humans are werewolves.",
      "question_fol": "∀x (Human(x) → Werewolf(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 784,
      "story_id": 314,
      "context": [
        "No animals are plants.",
        "All humans are animals.",
        "All pupils are humans.",
        "All flowers are plants.",
        "Bailey is either both a human and a flower or neither a human nor a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "¬(Human(bailey) ⊕ Flower(bailey))"
      ],
      "question": "Bailey is a plant.",
      "question_fol": "Plant(bailey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1303": [
    {
      "id": 503,
      "story_id": 175,
      "context": [
        "A werewolf is a human that can turn into a wolf.",
        "A werewolf has been scratched or bitten by another werewolf.",
        "If someone has been scratched or bitten by some entity, they have been attacked by that entity."
      ],
      "context_fol": [
        "∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))",
        "∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))",
        "∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)"
      ],
      "question": "All humans are werewolves.",
      "question_fol": "∀x (Human(x) → Werewolf(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 784,
      "story_id": 314,
      "context": [
        "No animals are plants.",
        "All humans are animals.",
        "All pupils are humans.",
        "All flowers are plants.",
        "Bailey is either both a human and a flower or neither a human nor a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "¬(Human(bailey) ⊕ Flower(bailey))"
      ],
      "question": "Bailey is a plant.",
      "question_fol": "Plant(bailey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "893": [
    {
      "id": 889,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "question_fol": "GrandSlamChampion(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 891,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "question_fol": "ProfessionalTennisUmpire(nadal) → GrandSlamUmpire(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 890,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.",
      "question_fol": "¬(GrandSlamUmpire(nadal) ∨ ProfessionalTennisUmpire(nadal))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "894": [
    {
      "id": 889,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "question_fol": "GrandSlamChampion(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 891,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "question_fol": "ProfessionalTennisUmpire(nadal) → GrandSlamUmpire(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 890,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.",
      "question_fol": "¬(GrandSlamUmpire(nadal) ∨ ProfessionalTennisUmpire(nadal))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "895": [
    {
      "id": 889,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "question_fol": "GrandSlamChampion(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 890,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.",
      "question_fol": "¬(GrandSlamUmpire(nadal) ∨ ProfessionalTennisUmpire(nadal))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 891,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "question_fol": "ProfessionalTennisUmpire(nadal) → GrandSlamUmpire(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "289": [
    {
      "id": 1154,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "If Pokemon Diamond version either supports Windows or has sold more than 100 million copies, then Pokemon Diamond version either is both multiplatform and one of the top-3 best selling video games, or is neither multiplatform nor one of the top-3 best selling video games.",
      "question_fol": "((Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ⊕ ((Game(PokemonDiamond) v (SoldMoreThan100MillionCopies(PokemonDiamond))) → (Multiplatform(PokemonDiamond) ∧ (Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond))) ⊕ (¬Multiplatform(PokemonDiamond) ∧ ¬(Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 491,
      "story_id": 171,
      "context": [
        "Some fish stings people.",
        "Stonefish is a fish.",
        "Stonefish stings when stepped on. ",
        "If a stonefish stings someone and they are not treated, it can cause death to them.",
        "To treat stonefish stings, apply heat to the affected area or use an antivenom."
      ],
      "context_fol": [
        "∃x ∃y (Fish(x) → Sting(x,y))",
        "Fish(stonefish)",
        "∀x (SteppedOnBy(stonefish, x) → Sting(stonefish, x))",
        "∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeathTo(stonefish, x))",
        "∀x (Sting(stonefish, x) ∧ (ApplyHeatTo(x) ∨ UseAntivenomOn(x)) → Treated(x))"
      ],
      "question": "If a stonefish stings you and you don’t use an antivenom, it can cause death to you.",
      "question_fol": "∀x (Sting(stonefish, x) ∧ ¬UseAntivenomOn(x) → CauseDeathTo(stonefish, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 493,
      "story_id": 171,
      "context": [
        "Some fish stings people.",
        "Stonefish is a fish.",
        "Stonefish stings when stepped on. ",
        "If a stonefish stings someone and they are not treated, it can cause death to them.",
        "To treat stonefish stings, apply heat to the affected area or use an antivenom."
      ],
      "context_fol": [
        "∃x ∃y (Fish(x) → Sting(x,y))",
        "Fish(stonefish)",
        "∀x (SteppedOnBy(stonefish, x) → Sting(stonefish, x))",
        "∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeathTo(stonefish, x))",
        "∀x (Sting(stonefish, x) ∧ (ApplyHeatTo(x) ∨ UseAntivenomOn(x)) → Treated(x))"
      ],
      "question": "If you step on a stonefish and apply heat to the affected area, it can cause death to you.",
      "question_fol": "∀x (SteppedOnBy(stonefish, x) ∧ ApplyHeatTo(x)  → CauseDeathTo(stonefish, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "290": [
    {
      "id": 102,
      "story_id": 35,
      "context": [
        "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
        "Carlos Reyes trains for an Olympic sport.",
        "Carlos Reyes went to the Olympics.",
        "Carlos Reyes is a welterweight.",
        "Heavy weights are not welterweights."
      ],
      "context_fol": [
        "∀x ((DoesOlympicSport(x) ∧ GoesToOlympicGames(x)) → Olympian(x))",
        "DoesOlympicSport(carlosReyes)",
        "GoesToOlympicGames(carlosReyes)",
        "WelterWeight(carlosReyes)",
        "∀x (WelterWeight(x) → ¬ HeavyWeight(x))"
      ],
      "question": "Carlos Reyes is a heavy weight.",
      "question_fol": "HeavyWeight(carlosReyes)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1154,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "If Pokemon Diamond version either supports Windows or has sold more than 100 million copies, then Pokemon Diamond version either is both multiplatform and one of the top-3 best selling video games, or is neither multiplatform nor one of the top-3 best selling video games.",
      "question_fol": "((Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ⊕ ((Game(PokemonDiamond) v (SoldMoreThan100MillionCopies(PokemonDiamond))) → (Multiplatform(PokemonDiamond) ∧ (Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond))) ⊕ (¬Multiplatform(PokemonDiamond) ∧ ¬(Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 101,
      "story_id": 35,
      "context": [
        "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
        "Carlos Reyes trains for an Olympic sport.",
        "Carlos Reyes went to the Olympics.",
        "Carlos Reyes is a welterweight.",
        "Heavy weights are not welterweights."
      ],
      "context_fol": [
        "∀x ((DoesOlympicSport(x) ∧ GoesToOlympicGames(x)) → Olympian(x))",
        "DoesOlympicSport(carlosReyes)",
        "GoesToOlympicGames(carlosReyes)",
        "WelterWeight(carlosReyes)",
        "∀x (WelterWeight(x) → ¬ HeavyWeight(x))"
      ],
      "question": "Carlos Reyes is an Olympian.",
      "question_fol": "Olympian(carlosReyes)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "291": [
    {
      "id": 1154,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "If Pokemon Diamond version either supports Windows or has sold more than 100 million copies, then Pokemon Diamond version either is both multiplatform and one of the top-3 best selling video games, or is neither multiplatform nor one of the top-3 best selling video games.",
      "question_fol": "((Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ⊕ ((Game(PokemonDiamond) v (SoldMoreThan100MillionCopies(PokemonDiamond))) → (Multiplatform(PokemonDiamond) ∧ (Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond))) ⊕ (¬Multiplatform(PokemonDiamond) ∧ ¬(Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 889,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "question_fol": "GrandSlamChampion(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1153,
      "story_id": 411,
      "context": [
        "If a game is one of the top-3 best selling video-games, then it is multiplatform.",
        "If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.",
        "Some games that support Windows are developed by Nintendo.",
        "All multiplatform games can be played on a wide range of devices.",
        "Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."
      ],
      "context_fol": [
        "∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))",
        "∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))",
        "∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))",
        "∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))",
        "¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
      ],
      "question": "Pokemon Diamond version supports Windows and has sold more than 100 million copies.",
      "question_fol": "(Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ∧ (Game(PokemonDiamond) ∧ SoldMoreThan100MillionCopies(PokemonDiamond))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "621": [
    {
      "id": 1130,
      "story_id": 407,
      "context": [
        "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
        "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
        "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
        "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
        "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
        "Ryan is performing at New Haven Symphony Orchestra.",
        "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
      ],
      "context_fol": [
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))",
        "∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))",
        "PerformAt(ryan, newHavenSymphonyOrchestra)",
        "(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))"
      ],
      "question": "Ryan is an interesting soloist.",
      "question_fol": "InterestingSoloist(ryan)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1132,
      "story_id": 407,
      "context": [
        "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
        "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
        "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
        "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
        "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
        "Ryan is performing at New Haven Symphony Orchestra.",
        "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
      ],
      "context_fol": [
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))",
        "∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))",
        "PerformAt(ryan, newHavenSymphonyOrchestra)",
        "(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))"
      ],
      "question": "Ryan is either a permanent member of an orchestra or has a temporary role at the orchestra.",
      "question_fol": "(PermanentMemberOf(ryan, orchestra) ⊕ HaveTemporaryRoleAt(ryan, orchestra))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1131,
      "story_id": 407,
      "context": [
        "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
        "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
        "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
        "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
        "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
        "Ryan is performing at New Haven Symphony Orchestra.",
        "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
      ],
      "context_fol": [
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))",
        "∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))",
        "PerformAt(ryan, newHavenSymphonyOrchestra)",
        "(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))"
      ],
      "question": "Ryan is either a permanent member of an orchestra or a touring soloist musician.",
      "question_fol": "(PermanentMemberOf(ryan, orchestra) ⊕ TouringMusician(ryan))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "622": [
    {
      "id": 1130,
      "story_id": 407,
      "context": [
        "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
        "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
        "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
        "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
        "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
        "Ryan is performing at New Haven Symphony Orchestra.",
        "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
      ],
      "context_fol": [
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))",
        "∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))",
        "PerformAt(ryan, newHavenSymphonyOrchestra)",
        "(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))"
      ],
      "question": "Ryan is an interesting soloist.",
      "question_fol": "InterestingSoloist(ryan)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1132,
      "story_id": 407,
      "context": [
        "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
        "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
        "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
        "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
        "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
        "Ryan is performing at New Haven Symphony Orchestra.",
        "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
      ],
      "context_fol": [
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))",
        "∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))",
        "PerformAt(ryan, newHavenSymphonyOrchestra)",
        "(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))"
      ],
      "question": "Ryan is either a permanent member of an orchestra or has a temporary role at the orchestra.",
      "question_fol": "(PermanentMemberOf(ryan, orchestra) ⊕ HaveTemporaryRoleAt(ryan, orchestra))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1131,
      "story_id": 407,
      "context": [
        "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
        "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
        "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
        "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
        "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
        "Ryan is performing at New Haven Symphony Orchestra.",
        "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
      ],
      "context_fol": [
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))",
        "∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))",
        "PerformAt(ryan, newHavenSymphonyOrchestra)",
        "(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))"
      ],
      "question": "Ryan is either a permanent member of an orchestra or a touring soloist musician.",
      "question_fol": "(PermanentMemberOf(ryan, orchestra) ⊕ TouringMusician(ryan))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "623": [
    {
      "id": 1130,
      "story_id": 407,
      "context": [
        "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
        "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
        "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
        "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
        "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
        "Ryan is performing at New Haven Symphony Orchestra.",
        "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
      ],
      "context_fol": [
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))",
        "∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))",
        "PerformAt(ryan, newHavenSymphonyOrchestra)",
        "(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))"
      ],
      "question": "Ryan is an interesting soloist.",
      "question_fol": "InterestingSoloist(ryan)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1132,
      "story_id": 407,
      "context": [
        "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
        "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
        "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
        "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
        "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
        "Ryan is performing at New Haven Symphony Orchestra.",
        "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
      ],
      "context_fol": [
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))",
        "∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))",
        "PerformAt(ryan, newHavenSymphonyOrchestra)",
        "(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))"
      ],
      "question": "Ryan is either a permanent member of an orchestra or has a temporary role at the orchestra.",
      "question_fol": "(PermanentMemberOf(ryan, orchestra) ⊕ HaveTemporaryRoleAt(ryan, orchestra))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1131,
      "story_id": 407,
      "context": [
        "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.",
        "Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.",
        "All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.",
        "All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.",
        "All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.",
        "Ryan is performing at New Haven Symphony Orchestra.",
        "If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "
      ],
      "context_fol": [
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))",
        "∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))",
        "∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))",
        "PerformAt(ryan, newHavenSymphonyOrchestra)",
        "(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))"
      ],
      "question": "Ryan is either a permanent member of an orchestra or a touring soloist musician.",
      "question_fol": "(PermanentMemberOf(ryan, orchestra) ⊕ TouringMusician(ryan))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "927": [
    {
      "id": 675,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
      ],
      "context_fol": [
        "British-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)",
        "BornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)",
        "VisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Max admires Zaha Hadid.",
      "question_fol": "Admires(max, zahaHadid)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 673,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
      ],
      "context_fol": [
        "British-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)",
        "BornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)",
        "VisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Zaha Hadid did some work in interior design.",
      "question_fol": "DidWorkIn(zahaHadid, interiorDesign)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 672,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
      ],
      "context_fol": [
        "British-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)",
        "BornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)",
        "VisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Zaha Hadid was a citizen of Britain and Iraq.",
      "question_fol": "British-Iraqi(zahaHadid)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "928": [
    {
      "id": 675,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
      ],
      "context_fol": [
        "British-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)",
        "BornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)",
        "VisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Max admires Zaha Hadid.",
      "question_fol": "Admires(max, zahaHadid)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 673,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
      ],
      "context_fol": [
        "British-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)",
        "BornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)",
        "VisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Zaha Hadid did some work in interior design.",
      "question_fol": "DidWorkIn(zahaHadid, interiorDesign)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 672,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
      ],
      "context_fol": [
        "British-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)",
        "BornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)",
        "VisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Zaha Hadid was a citizen of Britain and Iraq.",
      "question_fol": "British-Iraqi(zahaHadid)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "929": [
    {
      "id": 675,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
      ],
      "context_fol": [
        "British-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)",
        "BornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)",
        "VisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Max admires Zaha Hadid.",
      "question_fol": "Admires(max, zahaHadid)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 673,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
      ],
      "context_fol": [
        "British-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)",
        "BornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)",
        "VisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Zaha Hadid did some work in interior design.",
      "question_fol": "DidWorkIn(zahaHadid, interiorDesign)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 672,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist, and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "
      ],
      "context_fol": [
        "British-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)",
        "BornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)",
        "VisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Zaha Hadid was a citizen of Britain and Iraq.",
      "question_fol": "British-Iraqi(zahaHadid)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1029": [
    {
      "id": 889,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "question_fol": "GrandSlamChampion(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 891,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "question_fol": "ProfessionalTennisUmpire(nadal) → GrandSlamUmpire(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 892,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.",
      "question_fol": "GrandSlamUmpire(nadal) ∨ ProfessionalTennisPlayer(nadal) → GrandSlamUmpire(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1030": [
    {
      "id": 99,
      "story_id": 34,
      "context": [
        "Rafa Nadal was born in Mallorca.",
        "Rafa Nadal is a professional tennis player.",
        "Nadal's win ratio is high.",
        "All players in the Big 3 are professionals who have a high win ratio."
      ],
      "context_fol": [
        "BornIn(rafaNadal, mallorca)",
        "ProfessionalTennisPlayer(rafaNadal)",
        "HighWinRatio(rafaNadal)",
        "∀x ((ProfessionalTennisPlayer(x) ∧ HighWinRatio(x)) → InBig3(x))"
      ],
      "question": "Nadal is in the Big 3.",
      "question_fol": "InBig3(rafaNadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 889,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "question_fol": "GrandSlamChampion(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 891,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "question_fol": "ProfessionalTennisUmpire(nadal) → GrandSlamUmpire(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1031": [
    {
      "id": 891,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "question_fol": "ProfessionalTennisUmpire(nadal) → GrandSlamUmpire(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 889,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "question_fol": "GrandSlamChampion(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 892,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.",
      "question_fol": "GrandSlamUmpire(nadal) ∨ ProfessionalTennisPlayer(nadal) → GrandSlamUmpire(nadal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "700": [
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "456": [
    {
      "id": 1196,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "If Lily is available to watch 3 movies every week without any additional fees and she watches TV series in cinemas, then she goes to cinemas every week and prefers TV series more.",
      "question_fol": "(EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(lily) ∧ WatchIn(lily, tV, cinema)) → (GoToEveryWeek(lily, cinema) ∧ Prefer(lily, tVSeries))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1195,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "If Lily does not both go to cinemas every week and subscribe to HBO service, then Lily is either available to watch 3 movies every week without any additional fees or she prefers TV more.",
      "question_fol": "(GoToEveryWeek(lily, cinema) ∧ SubscribedTo(lily, hBO)) → (EligibleForThreeFreeMoviesEveryWeek(lily) ⊕ Prefer(lily, tVSeries))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1194,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "Lily goes to cinemas every week or watches 3 movies every week without any additional fees.",
      "question_fol": "GoToEveryWeek(lily, cinema) ∨ EligibleForThreeFreeMoviesWithoutAdditionalFees(lily)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "457": [
    {
      "id": 1196,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "If Lily is available to watch 3 movies every week without any additional fees and she watches TV series in cinemas, then she goes to cinemas every week and prefers TV series more.",
      "question_fol": "(EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(lily) ∧ WatchIn(lily, tV, cinema)) → (GoToEveryWeek(lily, cinema) ∧ Prefer(lily, tVSeries))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1195,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "If Lily does not both go to cinemas every week and subscribe to HBO service, then Lily is either available to watch 3 movies every week without any additional fees or she prefers TV more.",
      "question_fol": "(GoToEveryWeek(lily, cinema) ∧ SubscribedTo(lily, hBO)) → (EligibleForThreeFreeMoviesEveryWeek(lily) ⊕ Prefer(lily, tVSeries))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1194,
      "story_id": 422,
      "context": [
        "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. ",
        "Some of the customers in James' family go to the cinema every week.",
        "Customers in James' family subscribe to AMC A-List or HBO service. ",
        "Customers in James' family who prefer TV series will not watch TV series in cinemas.",
        "All customers in James' family who subscribe to HBO services prefer TV series to movies. ",
        "Lily is in James' family; she watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
        "∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))",
        "∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))",
        "∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))",
        "Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)"
      ],
      "question": "Lily goes to cinemas every week or watches 3 movies every week without any additional fees.",
      "question_fol": "GoToEveryWeek(lily, cinema) ∨ EligibleForThreeFreeMoviesWithoutAdditionalFees(lily)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "904": [
    {
      "id": 571,
      "story_id": 200,
      "context": [
        "Wildfeed exists as an unannounced program.",
        "Wildfeed can be sporting events, news, or syndicated shows.",
        "Pre-recorded content is a copyright violation.",
        "Programs are pre-recorded."
      ],
      "context_fol": [
        "∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))",
        "∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))",
        "∀x (Prerecorded(x) → CopyrightViolation(x))",
        "∀x (Program(x) → Prerecorded(x))"
      ],
      "question": "Syndicated shows are copyright violations.",
      "question_fol": "∃x (SyndicatedShows(x) ∧ CopyrightViolation(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 569,
      "story_id": 200,
      "context": [
        "Wildfeed exists as an unannounced program.",
        "Wildfeed can be sporting events, news, or syndicated shows.",
        "Pre-recorded content is a copyright violation.",
        "Programs are pre-recorded."
      ],
      "context_fol": [
        "∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))",
        "∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))",
        "∀x (Prerecorded(x) → CopyrightViolation(x))",
        "∀x (Program(x) → Prerecorded(x))"
      ],
      "question": "Some wildfeed is violating copyright laws.",
      "question_fol": "∃x (Wildfeed(x) ∧ CopyrightViolation(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 570,
      "story_id": 200,
      "context": [
        "Wildfeed exists as an unannounced program.",
        "Wildfeed can be sporting events, news, or syndicated shows.",
        "Pre-recorded content is a copyright violation.",
        "Programs are pre-recorded."
      ],
      "context_fol": [
        "∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))",
        "∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))",
        "∀x (Prerecorded(x) → CopyrightViolation(x))",
        "∀x (Program(x) → Prerecorded(x))"
      ],
      "question": "Wildfeed can be prerecorded.",
      "question_fol": "∃x (Wildfeed(x) ∧ Prerecorded(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "905": [
    {
      "id": 571,
      "story_id": 200,
      "context": [
        "Wildfeed exists as an unannounced program.",
        "Wildfeed can be sporting events, news, or syndicated shows.",
        "Pre-recorded content is a copyright violation.",
        "Programs are pre-recorded."
      ],
      "context_fol": [
        "∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))",
        "∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))",
        "∀x (Prerecorded(x) → CopyrightViolation(x))",
        "∀x (Program(x) → Prerecorded(x))"
      ],
      "question": "Syndicated shows are copyright violations.",
      "question_fol": "∃x (SyndicatedShows(x) ∧ CopyrightViolation(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 569,
      "story_id": 200,
      "context": [
        "Wildfeed exists as an unannounced program.",
        "Wildfeed can be sporting events, news, or syndicated shows.",
        "Pre-recorded content is a copyright violation.",
        "Programs are pre-recorded."
      ],
      "context_fol": [
        "∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))",
        "∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))",
        "∀x (Prerecorded(x) → CopyrightViolation(x))",
        "∀x (Program(x) → Prerecorded(x))"
      ],
      "question": "Some wildfeed is violating copyright laws.",
      "question_fol": "∃x (Wildfeed(x) ∧ CopyrightViolation(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 570,
      "story_id": 200,
      "context": [
        "Wildfeed exists as an unannounced program.",
        "Wildfeed can be sporting events, news, or syndicated shows.",
        "Pre-recorded content is a copyright violation.",
        "Programs are pre-recorded."
      ],
      "context_fol": [
        "∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))",
        "∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))",
        "∀x (Prerecorded(x) → CopyrightViolation(x))",
        "∀x (Program(x) → Prerecorded(x))"
      ],
      "question": "Wildfeed can be prerecorded.",
      "question_fol": "∃x (Wildfeed(x) ∧ Prerecorded(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "906": [
    {
      "id": 571,
      "story_id": 200,
      "context": [
        "Wildfeed exists as an unannounced program.",
        "Wildfeed can be sporting events, news, or syndicated shows.",
        "Pre-recorded content is a copyright violation.",
        "Programs are pre-recorded."
      ],
      "context_fol": [
        "∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))",
        "∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))",
        "∀x (Prerecorded(x) → CopyrightViolation(x))",
        "∀x (Program(x) → Prerecorded(x))"
      ],
      "question": "Syndicated shows are copyright violations.",
      "question_fol": "∃x (SyndicatedShows(x) ∧ CopyrightViolation(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 569,
      "story_id": 200,
      "context": [
        "Wildfeed exists as an unannounced program.",
        "Wildfeed can be sporting events, news, or syndicated shows.",
        "Pre-recorded content is a copyright violation.",
        "Programs are pre-recorded."
      ],
      "context_fol": [
        "∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))",
        "∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))",
        "∀x (Prerecorded(x) → CopyrightViolation(x))",
        "∀x (Program(x) → Prerecorded(x))"
      ],
      "question": "Some wildfeed is violating copyright laws.",
      "question_fol": "∃x (Wildfeed(x) ∧ CopyrightViolation(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 570,
      "story_id": 200,
      "context": [
        "Wildfeed exists as an unannounced program.",
        "Wildfeed can be sporting events, news, or syndicated shows.",
        "Pre-recorded content is a copyright violation.",
        "Programs are pre-recorded."
      ],
      "context_fol": [
        "∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))",
        "∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))",
        "∀x (Prerecorded(x) → CopyrightViolation(x))",
        "∀x (Program(x) → Prerecorded(x))"
      ],
      "question": "Wildfeed can be prerecorded.",
      "question_fol": "∃x (Wildfeed(x) ∧ Prerecorded(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "608": [
    {
      "id": 690,
      "story_id": 247,
      "context": [
        "LanguageA is a universal language",
        "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
        "Katya cannot communicate with Danil.",
        "Katya knows LanguageA. "
      ],
      "context_fol": [
        "UniversalLanguage(languageA)",
        "∀x ∀y (∃z (¬(x=y) ∧ Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → CanCommunicateWith(x, y) ∧ CanCommunicateWith(y, x))",
        "¬CanCommunicateWith(katya, danil)",
        "Know(katya, languageA)"
      ],
      "question": "Danil knows LanguageA.",
      "question_fol": "Know(danil, languageA)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 598,
      "story_id": 209,
      "context": [
        "If someone lives in a place named Galicia, then they live in either Spain or Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in a place named Galicia."
      ],
      "context_fol": [
        "∀x (∃y (LiveIn(x, y) ∧ Place(y) ∧ Named(y, galicia)) → LiveIn(x, spain) ⊕ LiveIn(x, poland))",
        "∀x (LiveIn(x, spain) → LiveIn(x, europe))",
        "∀x (LiveIn(x, poland) → LiveIn(x, europe))",
        "LiveIn(rochelle, europe)",
        "¬LiveIn(dominique, europe)",
        "∃y (LiveIn(alfonso, y) ∧ Place(y) ∧ Named(y, galicia))"
      ],
      "question": "Alfonso lives in Europe.",
      "question_fol": "∀x (Live(alfonso, x) → In(x, europe))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 597,
      "story_id": 209,
      "context": [
        "If someone lives in a place named Galicia, then they live in either Spain or Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in a place named Galicia."
      ],
      "context_fol": [
        "∀x (∃y (LiveIn(x, y) ∧ Place(y) ∧ Named(y, galicia)) → LiveIn(x, spain) ⊕ LiveIn(x, poland))",
        "∀x (LiveIn(x, spain) → LiveIn(x, europe))",
        "∀x (LiveIn(x, poland) → LiveIn(x, europe))",
        "LiveIn(rochelle, europe)",
        "¬LiveIn(dominique, europe)",
        "∃y (LiveIn(alfonso, y) ∧ Place(y) ∧ Named(y, galicia))"
      ],
      "question": "Dominique does not live in Spain.",
      "question_fol": "∀x (Live(dominique, x) → ¬In(x, spain))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "609": [
    {
      "id": 690,
      "story_id": 247,
      "context": [
        "LanguageA is a universal language",
        "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
        "Katya cannot communicate with Danil.",
        "Katya knows LanguageA. "
      ],
      "context_fol": [
        "UniversalLanguage(languageA)",
        "∀x ∀y (∃z (¬(x=y) ∧ Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → CanCommunicateWith(x, y) ∧ CanCommunicateWith(y, x))",
        "¬CanCommunicateWith(katya, danil)",
        "Know(katya, languageA)"
      ],
      "question": "Danil knows LanguageA.",
      "question_fol": "Know(danil, languageA)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 598,
      "story_id": 209,
      "context": [
        "If someone lives in a place named Galicia, then they live in either Spain or Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in a place named Galicia."
      ],
      "context_fol": [
        "∀x (∃y (LiveIn(x, y) ∧ Place(y) ∧ Named(y, galicia)) → LiveIn(x, spain) ⊕ LiveIn(x, poland))",
        "∀x (LiveIn(x, spain) → LiveIn(x, europe))",
        "∀x (LiveIn(x, poland) → LiveIn(x, europe))",
        "LiveIn(rochelle, europe)",
        "¬LiveIn(dominique, europe)",
        "∃y (LiveIn(alfonso, y) ∧ Place(y) ∧ Named(y, galicia))"
      ],
      "question": "Alfonso lives in Europe.",
      "question_fol": "∀x (Live(alfonso, x) → In(x, europe))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 597,
      "story_id": 209,
      "context": [
        "If someone lives in a place named Galicia, then they live in either Spain or Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in a place named Galicia."
      ],
      "context_fol": [
        "∀x (∃y (LiveIn(x, y) ∧ Place(y) ∧ Named(y, galicia)) → LiveIn(x, spain) ⊕ LiveIn(x, poland))",
        "∀x (LiveIn(x, spain) → LiveIn(x, europe))",
        "∀x (LiveIn(x, poland) → LiveIn(x, europe))",
        "LiveIn(rochelle, europe)",
        "¬LiveIn(dominique, europe)",
        "∃y (LiveIn(alfonso, y) ∧ Place(y) ∧ Named(y, galicia))"
      ],
      "question": "Dominique does not live in Spain.",
      "question_fol": "∀x (Live(dominique, x) → ¬In(x, spain))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "610": [
    {
      "id": 690,
      "story_id": 247,
      "context": [
        "LanguageA is a universal language",
        "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
        "Katya cannot communicate with Danil.",
        "Katya knows LanguageA. "
      ],
      "context_fol": [
        "UniversalLanguage(languageA)",
        "∀x ∀y (∃z (¬(x=y) ∧ Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → CanCommunicateWith(x, y) ∧ CanCommunicateWith(y, x))",
        "¬CanCommunicateWith(katya, danil)",
        "Know(katya, languageA)"
      ],
      "question": "Danil knows LanguageA.",
      "question_fol": "Know(danil, languageA)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 598,
      "story_id": 209,
      "context": [
        "If someone lives in a place named Galicia, then they live in either Spain or Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in a place named Galicia."
      ],
      "context_fol": [
        "∀x (∃y (LiveIn(x, y) ∧ Place(y) ∧ Named(y, galicia)) → LiveIn(x, spain) ⊕ LiveIn(x, poland))",
        "∀x (LiveIn(x, spain) → LiveIn(x, europe))",
        "∀x (LiveIn(x, poland) → LiveIn(x, europe))",
        "LiveIn(rochelle, europe)",
        "¬LiveIn(dominique, europe)",
        "∃y (LiveIn(alfonso, y) ∧ Place(y) ∧ Named(y, galicia))"
      ],
      "question": "Alfonso lives in Europe.",
      "question_fol": "∀x (Live(alfonso, x) → In(x, europe))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 597,
      "story_id": 209,
      "context": [
        "If someone lives in a place named Galicia, then they live in either Spain or Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in a place named Galicia."
      ],
      "context_fol": [
        "∀x (∃y (LiveIn(x, y) ∧ Place(y) ∧ Named(y, galicia)) → LiveIn(x, spain) ⊕ LiveIn(x, poland))",
        "∀x (LiveIn(x, spain) → LiveIn(x, europe))",
        "∀x (LiveIn(x, poland) → LiveIn(x, europe))",
        "LiveIn(rochelle, europe)",
        "¬LiveIn(dominique, europe)",
        "∃y (LiveIn(alfonso, y) ∧ Place(y) ∧ Named(y, galicia))"
      ],
      "question": "Dominique does not live in Spain.",
      "question_fol": "∀x (Live(dominique, x) → ¬In(x, spain))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "240": [
    {
      "id": 373,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "question_fol": "TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is not a top soccer player.",
      "question_fol": "¬TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 626,
      "story_id": 221,
      "context": [
        "Ernest Pohl was a Polish football player. ",
        "A football player in the Polish First Division has scored over 180 goals. ",
        "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
        "Górnik Zabrze's stadium was named after a soccer player from Ruda Śląska. ",
        "Ernest Pohl is from Ruda Śląska. "
      ],
      "context_fol": [
        "Polish(ernestPohl) ∧ FootballPlayer(ernestPohl)",
        "∃x (FootballPlayer(x) ∧ In(x, polishFirstDivision) ∧ ScoredOver(x, 180Goals))",
        "In(ernestPohl, polishFirstDivision) ∧ ScoredOver(ernestPohl, 180Goals)",
        "∃x ∃y (GornikZabrzes(x) ∧ Stadium(x) ∧ NamedAfter(x, y) ∧ SoccerPlayer(y) ∧ From(y, rudaŚląska))",
        "From(ernestPohl, rudaŚląska))"
      ],
      "question": "Ernest Pohl has not scored more than 180 goals.",
      "question_fol": "¬ScoredOver(ernestPohl, 180Goals)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "241": [
    {
      "id": 373,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "question_fol": "TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is not a top soccer player.",
      "question_fol": "¬TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 627,
      "story_id": 221,
      "context": [
        "Ernest Pohl was a Polish football player. ",
        "A football player in the Polish First Division has scored over 180 goals. ",
        "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
        "Górnik Zabrze's stadium was named after a soccer player from Ruda Śląska. ",
        "Ernest Pohl is from Ruda Śląska. "
      ],
      "context_fol": [
        "Polish(ernestPohl) ∧ FootballPlayer(ernestPohl)",
        "∃x (FootballPlayer(x) ∧ In(x, polishFirstDivision) ∧ ScoredOver(x, 180Goals))",
        "In(ernestPohl, polishFirstDivision) ∧ ScoredOver(ernestPohl, 180Goals)",
        "∃x ∃y (GornikZabrzes(x) ∧ Stadium(x) ∧ NamedAfter(x, y) ∧ SoccerPlayer(y) ∧ From(y, rudaŚląska))",
        "From(ernestPohl, rudaŚląska))"
      ],
      "question": "Górnik Zabrze's stadium was named after Ernest Pohl.",
      "question_fol": "∀x (GornikZabrzes(x) ∧ Stadium(x) → NamedAfter(x, ernestPohl))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "242": [
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is not a top soccer player.",
      "question_fol": "¬TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 373,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "question_fol": "TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 626,
      "story_id": 221,
      "context": [
        "Ernest Pohl was a Polish football player. ",
        "A football player in the Polish First Division has scored over 180 goals. ",
        "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
        "Górnik Zabrze's stadium was named after a soccer player from Ruda Śląska. ",
        "Ernest Pohl is from Ruda Śląska. "
      ],
      "context_fol": [
        "Polish(ernestPohl) ∧ FootballPlayer(ernestPohl)",
        "∃x (FootballPlayer(x) ∧ In(x, polishFirstDivision) ∧ ScoredOver(x, 180Goals))",
        "In(ernestPohl, polishFirstDivision) ∧ ScoredOver(ernestPohl, 180Goals)",
        "∃x ∃y (GornikZabrzes(x) ∧ Stadium(x) ∧ NamedAfter(x, y) ∧ SoccerPlayer(y) ∧ From(y, rudaŚląska))",
        "From(ernestPohl, rudaŚląska))"
      ],
      "question": "Ernest Pohl has not scored more than 180 goals.",
      "question_fol": "¬ScoredOver(ernestPohl, 180Goals)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "4": [
    {
      "id": 233,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People living in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newYorkCity)",
        "LiveIn(asaHoffmann, manhattan)",
        "ChessPlayer(asaHoffmann)",
        "∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))",
        "∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))",
        "∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))"
      ],
      "question": "Asa Hoffmann does not live in New York.",
      "question_fol": "¬LiveIn(asaHoffmann, newYorkCity)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 231,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People living in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newYorkCity)",
        "LiveIn(asaHoffmann, manhattan)",
        "ChessPlayer(asaHoffmann)",
        "∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))",
        "∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))",
        "∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))"
      ],
      "question": "Asa Hoffmann is a New Yorker.",
      "question_fol": "NewYorker(asaHoffmann)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 232,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People living in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newYorkCity)",
        "LiveIn(asaHoffmann, manhattan)",
        "ChessPlayer(asaHoffmann)",
        "∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))",
        "∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))",
        "∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))"
      ],
      "question": "Asa Hoffmann is a grandmaster.",
      "question_fol": "GrandMaster(asaHoffmann)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "5": [
    {
      "id": 233,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People living in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newYorkCity)",
        "LiveIn(asaHoffmann, manhattan)",
        "ChessPlayer(asaHoffmann)",
        "∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))",
        "∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))",
        "∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))"
      ],
      "question": "Asa Hoffmann does not live in New York.",
      "question_fol": "¬LiveIn(asaHoffmann, newYorkCity)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 231,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People living in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newYorkCity)",
        "LiveIn(asaHoffmann, manhattan)",
        "ChessPlayer(asaHoffmann)",
        "∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))",
        "∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))",
        "∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))"
      ],
      "question": "Asa Hoffmann is a New Yorker.",
      "question_fol": "NewYorker(asaHoffmann)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 232,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People living in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newYorkCity)",
        "LiveIn(asaHoffmann, manhattan)",
        "ChessPlayer(asaHoffmann)",
        "∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))",
        "∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))",
        "∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))"
      ],
      "question": "Asa Hoffmann is a grandmaster.",
      "question_fol": "GrandMaster(asaHoffmann)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "6": [
    {
      "id": 233,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People living in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newYorkCity)",
        "LiveIn(asaHoffmann, manhattan)",
        "ChessPlayer(asaHoffmann)",
        "∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))",
        "∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))",
        "∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))"
      ],
      "question": "Asa Hoffmann does not live in New York.",
      "question_fol": "¬LiveIn(asaHoffmann, newYorkCity)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 231,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People living in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newYorkCity)",
        "LiveIn(asaHoffmann, manhattan)",
        "ChessPlayer(asaHoffmann)",
        "∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))",
        "∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))",
        "∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))"
      ],
      "question": "Asa Hoffmann is a New Yorker.",
      "question_fol": "NewYorker(asaHoffmann)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 232,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People living in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newYorkCity)",
        "LiveIn(asaHoffmann, manhattan)",
        "ChessPlayer(asaHoffmann)",
        "∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))",
        "∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))",
        "∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))"
      ],
      "question": "Asa Hoffmann is a grandmaster.",
      "question_fol": "GrandMaster(asaHoffmann)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "548": [
    {
      "id": 778,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom wants to study abroad.",
      "question_fol": "StudyIn(tom, unitedStates)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 776,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is a PhD graduate.",
      "question_fol": "PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 777,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is not a PhD graduate.",
      "question_fol": "¬PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "549": [
    {
      "id": 778,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom wants to study abroad.",
      "question_fol": "StudyIn(tom, unitedStates)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 776,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is a PhD graduate.",
      "question_fol": "PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 777,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is not a PhD graduate.",
      "question_fol": "¬PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1271": [
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1272": [
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1273": [
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "663": [
    {
      "id": 1234,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on the Yale campus. ",
        "All Yale buildings managed by Yale Housing are dormitories. ",
        "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "None of the Yale buildings open to students were built before 1701. ",
        "All Yale buildings located on the Yale campus are open to students. ",
        "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))",
        "∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))",
        "∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))",
        "∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))",
        "∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))",
        "YaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))"
      ],
      "question": "Harkness is not established before 1701.",
      "question_fol": "¬∃y(Before(y, year1701) ∧ Established(x, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1233,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on the Yale campus. ",
        "All Yale buildings managed by Yale Housing are dormitories. ",
        "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "None of the Yale buildings open to students were built before 1701. ",
        "All Yale buildings located on the Yale campus are open to students. ",
        "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))",
        "∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))",
        "∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))",
        "∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))",
        "∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))",
        "YaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))"
      ],
      "question": "Harkness is established before 1701.",
      "question_fol": "∃y(Before(y, year1701) ∧ Established(x, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1232,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on the Yale campus. ",
        "All Yale buildings managed by Yale Housing are dormitories. ",
        "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "None of the Yale buildings open to students were built before 1701. ",
        "All Yale buildings located on the Yale campus are open to students. ",
        "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))",
        "∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))",
        "∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))",
        "∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))",
        "∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))",
        "YaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))"
      ],
      "question": "Harkness is not a Yale dormitory.",
      "question_fol": "¬YaleDormitory(harkness)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "664": [
    {
      "id": 1234,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on the Yale campus. ",
        "All Yale buildings managed by Yale Housing are dormitories. ",
        "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "None of the Yale buildings open to students were built before 1701. ",
        "All Yale buildings located on the Yale campus are open to students. ",
        "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))",
        "∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))",
        "∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))",
        "∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))",
        "∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))",
        "YaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))"
      ],
      "question": "Harkness is not established before 1701.",
      "question_fol": "¬∃y(Before(y, year1701) ∧ Established(x, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1233,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on the Yale campus. ",
        "All Yale buildings managed by Yale Housing are dormitories. ",
        "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "None of the Yale buildings open to students were built before 1701. ",
        "All Yale buildings located on the Yale campus are open to students. ",
        "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))",
        "∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))",
        "∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))",
        "∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))",
        "∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))",
        "YaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))"
      ],
      "question": "Harkness is established before 1701.",
      "question_fol": "∃y(Before(y, year1701) ∧ Established(x, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1231,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on the Yale campus. ",
        "All Yale buildings managed by Yale Housing are dormitories. ",
        "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "None of the Yale buildings open to students were built before 1701. ",
        "All Yale buildings located on the Yale campus are open to students. ",
        "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))",
        "∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))",
        "∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))",
        "∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))",
        "∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))",
        "YaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))"
      ],
      "question": "Harkness is a Yale dormitory.",
      "question_fol": "YaleDormitory(harkness)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "665": [
    {
      "id": 1234,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on the Yale campus. ",
        "All Yale buildings managed by Yale Housing are dormitories. ",
        "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "None of the Yale buildings open to students were built before 1701. ",
        "All Yale buildings located on the Yale campus are open to students. ",
        "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))",
        "∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))",
        "∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))",
        "∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))",
        "∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))",
        "YaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))"
      ],
      "question": "Harkness is not established before 1701.",
      "question_fol": "¬∃y(Before(y, year1701) ∧ Established(x, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1233,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on the Yale campus. ",
        "All Yale buildings managed by Yale Housing are dormitories. ",
        "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "None of the Yale buildings open to students were built before 1701. ",
        "All Yale buildings located on the Yale campus are open to students. ",
        "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))",
        "∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))",
        "∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))",
        "∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))",
        "∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))",
        "YaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))"
      ],
      "question": "Harkness is established before 1701.",
      "question_fol": "∃y(Before(y, year1701) ∧ Established(x, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1232,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on the Yale campus. ",
        "All Yale buildings managed by Yale Housing are dormitories. ",
        "All Yale buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "None of the Yale buildings open to students were built before 1701. ",
        "All Yale buildings located on the Yale campus are open to students. ",
        "Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))",
        "∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))",
        "∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))",
        "∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))",
        "∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))",
        "YaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))"
      ],
      "question": "Harkness is not a Yale dormitory.",
      "question_fol": "¬YaleDormitory(harkness)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "360": [
    {
      "id": 1332,
      "story_id": 461,
      "context": [
        "Any convicted criminal that is innocent is not truly guilty.",
        "All convicted criminals who did not commit a crime are truly innocent.",
        "All convicted criminals are truly guilty or found guilty.",
        "If a convicted criminal is found guilty, then they are sentenced to a punishment.",
        "If a convicted criminal is found guilty, then they can argue against their punishment.",
        "Garry is a convicted criminal who not found guilty or is sentenced to punishment."
      ],
      "context_fol": [
        "∀x (ConvictedCriminal(x) ∧ Innocent(x) → ¬TrulyGuilty(x))",
        "∀x (ConvictedCriminal(x) ∧ ¬CommitCrime(x) → Innocent(x))",
        "∀x (ConvictedCriminal(x) ∧ (TrulyGuilty(x) ∨ FoundGuilty(x)))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → SentencedToPunishment(x))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → CanArgueAgainst(x, punishment))",
        "ConvictedCriminal(garry) ∧ (¬(FoundGuilty(garry) ∨ SentencedToPunishment(garry)))"
      ],
      "question": "Garry is not both innocent and someone who did not commit a crime.",
      "question_fol": "¬(Innocent(garry) ∧ ¬CommitCrime(garry))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1330,
      "story_id": 461,
      "context": [
        "Any convicted criminal that is innocent is not truly guilty.",
        "All convicted criminals who did not commit a crime are truly innocent.",
        "All convicted criminals are truly guilty or found guilty.",
        "If a convicted criminal is found guilty, then they are sentenced to a punishment.",
        "If a convicted criminal is found guilty, then they can argue against their punishment.",
        "Garry is a convicted criminal who not found guilty or is sentenced to punishment."
      ],
      "context_fol": [
        "∀x (ConvictedCriminal(x) ∧ Innocent(x) → ¬TrulyGuilty(x))",
        "∀x (ConvictedCriminal(x) ∧ ¬CommitCrime(x) → Innocent(x))",
        "∀x (ConvictedCriminal(x) ∧ (TrulyGuilty(x) ∨ FoundGuilty(x)))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → SentencedToPunishment(x))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → CanArgueAgainst(x, punishment))",
        "ConvictedCriminal(garry) ∧ (¬(FoundGuilty(garry) ∨ SentencedToPunishment(garry)))"
      ],
      "question": "Garry is sentenced to a punishment.",
      "question_fol": "SentencedToPunishment(garry)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1331,
      "story_id": 461,
      "context": [
        "Any convicted criminal that is innocent is not truly guilty.",
        "All convicted criminals who did not commit a crime are truly innocent.",
        "All convicted criminals are truly guilty or found guilty.",
        "If a convicted criminal is found guilty, then they are sentenced to a punishment.",
        "If a convicted criminal is found guilty, then they can argue against their punishment.",
        "Garry is a convicted criminal who not found guilty or is sentenced to punishment."
      ],
      "context_fol": [
        "∀x (ConvictedCriminal(x) ∧ Innocent(x) → ¬TrulyGuilty(x))",
        "∀x (ConvictedCriminal(x) ∧ ¬CommitCrime(x) → Innocent(x))",
        "∀x (ConvictedCriminal(x) ∧ (TrulyGuilty(x) ∨ FoundGuilty(x)))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → SentencedToPunishment(x))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → CanArgueAgainst(x, punishment))",
        "ConvictedCriminal(garry) ∧ (¬(FoundGuilty(garry) ∨ SentencedToPunishment(garry)))"
      ],
      "question": "Garry did not commit a crime and can argue against his punishment.",
      "question_fol": "¬CommitCrime(garry) ∧ CanArgueAgainst(garry, punishment)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "361": [
    {
      "id": 1332,
      "story_id": 461,
      "context": [
        "Any convicted criminal that is innocent is not truly guilty.",
        "All convicted criminals who did not commit a crime are truly innocent.",
        "All convicted criminals are truly guilty or found guilty.",
        "If a convicted criminal is found guilty, then they are sentenced to a punishment.",
        "If a convicted criminal is found guilty, then they can argue against their punishment.",
        "Garry is a convicted criminal who not found guilty or is sentenced to punishment."
      ],
      "context_fol": [
        "∀x (ConvictedCriminal(x) ∧ Innocent(x) → ¬TrulyGuilty(x))",
        "∀x (ConvictedCriminal(x) ∧ ¬CommitCrime(x) → Innocent(x))",
        "∀x (ConvictedCriminal(x) ∧ (TrulyGuilty(x) ∨ FoundGuilty(x)))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → SentencedToPunishment(x))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → CanArgueAgainst(x, punishment))",
        "ConvictedCriminal(garry) ∧ (¬(FoundGuilty(garry) ∨ SentencedToPunishment(garry)))"
      ],
      "question": "Garry is not both innocent and someone who did not commit a crime.",
      "question_fol": "¬(Innocent(garry) ∧ ¬CommitCrime(garry))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1331,
      "story_id": 461,
      "context": [
        "Any convicted criminal that is innocent is not truly guilty.",
        "All convicted criminals who did not commit a crime are truly innocent.",
        "All convicted criminals are truly guilty or found guilty.",
        "If a convicted criminal is found guilty, then they are sentenced to a punishment.",
        "If a convicted criminal is found guilty, then they can argue against their punishment.",
        "Garry is a convicted criminal who not found guilty or is sentenced to punishment."
      ],
      "context_fol": [
        "∀x (ConvictedCriminal(x) ∧ Innocent(x) → ¬TrulyGuilty(x))",
        "∀x (ConvictedCriminal(x) ∧ ¬CommitCrime(x) → Innocent(x))",
        "∀x (ConvictedCriminal(x) ∧ (TrulyGuilty(x) ∨ FoundGuilty(x)))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → SentencedToPunishment(x))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → CanArgueAgainst(x, punishment))",
        "ConvictedCriminal(garry) ∧ (¬(FoundGuilty(garry) ∨ SentencedToPunishment(garry)))"
      ],
      "question": "Garry did not commit a crime and can argue against his punishment.",
      "question_fol": "¬CommitCrime(garry) ∧ CanArgueAgainst(garry, punishment)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1330,
      "story_id": 461,
      "context": [
        "Any convicted criminal that is innocent is not truly guilty.",
        "All convicted criminals who did not commit a crime are truly innocent.",
        "All convicted criminals are truly guilty or found guilty.",
        "If a convicted criminal is found guilty, then they are sentenced to a punishment.",
        "If a convicted criminal is found guilty, then they can argue against their punishment.",
        "Garry is a convicted criminal who not found guilty or is sentenced to punishment."
      ],
      "context_fol": [
        "∀x (ConvictedCriminal(x) ∧ Innocent(x) → ¬TrulyGuilty(x))",
        "∀x (ConvictedCriminal(x) ∧ ¬CommitCrime(x) → Innocent(x))",
        "∀x (ConvictedCriminal(x) ∧ (TrulyGuilty(x) ∨ FoundGuilty(x)))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → SentencedToPunishment(x))",
        "∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → CanArgueAgainst(x, punishment))",
        "ConvictedCriminal(garry) ∧ (¬(FoundGuilty(garry) ∨ SentencedToPunishment(garry)))"
      ],
      "question": "Garry is sentenced to a punishment.",
      "question_fol": "SentencedToPunishment(garry)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "819": [
    {
      "id": 275,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) ",
        "∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))",
        "DisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds anime.",
      "question_fol": "AnimeHoldingCompany(koeitecmo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 273,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) ",
        "∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))",
        "DisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds another company.",
      "question_fol": "∃x (Company(x) ∧ Holds(koeitecmo, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 274,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) ",
        "∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))",
        "DisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Tecmo holds another company.",
      "question_fol": "∃x (Company(x) ∧ Holds(tecmo, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "820": [
    {
      "id": 275,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) ",
        "∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))",
        "DisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds anime.",
      "question_fol": "AnimeHoldingCompany(koeitecmo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 273,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) ",
        "∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))",
        "DisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds another company.",
      "question_fol": "∃x (Company(x) ∧ Holds(koeitecmo, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 274,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) ",
        "∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))",
        "DisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Tecmo holds another company.",
      "question_fol": "∃x (Company(x) ∧ Holds(tecmo, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "821": [
    {
      "id": 275,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) ",
        "∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))",
        "DisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds anime.",
      "question_fol": "AnimeHoldingCompany(koeitecmo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 273,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) ",
        "∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))",
        "DisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds another company.",
      "question_fol": "∃x (Company(x) ∧ Holds(koeitecmo, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 274,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) ",
        "∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))",
        "DisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Tecmo holds another company.",
      "question_fol": "∃x (Company(x) ∧ Holds(tecmo, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "253": [
    {
      "id": 1230,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane has more than 300 seats. ",
        "All of the planes acquired by Delta in this batch are Boeing-737. ",
        "Planes either have more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.",
        "T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."
      ],
      "context_fol": [
        "∀x (Plane(x) ∧ Boeing737(x) → (¬∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y)))",
        "∀x (Plane(x) ∧ AcquiredBy(x, delta) → Boeing737(x))",
        "∀x (Plane(x) → ((∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y))) ⊕ (∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y))))",
        "∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ScheduledFor(x, shortdistanceflight))",
        "∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ∃z(Before(z, yr2010) ∧ Produced(x, z))",
        "(Boeing737(jake32) ∧ Plane(jake32)) ⊕ (AcquiredByDeltaInThisBatch(jake32) ∧ Plane(jake32))",
        "¬((Boeing737(t10) ∧ Plane(t10)) ⊕ (AcquiredByDeltaInThisBatch(t10) ∧ Plane(t10)))"
      ],
      "question": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.",
      "question_fol": "¬∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∧ ¬ScheduledFor(jake32, shortdistanceflight))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1229,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane has more than 300 seats. ",
        "All of the planes acquired by Delta in this batch are Boeing-737. ",
        "Planes either have more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.",
        "T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."
      ],
      "context_fol": [
        "∀x (Plane(x) ∧ Boeing737(x) → (¬∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y)))",
        "∀x (Plane(x) ∧ AcquiredBy(x, delta) → Boeing737(x))",
        "∀x (Plane(x) → ((∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y))) ⊕ (∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y))))",
        "∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ScheduledFor(x, shortdistanceflight))",
        "∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ∃z(Before(z, yr2010) ∧ Produced(x, z))",
        "(Boeing737(jake32) ∧ Plane(jake32)) ⊕ (AcquiredByDeltaInThisBatch(jake32) ∧ Plane(jake32))",
        "¬((Boeing737(t10) ∧ Plane(t10)) ⊕ (AcquiredByDeltaInThisBatch(t10) ∧ Plane(t10)))"
      ],
      "question": "Jake32 is produced before 2010 or scheduled for a short-distance flight.",
      "question_fol": "∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∨ ScheduledFor(jake32, shortdistanceflight))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1227,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane has more than 300 seats. ",
        "All of the planes acquired by Delta in this batch are Boeing-737. ",
        "Planes either have more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.",
        "T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."
      ],
      "context_fol": [
        "∀x (Plane(x) ∧ Boeing737(x) → (¬∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y)))",
        "∀x (Plane(x) ∧ AcquiredBy(x, delta) → Boeing737(x))",
        "∀x (Plane(x) → ((∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y))) ⊕ (∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y))))",
        "∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ScheduledFor(x, shortdistanceflight))",
        "∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ∃z(Before(z, yr2010) ∧ Produced(x, z))",
        "(Boeing737(jake32) ∧ Plane(jake32)) ⊕ (AcquiredByDeltaInThisBatch(jake32) ∧ Plane(jake32))",
        "¬((Boeing737(t10) ∧ Plane(t10)) ⊕ (AcquiredByDeltaInThisBatch(t10) ∧ Plane(t10)))"
      ],
      "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
      "question_fol": "∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∧ ScheduledFor(jake32, shortdistanceflight))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "254": [
    {
      "id": 615,
      "story_id": 215,
      "context": [
        "Adam owns cars.",
        "Adam has a favorite car.",
        "Among the cars he owns, Adam's favorite car is European.",
        "Adam broke his favorite car."
      ],
      "context_fol": [
        "∃x∃y (Car(x) ∧ Car(y) ∧ (x≠y) ∧ Owns(adam, x)) ",
        "∃x (Car(x) ∧ Favorite(adam, x))",
        "∀x ((Car(x) ∧ Owns(adam, x) ∧ Favorite(adam, x)) → European(x))",
        "∀x ((Car(x) ∧ Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))"
      ],
      "question": "Adam owns a Japanese car.",
      "question_fol": "∃x (Japanese(x) ∧ Owns(adam, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1230,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane has more than 300 seats. ",
        "All of the planes acquired by Delta in this batch are Boeing-737. ",
        "Planes either have more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.",
        "T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."
      ],
      "context_fol": [
        "∀x (Plane(x) ∧ Boeing737(x) → (¬∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y)))",
        "∀x (Plane(x) ∧ AcquiredBy(x, delta) → Boeing737(x))",
        "∀x (Plane(x) → ((∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y))) ⊕ (∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y))))",
        "∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ScheduledFor(x, shortdistanceflight))",
        "∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ∃z(Before(z, yr2010) ∧ Produced(x, z))",
        "(Boeing737(jake32) ∧ Plane(jake32)) ⊕ (AcquiredByDeltaInThisBatch(jake32) ∧ Plane(jake32))",
        "¬((Boeing737(t10) ∧ Plane(t10)) ⊕ (AcquiredByDeltaInThisBatch(t10) ∧ Plane(t10)))"
      ],
      "question": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.",
      "question_fol": "¬∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∧ ¬ScheduledFor(jake32, shortdistanceflight))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1229,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane has more than 300 seats. ",
        "All of the planes acquired by Delta in this batch are Boeing-737. ",
        "Planes either have more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.",
        "T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."
      ],
      "context_fol": [
        "∀x (Plane(x) ∧ Boeing737(x) → (¬∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y)))",
        "∀x (Plane(x) ∧ AcquiredBy(x, delta) → Boeing737(x))",
        "∀x (Plane(x) → ((∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y))) ⊕ (∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y))))",
        "∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ScheduledFor(x, shortdistanceflight))",
        "∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ∃z(Before(z, yr2010) ∧ Produced(x, z))",
        "(Boeing737(jake32) ∧ Plane(jake32)) ⊕ (AcquiredByDeltaInThisBatch(jake32) ∧ Plane(jake32))",
        "¬((Boeing737(t10) ∧ Plane(t10)) ⊕ (AcquiredByDeltaInThisBatch(t10) ∧ Plane(t10)))"
      ],
      "question": "Jake32 is produced before 2010 or scheduled for a short-distance flight.",
      "question_fol": "∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∨ ScheduledFor(jake32, shortdistanceflight))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "979": [
    {
      "id": 844,
      "story_id": 329,
      "context": [
        "All young working professionals who have regular 9-5 jobs have stable jobs.",
        "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
        "All people who have stable jobs are people who work regularly.",
        "People who work regularly do not frequently disobey their bosses.",
        "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
      ],
      "context_fol": [
        "∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))",
        "∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))",
        "∀x (Have(x, stableJob) → WorkRegularly(x))",
        "∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))",
        "¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))"
      ],
      "question": "Mary lives in Manhattan and is a young working professional who has a regular 9-5 job.",
      "question_fol": "LiveIn(mary, manhattan) ∧ YoungWorkingProfessional(mary) ∧ Have(mary, regular9-5Job)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 845,
      "story_id": 329,
      "context": [
        "All young working professionals who have regular 9-5 jobs have stable jobs.",
        "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
        "All people who have stable jobs are people who work regularly.",
        "People who work regularly do not frequently disobey their bosses.",
        "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
      ],
      "context_fol": [
        "∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))",
        "∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))",
        "∀x (Have(x, stableJob) → WorkRegularly(x))",
        "∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))",
        "¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))"
      ],
      "question": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.",
      "question_fol": "YoungWorkingProfessional(mary) ∧ Have(mary, regular9-5Job) → ¬LiveIn(mary, manhattan)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 843,
      "story_id": 329,
      "context": [
        "All young working professionals who have regular 9-5 jobs have stable jobs.",
        "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
        "All people who have stable jobs are people who work regularly.",
        "People who work regularly do not frequently disobey their bosses.",
        "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
      ],
      "context_fol": [
        "∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))",
        "∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))",
        "∀x (Have(x, stableJob) → WorkRegularly(x))",
        "∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))",
        "¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))"
      ],
      "question": "Mary lives in Manhattan.",
      "question_fol": "LiveIn(mary, manhattan)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "980": [
    {
      "id": 844,
      "story_id": 329,
      "context": [
        "All young working professionals who have regular 9-5 jobs have stable jobs.",
        "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
        "All people who have stable jobs are people who work regularly.",
        "People who work regularly do not frequently disobey their bosses.",
        "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
      ],
      "context_fol": [
        "∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))",
        "∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))",
        "∀x (Have(x, stableJob) → WorkRegularly(x))",
        "∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))",
        "¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))"
      ],
      "question": "Mary lives in Manhattan and is a young working professional who has a regular 9-5 job.",
      "question_fol": "LiveIn(mary, manhattan) ∧ YoungWorkingProfessional(mary) ∧ Have(mary, regular9-5Job)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 845,
      "story_id": 329,
      "context": [
        "All young working professionals who have regular 9-5 jobs have stable jobs.",
        "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
        "All people who have stable jobs are people who work regularly.",
        "People who work regularly do not frequently disobey their bosses.",
        "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
      ],
      "context_fol": [
        "∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))",
        "∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))",
        "∀x (Have(x, stableJob) → WorkRegularly(x))",
        "∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))",
        "¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))"
      ],
      "question": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.",
      "question_fol": "YoungWorkingProfessional(mary) ∧ Have(mary, regular9-5Job) → ¬LiveIn(mary, manhattan)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 843,
      "story_id": 329,
      "context": [
        "All young working professionals who have regular 9-5 jobs have stable jobs.",
        "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
        "All people who have stable jobs are people who work regularly.",
        "People who work regularly do not frequently disobey their bosses.",
        "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
      ],
      "context_fol": [
        "∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))",
        "∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))",
        "∀x (Have(x, stableJob) → WorkRegularly(x))",
        "∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))",
        "¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))"
      ],
      "question": "Mary lives in Manhattan.",
      "question_fol": "LiveIn(mary, manhattan)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "981": [
    {
      "id": 844,
      "story_id": 329,
      "context": [
        "All young working professionals who have regular 9-5 jobs have stable jobs.",
        "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
        "All people who have stable jobs are people who work regularly.",
        "People who work regularly do not frequently disobey their bosses.",
        "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
      ],
      "context_fol": [
        "∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))",
        "∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))",
        "∀x (Have(x, stableJob) → WorkRegularly(x))",
        "∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))",
        "¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))"
      ],
      "question": "Mary lives in Manhattan and is a young working professional who has a regular 9-5 job.",
      "question_fol": "LiveIn(mary, manhattan) ∧ YoungWorkingProfessional(mary) ∧ Have(mary, regular9-5Job)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 845,
      "story_id": 329,
      "context": [
        "All young working professionals who have regular 9-5 jobs have stable jobs.",
        "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
        "All people who have stable jobs are people who work regularly.",
        "People who work regularly do not frequently disobey their bosses.",
        "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
      ],
      "context_fol": [
        "∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))",
        "∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))",
        "∀x (Have(x, stableJob) → WorkRegularly(x))",
        "∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))",
        "¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))"
      ],
      "question": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.",
      "question_fol": "YoungWorkingProfessional(mary) ∧ Have(mary, regular9-5Job) → ¬LiveIn(mary, manhattan)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 843,
      "story_id": 329,
      "context": [
        "All young working professionals who have regular 9-5 jobs have stable jobs.",
        "Some people living in Manhattan are young professionals with regular 9-5 jobs.",
        "All people who have stable jobs are people who work regularly.",
        "People who work regularly do not frequently disobey their bosses.",
        "Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."
      ],
      "context_fol": [
        "∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))",
        "∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))",
        "∀x (Have(x, stableJob) → WorkRegularly(x))",
        "∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))",
        "¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))"
      ],
      "question": "Mary lives in Manhattan.",
      "question_fol": "LiveIn(mary, manhattan)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "805": [
    {
      "id": 686,
      "story_id": 243,
      "context": [
        "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.",
        "People who have a talent of cooking can distinguish the taste of different condiments.",
        "Only people with the talent of cooking can make delicious meals.",
        "If the meal is popular at the party, then it is delicious.",
        "John can make meals which are popular at the party."
      ],
      "context_fol": [
        "∀x (Person(x) ∧ Can(x, distinguishTheTasteOfDifferentCondiments) → Can(x, useDifferentCondimentsToCook))",
        "∀x (Person(x) ∧ Has(x, talentOfCooking) → Can(x, distinguishTheTasteOfDifferentCondiments))",
        "∀x ∀y (CanMake(x, y) ∧ Meal(y) ∧ Delicious(y) ∧ Person(x) → Has(x, talentOfCooking)) ",
        "∀x ∀y (Meal(y) ∧ PopularAt(y, party) → Delicious(y))",
        "∃x (Person(john) ∧ MakeMeal(john, x) ∧ Meal(x) ∧ PopularAt(x, party))"
      ],
      "question": "John cannot use different condiments for cooking.",
      "question_fol": "¬Can(john, useDifferentCondimentsToCook)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 693,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Can(x, cook))",
        "∃x (¬Chef(x) ∧ Can(x, cook))",
        "∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))",
        "∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))",
        "∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))",
        "CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)"
      ],
      "question": "Luke is a chef.",
      "question_fol": "Chef(luke)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 692,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Can(x, cook))",
        "∃x (¬Chef(x) ∧ Can(x, cook))",
        "∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))",
        "∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))",
        "∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))",
        "CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)"
      ],
      "question": "Luke can make a good breakfast.",
      "question_fol": "CanMake(luke, goodBreakfast)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "806": [
    {
      "id": 686,
      "story_id": 243,
      "context": [
        "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.",
        "People who have a talent of cooking can distinguish the taste of different condiments.",
        "Only people with the talent of cooking can make delicious meals.",
        "If the meal is popular at the party, then it is delicious.",
        "John can make meals which are popular at the party."
      ],
      "context_fol": [
        "∀x (Person(x) ∧ Can(x, distinguishTheTasteOfDifferentCondiments) → Can(x, useDifferentCondimentsToCook))",
        "∀x (Person(x) ∧ Has(x, talentOfCooking) → Can(x, distinguishTheTasteOfDifferentCondiments))",
        "∀x ∀y (CanMake(x, y) ∧ Meal(y) ∧ Delicious(y) ∧ Person(x) → Has(x, talentOfCooking)) ",
        "∀x ∀y (Meal(y) ∧ PopularAt(y, party) → Delicious(y))",
        "∃x (Person(john) ∧ MakeMeal(john, x) ∧ Meal(x) ∧ PopularAt(x, party))"
      ],
      "question": "John cannot use different condiments for cooking.",
      "question_fol": "¬Can(john, useDifferentCondimentsToCook)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 693,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Can(x, cook))",
        "∃x (¬Chef(x) ∧ Can(x, cook))",
        "∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))",
        "∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))",
        "∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))",
        "CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)"
      ],
      "question": "Luke is a chef.",
      "question_fol": "Chef(luke)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 692,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Can(x, cook))",
        "∃x (¬Chef(x) ∧ Can(x, cook))",
        "∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))",
        "∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))",
        "∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))",
        "CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)"
      ],
      "question": "Luke can make a good breakfast.",
      "question_fol": "CanMake(luke, goodBreakfast)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "807": [
    {
      "id": 686,
      "story_id": 243,
      "context": [
        "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.",
        "People who have a talent of cooking can distinguish the taste of different condiments.",
        "Only people with the talent of cooking can make delicious meals.",
        "If the meal is popular at the party, then it is delicious.",
        "John can make meals which are popular at the party."
      ],
      "context_fol": [
        "∀x (Person(x) ∧ Can(x, distinguishTheTasteOfDifferentCondiments) → Can(x, useDifferentCondimentsToCook))",
        "∀x (Person(x) ∧ Has(x, talentOfCooking) → Can(x, distinguishTheTasteOfDifferentCondiments))",
        "∀x ∀y (CanMake(x, y) ∧ Meal(y) ∧ Delicious(y) ∧ Person(x) → Has(x, talentOfCooking)) ",
        "∀x ∀y (Meal(y) ∧ PopularAt(y, party) → Delicious(y))",
        "∃x (Person(john) ∧ MakeMeal(john, x) ∧ Meal(x) ∧ PopularAt(x, party))"
      ],
      "question": "John cannot use different condiments for cooking.",
      "question_fol": "¬Can(john, useDifferentCondimentsToCook)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 693,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Can(x, cook))",
        "∃x (¬Chef(x) ∧ Can(x, cook))",
        "∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))",
        "∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))",
        "∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))",
        "CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)"
      ],
      "question": "Luke is a chef.",
      "question_fol": "Chef(luke)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 692,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Can(x, cook))",
        "∃x (¬Chef(x) ∧ Can(x, cook))",
        "∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))",
        "∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))",
        "∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))",
        "CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)"
      ],
      "question": "Luke can make a good breakfast.",
      "question_fol": "CanMake(luke, goodBreakfast)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "808": [
    {
      "id": 686,
      "story_id": 243,
      "context": [
        "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.",
        "People who have a talent of cooking can distinguish the taste of different condiments.",
        "Only people with the talent of cooking can make delicious meals.",
        "If the meal is popular at the party, then it is delicious.",
        "John can make meals which are popular at the party."
      ],
      "context_fol": [
        "∀x (Person(x) ∧ Can(x, distinguishTheTasteOfDifferentCondiments) → Can(x, useDifferentCondimentsToCook))",
        "∀x (Person(x) ∧ Has(x, talentOfCooking) → Can(x, distinguishTheTasteOfDifferentCondiments))",
        "∀x ∀y (CanMake(x, y) ∧ Meal(y) ∧ Delicious(y) ∧ Person(x) → Has(x, talentOfCooking)) ",
        "∀x ∀y (Meal(y) ∧ PopularAt(y, party) → Delicious(y))",
        "∃x (Person(john) ∧ MakeMeal(john, x) ∧ Meal(x) ∧ PopularAt(x, party))"
      ],
      "question": "John cannot use different condiments for cooking.",
      "question_fol": "¬Can(john, useDifferentCondimentsToCook)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 693,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Can(x, cook))",
        "∃x (¬Chef(x) ∧ Can(x, cook))",
        "∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))",
        "∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))",
        "∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))",
        "CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)"
      ],
      "question": "Luke is a chef.",
      "question_fol": "Chef(luke)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 692,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Can(x, cook))",
        "∃x (¬Chef(x) ∧ Can(x, cook))",
        "∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))",
        "∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))",
        "∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))",
        "CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)"
      ],
      "question": "Luke can make a good breakfast.",
      "question_fol": "CanMake(luke, goodBreakfast)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "809": [
    {
      "id": 686,
      "story_id": 243,
      "context": [
        "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.",
        "People who have a talent of cooking can distinguish the taste of different condiments.",
        "Only people with the talent of cooking can make delicious meals.",
        "If the meal is popular at the party, then it is delicious.",
        "John can make meals which are popular at the party."
      ],
      "context_fol": [
        "∀x (Person(x) ∧ Can(x, distinguishTheTasteOfDifferentCondiments) → Can(x, useDifferentCondimentsToCook))",
        "∀x (Person(x) ∧ Has(x, talentOfCooking) → Can(x, distinguishTheTasteOfDifferentCondiments))",
        "∀x ∀y (CanMake(x, y) ∧ Meal(y) ∧ Delicious(y) ∧ Person(x) → Has(x, talentOfCooking)) ",
        "∀x ∀y (Meal(y) ∧ PopularAt(y, party) → Delicious(y))",
        "∃x (Person(john) ∧ MakeMeal(john, x) ∧ Meal(x) ∧ PopularAt(x, party))"
      ],
      "question": "John cannot use different condiments for cooking.",
      "question_fol": "¬Can(john, useDifferentCondimentsToCook)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 693,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Can(x, cook))",
        "∃x (¬Chef(x) ∧ Can(x, cook))",
        "∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))",
        "∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))",
        "∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))",
        "CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)"
      ],
      "question": "Luke is a chef.",
      "question_fol": "Chef(luke)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 692,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Can(x, cook))",
        "∃x (¬Chef(x) ∧ Can(x, cook))",
        "∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))",
        "∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))",
        "∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))",
        "CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)"
      ],
      "question": "Luke can make a good breakfast.",
      "question_fol": "CanMake(luke, goodBreakfast)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "754": [
    {
      "id": 967,
      "story_id": 364,
      "context": [
        "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
        "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
        "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))",
        "∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))",
        "∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))",
        "∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))",
        "∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))",
        "In(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))"
      ],
      "question": "Sam is living in this neighborhood and he is addicted to coffee.",
      "question_fol": "InThisNeighborhood(sam) ∧ AddictedTo(sam, coffee)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 969,
      "story_id": 364,
      "context": [
        "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
        "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
        "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))",
        "∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))",
        "∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))",
        "∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))",
        "∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))",
        "In(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))"
      ],
      "question": "Sam is living in this neighborhood and he owns at least one coffeemaker and one blender in his home or orders takeout at least once a day.",
      "question_fol": "(∃y (CoffeemakerAndBlender(y) ∧ Own(sam, y)) ∨ (∃y (TakeOut(y) ∧ Order(sam, y, aDay)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1023,
      "story_id": 383,
      "context": [
        "People who work at Jess's company and go to the spa frequently are not people who are miserly and need to save a large portion of their income.",
        "People who work at Jess's company are either miserly and need to save a large portion of their income, or frivolously spend a lot of money.",
        "If people who work at Jess's company frivolously spend a lot of money when they go out, then they value quality manufacturing and luxury items.",
        "If people who work at Jess's company value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
        "Thomas works at Jess's company.",
        "If Thomas is not miserly and needs to save a large portion of his income, then Thomas does not value quality manufacturing and luxury items.",
        "Thomas values quality manufacturing and luxury items or he is not miserly."
      ],
      "context_fol": [
        "∀x (WorkAt(x, jesssCompany) ∧ GoToSpafrequently(x) → ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)))",
        "∀x (WorkAt(x, jesssCompany) → Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)⊕ SpendFrivolously(x, aLotOfMoney))",
        "∀x (WorkAt(x, jesssCompany) ∧ SpendFrivolously(x, aLotOfMoney) → Value(x, qualityManufacturing) ∧ Value(x, luxuryItem))",
        "∀x (WorkAt(x, jesssCompany) ∧ Value(x, qualityManufacturing) ∧ Value(x, luxuryItem) → Enjoy(x, shopping, materialisticItem))",
        "WorkAt(thomas, jesssCompany)",
        "¬(Miserly(thomas) ∧ NeedToSave(thomas, aLargePortionOfIncome)) → ¬((Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)))",
        "(Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)) ∨ ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome))"
      ],
      "question": "Thomas frivolously spends a lot of money.",
      "question_fol": "SpendFrivolously(thomas, aLotOfMoney)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "755": [
    {
      "id": 967,
      "story_id": 364,
      "context": [
        "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
        "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
        "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))",
        "∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))",
        "∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))",
        "∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))",
        "∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))",
        "In(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))"
      ],
      "question": "Sam is living in this neighborhood and he is addicted to coffee.",
      "question_fol": "InThisNeighborhood(sam) ∧ AddictedTo(sam, coffee)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1023,
      "story_id": 383,
      "context": [
        "People who work at Jess's company and go to the spa frequently are not people who are miserly and need to save a large portion of their income.",
        "People who work at Jess's company are either miserly and need to save a large portion of their income, or frivolously spend a lot of money.",
        "If people who work at Jess's company frivolously spend a lot of money when they go out, then they value quality manufacturing and luxury items.",
        "If people who work at Jess's company value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
        "Thomas works at Jess's company.",
        "If Thomas is not miserly and needs to save a large portion of his income, then Thomas does not value quality manufacturing and luxury items.",
        "Thomas values quality manufacturing and luxury items or he is not miserly."
      ],
      "context_fol": [
        "∀x (WorkAt(x, jesssCompany) ∧ GoToSpafrequently(x) → ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)))",
        "∀x (WorkAt(x, jesssCompany) → Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)⊕ SpendFrivolously(x, aLotOfMoney))",
        "∀x (WorkAt(x, jesssCompany) ∧ SpendFrivolously(x, aLotOfMoney) → Value(x, qualityManufacturing) ∧ Value(x, luxuryItem))",
        "∀x (WorkAt(x, jesssCompany) ∧ Value(x, qualityManufacturing) ∧ Value(x, luxuryItem) → Enjoy(x, shopping, materialisticItem))",
        "WorkAt(thomas, jesssCompany)",
        "¬(Miserly(thomas) ∧ NeedToSave(thomas, aLargePortionOfIncome)) → ¬((Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)))",
        "(Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)) ∨ ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome))"
      ],
      "question": "Thomas frivolously spends a lot of money.",
      "question_fol": "SpendFrivolously(thomas, aLotOfMoney)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 969,
      "story_id": 364,
      "context": [
        "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
        "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
        "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))",
        "∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))",
        "∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))",
        "∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))",
        "∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))",
        "In(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))"
      ],
      "question": "Sam is living in this neighborhood and he owns at least one coffeemaker and one blender in his home or orders takeout at least once a day.",
      "question_fol": "(∃y (CoffeemakerAndBlender(y) ∧ Own(sam, y)) ∨ (∃y (TakeOut(y) ∧ Order(sam, y, aDay)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "756": [
    {
      "id": 967,
      "story_id": 364,
      "context": [
        "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
        "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
        "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))",
        "∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))",
        "∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))",
        "∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))",
        "∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))",
        "In(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))"
      ],
      "question": "Sam is living in this neighborhood and he is addicted to coffee.",
      "question_fol": "InThisNeighborhood(sam) ∧ AddictedTo(sam, coffee)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1023,
      "story_id": 383,
      "context": [
        "People who work at Jess's company and go to the spa frequently are not people who are miserly and need to save a large portion of their income.",
        "People who work at Jess's company are either miserly and need to save a large portion of their income, or frivolously spend a lot of money.",
        "If people who work at Jess's company frivolously spend a lot of money when they go out, then they value quality manufacturing and luxury items.",
        "If people who work at Jess's company value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
        "Thomas works at Jess's company.",
        "If Thomas is not miserly and needs to save a large portion of his income, then Thomas does not value quality manufacturing and luxury items.",
        "Thomas values quality manufacturing and luxury items or he is not miserly."
      ],
      "context_fol": [
        "∀x (WorkAt(x, jesssCompany) ∧ GoToSpafrequently(x) → ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)))",
        "∀x (WorkAt(x, jesssCompany) → Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)⊕ SpendFrivolously(x, aLotOfMoney))",
        "∀x (WorkAt(x, jesssCompany) ∧ SpendFrivolously(x, aLotOfMoney) → Value(x, qualityManufacturing) ∧ Value(x, luxuryItem))",
        "∀x (WorkAt(x, jesssCompany) ∧ Value(x, qualityManufacturing) ∧ Value(x, luxuryItem) → Enjoy(x, shopping, materialisticItem))",
        "WorkAt(thomas, jesssCompany)",
        "¬(Miserly(thomas) ∧ NeedToSave(thomas, aLargePortionOfIncome)) → ¬((Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)))",
        "(Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)) ∨ ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome))"
      ],
      "question": "Thomas frivolously spends a lot of money.",
      "question_fol": "SpendFrivolously(thomas, aLotOfMoney)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 969,
      "story_id": 364,
      "context": [
        "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
        "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
        "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))",
        "∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))",
        "∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))",
        "∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))",
        "∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))",
        "In(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))"
      ],
      "question": "Sam is living in this neighborhood and he owns at least one coffeemaker and one blender in his home or orders takeout at least once a day.",
      "question_fol": "(∃y (CoffeemakerAndBlender(y) ∧ Own(sam, y)) ∨ (∃y (TakeOut(y) ∧ Order(sam, y, aDay)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "688": [
    {
      "id": 521,
      "story_id": 181,
      "context": [
        "American superheroes come from either the DC Universe or Marvel Universe.",
        "Captain America is one of America's top-ten favorite superheroes",
        "Captain America does not come from the DC Universe.",
        "America's top-ten favorite superheroes speak English.",
        "Some superheroes speak both English and Spanish. "
      ],
      "context_fol": [
        "∀x (Superhero(x) ∧ American(x) → ComeFrom(x, dCUniverse) ⊕ ComeFrom(x, marvelUniverse)) ",
        "American(captainAmerica) ∧ TopTenFavorite(captainAmerica) ∧ Superhero(captainAmerica) ",
        "¬ComeFrom(captainAmerica, dCUniverse)",
        "∀x (American(x) ∧ TopTenFavorite(x) ∧ Superhero(x)  → Speak(x, english)) ",
        "∃x (Superhero(x) → (Speak(x, english) ∧ Speak(x, spanish)))"
      ],
      "question": "Captain America does not speak English.",
      "question_fol": "¬Speak(captainAmerica, english)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 522,
      "story_id": 181,
      "context": [
        "American superheroes come from either the DC Universe or Marvel Universe.",
        "Captain America is one of America's top-ten favorite superheroes",
        "Captain America does not come from the DC Universe.",
        "America's top-ten favorite superheroes speak English.",
        "Some superheroes speak both English and Spanish. "
      ],
      "context_fol": [
        "∀x (Superhero(x) ∧ American(x) → ComeFrom(x, dCUniverse) ⊕ ComeFrom(x, marvelUniverse)) ",
        "American(captainAmerica) ∧ TopTenFavorite(captainAmerica) ∧ Superhero(captainAmerica) ",
        "¬ComeFrom(captainAmerica, dCUniverse)",
        "∀x (American(x) ∧ TopTenFavorite(x) ∧ Superhero(x)  → Speak(x, english)) ",
        "∃x (Superhero(x) → (Speak(x, english) ∧ Speak(x, spanish)))"
      ],
      "question": "Captain America comes from the Marvel universe.",
      "question_fol": "ComeFrom(captainAmerica, marvelUniverse)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 523,
      "story_id": 181,
      "context": [
        "American superheroes come from either the DC Universe or Marvel Universe.",
        "Captain America is one of America's top-ten favorite superheroes",
        "Captain America does not come from the DC Universe.",
        "America's top-ten favorite superheroes speak English.",
        "Some superheroes speak both English and Spanish. "
      ],
      "context_fol": [
        "∀x (Superhero(x) ∧ American(x) → ComeFrom(x, dCUniverse) ⊕ ComeFrom(x, marvelUniverse)) ",
        "American(captainAmerica) ∧ TopTenFavorite(captainAmerica) ∧ Superhero(captainAmerica) ",
        "¬ComeFrom(captainAmerica, dCUniverse)",
        "∀x (American(x) ∧ TopTenFavorite(x) ∧ Superhero(x)  → Speak(x, english)) ",
        "∃x (Superhero(x) → (Speak(x, english) ∧ Speak(x, spanish)))"
      ],
      "question": "Captain America speaks Spanish.",
      "question_fol": "Speak(captainAmerica, spanish)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "171": [
    {
      "id": 1050,
      "story_id": 391,
      "context": [
        "All imaginative processes that Dan knows are results of creative processes.",
        "All science fiction that Dan knows comes from an imaginative process.",
        "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
        "No facts that Dan knows have proven to be false.",
        "Dan knows that Dune is science fiction or has proven to be false."
      ],
      "context_fol": [
        "∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))",
        "∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) ",
        "∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))",
        "∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) ",
        "(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))"
      ],
      "question": "Dune is a result of creative processes and is science fiction.",
      "question_fol": "ResultOf(dune, creativeProcess) ∧ ScienceFiction(dune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1048,
      "story_id": 391,
      "context": [
        "All imaginative processes that Dan knows are results of creative processes.",
        "All science fiction that Dan knows comes from an imaginative process.",
        "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
        "No facts that Dan knows have proven to be false.",
        "Dan knows that Dune is science fiction or has proven to be false."
      ],
      "context_fol": [
        "∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))",
        "∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) ",
        "∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))",
        "∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) ",
        "(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))"
      ],
      "question": "Dune is a result of creative and imaginative process.",
      "question_fol": "ResultOf(dune, creativeProcess) ∧ ImaginativeProcess(dune)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1051,
      "story_id": 391,
      "context": [
        "All imaginative processes that Dan knows are results of creative processes.",
        "All science fiction that Dan knows comes from an imaginative process.",
        "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
        "No facts that Dan knows have proven to be false.",
        "Dan knows that Dune is science fiction or has proven to be false."
      ],
      "context_fol": [
        "∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))",
        "∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) ",
        "∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))",
        "∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) ",
        "(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))"
      ],
      "question": "Dune is either a result of creative processes or is science fiction.",
      "question_fol": "Knows(dan, dune) ∧ (ResultOf(dune, creativeProcess)  ⊕ ScienceFiction(dune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "172": [
    {
      "id": 1050,
      "story_id": 391,
      "context": [
        "All imaginative processes that Dan knows are results of creative processes.",
        "All science fiction that Dan knows comes from an imaginative process.",
        "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
        "No facts that Dan knows have proven to be false.",
        "Dan knows that Dune is science fiction or has proven to be false."
      ],
      "context_fol": [
        "∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))",
        "∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) ",
        "∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))",
        "∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) ",
        "(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))"
      ],
      "question": "Dune is a result of creative processes and is science fiction.",
      "question_fol": "ResultOf(dune, creativeProcess) ∧ ScienceFiction(dune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1048,
      "story_id": 391,
      "context": [
        "All imaginative processes that Dan knows are results of creative processes.",
        "All science fiction that Dan knows comes from an imaginative process.",
        "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
        "No facts that Dan knows have proven to be false.",
        "Dan knows that Dune is science fiction or has proven to be false."
      ],
      "context_fol": [
        "∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))",
        "∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) ",
        "∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))",
        "∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) ",
        "(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))"
      ],
      "question": "Dune is a result of creative and imaginative process.",
      "question_fol": "ResultOf(dune, creativeProcess) ∧ ImaginativeProcess(dune)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1051,
      "story_id": 391,
      "context": [
        "All imaginative processes that Dan knows are results of creative processes.",
        "All science fiction that Dan knows comes from an imaginative process.",
        "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
        "No facts that Dan knows have proven to be false.",
        "Dan knows that Dune is science fiction or has proven to be false."
      ],
      "context_fol": [
        "∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))",
        "∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) ",
        "∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))",
        "∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) ",
        "(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))"
      ],
      "question": "Dune is either a result of creative processes or is science fiction.",
      "question_fol": "Knows(dan, dune) ∧ (ResultOf(dune, creativeProcess)  ⊕ ScienceFiction(dune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "173": [
    {
      "id": 1048,
      "story_id": 391,
      "context": [
        "All imaginative processes that Dan knows are results of creative processes.",
        "All science fiction that Dan knows comes from an imaginative process.",
        "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
        "No facts that Dan knows have proven to be false.",
        "Dan knows that Dune is science fiction or has proven to be false."
      ],
      "context_fol": [
        "∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))",
        "∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) ",
        "∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))",
        "∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) ",
        "(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))"
      ],
      "question": "Dune is a result of creative and imaginative process.",
      "question_fol": "ResultOf(dune, creativeProcess) ∧ ImaginativeProcess(dune)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1050,
      "story_id": 391,
      "context": [
        "All imaginative processes that Dan knows are results of creative processes.",
        "All science fiction that Dan knows comes from an imaginative process.",
        "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
        "No facts that Dan knows have proven to be false.",
        "Dan knows that Dune is science fiction or has proven to be false."
      ],
      "context_fol": [
        "∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))",
        "∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) ",
        "∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))",
        "∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) ",
        "(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))"
      ],
      "question": "Dune is a result of creative processes and is science fiction.",
      "question_fol": "ResultOf(dune, creativeProcess) ∧ ScienceFiction(dune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1051,
      "story_id": 391,
      "context": [
        "All imaginative processes that Dan knows are results of creative processes.",
        "All science fiction that Dan knows comes from an imaginative process.",
        "Everthing that Dan knows comes from either science-fiction or realistic fiction.",
        "No facts that Dan knows have proven to be false.",
        "Dan knows that Dune is science fiction or has proven to be false."
      ],
      "context_fol": [
        "∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))",
        "∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) ",
        "∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))",
        "∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) ",
        "(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))"
      ],
      "question": "Dune is either a result of creative processes or is science fiction.",
      "question_fol": "Knows(dan, dune) ∧ (ResultOf(dune, creativeProcess)  ⊕ ScienceFiction(dune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "546": [
    {
      "id": 542,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are summarization models.",
        "An extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are always faithful.",
      "question_fol": "∀x (Model(x) ∧ Extractive(x) → Faithful(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 543,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are summarization models.",
        "An extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are not always faithful.",
      "question_fol": "∃x (Model(x) ∧ Extractive(x) ∧ ¬Faithful(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1359,
      "story_id": 470,
      "context": [
        "A Unix operating system used in the lab computers is a piece of software.",
        "All versions of MacOS used in the lab computer are based on Unix operating systems.",
        "A lab computer uses either MacOS or Linux. ",
        "All Linux computers in the lab are convenient.",
        "All software used in the lab computers is written with code.",
        "If something is convenient in the lab computer, then it is popular.",
        "Burger is used in the lab computer, and it is written with code and a new version of MacOS.",
        "PyTorch is used in the lab computer, and PyTorch is neither a Linux system nor a piece of software."
      ],
      "context_fol": [
        "∀x (UsedIn(x, labComputer) ∧ UnixOperatingSystem(x) → Software(x))",
        "∀x (UsedIn(x, labComputer) ∧ MacOS(x) → UnixOperatingSystem(x))",
        "∀x (UsedIn(x, labComputer) → MacOS(x) ⊕ Linux(x))",
        "∀x (UsedIn(x, labComputer) ∧ Linux(x) → Convenient(x))",
        "∀x (UsedIn(x, labComputer) ∧ Software(x) → WrittenWithCode(x))",
        "∀x (UsedIn(x, labComputer) ∧ Convenient(x) → Popular(x))",
        "UsedIn(burger, labComputer) ∧ WrittenWithCode(burger) ∧ MacOS(burger))",
        "UsedIn(pytorch, labComputer) ∧ ¬(Linux(pytorch) ⊕ Software(pytorch))"
      ],
      "question": "PyTorch is popular and written with code.",
      "question_fol": "Popular(pytorch) ∧ WrittenWithCode(pytorch)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "547": [
    {
      "id": 542,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are summarization models.",
        "An extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are always faithful.",
      "question_fol": "∀x (Model(x) ∧ Extractive(x) → Faithful(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 543,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are summarization models.",
        "An extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are not always faithful.",
      "question_fol": "∃x (Model(x) ∧ Extractive(x) ∧ ¬Faithful(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1359,
      "story_id": 470,
      "context": [
        "A Unix operating system used in the lab computers is a piece of software.",
        "All versions of MacOS used in the lab computer are based on Unix operating systems.",
        "A lab computer uses either MacOS or Linux. ",
        "All Linux computers in the lab are convenient.",
        "All software used in the lab computers is written with code.",
        "If something is convenient in the lab computer, then it is popular.",
        "Burger is used in the lab computer, and it is written with code and a new version of MacOS.",
        "PyTorch is used in the lab computer, and PyTorch is neither a Linux system nor a piece of software."
      ],
      "context_fol": [
        "∀x (UsedIn(x, labComputer) ∧ UnixOperatingSystem(x) → Software(x))",
        "∀x (UsedIn(x, labComputer) ∧ MacOS(x) → UnixOperatingSystem(x))",
        "∀x (UsedIn(x, labComputer) → MacOS(x) ⊕ Linux(x))",
        "∀x (UsedIn(x, labComputer) ∧ Linux(x) → Convenient(x))",
        "∀x (UsedIn(x, labComputer) ∧ Software(x) → WrittenWithCode(x))",
        "∀x (UsedIn(x, labComputer) ∧ Convenient(x) → Popular(x))",
        "UsedIn(burger, labComputer) ∧ WrittenWithCode(burger) ∧ MacOS(burger))",
        "UsedIn(pytorch, labComputer) ∧ ¬(Linux(pytorch) ⊕ Software(pytorch))"
      ],
      "question": "PyTorch is popular and written with code.",
      "question_fol": "Popular(pytorch) ∧ WrittenWithCode(pytorch)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "476": [
    {
      "id": 982,
      "story_id": 369,
      "context": [
        "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
        "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
        "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
        "Everybody in Emma's family live with at least one roommate, does not own any pets.",
        "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
        "Emily is in Emma's family.",
        "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))",
        "∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))",
        "∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))",
        "∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))",
        "∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))",
        "InEmmasFamily(emily)",
        "((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))"
      ],
      "question": "Emily is in Emma's family and she lives with at least one roommate.",
      "question_fol": "∃y (LiveWith(emily, y) ∧ Roommate(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 983,
      "story_id": 369,
      "context": [
        "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
        "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
        "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
        "Everybody in Emma's family live with at least one roommate, does not own any pets.",
        "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
        "Emily is in Emma's family.",
        "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))",
        "∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))",
        "∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))",
        "∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))",
        "∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))",
        "InEmmasFamily(emily)",
        "((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))"
      ],
      "question": "Emily enjoys reading about tech specs and keeping up to date on the latest technology.",
      "question_fol": "EnjoyReading(emily, techSpec) ∧ KeepUpdatedOn(emily, latestTechnology)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 459,
      "story_id": 160,
      "context": [
        "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
        "Many apartment rents cover the cost of water and electricity.",
        "Susan lives in an apartment where the rent covers all utilities.",
        "The rent of the apartment where Ava lives does not cover any utility expenses.",
        "Noah lives in an apartment where the rent does not cover heating."
      ],
      "context_fol": [
        "CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)",
        "∃x (Apartment(x) ∧ Cover(x, water) ∧ Cover(x, electricity))",
        "∀x (Apartment(x) ∧ LiveIn(susan, x) ∧ Cover(x, water) ∧ Cover(x, electricity) ∧ Cover(x, gas) ∧ Cover(x, heating))",
        "∀x (Apartment(x) ∧ LiveIn(ava, x) ∧ ¬Cover(x, water) ∧ ¬Cover(x, electricity) ∧ ¬Cover(x, gas) ∧ ¬Cover(x, heating))",
        "∀x (Apartment(x) ∧ LiveIn(noah, x) ∧ ¬Cover(x, heating))"
      ],
      "question": "Noah and Ava both need to pay the heating bill.",
      "question_fol": "¬Cover(noah, heating) ∧ ¬Cover(ava, heating)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "477": [
    {
      "id": 982,
      "story_id": 369,
      "context": [
        "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
        "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
        "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
        "Everybody in Emma's family live with at least one roommate, does not own any pets.",
        "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
        "Emily is in Emma's family.",
        "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))",
        "∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))",
        "∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))",
        "∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))",
        "∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))",
        "InEmmasFamily(emily)",
        "((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))"
      ],
      "question": "Emily is in Emma's family and she lives with at least one roommate.",
      "question_fol": "∃y (LiveWith(emily, y) ∧ Roommate(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 983,
      "story_id": 369,
      "context": [
        "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
        "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
        "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
        "Everybody in Emma's family live with at least one roommate, does not own any pets.",
        "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
        "Emily is in Emma's family.",
        "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))",
        "∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))",
        "∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))",
        "∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))",
        "∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))",
        "InEmmasFamily(emily)",
        "((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))"
      ],
      "question": "Emily enjoys reading about tech specs and keeping up to date on the latest technology.",
      "question_fol": "EnjoyReading(emily, techSpec) ∧ KeepUpdatedOn(emily, latestTechnology)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 459,
      "story_id": 160,
      "context": [
        "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
        "Many apartment rents cover the cost of water and electricity.",
        "Susan lives in an apartment where the rent covers all utilities.",
        "The rent of the apartment where Ava lives does not cover any utility expenses.",
        "Noah lives in an apartment where the rent does not cover heating."
      ],
      "context_fol": [
        "CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)",
        "∃x (Apartment(x) ∧ Cover(x, water) ∧ Cover(x, electricity))",
        "∀x (Apartment(x) ∧ LiveIn(susan, x) ∧ Cover(x, water) ∧ Cover(x, electricity) ∧ Cover(x, gas) ∧ Cover(x, heating))",
        "∀x (Apartment(x) ∧ LiveIn(ava, x) ∧ ¬Cover(x, water) ∧ ¬Cover(x, electricity) ∧ ¬Cover(x, gas) ∧ ¬Cover(x, heating))",
        "∀x (Apartment(x) ∧ LiveIn(noah, x) ∧ ¬Cover(x, heating))"
      ],
      "question": "Noah and Ava both need to pay the heating bill.",
      "question_fol": "¬Cover(noah, heating) ∧ ¬Cover(ava, heating)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "478": [
    {
      "id": 982,
      "story_id": 369,
      "context": [
        "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
        "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
        "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
        "Everybody in Emma's family live with at least one roommate, does not own any pets.",
        "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
        "Emily is in Emma's family.",
        "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))",
        "∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))",
        "∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))",
        "∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))",
        "∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))",
        "InEmmasFamily(emily)",
        "((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))"
      ],
      "question": "Emily is in Emma's family and she lives with at least one roommate.",
      "question_fol": "∃y (LiveWith(emily, y) ∧ Roommate(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 983,
      "story_id": 369,
      "context": [
        "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
        "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
        "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
        "Everybody in Emma's family live with at least one roommate, does not own any pets.",
        "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
        "Emily is in Emma's family.",
        "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))",
        "∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))",
        "∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))",
        "∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))",
        "∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))",
        "InEmmasFamily(emily)",
        "((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))"
      ],
      "question": "Emily enjoys reading about tech specs and keeping up to date on the latest technology.",
      "question_fol": "EnjoyReading(emily, techSpec) ∧ KeepUpdatedOn(emily, latestTechnology)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 459,
      "story_id": 160,
      "context": [
        "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
        "Many apartment rents cover the cost of water and electricity.",
        "Susan lives in an apartment where the rent covers all utilities.",
        "The rent of the apartment where Ava lives does not cover any utility expenses.",
        "Noah lives in an apartment where the rent does not cover heating."
      ],
      "context_fol": [
        "CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)",
        "∃x (Apartment(x) ∧ Cover(x, water) ∧ Cover(x, electricity))",
        "∀x (Apartment(x) ∧ LiveIn(susan, x) ∧ Cover(x, water) ∧ Cover(x, electricity) ∧ Cover(x, gas) ∧ Cover(x, heating))",
        "∀x (Apartment(x) ∧ LiveIn(ava, x) ∧ ¬Cover(x, water) ∧ ¬Cover(x, electricity) ∧ ¬Cover(x, gas) ∧ ¬Cover(x, heating))",
        "∀x (Apartment(x) ∧ LiveIn(noah, x) ∧ ¬Cover(x, heating))"
      ],
      "question": "Noah and Ava both need to pay the heating bill.",
      "question_fol": "¬Cover(noah, heating) ∧ ¬Cover(ava, heating)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "933": [
    {
      "id": 369,
      "story_id": 123,
      "context": [
        "Businesses are either sanctioned or unsanctioned.",
        "Sanctioned businesses are limited.",
        "Unsanctioned businesses are free.",
        "The Crude Oil Data Exchange is a business that isn't free."
      ],
      "context_fol": [
        "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "Buisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)"
      ],
      "question": "Crude Oil Data Exchange is limited.",
      "question_fol": "Limited(crudeOilDataExchange)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 367,
      "story_id": 123,
      "context": [
        "Businesses are either sanctioned or unsanctioned.",
        "Sanctioned businesses are limited.",
        "Unsanctioned businesses are free.",
        "The Crude Oil Data Exchange is a business that isn't free."
      ],
      "context_fol": [
        "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "Buisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)"
      ],
      "question": "Crude Oil Data Exchange is sanctioned.",
      "question_fol": "Sanctioned(crudeOilDataExchange)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 368,
      "story_id": 123,
      "context": [
        "Businesses are either sanctioned or unsanctioned.",
        "Sanctioned businesses are limited.",
        "Unsanctioned businesses are free.",
        "The Crude Oil Data Exchange is a business that isn't free."
      ],
      "context_fol": [
        "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "Buisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)"
      ],
      "question": "Crude Oil Data Exchange is unsanctioned.",
      "question_fol": "¬Sanctioned(crudeOilDataExchange)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "934": [
    {
      "id": 369,
      "story_id": 123,
      "context": [
        "Businesses are either sanctioned or unsanctioned.",
        "Sanctioned businesses are limited.",
        "Unsanctioned businesses are free.",
        "The Crude Oil Data Exchange is a business that isn't free."
      ],
      "context_fol": [
        "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "Buisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)"
      ],
      "question": "Crude Oil Data Exchange is limited.",
      "question_fol": "Limited(crudeOilDataExchange)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 367,
      "story_id": 123,
      "context": [
        "Businesses are either sanctioned or unsanctioned.",
        "Sanctioned businesses are limited.",
        "Unsanctioned businesses are free.",
        "The Crude Oil Data Exchange is a business that isn't free."
      ],
      "context_fol": [
        "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "Buisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)"
      ],
      "question": "Crude Oil Data Exchange is sanctioned.",
      "question_fol": "Sanctioned(crudeOilDataExchange)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 368,
      "story_id": 123,
      "context": [
        "Businesses are either sanctioned or unsanctioned.",
        "Sanctioned businesses are limited.",
        "Unsanctioned businesses are free.",
        "The Crude Oil Data Exchange is a business that isn't free."
      ],
      "context_fol": [
        "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "Buisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)"
      ],
      "question": "Crude Oil Data Exchange is unsanctioned.",
      "question_fol": "¬Sanctioned(crudeOilDataExchange)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "935": [
    {
      "id": 369,
      "story_id": 123,
      "context": [
        "Businesses are either sanctioned or unsanctioned.",
        "Sanctioned businesses are limited.",
        "Unsanctioned businesses are free.",
        "The Crude Oil Data Exchange is a business that isn't free."
      ],
      "context_fol": [
        "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "Buisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)"
      ],
      "question": "Crude Oil Data Exchange is limited.",
      "question_fol": "Limited(crudeOilDataExchange)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 367,
      "story_id": 123,
      "context": [
        "Businesses are either sanctioned or unsanctioned.",
        "Sanctioned businesses are limited.",
        "Unsanctioned businesses are free.",
        "The Crude Oil Data Exchange is a business that isn't free."
      ],
      "context_fol": [
        "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "Buisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)"
      ],
      "question": "Crude Oil Data Exchange is sanctioned.",
      "question_fol": "Sanctioned(crudeOilDataExchange)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 368,
      "story_id": 123,
      "context": [
        "Businesses are either sanctioned or unsanctioned.",
        "Sanctioned businesses are limited.",
        "Unsanctioned businesses are free.",
        "The Crude Oil Data Exchange is a business that isn't free."
      ],
      "context_fol": [
        "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "Buisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)"
      ],
      "question": "Crude Oil Data Exchange is unsanctioned.",
      "question_fol": "¬Sanctioned(crudeOilDataExchange)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1366": [
    {
      "id": 917,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "question_fol": "¬Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 916,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "question_fol": "Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 918,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is a living being.",
      "question_fol": "LivingBeing(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1367": [
    {
      "id": 917,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "question_fol": "¬Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 916,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "question_fol": "Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 918,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is a living being.",
      "question_fol": "LivingBeing(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1368": [
    {
      "id": 917,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "question_fol": "¬Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 785,
      "story_id": 314,
      "context": [
        "No animals are plants.",
        "All humans are animals.",
        "All pupils are humans.",
        "All flowers are plants.",
        "Bailey is either both a human and a flower or neither a human nor a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "¬(Human(bailey) ⊕ Flower(bailey))"
      ],
      "question": "If Bailey is a human, then Bailey is not a pupil.",
      "question_fol": "Human(bailey) → ¬Pupil(bailey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 920,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy or an elephant.",
      "question_fol": "¬(Sleepy(jumbo) ⊕ Elephant(jumbo))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1011": [
    {
      "id": 1010,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "question_fol": "¬((∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) ∨ (Outgoing(carol) ∧ Sprited(carol)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 984,
      "story_id": 370,
      "context": [
        "If Robin's friends practice coding questions, then they are not studying to go to medical school to become a doctor.",
        "If Robin's friends want to work in the software engineering industry, then they practice coding questions.",
        "If Robin's friends enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.",
        "If Robin's friends grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.",
        "If Robin's friends study hard, then they grew up with parents who worked as doctors.",
        "Mark is Robin's friend.",
        "If Mark neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Mark is either a person who studies hard or grew up with parents who worked as doctors."
      ],
      "context_fol": [
        "∀x (RobinsFriends(x) ∧ Practice(x, codingQuestion) → ¬StudyingToGoToToBecome(x, medicalSchool, doctor))",
        "∀x (RobinsFriends(x) ∧ WantToWorkIn(x, softwareEngineeringIndustry) → PracticeCodingQuestions(x))",
        "∀x (RobinsFriends(x) ∧ Enjoy(x, healthcareField) ∧ WantToHelp(x, peopleWithMedicalIssue) → StudyingToGoToToBecome(x, medicalSchool, doctor))",
        "∀x (RobinsFriends(x) ∧ (∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z))) → EnjoyHealthcareFields(x) ∧ WantToHelp(x, peopleWithMedicalIssue))",
        "∀x (RobinsFriends(x) ∧ StudyHard(x) → ∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z)))",
        "RobinsFriends(mark)",
        "¬((Enjoy(x, healthcareField) ∧ WantToHelp(mark, peopleWithMedicalIssues)) ∧ ¬(∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z))) → StudyHard(mark) ∨ (∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z)))"
      ],
      "question": "Mark is Robin's friend and he is a person who studies hard.",
      "question_fol": "RobinsFriends(mark) ∧ StudyHard(mark)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1009,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is a preteen or a young child.",
      "question_fol": "PreTeen(carol) ∨ YoungChild(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1012": [
    {
      "id": 1010,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "question_fol": "¬((∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) ∨ (Outgoing(carol) ∧ Sprited(carol)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1009,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is a preteen or a young child.",
      "question_fol": "PreTeen(carol) ∨ YoungChild(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 982,
      "story_id": 369,
      "context": [
        "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
        "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
        "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
        "Everybody in Emma's family live with at least one roommate, does not own any pets.",
        "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
        "Emily is in Emma's family.",
        "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))",
        "∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))",
        "∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))",
        "∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))",
        "∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))",
        "InEmmasFamily(emily)",
        "((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))"
      ],
      "question": "Emily is in Emma's family and she lives with at least one roommate.",
      "question_fol": "∃y (LiveWith(emily, y) ∧ Roommate(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1013": [
    {
      "id": 1010,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "question_fol": "¬((∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) ∨ (Outgoing(carol) ∧ Sprited(carol)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 982,
      "story_id": 369,
      "context": [
        "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.",
        "Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.",
        "Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.",
        "Everybody in Emma's family live with at least one roommate, does not own any pets.",
        "Everybody in Emma's family who owns at least one pet lives with at least one roommate.",
        "Emily is in Emma's family.",
        "If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))",
        "∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))",
        "∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))",
        "∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))",
        "∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))",
        "InEmmasFamily(emily)",
        "((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))"
      ],
      "question": "Emily is in Emma's family and she lives with at least one roommate.",
      "question_fol": "∃y (LiveWith(emily, y) ∧ Roommate(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1009,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is a preteen or a young child.",
      "question_fol": "PreTeen(carol) ∨ YoungChild(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "560": [
    {
      "id": 559,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))",
        "∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
        "∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))",
        "∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))"
      ],
      "question": "ETS administers international tests including the TOEFL, GRE and subject tests in China.",
      "question_fol": "∃x (Administer(eTS, x) ∧ InChina(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 557,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))",
        "∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
        "∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))",
        "∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))"
      ],
      "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
      "question_fol": "∃x ∃y (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ Develop(eTS, y) ∧ AssociatedWith(y, entryToUSEducationInstitution))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 558,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))",
        "∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
        "∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))",
        "∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))"
      ],
      "question": "ETS doesn't administer tests internationally.",
      "question_fol": "∀x (Administer(eTS, x) → ¬InternationalTest(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "561": [
    {
      "id": 559,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))",
        "∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
        "∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))",
        "∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))"
      ],
      "question": "ETS administers international tests including the TOEFL, GRE and subject tests in China.",
      "question_fol": "∃x (Administer(eTS, x) ∧ InChina(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 558,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))",
        "∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
        "∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))",
        "∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))"
      ],
      "question": "ETS doesn't administer tests internationally.",
      "question_fol": "∀x (Administer(eTS, x) → ¬InternationalTest(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 557,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))",
        "∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
        "∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))",
        "∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))"
      ],
      "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
      "question_fol": "∃x ∃y (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ Develop(eTS, y) ∧ AssociatedWith(y, entryToUSEducationInstitution))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "562": [
    {
      "id": 559,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))",
        "∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
        "∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))",
        "∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))"
      ],
      "question": "ETS administers international tests including the TOEFL, GRE and subject tests in China.",
      "question_fol": "∃x (Administer(eTS, x) ∧ InChina(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 558,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))",
        "∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
        "∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))",
        "∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))"
      ],
      "question": "ETS doesn't administer tests internationally.",
      "question_fol": "∀x (Administer(eTS, x) → ¬InternationalTest(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 557,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))",
        "∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))",
        "∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))",
        "∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))"
      ],
      "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
      "question_fol": "∃x ∃y (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ Develop(eTS, y) ∧ AssociatedWith(y, entryToUSEducationInstitution))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "958": [
    {
      "id": 860,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack has a tidy house.",
      "question_fol": "Have(jack, tidyHouse)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 861,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack neither lives in the suburbs nor is too busy to clean.",
      "question_fol": "¬(¬CareAbout(jack, cleanliness) ∨ ¬CleanOften(jack, home)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 862,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack is overburdened and lives in the suburbs.",
      "question_fol": "¬Prioritize(jack, cleaning) ∨ ¬CareAbout(jack, cleanliness)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "959": [
    {
      "id": 861,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack neither lives in the suburbs nor is too busy to clean.",
      "question_fol": "¬(¬CareAbout(jack, cleanliness) ∨ ¬CleanOften(jack, home)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 862,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack is overburdened and lives in the suburbs.",
      "question_fol": "¬Prioritize(jack, cleaning) ∨ ¬CareAbout(jack, cleanliness)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 860,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack has a tidy house.",
      "question_fol": "Have(jack, tidyHouse)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "960": [
    {
      "id": 861,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack neither lives in the suburbs nor is too busy to clean.",
      "question_fol": "¬(¬CareAbout(jack, cleanliness) ∨ ¬CleanOften(jack, home)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 860,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack has a tidy house.",
      "question_fol": "Have(jack, tidyHouse)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 862,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack is overburdened and lives in the suburbs.",
      "question_fol": "¬Prioritize(jack, cleaning) ∨ ¬CareAbout(jack, cleanliness)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "706": [
    {
      "id": 731,
      "story_id": 287,
      "context": [
        "Trees are plants. ",
        "Some living things are trees."
      ],
      "context_fol": [
        "∀x (Tree(x) → Plant(x))",
        "∃x ∃y (Living(x) ∧ Living(y) ∧ Tree(x) ∧ Tree(y) ∧ ¬(x=y))"
      ],
      "question": "Some living things are plants.",
      "question_fol": "∃x ∃y (Living(x) ∧ Living(y) ∧ Plant(x) ∧ Plant(y) ∧ ¬(x=y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 784,
      "story_id": 314,
      "context": [
        "No animals are plants.",
        "All humans are animals.",
        "All pupils are humans.",
        "All flowers are plants.",
        "Bailey is either both a human and a flower or neither a human nor a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "¬(Human(bailey) ⊕ Flower(bailey))"
      ],
      "question": "Bailey is a plant.",
      "question_fol": "Plant(bailey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 782,
      "story_id": 314,
      "context": [
        "No animals are plants.",
        "All humans are animals.",
        "All pupils are humans.",
        "All flowers are plants.",
        "Bailey is either both a human and a flower or neither a human nor a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "¬(Human(bailey) ⊕ Flower(bailey))"
      ],
      "question": "Bailey is a pupil.",
      "question_fol": "Pupil(bailey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "370": [
    {
      "id": 112,
      "story_id": 38,
      "context": [
        "The Metropolitan Museum of Art is a museum in NYC.",
        "Whitney Museum of American Art is a museum in NYC.",
        "The Museum of Modern Art (MoMA) is a museum in NYC. ",
        "The Metropolitan Museum of Art includes Byzantine and Islamic Art. ",
        "Whitney Museum of American Art includes American art."
      ],
      "context_fol": [
        "Museum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)",
        "Include(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)",
        "Include(whitneyMuseumOfAmericanArt, americanArt)"
      ],
      "question": "A museum in NYC includes Greek art.",
      "question_fol": "∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, greekArt))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 111,
      "story_id": 38,
      "context": [
        "The Metropolitan Museum of Art is a museum in NYC.",
        "Whitney Museum of American Art is a museum in NYC.",
        "The Museum of Modern Art (MoMA) is a museum in NYC. ",
        "The Metropolitan Museum of Art includes Byzantine and Islamic Art. ",
        "Whitney Museum of American Art includes American art."
      ],
      "context_fol": [
        "Museum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)",
        "Include(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)",
        "Include(whitneyMuseumOfAmericanArt, americanArt)"
      ],
      "question": "A museum in NYC includes American art.",
      "question_fol": "∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, americanArt))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 110,
      "story_id": 38,
      "context": [
        "The Metropolitan Museum of Art is a museum in NYC.",
        "Whitney Museum of American Art is a museum in NYC.",
        "The Museum of Modern Art (MoMA) is a museum in NYC. ",
        "The Metropolitan Museum of Art includes Byzantine and Islamic Art. ",
        "Whitney Museum of American Art includes American art."
      ],
      "context_fol": [
        "Museum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)",
        "Include(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)",
        "Include(whitneyMuseumOfAmericanArt, americanArt)"
      ],
      "question": "A museum in NYC includes Byzantine and Islamic Art.",
      "question_fol": "∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, byzantineArt) ∧ Include(x, islamicArt))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "371": [
    {
      "id": 112,
      "story_id": 38,
      "context": [
        "The Metropolitan Museum of Art is a museum in NYC.",
        "Whitney Museum of American Art is a museum in NYC.",
        "The Museum of Modern Art (MoMA) is a museum in NYC. ",
        "The Metropolitan Museum of Art includes Byzantine and Islamic Art. ",
        "Whitney Museum of American Art includes American art."
      ],
      "context_fol": [
        "Museum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)",
        "Include(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)",
        "Include(whitneyMuseumOfAmericanArt, americanArt)"
      ],
      "question": "A museum in NYC includes Greek art.",
      "question_fol": "∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, greekArt))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 111,
      "story_id": 38,
      "context": [
        "The Metropolitan Museum of Art is a museum in NYC.",
        "Whitney Museum of American Art is a museum in NYC.",
        "The Museum of Modern Art (MoMA) is a museum in NYC. ",
        "The Metropolitan Museum of Art includes Byzantine and Islamic Art. ",
        "Whitney Museum of American Art includes American art."
      ],
      "context_fol": [
        "Museum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)",
        "Include(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)",
        "Include(whitneyMuseumOfAmericanArt, americanArt)"
      ],
      "question": "A museum in NYC includes American art.",
      "question_fol": "∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, americanArt))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 110,
      "story_id": 38,
      "context": [
        "The Metropolitan Museum of Art is a museum in NYC.",
        "Whitney Museum of American Art is a museum in NYC.",
        "The Museum of Modern Art (MoMA) is a museum in NYC. ",
        "The Metropolitan Museum of Art includes Byzantine and Islamic Art. ",
        "Whitney Museum of American Art includes American art."
      ],
      "context_fol": [
        "Museum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)",
        "Include(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)",
        "Include(whitneyMuseumOfAmericanArt, americanArt)"
      ],
      "question": "A museum in NYC includes Byzantine and Islamic Art.",
      "question_fol": "∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, byzantineArt) ∧ Include(x, islamicArt))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "372": [
    {
      "id": 595,
      "story_id": 208,
      "context": [
        "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
        "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
        "NY, PA, OH, and MI are states in the US.",
        "ON is a state of Canada.",
        "There is a major settlement of Lake Huron in ON. ",
        "All states are in their country.",
        "The US is in North America.",
        "The Great Lakes began to form at the end of the Last Glacial Period."
      ],
      "context_fol": [
        "∀x (GreatLake(x) → Superior(x) ⊕ Michigan(x) ⊕ Huron(x) ⊕ Erie(x) ⊕ Ontario(x))",
        "∀x (Erie (x) ∧ MajorSettlement(x) → In(x, nY) ∨ In(x, pA) ∨ In(x, oH) ∨ In(x, mI))",
        "StateOf(nY, uS) ∧ StateOf(pA, uS) ∧ StateOf(oH, uS) ∧ StateOf(mI, uS)",
        "StateOf(oN, canada)",
        "∃x (Huron(x) ∧ MajorSettlement(x) ∧ In(x, oN))",
        "∀x ∀y (StateOf(x, y) → In(x, y))",
        "In(us, northAmerica)",
        "∀x (GreatLake(x) → FormAtEndOf(x, lastGlacialPeriod))"
      ],
      "question": "There is a great lake that did not form at the end of the Last Glacial Period.",
      "question_fol": "∃x (GreatLake(x) ∧ ¬FormAtEndOf(x, lastGlacialPeriod))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 594,
      "story_id": 208,
      "context": [
        "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
        "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
        "NY, PA, OH, and MI are states in the US.",
        "ON is a state of Canada.",
        "There is a major settlement of Lake Huron in ON. ",
        "All states are in their country.",
        "The US is in North America.",
        "The Great Lakes began to form at the end of the Last Glacial Period."
      ],
      "context_fol": [
        "∀x (GreatLake(x) → Superior(x) ⊕ Michigan(x) ⊕ Huron(x) ⊕ Erie(x) ⊕ Ontario(x))",
        "∀x (Erie (x) ∧ MajorSettlement(x) → In(x, nY) ∨ In(x, pA) ∨ In(x, oH) ∨ In(x, mI))",
        "StateOf(nY, uS) ∧ StateOf(pA, uS) ∧ StateOf(oH, uS) ∧ StateOf(mI, uS)",
        "StateOf(oN, canada)",
        "∃x (Huron(x) ∧ MajorSettlement(x) ∧ In(x, oN))",
        "∀x ∀y (StateOf(x, y) → In(x, y))",
        "In(us, northAmerica)",
        "∀x (GreatLake(x) → FormAtEndOf(x, lastGlacialPeriod))"
      ],
      "question": "Lake Erie has a major settlement.",
      "question_fol": "∃x ∃y (Erie(y) ∧ MajorSettlementOf(x, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 111,
      "story_id": 38,
      "context": [
        "The Metropolitan Museum of Art is a museum in NYC.",
        "Whitney Museum of American Art is a museum in NYC.",
        "The Museum of Modern Art (MoMA) is a museum in NYC. ",
        "The Metropolitan Museum of Art includes Byzantine and Islamic Art. ",
        "Whitney Museum of American Art includes American art."
      ],
      "context_fol": [
        "Museum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)",
        "Museum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)",
        "Include(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)",
        "Include(whitneyMuseumOfAmericanArt, americanArt)"
      ],
      "question": "A museum in NYC includes American art.",
      "question_fol": "∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, americanArt))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "527": [
    {
      "id": 448,
      "story_id": 155,
      "context": [
        "No man can run faster than Bolt. ",
        "Superman is not a man."
      ],
      "context_fol": [
        "∀x (Man(x) → ¬RunFasterThan(xm bolt))",
        "¬Man(superman)"
      ],
      "question": "Superman can run faster than Bolt.",
      "question_fol": "RunFasterThan(superman, bolt)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1141,
      "story_id": 408,
      "context": [
        "No trick-shot artist in Yale's varsity team struggles with half court shots.",
        "Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  ",
        "Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  ",
        "No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  ",
        "Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."
      ],
      "context_fol": [
        "∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))",
        "∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))",
        "In(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))"
      ],
      "question": "If Jack is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Jack struggles at half court shots and is bad at mid-range shots.",
      "question_fol": "GoodAt(jack, twos) ∨ GoodAt(jack, threes) → BadAt(jack, halfCourtShot) ∧ BadAt(jack, midRangeShot)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1139,
      "story_id": 408,
      "context": [
        "No trick-shot artist in Yale's varsity team struggles with half court shots.",
        "Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  ",
        "Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  ",
        "No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  ",
        "Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."
      ],
      "context_fol": [
        "∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))",
        "∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))",
        "In(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))"
      ],
      "question": "Jack is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.",
      "question_fol": "GoodAt(jack, threes) ⊕ BadAt(jack, midRangeShot)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "528": [
    {
      "id": 1141,
      "story_id": 408,
      "context": [
        "No trick-shot artist in Yale's varsity team struggles with half court shots.",
        "Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  ",
        "Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  ",
        "No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  ",
        "Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."
      ],
      "context_fol": [
        "∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))",
        "∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))",
        "In(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))"
      ],
      "question": "If Jack is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Jack struggles at half court shots and is bad at mid-range shots.",
      "question_fol": "GoodAt(jack, twos) ∨ GoodAt(jack, threes) → BadAt(jack, halfCourtShot) ∧ BadAt(jack, midRangeShot)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1140,
      "story_id": 408,
      "context": [
        "No trick-shot artist in Yale's varsity team struggles with half court shots.",
        "Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  ",
        "Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  ",
        "No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  ",
        "Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."
      ],
      "context_fol": [
        "∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))",
        "∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))",
        "In(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))"
      ],
      "question": "If Jack is not solid at shooting 2-pointers and bad at mid-range shots, then Jack is not solid at shooting 2-pointers and is a player who successfully shoots a high percentage of 3-pointers.",
      "question_fol": "BadAt(jack, midRangeShot) ∧ GoodAt(jack, twos) → ¬GoodAt(jack, twos) ∧ GoodAt(jack, threes)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1139,
      "story_id": 408,
      "context": [
        "No trick-shot artist in Yale's varsity team struggles with half court shots.",
        "Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  ",
        "Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  ",
        "No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  ",
        "Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."
      ],
      "context_fol": [
        "∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))",
        "∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))",
        "In(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))"
      ],
      "question": "Jack is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.",
      "question_fol": "GoodAt(jack, threes) ⊕ BadAt(jack, midRangeShot)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "529": [
    {
      "id": 448,
      "story_id": 155,
      "context": [
        "No man can run faster than Bolt. ",
        "Superman is not a man."
      ],
      "context_fol": [
        "∀x (Man(x) → ¬RunFasterThan(xm bolt))",
        "¬Man(superman)"
      ],
      "question": "Superman can run faster than Bolt.",
      "question_fol": "RunFasterThan(superman, bolt)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1141,
      "story_id": 408,
      "context": [
        "No trick-shot artist in Yale's varsity team struggles with half court shots.",
        "Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  ",
        "Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  ",
        "No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  ",
        "Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."
      ],
      "context_fol": [
        "∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))",
        "∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))",
        "In(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))"
      ],
      "question": "If Jack is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Jack struggles at half court shots and is bad at mid-range shots.",
      "question_fol": "GoodAt(jack, twos) ∨ GoodAt(jack, threes) → BadAt(jack, halfCourtShot) ∧ BadAt(jack, midRangeShot)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1139,
      "story_id": 408,
      "context": [
        "No trick-shot artist in Yale's varsity team struggles with half court shots.",
        "Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  ",
        "Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  ",
        "No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  ",
        "Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."
      ],
      "context_fol": [
        "∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))",
        "∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))",
        "∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))",
        "In(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))"
      ],
      "question": "Jack is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.",
      "question_fol": "GoodAt(jack, threes) ⊕ BadAt(jack, midRangeShot)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "439": [
    {
      "id": 285,
      "story_id": 94,
      "context": [
        "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
        "Hambleton District is in North Yorkshire.",
        "North Yorkshire is in England.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Village(ainderbyQuernhow) ∧ CivilParish(ainderbyQuernhow) ∧ In(ainderbyQuernhow, hambletonDistrict)",
        "In(hambletonDistrict, northYorkshire)",
        "In(northYorkshire, england)",
        "∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))"
      ],
      "question": "There is a village in England.",
      "question_fol": "∃x (Village(x) ∧ In(x, england))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 286,
      "story_id": 94,
      "context": [
        "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
        "Hambleton District is in North Yorkshire.",
        "North Yorkshire is in England.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Village(ainderbyQuernhow) ∧ CivilParish(ainderbyQuernhow) ∧ In(ainderbyQuernhow, hambletonDistrict)",
        "In(hambletonDistrict, northYorkshire)",
        "In(northYorkshire, england)",
        "∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))"
      ],
      "question": "There is no civil parish in England.",
      "question_fol": "¬(∃x (CivilParish(x) ∧ In(x, england)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 378,
      "story_id": 127,
      "context": [
        "New York City is Located in the United States of America.",
        "The United States of America is part of North America.",
        "North America is in the western hemisphere of the earth.",
        "New York City is a highly developed city.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "LocatedIn(newYorkCity, unitedStatesOfAmerica)",
        "LocatedIn(usa, northAmerica)",
        "LocatedIn(northAmerica, westernHemisphere)",
        "HighlyDeveloped(newYorkCity)",
        "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))"
      ],
      "question": "New York City is located in New York State.",
      "question_fol": "LocatedIn(newYorkCity, newYork)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "440": [
    {
      "id": 285,
      "story_id": 94,
      "context": [
        "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
        "Hambleton District is in North Yorkshire.",
        "North Yorkshire is in England.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Village(ainderbyQuernhow) ∧ CivilParish(ainderbyQuernhow) ∧ In(ainderbyQuernhow, hambletonDistrict)",
        "In(hambletonDistrict, northYorkshire)",
        "In(northYorkshire, england)",
        "∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))"
      ],
      "question": "There is a village in England.",
      "question_fol": "∃x (Village(x) ∧ In(x, england))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 286,
      "story_id": 94,
      "context": [
        "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
        "Hambleton District is in North Yorkshire.",
        "North Yorkshire is in England.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Village(ainderbyQuernhow) ∧ CivilParish(ainderbyQuernhow) ∧ In(ainderbyQuernhow, hambletonDistrict)",
        "In(hambletonDistrict, northYorkshire)",
        "In(northYorkshire, england)",
        "∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))"
      ],
      "question": "There is no civil parish in England.",
      "question_fol": "¬(∃x (CivilParish(x) ∧ In(x, england)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 15,
      "story_id": 6,
      "context": [
        "Boves is a railway station located in France. ",
        "The preceding station of Boves is Longueau.",
        "The preceding station of Dommartin is Boves.",
        "France is a European country.",
        "Dommartin is situated on the Paris–Lille railway. ",
        "Any two contiguous stations are on the same railway.",
        "Boves is served by regional TER Hauts-de-France trains.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C.",
        "If place A precedes place B and place B precedes place C, then place A precedes place C."
      ],
      "context_fol": [
        "RailwayStation(boves) ∧ In(boves, france)",
        "Precede(longueau, boves)",
        "Precede(boves, dommartin)",
        "In(france, europe)",
        "SituatedOn(dommartin, pairsLille)",
        "∀x ∀y ∀z ((SituatedOn(x, z) ∧ (Precede(x, y) ∨ Precede(y, x)) → SituatedOn(y, z))",
        "Serve(boves, hautsDeFrance)",
        "∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))",
        "∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))"
      ],
      "question": "Boves is not in Europe.",
      "question_fol": "¬In(boves, europe)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "441": [
    {
      "id": 285,
      "story_id": 94,
      "context": [
        "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
        "Hambleton District is in North Yorkshire.",
        "North Yorkshire is in England.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Village(ainderbyQuernhow) ∧ CivilParish(ainderbyQuernhow) ∧ In(ainderbyQuernhow, hambletonDistrict)",
        "In(hambletonDistrict, northYorkshire)",
        "In(northYorkshire, england)",
        "∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))"
      ],
      "question": "There is a village in England.",
      "question_fol": "∃x (Village(x) ∧ In(x, england))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 286,
      "story_id": 94,
      "context": [
        "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
        "Hambleton District is in North Yorkshire.",
        "North Yorkshire is in England.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Village(ainderbyQuernhow) ∧ CivilParish(ainderbyQuernhow) ∧ In(ainderbyQuernhow, hambletonDistrict)",
        "In(hambletonDistrict, northYorkshire)",
        "In(northYorkshire, england)",
        "∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))"
      ],
      "question": "There is no civil parish in England.",
      "question_fol": "¬(∃x (CivilParish(x) ∧ In(x, england)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 378,
      "story_id": 127,
      "context": [
        "New York City is Located in the United States of America.",
        "The United States of America is part of North America.",
        "North America is in the western hemisphere of the earth.",
        "New York City is a highly developed city.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "LocatedIn(newYorkCity, unitedStatesOfAmerica)",
        "LocatedIn(usa, northAmerica)",
        "LocatedIn(northAmerica, westernHemisphere)",
        "HighlyDeveloped(newYorkCity)",
        "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))"
      ],
      "question": "New York City is located in New York State.",
      "question_fol": "LocatedIn(newYorkCity, newYork)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "739": [
    {
      "id": 1094,
      "story_id": 399,
      "context": [
        "In Love City, everyone considers physical touch or words of affirmation to be their most important love language.",
        "If someone in Love City considers physical touch as their most important love language, then they are good with pets.",
        "If someone in Love City is good with pets, then they are not scared of animals.",
        "In Love City, everyone is scared of animals, or loves animals, or both.",
        "Adam, who is in Love City, either values physical touch as his most important love language or loves animals."
      ],
      "context_fol": [
        "∀x (In(x, loveCity) → (ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∨ ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))",
        "∀x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∧ In(x, loveCity) → GoodWith(x, pet))",
        "∀x ((GoodWith(x, pet) ∧ In(x, loveCity)) → ¬ScaredOf(x, animal))",
        "∀x (In(x, loveCity) → (ScaredOf(x, animal) ∨ Loves(x, animal)))",
        "(ConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ Loves(adam, animal)) ∧ In(adam, loveCity)"
      ],
      "question": "If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language.",
      "question_fol": "(ConsidersMostImportantLoveLanguage(adam, physicalTouch, mostImportantLoveLanguage) ∨ GoodWith(x, pet)) → ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1092,
      "story_id": 399,
      "context": [
        "In Love City, everyone considers physical touch or words of affirmation to be their most important love language.",
        "If someone in Love City considers physical touch as their most important love language, then they are good with pets.",
        "If someone in Love City is good with pets, then they are not scared of animals.",
        "In Love City, everyone is scared of animals, or loves animals, or both.",
        "Adam, who is in Love City, either values physical touch as his most important love language or loves animals."
      ],
      "context_fol": [
        "∀x (In(x, loveCity) → (ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∨ ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))",
        "∀x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∧ In(x, loveCity) → GoodWith(x, pet))",
        "∀x ((GoodWith(x, pet) ∧ In(x, loveCity)) → ¬ScaredOf(x, animal))",
        "∀x (In(x, loveCity) → (ScaredOf(x, animal) ∨ Loves(x, animal)))",
        "(ConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ Loves(adam, animal)) ∧ In(adam, loveCity)"
      ],
      "question": "Adam considers physical touch as the most important love language and considers words of affirmation as the most important love language.",
      "question_fol": "ConsidersMostImportantLoveLanguage(adam, physicalTouch) ∧ ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1091,
      "story_id": 399,
      "context": [
        "In Love City, everyone considers physical touch or words of affirmation to be their most important love language.",
        "If someone in Love City considers physical touch as their most important love language, then they are good with pets.",
        "If someone in Love City is good with pets, then they are not scared of animals.",
        "In Love City, everyone is scared of animals, or loves animals, or both.",
        "Adam, who is in Love City, either values physical touch as his most important love language or loves animals."
      ],
      "context_fol": [
        "∀x (In(x, loveCity) → (ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∨ ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))",
        "∀x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∧ In(x, loveCity) → GoodWith(x, pet))",
        "∀x ((GoodWith(x, pet) ∧ In(x, loveCity)) → ¬ScaredOf(x, animal))",
        "∀x (In(x, loveCity) → (ScaredOf(x, animal) ∨ Loves(x, animal)))",
        "(ConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ Loves(adam, animal)) ∧ In(adam, loveCity)"
      ],
      "question": "Adam considers words of affirmation to be the most important love language.",
      "question_fol": "ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "786": [
    {
      "id": 1206,
      "story_id": 425,
      "context": [
        "Everyone working at Meta has a high income. ",
        "A person with a high income will not take a bus to their destination.",
        "People will either take a bus or drive to their destination. ",
        "Everyone who has a car will choose to drive to their destination. ",
        "No students drive to their destination. ",
        "James has a car or works at Meta."
      ],
      "context_fol": [
        "∀x (WorkAt(x, meta) → HighIncome(x))",
        "∀x (HighIncome(x) → ¬MeansToDestination(x, bus))",
        "∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))",
        "∀x (HaveCar(x) → MeansToDestination(x, drive))",
        "∀x (Student(x) → ¬ MeansToDestination(x, drive))",
        "HaveCar(james) ∨ WorkAt(james, meta)"
      ],
      "question": "James either drives to their destination or is a student.",
      "question_fol": "MeansToDestination(x, drive) ⊕ Student(james)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1205,
      "story_id": 425,
      "context": [
        "Everyone working at Meta has a high income. ",
        "A person with a high income will not take a bus to their destination.",
        "People will either take a bus or drive to their destination. ",
        "Everyone who has a car will choose to drive to their destination. ",
        "No students drive to their destination. ",
        "James has a car or works at Meta."
      ],
      "context_fol": [
        "∀x (WorkAt(x, meta) → HighIncome(x))",
        "∀x (HighIncome(x) → ¬MeansToDestination(x, bus))",
        "∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))",
        "∀x (HaveCar(x) → MeansToDestination(x, drive))",
        "∀x (Student(x) → ¬ MeansToDestination(x, drive))",
        "HaveCar(james) ∨ WorkAt(james, meta)"
      ],
      "question": "James drives to his destination or he is a student.",
      "question_fol": "MeansToDestination(x, drive) ∨ Student(james)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1207,
      "story_id": 425,
      "context": [
        "Everyone working at Meta has a high income. ",
        "A person with a high income will not take a bus to their destination.",
        "People will either take a bus or drive to their destination. ",
        "Everyone who has a car will choose to drive to their destination. ",
        "No students drive to their destination. ",
        "James has a car or works at Meta."
      ],
      "context_fol": [
        "∀x (WorkAt(x, meta) → HighIncome(x))",
        "∀x (HighIncome(x) → ¬MeansToDestination(x, bus))",
        "∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))",
        "∀x (HaveCar(x) → MeansToDestination(x, drive))",
        "∀x (Student(x) → ¬ MeansToDestination(x, drive))",
        "HaveCar(james) ∨ WorkAt(james, meta)"
      ],
      "question": "If James either drives to his destination or is a student, then he has a high income and is a student.",
      "question_fol": "(MeansToDestination(x, drive) ⊕ Student(james)) → (HighIncome(james) ∧ Student(james))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "787": [
    {
      "id": 1206,
      "story_id": 425,
      "context": [
        "Everyone working at Meta has a high income. ",
        "A person with a high income will not take a bus to their destination.",
        "People will either take a bus or drive to their destination. ",
        "Everyone who has a car will choose to drive to their destination. ",
        "No students drive to their destination. ",
        "James has a car or works at Meta."
      ],
      "context_fol": [
        "∀x (WorkAt(x, meta) → HighIncome(x))",
        "∀x (HighIncome(x) → ¬MeansToDestination(x, bus))",
        "∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))",
        "∀x (HaveCar(x) → MeansToDestination(x, drive))",
        "∀x (Student(x) → ¬ MeansToDestination(x, drive))",
        "HaveCar(james) ∨ WorkAt(james, meta)"
      ],
      "question": "James either drives to their destination or is a student.",
      "question_fol": "MeansToDestination(x, drive) ⊕ Student(james)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1205,
      "story_id": 425,
      "context": [
        "Everyone working at Meta has a high income. ",
        "A person with a high income will not take a bus to their destination.",
        "People will either take a bus or drive to their destination. ",
        "Everyone who has a car will choose to drive to their destination. ",
        "No students drive to their destination. ",
        "James has a car or works at Meta."
      ],
      "context_fol": [
        "∀x (WorkAt(x, meta) → HighIncome(x))",
        "∀x (HighIncome(x) → ¬MeansToDestination(x, bus))",
        "∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))",
        "∀x (HaveCar(x) → MeansToDestination(x, drive))",
        "∀x (Student(x) → ¬ MeansToDestination(x, drive))",
        "HaveCar(james) ∨ WorkAt(james, meta)"
      ],
      "question": "James drives to his destination or he is a student.",
      "question_fol": "MeansToDestination(x, drive) ∨ Student(james)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1124,
      "story_id": 405,
      "context": [
        "Everyone who works in the office is a commuter. ",
        "People either work in the office or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup. ",
        "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
      ],
      "context_fol": [
        "∀x (WorkIn(x, office) → Commuter(x))",
        "∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))",
        "∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))",
        "Commuter(george) ⊕ Have(george, homeOffice)",
        "(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)"
      ],
      "question": "If George is not a person who works from home and a person who works in the office, then George is neither a commuter nor a person who has a relaxed schedule.",
      "question_fol": "¬(WorkFrom(george, home) ∧ WorkIn(george, office)) → ¬(Commuter(george) ∨ Have(george, relaxedSchedule))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "788": [
    {
      "id": 1206,
      "story_id": 425,
      "context": [
        "Everyone working at Meta has a high income. ",
        "A person with a high income will not take a bus to their destination.",
        "People will either take a bus or drive to their destination. ",
        "Everyone who has a car will choose to drive to their destination. ",
        "No students drive to their destination. ",
        "James has a car or works at Meta."
      ],
      "context_fol": [
        "∀x (WorkAt(x, meta) → HighIncome(x))",
        "∀x (HighIncome(x) → ¬MeansToDestination(x, bus))",
        "∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))",
        "∀x (HaveCar(x) → MeansToDestination(x, drive))",
        "∀x (Student(x) → ¬ MeansToDestination(x, drive))",
        "HaveCar(james) ∨ WorkAt(james, meta)"
      ],
      "question": "James either drives to their destination or is a student.",
      "question_fol": "MeansToDestination(x, drive) ⊕ Student(james)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1205,
      "story_id": 425,
      "context": [
        "Everyone working at Meta has a high income. ",
        "A person with a high income will not take a bus to their destination.",
        "People will either take a bus or drive to their destination. ",
        "Everyone who has a car will choose to drive to their destination. ",
        "No students drive to their destination. ",
        "James has a car or works at Meta."
      ],
      "context_fol": [
        "∀x (WorkAt(x, meta) → HighIncome(x))",
        "∀x (HighIncome(x) → ¬MeansToDestination(x, bus))",
        "∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))",
        "∀x (HaveCar(x) → MeansToDestination(x, drive))",
        "∀x (Student(x) → ¬ MeansToDestination(x, drive))",
        "HaveCar(james) ∨ WorkAt(james, meta)"
      ],
      "question": "James drives to his destination or he is a student.",
      "question_fol": "MeansToDestination(x, drive) ∨ Student(james)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1124,
      "story_id": 405,
      "context": [
        "Everyone who works in the office is a commuter. ",
        "People either work in the office or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup. ",
        "If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."
      ],
      "context_fol": [
        "∀x (WorkIn(x, office) → Commuter(x))",
        "∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))",
        "∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))",
        "Commuter(george) ⊕ Have(george, homeOffice)",
        "(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)"
      ],
      "question": "If George is not a person who works from home and a person who works in the office, then George is neither a commuter nor a person who has a relaxed schedule.",
      "question_fol": "¬(WorkFrom(george, home) ∧ WorkIn(george, office)) → ¬(Commuter(george) ∨ Have(george, relaxedSchedule))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1348": [
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1349": [
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1350": [
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "846": [
    {
      "id": 1009,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is a preteen or a young child.",
      "question_fol": "PreTeen(carol) ∨ YoungChild(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1008,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is outgoing and very spirited.",
      "question_fol": "Outgoing(carol) ∧ Sprited(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1010,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "question_fol": "¬((∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) ∨ (Outgoing(carol) ∧ Sprited(carol)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "847": [
    {
      "id": 1009,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is a preteen or a young child.",
      "question_fol": "PreTeen(carol) ∨ YoungChild(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1008,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is outgoing and very spirited.",
      "question_fol": "Outgoing(carol) ∧ Sprited(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1010,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "question_fol": "¬((∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) ∨ (Outgoing(carol) ∧ Sprited(carol)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "848": [
    {
      "id": 1009,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is a preteen or a young child.",
      "question_fol": "PreTeen(carol) ∨ YoungChild(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1008,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is outgoing and very spirited.",
      "question_fol": "Outgoing(carol) ∧ Sprited(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1010,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "question_fol": "¬((∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) ∨ (Outgoing(carol) ∧ Sprited(carol)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "849": [
    {
      "id": 1009,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is a preteen or a young child.",
      "question_fol": "PreTeen(carol) ∨ YoungChild(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1008,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol is outgoing and very spirited.",
      "question_fol": "Outgoing(carol) ∧ Sprited(carol)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1010,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "question_fol": "¬((∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) ∨ (Outgoing(carol) ∧ Sprited(carol)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "74": [
    {
      "id": 601,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Platypuses are vertebrates.",
      "question_fol": "∀x (Platypuses(x) → Vertebrate(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 600,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Grebes are not mammals.",
      "question_fol": "∀x (Grebes(x) → ¬Mammal(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 599,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Hyraxes lay eggs.",
      "question_fol": "∃x (Hyrax(x) ∧ LayEgg(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "75": [
    {
      "id": 601,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Platypuses are vertebrates.",
      "question_fol": "∀x (Platypuses(x) → Vertebrate(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 600,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Grebes are not mammals.",
      "question_fol": "∀x (Grebes(x) → ¬Mammal(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 599,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Hyraxes lay eggs.",
      "question_fol": "∃x (Hyrax(x) ∧ LayEgg(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "76": [
    {
      "id": 601,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Platypuses are vertebrates.",
      "question_fol": "∀x (Platypuses(x) → Vertebrate(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 600,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Grebes are not mammals.",
      "question_fol": "∀x (Grebes(x) → ¬Mammal(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 599,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Hyraxes lay eggs.",
      "question_fol": "∃x (Hyrax(x) ∧ LayEgg(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "578": [
    {
      "id": 735,
      "story_id": 291,
      "context": [
        "No road is dustless.",
        "Some streets are roads."
      ],
      "context_fol": [
        "∀x (Road(x) → ¬Dustless(x))",
        "∃x ∃y (Street(x) ∧ Street(y) ∧ Road(x) ∧ Road(y) ∧ ¬(x=y))"
      ],
      "question": "Some streets are dustless.",
      "question_fol": "∃x ∃y (Street(x) ∧ Street(y) ∧ Dustless(x) ∧ Dustless(y) ∧ ¬(x=y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 861,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack neither lives in the suburbs nor is too busy to clean.",
      "question_fol": "¬(¬CareAbout(jack, cleanliness) ∨ ¬CleanOften(jack, home)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 858,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack doesn't care about cleanliness.",
      "question_fol": "¬(CareAbout(jack, cleanliness))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "579": [
    {
      "id": 735,
      "story_id": 291,
      "context": [
        "No road is dustless.",
        "Some streets are roads."
      ],
      "context_fol": [
        "∀x (Road(x) → ¬Dustless(x))",
        "∃x ∃y (Street(x) ∧ Street(y) ∧ Road(x) ∧ Road(y) ∧ ¬(x=y))"
      ],
      "question": "Some streets are dustless.",
      "question_fol": "∃x ∃y (Street(x) ∧ Street(y) ∧ Dustless(x) ∧ Dustless(y) ∧ ¬(x=y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 861,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack neither lives in the suburbs nor is too busy to clean.",
      "question_fol": "¬(¬CareAbout(jack, cleanliness) ∨ ¬CleanOften(jack, home)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 858,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack doesn't care about cleanliness.",
      "question_fol": "¬(CareAbout(jack, cleanliness))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "580": [
    {
      "id": 735,
      "story_id": 291,
      "context": [
        "No road is dustless.",
        "Some streets are roads."
      ],
      "context_fol": [
        "∀x (Road(x) → ¬Dustless(x))",
        "∃x ∃y (Street(x) ∧ Street(y) ∧ Road(x) ∧ Road(y) ∧ ¬(x=y))"
      ],
      "question": "Some streets are dustless.",
      "question_fol": "∃x ∃y (Street(x) ∧ Street(y) ∧ Dustless(x) ∧ Dustless(y) ∧ ¬(x=y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 861,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack neither lives in the suburbs nor is too busy to clean.",
      "question_fol": "¬(¬CareAbout(jack, cleanliness) ∨ ¬CleanOften(jack, home)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 858,
      "story_id": 332,
      "context": [
        "If people don't often clean their homes, then they do not have tidy houses.",
        "If people don't prioritize cleaning, then they do not often clean their homes.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people don't care about cleanliness, then they do not prioritize cleaning.",
        "Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."
      ],
      "context_fol": [
        "∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))",
        "∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))",
        "∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))",
        "∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))",
        "¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))"
      ],
      "question": "Jack doesn't care about cleanliness.",
      "question_fol": "¬(CareAbout(jack, cleanliness))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "388": [
    {
      "id": 543,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are summarization models.",
        "An extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are not always faithful.",
      "question_fol": "∃x (Model(x) ∧ Extractive(x) ∧ ¬Faithful(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 542,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are summarization models.",
        "An extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are always faithful.",
      "question_fol": "∀x (Model(x) ∧ Extractive(x) → Faithful(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 384,
      "story_id": 129,
      "context": [
        "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. ",
        "Donald Knuth made contributions to the analysis of algorithms.",
        "Marvin Minsky is recognized for his contributions to the field of artificial intelligence.",
        "Richard Hamming researched numerical methods.",
        "John McCarthy made contributions to the field of artificial intelligence. "
      ],
      "context_fol": [
        "AwardedTo(turingAward, donaldKnuth) ∧ AwardedTo(turingAward, marvinMinsky) ∧ AwardedTo(turingAward, richardHamming) ∧ AwardedTo(turingAward, johnMccarthy)",
        "ContributedTo(donaldKnuth, analysisOfAlgorithms)",
        "ContributedTo(marvinMinsky, artificialIntelligence)",
        "ContributedTo(richardHamming, numericalMethods)",
        "ContributedTo(johnMccarthy, artificialIntelligence)"
      ],
      "question": "Only one person who won the Turing Award made significant contributions to the analysis of algorithms.",
      "question_fol": "∃x ∀y ((AwardedTo(turingAward, x) ∧ AwardedTo(turingAward, y) ∧ ContributedTo(y, algorithms) ∧ ¬(x=y)) → ¬ContributedTo(y, algorithms))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "389": [
    {
      "id": 543,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are summarization models.",
        "An extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are not always faithful.",
      "question_fol": "∃x (Model(x) ∧ Extractive(x) ∧ ¬Faithful(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 542,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are summarization models.",
        "An extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are always faithful.",
      "question_fol": "∀x (Model(x) ∧ Extractive(x) → Faithful(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 384,
      "story_id": 129,
      "context": [
        "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. ",
        "Donald Knuth made contributions to the analysis of algorithms.",
        "Marvin Minsky is recognized for his contributions to the field of artificial intelligence.",
        "Richard Hamming researched numerical methods.",
        "John McCarthy made contributions to the field of artificial intelligence. "
      ],
      "context_fol": [
        "AwardedTo(turingAward, donaldKnuth) ∧ AwardedTo(turingAward, marvinMinsky) ∧ AwardedTo(turingAward, richardHamming) ∧ AwardedTo(turingAward, johnMccarthy)",
        "ContributedTo(donaldKnuth, analysisOfAlgorithms)",
        "ContributedTo(marvinMinsky, artificialIntelligence)",
        "ContributedTo(richardHamming, numericalMethods)",
        "ContributedTo(johnMccarthy, artificialIntelligence)"
      ],
      "question": "Only one person who won the Turing Award made significant contributions to the analysis of algorithms.",
      "question_fol": "∃x ∀y ((AwardedTo(turingAward, x) ∧ AwardedTo(turingAward, y) ∧ ContributedTo(y, algorithms) ∧ ¬(x=y)) → ¬ContributedTo(y, algorithms))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1327": [
    {
      "id": 744,
      "story_id": 300,
      "context": [
        "If a movie is popular, some people enjoy watching it.",
        "All things that some people enjoy attract attention."
      ],
      "context_fol": [
        "∀x (Movie(x) ∧ Popular(x) → ∃y ∃z (Person(y) ∧ EnjoyWatching(y, x) ∧ Person(z) ∧ EnjoyWatching(z, x) ∧ ¬(y=z)))",
        "∀x (∃y ∃z (Person(y) ∧ EnjoyWatching(y, x) ∧ Person(z) ∧ EnjoyWatching(z, x)) → Attract(x, attention))"
      ],
      "question": "If a movie is popular, then it attracts attention.",
      "question_fol": "∀x (Movie(x) ∧ Popular(x) → Attract(x, attention))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Dogs are not always naughty.",
      "question_fol": "∀x (Dog(x) → ¬Naughty(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1328": [
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Dogs are not always naughty.",
      "question_fol": "∀x (Dog(x) → ¬Naughty(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 744,
      "story_id": 300,
      "context": [
        "If a movie is popular, some people enjoy watching it.",
        "All things that some people enjoy attract attention."
      ],
      "context_fol": [
        "∀x (Movie(x) ∧ Popular(x) → ∃y ∃z (Person(y) ∧ EnjoyWatching(y, x) ∧ Person(z) ∧ EnjoyWatching(z, x) ∧ ¬(y=z)))",
        "∀x (∃y ∃z (Person(y) ∧ EnjoyWatching(y, x) ∧ Person(z) ∧ EnjoyWatching(z, x)) → Attract(x, attention))"
      ],
      "question": "If a movie is popular, then it attracts attention.",
      "question_fol": "∀x (Movie(x) ∧ Popular(x) → Attract(x, attention))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1329": [
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Dogs are not always naughty.",
      "question_fol": "∀x (Dog(x) → ¬Naughty(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 744,
      "story_id": 300,
      "context": [
        "If a movie is popular, some people enjoy watching it.",
        "All things that some people enjoy attract attention."
      ],
      "context_fol": [
        "∀x (Movie(x) ∧ Popular(x) → ∃y ∃z (Person(y) ∧ EnjoyWatching(y, x) ∧ Person(z) ∧ EnjoyWatching(z, x) ∧ ¬(y=z)))",
        "∀x (∃y ∃z (Person(y) ∧ EnjoyWatching(y, x) ∧ Person(z) ∧ EnjoyWatching(z, x)) → Attract(x, attention))"
      ],
      "question": "If a movie is popular, then it attracts attention.",
      "question_fol": "∀x (Movie(x) ∧ Popular(x) → Attract(x, attention))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "133": [
    {
      "id": 1266,
      "story_id": 440,
      "context": [
        "All tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "All huskies are dogs.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ⊕ Cat(fido)"
      ],
      "question": "Fido is a Bengal tiger.",
      "question_fol": "BengalTiger(fido)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1264,
      "story_id": 440,
      "context": [
        "All tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "All huskies are dogs.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ⊕ Cat(fido)"
      ],
      "question": "Fido is a husky animal.",
      "question_fol": "Husky(fido)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1265,
      "story_id": 440,
      "context": [
        "All tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "All huskies are dogs.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ⊕ Cat(fido)"
      ],
      "question": "Fido is not a husky.",
      "question_fol": "¬Husky(fido)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "134": [
    {
      "id": 1266,
      "story_id": 440,
      "context": [
        "All tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "All huskies are dogs.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ⊕ Cat(fido)"
      ],
      "question": "Fido is a Bengal tiger.",
      "question_fol": "BengalTiger(fido)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1264,
      "story_id": 440,
      "context": [
        "All tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "All huskies are dogs.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ⊕ Cat(fido)"
      ],
      "question": "Fido is a husky animal.",
      "question_fol": "Husky(fido)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 601,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are either platypuses or echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Platypuses are vertebrates.",
      "question_fol": "∀x (Platypuses(x) → Vertebrate(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1410": [
    {
      "id": 777,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is not a PhD graduate.",
      "question_fol": "¬PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 776,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is a PhD graduate.",
      "question_fol": "PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 778,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom wants to study abroad.",
      "question_fol": "StudyIn(tom, unitedStates)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1411": [
    {
      "id": 777,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is not a PhD graduate.",
      "question_fol": "¬PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 776,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is a PhD graduate.",
      "question_fol": "PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 778,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom wants to study abroad.",
      "question_fol": "StudyIn(tom, unitedStates)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1412": [
    {
      "id": 776,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is a PhD graduate.",
      "question_fol": "PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 777,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is not a PhD graduate.",
      "question_fol": "¬PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 778,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom wants to study abroad.",
      "question_fol": "StudyIn(tom, unitedStates)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1413": [
    {
      "id": 777,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is not a PhD graduate.",
      "question_fol": "¬PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 776,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is a PhD graduate.",
      "question_fol": "PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 778,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom wants to study abroad.",
      "question_fol": "StudyIn(tom, unitedStates)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1414": [
    {
      "id": 777,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is not a PhD graduate.",
      "question_fol": "¬PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 776,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom is a PhD graduate.",
      "question_fol": "PhdGraduate(tom)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 778,
      "story_id": 312,
      "context": [
        "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.",
        "Those who are enrolled in an academic program can not work full-time.",
        "Every who studies in the United States as a foreigner has the authorization to study in the U.S.",
        "All PhD graduate can work full-time. ",
        "If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."
      ],
      "context_fol": [
        "∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))",
        "∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))",
        "∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))",
        "∀x (PhDGraduate(x) → Work(x, fullTime))",
        "¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)"
      ],
      "question": "Tom wants to study abroad.",
      "question_fol": "StudyIn(tom, unitedStates)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "243": [
    {
      "id": 364,
      "story_id": 122,
      "context": [
        "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsOfPrey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey is a fantasy novel.",
      "question_fol": "Fantasy(beastsOfpPrey) ∧ Novel(beastsOfPrey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 365,
      "story_id": 122,
      "context": [
        "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsOfPrey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey isn't a science fiction novel.",
      "question_fol": "¬ScienceFiction(beastsofprey) ∧ Novel(beastsOfPrey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 366,
      "story_id": 122,
      "context": [
        "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsOfPrey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "A shetani is either mythological or a creature.",
      "question_fol": "Mythological(shetani) ⊕ Creature(shetani)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "244": [
    {
      "id": 365,
      "story_id": 122,
      "context": [
        "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsOfPrey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey isn't a science fiction novel.",
      "question_fol": "¬ScienceFiction(beastsofprey) ∧ Novel(beastsOfPrey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 364,
      "story_id": 122,
      "context": [
        "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsOfPrey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey is a fantasy novel.",
      "question_fol": "Fantasy(beastsOfpPrey) ∧ Novel(beastsOfPrey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 366,
      "story_id": 122,
      "context": [
        "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsOfPrey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "A shetani is either mythological or a creature.",
      "question_fol": "Mythological(shetani) ⊕ Creature(shetani)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "245": [
    {
      "id": 364,
      "story_id": 122,
      "context": [
        "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsOfPrey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey is a fantasy novel.",
      "question_fol": "Fantasy(beastsOfpPrey) ∧ Novel(beastsOfPrey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 365,
      "story_id": 122,
      "context": [
        "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsOfPrey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey isn't a science fiction novel.",
      "question_fol": "¬ScienceFiction(beastsofprey) ∧ Novel(beastsOfPrey)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 366,
      "story_id": 122,
      "context": [
        "Beasts of Prey is a fantasy novel or a science fiction novel, or both.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsOfPrey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "A shetani is either mythological or a creature.",
      "question_fol": "Mythological(shetani) ⊕ Creature(shetani)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "964": [
    {
      "id": 713,
      "story_id": 269,
      "context": [
        "All proteins are organic compounds.",
        "All enzymes are organic compounds."
      ],
      "context_fol": [
        "∀x (Protein(x) → OrganicCompound(x))",
        "∀x (Enzyme(x) → OrganicCompound(x))"
      ],
      "question": "All enzymes are proteins.",
      "question_fol": "∀x (Enzyme(x) → Protein(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 715,
      "story_id": 271,
      "context": [
        "No plants are fungi.",
        "Mushrooms are fungi."
      ],
      "context_fol": [
        "∀x (Plant(x) → ¬Fungi(x))",
        "∀x (Mushroom(x) → Fungi(x))"
      ],
      "question": "No plants are mushrooms.",
      "question_fol": "∀x (Plant(x) → ¬Mushroom(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "965": [
    {
      "id": 713,
      "story_id": 269,
      "context": [
        "All proteins are organic compounds.",
        "All enzymes are organic compounds."
      ],
      "context_fol": [
        "∀x (Protein(x) → OrganicCompound(x))",
        "∀x (Enzyme(x) → OrganicCompound(x))"
      ],
      "question": "All enzymes are proteins.",
      "question_fol": "∀x (Enzyme(x) → Protein(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 715,
      "story_id": 271,
      "context": [
        "No plants are fungi.",
        "Mushrooms are fungi."
      ],
      "context_fol": [
        "∀x (Plant(x) → ¬Fungi(x))",
        "∀x (Mushroom(x) → Fungi(x))"
      ],
      "question": "No plants are mushrooms.",
      "question_fol": "∀x (Plant(x) → ¬Mushroom(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "966": [
    {
      "id": 713,
      "story_id": 269,
      "context": [
        "All proteins are organic compounds.",
        "All enzymes are organic compounds."
      ],
      "context_fol": [
        "∀x (Protein(x) → OrganicCompound(x))",
        "∀x (Enzyme(x) → OrganicCompound(x))"
      ],
      "question": "All enzymes are proteins.",
      "question_fol": "∀x (Enzyme(x) → Protein(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 715,
      "story_id": 271,
      "context": [
        "No plants are fungi.",
        "Mushrooms are fungi."
      ],
      "context_fol": [
        "∀x (Plant(x) → ¬Fungi(x))",
        "∀x (Mushroom(x) → Fungi(x))"
      ],
      "question": "No plants are mushrooms.",
      "question_fol": "∀x (Plant(x) → ¬Mushroom(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 701,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "question_fol": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "702": [
    {
      "id": 917,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "question_fol": "¬Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 916,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "question_fol": "Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 920,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy or an elephant.",
      "question_fol": "¬(Sleepy(jumbo) ⊕ Elephant(jumbo))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1244": [
    {
      "id": 1300,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is not paid by the school or does not have students.",
      "question_fol": "¬PaidBy(nancy, school) ∨ ¬Have(nancy, student))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1298,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is a faculty member.",
      "question_fol": "FacultyMember(nancy)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1299,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is paid by the school and has students.",
      "question_fol": "PaidBy(nancy, school) ∧ Have(nancy, student)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1245": [
    {
      "id": 1300,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is not paid by the school or does not have students.",
      "question_fol": "¬PaidBy(nancy, school) ∨ ¬Have(nancy, student))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1298,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is a faculty member.",
      "question_fol": "FacultyMember(nancy)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1299,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is paid by the school and has students.",
      "question_fol": "PaidBy(nancy, school) ∧ Have(nancy, student)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1246": [
    {
      "id": 1300,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is not paid by the school or does not have students.",
      "question_fol": "¬PaidBy(nancy, school) ∨ ¬Have(nancy, student))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1298,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is a faculty member.",
      "question_fol": "FacultyMember(nancy)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1299,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is paid by the school and has students.",
      "question_fol": "PaidBy(nancy, school) ∧ Have(nancy, student)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1247": [
    {
      "id": 1300,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is not paid by the school or does not have students.",
      "question_fol": "¬PaidBy(nancy, school) ∨ ¬Have(nancy, student))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1298,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is a faculty member.",
      "question_fol": "FacultyMember(nancy)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1299,
      "story_id": 451,
      "context": [
        "People on the payroll are being paid by the school.",
        "If someone has a job at a school, then they are on the payroll.",
        "All faculty members have a job at a school.",
        "If someone teaches students, they are a faculty member or a teacher.",
        "Every teacher has students.",
        "If Nancy is a teacher, then they are on the payroll.",
        "If Nancy is not a teacher, then they are not paid by the school.",
        "Nancy teaches students."
      ],
      "context_fol": [
        "∀x (OnPayroll(x) → PaidBy(x, school))",
        "∀x (HaveJobAt(x, school) → OnPayroll(x))",
        "∀x (FacultyMember(x) → HaveJobAt(x, school))",
        "∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))",
        "∀x (Teacher(x) → Have(x, student))",
        "Teacher(nancy) → OnPayroll(nancy)",
        "¬Teacher(nancy) → ¬OnPayroll(nancy)",
        "Teach(nancy, student)"
      ],
      "question": "Nancy is paid by the school and has students.",
      "question_fol": "PaidBy(nancy, school) ∧ Have(nancy, student)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "618": [
    {
      "id": 520,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not titled \"Perfect,\" Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "∀x (Project(x) → (WrittenIn(x, cplusplus) ⊕ WrittenIn(x, python)))",
        "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "Use(sam, mac)",
        "∃x (Use(sam, mac) ∧ Song(x) → Play(sam, x))",
        "∀x (Song(x) ∧ Play(sam, x) → Titled(x, perfect))"
      ],
      "question": "If a song is titled \"Perfect\", Sam will play it.",
      "question_fol": "∀x (Titled(x, perfect) → Play(sam, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 518,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not titled \"Perfect,\" Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "∀x (Project(x) → (WrittenIn(x, cplusplus) ⊕ WrittenIn(x, python)))",
        "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "Use(sam, mac)",
        "∃x (Use(sam, mac) ∧ Song(x) → Play(sam, x))",
        "∀x (Song(x) ∧ Play(sam, x) → Titled(x, perfect))"
      ],
      "question": "The project Sam is doing is written in C++.",
      "question_fol": "∀x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, cplusplus))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 519,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not titled \"Perfect,\" Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "∀x (Project(x) → (WrittenIn(x, cplusplus) ⊕ WrittenIn(x, python)))",
        "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "Use(sam, mac)",
        "∃x (Use(sam, mac) ∧ Song(x) → Play(sam, x))",
        "∀x (Song(x) ∧ Play(sam, x) → Titled(x, perfect))"
      ],
      "question": "The song Sam is playing is titled \"Perfect\".",
      "question_fol": "∀x (Song(x) ∧ Play(sam, x) ∧ Titled(x, perfect))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "619": [
    {
      "id": 520,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not titled \"Perfect,\" Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "∀x (Project(x) → (WrittenIn(x, cplusplus) ⊕ WrittenIn(x, python)))",
        "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "Use(sam, mac)",
        "∃x (Use(sam, mac) ∧ Song(x) → Play(sam, x))",
        "∀x (Song(x) ∧ Play(sam, x) → Titled(x, perfect))"
      ],
      "question": "If a song is titled \"Perfect\", Sam will play it.",
      "question_fol": "∀x (Titled(x, perfect) → Play(sam, x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 519,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not titled \"Perfect,\" Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "∀x (Project(x) → (WrittenIn(x, cplusplus) ⊕ WrittenIn(x, python)))",
        "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "Use(sam, mac)",
        "∃x (Use(sam, mac) ∧ Song(x) → Play(sam, x))",
        "∀x (Song(x) ∧ Play(sam, x) → Titled(x, perfect))"
      ],
      "question": "The song Sam is playing is titled \"Perfect\".",
      "question_fol": "∀x (Song(x) ∧ Play(sam, x) ∧ Titled(x, perfect))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 518,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not titled \"Perfect,\" Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "∀x (Project(x) → (WrittenIn(x, cplusplus) ⊕ WrittenIn(x, python)))",
        "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "Use(sam, mac)",
        "∃x (Use(sam, mac) ∧ Song(x) → Play(sam, x))",
        "∀x (Song(x) ∧ Play(sam, x) → Titled(x, perfect))"
      ],
      "question": "The project Sam is doing is written in C++.",
      "question_fol": "∀x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, cplusplus))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "736": [
    {
      "id": 1261,
      "story_id": 439,
      "context": [
        "No fish are birds.",
        "An osprey is a bird.",
        "A carp is a fish.",
        "All goldfish are carp.",
        "If Bubbles is either an osprey or a goldfish, then Bubbles is not also a fish."
      ],
      "context_fol": [
        "∀x (Fish(x) → ¬Bird(x))",
        "∀x (Osprey(x) → Bird(x))",
        "∀x (Carp(x) → Fish(x))",
        "∀x (Goldfish(x) → Carp(x))",
        "Osprey(bubbles) ⊕ Goldfish(bubbles) → ¬Fish(bubbles)"
      ],
      "question": "Bubbles is an Osprey.",
      "question_fol": "Osprey(bubbles)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1263,
      "story_id": 439,
      "context": [
        "No fish are birds.",
        "An osprey is a bird.",
        "A carp is a fish.",
        "All goldfish are carp.",
        "If Bubbles is either an osprey or a goldfish, then Bubbles is not also a fish."
      ],
      "context_fol": [
        "∀x (Fish(x) → ¬Bird(x))",
        "∀x (Osprey(x) → Bird(x))",
        "∀x (Carp(x) → Fish(x))",
        "∀x (Goldfish(x) → Carp(x))",
        "Osprey(bubbles) ⊕ Goldfish(bubbles) → ¬Fish(bubbles)"
      ],
      "question": "Bubbles is not a goldfish.",
      "question_fol": "¬Goldfish(bubbles)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1262,
      "story_id": 439,
      "context": [
        "No fish are birds.",
        "An osprey is a bird.",
        "A carp is a fish.",
        "All goldfish are carp.",
        "If Bubbles is either an osprey or a goldfish, then Bubbles is not also a fish."
      ],
      "context_fol": [
        "∀x (Fish(x) → ¬Bird(x))",
        "∀x (Osprey(x) → Bird(x))",
        "∀x (Carp(x) → Fish(x))",
        "∀x (Goldfish(x) → Carp(x))",
        "Osprey(bubbles) ⊕ Goldfish(bubbles) → ¬Fish(bubbles)"
      ],
      "question": "Bubbles is a goldfish.",
      "question_fol": "Goldfish(bubbles)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "802": [
    {
      "id": 940,
      "story_id": 354,
      "context": [
        "People either believe in Santa Claus, or think he is made up.",
        "People who believe in Santa Claus expect to get presents on Christmas morning.",
        "People who think Santa Claus is made up, then they would be surprised to see him in their house.",
        "People who expect presents on Christmas morning are excited for it to be Christmas.",
        "If people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve.",
        "Mercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus."
      ],
      "context_fol": [
        "∀x (BelieveIn(x, santaClaus) ⊕ ThinkMadeUp(x, santaClaus))",
        "∀x (BelieveIn(x, santaClaus) → Expect(x, present, christmasMorning))",
        "∀x (ThinkMadeUp(x, santaClaus) → WouldBeSurprisedToSeeIn(x, santaClaus, house))",
        "∀x (Expect(x, present, christmasMorning) → ExcitedFor(x, christmas))",
        "∀x (WouldBeSurprisedToSeeIn(x, santaClaus, house) → ¬LeaveOut(x, cookies))",
        "¬(Expect(marcy, present, christmasMorning) ∧ ExcitedFor(marcy, christmas) ∧ BelieveIn(marcy, santaClaus))"
      ],
      "question": "Marcy is not someone who both leaves out cookies on Chrismtas eve and thinks Santa Claus is made up, or Marcy believes in Santa Claus.",
      "question_fol": "¬(LeaveOut(marcy, cookies) ∧ ThinkMadeUp(marcy, santaClaus)) ∨ BelieveIn(marcy, santaClaus)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 939,
      "story_id": 354,
      "context": [
        "People either believe in Santa Claus, or think he is made up.",
        "People who believe in Santa Claus expect to get presents on Christmas morning.",
        "People who think Santa Claus is made up, then they would be surprised to see him in their house.",
        "People who expect presents on Christmas morning are excited for it to be Christmas.",
        "If people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve.",
        "Mercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus."
      ],
      "context_fol": [
        "∀x (BelieveIn(x, santaClaus) ⊕ ThinkMadeUp(x, santaClaus))",
        "∀x (BelieveIn(x, santaClaus) → Expect(x, present, christmasMorning))",
        "∀x (ThinkMadeUp(x, santaClaus) → WouldBeSurprisedToSeeIn(x, santaClaus, house))",
        "∀x (Expect(x, present, christmasMorning) → ExcitedFor(x, christmas))",
        "∀x (WouldBeSurprisedToSeeIn(x, santaClaus, house) → ¬LeaveOut(x, cookies))",
        "¬(Expect(marcy, present, christmasMorning) ∧ ExcitedFor(marcy, christmas) ∧ BelieveIn(marcy, santaClaus))"
      ],
      "question": "Marcy either believes in Santa Claus or doesn't leave cookies out on Christmas Eve.",
      "question_fol": "BelieveIn(marcy, santaClaus) ⊕ LeaveOut(marcy, cookies)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 64,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A-List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, aMCAList) → EligibleForThreeFreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tVSeries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, aMCAList)",
        "Prefer(peter, tVSeries)"
      ],
      "question": "James goes to cinemas every week.",
      "question_fol": "CinemaEveryWeek(james)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "803": [
    {
      "id": 940,
      "story_id": 354,
      "context": [
        "People either believe in Santa Claus, or think he is made up.",
        "People who believe in Santa Claus expect to get presents on Christmas morning.",
        "People who think Santa Claus is made up, then they would be surprised to see him in their house.",
        "People who expect presents on Christmas morning are excited for it to be Christmas.",
        "If people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve.",
        "Mercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus."
      ],
      "context_fol": [
        "∀x (BelieveIn(x, santaClaus) ⊕ ThinkMadeUp(x, santaClaus))",
        "∀x (BelieveIn(x, santaClaus) → Expect(x, present, christmasMorning))",
        "∀x (ThinkMadeUp(x, santaClaus) → WouldBeSurprisedToSeeIn(x, santaClaus, house))",
        "∀x (Expect(x, present, christmasMorning) → ExcitedFor(x, christmas))",
        "∀x (WouldBeSurprisedToSeeIn(x, santaClaus, house) → ¬LeaveOut(x, cookies))",
        "¬(Expect(marcy, present, christmasMorning) ∧ ExcitedFor(marcy, christmas) ∧ BelieveIn(marcy, santaClaus))"
      ],
      "question": "Marcy is not someone who both leaves out cookies on Chrismtas eve and thinks Santa Claus is made up, or Marcy believes in Santa Claus.",
      "question_fol": "¬(LeaveOut(marcy, cookies) ∧ ThinkMadeUp(marcy, santaClaus)) ∨ BelieveIn(marcy, santaClaus)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 64,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A-List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, aMCAList) → EligibleForThreeFreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tVSeries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, aMCAList)",
        "Prefer(peter, tVSeries)"
      ],
      "question": "James goes to cinemas every week.",
      "question_fol": "CinemaEveryWeek(james)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 65,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A-List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, aMCAList) → EligibleForThreeFreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tVSeries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, aMCAList)",
        "Prefer(peter, tVSeries)"
      ],
      "question": "Peter will not watch TV series in cinemas.",
      "question_fol": "¬WatchTVIn(peter, cinemas)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "804": [
    {
      "id": 940,
      "story_id": 354,
      "context": [
        "People either believe in Santa Claus, or think he is made up.",
        "People who believe in Santa Claus expect to get presents on Christmas morning.",
        "People who think Santa Claus is made up, then they would be surprised to see him in their house.",
        "People who expect presents on Christmas morning are excited for it to be Christmas.",
        "If people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve.",
        "Mercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus."
      ],
      "context_fol": [
        "∀x (BelieveIn(x, santaClaus) ⊕ ThinkMadeUp(x, santaClaus))",
        "∀x (BelieveIn(x, santaClaus) → Expect(x, present, christmasMorning))",
        "∀x (ThinkMadeUp(x, santaClaus) → WouldBeSurprisedToSeeIn(x, santaClaus, house))",
        "∀x (Expect(x, present, christmasMorning) → ExcitedFor(x, christmas))",
        "∀x (WouldBeSurprisedToSeeIn(x, santaClaus, house) → ¬LeaveOut(x, cookies))",
        "¬(Expect(marcy, present, christmasMorning) ∧ ExcitedFor(marcy, christmas) ∧ BelieveIn(marcy, santaClaus))"
      ],
      "question": "Marcy is not someone who both leaves out cookies on Chrismtas eve and thinks Santa Claus is made up, or Marcy believes in Santa Claus.",
      "question_fol": "¬(LeaveOut(marcy, cookies) ∧ ThinkMadeUp(marcy, santaClaus)) ∨ BelieveIn(marcy, santaClaus)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 64,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A-List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, aMCAList) → EligibleForThreeFreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tVSeries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, aMCAList)",
        "Prefer(peter, tVSeries)"
      ],
      "question": "James goes to cinemas every week.",
      "question_fol": "CinemaEveryWeek(james)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 939,
      "story_id": 354,
      "context": [
        "People either believe in Santa Claus, or think he is made up.",
        "People who believe in Santa Claus expect to get presents on Christmas morning.",
        "People who think Santa Claus is made up, then they would be surprised to see him in their house.",
        "People who expect presents on Christmas morning are excited for it to be Christmas.",
        "If people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve.",
        "Mercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus."
      ],
      "context_fol": [
        "∀x (BelieveIn(x, santaClaus) ⊕ ThinkMadeUp(x, santaClaus))",
        "∀x (BelieveIn(x, santaClaus) → Expect(x, present, christmasMorning))",
        "∀x (ThinkMadeUp(x, santaClaus) → WouldBeSurprisedToSeeIn(x, santaClaus, house))",
        "∀x (Expect(x, present, christmasMorning) → ExcitedFor(x, christmas))",
        "∀x (WouldBeSurprisedToSeeIn(x, santaClaus, house) → ¬LeaveOut(x, cookies))",
        "¬(Expect(marcy, present, christmasMorning) ∧ ExcitedFor(marcy, christmas) ∧ BelieveIn(marcy, santaClaus))"
      ],
      "question": "Marcy either believes in Santa Claus or doesn't leave cookies out on Christmas Eve.",
      "question_fol": "BelieveIn(marcy, santaClaus) ⊕ LeaveOut(marcy, cookies)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "323": [
    {
      "id": 20,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))",
        "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
      ],
      "question": "Miroslav Venhoda loved music.",
      "question_fol": "Love(miroslav, music)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 22,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))",
        "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
      ],
      "question": "No choral conductor specialized in the performance of Renaissance.",
      "question_fol": "∀x (ChoralConductor(x) → ¬SpecializeInPerformanceOf(x, renaissanceMusic))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 21,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))",
        "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
      ],
      "question": "A Czech published a book in 1946.",
      "question_fol": "∃x ∃y (Czech(x) ∧ PublishedBook(x, y, year1946))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "324": [
    {
      "id": 20,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))",
        "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
      ],
      "question": "Miroslav Venhoda loved music.",
      "question_fol": "Love(miroslav, music)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 22,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))",
        "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
      ],
      "question": "No choral conductor specialized in the performance of Renaissance.",
      "question_fol": "∀x (ChoralConductor(x) → ¬SpecializeInPerformanceOf(x, renaissanceMusic))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 21,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))",
        "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
      ],
      "question": "A Czech published a book in 1946.",
      "question_fol": "∃x ∃y (Czech(x) ∧ PublishedBook(x, y, year1946))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "325": [
    {
      "id": 22,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))",
        "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
      ],
      "question": "No choral conductor specialized in the performance of Renaissance.",
      "question_fol": "∀x (ChoralConductor(x) → ¬SpecializeInPerformanceOf(x, renaissanceMusic))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 20,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))",
        "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
      ],
      "question": "Miroslav Venhoda loved music.",
      "question_fol": "Love(miroslav, music)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 21,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))",
        "PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)"
      ],
      "question": "A Czech published a book in 1946.",
      "question_fol": "∃x ∃y (Czech(x) ∧ PublishedBook(x, y, year1946))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1032": [
    {
      "id": 1035,
      "story_id": 387,
      "context": [
        "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If a disease is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All types of leukemia are diseases and blood cancers. ",
        "Bladder cancer is a disease and is blood cancer or Leukemia."
      ],
      "context_fol": [
        "∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) ",
        "∀x (RareDisease(x) → Require(x, medicalDiagnosis))",
        "∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))",
        "Disease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))"
      ],
      "question": "Bladder cancer is a mild disease.",
      "question_fol": "Mild(bladderCancer)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1037,
      "story_id": 387,
      "context": [
        "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If a disease is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All types of leukemia are diseases and blood cancers. ",
        "Bladder cancer is a disease and is blood cancer or Leukemia."
      ],
      "context_fol": [
        "∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) ",
        "∀x (RareDisease(x) → Require(x, medicalDiagnosis))",
        "∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))",
        "Disease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))"
      ],
      "question": "Bladder cancer is either a rare disease or a mild disease.",
      "question_fol": "RareDisease(bladderCancer) ⊕ Mild(bladderCancer)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1036,
      "story_id": 387,
      "context": [
        "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If a disease is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All types of leukemia are diseases and blood cancers. ",
        "Bladder cancer is a disease and is blood cancer or Leukemia."
      ],
      "context_fol": [
        "∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) ",
        "∀x (RareDisease(x) → Require(x, medicalDiagnosis))",
        "∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))",
        "Disease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))"
      ],
      "question": "Bladder cancer is Leukemia.",
      "question_fol": "Leukemia(bladderCancer)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1033": [
    {
      "id": 1035,
      "story_id": 387,
      "context": [
        "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If a disease is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All types of leukemia are diseases and blood cancers. ",
        "Bladder cancer is a disease and is blood cancer or Leukemia."
      ],
      "context_fol": [
        "∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) ",
        "∀x (RareDisease(x) → Require(x, medicalDiagnosis))",
        "∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))",
        "Disease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))"
      ],
      "question": "Bladder cancer is a mild disease.",
      "question_fol": "Mild(bladderCancer)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1037,
      "story_id": 387,
      "context": [
        "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If a disease is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All types of leukemia are diseases and blood cancers. ",
        "Bladder cancer is a disease and is blood cancer or Leukemia."
      ],
      "context_fol": [
        "∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) ",
        "∀x (RareDisease(x) → Require(x, medicalDiagnosis))",
        "∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))",
        "Disease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))"
      ],
      "question": "Bladder cancer is either a rare disease or a mild disease.",
      "question_fol": "RareDisease(bladderCancer) ⊕ Mild(bladderCancer)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1036,
      "story_id": 387,
      "context": [
        "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If a disease is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All types of leukemia are diseases and blood cancers. ",
        "Bladder cancer is a disease and is blood cancer or Leukemia."
      ],
      "context_fol": [
        "∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) ",
        "∀x (RareDisease(x) → Require(x, medicalDiagnosis))",
        "∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))",
        "Disease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))"
      ],
      "question": "Bladder cancer is Leukemia.",
      "question_fol": "Leukemia(bladderCancer)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1034": [
    {
      "id": 1035,
      "story_id": 387,
      "context": [
        "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If a disease is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All types of leukemia are diseases and blood cancers. ",
        "Bladder cancer is a disease and is blood cancer or Leukemia."
      ],
      "context_fol": [
        "∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) ",
        "∀x (RareDisease(x) → Require(x, medicalDiagnosis))",
        "∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))",
        "Disease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))"
      ],
      "question": "Bladder cancer is a mild disease.",
      "question_fol": "Mild(bladderCancer)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1037,
      "story_id": 387,
      "context": [
        "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If a disease is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All types of leukemia are diseases and blood cancers. ",
        "Bladder cancer is a disease and is blood cancer or Leukemia."
      ],
      "context_fol": [
        "∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) ",
        "∀x (RareDisease(x) → Require(x, medicalDiagnosis))",
        "∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))",
        "Disease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))"
      ],
      "question": "Bladder cancer is either a rare disease or a mild disease.",
      "question_fol": "RareDisease(bladderCancer) ⊕ Mild(bladderCancer)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1036,
      "story_id": 387,
      "context": [
        "If some diseases require a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If a disease is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All types of leukemia are diseases and blood cancers. ",
        "Bladder cancer is a disease and is blood cancer or Leukemia."
      ],
      "context_fol": [
        "∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) ",
        "∀x (RareDisease(x) → Require(x, medicalDiagnosis))",
        "∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))",
        "Disease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))"
      ],
      "question": "Bladder cancer is Leukemia.",
      "question_fol": "Leukemia(bladderCancer)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "941": [
    {
      "id": 1001,
      "story_id": 375,
      "context": [
        "All of Michael's neighbors who grow their own fresh vegetables in their home gardens also have ample space.",
        "All of Michael's neighbors who are young working professionals and live in large cities, do not have ample space.",
        "All of Michael's neighbors who order takeout from delivery services often grow their own fresh vegetables in their home garden.",
        "All of Michael's neighbors who enjoy going out often to restaurants with friends order takeout from delivery services often.",
        "All of Michael's neighbors who regularly tout the benefits of homegrown and homecooked meals over fast food enjoy going out often to restaurants with friends. ",
        "Peter, Michael's neighbor, grows his own fresh vegetables in his home garden, or regularly touts the benefits of homegrown and homecooked meals over fast food, or both."
      ],
      "context_fol": [
        "∀x (MichaelsNeightbor(x) ∧ GrowIn(x, vegetable, garden) → Have(x, ampleSpace))",
        "∀x (MichaelsNeightbor(x) ∧ YoungWorkingProfession(x) ∧ LiveIn(x, largeCity) → ¬Have(x, ampleSpace))",
        "∀x (MichaelsNeightbor(x) ∧ OrderOften(x, takeout) → Grow(x, vegetable, garden))",
        "∀x (MichaelsNeightbor(x) ∧ EnjoyGoingOutOftenToWith(x, restaurant, friend) → OrderOften(x, takeout))",
        "∀x (MichaelsNeightbor(x) ∧ ToutOver(x, homecookedMeals, fastFood) → EnjoyGoingOutOftenToWith(x, restaurant, friend))",
        "MichaelsNeightbor(peter) ∧ (GrowIn(peter, vegetable, garden) ∨ ToutOver(peter, homecookedMeals, fastFood))"
      ],
      "question": "Peter grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities.",
      "question_fol": "GrowIn(peter, vegetable, garden) ∨ (YoungWorkingProfession(peter) ∧ LiveIn(peter, largeCity))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 975,
      "story_id": 366,
      "context": [
        "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
        "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
        "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Damon is in Franny's family. ",
        "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
      ],
      "context_fol": [
        "∀x (In(x, frannysFamily) ∧ (Drink(x, kombucha) ∨ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))))",
        "∀x (In(x, frannysFamily) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))))",
        "∀x (In(x, frannysFamily)) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → HaveToVisitFrequently(x, dentist))",
        "∀x (In(x, frannysFamily) ∧ (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))) → ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y)))",
        "∀x (In(x, frannysFamily) ∧ ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))) → ¬(ConsistentEverydayRoutine(x) ∧ StickTo(damon, solidSchedule)))",
        "In(damon, frannysFamily)",
        "¬((∃y ∃z(¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ (ConsistentEverydayRoutine(damon) ∧ StickTo(damon, solidSchedule)))"
      ],
      "question": "If Damon is in Franny's family and he either visits the dentist frequently or drinks kombucha, then Damon both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.",
      "question_fol": "HaveToVisitFrequently(damon, dentist) ∨ Drink(damon, kombucha, everyDay) → HaveToVisitFrequently(damon, dentist) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 999,
      "story_id": 375,
      "context": [
        "All of Michael's neighbors who grow their own fresh vegetables in their home gardens also have ample space.",
        "All of Michael's neighbors who are young working professionals and live in large cities, do not have ample space.",
        "All of Michael's neighbors who order takeout from delivery services often grow their own fresh vegetables in their home garden.",
        "All of Michael's neighbors who enjoy going out often to restaurants with friends order takeout from delivery services often.",
        "All of Michael's neighbors who regularly tout the benefits of homegrown and homecooked meals over fast food enjoy going out often to restaurants with friends. ",
        "Peter, Michael's neighbor, grows his own fresh vegetables in his home garden, or regularly touts the benefits of homegrown and homecooked meals over fast food, or both."
      ],
      "context_fol": [
        "∀x (MichaelsNeightbor(x) ∧ GrowIn(x, vegetable, garden) → Have(x, ampleSpace))",
        "∀x (MichaelsNeightbor(x) ∧ YoungWorkingProfession(x) ∧ LiveIn(x, largeCity) → ¬Have(x, ampleSpace))",
        "∀x (MichaelsNeightbor(x) ∧ OrderOften(x, takeout) → Grow(x, vegetable, garden))",
        "∀x (MichaelsNeightbor(x) ∧ EnjoyGoingOutOftenToWith(x, restaurant, friend) → OrderOften(x, takeout))",
        "∀x (MichaelsNeightbor(x) ∧ ToutOver(x, homecookedMeals, fastFood) → EnjoyGoingOutOftenToWith(x, restaurant, friend))",
        "MichaelsNeightbor(peter) ∧ (GrowIn(peter, vegetable, garden) ∨ ToutOver(peter, homecookedMeals, fastFood))"
      ],
      "question": "Peter enjoys going out often to restaurants with friends.",
      "question_fol": "EnjoyGoingOutOftenTo(peter, restaurant, friend)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "942": [
    {
      "id": 975,
      "story_id": 366,
      "context": [
        "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
        "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
        "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Damon is in Franny's family. ",
        "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
      ],
      "context_fol": [
        "∀x (In(x, frannysFamily) ∧ (Drink(x, kombucha) ∨ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))))",
        "∀x (In(x, frannysFamily) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))))",
        "∀x (In(x, frannysFamily)) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → HaveToVisitFrequently(x, dentist))",
        "∀x (In(x, frannysFamily) ∧ (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))) → ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y)))",
        "∀x (In(x, frannysFamily) ∧ ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))) → ¬(ConsistentEverydayRoutine(x) ∧ StickTo(damon, solidSchedule)))",
        "In(damon, frannysFamily)",
        "¬((∃y ∃z(¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ (ConsistentEverydayRoutine(damon) ∧ StickTo(damon, solidSchedule)))"
      ],
      "question": "If Damon is in Franny's family and he either visits the dentist frequently or drinks kombucha, then Damon both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.",
      "question_fol": "HaveToVisitFrequently(damon, dentist) ∨ Drink(damon, kombucha, everyDay) → HaveToVisitFrequently(damon, dentist) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 967,
      "story_id": 364,
      "context": [
        "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. ",
        "People in this neighborhood visit a coffee shop regularly or order takeout at least once a day.",
        "If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))",
        "∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))",
        "∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))",
        "∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))",
        "∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))",
        "In(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))"
      ],
      "question": "Sam is living in this neighborhood and he is addicted to coffee.",
      "question_fol": "InThisNeighborhood(sam) ∧ AddictedTo(sam, coffee)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 973,
      "story_id": 366,
      "context": [
        "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
        "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
        "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Damon is in Franny's family. ",
        "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
      ],
      "context_fol": [
        "∀x (In(x, frannysFamily) ∧ (Drink(x, kombucha) ∨ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))))",
        "∀x (In(x, frannysFamily) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))))",
        "∀x (In(x, frannysFamily)) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → HaveToVisitFrequently(x, dentist))",
        "∀x (In(x, frannysFamily) ∧ (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))) → ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y)))",
        "∀x (In(x, frannysFamily) ∧ ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))) → ¬(ConsistentEverydayRoutine(x) ∧ StickTo(damon, solidSchedule)))",
        "In(damon, frannysFamily)",
        "¬((∃y ∃z(¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ (ConsistentEverydayRoutine(damon) ∧ StickTo(damon, solidSchedule)))"
      ],
      "question": "Damon is in Franny's family and he has to visit the dentist frequently.",
      "question_fol": "HaveToVisitFrequently(damon, dentist)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "943": [
    {
      "id": 975,
      "story_id": 366,
      "context": [
        "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
        "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
        "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Damon is in Franny's family. ",
        "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
      ],
      "context_fol": [
        "∀x (In(x, frannysFamily) ∧ (Drink(x, kombucha) ∨ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))))",
        "∀x (In(x, frannysFamily) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))))",
        "∀x (In(x, frannysFamily)) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → HaveToVisitFrequently(x, dentist))",
        "∀x (In(x, frannysFamily) ∧ (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))) → ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y)))",
        "∀x (In(x, frannysFamily) ∧ ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))) → ¬(ConsistentEverydayRoutine(x) ∧ StickTo(damon, solidSchedule)))",
        "In(damon, frannysFamily)",
        "¬((∃y ∃z(¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ (ConsistentEverydayRoutine(damon) ∧ StickTo(damon, solidSchedule)))"
      ],
      "question": "If Damon is in Franny's family and he either visits the dentist frequently or drinks kombucha, then Damon both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.",
      "question_fol": "HaveToVisitFrequently(damon, dentist) ∨ Drink(damon, kombucha, everyDay) → HaveToVisitFrequently(damon, dentist) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 973,
      "story_id": 366,
      "context": [
        "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.",
        "If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.",
        "If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Damon is in Franny's family. ",
        "Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."
      ],
      "context_fol": [
        "∀x (In(x, frannysFamily) ∧ (Drink(x, kombucha) ∨ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))))",
        "∀x (In(x, frannysFamily) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))))",
        "∀x (In(x, frannysFamily)) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → HaveToVisitFrequently(x, dentist))",
        "∀x (In(x, frannysFamily) ∧ (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))) → ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y)))",
        "∀x (In(x, frannysFamily) ∧ ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))) → ¬(ConsistentEverydayRoutine(x) ∧ StickTo(damon, solidSchedule)))",
        "In(damon, frannysFamily)",
        "¬((∃y ∃z(¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ (ConsistentEverydayRoutine(damon) ∧ StickTo(damon, solidSchedule)))"
      ],
      "question": "Damon is in Franny's family and he has to visit the dentist frequently.",
      "question_fol": "HaveToVisitFrequently(damon, dentist)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1001,
      "story_id": 375,
      "context": [
        "All of Michael's neighbors who grow their own fresh vegetables in their home gardens also have ample space.",
        "All of Michael's neighbors who are young working professionals and live in large cities, do not have ample space.",
        "All of Michael's neighbors who order takeout from delivery services often grow their own fresh vegetables in their home garden.",
        "All of Michael's neighbors who enjoy going out often to restaurants with friends order takeout from delivery services often.",
        "All of Michael's neighbors who regularly tout the benefits of homegrown and homecooked meals over fast food enjoy going out often to restaurants with friends. ",
        "Peter, Michael's neighbor, grows his own fresh vegetables in his home garden, or regularly touts the benefits of homegrown and homecooked meals over fast food, or both."
      ],
      "context_fol": [
        "∀x (MichaelsNeightbor(x) ∧ GrowIn(x, vegetable, garden) → Have(x, ampleSpace))",
        "∀x (MichaelsNeightbor(x) ∧ YoungWorkingProfession(x) ∧ LiveIn(x, largeCity) → ¬Have(x, ampleSpace))",
        "∀x (MichaelsNeightbor(x) ∧ OrderOften(x, takeout) → Grow(x, vegetable, garden))",
        "∀x (MichaelsNeightbor(x) ∧ EnjoyGoingOutOftenToWith(x, restaurant, friend) → OrderOften(x, takeout))",
        "∀x (MichaelsNeightbor(x) ∧ ToutOver(x, homecookedMeals, fastFood) → EnjoyGoingOutOftenToWith(x, restaurant, friend))",
        "MichaelsNeightbor(peter) ∧ (GrowIn(peter, vegetable, garden) ∨ ToutOver(peter, homecookedMeals, fastFood))"
      ],
      "question": "Peter grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities.",
      "question_fol": "GrowIn(peter, vegetable, garden) ∨ (YoungWorkingProfession(peter) ∧ LiveIn(peter, largeCity))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "147": [
    {
      "id": 656,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "question_fol": "FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 655,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "question_fol": "¬FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 196,
      "story_id": 66,
      "context": [
        "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "If a city is in a state in the US, the city is a US city.",
        "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
        "Los Angeles is a city in California.",
        "Atlanta is a US city.",
        "Atlanta is in Georgia.",
        "California is a state in the United States.",
        "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
        "Atlanta in the United States held the 1996 Summer Olympics."
      ],
      "context_fol": [
        "∀x ∀y ((SummerOlympicsIn(x,y) ∧ In(x, unitedStates)) → SummerOlympicsIn(x, unitedStates))",
        "∀x ∀y ((In(x, y) ∧ In(y, unitedStates)) → In(x, unitedStates))",
        "∀x ∀y ∀z ((In(x, z) ∧ State(z) ∧ SummerOlympicsIn(x,y)) → SummerOlympicsIn(z, y))",
        "SummerOlympicsIn(losAngeles, yr2028)",
        "In(losAngeles, california)",
        "In(atlanta, unitedStates)",
        "In(california, unitedStates)",
        "In(atlanta, georgia)",
        "¬InSummerOlympicsIn(boxing, yr2028) ∧ (¬InSummerOlympicsIn(modern_pentathlon, yr2028)) ∧ (¬InSummerOlympicsIn(weightlifting, yr2028))",
        "SummerOlympicsIn(atlanta, yr1996)"
      ],
      "question": "The 1996 Summer Olympics is not in Georgia.",
      "question_fol": "¬SummerOlympicsIn(georgia, yr1996)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "148": [
    {
      "id": 196,
      "story_id": 66,
      "context": [
        "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "If a city is in a state in the US, the city is a US city.",
        "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
        "Los Angeles is a city in California.",
        "Atlanta is a US city.",
        "Atlanta is in Georgia.",
        "California is a state in the United States.",
        "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
        "Atlanta in the United States held the 1996 Summer Olympics."
      ],
      "context_fol": [
        "∀x ∀y ((SummerOlympicsIn(x,y) ∧ In(x, unitedStates)) → SummerOlympicsIn(x, unitedStates))",
        "∀x ∀y ((In(x, y) ∧ In(y, unitedStates)) → In(x, unitedStates))",
        "∀x ∀y ∀z ((In(x, z) ∧ State(z) ∧ SummerOlympicsIn(x,y)) → SummerOlympicsIn(z, y))",
        "SummerOlympicsIn(losAngeles, yr2028)",
        "In(losAngeles, california)",
        "In(atlanta, unitedStates)",
        "In(california, unitedStates)",
        "In(atlanta, georgia)",
        "¬InSummerOlympicsIn(boxing, yr2028) ∧ (¬InSummerOlympicsIn(modern_pentathlon, yr2028)) ∧ (¬InSummerOlympicsIn(weightlifting, yr2028))",
        "SummerOlympicsIn(atlanta, yr1996)"
      ],
      "question": "The 1996 Summer Olympics is not in Georgia.",
      "question_fol": "¬SummerOlympicsIn(georgia, yr1996)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 655,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "question_fol": "¬FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 656,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "question_fol": "FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "149": [
    {
      "id": 656,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "question_fol": "FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 655,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."
      ],
      "context_fol": [
        "HeldIn(2008SummerOlympics, beijingChina)",
        "SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)",
        "Won(china, theMostGoldMedals)",
        "PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)",
        "PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)",
        "∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "question_fol": "¬FewerGoldMedalsThan(russia, china)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 196,
      "story_id": 66,
      "context": [
        "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "If a city is in a state in the US, the city is a US city.",
        "If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "The 2028 Summer Olympics is scheduled to take place in Los Angeles.",
        "Los Angeles is a city in California.",
        "Atlanta is a US city.",
        "Atlanta is in Georgia.",
        "California is a state in the United States.",
        "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
        "Atlanta in the United States held the 1996 Summer Olympics."
      ],
      "context_fol": [
        "∀x ∀y ((SummerOlympicsIn(x,y) ∧ In(x, unitedStates)) → SummerOlympicsIn(x, unitedStates))",
        "∀x ∀y ((In(x, y) ∧ In(y, unitedStates)) → In(x, unitedStates))",
        "∀x ∀y ∀z ((In(x, z) ∧ State(z) ∧ SummerOlympicsIn(x,y)) → SummerOlympicsIn(z, y))",
        "SummerOlympicsIn(losAngeles, yr2028)",
        "In(losAngeles, california)",
        "In(atlanta, unitedStates)",
        "In(california, unitedStates)",
        "In(atlanta, georgia)",
        "¬InSummerOlympicsIn(boxing, yr2028) ∧ (¬InSummerOlympicsIn(modern_pentathlon, yr2028)) ∧ (¬InSummerOlympicsIn(weightlifting, yr2028))",
        "SummerOlympicsIn(atlanta, yr1996)"
      ],
      "question": "The 1996 Summer Olympics is not in Georgia.",
      "question_fol": "¬SummerOlympicsIn(georgia, yr1996)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "703": [
    {
      "id": 917,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "question_fol": "¬Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 920,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy or an elephant.",
      "question_fol": "¬(Sleepy(jumbo) ⊕ Elephant(jumbo))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 916,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not both an elephant and a mammal.",
        "If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "question_fol": "Sleepy(jumbo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "442": [
    {
      "id": 3,
      "story_id": 1,
      "context": [
        "Mary has the flu.",
        "If someone has the flu, then they have influenza.",
        "Susan doesn't have influenza."
      ],
      "context_fol": [
        "Has(mary, flu)",
        "∀x (Has(x, flu) → Has(x, influenza))",
        "¬Has(susan, influenza)"
      ],
      "question": "Either Mary or Susan has influenza.",
      "question_fol": "Has(mary, influenza) ⊕ Has(susan, influenza)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 480,
      "story_id": 167,
      "context": [
        "If you go somewhere by train, you will not lose time.",
        "If you go somewhere by car and meet a traffic jam, you will lose time.",
        "If you lose time, you will be late for work.",
        "Mary can get from New Haven to New York City either by train or car.",
        "Mary is late for work."
      ],
      "context_fol": [
        "∀x (GoByTrain(x) → ¬LoseTime(x))",
        "∀x((GoByCar(x) ∧ Meet(x, trafficJam)) → LoseTime(x))",
        "∀x (LoseTime(x) → LateForWork(x))",
        "FromAndTo(newHaven, newYork) ∧ (GoByTrain(mary) ⊕ GoByCar(mary))",
        "LateForWork(mary)"
      ],
      "question": "Mary gets from New Haven to New York City by car.",
      "question_fol": "FromAndTo(newHaven, newYork) ∧ GoByCar(mary)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 479,
      "story_id": 167,
      "context": [
        "If you go somewhere by train, you will not lose time.",
        "If you go somewhere by car and meet a traffic jam, you will lose time.",
        "If you lose time, you will be late for work.",
        "Mary can get from New Haven to New York City either by train or car.",
        "Mary is late for work."
      ],
      "context_fol": [
        "∀x (GoByTrain(x) → ¬LoseTime(x))",
        "∀x((GoByCar(x) ∧ Meet(x, trafficJam)) → LoseTime(x))",
        "∀x (LoseTime(x) → LateForWork(x))",
        "FromAndTo(newHaven, newYork) ∧ (GoByTrain(mary) ⊕ GoByCar(mary))",
        "LateForWork(mary)"
      ],
      "question": "Mary gets from New Haven to New York City by train.",
      "question_fol": "FromAndTo(newHaven, newYork) ∧ GoByTrain(mary)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "443": [
    {
      "id": 3,
      "story_id": 1,
      "context": [
        "Mary has the flu.",
        "If someone has the flu, then they have influenza.",
        "Susan doesn't have influenza."
      ],
      "context_fol": [
        "Has(mary, flu)",
        "∀x (Has(x, flu) → Has(x, influenza))",
        "¬Has(susan, influenza)"
      ],
      "question": "Either Mary or Susan has influenza.",
      "question_fol": "Has(mary, influenza) ⊕ Has(susan, influenza)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 480,
      "story_id": 167,
      "context": [
        "If you go somewhere by train, you will not lose time.",
        "If you go somewhere by car and meet a traffic jam, you will lose time.",
        "If you lose time, you will be late for work.",
        "Mary can get from New Haven to New York City either by train or car.",
        "Mary is late for work."
      ],
      "context_fol": [
        "∀x (GoByTrain(x) → ¬LoseTime(x))",
        "∀x((GoByCar(x) ∧ Meet(x, trafficJam)) → LoseTime(x))",
        "∀x (LoseTime(x) → LateForWork(x))",
        "FromAndTo(newHaven, newYork) ∧ (GoByTrain(mary) ⊕ GoByCar(mary))",
        "LateForWork(mary)"
      ],
      "question": "Mary gets from New Haven to New York City by car.",
      "question_fol": "FromAndTo(newHaven, newYork) ∧ GoByCar(mary)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 479,
      "story_id": 167,
      "context": [
        "If you go somewhere by train, you will not lose time.",
        "If you go somewhere by car and meet a traffic jam, you will lose time.",
        "If you lose time, you will be late for work.",
        "Mary can get from New Haven to New York City either by train or car.",
        "Mary is late for work."
      ],
      "context_fol": [
        "∀x (GoByTrain(x) → ¬LoseTime(x))",
        "∀x((GoByCar(x) ∧ Meet(x, trafficJam)) → LoseTime(x))",
        "∀x (LoseTime(x) → LateForWork(x))",
        "FromAndTo(newHaven, newYork) ∧ (GoByTrain(mary) ⊕ GoByCar(mary))",
        "LateForWork(mary)"
      ],
      "question": "Mary gets from New Haven to New York City by train.",
      "question_fol": "FromAndTo(newHaven, newYork) ∧ GoByTrain(mary)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1268": [
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Dogs are not always naughty.",
      "question_fol": "∀x (Dog(x) → ¬Naughty(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1269": [
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Dogs are not always naughty.",
      "question_fol": "∀x (Dog(x) → ¬Naughty(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1270": [
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Dogs are not always naughty.",
      "question_fol": "∀x (Dog(x) → ¬Naughty(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 168,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "question_fol": "Animal(leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "189": [
    {
      "id": 211,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)",
        "BornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no journalists that were born in Yorkshire.",
      "question_fol": "∀x (Journalist(x) → ¬BornIn(x, yorkshire))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 210,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)",
        "BornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no British authors.",
      "question_fol": "∀x (British(x) → ¬Author(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 212,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)",
        "BornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There is a son of a general practitioner that is not an author.",
      "question_fol": "∃x ∃y (Son(x, y) ∧ GeneralPractitioner(y) ∧ ¬Author(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "190": [
    {
      "id": 211,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)",
        "BornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no journalists that were born in Yorkshire.",
      "question_fol": "∀x (Journalist(x) → ¬BornIn(x, yorkshire))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 210,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)",
        "BornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no British authors.",
      "question_fol": "∀x (British(x) → ¬Author(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 138,
      "story_id": 48,
      "context": [
        "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "The Salmon of Doubt is about life experiences and technology.",
        "All authors are writers.",
        "Writers create innovative ideas.",
        "Some books that contain innovative ideas are about technology."
      ],
      "context_fol": [
        "Author(douglasAdams) ∧ Authored(douglasAdams, theSalmonOfDoubt) ∧ Book(theSalmonOfDoubt)",
        "About(theSalmonOfDoubt, lifeExperience) ∧ About(theSalmonOfDoubt, technology)",
        "∀x (Author(x) → Writer(x))",
        "∀x (Writer(x) → Create(x, innovativeIdea))",
        "∃x ∃y (Contain(x, innovativeIdea) ∧ About(x, technology) ∧ (¬(x=y)) ∧ (Contain(y, innovativeIdea) ∧ About(y, technology)))"
      ],
      "question": "Douglas Adams is a writer.",
      "question_fol": "Writer(douglasAdams)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "191": [
    {
      "id": 211,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)",
        "BornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no journalists that were born in Yorkshire.",
      "question_fol": "∀x (Journalist(x) → ¬BornIn(x, yorkshire))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 210,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)",
        "BornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no British authors.",
      "question_fol": "∀x (British(x) → ¬Author(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 212,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author, and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)",
        "BornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There is a son of a general practitioner that is not an author.",
      "question_fol": "∃x ∃y (Son(x, y) ∧ GeneralPractitioner(y) ∧ ¬Author(x))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1313": [
    {
      "id": 883,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is an athlete.",
      "question_fol": "Athlete(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 881,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is a Knicks player.",
      "question_fol": "KnicksPlayer(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 882,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is not a Knicks player.",
      "question_fol": "¬KnicksPlayer(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1314": [
    {
      "id": 883,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is an athlete.",
      "question_fol": "Athlete(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 881,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is a Knicks player.",
      "question_fol": "KnicksPlayer(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 882,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is not a Knicks player.",
      "question_fol": "¬KnicksPlayer(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1315": [
    {
      "id": 883,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is an athlete.",
      "question_fol": "Athlete(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 881,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is a Knicks player.",
      "question_fol": "KnicksPlayer(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 882,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is not a Knicks player.",
      "question_fol": "¬KnicksPlayer(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1316": [
    {
      "id": 883,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is an athlete.",
      "question_fol": "Athlete(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 881,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is a Knicks player.",
      "question_fol": "KnicksPlayer(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 882,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is not a Knicks player.",
      "question_fol": "¬KnicksPlayer(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "1317": [
    {
      "id": 883,
      "story_id": 337,
      "context": [
        "No athletes never exercise.",
        "All professional basketball players are athletes. ",
        "All NBA players are professional basketball players. ",
        "All Knicks players are NBA players. ",
        "Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."
      ],
      "context_fol": [
        "∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time",
        "∀x (ProfessionalBasketballPlayer(x) → Athlete(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))"
      ],
      "question": "Jim is an athlete.",
      "question_fol": "Athlete(jim)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 840,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All soccer defenders are soccer players.",
        "All centerback players are soccer defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "∀x (ProfessionalSoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))",
        "∀x (ProfessionalCenterback(x) → ProfessionalSoccerDefender(x))",
        "(NBAPlayer(stephencurry) ⊕ ProfessionalSoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is an NBA player.",
      "question_fol": "NBAPlayer(stephenCurry)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 841,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All soccer defenders are soccer players.",
        "All centerback players are soccer defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "∀x (ProfessionalSoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))",
        "∀x (ProfessionalCenterback(x) → ProfessionalSoccerDefender(x))",
        "(NBAPlayer(stephencurry) ⊕ ProfessionalSoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is a centerback player.",
      "question_fol": "ProfessionalCenterback(stephenCurry)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "724": [
    {
      "id": 745,
      "story_id": 301,
      "context": [
        "When something is depressing, it is sad.",
        "The end of a relationship is depressing. "
      ],
      "context_fol": [
        "∀x (Depressing(x) → Sad(x))",
        "Depressing(v)"
      ],
      "question": "The end of a relationship is invigorating",
      "question_fol": "Invigorating(v)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1010,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or know the people who are getting married.",
        "No preteens or young children are getting married or know the people who are getting married.",
        "People who enjoy celebrating life milestone events with other people attend weddings.",
        "People who are fond of large group functions enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and spirited are fond of large group functions.",
        "If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "
      ],
      "context_fol": [
        "∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))",
        "∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))",
        "∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))",
        "∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))",
        "∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))",
        "¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "question_fol": "¬((∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) ∨ (Outgoing(carol) ∧ Sprited(carol)))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 386,
      "story_id": 130,
      "context": [
        "John will go to the cinema if and only if Jack goes to the cinema today.",
        "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.",
        "Some days in March have bad weather.",
        "Iron Man is on.",
        "It's March now."
      ],
      "context_fol": [
        "(GoTo(john, theCinema) ∧ GoTo(john, today)) ↔ GoTo(jack, theCinema) ∧ GoTo(jack, today)",
        "(GoTo(john, theCinema) ∧ GoTo(john, today)) ↔ (On(ironman) ∧ ¬Bad(weather, today))",
        "∃x (Day(x) ∧ March(x) → ¬Bad(weather, x))",
        "On(ironman)",
        "Day(presentMoment) ∧ March(presentMoment)"
      ],
      "question": "John will go to the cinema.",
      "question_fol": "GoTo(john, theCinema) ∧ GoTo(john, today)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "411": [
    {
      "id": 650,
      "story_id": 229,
      "context": [
        "Barbara Ann Marshall is a former swimmer and former world record-holder.",
        "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "Barbara Ann Marshall's home country is the United States.",
        "All people who competed in the 1972 Summer Olympics represented their home country.",
        "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
        "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
        "Only relay swimmers who participated in the final event at the 1972 Summer Olympics received medals."
      ],
      "context_fol": [
        "FormerSwimmer(barbaraAnnMarshall) ∧ FormerWorldRecordHolder(barbaraAnnMarshall)",
        "ParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)",
        "HomeCountry(barbaraAnnMarshall, unitedStates)",
        "∀x ∃y (ParticipatedIn(x, 1972SummerOlympics) ∧ HomeCountry(x, y) → Represented(x, y))",
        "ParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)",
        "¬ParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)",
        "∀x ((ParticipatedIn(x, 1972SummerOlympics) ∧ RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalHeatFreestyleRelay)) ↔ ¬Recieved(x, medal)))"
      ],
      "question": "Barbara Ann Marshall did not receive medals.",
      "question_fol": "¬Recieved(barbaraAnnMarshall, medal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 651,
      "story_id": 229,
      "context": [
        "Barbara Ann Marshall is a former swimmer and former world record-holder.",
        "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "Barbara Ann Marshall's home country is the United States.",
        "All people who competed in the 1972 Summer Olympics represented their home country.",
        "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
        "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
        "Only relay swimmers who participated in the final event at the 1972 Summer Olympics received medals."
      ],
      "context_fol": [
        "FormerSwimmer(barbaraAnnMarshall) ∧ FormerWorldRecordHolder(barbaraAnnMarshall)",
        "ParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)",
        "HomeCountry(barbaraAnnMarshall, unitedStates)",
        "∀x ∃y (ParticipatedIn(x, 1972SummerOlympics) ∧ HomeCountry(x, y) → Represented(x, y))",
        "ParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)",
        "¬ParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)",
        "∀x ((ParticipatedIn(x, 1972SummerOlympics) ∧ RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalHeatFreestyleRelay)) ↔ ¬Recieved(x, medal)))"
      ],
      "question": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.",
      "question_fol": "Represented(barbaraAnnMarshall, unitedStates)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 336,
      "story_id": 111,
      "context": [
        "Aberdeen won the cup in the 2013 final.",
        "Rangers won the cup in the 2014 final.",
        "Aberdeen and Rangers are different teams.",
        "Different teams cannot win the cup in the same year's final."
      ],
      "context_fol": [
        "WonCup(aberdeen, year2013Final)",
        "WonCup(rangers, year2014Final)",
        "¬(aberdeen=rangers)",
        "∀x ∀y ∀z ∀w (¬(x=y) ∧ WonCup(x, z) ∧ WonCup(y, w) → ¬(z=w))"
      ],
      "question": "Rangers won the cup in 2015.",
      "question_fol": "WonCup(rangers, year2015Final)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "412": [
    {
      "id": 650,
      "story_id": 229,
      "context": [
        "Barbara Ann Marshall is a former swimmer and former world record-holder.",
        "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "Barbara Ann Marshall's home country is the United States.",
        "All people who competed in the 1972 Summer Olympics represented their home country.",
        "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
        "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
        "Only relay swimmers who participated in the final event at the 1972 Summer Olympics received medals."
      ],
      "context_fol": [
        "FormerSwimmer(barbaraAnnMarshall) ∧ FormerWorldRecordHolder(barbaraAnnMarshall)",
        "ParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)",
        "HomeCountry(barbaraAnnMarshall, unitedStates)",
        "∀x ∃y (ParticipatedIn(x, 1972SummerOlympics) ∧ HomeCountry(x, y) → Represented(x, y))",
        "ParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)",
        "¬ParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)",
        "∀x ((ParticipatedIn(x, 1972SummerOlympics) ∧ RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalHeatFreestyleRelay)) ↔ ¬Recieved(x, medal)))"
      ],
      "question": "Barbara Ann Marshall did not receive medals.",
      "question_fol": "¬Recieved(barbaraAnnMarshall, medal)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 651,
      "story_id": 229,
      "context": [
        "Barbara Ann Marshall is a former swimmer and former world record-holder.",
        "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "Barbara Ann Marshall's home country is the United States.",
        "All people who competed in the 1972 Summer Olympics represented their home country.",
        "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
        "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
        "Only relay swimmers who participated in the final event at the 1972 Summer Olympics received medals."
      ],
      "context_fol": [
        "FormerSwimmer(barbaraAnnMarshall) ∧ FormerWorldRecordHolder(barbaraAnnMarshall)",
        "ParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)",
        "HomeCountry(barbaraAnnMarshall, unitedStates)",
        "∀x ∃y (ParticipatedIn(x, 1972SummerOlympics) ∧ HomeCountry(x, y) → Represented(x, y))",
        "ParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)",
        "¬ParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)",
        "∀x ((ParticipatedIn(x, 1972SummerOlympics) ∧ RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalHeatFreestyleRelay)) ↔ ¬Recieved(x, medal)))"
      ],
      "question": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.",
      "question_fol": "Represented(barbaraAnnMarshall, unitedStates)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 336,
      "story_id": 111,
      "context": [
        "Aberdeen won the cup in the 2013 final.",
        "Rangers won the cup in the 2014 final.",
        "Aberdeen and Rangers are different teams.",
        "Different teams cannot win the cup in the same year's final."
      ],
      "context_fol": [
        "WonCup(aberdeen, year2013Final)",
        "WonCup(rangers, year2014Final)",
        "¬(aberdeen=rangers)",
        "∀x ∀y ∀z ∀w (¬(x=y) ∧ WonCup(x, z) ∧ WonCup(y, w) → ¬(z=w))"
      ],
      "question": "Rangers won the cup in 2015.",
      "question_fol": "WonCup(rangers, year2015Final)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "1324": [
    {
      "id": 1371,
      "story_id": 473,
      "context": [
        "All pets in my house are either cats or dogs.",
        "All the dogs in my house bark.",
        "Ghosts do not exist.",
        "If some pet in my house barks, then it is not dead.",
        "All of the pets in my house are either dead or alive.",
        "Jojo is a pet in my house, and it is not alive."
      ],
      "context_fol": [
        "∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))",
        "∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))",
        "Pet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)"
      ],
      "question": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.",
      "question_fol": "Cat(jojo) ∨ Ghost(jojo) → Bark(jojo) ⊕ Dog(jojo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1370,
      "story_id": 473,
      "context": [
        "All pets in my house are either cats or dogs.",
        "All the dogs in my house bark.",
        "Ghosts do not exist.",
        "If some pet in my house barks, then it is not dead.",
        "All of the pets in my house are either dead or alive.",
        "Jojo is a pet in my house, and it is not alive."
      ],
      "context_fol": [
        "∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))",
        "∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))",
        "Pet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)"
      ],
      "question": "Jojo is a cat or a ghost.",
      "question_fol": "Cat(jojo) ∨ Ghost(jojo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))",
        "∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))",
        "∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))",
        "∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))",
        "OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "question_fol": "¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1325": [
    {
      "id": 1371,
      "story_id": 473,
      "context": [
        "All pets in my house are either cats or dogs.",
        "All the dogs in my house bark.",
        "Ghosts do not exist.",
        "If some pet in my house barks, then it is not dead.",
        "All of the pets in my house are either dead or alive.",
        "Jojo is a pet in my house, and it is not alive."
      ],
      "context_fol": [
        "∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))",
        "∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))",
        "Pet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)"
      ],
      "question": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.",
      "question_fol": "Cat(jojo) ∨ Ghost(jojo) → Bark(jojo) ⊕ Dog(jojo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1370,
      "story_id": 473,
      "context": [
        "All pets in my house are either cats or dogs.",
        "All the dogs in my house bark.",
        "Ghosts do not exist.",
        "If some pet in my house barks, then it is not dead.",
        "All of the pets in my house are either dead or alive.",
        "Jojo is a pet in my house, and it is not alive."
      ],
      "context_fol": [
        "∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))",
        "∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))",
        "Pet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)"
      ],
      "question": "Jojo is a cat or a ghost.",
      "question_fol": "Cat(jojo) ∨ Ghost(jojo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1369,
      "story_id": 473,
      "context": [
        "All pets in my house are either cats or dogs.",
        "All the dogs in my house bark.",
        "Ghosts do not exist.",
        "If some pet in my house barks, then it is not dead.",
        "All of the pets in my house are either dead or alive.",
        "Jojo is a pet in my house, and it is not alive."
      ],
      "context_fol": [
        "∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))",
        "∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))",
        "Pet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)"
      ],
      "question": "Jojo is a ghost.",
      "question_fol": "Ghost(jojo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1326": [
    {
      "id": 1371,
      "story_id": 473,
      "context": [
        "All pets in my house are either cats or dogs.",
        "All the dogs in my house bark.",
        "Ghosts do not exist.",
        "If some pet in my house barks, then it is not dead.",
        "All of the pets in my house are either dead or alive.",
        "Jojo is a pet in my house, and it is not alive."
      ],
      "context_fol": [
        "∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))",
        "∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))",
        "Pet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)"
      ],
      "question": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.",
      "question_fol": "Cat(jojo) ∨ Ghost(jojo) → Bark(jojo) ⊕ Dog(jojo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1370,
      "story_id": 473,
      "context": [
        "All pets in my house are either cats or dogs.",
        "All the dogs in my house bark.",
        "Ghosts do not exist.",
        "If some pet in my house barks, then it is not dead.",
        "All of the pets in my house are either dead or alive.",
        "Jojo is a pet in my house, and it is not alive."
      ],
      "context_fol": [
        "∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))",
        "∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))",
        "Pet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)"
      ],
      "question": "Jojo is a cat or a ghost.",
      "question_fol": "Cat(jojo) ∨ Ghost(jojo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1369,
      "story_id": 473,
      "context": [
        "All pets in my house are either cats or dogs.",
        "All the dogs in my house bark.",
        "Ghosts do not exist.",
        "If some pet in my house barks, then it is not dead.",
        "All of the pets in my house are either dead or alive.",
        "Jojo is a pet in my house, and it is not alive."
      ],
      "context_fol": [
        "∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))",
        "∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))",
        "Pet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)"
      ],
      "question": "Jojo is a ghost.",
      "question_fol": "Ghost(jojo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "304": [
    {
      "id": 373,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "question_fol": "TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 718,
      "story_id": 274,
      "context": [
        "Adam Buska is a European football player.",
        "If a European plays football, they play what Americans call soccer."
      ],
      "context_fol": [
        "FootballPlayer(adamBuska) ∧ European(adamBuska)",
        "∀x (FootballPlayer(x) ∧ European(x) → ∃y (Call(american, y, soccer) ∧ Play(x, y)))"
      ],
      "question": "Adam Buska plays what Americans call soccer.",
      "question_fol": "∃y (Call(american, y, soccer) ∧ Play(adamBuska, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 632,
      "story_id": 224,
      "context": [
        "Rhos Aelwyd F.C. is a Welsh football club.",
        "Rhos Aelwyd F.C. is the only football club located in Ponciau. ",
        "The Premier Division was won in June 2005 by a team from Ponciau. ",
        "The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.",
        "The Premier Division in October 2009 was won by the same team that won in June 2005. "
      ],
      "context_fol": [
        "∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ Welsh(x))",
        "∀x (FootballClub(x) ∧ LocatedIn(x, ponciau) ↔ Rhosaelwydfc(x))",
        "∃x (LocatedIn(x, ponciau) ∧ WonPremierDivisionDuring(x, year2005MonthJune))",
        "∀x (WonPremierDivisionDuring(x, year2009MonthOctober) → PromotedTo(x, cymruAlliance))",
        "∀x (WonPremierDivisionDuring(x, year2009MonthOctober) ↔ WonPremierDivisionDuring(x, y2005MonthJune))"
      ],
      "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
      "question_fol": "∃x (Rhosaelwydfc(x) ∧ WonPremierDivisionDuring(x, year2005MonthJune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "305": [
    {
      "id": 718,
      "story_id": 274,
      "context": [
        "Adam Buska is a European football player.",
        "If a European plays football, they play what Americans call soccer."
      ],
      "context_fol": [
        "FootballPlayer(adamBuska) ∧ European(adamBuska)",
        "∀x (FootballPlayer(x) ∧ European(x) → ∃y (Call(american, y, soccer) ∧ Play(x, y)))"
      ],
      "question": "Adam Buska plays what Americans call soccer.",
      "question_fol": "∃y (Call(american, y, soccer) ∧ Play(adamBuska, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 632,
      "story_id": 224,
      "context": [
        "Rhos Aelwyd F.C. is a Welsh football club.",
        "Rhos Aelwyd F.C. is the only football club located in Ponciau. ",
        "The Premier Division was won in June 2005 by a team from Ponciau. ",
        "The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.",
        "The Premier Division in October 2009 was won by the same team that won in June 2005. "
      ],
      "context_fol": [
        "∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ Welsh(x))",
        "∀x (FootballClub(x) ∧ LocatedIn(x, ponciau) ↔ Rhosaelwydfc(x))",
        "∃x (LocatedIn(x, ponciau) ∧ WonPremierDivisionDuring(x, year2005MonthJune))",
        "∀x (WonPremierDivisionDuring(x, year2009MonthOctober) → PromotedTo(x, cymruAlliance))",
        "∀x (WonPremierDivisionDuring(x, year2009MonthOctober) ↔ WonPremierDivisionDuring(x, y2005MonthJune))"
      ],
      "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
      "question_fol": "∃x (Rhosaelwydfc(x) ∧ WonPremierDivisionDuring(x, year2005MonthJune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 373,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "question_fol": "TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "306": [
    {
      "id": 718,
      "story_id": 274,
      "context": [
        "Adam Buska is a European football player.",
        "If a European plays football, they play what Americans call soccer."
      ],
      "context_fol": [
        "FootballPlayer(adamBuska) ∧ European(adamBuska)",
        "∀x (FootballPlayer(x) ∧ European(x) → ∃y (Call(american, y, soccer) ∧ Play(x, y)))"
      ],
      "question": "Adam Buska plays what Americans call soccer.",
      "question_fol": "∃y (Call(american, y, soccer) ∧ Play(adamBuska, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 632,
      "story_id": 224,
      "context": [
        "Rhos Aelwyd F.C. is a Welsh football club.",
        "Rhos Aelwyd F.C. is the only football club located in Ponciau. ",
        "The Premier Division was won in June 2005 by a team from Ponciau. ",
        "The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.",
        "The Premier Division in October 2009 was won by the same team that won in June 2005. "
      ],
      "context_fol": [
        "∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ Welsh(x))",
        "∀x (FootballClub(x) ∧ LocatedIn(x, ponciau) ↔ Rhosaelwydfc(x))",
        "∃x (LocatedIn(x, ponciau) ∧ WonPremierDivisionDuring(x, year2005MonthJune))",
        "∀x (WonPremierDivisionDuring(x, year2009MonthOctober) → PromotedTo(x, cymruAlliance))",
        "∀x (WonPremierDivisionDuring(x, year2009MonthOctober) ↔ WonPremierDivisionDuring(x, y2005MonthJune))"
      ],
      "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
      "question_fol": "∃x (Rhosaelwydfc(x) ∧ WonPremierDivisionDuring(x, year2005MonthJune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 373,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "question_fol": "TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "307": [
    {
      "id": 718,
      "story_id": 274,
      "context": [
        "Adam Buska is a European football player.",
        "If a European plays football, they play what Americans call soccer."
      ],
      "context_fol": [
        "FootballPlayer(adamBuska) ∧ European(adamBuska)",
        "∀x (FootballPlayer(x) ∧ European(x) → ∃y (Call(american, y, soccer) ∧ Play(x, y)))"
      ],
      "question": "Adam Buska plays what Americans call soccer.",
      "question_fol": "∃y (Call(american, y, soccer) ∧ Play(adamBuska, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 632,
      "story_id": 224,
      "context": [
        "Rhos Aelwyd F.C. is a Welsh football club.",
        "Rhos Aelwyd F.C. is the only football club located in Ponciau. ",
        "The Premier Division was won in June 2005 by a team from Ponciau. ",
        "The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.",
        "The Premier Division in October 2009 was won by the same team that won in June 2005. "
      ],
      "context_fol": [
        "∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ Welsh(x))",
        "∀x (FootballClub(x) ∧ LocatedIn(x, ponciau) ↔ Rhosaelwydfc(x))",
        "∃x (LocatedIn(x, ponciau) ∧ WonPremierDivisionDuring(x, year2005MonthJune))",
        "∀x (WonPremierDivisionDuring(x, year2009MonthOctober) → PromotedTo(x, cymruAlliance))",
        "∀x (WonPremierDivisionDuring(x, year2009MonthOctober) ↔ WonPremierDivisionDuring(x, y2005MonthJune))"
      ],
      "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
      "question_fol": "∃x (Rhosaelwydfc(x) ∧ WonPremierDivisionDuring(x, year2005MonthJune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 373,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "question_fol": "TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "308": [
    {
      "id": 718,
      "story_id": 274,
      "context": [
        "Adam Buska is a European football player.",
        "If a European plays football, they play what Americans call soccer."
      ],
      "context_fol": [
        "FootballPlayer(adamBuska) ∧ European(adamBuska)",
        "∀x (FootballPlayer(x) ∧ European(x) → ∃y (Call(american, y, soccer) ∧ Play(x, y)))"
      ],
      "question": "Adam Buska plays what Americans call soccer.",
      "question_fol": "∃y (Call(american, y, soccer) ∧ Play(adamBuska, y))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 632,
      "story_id": 224,
      "context": [
        "Rhos Aelwyd F.C. is a Welsh football club.",
        "Rhos Aelwyd F.C. is the only football club located in Ponciau. ",
        "The Premier Division was won in June 2005 by a team from Ponciau. ",
        "The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.",
        "The Premier Division in October 2009 was won by the same team that won in June 2005. "
      ],
      "context_fol": [
        "∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ Welsh(x))",
        "∀x (FootballClub(x) ∧ LocatedIn(x, ponciau) ↔ Rhosaelwydfc(x))",
        "∃x (LocatedIn(x, ponciau) ∧ WonPremierDivisionDuring(x, year2005MonthJune))",
        "∀x (WonPremierDivisionDuring(x, year2009MonthOctober) → PromotedTo(x, cymruAlliance))",
        "∀x (WonPremierDivisionDuring(x, year2009MonthOctober) ↔ WonPremierDivisionDuring(x, y2005MonthJune))"
      ],
      "question": "Rhos Aelwyd F.C. won Premier Division in June 2005.",
      "question_fol": "∃x (Rhosaelwydfc(x) ∧ WonPremierDivisionDuring(x, year2005MonthJune))",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 373,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use both the left foot and right foot very efficiently.",
        "If a soccer player can score many goals using the left foot, they can use that foot very efficiently.",
        "If a soccer player can score many goals using the right foot, they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo has scored many goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))",
        "∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))",
        "∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))",
        "SoccerPlayer(ronaldo)",
        "UseEfficiently(ronaldo, rightFoot)",
        "ScoreUsing(ronaldo, manyGoals, leftFoot)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "question_fol": "TopSoccerPlayer(ronaldo)",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ]
}