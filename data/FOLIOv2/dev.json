[
    {
        "id": 1014,
        "story_id": 380,
        "context": [
            "People in this club who perform in school talent shows often attend and are very engaged with school events.",
            "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
            "People in this club who chaperone high school dances are not students who attend the school.",
            "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
            "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
        ],
        "context_fol": [
            "\u2200x (InThisClub(x) \u2227 PerformOftenIn(x, schoolTalentShow) \u2192 Attend(x, schoolEvent) \u2227 VeryEngagedWith(x, schoolEvent))",
            "\u2200x (InThisClub(x) \u2192 PerformOftenIn(x, schoolTalentShow) \u2295 (InActive(x) \u2227 Disinterested(x) \u2227 MemberOf(x, community)))",
            "\u2200x (InThisClub(x) \u2227 Chaperone(x, highSchoolDance) \u2192 \u00ac(Studen(x) \u2227 AttendSchool(x)))",
            "\u2200x (InThisClub(x) \u2227 (InActive(x) \u2227 Disinterested(x) \u2227 MemberOf(x, community)) \u2192 Chaperone(x, highSchoolDances))",
            "\u2200x (InThisClub(x) \u2227 (YoungChildren(x) \u2295 Teenager(x)) \u2227 WishToFurther(x, academicCareer)) \u2192 Studen(x) \u2227 AttendSchool(x))",
            "InThisClub(bonnie) \u2227 \u00ac((Attend(x, schoolEvent) \u2227 VeryEngagedWith(bonnie, schoolEvent)) \u2295 (Studen(bonne) \u2227 AttendSchool(bonnie)))"
        ],
        "question": "Bonnie performs in school talent shows often.",
        "question_fol": "InThisClub(bonnie) \u2227 (Perform(bonnie, schoolTalentShow))",
        "answer": "C",
        "predicates_fol": [
            "YoungChildren(x)",
            "Teenager(x)",
            "WishToFurther(x, y)",
            "InThisClub(x)",
            "PerformOftenIn(x, y)",
            "Attend(x, y)",
            "VeryEngagedWith(x, y)",
            "InActive(x)",
            "Disinterested(x)",
            "MemberOf(x, y)",
            "Chaperone(x, y)",
            "Studen(x)",
            "AttendSchool(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1015,
        "story_id": 380,
        "context": [
            "People in this club who perform in school talent shows often attend and are very engaged with school events.",
            "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
            "People in this club who chaperone high school dances are not students who attend the school.",
            "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
            "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
        ],
        "context_fol": [
            "\u2200x (InThisClub(x) \u2227 PerformOftenIn(x, schoolTalentShow) \u2192 Attend(x, schoolEvent) \u2227 VeryEngagedWith(x, schoolEvent))",
            "\u2200x (InThisClub(x) \u2192 PerformOftenIn(x, schoolTalentShow) \u2295 (InActive(x) \u2227 Disinterested(x) \u2227 MemberOf(x, community)))",
            "\u2200x (InThisClub(x) \u2227 Chaperone(x, highSchoolDance) \u2192 \u00ac(Studen(x) \u2227 AttendSchool(x)))",
            "\u2200x (InThisClub(x) \u2227 (InActive(x) \u2227 Disinterested(x) \u2227 MemberOf(x, community)) \u2192 Chaperone(x, highSchoolDances))",
            "\u2200x (InThisClub(x) \u2227 (YoungChildren(x) \u2295 Teenager(x)) \u2227 WishToFurther(x, academicCareer)) \u2192 Studen(x) \u2227 AttendSchool(x))",
            "InThisClub(bonnie) \u2227 \u00ac((Attend(x, schoolEvent) \u2227 VeryEngagedWith(bonnie, schoolEvent)) \u2295 (Studen(bonne) \u2227 AttendSchool(bonnie)))"
        ],
        "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
        "question_fol": "\u00ac((YoungChildren(bonnie) \u2295 Teenager(bonnie)) \u2227 WishToFurther(bonnie, academicCareer)) \u2295 Chaperone(bonnie, highSchoolDance)) \u2192 (Studen(x) \u2227 AttendSchool(x)) \u2295 (YoungChildren(bonnie) \u2295 Teenager(bonnie)) \u2227 WishToFurther(bonnie, academicCareer))",
        "answer": "A",
        "predicates_fol": [
            "YoungChildren(x)",
            "Teenager(x)",
            "WishToFurther(x, y)",
            "InThisClub(x)",
            "PerformOftenIn(x, y)",
            "Attend(x, y)",
            "VeryEngagedWith(x, y)",
            "InActive(x)",
            "Disinterested(x)",
            "MemberOf(x, y)",
            "Chaperone(x, y)",
            "Studen(x)",
            "AttendSchool(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1016,
        "story_id": 380,
        "context": [
            "People in this club who perform in school talent shows often attend and are very engaged with school events.",
            "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
            "People in this club who chaperone high school dances are not students who attend the school.",
            "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
            "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
        ],
        "context_fol": [
            "\u2200x (InThisClub(x) \u2227 PerformOftenIn(x, schoolTalentShow) \u2192 Attend(x, schoolEvent) \u2227 VeryEngagedWith(x, schoolEvent))",
            "\u2200x (InThisClub(x) \u2192 PerformOftenIn(x, schoolTalentShow) \u2295 (InActive(x) \u2227 Disinterested(x) \u2227 MemberOf(x, community)))",
            "\u2200x (InThisClub(x) \u2227 Chaperone(x, highSchoolDance) \u2192 \u00ac(Studen(x) \u2227 AttendSchool(x)))",
            "\u2200x (InThisClub(x) \u2227 (InActive(x) \u2227 Disinterested(x) \u2227 MemberOf(x, community)) \u2192 Chaperone(x, highSchoolDances))",
            "\u2200x (InThisClub(x) \u2227 (YoungChildren(x) \u2295 Teenager(x)) \u2227 WishToFurther(x, academicCareer)) \u2192 Studen(x) \u2227 AttendSchool(x))",
            "InThisClub(bonnie) \u2227 \u00ac((Attend(x, schoolEvent) \u2227 VeryEngagedWith(bonnie, schoolEvent)) \u2295 (Studen(bonne) \u2227 AttendSchool(bonnie)))"
        ],
        "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
        "question_fol": "(Chaperone(bonnie, highSchoolDance) \u2295 Perform(bonnie, schoolTalentShow)) \u2192 (YoungChildren(bonnie) \u2295 Teenager(bonnie)) \u2227 WishToFurther(bonnie, academicCareer)) \u2227 (InActive(bonnie) \u2227 Disinterested(bonnie) \u2227 MemberOf(bonnie, community))",
        "answer": "B",
        "predicates_fol": [
            "YoungChildren(x)",
            "Teenager(x)",
            "WishToFurther(x, y)",
            "InThisClub(x)",
            "PerformOftenIn(x, y)",
            "Attend(x, y)",
            "VeryEngagedWith(x, y)",
            "InActive(x)",
            "Disinterested(x)",
            "MemberOf(x, y)",
            "Chaperone(x, y)",
            "Studen(x)",
            "AttendSchool(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1208,
        "story_id": 426,
        "context": [
            "All employees who schedule a meeting with their customers will go to the company building today. ",
            "Everyone who has lunch in the company building schedules meetings with their customers. ",
            "Employees have lunch either in the company building or at home.",
            "If an employee has lunch at home, they are working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James will appear in the company today if and only if he is a manager."
        ],
        "context_fol": [
            "\u2200x ((Employee(x) \u2227 Schedule(x, meeting, customers)) \u2192 AppearIn(x, company))",
            "\u2200x ((Employee(x) \u2227 HasLunch(x, company)) \u2192 Schedule(x, meeting, customers))",
            "\u2200x (Employee(x) \u2192 (HasLunch(x, company) \u2295 HasLunch(x, home)))",
            "\u2200x ((Employee(x) \u2227 HasLunch(x, home)) \u2192 Work(x, home))",
            "\u2200x ((Employee(x) \u2227 (\u00acIn(x, homecountry))) \u2192 Work(x, home))",
            "\u2200x (Manager(x) \u2192 \u00acWork(x, home))",
            "\u00ac(Manager(james) \u2295 AppearIn(james, company))"
        ],
        "question": "James has lunch in the company.",
        "question_fol": "HasLunch(james, company)",
        "answer": "C",
        "predicates_fol": [
            "Employee(x)",
            "Schedule(x, y)",
            "AppearIn(x, y)",
            "HasLunch(x, y)",
            "Work(x, y)",
            "In(x, y)",
            "Manager(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1209,
        "story_id": 426,
        "context": [
            "All employees who schedule a meeting with their customers will go to the company building today. ",
            "Everyone who has lunch in the company building schedules meetings with their customers. ",
            "Employees have lunch either in the company building or at home.",
            "If an employee has lunch at home, they are working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James will appear in the company today if and only if he is a manager."
        ],
        "context_fol": [
            "\u2200x ((Employee(x) \u2227 Schedule(x, meeting, customers)) \u2192 AppearIn(x, company))",
            "\u2200x ((Employee(x) \u2227 HasLunch(x, company)) \u2192 Schedule(x, meeting, customers))",
            "\u2200x (Employee(x) \u2192 (HasLunch(x, company) \u2295 HasLunch(x, home)))",
            "\u2200x ((Employee(x) \u2227 HasLunch(x, home)) \u2192 Work(x, home))",
            "\u2200x ((Employee(x) \u2227 (\u00acIn(x, homecountry))) \u2192 Work(x, home))",
            "\u2200x (Manager(x) \u2192 \u00acWork(x, home))",
            "\u00ac(Manager(james) \u2295 AppearIn(james, company))"
        ],
        "question": "James does not have lunch in the company.",
        "question_fol": "\u00acHasLunch(james, company)",
        "answer": "C",
        "predicates_fol": [
            "Employee(x)",
            "Schedule(x, y)",
            "AppearIn(x, y)",
            "HasLunch(x, y)",
            "Work(x, y)",
            "In(x, y)",
            "Manager(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1210,
        "story_id": 426,
        "context": [
            "All employees who schedule a meeting with their customers will go to the company building today. ",
            "Everyone who has lunch in the company building schedules meetings with their customers. ",
            "Employees have lunch either in the company building or at home.",
            "If an employee has lunch at home, they are working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James will appear in the company today if and only if he is a manager."
        ],
        "context_fol": [
            "\u2200x ((Employee(x) \u2227 Schedule(x, meeting, customers)) \u2192 AppearIn(x, company))",
            "\u2200x ((Employee(x) \u2227 HasLunch(x, company)) \u2192 Schedule(x, meeting, customers))",
            "\u2200x (Employee(x) \u2192 (HasLunch(x, company) \u2295 HasLunch(x, home)))",
            "\u2200x ((Employee(x) \u2227 HasLunch(x, home)) \u2192 Work(x, home))",
            "\u2200x ((Employee(x) \u2227 (\u00acIn(x, homecountry))) \u2192 Work(x, home))",
            "\u2200x (Manager(x) \u2192 \u00acWork(x, home))",
            "\u00ac(Manager(james) \u2295 AppearIn(james, company))"
        ],
        "question": "If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]",
        "question_fol": "Manager(james) \u2192 \u00acWork(james, home)",
        "answer": "A",
        "predicates_fol": [
            "Employee(x)",
            "Schedule(x, y)",
            "AppearIn(x, y)",
            "HasLunch(x, y)",
            "Work(x, y)",
            "In(x, y)",
            "Manager(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 563,
        "story_id": 198,
        "context": [
            "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
            "Monkeypox virus can occur in certain animals.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
            "People feel tired when they get the flu."
        ],
        "context_fol": [
            "\u2203x (OccurIn(monkeypoxVirus, x) \u2227 Get(x, monkeypoxVirus))",
            "\u2203x (Animal(x) \u2227 OccurIn(monkeypoxVirus, x))",
            "\u2200x (Human(x) \u2192 Mammal(x))",
            "\u2200x (Mammal(x) \u2192 Animal(x))",
            "\u2203x (SymptonOf(x, monkeypoxVirus) \u2227 (Fever(x) \u2228 Headache(x) \u2228 MusclePain(x) \u2228 Tired(x)))",
            "\u2200x (Human(x) \u2227 Get(x, flu) \u2192 Feel(x, tired))"
        ],
        "question": "There is an animal.",
        "question_fol": "\u2203x (Animal(x))",
        "answer": "A",
        "predicates_fol": [
            "OccurIn(x, y)",
            "Get(x, y)",
            "Animal(x)",
            "Human(x)",
            "Mammal(x)",
            "SymptonOf(x, y)",
            "Fever(x)",
            "Headache(x)",
            "MusclePain(x)",
            "Tired(x)",
            "Feel(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 564,
        "story_id": 198,
        "context": [
            "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
            "Monkeypox virus can occur in certain animals.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
            "People feel tired when they get the flu."
        ],
        "context_fol": [
            "\u2203x (OccurIn(monkeypoxVirus, x) \u2227 Get(x, monkeypoxVirus))",
            "\u2203x (Animal(x) \u2227 OccurIn(monkeypoxVirus, x))",
            "\u2200x (Human(x) \u2192 Mammal(x))",
            "\u2200x (Mammal(x) \u2192 Animal(x))",
            "\u2203x (SymptonOf(x, monkeypoxVirus) \u2227 (Fever(x) \u2228 Headache(x) \u2228 MusclePain(x) \u2228 Tired(x)))",
            "\u2200x (Human(x) \u2227 Get(x, flu) \u2192 Feel(x, tired))"
        ],
        "question": "No one gets the flu.",
        "question_fol": "\u2200x (Human(x) \u2192 \u00acGet(x, flu))",
        "answer": "C",
        "predicates_fol": [
            "OccurIn(x, y)",
            "Get(x, y)",
            "Animal(x)",
            "Human(x)",
            "Mammal(x)",
            "SymptonOf(x, y)",
            "Fever(x)",
            "Headache(x)",
            "MusclePain(x)",
            "Tired(x)",
            "Feel(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 565,
        "story_id": 198,
        "context": [
            "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
            "Monkeypox virus can occur in certain animals.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
            "People feel tired when they get the flu."
        ],
        "context_fol": [
            "\u2203x (OccurIn(monkeypoxVirus, x) \u2227 Get(x, monkeypoxVirus))",
            "\u2203x (Animal(x) \u2227 OccurIn(monkeypoxVirus, x))",
            "\u2200x (Human(x) \u2192 Mammal(x))",
            "\u2200x (Mammal(x) \u2192 Animal(x))",
            "\u2203x (SymptonOf(x, monkeypoxVirus) \u2227 (Fever(x) \u2228 Headache(x) \u2228 MusclePain(x) \u2228 Tired(x)))",
            "\u2200x (Human(x) \u2227 Get(x, flu) \u2192 Feel(x, tired))"
        ],
        "question": "Symptoms of Monkeypox include coughing.",
        "question_fol": "\u2203x (SymptonOf(x, monkeypoxVirus) \u2227 Coughing(x))",
        "answer": "C",
        "predicates_fol": [
            "OccurIn(x, y)",
            "Get(x, y)",
            "Animal(x)",
            "Human(x)",
            "Mammal(x)",
            "SymptonOf(x, y)",
            "Fever(x)",
            "Headache(x)",
            "MusclePain(x)",
            "Tired(x)",
            "Feel(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 0,
        "story_id": 0,
        "context": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is not a Gould's wild turkey.",
            "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "context_fol": [
            "\u2200x (WildTurkey(x) \u2192 (EasternWildTurkey(x) \u2228 OsceolaWildTurkey(x) \u2228 GouldsWildTurkey(x) \u2228 MerriamsWildTurkey(x) \u2228 RiograndeWildTurkey(x) \u2228 OcellatedWildTurkey(x)))",
            "\u00ac(EasternWildTurkey(tom))",
            "\u00ac(OsceolaWildTurkey(tom))",
            "\u00ac(GouldsWildTurkey(tom))",
            "\u00ac(MerriamsWildTurkey(tom) \u2228 RiograndeWildTurkey(tom))",
            "WildTurkey(tom)"
        ],
        "question": "Tom is an Ocellated wild turkey.",
        "question_fol": "OcellatedWildTurkey(tom)",
        "answer": "A",
        "predicates_fol": [
            "WildTurkey(x)",
            "EasternWildTurkey(x)",
            "OsceolaWildTurkey(x)",
            "GouldsWildTurkey(x)",
            "MerriamsWildTurkey(x)",
            "RiograndeWildTurkey(x)",
            "OcellatedWildTurkey(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1,
        "story_id": 0,
        "context": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is not a Gould's wild turkey.",
            "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "context_fol": [
            "\u2200x (WildTurkey(x) \u2192 (EasternWildTurkey(x) \u2228 OsceolaWildTurkey(x) \u2228 GouldsWildTurkey(x) \u2228 MerriamsWildTurkey(x) \u2228 RiograndeWildTurkey(x) \u2228 OcellatedWildTurkey(x)))",
            "\u00ac(EasternWildTurkey(tom))",
            "\u00ac(OsceolaWildTurkey(tom))",
            "\u00ac(GouldsWildTurkey(tom))",
            "\u00ac(MerriamsWildTurkey(tom) \u2228 RiograndeWildTurkey(tom))",
            "WildTurkey(tom)"
        ],
        "question": "Tom is an Eastern wild turkey.",
        "question_fol": "EasternWildTurkey(tom)",
        "answer": "B",
        "predicates_fol": [
            "WildTurkey(x)",
            "EasternWildTurkey(x)",
            "OsceolaWildTurkey(x)",
            "GouldsWildTurkey(x)",
            "MerriamsWildTurkey(x)",
            "RiograndeWildTurkey(x)",
            "OcellatedWildTurkey(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 2,
        "story_id": 0,
        "context": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is not a Gould's wild turkey.",
            "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "context_fol": [
            "\u2200x (WildTurkey(x) \u2192 (EasternWildTurkey(x) \u2228 OsceolaWildTurkey(x) \u2228 GouldsWildTurkey(x) \u2228 MerriamsWildTurkey(x) \u2228 RiograndeWildTurkey(x) \u2228 OcellatedWildTurkey(x)))",
            "\u00ac(EasternWildTurkey(tom))",
            "\u00ac(OsceolaWildTurkey(tom))",
            "\u00ac(GouldsWildTurkey(tom))",
            "\u00ac(MerriamsWildTurkey(tom) \u2228 RiograndeWildTurkey(tom))",
            "WildTurkey(tom)"
        ],
        "question": "Joey is a wild turkey.",
        "question_fol": "WildTurkey(joey)",
        "answer": "C",
        "predicates_fol": [
            "WildTurkey(x)",
            "EasternWildTurkey(x)",
            "OsceolaWildTurkey(x)",
            "GouldsWildTurkey(x)",
            "MerriamsWildTurkey(x)",
            "RiograndeWildTurkey(x)",
            "OcellatedWildTurkey(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 57,
        "story_id": 20,
        "context": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games on the Top 10 list are made by Japanese game companies.",
            "If a game sells more than one million copies, then it will be included in the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "context_fol": [
            "Game(theLegendofZelda) \u2227 \u2203x (Japanese(x) \u2227 VideoGameCompany(x) \u2227 Created(x, theLegendofZelda))",
            "\u2200x \u2200y ((Game(x) \u2227 InTop10(x) \u2227 Created(y,x)) \u2192 Japanese(y))",
            "\u2200x ((Game(x) \u2227 \u2203y(GreaterThan(y, oneMillion) \u2227 CopiesSold(x, y))) \u2192 Top10(x)))",
            "\u2203y(GreaterThan(y, oneMillion) \u2227 CopiesSold(theLegendofZelda,y))"
        ],
        "question": "The Legend of Zelda is on the Top 10 list.",
        "question_fol": "Top10(thelegendofzelda)",
        "answer": "A",
        "predicates_fol": [
            "Game(x)",
            "InTop10(x)",
            "Created(x, y)",
            "Japanese(x)",
            "GreaterThan(x, y)",
            "CopiesSold(x, y)",
            "VideoGameCompany(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 58,
        "story_id": 20,
        "context": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games on the Top 10 list are made by Japanese game companies.",
            "If a game sells more than one million copies, then it will be included in the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "context_fol": [
            "Game(theLegendofZelda) \u2227 \u2203x (Japanese(x) \u2227 VideoGameCompany(x) \u2227 Created(x, theLegendofZelda))",
            "\u2200x \u2200y ((Game(x) \u2227 InTop10(x) \u2227 Created(y,x)) \u2192 Japanese(y))",
            "\u2200x ((Game(x) \u2227 \u2203y(GreaterThan(y, oneMillion) \u2227 CopiesSold(x, y))) \u2192 Top10(x)))",
            "\u2203y(GreaterThan(y, oneMillion) \u2227 CopiesSold(theLegendofZelda,y))"
        ],
        "question": "FIFA 22 is made by a Japanese video game company.",
        "question_fol": "\u2203x(Created(x, fifa22) \u2227 Japanese(x) \u2227 VideoGameCompany(x))",
        "answer": "C",
        "predicates_fol": [
            "Game(x)",
            "InTop10(x)",
            "Created(x, y)",
            "Japanese(x)",
            "GreaterThan(x, y)",
            "CopiesSold(x, y)",
            "VideoGameCompany(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 59,
        "story_id": 20,
        "context": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games on the Top 10 list are made by Japanese game companies.",
            "If a game sells more than one million copies, then it will be included in the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "context_fol": [
            "Game(theLegendofZelda) \u2227 \u2203x (Japanese(x) \u2227 VideoGameCompany(x) \u2227 Created(x, theLegendofZelda))",
            "\u2200x \u2200y ((Game(x) \u2227 InTop10(x) \u2227 Created(y,x)) \u2192 Japanese(y))",
            "\u2200x ((Game(x) \u2227 \u2203y(GreaterThan(y, oneMillion) \u2227 CopiesSold(x, y))) \u2192 Top10(x)))",
            "\u2203y(GreaterThan(y, oneMillion) \u2227 CopiesSold(theLegendofZelda,y))"
        ],
        "question": "The Legend of Zelda is not on the Top 10 list.",
        "question_fol": "\u00acTop10(thelegendofzelda)",
        "answer": "B",
        "predicates_fol": [
            "Game(x)",
            "InTop10(x)",
            "Created(x, y)",
            "Japanese(x)",
            "GreaterThan(x, y)",
            "CopiesSold(x, y)",
            "VideoGameCompany(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 726,
        "story_id": 282,
        "context": [
            "All squares are four-sided.",
            "All four-sided things are shapes. "
        ],
        "context_fol": [
            "\u2200x (Square(x) \u2192 FourSided(x))",
            "\u2200x (FourSided(x) \u2192 Shape(x))"
        ],
        "question": "All squares are shapes.",
        "question_fol": "\u2200x (Square(x) \u2192 Shape(x))",
        "answer": "A",
        "predicates_fol": [
            "Square(x)",
            "FourSided(x)",
            "Shape(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1361,
        "story_id": 471,
        "context": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2227 CanBeSpottedNear(x, campus) \u2192 Cute(x))",
            "\u2203x (Turtle(x) \u2227 CanBeSpottedNear(x, campus))",
            "\u2200x (CanBeSpottedNear(x, campus) \u2192 (Rabbit(x) \u2295 Squirrel(x)))",
            "\u2200x (Skittish(x) \u2192 \u00acCalm(x))",
            "\u2200x (Squirrel(x) \u2227 CanBeSpottedNear(x, campus) \u2192 Skittish(x))",
            "CanBeSpottedNear(rockie, campus) \u2227 Calm(rockie) "
        ],
        "question": "Rockie is a turtle.",
        "question_fol": "Turtle(rockie)",
        "answer": "C",
        "predicates_fol": [
            "Rabbit(x)",
            "CanBeSpottedNear(x, y)",
            "Cute(x)",
            "Turtle(x)",
            "Squirrel(x)",
            "Skittish(x)",
            "Calm(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1362,
        "story_id": 471,
        "context": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2227 CanBeSpottedNear(x, campus) \u2192 Cute(x))",
            "\u2203x (Turtle(x) \u2227 CanBeSpottedNear(x, campus))",
            "\u2200x (CanBeSpottedNear(x, campus) \u2192 (Rabbit(x) \u2295 Squirrel(x)))",
            "\u2200x (Skittish(x) \u2192 \u00acCalm(x))",
            "\u2200x (Squirrel(x) \u2227 CanBeSpottedNear(x, campus) \u2192 Skittish(x))",
            "CanBeSpottedNear(rockie, campus) \u2227 Calm(rockie) "
        ],
        "question": "Rockie is not a turtle.",
        "question_fol": "\u00acTurtle(rockie)",
        "answer": "C",
        "predicates_fol": [
            "Rabbit(x)",
            "CanBeSpottedNear(x, y)",
            "Cute(x)",
            "Turtle(x)",
            "Squirrel(x)",
            "Skittish(x)",
            "Calm(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1363,
        "story_id": 471,
        "context": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2227 CanBeSpottedNear(x, campus) \u2192 Cute(x))",
            "\u2203x (Turtle(x) \u2227 CanBeSpottedNear(x, campus))",
            "\u2200x (CanBeSpottedNear(x, campus) \u2192 (Rabbit(x) \u2295 Squirrel(x)))",
            "\u2200x (Skittish(x) \u2192 \u00acCalm(x))",
            "\u2200x (Squirrel(x) \u2227 CanBeSpottedNear(x, campus) \u2192 Skittish(x))",
            "CanBeSpottedNear(rockie, campus) \u2227 Calm(rockie) "
        ],
        "question": "Rockie is a turtle or cute.",
        "question_fol": "Turtle(rockie) \u2228 Cute(rockie)",
        "answer": "A",
        "predicates_fol": [
            "Rabbit(x)",
            "CanBeSpottedNear(x, y)",
            "Cute(x)",
            "Turtle(x)",
            "Squirrel(x)",
            "Skittish(x)",
            "Calm(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1364,
        "story_id": 471,
        "context": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2227 CanBeSpottedNear(x, campus) \u2192 Cute(x))",
            "\u2203x (Turtle(x) \u2227 CanBeSpottedNear(x, campus))",
            "\u2200x (CanBeSpottedNear(x, campus) \u2192 (Rabbit(x) \u2295 Squirrel(x)))",
            "\u2200x (Skittish(x) \u2192 \u00acCalm(x))",
            "\u2200x (Squirrel(x) \u2227 CanBeSpottedNear(x, campus) \u2192 Skittish(x))",
            "CanBeSpottedNear(rockie, campus) \u2227 Calm(rockie) "
        ],
        "question": "If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.",
        "question_fol": "\u00ac(Turtle(rockie) \u2227 Squirrel(rockie)) \u2192 Cute(rockie) \u2295 Skittish(rockie)",
        "answer": "A",
        "predicates_fol": [
            "Rabbit(x)",
            "CanBeSpottedNear(x, y)",
            "Cute(x)",
            "Turtle(x)",
            "Squirrel(x)",
            "Skittish(x)",
            "Calm(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1365,
        "story_id": 471,
        "context": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2227 CanBeSpottedNear(x, campus) \u2192 Cute(x))",
            "\u2203x (Turtle(x) \u2227 CanBeSpottedNear(x, campus))",
            "\u2200x (CanBeSpottedNear(x, campus) \u2192 (Rabbit(x) \u2295 Squirrel(x)))",
            "\u2200x (Skittish(x) \u2192 \u00acCalm(x))",
            "\u2200x (Squirrel(x) \u2227 CanBeSpottedNear(x, campus) \u2192 Skittish(x))",
            "CanBeSpottedNear(rockie, campus) \u2227 Calm(rockie) "
        ],
        "question": "If Rockie is cute and calm, then Rockie is a skittish turtle.",
        "question_fol": "Cute(rockie) \u2227 Calm(rockie) \u2192 Turtle(rockie) \u2227 Skittish(rockie)",
        "answer": "B",
        "predicates_fol": [
            "Rabbit(x)",
            "CanBeSpottedNear(x, y)",
            "Cute(x)",
            "Turtle(x)",
            "Squirrel(x)",
            "Skittish(x)",
            "Calm(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 530,
        "story_id": 184,
        "context": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror.\"",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it with Lisa."
        ],
        "context_fol": [
            "NetflixShow(strangerThings) \u2227 Popular(strangerThings)",
            "\u2200x ((NetflixShow(x) \u2227 Popular(x)) \u2192 BingeWatch(karen, x))",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2194 Download(karen, x))",
            "\u00acDownload(karen, blackMirror)",
            "NetflixShow(blackMirror)",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2192 ShareWith(karen, x, lisa))"
        ],
        "question": "Karen will share \"Stranger Things\" with Lisa.",
        "question_fol": "ShareWith(karen, strangerThings, lisa)",
        "answer": "A",
        "predicates_fol": [
            "NetflixShow(x)",
            "Popular(x)",
            "BingeWatch(x, y)",
            "Download(x, y)",
            "ShareWith(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 531,
        "story_id": 184,
        "context": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror.\"",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it with Lisa."
        ],
        "context_fol": [
            "NetflixShow(strangerThings) \u2227 Popular(strangerThings)",
            "\u2200x ((NetflixShow(x) \u2227 Popular(x)) \u2192 BingeWatch(karen, x))",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2194 Download(karen, x))",
            "\u00acDownload(karen, blackMirror)",
            "NetflixShow(blackMirror)",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2192 ShareWith(karen, x, lisa))"
        ],
        "question": "\"Black Mirror\" is popular.",
        "question_fol": "Popular(blackMirror)",
        "answer": "B",
        "predicates_fol": [
            "NetflixShow(x)",
            "Popular(x)",
            "BingeWatch(x, y)",
            "Download(x, y)",
            "ShareWith(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 532,
        "story_id": 184,
        "context": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror.\"",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it with Lisa."
        ],
        "context_fol": [
            "NetflixShow(strangerThings) \u2227 Popular(strangerThings)",
            "\u2200x ((NetflixShow(x) \u2227 Popular(x)) \u2192 BingeWatch(karen, x))",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2194 Download(karen, x))",
            "\u00acDownload(karen, blackMirror)",
            "NetflixShow(blackMirror)",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2192 ShareWith(karen, x, lisa))"
        ],
        "question": "Karen will share \"Black Mirror\" with Lisa.",
        "question_fol": "ShareWith(karen, blackMirror, lisa)",
        "answer": "C",
        "predicates_fol": [
            "NetflixShow(x)",
            "Popular(x)",
            "BingeWatch(x, y)",
            "Download(x, y)",
            "ShareWith(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 657,
        "story_id": 232,
        "context": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the capital city of the world's most populous nation.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
            "Many of Beijing's 91 universities consistently rank among the best universities in the world."
        ],
        "context_fol": [
            "CapitalOf(beijing, peoplesRepublicOfChina)",
            "\u2203x (CapitalOf(beijing, x) \u2192 WorldsMostPopulousNation(x))",
            "LocatedIn(beijing, northernChina)",
            "Hosted(beijing, 2008SummerOlympics) \u2227 Hosted(beijing, 2008SummerParalympicGames)",
            "Hosted(beijing, summerOlympics) \u2227 Hosted(beijing, winterOlympics) \u2227 Hosted(beijing, summerParalympicGames)  \u2227 Hosted(beijing, winterParalympicGames)",
            "\u2203x (University(x) \u2227 InBeijing(x) \u2227 ConsistentlyRankAmongTheBestIn(x, theWorld))"
        ],
        "question": "Beijing hosted both the 2008 Summer Olympics and the Winter Olympics.",
        "question_fol": "Hosted(beijing, summerOlympics) \u2227 Hosted(beijing, winterOlympics)",
        "answer": "A",
        "predicates_fol": [
            "CapitalOf(x, y)",
            "WorldsMostPopulousNation(x)",
            "LocatedIn(x, y)",
            "Hosted(x, y)",
            "University(x)",
            "InBeijing(x)",
            "ConsistentlyRankAmongTheBestIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 658,
        "story_id": 232,
        "context": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the capital city of the world's most populous nation.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
            "Many of Beijing's 91 universities consistently rank among the best universities in the world."
        ],
        "context_fol": [
            "CapitalOf(beijing, peoplesRepublicOfChina)",
            "\u2203x (CapitalOf(beijing, x) \u2192 WorldsMostPopulousNation(x))",
            "LocatedIn(beijing, northernChina)",
            "Hosted(beijing, 2008SummerOlympics) \u2227 Hosted(beijing, 2008SummerParalympicGames)",
            "Hosted(beijing, summerOlympics) \u2227 Hosted(beijing, winterOlympics) \u2227 Hosted(beijing, summerParalympicGames)  \u2227 Hosted(beijing, winterParalympicGames)",
            "\u2203x (University(x) \u2227 InBeijing(x) \u2227 ConsistentlyRankAmongTheBestIn(x, theWorld))"
        ],
        "question": "Beijing is located in southern China.",
        "question_fol": "LocatedIn(beijing, southernChina)",
        "answer": "C",
        "predicates_fol": [
            "CapitalOf(x, y)",
            "WorldsMostPopulousNation(x)",
            "LocatedIn(x, y)",
            "Hosted(x, y)",
            "University(x)",
            "InBeijing(x)",
            "ConsistentlyRankAmongTheBestIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 659,
        "story_id": 232,
        "context": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the capital city of the world's most populous nation.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
            "Many of Beijing's 91 universities consistently rank among the best universities in the world."
        ],
        "context_fol": [
            "CapitalOf(beijing, peoplesRepublicOfChina)",
            "\u2203x (CapitalOf(beijing, x) \u2192 WorldsMostPopulousNation(x))",
            "LocatedIn(beijing, northernChina)",
            "Hosted(beijing, 2008SummerOlympics) \u2227 Hosted(beijing, 2008SummerParalympicGames)",
            "Hosted(beijing, summerOlympics) \u2227 Hosted(beijing, winterOlympics) \u2227 Hosted(beijing, summerParalympicGames)  \u2227 Hosted(beijing, winterParalympicGames)",
            "\u2203x (University(x) \u2227 InBeijing(x) \u2227 ConsistentlyRankAmongTheBestIn(x, theWorld))"
        ],
        "question": "Beijing is the second largest Chinese city.",
        "question_fol": "SecondLargestChineseCity(beijing)",
        "answer": "C",
        "predicates_fol": [
            "CapitalOf(x, y)",
            "WorldsMostPopulousNation(x)",
            "LocatedIn(x, y)",
            "Hosted(x, y)",
            "University(x)",
            "InBeijing(x)",
            "ConsistentlyRankAmongTheBestIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1301,
        "story_id": 452,
        "context": [
            "All aliens are extraterrestrials.",
            "If someone is from Mars, then they are an alien.",
            "No extraterrestrials are human.",
            "All highly intelligent beings from Earth are humans.",
            "Marvin is a highly intelligent being.",
            "Marvin is either from Earth and from Mars, or he is from neither.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "context_fol": [
            "\u2200x (Alien(x) \u2192 Extraterrestrial(x))",
            "\u2200x (From(x, mars) \u2192 Alien(x))",
            "\u2200x (Extraterrestrial(x) \u2192 \u00acHuman(x))",
            "\u2200x (HighlyIntelligentBeing(x) \u2227 From(x, earth) \u2192 Human(x))",
            "HighlyIntelligentBeing(marvin)",
            "\u00ac(From(marvin, earth) \u2295 From(marvin, mars))",
            "\u00acFrom(marvin, earth) \u2192 Extraterrestrial(marvin)"
        ],
        "question": "Marvin is an alien.",
        "question_fol": "Alien(marvin)",
        "answer": "C",
        "predicates_fol": [
            "Alien(x)",
            "Extraterrestrial(x)",
            "From(x, y)",
            "Human(x)",
            "HighlyIntelligentBeing(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1302,
        "story_id": 452,
        "context": [
            "All aliens are extraterrestrials.",
            "If someone is from Mars, then they are an alien.",
            "No extraterrestrials are human.",
            "All highly intelligent beings from Earth are humans.",
            "Marvin is a highly intelligent being.",
            "Marvin is either from Earth and from Mars, or he is from neither.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "context_fol": [
            "\u2200x (Alien(x) \u2192 Extraterrestrial(x))",
            "\u2200x (From(x, mars) \u2192 Alien(x))",
            "\u2200x (Extraterrestrial(x) \u2192 \u00acHuman(x))",
            "\u2200x (HighlyIntelligentBeing(x) \u2227 From(x, earth) \u2192 Human(x))",
            "HighlyIntelligentBeing(marvin)",
            "\u00ac(From(marvin, earth) \u2295 From(marvin, mars))",
            "\u00acFrom(marvin, earth) \u2192 Extraterrestrial(marvin)"
        ],
        "question": "Marvin is neither a human nor from Mars.",
        "question_fol": "\u00acHuman(marvin) \u2227 \u00acFrom(marvin, mars)",
        "answer": "A",
        "predicates_fol": [
            "Alien(x)",
            "Extraterrestrial(x)",
            "From(x, y)",
            "Human(x)",
            "HighlyIntelligentBeing(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1303,
        "story_id": 452,
        "context": [
            "All aliens are extraterrestrials.",
            "If someone is from Mars, then they are an alien.",
            "No extraterrestrials are human.",
            "All highly intelligent beings from Earth are humans.",
            "Marvin is a highly intelligent being.",
            "Marvin is either from Earth and from Mars, or he is from neither.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "context_fol": [
            "\u2200x (Alien(x) \u2192 Extraterrestrial(x))",
            "\u2200x (From(x, mars) \u2192 Alien(x))",
            "\u2200x (Extraterrestrial(x) \u2192 \u00acHuman(x))",
            "\u2200x (HighlyIntelligentBeing(x) \u2227 From(x, earth) \u2192 Human(x))",
            "HighlyIntelligentBeing(marvin)",
            "\u00ac(From(marvin, earth) \u2295 From(marvin, mars))",
            "\u00acFrom(marvin, earth) \u2192 Extraterrestrial(marvin)"
        ],
        "question": "If Marvin is not from Mars, then Marvin is a human.",
        "question_fol": "\u00acFrom(marvin, mars) \u2192 Human(marvin)",
        "answer": "B",
        "predicates_fol": [
            "Alien(x)",
            "Extraterrestrial(x)",
            "From(x, y)",
            "Human(x)",
            "HighlyIntelligentBeing(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 893,
        "story_id": 340,
        "context": [
            "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
            "Every Grand Slam champion at the mixer is a professional tennis player.",
            "All Oscar-nominated actors at the mixer are celebrities.",
            "All professional tennis players at the mixer are athletes.",
            "If a person at the mixer is a celebrity, then they are well paid.",
            "If a person at the mixer is an athlete, then they are famous.",
            "All well-paid people at the mixer live in tax havens.",
            "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
        ],
        "context_fol": [
            "\u2200x (At(x, mixer) \u2192 (GrandSlam(x) \u2227 Champion(x)) \u2228 (OscarNominated(x) \u2227 Actor(x)))",
            "\u2200x (At(x, mixer) \u2227 (GrandSlam(x) \u2227 Champion(x) \u2192 Professional(x) \u2227 TennisPlayer(x))",
            "\u2200x (At(x, mixer) \u2227 (OscarNominated(x) \u2227 Actor(x) \u2192 Celebrity(x))",
            "\u2200x (At(x, mixer) \u2227 Professional(x) \u2227 TennisPlayer(x) \u2192 Athlete(x))",
            "\u2200x (At(x, mixer) \u2227 Celebrity(x) \u2192 WellPaid(x))",
            "\u2200x (At(x, mixer) \u2227 Athlete(x) \u2192 Famous(x))",
            "\u2200x (At(x, mixer) \u2227 WellPaid(x) \u2192 LiveIn(x, taxHaven))",
            "At(djokovic, mixer) \u2227 (Famous(djokovic) \u2227 Athlete(djokovic) \u2192 WellPaid(djokovic))"
        ],
        "question": "Djokovic is a Grand Slam champion.",
        "question_fol": "GrandSlam(djokovic) \u2227 Champion(djokovic)",
        "answer": "C",
        "predicates_fol": [
            "At(x, y)",
            "GrandSlam(x)",
            "Champion(x)",
            "OscarNominated(x)",
            "Actor(x)",
            "Professional(x)",
            "TennisPlayer(x)",
            "Athlete(x)",
            "Celebrity(x)",
            "WellPaid(x)",
            "Famous(x)",
            "LiveIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 894,
        "story_id": 340,
        "context": [
            "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
            "Every Grand Slam champion at the mixer is a professional tennis player.",
            "All Oscar-nominated actors at the mixer are celebrities.",
            "All professional tennis players at the mixer are athletes.",
            "If a person at the mixer is a celebrity, then they are well paid.",
            "If a person at the mixer is an athlete, then they are famous.",
            "All well-paid people at the mixer live in tax havens.",
            "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
        ],
        "context_fol": [
            "\u2200x (At(x, mixer) \u2192 (GrandSlam(x) \u2227 Champion(x)) \u2228 (OscarNominated(x) \u2227 Actor(x)))",
            "\u2200x (At(x, mixer) \u2227 (GrandSlam(x) \u2227 Champion(x) \u2192 Professional(x) \u2227 TennisPlayer(x))",
            "\u2200x (At(x, mixer) \u2227 (OscarNominated(x) \u2227 Actor(x) \u2192 Celebrity(x))",
            "\u2200x (At(x, mixer) \u2227 Professional(x) \u2227 TennisPlayer(x) \u2192 Athlete(x))",
            "\u2200x (At(x, mixer) \u2227 Celebrity(x) \u2192 WellPaid(x))",
            "\u2200x (At(x, mixer) \u2227 Athlete(x) \u2192 Famous(x))",
            "\u2200x (At(x, mixer) \u2227 WellPaid(x) \u2192 LiveIn(x, taxHaven))",
            "At(djokovic, mixer) \u2227 (Famous(djokovic) \u2227 Athlete(djokovic) \u2192 WellPaid(djokovic))"
        ],
        "question": "Djokovic lives in a tax haven.",
        "question_fol": "LiveIn(djokovic, taxHaven)",
        "answer": "A",
        "predicates_fol": [
            "At(x, y)",
            "GrandSlam(x)",
            "Champion(x)",
            "OscarNominated(x)",
            "Actor(x)",
            "Professional(x)",
            "TennisPlayer(x)",
            "Athlete(x)",
            "Celebrity(x)",
            "WellPaid(x)",
            "Famous(x)",
            "LiveIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 895,
        "story_id": 340,
        "context": [
            "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
            "Every Grand Slam champion at the mixer is a professional tennis player.",
            "All Oscar-nominated actors at the mixer are celebrities.",
            "All professional tennis players at the mixer are athletes.",
            "If a person at the mixer is a celebrity, then they are well paid.",
            "If a person at the mixer is an athlete, then they are famous.",
            "All well-paid people at the mixer live in tax havens.",
            "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
        ],
        "context_fol": [
            "\u2200x (At(x, mixer) \u2192 (GrandSlam(x) \u2227 Champion(x)) \u2228 (OscarNominated(x) \u2227 Actor(x)))",
            "\u2200x (At(x, mixer) \u2227 (GrandSlam(x) \u2227 Champion(x) \u2192 Professional(x) \u2227 TennisPlayer(x))",
            "\u2200x (At(x, mixer) \u2227 (OscarNominated(x) \u2227 Actor(x) \u2192 Celebrity(x))",
            "\u2200x (At(x, mixer) \u2227 Professional(x) \u2227 TennisPlayer(x) \u2192 Athlete(x))",
            "\u2200x (At(x, mixer) \u2227 Celebrity(x) \u2192 WellPaid(x))",
            "\u2200x (At(x, mixer) \u2227 Athlete(x) \u2192 Famous(x))",
            "\u2200x (At(x, mixer) \u2227 WellPaid(x) \u2192 LiveIn(x, taxHaven))",
            "At(djokovic, mixer) \u2227 (Famous(djokovic) \u2227 Athlete(djokovic) \u2192 WellPaid(djokovic))"
        ],
        "question": "Djokovic does not live in a tax haven.",
        "question_fol": "\u00acLiveIn(djokovic, taxHaven)",
        "answer": "B",
        "predicates_fol": [
            "At(x, y)",
            "GrandSlam(x)",
            "Champion(x)",
            "OscarNominated(x)",
            "Actor(x)",
            "Professional(x)",
            "TennisPlayer(x)",
            "Athlete(x)",
            "Celebrity(x)",
            "WellPaid(x)",
            "Famous(x)",
            "LiveIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 289,
        "story_id": 96,
        "context": [
            "Diamond Mine is a professional wrestling stable formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "context_fol": [
            "ProfessionalWrestlingStable(diamondMine) \u2227 In(diamondMine, wWE)",
            "Leads(roderickStrong, diamondMine)",
            "Includes(diamondMine, creedBrothers) \u2227 Includes(diamondMine, ivyNile)",
            "Feuds(imperium, diamondMine)"
        ],
        "question": "Roderick Strong leads a professional wrestling stable.",
        "question_fol": "\u2203x (Leads(roderickstrong, x) \u2227 ProfessionalWrestlingStable(x))",
        "answer": "A",
        "predicates_fol": [
            "ProfessionalWrestlingStable(x)",
            "In(x, y)",
            "Leads(x, y)",
            "Includes(x, y)",
            "Feuds(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 290,
        "story_id": 96,
        "context": [
            "Diamond Mine is a professional wrestling stable formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "context_fol": [
            "ProfessionalWrestlingStable(diamondMine) \u2227 In(diamondMine, wWE)",
            "Leads(roderickStrong, diamondMine)",
            "Includes(diamondMine, creedBrothers) \u2227 Includes(diamondMine, ivyNile)",
            "Feuds(imperium, diamondMine)"
        ],
        "question": "Roderick Strong leads the Creed Brothers.",
        "question_fol": "Leads(roderickstrong, creedbrothers)",
        "answer": "C",
        "predicates_fol": [
            "ProfessionalWrestlingStable(x)",
            "In(x, y)",
            "Leads(x, y)",
            "Includes(x, y)",
            "Feuds(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 291,
        "story_id": 96,
        "context": [
            "Diamond Mine is a professional wrestling stable formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "context_fol": [
            "ProfessionalWrestlingStable(diamondMine) \u2227 In(diamondMine, wWE)",
            "Leads(roderickStrong, diamondMine)",
            "Includes(diamondMine, creedBrothers) \u2227 Includes(diamondMine, ivyNile)",
            "Feuds(imperium, diamondMine)"
        ],
        "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
        "question_fol": "\u2200x ((ProfessionalWrestlingStable(x) \u2227 Includes(x, ivynile)) \u2192 \u00acFeuds(imperium, x))",
        "answer": "B",
        "predicates_fol": [
            "ProfessionalWrestlingStable(x)",
            "In(x, y)",
            "Leads(x, y)",
            "Includes(x, y)",
            "Feuds(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 621,
        "story_id": 219,
        "context": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "context_fol": [
            "MusicPiece(symphony9)",
            "\u2200x (MusicPiece(x) \u2192 \u2203y (Composer(y) \u2227 Write(y, x)))",
            "Writtenby(symphony9, beethoven)",
            "Premiered(viennaMusicSociety, symphony9)",
            "Orchestra(viennaMusicSociety)",
            "Lead(beethoven, viennaMusicSociety)",
            "\u2200x (Orchestra(x) \u2192 (\u2203y Conductor(y) \u2227 Lead(y, x)))"
        ],
        "question": "Beethoven is a composer.",
        "question_fol": "Composer(beethoven)",
        "answer": "A",
        "predicates_fol": [
            "MusicPiece(x)",
            "Composer(x)",
            "Conductor(x)",
            "Write(x, y)",
            "Writtenby(x, y)",
            "Premiered(x, y)",
            "Orchestra(x)",
            "Lead(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 622,
        "story_id": 219,
        "context": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "context_fol": [
            "MusicPiece(symphony9)",
            "\u2200x (MusicPiece(x) \u2192 \u2203y (Composer(y) \u2227 Write(y, x)))",
            "Writtenby(symphony9, beethoven)",
            "Premiered(viennaMusicSociety, symphony9)",
            "Orchestra(viennaMusicSociety)",
            "Lead(beethoven, viennaMusicSociety)",
            "\u2200x (Orchestra(x) \u2192 (\u2203y Conductor(y) \u2227 Lead(y, x)))"
        ],
        "question": "Some orchestras premiered music pieces.",
        "question_fol": "\u2203x \u2203y (Orchestra(x) \u2227 MusicPiece(y) \u2227 Premiered(x, y))",
        "answer": "A",
        "predicates_fol": [
            "MusicPiece(x)",
            "Composer(x)",
            "Conductor(x)",
            "Write(x, y)",
            "Writtenby(x, y)",
            "Premiered(x, y)",
            "Orchestra(x)",
            "Lead(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 623,
        "story_id": 219,
        "context": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "context_fol": [
            "MusicPiece(symphony9)",
            "\u2200x (MusicPiece(x) \u2192 \u2203y (Composer(y) \u2227 Write(y, x)))",
            "Writtenby(symphony9, beethoven)",
            "Premiered(viennaMusicSociety, symphony9)",
            "Orchestra(viennaMusicSociety)",
            "Lead(beethoven, viennaMusicSociety)",
            "\u2200x (Orchestra(x) \u2192 (\u2203y Conductor(y) \u2227 Lead(y, x)))"
        ],
        "question": "Beethoven is not a conductor.",
        "question_fol": "\u00acConductor(beethoven)",
        "answer": "B",
        "predicates_fol": [
            "MusicPiece(x)",
            "Composer(x)",
            "Conductor(x)",
            "Write(x, y)",
            "Writtenby(x, y)",
            "Premiered(x, y)",
            "Orchestra(x)",
            "Lead(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 927,
        "story_id": 350,
        "context": [
            "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
            "No brutalist buildings that Max adores have interesting geometries.",
            "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles that Max adores are evocative.",
            "All of Kelly Wearstler's design styles that Max adores are dreamy.",
            "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
        ],
        "context_fol": [
            "\u2200x (Adore(max, x) \u2227 ZahaHadid(x) \u2227 DesignStyle(x) \u2192 InterestingGeometry(x))",
            "\u2200x (Adore(max, x) \u2227 BrutalistBuilding(x) \u2192 \u00acInterestingGeometry(x))",
            "\u2200x (Adore(max, x) \u2192 ((ZahaHadid(x) \u2227 DesignStyle(x)) \u2295 (KellyWearstler(x) \u2227 DesignStyle(x)))",
            "\u2200x (Adore(max, x) \u2227 KellyWearstler(x) \u2227 DesignStyle(x) \u2192 Evocative(x))",
            "\u2200x (Adore(max, x) \u2227 KellyWearstler(x) \u2227 DesignStyle(x) \u2192 Dreamy(x))",
            "\u2203x (Adore(max, x) \u2227 Design(x) \u2227 ByMax(x) \u2227 InterestingGeometry(x) \u2192 BrutalistBuilding(x) \u2227 Evocative(x))"
        ],
        "question": "A design by Max is a brutalist building.",
        "question_fol": "\u2203x (Design(x) \u2227 ByMax(x) \u2227 BrutalistBuilding(x))",
        "answer": "C",
        "predicates_fol": [
            "Adore(x, y)",
            "ZahaHadid(x)",
            "DesignStyle(x)",
            "InterestingGeometry(x)",
            "BrutalistBuilding(x)",
            "KellyWearstler(x)",
            "Evocative(x)",
            "Dreamy(x)",
            "Design(x)",
            "ByMax(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 928,
        "story_id": 350,
        "context": [
            "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
            "No brutalist buildings that Max adores have interesting geometries.",
            "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles that Max adores are evocative.",
            "All of Kelly Wearstler's design styles that Max adores are dreamy.",
            "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
        ],
        "context_fol": [
            "\u2200x (Adore(max, x) \u2227 ZahaHadid(x) \u2227 DesignStyle(x) \u2192 InterestingGeometry(x))",
            "\u2200x (Adore(max, x) \u2227 BrutalistBuilding(x) \u2192 \u00acInterestingGeometry(x))",
            "\u2200x (Adore(max, x) \u2192 ((ZahaHadid(x) \u2227 DesignStyle(x)) \u2295 (KellyWearstler(x) \u2227 DesignStyle(x)))",
            "\u2200x (Adore(max, x) \u2227 KellyWearstler(x) \u2227 DesignStyle(x) \u2192 Evocative(x))",
            "\u2200x (Adore(max, x) \u2227 KellyWearstler(x) \u2227 DesignStyle(x) \u2192 Dreamy(x))",
            "\u2203x (Adore(max, x) \u2227 Design(x) \u2227 ByMax(x) \u2227 InterestingGeometry(x) \u2192 BrutalistBuilding(x) \u2227 Evocative(x))"
        ],
        "question": "A design by Max is evocative and dreamy.",
        "question_fol": "\u2203x (Design(x) \u2227 ByMax(x) \u2227 Evocative(x) \u2227 Dreamy(x))",
        "answer": "A",
        "predicates_fol": [
            "Adore(x, y)",
            "ZahaHadid(x)",
            "DesignStyle(x)",
            "InterestingGeometry(x)",
            "BrutalistBuilding(x)",
            "KellyWearstler(x)",
            "Evocative(x)",
            "Dreamy(x)",
            "Design(x)",
            "ByMax(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 929,
        "story_id": 350,
        "context": [
            "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
            "No brutalist buildings that Max adores have interesting geometries.",
            "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles that Max adores are evocative.",
            "All of Kelly Wearstler's design styles that Max adores are dreamy.",
            "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
        ],
        "context_fol": [
            "\u2200x (Adore(max, x) \u2227 ZahaHadid(x) \u2227 DesignStyle(x) \u2192 InterestingGeometry(x))",
            "\u2200x (Adore(max, x) \u2227 BrutalistBuilding(x) \u2192 \u00acInterestingGeometry(x))",
            "\u2200x (Adore(max, x) \u2192 ((ZahaHadid(x) \u2227 DesignStyle(x)) \u2295 (KellyWearstler(x) \u2227 DesignStyle(x)))",
            "\u2200x (Adore(max, x) \u2227 KellyWearstler(x) \u2227 DesignStyle(x) \u2192 Evocative(x))",
            "\u2200x (Adore(max, x) \u2227 KellyWearstler(x) \u2227 DesignStyle(x) \u2192 Dreamy(x))",
            "\u2203x (Adore(max, x) \u2227 Design(x) \u2227 ByMax(x) \u2227 InterestingGeometry(x) \u2192 BrutalistBuilding(x) \u2227 Evocative(x))"
        ],
        "question": "A design by Max is either evocative or dreamy.",
        "question_fol": "\u2203x (Design(x) \u2227 ByMax(x) \u2227 (Evocative(x) \u2295 Dreamy(x)))",
        "answer": "B",
        "predicates_fol": [
            "Adore(x, y)",
            "ZahaHadid(x)",
            "DesignStyle(x)",
            "InterestingGeometry(x)",
            "BrutalistBuilding(x)",
            "KellyWearstler(x)",
            "Evocative(x)",
            "Dreamy(x)",
            "Design(x)",
            "ByMax(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1029,
        "story_id": 385,
        "context": [
            "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
            "Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.",
            "All tennis players at Roland Garros 2022 are either female or male.",
            "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
            "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "Coco Gauff is at Roland Garros 2022."
        ],
        "context_fol": [
            "\u2200x (RankedHighlyBy(x, womensTennisAssociation) \u2192 MostActivePlayerIn(x, majorTennis))",
            "\u2200x (LostTo(x, \u015bwi\u0105tek) \u2227  At(x, rolandGarros2022) \u2192 RankedHighlyBy(x, womensTennisAssociation))",
            "\u2200x (FemaleTennisPlayer(x) \u2227 At(x, rolandGarros2022) \u2192 LostTo(x, \u015bwi\u0105tek) \u2227  At(x, rolandGarros2022))",
            "\u2200x (TennisPlayer(x) \u2227 At(x, rolandGarros2022) \u2192 (Female(x) \u2227 TennisPlayer(x)) \u2295 (Male(x) \u2227 TennisPlayer(x))) ",
            "\u2200x (Male(x) \u2227 TennisPlayer(x) \u2227 At(x, rolandGarros2022) \u2192 LostTo(x, \u015bwi\u0105tek) \u2227 At(x, rolandGarros2022))",
            "RankedHighlyBy(cocoGauff, womensTennisAssociation) \u2228 (LostTo(cocoGauff, \u015bwi\u0105tek) \u2227 LostAt(cocoGauff, rolandGarros2022)) \u2192 \u00ac(Male(cocoGauff) \u2227 TennisPlayer(cocoGauff) \u2227 AtRolandGarros2022(cocoGauff))",
            "TennisPlayer(cocoGauff) \u2227 At(cocoGauff, rolandGarros2022)"
        ],
        "question": "Coco Gauff is among the most active Grand-Slam players.",
        "question_fol": "MostActivePlayerIn(cocoGauff, majorTennis)",
        "answer": "A",
        "predicates_fol": [
            "RankedHighlyBy(x, y)",
            "MostActivePlayerIn(x, y)",
            "LostTo(x, y)",
            "At(x, y)",
            "FemaleTennisPlayer(x)",
            "TennisPlayer(x)",
            "Female(x)",
            "Male(x)",
            "LostAt(x, y)",
            "AtRolandGarros2022(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1030,
        "story_id": 385,
        "context": [
            "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
            "Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.",
            "All tennis players at Roland Garros 2022 are either female or male.",
            "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
            "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "Coco Gauff is at Roland Garros 2022."
        ],
        "context_fol": [
            "\u2200x (RankedHighlyBy(x, womensTennisAssociation) \u2192 MostActivePlayerIn(x, majorTennis))",
            "\u2200x (LostTo(x, \u015bwi\u0105tek) \u2227  At(x, rolandGarros2022) \u2192 RankedHighlyBy(x, womensTennisAssociation))",
            "\u2200x (FemaleTennisPlayer(x) \u2227 At(x, rolandGarros2022) \u2192 LostTo(x, \u015bwi\u0105tek) \u2227  At(x, rolandGarros2022))",
            "\u2200x (TennisPlayer(x) \u2227 At(x, rolandGarros2022) \u2192 (Female(x) \u2227 TennisPlayer(x)) \u2295 (Male(x) \u2227 TennisPlayer(x))) ",
            "\u2200x (Male(x) \u2227 TennisPlayer(x) \u2227 At(x, rolandGarros2022) \u2192 LostTo(x, \u015bwi\u0105tek) \u2227 At(x, rolandGarros2022))",
            "RankedHighlyBy(cocoGauff, womensTennisAssociation) \u2228 (LostTo(cocoGauff, \u015bwi\u0105tek) \u2227 LostAt(cocoGauff, rolandGarros2022)) \u2192 \u00ac(Male(cocoGauff) \u2227 TennisPlayer(cocoGauff) \u2227 AtRolandGarros2022(cocoGauff))",
            "TennisPlayer(cocoGauff) \u2227 At(cocoGauff, rolandGarros2022)"
        ],
        "question": "Coco Gauff has lost to Rafael Nadal.",
        "question_fol": "LostTo(cocoGauff, \u015bwi\u0105tek) \u2227 At(cocoGauff, rolandGarros2022)",
        "answer": "C",
        "predicates_fol": [
            "RankedHighlyBy(x, y)",
            "MostActivePlayerIn(x, y)",
            "LostTo(x, y)",
            "At(x, y)",
            "FemaleTennisPlayer(x)",
            "TennisPlayer(x)",
            "Female(x)",
            "Male(x)",
            "LostAt(x, y)",
            "AtRolandGarros2022(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1031,
        "story_id": 385,
        "context": [
            "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
            "Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.",
            "All tennis players at Roland Garros 2022 are either female or male.",
            "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
            "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "Coco Gauff is at Roland Garros 2022."
        ],
        "context_fol": [
            "\u2200x (RankedHighlyBy(x, womensTennisAssociation) \u2192 MostActivePlayerIn(x, majorTennis))",
            "\u2200x (LostTo(x, \u015bwi\u0105tek) \u2227  At(x, rolandGarros2022) \u2192 RankedHighlyBy(x, womensTennisAssociation))",
            "\u2200x (FemaleTennisPlayer(x) \u2227 At(x, rolandGarros2022) \u2192 LostTo(x, \u015bwi\u0105tek) \u2227  At(x, rolandGarros2022))",
            "\u2200x (TennisPlayer(x) \u2227 At(x, rolandGarros2022) \u2192 (Female(x) \u2227 TennisPlayer(x)) \u2295 (Male(x) \u2227 TennisPlayer(x))) ",
            "\u2200x (Male(x) \u2227 TennisPlayer(x) \u2227 At(x, rolandGarros2022) \u2192 LostTo(x, \u015bwi\u0105tek) \u2227 At(x, rolandGarros2022))",
            "RankedHighlyBy(cocoGauff, womensTennisAssociation) \u2228 (LostTo(cocoGauff, \u015bwi\u0105tek) \u2227 LostAt(cocoGauff, rolandGarros2022)) \u2192 \u00ac(Male(cocoGauff) \u2227 TennisPlayer(cocoGauff) \u2227 AtRolandGarros2022(cocoGauff))",
            "TennisPlayer(cocoGauff) \u2227 At(cocoGauff, rolandGarros2022)"
        ],
        "question": "Coco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis.",
        "question_fol": "\u00ac(LostTo(cocoGauff, \u015bwi\u0105tek) \u2227 At(cocoGauff, rolandGarros2022)) \u2228 \u00acMostActivePlayerIn(cocoGauff, majorTennis)",
        "answer": "B",
        "predicates_fol": [
            "RankedHighlyBy(x, y)",
            "MostActivePlayerIn(x, y)",
            "LostTo(x, y)",
            "At(x, y)",
            "FemaleTennisPlayer(x)",
            "TennisPlayer(x)",
            "Female(x)",
            "Male(x)",
            "LostAt(x, y)",
            "AtRolandGarros2022(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 700,
        "story_id": 256,
        "context": [
            "All cats are mammals.",
            "Some pets are not mammals."
        ],
        "context_fol": [
            "\u2200x (Cat(x) \u2192 Mammal(x))",
            "\u2203x (Pet(x) \u2227 \u00acMammal(x))"
        ],
        "question": "No pets are cats.",
        "question_fol": "\u2200x (Pet(x) \u2192 \u00acCat(x))",
        "answer": "C",
        "predicates_fol": [
            "Cat(x)",
            "Mammal(x)",
            "Pet(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 456,
        "story_id": 159,
        "context": [
            "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
            "All students who want to have a long vacation have summer as their favorite season.",
            "Emma's favorite season is summer.",
            "Mia's favorite season is not the same as Emma's. ",
            "James wants to have a long vacation."
        ],
        "context_fol": [
            "Season(spring) \u2228 Season(summer) \u2228 Season(fall) \u2228 Season(winter) \u2227 (Season(spring) \u2192 \u00acSeason(summer) \u2227 \u00acSeason(fall) \u2227 \u00acSeason(winter)) \u2227 (Season(summer) \u2192 \u00acSeason(spring) \u2227 \u00acSeason(fall) \u2227 \u00acSeason(winter)) \u2227 (Season(fall) \u2192 \u00acSeason(spring) \u2227 \u00acSeason(summer) \u2227 \u00acSeason(winter)) \u2227 (Season(winter) \u2192 \u00acSeason(spring) \u2227 \u00acSeason(summer) \u2227 \u00acSeason(fall))",
            "\u2200x (Want(x, longvacation) \u2192 Favorite(x, summer))",
            "Favorite(emma, summer)",
            "\u2200x \u2200y (Season(x) \u2227 Season(y) \u2227 Favorite(mia, x) \u2227 Favorite(emma, y) \u2192 \u00ac(x=y))",
            "Want(james, longVacation)"
        ],
        "question": "James's favorite season is summer.",
        "question_fol": "Favorite(james, summer)",
        "answer": "A",
        "predicates_fol": [
            "Season(x)",
            "Want(x, y)",
            "Favorite(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 457,
        "story_id": 159,
        "context": [
            "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
            "All students who want to have a long vacation have summer as their favorite season.",
            "Emma's favorite season is summer.",
            "Mia's favorite season is not the same as Emma's. ",
            "James wants to have a long vacation."
        ],
        "context_fol": [
            "Season(spring) \u2228 Season(summer) \u2228 Season(fall) \u2228 Season(winter) \u2227 (Season(spring) \u2192 \u00acSeason(summer) \u2227 \u00acSeason(fall) \u2227 \u00acSeason(winter)) \u2227 (Season(summer) \u2192 \u00acSeason(spring) \u2227 \u00acSeason(fall) \u2227 \u00acSeason(winter)) \u2227 (Season(fall) \u2192 \u00acSeason(spring) \u2227 \u00acSeason(summer) \u2227 \u00acSeason(winter)) \u2227 (Season(winter) \u2192 \u00acSeason(spring) \u2227 \u00acSeason(summer) \u2227 \u00acSeason(fall))",
            "\u2200x (Want(x, longvacation) \u2192 Favorite(x, summer))",
            "Favorite(emma, summer)",
            "\u2200x \u2200y (Season(x) \u2227 Season(y) \u2227 Favorite(mia, x) \u2227 Favorite(emma, y) \u2192 \u00ac(x=y))",
            "Want(james, longVacation)"
        ],
        "question": "Mia's favorite season is spring.",
        "question_fol": "Favorite(mia, spring)",
        "answer": "C",
        "predicates_fol": [
            "Season(x)",
            "Want(x, y)",
            "Favorite(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 904,
        "story_id": 343,
        "context": [
            "No digital media are analog.",
            "Every printed text is analog media.",
            "All streaming services are digital media.",
            "If an object is a hardcover book, then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "context_fol": [
            "\u2200x (DigitalMedia(x) \u2192 \u00acAnalogMedia(x))",
            "\u2200x (PrintedText(x) \u2192 AnalogMedia(x))",
            "\u2200x (StreamingService(x) \u2192 DigitalMedia(x))",
            "\u2200x (HardcoverBook(x) \u2192 PrintedText(x))",
            "StreamingService(1984) \u2192 HardcoverBook(1984)"
        ],
        "question": "1984 is printed text.",
        "question_fol": "PrintedText(y1984)",
        "answer": "C",
        "predicates_fol": [
            "DigitalMedia(x)",
            "AnalogMedia(x)",
            "PrintedText(x)",
            "StreamingService(x)",
            "HardcoverBook(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 905,
        "story_id": 343,
        "context": [
            "No digital media are analog.",
            "Every printed text is analog media.",
            "All streaming services are digital media.",
            "If an object is a hardcover book, then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "context_fol": [
            "\u2200x (DigitalMedia(x) \u2192 \u00acAnalogMedia(x))",
            "\u2200x (PrintedText(x) \u2192 AnalogMedia(x))",
            "\u2200x (StreamingService(x) \u2192 DigitalMedia(x))",
            "\u2200x (HardcoverBook(x) \u2192 PrintedText(x))",
            "StreamingService(1984) \u2192 HardcoverBook(1984)"
        ],
        "question": "1984 is a streaming service.",
        "question_fol": "StreamingService(y1984)",
        "answer": "B",
        "predicates_fol": [
            "DigitalMedia(x)",
            "AnalogMedia(x)",
            "PrintedText(x)",
            "StreamingService(x)",
            "HardcoverBook(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 906,
        "story_id": 343,
        "context": [
            "No digital media are analog.",
            "Every printed text is analog media.",
            "All streaming services are digital media.",
            "If an object is a hardcover book, then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "context_fol": [
            "\u2200x (DigitalMedia(x) \u2192 \u00acAnalogMedia(x))",
            "\u2200x (PrintedText(x) \u2192 AnalogMedia(x))",
            "\u2200x (StreamingService(x) \u2192 DigitalMedia(x))",
            "\u2200x (HardcoverBook(x) \u2192 PrintedText(x))",
            "StreamingService(1984) \u2192 HardcoverBook(1984)"
        ],
        "question": "1984 is not a streaming service.",
        "question_fol": "\u00acStreamingService(y1984)",
        "answer": "A",
        "predicates_fol": [
            "DigitalMedia(x)",
            "AnalogMedia(x)",
            "PrintedText(x)",
            "StreamingService(x)",
            "HardcoverBook(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 608,
        "story_id": 213,
        "context": [
            "All Romance languages are Indo-European languages.",
            "Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "context_fol": [
            "\u2200x (RomanceLanguage(x) \u2192 IndoEuropeanLanguage(x))",
            "\u2200x (RomanceLanguage(x) \u2192 MemberOf(x, languageFamily))",
            "\u2200x \u2200y \u2200z ((MemberOf(x, z) \u2227 MemberOf(y, z)) \u2192 (Related(x, y) \u2227 Related(y, x)))",
            "RomanceLanguage(french) \u2227 RomanceLanguage(spanish)",
            "Related(german, spanish)",
            "\u2200x (Language(x) \u2192 \u00acRelated(basque, x))"
        ],
        "question": "Basque is a Romance language.",
        "question_fol": "RomanceLanguage(basque)",
        "answer": "B",
        "predicates_fol": [
            "RomanceLanguage(x)",
            "IndoEuropeanLanguage(x)",
            "MemberOf(x, y)",
            "Related(x, y)",
            "Language(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 609,
        "story_id": 213,
        "context": [
            "All Romance languages are Indo-European languages.",
            "Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "context_fol": [
            "\u2200x (RomanceLanguage(x) \u2192 IndoEuropeanLanguage(x))",
            "\u2200x (RomanceLanguage(x) \u2192 MemberOf(x, languageFamily))",
            "\u2200x \u2200y \u2200z ((MemberOf(x, z) \u2227 MemberOf(y, z)) \u2192 (Related(x, y) \u2227 Related(y, x)))",
            "RomanceLanguage(french) \u2227 RomanceLanguage(spanish)",
            "Related(german, spanish)",
            "\u2200x (Language(x) \u2192 \u00acRelated(basque, x))"
        ],
        "question": "German is a Romance language.",
        "question_fol": "RomanceLanguage(german)",
        "answer": "C",
        "predicates_fol": [
            "RomanceLanguage(x)",
            "IndoEuropeanLanguage(x)",
            "MemberOf(x, y)",
            "Related(x, y)",
            "Language(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 610,
        "story_id": 213,
        "context": [
            "All Romance languages are Indo-European languages.",
            "Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "context_fol": [
            "\u2200x (RomanceLanguage(x) \u2192 IndoEuropeanLanguage(x))",
            "\u2200x (RomanceLanguage(x) \u2192 MemberOf(x, languageFamily))",
            "\u2200x \u2200y \u2200z ((MemberOf(x, z) \u2227 MemberOf(y, z)) \u2192 (Related(x, y) \u2227 Related(y, x)))",
            "RomanceLanguage(french) \u2227 RomanceLanguage(spanish)",
            "Related(german, spanish)",
            "\u2200x (Language(x) \u2192 \u00acRelated(basque, x))"
        ],
        "question": "French is an Indo-European language.",
        "question_fol": "IndoEuropeanLanguage(french)",
        "answer": "A",
        "predicates_fol": [
            "RomanceLanguage(x)",
            "IndoEuropeanLanguage(x)",
            "MemberOf(x, y)",
            "Related(x, y)",
            "Language(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 240,
        "story_id": 79,
        "context": [
            "Robert Lewandowski is a striker.",
            "Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "If a player leaves a team they no longer play for that team."
        ],
        "context_fol": [
            "Striker(robertLewandowski)",
            "\u2200x (Striker(x) \u2192 SoccerPlayer(x))",
            "Left(robertLewandowski, bayernMunchen)",
            "\u2200x \u2200y (Left(x, y) \u2192 \u00acPlaysFor(x, y))"
        ],
        "question": "Robert Lewandowski is a soccer player.",
        "question_fol": "SoccerPlayer(robertLewandowski)",
        "answer": "A",
        "predicates_fol": [
            "Striker(x)",
            "SoccerPlayer(x)",
            "Left(x, y)",
            "PlaysFor(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 241,
        "story_id": 79,
        "context": [
            "Robert Lewandowski is a striker.",
            "Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "If a player leaves a team they no longer play for that team."
        ],
        "context_fol": [
            "Striker(robertLewandowski)",
            "\u2200x (Striker(x) \u2192 SoccerPlayer(x))",
            "Left(robertLewandowski, bayernMunchen)",
            "\u2200x \u2200y (Left(x, y) \u2192 \u00acPlaysFor(x, y))"
        ],
        "question": "Robert Lewandowski plays for Bayern Munchen.",
        "question_fol": "PlaysFor(robertLewandowski, bayernMunchen)",
        "answer": "B",
        "predicates_fol": [
            "Striker(x)",
            "SoccerPlayer(x)",
            "Left(x, y)",
            "PlaysFor(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 242,
        "story_id": 79,
        "context": [
            "Robert Lewandowski is a striker.",
            "Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "If a player leaves a team they no longer play for that team."
        ],
        "context_fol": [
            "Striker(robertLewandowski)",
            "\u2200x (Striker(x) \u2192 SoccerPlayer(x))",
            "Left(robertLewandowski, bayernMunchen)",
            "\u2200x \u2200y (Left(x, y) \u2192 \u00acPlaysFor(x, y))"
        ],
        "question": "Robert Lewandowski is a star.",
        "question_fol": "SoccerStar(robertLewandowski)",
        "answer": "C",
        "predicates_fol": [
            "Striker(x)",
            "SoccerPlayer(x)",
            "Left(x, y)",
            "PlaysFor(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 4,
        "story_id": 2,
        "context": [
            "Billings is a city in the state of Montana in U.S.",
            "The state of Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state in U.S.",
            "The city of St Pierre is not in the state of Montana.",
            "Any city in Butte is not in St Pierre.",
            "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
        ],
        "context_fol": [
            "City(billings) \u2227 In(billings, montana)",
            "City(butte) \u2227 In(butte, montana) \u2227 City(helena) \u2227 In(helena, montana) \u2227 City(missoula) \u2227 In(missoula, montana)",
            "\u2203x (City(whitesulphursprings) \u2227 In(whitesulphursprings, x) \u2227 City(butte) \u2227 In(butte, x))",
            "City(pierre) \u2227 \u00ac(In(pierre, montana))",
            "\u2200x ((City(x) \u2227 City(butte) \u2227 In(x, butte)) \u2192 \u00ac(In(x, pierre)))",
            "\u2200x \u2203y ((City(x) \u2227 (In(x, y) \u2227 \u00ac(x=bristol) \u2227 \u00ac(x=texarkana) \u2227 \u00ac(x=texhoma) \u2227 \u00ac(x=unionCity)) \u2192 \u00ac\u2203z (\u00ac(z=y) \u2227 In(x, z)))"
        ],
        "question": "Butte and St Pierre are in the same state.",
        "question_fol": "\u2203x (In(butte, x) \u2227 In(stPierre, x))",
        "answer": "B",
        "predicates_fol": [
            "City(x)",
            "In(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 5,
        "story_id": 2,
        "context": [
            "Billings is a city in the state of Montana in U.S.",
            "The state of Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state in U.S.",
            "The city of St Pierre is not in the state of Montana.",
            "Any city in Butte is not in St Pierre.",
            "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
        ],
        "context_fol": [
            "City(billings) \u2227 In(billings, montana)",
            "City(butte) \u2227 In(butte, montana) \u2227 City(helena) \u2227 In(helena, montana) \u2227 City(missoula) \u2227 In(missoula, montana)",
            "\u2203x (City(whitesulphursprings) \u2227 In(whitesulphursprings, x) \u2227 City(butte) \u2227 In(butte, x))",
            "City(pierre) \u2227 \u00ac(In(pierre, montana))",
            "\u2200x ((City(x) \u2227 City(butte) \u2227 In(x, butte)) \u2192 \u00ac(In(x, pierre)))",
            "\u2200x \u2203y ((City(x) \u2227 (In(x, y) \u2227 \u00ac(x=bristol) \u2227 \u00ac(x=texarkana) \u2227 \u00ac(x=texhoma) \u2227 \u00ac(x=unionCity)) \u2192 \u00ac\u2203z (\u00ac(z=y) \u2227 In(x, z)))"
        ],
        "question": "St Pierre and Bismarck are in the same state.",
        "question_fol": "\u2203x (City(pierre) \u2227 In(pierre, x) \u2227 City(bismarck) \u2227 In(bismarck, x))",
        "answer": "C",
        "predicates_fol": [
            "City(x)",
            "In(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 6,
        "story_id": 2,
        "context": [
            "Billings is a city in the state of Montana in U.S.",
            "The state of Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state in U.S.",
            "The city of St Pierre is not in the state of Montana.",
            "Any city in Butte is not in St Pierre.",
            "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
        ],
        "context_fol": [
            "City(billings) \u2227 In(billings, montana)",
            "City(butte) \u2227 In(butte, montana) \u2227 City(helena) \u2227 In(helena, montana) \u2227 City(missoula) \u2227 In(missoula, montana)",
            "\u2203x (City(whitesulphursprings) \u2227 In(whitesulphursprings, x) \u2227 City(butte) \u2227 In(butte, x))",
            "City(pierre) \u2227 \u00ac(In(pierre, montana))",
            "\u2200x ((City(x) \u2227 City(butte) \u2227 In(x, butte)) \u2192 \u00ac(In(x, pierre)))",
            "\u2200x \u2203y ((City(x) \u2227 (In(x, y) \u2227 \u00ac(x=bristol) \u2227 \u00ac(x=texarkana) \u2227 \u00ac(x=texhoma) \u2227 \u00ac(x=unionCity)) \u2192 \u00ac\u2203z (\u00ac(z=y) \u2227 In(x, z)))"
        ],
        "question": "Montana is home to the city of Missoula.",
        "question_fol": "City(missoula) \u2227 In(missoula, montana)",
        "answer": "A",
        "predicates_fol": [
            "City(x)",
            "In(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 548,
        "story_id": 192,
        "context": [
            "International students in the US have either an F1 visa or a J1 visa.",
            "An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
            "Mike is an international student.",
            "Mike needs to apply for CPT if he wants to work in the US."
        ],
        "context_fol": [
            "\u2200x (InternationalStudent(x) \u2227 In(x, unitedStates) \u2192 F1Visa(x) \u2295 J1Visa(x))",
            "\u2200x (InternationalStudent(x) \u2227 In(x, unitedStates) \u2227 F1Visa(x) \u2227 WantToWorkIn(x, unitedStates) \u2192 Apply(x, cpt) \u2228 Apply(x, opt))",
            "InternationalStudent(mike)",
            "WantToWorkIn(x, unitedStates) \u2192 Apply(mike, cpt)"
        ],
        "question": "Mike has an F1 visa.",
        "question_fol": "F1Visa(mike)",
        "answer": "C",
        "predicates_fol": [
            "InternationalStudent(x)",
            "In(x, y)",
            "F1Visa(x)",
            "J1Visa(x)",
            "WantToWorkIn(x, y)",
            "Apply(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 549,
        "story_id": 192,
        "context": [
            "International students in the US have either an F1 visa or a J1 visa.",
            "An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
            "Mike is an international student.",
            "Mike needs to apply for CPT if he wants to work in the US."
        ],
        "context_fol": [
            "\u2200x (InternationalStudent(x) \u2227 In(x, unitedStates) \u2192 F1Visa(x) \u2295 J1Visa(x))",
            "\u2200x (InternationalStudent(x) \u2227 In(x, unitedStates) \u2227 F1Visa(x) \u2227 WantToWorkIn(x, unitedStates) \u2192 Apply(x, cpt) \u2228 Apply(x, opt))",
            "InternationalStudent(mike)",
            "WantToWorkIn(x, unitedStates) \u2192 Apply(mike, cpt)"
        ],
        "question": "Mike has a J1 visa.",
        "question_fol": "J1Visa(mike)",
        "answer": "C",
        "predicates_fol": [
            "InternationalStudent(x)",
            "In(x, y)",
            "F1Visa(x)",
            "J1Visa(x)",
            "WantToWorkIn(x, y)",
            "Apply(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1271,
        "story_id": 442,
        "context": [
            "All Brown Swiss cattle are cows.",
            "Some pets are Brown Swiss Cattle.",
            "All cows are domesticated animals.",
            "Alligators are not domesticated animals.",
            "Ted is an alligator."
        ],
        "context_fol": [
            "\u2200x (BrownSwissCattle(x) \u2192 Cow(x))",
            "\u2203x (Pet(x) \u2227 BrownSwissCattle(x))",
            "\u2200x (Cow(x) \u2192 DomesticatedAnimal(x))",
            "\u2200x (Aligator(x) \u2192 \u00acDomesticatedAnimal(x))",
            "Aligator(ted)"
        ],
        "question": "Ted is a pet.",
        "question_fol": "Pet(ted)",
        "answer": "C",
        "predicates_fol": [
            "BrownSwissCattle(x)",
            "Cow(x)",
            "Pet(x)",
            "DomesticatedAnimal(x)",
            "Aligator(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1272,
        "story_id": 442,
        "context": [
            "All Brown Swiss cattle are cows.",
            "Some pets are Brown Swiss Cattle.",
            "All cows are domesticated animals.",
            "Alligators are not domesticated animals.",
            "Ted is an alligator."
        ],
        "context_fol": [
            "\u2200x (BrownSwissCattle(x) \u2192 Cow(x))",
            "\u2203x (Pet(x) \u2227 BrownSwissCattle(x))",
            "\u2200x (Cow(x) \u2192 DomesticatedAnimal(x))",
            "\u2200x (Aligator(x) \u2192 \u00acDomesticatedAnimal(x))",
            "Aligator(ted)"
        ],
        "question": "Ted is a pet and Brown Swiss cattle",
        "question_fol": "Pet(ted) \u2227 BrownSwissCattle(ted)",
        "answer": "B",
        "predicates_fol": [
            "BrownSwissCattle(x)",
            "Cow(x)",
            "Pet(x)",
            "DomesticatedAnimal(x)",
            "Aligator(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1273,
        "story_id": 442,
        "context": [
            "All Brown Swiss cattle are cows.",
            "Some pets are Brown Swiss Cattle.",
            "All cows are domesticated animals.",
            "Alligators are not domesticated animals.",
            "Ted is an alligator."
        ],
        "context_fol": [
            "\u2200x (BrownSwissCattle(x) \u2192 Cow(x))",
            "\u2203x (Pet(x) \u2227 BrownSwissCattle(x))",
            "\u2200x (Cow(x) \u2192 DomesticatedAnimal(x))",
            "\u2200x (Aligator(x) \u2192 \u00acDomesticatedAnimal(x))",
            "Aligator(ted)"
        ],
        "question": "If Ted is a Brown Swiss cattle, then Ted is not a pet.",
        "question_fol": "BrownSwissCattle(ted) \u2192 \u00acPet(ted)",
        "answer": "A",
        "predicates_fol": [
            "BrownSwissCattle(x)",
            "Cow(x)",
            "Pet(x)",
            "DomesticatedAnimal(x)",
            "Aligator(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 663,
        "story_id": 234,
        "context": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "context_fol": [
            "PrivateIvyLeagueResearchUniversity(yaleUniversity)",
            "MovedTo(yaleUniversity, newHaven) \u2227 MovedIn(yaleUniversity, year1716)",
            "ValuedAt(yaleUniversitysEndowment, 42point3billion)",
            "\u2200x (ResidentialCollege(x) \u2192 At(x, yale) \u2227 (BenjaminFranklinCollege(x) \u2295 BerkleyCollege(x) \u2295 BranfordCollege(x) \u2295 DavenportCollege(x) \u2295 EzraStilesCollege(x) \u2295 GraceHopperCollege(x) \u2295 JonathanEdwardsCollege(x) \u2295 MorseCollege(x) \u2295 PauliMurrayCollege(x) \u2295 PiersonCollege(x) \u2295 SaybrookCollege(x) \u2295 SillimanCollege(x) \u2295 TimothyDwightCollege(x) \u2295 TrumbullCollege(x)))"
        ],
        "question": "A private Ivy League research university moved to New Haven.",
        "question_fol": "\u2203x (PrivateIvyLeagueResearchUniversity(x) \u2227 MovedTo(x, newHaven))",
        "answer": "A",
        "predicates_fol": [
            "PrivateIvyLeagueResearchUniversity(x)",
            "MovedTo(x, y)",
            "MovedIn(x, y)",
            "ValuedAt(x, y)",
            "ResidentialCollege(x)",
            "At(x, y)",
            "BenjaminFranklinCollege(x)",
            "BerkleyCollege(x)",
            "BranfordCollege(x)",
            "DavenportCollege(x)",
            "EzraStilesCollege(x)",
            "GraceHopperCollege(x)",
            "JonathanEdwardsCollege(x)",
            "MorseCollege(x)",
            "PauliMurrayCollege(x)",
            "PiersonCollege(x)",
            "SaybrookCollege(x)",
            "SillimanCollege(x)",
            "TimothyDwightCollege(x)",
            "TrumbullCollege(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 664,
        "story_id": 234,
        "context": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "context_fol": [
            "PrivateIvyLeagueResearchUniversity(yaleUniversity)",
            "MovedTo(yaleUniversity, newHaven) \u2227 MovedIn(yaleUniversity, year1716)",
            "ValuedAt(yaleUniversitysEndowment, 42point3billion)",
            "\u2200x (ResidentialCollege(x) \u2192 At(x, yale) \u2227 (BenjaminFranklinCollege(x) \u2295 BerkleyCollege(x) \u2295 BranfordCollege(x) \u2295 DavenportCollege(x) \u2295 EzraStilesCollege(x) \u2295 GraceHopperCollege(x) \u2295 JonathanEdwardsCollege(x) \u2295 MorseCollege(x) \u2295 PauliMurrayCollege(x) \u2295 PiersonCollege(x) \u2295 SaybrookCollege(x) \u2295 SillimanCollege(x) \u2295 TimothyDwightCollege(x) \u2295 TrumbullCollege(x)))"
        ],
        "question": "Yale University has the largest university endowment of any educational institution.",
        "question_fol": "LargestUniversityEndowmentOf(yale, anyEducationalInstitution)",
        "answer": "C",
        "predicates_fol": [
            "PrivateIvyLeagueResearchUniversity(x)",
            "MovedTo(x, y)",
            "MovedIn(x, y)",
            "ValuedAt(x, y)",
            "ResidentialCollege(x)",
            "At(x, y)",
            "BenjaminFranklinCollege(x)",
            "BerkleyCollege(x)",
            "BranfordCollege(x)",
            "DavenportCollege(x)",
            "EzraStilesCollege(x)",
            "GraceHopperCollege(x)",
            "JonathanEdwardsCollege(x)",
            "MorseCollege(x)",
            "PauliMurrayCollege(x)",
            "PiersonCollege(x)",
            "SaybrookCollege(x)",
            "SillimanCollege(x)",
            "TimothyDwightCollege(x)",
            "TrumbullCollege(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 665,
        "story_id": 234,
        "context": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "context_fol": [
            "PrivateIvyLeagueResearchUniversity(yaleUniversity)",
            "MovedTo(yaleUniversity, newHaven) \u2227 MovedIn(yaleUniversity, year1716)",
            "ValuedAt(yaleUniversitysEndowment, 42point3billion)",
            "\u2200x (ResidentialCollege(x) \u2192 At(x, yale) \u2227 (BenjaminFranklinCollege(x) \u2295 BerkleyCollege(x) \u2295 BranfordCollege(x) \u2295 DavenportCollege(x) \u2295 EzraStilesCollege(x) \u2295 GraceHopperCollege(x) \u2295 JonathanEdwardsCollege(x) \u2295 MorseCollege(x) \u2295 PauliMurrayCollege(x) \u2295 PiersonCollege(x) \u2295 SaybrookCollege(x) \u2295 SillimanCollege(x) \u2295 TimothyDwightCollege(x) \u2295 TrumbullCollege(x)))"
        ],
        "question": "Pierson College is a residential college at Yale.",
        "question_fol": "ResidentialCollege(piersonCollege) \u2227 At(piersonCollege, yale)",
        "answer": "A",
        "predicates_fol": [
            "PrivateIvyLeagueResearchUniversity(x)",
            "MovedTo(x, y)",
            "MovedIn(x, y)",
            "ValuedAt(x, y)",
            "ResidentialCollege(x)",
            "At(x, y)",
            "BenjaminFranklinCollege(x)",
            "BerkleyCollege(x)",
            "BranfordCollege(x)",
            "DavenportCollege(x)",
            "EzraStilesCollege(x)",
            "GraceHopperCollege(x)",
            "JonathanEdwardsCollege(x)",
            "MorseCollege(x)",
            "PauliMurrayCollege(x)",
            "PiersonCollege(x)",
            "SaybrookCollege(x)",
            "SillimanCollege(x)",
            "TimothyDwightCollege(x)",
            "TrumbullCollege(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 360,
        "story_id": 120,
        "context": [
            "Badults is a British Sitcom series starring members of Pappy's.",
            "Badults was piloted in July 2013 on BBC Three.",
            "The Working title \"The Secret Dude Society\" was used for Badults.",
            "Andrew Collins was the script editor for Badults."
        ],
        "context_fol": [
            "\u2203x (BritishSitcom(badults) \u2227 Series(badults) \u2227 MemberOf(x, pappys) \u2227 Starring(badults, x))",
            "PilotedIn(badults, july2013) \u2227 PilotedOn(badults, bBCThree)",
            "WorkingTitle(theSecretDudeSociety, badults) \u2227 UsedFor(theSecretDudeSociety, badults)",
            "ScriptEditorFor(andrewCollins, badults)"
        ],
        "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
        "question_fol": "\u2203x (ScriptEditorFor(andrewCollins, x) \u2227 Series(x) \u2227 WorkingTitle(theSecretDudeSociety, x))",
        "answer": "A",
        "predicates_fol": [
            "BritishSitcom(x)",
            "Series(x)",
            "MemberOf(x, y)",
            "Starring(x, y)",
            "PilotedIn(x, y)",
            "PilotedOn(x, y)",
            "WorkingTitle(x, y)",
            "UsedFor(x, y)",
            "ScriptEditorFor(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 361,
        "story_id": 120,
        "context": [
            "Badults is a British Sitcom series starring members of Pappy's.",
            "Badults was piloted in July 2013 on BBC Three.",
            "The Working title \"The Secret Dude Society\" was used for Badults.",
            "Andrew Collins was the script editor for Badults."
        ],
        "context_fol": [
            "\u2203x (BritishSitcom(badults) \u2227 Series(badults) \u2227 MemberOf(x, pappys) \u2227 Starring(badults, x))",
            "PilotedIn(badults, july2013) \u2227 PilotedOn(badults, bBCThree)",
            "WorkingTitle(theSecretDudeSociety, badults) \u2227 UsedFor(theSecretDudeSociety, badults)",
            "ScriptEditorFor(andrewCollins, badults)"
        ],
        "question": "No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.",
        "question_fol": "\u2200x \u2200y (MemberOf(x, pappys) \u2227 Starring(y, x) \u2192 \u00ac(PilotedOn(y, bBCTwo) \u2228 PilotedOn(y, bBCThree)))",
        "answer": "B",
        "predicates_fol": [
            "BritishSitcom(x)",
            "Series(x)",
            "MemberOf(x, y)",
            "Starring(x, y)",
            "PilotedIn(x, y)",
            "PilotedOn(x, y)",
            "WorkingTitle(x, y)",
            "UsedFor(x, y)",
            "ScriptEditorFor(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 819,
        "story_id": 322,
        "context": [
            "All growth stocks are bought to earn profits from rapid price appreciation.",
            "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
            "Some stocks are growth stocks.",
            "All mature stocks are suitable for a retirement fund.",
            "KO is a mature stock."
        ],
        "context_fol": [
            "\u2200x (GrowthStock(x) \u2192 BoughtToEarnProfitFrom(x, rapidPriceAppreciation))",
            "\u2200x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) \u2192 \u00acSuitableFor(x, retirementFund)) ",
            "\u2203x (Stock(x) \u2227 GrowthStock(x))",
            "\u2200x (MatureStock(x) \u2192 SuitableFor(x, retirementFund))",
            "MatureStock(kO)"
        ],
        "question": "KO is a stock.",
        "question_fol": "Stock(kO)",
        "answer": "C",
        "predicates_fol": [
            "GrowthStock(x)",
            "BoughtToEarnProfitFrom(x, y)",
            "SuitableFor(x, y)",
            "Stock(x)",
            "MatureStock(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 820,
        "story_id": 322,
        "context": [
            "All growth stocks are bought to earn profits from rapid price appreciation.",
            "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
            "Some stocks are growth stocks.",
            "All mature stocks are suitable for a retirement fund.",
            "KO is a mature stock."
        ],
        "context_fol": [
            "\u2200x (GrowthStock(x) \u2192 BoughtToEarnProfitFrom(x, rapidPriceAppreciation))",
            "\u2200x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) \u2192 \u00acSuitableFor(x, retirementFund)) ",
            "\u2203x (Stock(x) \u2227 GrowthStock(x))",
            "\u2200x (MatureStock(x) \u2192 SuitableFor(x, retirementFund))",
            "MatureStock(kO)"
        ],
        "question": "KO is a stock and a growth stock.",
        "question_fol": "\u00acGrowthStock(kO)",
        "answer": "B",
        "predicates_fol": [
            "GrowthStock(x)",
            "BoughtToEarnProfitFrom(x, y)",
            "SuitableFor(x, y)",
            "Stock(x)",
            "MatureStock(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 821,
        "story_id": 322,
        "context": [
            "All growth stocks are bought to earn profits from rapid price appreciation.",
            "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
            "Some stocks are growth stocks.",
            "All mature stocks are suitable for a retirement fund.",
            "KO is a mature stock."
        ],
        "context_fol": [
            "\u2200x (GrowthStock(x) \u2192 BoughtToEarnProfitFrom(x, rapidPriceAppreciation))",
            "\u2200x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) \u2192 \u00acSuitableFor(x, retirementFund)) ",
            "\u2203x (Stock(x) \u2227 GrowthStock(x))",
            "\u2200x (MatureStock(x) \u2192 SuitableFor(x, retirementFund))",
            "MatureStock(kO)"
        ],
        "question": "If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.",
        "question_fol": "GrowthStock(kO) \u2228 BoughtToEarnProfitFrom(kO, earnProfit, rapidPriceAppreciation) \u2192 \u00acStock(kO) \u2227 \u00acBoughtToEarnProfitFrom(kO, rapidPriceAppreciation)",
        "answer": "A",
        "predicates_fol": [
            "GrowthStock(x)",
            "BoughtToEarnProfitFrom(x, y)",
            "SuitableFor(x, y)",
            "Stock(x)",
            "MatureStock(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 253,
        "story_id": 83,
        "context": [
            "All vehicle registration plates in Istanbul begin with the number 34.",
            "Plates that do not begin with the number 34 are not from Istanbul. ",
            "Joe's vehicle registration plate is from Istanbul. ",
            "Tom's license plate begins with the number 35. ",
            "If a license plate begins with the number 35, then it does not begin with the number 34."
        ],
        "context_fol": [
            "\u2200x (VehicleRegistrationPlateIn(x, istanbul) \u2192 BeginWith(x, num34))",
            "\u2200x (\u00acBeginWith(x, num34) \u2192 \u00acFromIstanbul(x))",
            "\u2203x (Owns(joe, x) \u2227 VehicleRegistrationPlateIn(x, istanbul))",
            "\u2203x (Owns(tom, x) \u2227 BeginWith(x, num35))",
            "\u2200x (BeginWith(x, num35) \u2192 \u00acBeginWith(x, num34))"
        ],
        "question": "Joe's license plate begins with the number 34.",
        "question_fol": "\u2203x (Owns(joe, x) \u2227 BeginWith(x, num34))",
        "answer": "A",
        "predicates_fol": [
            "VehicleRegistrationPlateIn(x, y)",
            "BeginWith(x, y)",
            "FromIstanbul(x)",
            "Owns(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 254,
        "story_id": 83,
        "context": [
            "All vehicle registration plates in Istanbul begin with the number 34.",
            "Plates that do not begin with the number 34 are not from Istanbul. ",
            "Joe's vehicle registration plate is from Istanbul. ",
            "Tom's license plate begins with the number 35. ",
            "If a license plate begins with the number 35, then it does not begin with the number 34."
        ],
        "context_fol": [
            "\u2200x (VehicleRegistrationPlateIn(x, istanbul) \u2192 BeginWith(x, num34))",
            "\u2200x (\u00acBeginWith(x, num34) \u2192 \u00acFromIstanbul(x))",
            "\u2203x (Owns(joe, x) \u2227 VehicleRegistrationPlateIn(x, istanbul))",
            "\u2203x (Owns(tom, x) \u2227 BeginWith(x, num35))",
            "\u2200x (BeginWith(x, num35) \u2192 \u00acBeginWith(x, num34))"
        ],
        "question": "Tom's license plate is from Istanbul.",
        "question_fol": "\u2203x (Owns(tom, x) \u2227 VehicleRegistrationPlateIn(x, istanbul))",
        "answer": "B",
        "predicates_fol": [
            "VehicleRegistrationPlateIn(x, y)",
            "BeginWith(x, y)",
            "FromIstanbul(x)",
            "Owns(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 979,
        "story_id": 368,
        "context": [
            "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
            "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "Hannah is at Mary's school.",
            "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "context_fol": [
            "\u2200x (At(x, marysSchool) \u2227 WorkIn(x, studentJob, campus) \u2192 NeedToEarnMoneyToHelpPayFor(x, collegeTuition))",
            "\u2200x (At(x, marysSchool) \u2227 OrderFrequently(x, takeout) \u2192 WorkIn(x, studentJob, campus))",
            "\u2200x (At(x, marysSchool) \u2227 (OrderFrequently(x, takeout) \u2228 Enjoy(x, diningHallMeal)))",
            "\u2200x (At(x, marysSchool) \u2227 Enjoy(x, diningHallMeal) \u2192 \u00acPickyEater(x))",
            "\u2200x (At(x, marysSchool) \u2227 Enjoy(x, diningHallMeal) \u2192 Spend(x, aLotOfTime, eating) \u2227 Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))",
            "At(hannah, marysSchool)",
            "(WorkIn(hannah, studentJob, campus) \u2227 NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) \u2192 \u00ac(PickyEater(hannah) \u2228 NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition))"
        ],
        "question": "Hannah needs to earn money to help pay for her college tuition.",
        "question_fol": "NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition)",
        "answer": "C",
        "predicates_fol": [
            "At(x, y)",
            "WorkIn(x, y)",
            "NeedToEarnMoneyToHelpPayFor(x, y)",
            "OrderFrequently(x, y)",
            "Enjoy(x, y)",
            "PickyEater(x)",
            "Spend(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 980,
        "story_id": 368,
        "context": [
            "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
            "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "Hannah is at Mary's school.",
            "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "context_fol": [
            "\u2200x (At(x, marysSchool) \u2227 WorkIn(x, studentJob, campus) \u2192 NeedToEarnMoneyToHelpPayFor(x, collegeTuition))",
            "\u2200x (At(x, marysSchool) \u2227 OrderFrequently(x, takeout) \u2192 WorkIn(x, studentJob, campus))",
            "\u2200x (At(x, marysSchool) \u2227 (OrderFrequently(x, takeout) \u2228 Enjoy(x, diningHallMeal)))",
            "\u2200x (At(x, marysSchool) \u2227 Enjoy(x, diningHallMeal) \u2192 \u00acPickyEater(x))",
            "\u2200x (At(x, marysSchool) \u2227 Enjoy(x, diningHallMeal) \u2192 Spend(x, aLotOfTime, eating) \u2227 Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))",
            "At(hannah, marysSchool)",
            "(WorkIn(hannah, studentJob, campus) \u2227 NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) \u2192 \u00ac(PickyEater(hannah) \u2228 NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition))"
        ],
        "question": "Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "question_fol": "\u00ac(PickyEater(hannah) \u2227 Spend(hannah, aLotOfTime, eating) \u2227 Spend(hannah, aLotOfTime, catchingUpWithFriends, diningHall))",
        "answer": "A",
        "predicates_fol": [
            "At(x, y)",
            "WorkIn(x, y)",
            "NeedToEarnMoneyToHelpPayFor(x, y)",
            "OrderFrequently(x, y)",
            "Enjoy(x, y)",
            "PickyEater(x)",
            "Spend(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 981,
        "story_id": 368,
        "context": [
            "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
            "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "Hannah is at Mary's school.",
            "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "context_fol": [
            "\u2200x (At(x, marysSchool) \u2227 WorkIn(x, studentJob, campus) \u2192 NeedToEarnMoneyToHelpPayFor(x, collegeTuition))",
            "\u2200x (At(x, marysSchool) \u2227 OrderFrequently(x, takeout) \u2192 WorkIn(x, studentJob, campus))",
            "\u2200x (At(x, marysSchool) \u2227 (OrderFrequently(x, takeout) \u2228 Enjoy(x, diningHallMeal)))",
            "\u2200x (At(x, marysSchool) \u2227 Enjoy(x, diningHallMeal) \u2192 \u00acPickyEater(x))",
            "\u2200x (At(x, marysSchool) \u2227 Enjoy(x, diningHallMeal) \u2192 Spend(x, aLotOfTime, eating) \u2227 Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))",
            "At(hannah, marysSchool)",
            "(WorkIn(hannah, studentJob, campus) \u2227 NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) \u2192 \u00ac(PickyEater(hannah) \u2228 NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition))"
        ],
        "question": "Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "question_fol": "PickyEater(hannah) \u2295 (Spend(hannah, aLotOfTime, eating) \u2227 Spend(hannah, aLotOfTime, catchingUpWithFriends, diningHall))",
        "answer": "B",
        "predicates_fol": [
            "At(x, y)",
            "WorkIn(x, y)",
            "NeedToEarnMoneyToHelpPayFor(x, y)",
            "OrderFrequently(x, y)",
            "Enjoy(x, y)",
            "PickyEater(x)",
            "Spend(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 805,
        "story_id": 319,
        "context": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "context_fol": [
            "\u2200x (BakedSweet(x) \u2192 \u00acSpicy(x))",
            "\u2200x (Cupcake(x) \u2192 BakedSweet(x))",
            "\u2200x (MalaHotpot(x) \u2192 Spicy(x))",
            "\u2200x (Product(x) \u2227 From(x, bakedByMelissa) \u2192 Cupcake(x))",
            "Spicy(driedThaiChili) \u2228 MalaHotpot(driedThaiChili)\u2228 \u00acBakedSweet(driedThaiChili)"
        ],
        "question": "Dried Thai chilies are products of Baked by Melissa.",
        "question_fol": "Product(driedThaiChili) \u2227 From(driedThaiChili, bakedByMelissa)",
        "answer": "B",
        "predicates_fol": [
            "BakedSweet(x)",
            "Spicy(x)",
            "Cupcake(x)",
            "MalaHotpot(x)",
            "Product(x)",
            "From(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 806,
        "story_id": 319,
        "context": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "context_fol": [
            "\u2200x (BakedSweet(x) \u2192 \u00acSpicy(x))",
            "\u2200x (Cupcake(x) \u2192 BakedSweet(x))",
            "\u2200x (MalaHotpot(x) \u2192 Spicy(x))",
            "\u2200x (Product(x) \u2227 From(x, bakedByMelissa) \u2192 Cupcake(x))",
            "Spicy(driedThaiChili) \u2228 MalaHotpot(driedThaiChili)\u2228 \u00acBakedSweet(driedThaiChili)"
        ],
        "question": "Dried Thai chilies are not products of Baked by Melissa.",
        "question_fol": "\u00ac(Product(driedThaiChili) \u2227 From(driedThaiChili, bakedByMelissa))",
        "answer": "A",
        "predicates_fol": [
            "BakedSweet(x)",
            "Spicy(x)",
            "Cupcake(x)",
            "MalaHotpot(x)",
            "Product(x)",
            "From(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 807,
        "story_id": 319,
        "context": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "context_fol": [
            "\u2200x (BakedSweet(x) \u2192 \u00acSpicy(x))",
            "\u2200x (Cupcake(x) \u2192 BakedSweet(x))",
            "\u2200x (MalaHotpot(x) \u2192 Spicy(x))",
            "\u2200x (Product(x) \u2227 From(x, bakedByMelissa) \u2192 Cupcake(x))",
            "Spicy(driedThaiChili) \u2228 MalaHotpot(driedThaiChili)\u2228 \u00acBakedSweet(driedThaiChili)"
        ],
        "question": "Dried Thai chilies are a mala hotpot.",
        "question_fol": "MalaHotpot(driedThaiChili)",
        "answer": "C",
        "predicates_fol": [
            "BakedSweet(x)",
            "Spicy(x)",
            "Cupcake(x)",
            "MalaHotpot(x)",
            "Product(x)",
            "From(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 808,
        "story_id": 319,
        "context": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "context_fol": [
            "\u2200x (BakedSweet(x) \u2192 \u00acSpicy(x))",
            "\u2200x (Cupcake(x) \u2192 BakedSweet(x))",
            "\u2200x (MalaHotpot(x) \u2192 Spicy(x))",
            "\u2200x (Product(x) \u2227 From(x, bakedByMelissa) \u2192 Cupcake(x))",
            "Spicy(driedThaiChili) \u2228 MalaHotpot(driedThaiChili)\u2228 \u00acBakedSweet(driedThaiChili)"
        ],
        "question": "Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.",
        "question_fol": "\u00ac(Product(driedThaiChili) \u2227 From(driedThaiChili, bakedByMelissa)) \u2227 \u00acBakedSweet(driedThaiChili)",
        "answer": "A",
        "predicates_fol": [
            "BakedSweet(x)",
            "Spicy(x)",
            "Cupcake(x)",
            "MalaHotpot(x)",
            "Product(x)",
            "From(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 809,
        "story_id": 319,
        "context": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "context_fol": [
            "\u2200x (BakedSweet(x) \u2192 \u00acSpicy(x))",
            "\u2200x (Cupcake(x) \u2192 BakedSweet(x))",
            "\u2200x (MalaHotpot(x) \u2192 Spicy(x))",
            "\u2200x (Product(x) \u2227 From(x, bakedByMelissa) \u2192 Cupcake(x))",
            "Spicy(driedThaiChili) \u2228 MalaHotpot(driedThaiChili)\u2228 \u00acBakedSweet(driedThaiChili)"
        ],
        "question": "Dried Thai chilies are cupcakes and products of Baked by Melissa.",
        "question_fol": "Cupcake(driedThaiChili) \u2227 Product(driedThaiChili) \u2227 From(driedThaiChili, bakedByMelissa)",
        "answer": "B",
        "predicates_fol": [
            "BakedSweet(x)",
            "Spicy(x)",
            "Cupcake(x)",
            "MalaHotpot(x)",
            "Product(x)",
            "From(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 754,
        "story_id": 306,
        "context": [
            "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.",
            "All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than four.",
            "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
        ],
        "context_fol": [
            "\u2200x \u2203y (ListedIn(x, yelpRecommendation) \u2192 NegativeReview(y) \u2227 \u00acReceive(x, y))",
            "\u2200x \u2200y (HaveRating(x, y) \u2227 GreaterThan(y, 4) \u2192 ListedIn(x, yelpRecommendation))",
            "\u2203x \u2203y (\u00acProvide(x, takeOutService) \u2192 NegativeReview(y) \u2227 Receive(x, y))",
            "\u2200x \u2200y (PopularAmong(x, localResidents) \u2192 HaveRating(x, y) \u2227 GreaterThan(y, 4))",
            "\u2200x (HaveRating(hamdenPlazaSubway, x) \u2227 GreaterThan(x, 4) \u2295 PopularAmong(hamdenPlazaSubway, localResidents))"
        ],
        "question": "If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.",
        "question_fol": "\u2203x ((TakeOutService(hamdenPlazaSubway) \u2227 NegativeReview(x) \u2227 Receive(hamdenPlazaSubway, x) \u2192 PopularAmong(hamdenPlazaSubway, localResidents) \u2227 \u00acProvide(hamdenPlazaSubway, takeOutService))",
        "answer": "B",
        "predicates_fol": [
            "ListedIn(x, y)",
            "NegativeReview(x)",
            "Receive(x, y)",
            "HaveRating(x, y)",
            "GreaterThan(x, y)",
            "Provide(x, y)",
            "PopularAmong(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 755,
        "story_id": 306,
        "context": [
            "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.",
            "All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than four.",
            "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
        ],
        "context_fol": [
            "\u2200x \u2203y (ListedIn(x, yelpRecommendation) \u2192 NegativeReview(y) \u2227 \u00acReceive(x, y))",
            "\u2200x \u2200y (HaveRating(x, y) \u2227 GreaterThan(y, 4) \u2192 ListedIn(x, yelpRecommendation))",
            "\u2203x \u2203y (\u00acProvide(x, takeOutService) \u2192 NegativeReview(y) \u2227 Receive(x, y))",
            "\u2200x \u2200y (PopularAmong(x, localResidents) \u2192 HaveRating(x, y) \u2227 GreaterThan(y, 4))",
            "\u2200x (HaveRating(hamdenPlazaSubway, x) \u2227 GreaterThan(x, 4) \u2295 PopularAmong(hamdenPlazaSubway, localResidents))"
        ],
        "question": "The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.",
        "question_fol": "\u2203x (Provide(hamdenPlazaSubway, takeOutService) \u2228 (NegativeReview(x) \u2227 \u00acReceive(hamdenPlazaSubway, x)))",
        "answer": "A",
        "predicates_fol": [
            "ListedIn(x, y)",
            "NegativeReview(x)",
            "Receive(x, y)",
            "HaveRating(x, y)",
            "GreaterThan(x, y)",
            "Provide(x, y)",
            "PopularAmong(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 756,
        "story_id": 306,
        "context": [
            "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.",
            "All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than four.",
            "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
        ],
        "context_fol": [
            "\u2200x \u2203y (ListedIn(x, yelpRecommendation) \u2192 NegativeReview(y) \u2227 \u00acReceive(x, y))",
            "\u2200x \u2200y (HaveRating(x, y) \u2227 GreaterThan(y, 4) \u2192 ListedIn(x, yelpRecommendation))",
            "\u2203x \u2203y (\u00acProvide(x, takeOutService) \u2192 NegativeReview(y) \u2227 Receive(x, y))",
            "\u2200x \u2200y (PopularAmong(x, localResidents) \u2192 HaveRating(x, y) \u2227 GreaterThan(y, 4))",
            "\u2200x (HaveRating(hamdenPlazaSubway, x) \u2227 GreaterThan(x, 4) \u2295 PopularAmong(hamdenPlazaSubway, localResidents))"
        ],
        "question": "The Hamden Plaza store does not provide take-out service.",
        "question_fol": "\u00acProvide(hamdenPlazaSubway, takeOutService)",
        "answer": "C",
        "predicates_fol": [
            "ListedIn(x, y)",
            "NegativeReview(x)",
            "Receive(x, y)",
            "HaveRating(x, y)",
            "GreaterThan(x, y)",
            "Provide(x, y)",
            "PopularAmong(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 688,
        "story_id": 245,
        "context": [
            "In superhero movies, the good guys always win.",
            "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
            "Good guys fight bad guys and vice versa.",
            "Sir Digby fights his nemesis.",
            "If a superhero movie is named after a character, that character is a good guy.",
            "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
            "If somebody wins a fight, the person they are fighting does not win.",
            "If a superhero movie is named after a character, that character is in the movie."
        ],
        "context_fol": [
            "\u2200x \u2200y (SuperheroMovie(x) \u2227 In(y, x) \u2227 GoodGuy(y) \u2192 Wins(y))",
            "SuperheroMovie(theSurprisingAdventuresofSirDigbyChickenCaesar)",
            "\u2200x \u2200y (GoodGuy(x) \u2227 Fight(x, y) \u27f7 BadGuy(y) \u2227 Fight(y, x))",
            "Fight(sirDigby, sirDigbysNemesis)",
            "\u2200x \u2200y (SuperheroMovie(x) \u2227 NamedAfter(x, y) \u2192 GoodGuy(y))",
            "NamedAfter(theSurprisingAdventuresofSirDigbyChickenCaesar, sirDigby)",
            "\u2200x \u2200y (Fights(x, y) \u2227 Win(x) \u2192 \u00acWins(y))",
            "\u2200x \u2200y (SuperheroMovie(x) \u2227 NamedAfter(x, y) \u2192 In(y, x))"
        ],
        "question": "Sir Digby\u2019s nemesis does not win.",
        "question_fol": "\u00acWin(sirDigbysNemesis)",
        "answer": "A",
        "predicates_fol": [
            "SuperheroMovie(x)",
            "In(x, y)",
            "GoodGuy(x)",
            "Wins(x)",
            "Fight(x, y)",
            "BadGuy(x)",
            "NamedAfter(x, y)",
            "Fights(x, y)",
            "Win(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 171,
        "story_id": 58,
        "context": [
            "Books contain tons of knowledge.",
            "When a person reads a book, that person gains knowledge. ",
            "If a person gains knowledge, they become smarter.",
            "Harry read the book \u201cWalden\u201d by Henry Thoreau."
        ],
        "context_fol": [
            "\u2200x (Book(x) \u2192 Contains(x, knowledge))",
            "\u2200x \u2200y (ReadBook(x, y) \u2192 Gains(x, knowledge))",
            "\u2200x (Gains(x, knowledge) \u2192 Smarter(x))",
            "ReadBook(harry, walden) \u2227 Book(walden)"
        ],
        "question": "Walden contains knowledge.",
        "question_fol": "Gains(harry, knowledge)",
        "answer": "A",
        "predicates_fol": [
            "Book(x)",
            "Contains(x, y)",
            "ReadBook(x, y)",
            "Gains(x, y)",
            "Smarter(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 172,
        "story_id": 58,
        "context": [
            "Books contain tons of knowledge.",
            "When a person reads a book, that person gains knowledge. ",
            "If a person gains knowledge, they become smarter.",
            "Harry read the book \u201cWalden\u201d by Henry Thoreau."
        ],
        "context_fol": [
            "\u2200x (Book(x) \u2192 Contains(x, knowledge))",
            "\u2200x \u2200y (ReadBook(x, y) \u2192 Gains(x, knowledge))",
            "\u2200x (Gains(x, knowledge) \u2192 Smarter(x))",
            "ReadBook(harry, walden) \u2227 Book(walden)"
        ],
        "question": "Harry is smarter than before.",
        "question_fol": "Smarter(harry)",
        "answer": "A",
        "predicates_fol": [
            "Book(x)",
            "Contains(x, y)",
            "ReadBook(x, y)",
            "Gains(x, y)",
            "Smarter(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 173,
        "story_id": 58,
        "context": [
            "Books contain tons of knowledge.",
            "When a person reads a book, that person gains knowledge. ",
            "If a person gains knowledge, they become smarter.",
            "Harry read the book \u201cWalden\u201d by Henry Thoreau."
        ],
        "context_fol": [
            "\u2200x (Book(x) \u2192 Contains(x, knowledge))",
            "\u2200x \u2200y (ReadBook(x, y) \u2192 Gains(x, knowledge))",
            "\u2200x (Gains(x, knowledge) \u2192 Smarter(x))",
            "ReadBook(harry, walden) \u2227 Book(walden)"
        ],
        "question": "A smarter person has gained knowledge.",
        "question_fol": "\u2200x (Smarter(x) \u2192 GainKnowledge(x))",
        "answer": "C",
        "predicates_fol": [
            "Book(x)",
            "Contains(x, y)",
            "ReadBook(x, y)",
            "Gains(x, y)",
            "Smarter(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 546,
        "story_id": 191,
        "context": [
            "A natural language processing task can be categorized as either a language generation task or a language understanding task.",
            "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
            "Machine translation is a natural language processing task.",
            "The output of machine translation is a text sequence."
        ],
        "context_fol": [
            "\u2200x (NaturalLanguageProcessingTask(x) \u2192 LanguageGenerationTask(x) \u2295 LanguageUnderstandingTask(x))",
            "\u2200x (NaturalLanguageProcessingTasks(x) \u2227 OutputSequence(x, text) \u2192 LanguageGenerationTask(x))",
            "NaturalLanguageProcessingTask(machineTranslation)",
            "OutputSequence(machineTranslation, text)"
        ],
        "question": "Machine translation is a language generation task.",
        "question_fol": "LanguageGenerationTask(machineTranslation)",
        "answer": "A",
        "predicates_fol": [
            "NaturalLanguageProcessingTask(x)",
            "LanguageGenerationTask(x)",
            "LanguageUnderstandingTask(x)",
            "NaturalLanguageProcessingTasks(x)",
            "OutputSequence(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 547,
        "story_id": 191,
        "context": [
            "A natural language processing task can be categorized as either a language generation task or a language understanding task.",
            "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
            "Machine translation is a natural language processing task.",
            "The output of machine translation is a text sequence."
        ],
        "context_fol": [
            "\u2200x (NaturalLanguageProcessingTask(x) \u2192 LanguageGenerationTask(x) \u2295 LanguageUnderstandingTask(x))",
            "\u2200x (NaturalLanguageProcessingTasks(x) \u2227 OutputSequence(x, text) \u2192 LanguageGenerationTask(x))",
            "NaturalLanguageProcessingTask(machineTranslation)",
            "OutputSequence(machineTranslation, text)"
        ],
        "question": "Machine translation is a language understanding task.",
        "question_fol": "LanguageUnderstandingTask(machineTranslation)",
        "answer": "B",
        "predicates_fol": [
            "NaturalLanguageProcessingTask(x)",
            "LanguageGenerationTask(x)",
            "LanguageUnderstandingTask(x)",
            "NaturalLanguageProcessingTasks(x)",
            "OutputSequence(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 476,
        "story_id": 166,
        "context": [
            "Pets are allowed in some managed buildings.",
            "A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to the monthly rent at a managed building or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "$2000 is more than $1500.",
            "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "If a managed building allows pets, then people are allowed to move in with a pet. "
        ],
        "context_fol": [
            "\u2203x (ManagedBuilding(x) \u2227 AllowPet(x))",
            "\u2200x \u2200y (ManagedBuilding(x) \u2227 RentApartmentIn(y, x) \u2192 DepositRequired(y))",
            "\u2200x \u2200y \u2200z (SecurityDeposit(x) \u2227 ManagedBuilding(z) \u2227 MonthlyRentAt(y, z) \u2192 (MoreThan(x, y) \u2295 Equal(x, y))",
            "Cat(fluffy) \u2227 BelongTo(fluffy, tom)",
            "\u2200x (Cat(x) \u2192 Pet(x))",
            "ManagedBuilding(oliveGarden)",
            "MonthlyRentAt(uSD2000, oliveGarden)",
            "MoreThan(uSD2000, uSD1500)",
            "\u2200x \u2200y (ManagedBuilding(x) \u2227 AllowedToMoveInWith(tom, x, fluffy) \u2227 SecurityDeposit(y) \u2227 \u00acMoreThan(y, uSD1500) \u2192 RentApartmentIn(tom, x))",
            "\u2200x \u2200y \u2200z (ManagedBuilding(x) \u2227 AllowPet(x) \u2227 Pet(z) \u2192 AllowedToMoveInWith(y, x, z))"
        ],
        "question": "Tom will rent an apartment in The Olive Garden.",
        "question_fol": "RentApartmentIn(tom, oliveGarden)",
        "answer": "B",
        "predicates_fol": [
            "ManagedBuilding(x)",
            "AllowPet(x)",
            "RentApartmentIn(x, y)",
            "DepositRequired(x)",
            "Equal(x)",
            "Cat(x)",
            "BelongTo(x, y)",
            "Pet(x)",
            "MonthlyRentAt(x, y)",
            "MoreThan(x, y)",
            "AllowedToMoveInWith(x, y)",
            "SecurityDeposit(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 477,
        "story_id": 166,
        "context": [
            "Pets are allowed in some managed buildings.",
            "A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to the monthly rent at a managed building or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "$2000 is more than $1500.",
            "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "If a managed building allows pets, then people are allowed to move in with a pet. "
        ],
        "context_fol": [
            "\u2203x (ManagedBuilding(x) \u2227 AllowPet(x))",
            "\u2200x \u2200y (ManagedBuilding(x) \u2227 RentApartmentIn(y, x) \u2192 DepositRequired(y))",
            "\u2200x \u2200y \u2200z (SecurityDeposit(x) \u2227 ManagedBuilding(z) \u2227 MonthlyRentAt(y, z) \u2192 (MoreThan(x, y) \u2295 Equal(x, y))",
            "Cat(fluffy) \u2227 BelongTo(fluffy, tom)",
            "\u2200x (Cat(x) \u2192 Pet(x))",
            "ManagedBuilding(oliveGarden)",
            "MonthlyRentAt(uSD2000, oliveGarden)",
            "MoreThan(uSD2000, uSD1500)",
            "\u2200x \u2200y (ManagedBuilding(x) \u2227 AllowedToMoveInWith(tom, x, fluffy) \u2227 SecurityDeposit(y) \u2227 \u00acMoreThan(y, uSD1500) \u2192 RentApartmentIn(tom, x))",
            "\u2200x \u2200y \u2200z (ManagedBuilding(x) \u2227 AllowPet(x) \u2227 Pet(z) \u2192 AllowedToMoveInWith(y, x, z))"
        ],
        "question": "Tom is allowed to move into an apartment in The Olive Garden with Fluffy.",
        "question_fol": "AllowedToMoveInWith(tom, oliveGarden, fluffy)",
        "answer": "C",
        "predicates_fol": [
            "ManagedBuilding(x)",
            "AllowPet(x)",
            "RentApartmentIn(x, y)",
            "DepositRequired(x)",
            "Equal(x)",
            "Cat(x)",
            "BelongTo(x, y)",
            "Pet(x)",
            "MonthlyRentAt(x, y)",
            "MoreThan(x, y)",
            "AllowedToMoveInWith(x, y)",
            "SecurityDeposit(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 478,
        "story_id": 166,
        "context": [
            "Pets are allowed in some managed buildings.",
            "A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to the monthly rent at a managed building or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "$2000 is more than $1500.",
            "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "If a managed building allows pets, then people are allowed to move in with a pet. "
        ],
        "context_fol": [
            "\u2203x (ManagedBuilding(x) \u2227 AllowPet(x))",
            "\u2200x \u2200y (ManagedBuilding(x) \u2227 RentApartmentIn(y, x) \u2192 DepositRequired(y))",
            "\u2200x \u2200y \u2200z (SecurityDeposit(x) \u2227 ManagedBuilding(z) \u2227 MonthlyRentAt(y, z) \u2192 (MoreThan(x, y) \u2295 Equal(x, y))",
            "Cat(fluffy) \u2227 BelongTo(fluffy, tom)",
            "\u2200x (Cat(x) \u2192 Pet(x))",
            "ManagedBuilding(oliveGarden)",
            "MonthlyRentAt(uSD2000, oliveGarden)",
            "MoreThan(uSD2000, uSD1500)",
            "\u2200x \u2200y (ManagedBuilding(x) \u2227 AllowedToMoveInWith(tom, x, fluffy) \u2227 SecurityDeposit(y) \u2227 \u00acMoreThan(y, uSD1500) \u2192 RentApartmentIn(tom, x))",
            "\u2200x \u2200y \u2200z (ManagedBuilding(x) \u2227 AllowPet(x) \u2227 Pet(z) \u2192 AllowedToMoveInWith(y, x, z))"
        ],
        "question": "The security deposit at the Olive Garden is either $2000 or more.",
        "question_fol": "\u2200x (SecurityDeposit(x, oliveGarden) \u2192 MoreThan(x, uSD2000) \u2295 Equal(x, uSD2000))",
        "answer": "A",
        "predicates_fol": [
            "ManagedBuilding(x)",
            "AllowPet(x)",
            "RentApartmentIn(x, y)",
            "DepositRequired(x)",
            "Equal(x)",
            "Cat(x)",
            "BelongTo(x, y)",
            "Pet(x)",
            "MonthlyRentAt(x, y)",
            "MoreThan(x, y)",
            "AllowedToMoveInWith(x, y)",
            "SecurityDeposit(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 933,
        "story_id": 352,
        "context": [
            "All business organizations are legal entities.",
            "All companies are business organizations.",
            "All private companies are companies.",
            "All legal entities are created under law. ",
            "All legal entities have legal obligations.",
            "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
        ],
        "context_fol": [
            "\u2200x (BusinessOrganization(x) \u2192 LegalEntity(x))",
            "\u2200x (Company(x) \u2192 BusinessOrganization(x))",
            "\u2200x (PrivateCompany(x) \u2192 Company(x))",
            "\u2200x (LegalEntity(x) \u2192 CreatedUnderLaw(x))",
            "\u2200x (LegalEntity(x) \u2192 LegalObligation(x))",
            "CreatedUnderLaw(harvardWeeklyBookClub) \u2192 \u00acPrivateCompany(harvardWeeklyBookClub)"
        ],
        "question": "The Harvard Weekly Book club has legal obligations.",
        "question_fol": "LegalObligation(harvardWeeklyBookClub)",
        "answer": "C",
        "predicates_fol": [
            "BusinessOrganization(x)",
            "LegalEntity(x)",
            "Company(x)",
            "PrivateCompany(x)",
            "CreatedUnderLaw(x)",
            "LegalObligation(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 934,
        "story_id": 352,
        "context": [
            "All business organizations are legal entities.",
            "All companies are business organizations.",
            "All private companies are companies.",
            "All legal entities are created under law. ",
            "All legal entities have legal obligations.",
            "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
        ],
        "context_fol": [
            "\u2200x (BusinessOrganization(x) \u2192 LegalEntity(x))",
            "\u2200x (Company(x) \u2192 BusinessOrganization(x))",
            "\u2200x (PrivateCompany(x) \u2192 Company(x))",
            "\u2200x (LegalEntity(x) \u2192 CreatedUnderLaw(x))",
            "\u2200x (LegalEntity(x) \u2192 LegalObligation(x))",
            "CreatedUnderLaw(harvardWeeklyBookClub) \u2192 \u00acPrivateCompany(harvardWeeklyBookClub)"
        ],
        "question": "The Harvard Weekly Book club has legal obligations and is a private company.",
        "question_fol": "LegalObligation(harvardWeeklyBookClub) \u2227 PrivateCompany(harvardWeeklyBookClub)",
        "answer": "B",
        "predicates_fol": [
            "BusinessOrganization(x)",
            "LegalEntity(x)",
            "Company(x)",
            "PrivateCompany(x)",
            "CreatedUnderLaw(x)",
            "LegalObligation(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 935,
        "story_id": 352,
        "context": [
            "All business organizations are legal entities.",
            "All companies are business organizations.",
            "All private companies are companies.",
            "All legal entities are created under law. ",
            "All legal entities have legal obligations.",
            "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
        ],
        "context_fol": [
            "\u2200x (BusinessOrganization(x) \u2192 LegalEntity(x))",
            "\u2200x (Company(x) \u2192 BusinessOrganization(x))",
            "\u2200x (PrivateCompany(x) \u2192 Company(x))",
            "\u2200x (LegalEntity(x) \u2192 CreatedUnderLaw(x))",
            "\u2200x (LegalEntity(x) \u2192 LegalObligation(x))",
            "CreatedUnderLaw(harvardWeeklyBookClub) \u2192 \u00acPrivateCompany(harvardWeeklyBookClub)"
        ],
        "question": "If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.",
        "question_fol": "PrivateCompany(harvardWeeklyBookClub) \u2192 LegalObligation(harvardWeeklyBookClub) \u2295 CreatedUnderLaw(harvardWeeklyBookClub)",
        "answer": "A",
        "predicates_fol": [
            "BusinessOrganization(x)",
            "LegalEntity(x)",
            "Company(x)",
            "PrivateCompany(x)",
            "CreatedUnderLaw(x)",
            "LegalObligation(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1366,
        "story_id": 472,
        "context": [
            "Animals are either invertebrates or vertebrates.",
            "All animals with backbones reproduce by male-and-female mating. ",
            "All vertebrate animals have a backbone.",
            "All bees do not reproduce by male-and-female mating.",
            "All queen bees are bees.",
            "Harry is a bee."
        ],
        "context_fol": [
            "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
            "\u2200x (Animal(x) \u2227 With(x, backbone) \u2192 ReproduceBy(x, male-and-femaleMating))",
            "\u2200x (Animal(x) \u2227 Vertebrate(x) \u2192 With(x, backbone))",
            "\u2200x (Bee(x) \u2192 \u00acReproduceBy(x, male-and-femaleMating))",
            "\u2200x (QueenBee(x) \u2192 Bee(x))",
            "Bee(harry)"
        ],
        "question": "Harry is a queen bee.",
        "question_fol": "QueenBee(harry)",
        "answer": "C",
        "predicates_fol": [
            "Animal(x)",
            "Invertebrate(x)",
            "Vertebrate(x)",
            "With(x, y)",
            "ReproduceBy(x, y)",
            "Bee(x)",
            "QueenBee(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1367,
        "story_id": 472,
        "context": [
            "Animals are either invertebrates or vertebrates.",
            "All animals with backbones reproduce by male-and-female mating. ",
            "All vertebrate animals have a backbone.",
            "All bees do not reproduce by male-and-female mating.",
            "All queen bees are bees.",
            "Harry is a bee."
        ],
        "context_fol": [
            "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
            "\u2200x (Animal(x) \u2227 With(x, backbone) \u2192 ReproduceBy(x, male-and-femaleMating))",
            "\u2200x (Animal(x) \u2227 Vertebrate(x) \u2192 With(x, backbone))",
            "\u2200x (Bee(x) \u2192 \u00acReproduceBy(x, male-and-femaleMating))",
            "\u2200x (QueenBee(x) \u2192 Bee(x))",
            "Bee(harry)"
        ],
        "question": "Harry is an invertebrate or a queen bee.",
        "question_fol": "Invertebrate(harry) \u2228 QueenBee(harry)",
        "answer": "A",
        "predicates_fol": [
            "Animal(x)",
            "Invertebrate(x)",
            "Vertebrate(x)",
            "With(x, y)",
            "ReproduceBy(x, y)",
            "Bee(x)",
            "QueenBee(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1368,
        "story_id": 472,
        "context": [
            "Animals are either invertebrates or vertebrates.",
            "All animals with backbones reproduce by male-and-female mating. ",
            "All vertebrate animals have a backbone.",
            "All bees do not reproduce by male-and-female mating.",
            "All queen bees are bees.",
            "Harry is a bee."
        ],
        "context_fol": [
            "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
            "\u2200x (Animal(x) \u2227 With(x, backbone) \u2192 ReproduceBy(x, male-and-femaleMating))",
            "\u2200x (Animal(x) \u2227 Vertebrate(x) \u2192 With(x, backbone))",
            "\u2200x (Bee(x) \u2192 \u00acReproduceBy(x, male-and-femaleMating))",
            "\u2200x (QueenBee(x) \u2192 Bee(x))",
            "Bee(harry)"
        ],
        "question": "If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.",
        "question_fol": "\u00ac(Invertebrate(harry) \u2295 With(harry, backbone)) \u2192 \u00acInvertebrate(harry) \u2227 \u00acQueenBee(harry)",
        "answer": "B",
        "predicates_fol": [
            "Animal(x)",
            "Invertebrate(x)",
            "Vertebrate(x)",
            "With(x, y)",
            "ReproduceBy(x, y)",
            "Bee(x)",
            "QueenBee(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1011,
        "story_id": 379,
        "context": [
            "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who were born together, then they were born in a multiple birth.",
            "If people complain often about annoying siblings, then they have siblings who were born together.",
            "If people live at home, then they do not live with strangers.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
            "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
        ],
        "context_fol": [
            "\u2200x (BornIn(x, multipleBirth) \u2192 SpendTimePlayingWith(x, sibling))",
            "\u2200x (\u2203y (Sibling(x, y) \u2227 BornTogether(y)) \u2192 BornIn(x, multipleBirth))",
            "\u2200x (ComplainAboutOften(x, annoyingSiblings) \u2192 \u2203y (Sibling(x, y) \u2227 BornTogether(y)))",
            "\u2200x (LiveAt(x, home) \u2192 \u00acLiveWith(x, strangers))",
            "\u2200x (SpendTimeplayingWith(x, sibling) \u2192 LiveAt(x, home))",
            "\u00ac(BornIn(luke, multipleBirth) \u2295 LiveWith(luke, strangers))"
        ],
        "question": "Luke spends a lot of time hanging out and playing with his siblings.",
        "question_fol": "SpendTime(luke, playingWith, siblings)",
        "answer": "C",
        "predicates_fol": [
            "BornIn(x, y)",
            "Sibling(x, y)",
            "BornTogether(x)",
            "ComplainAboutOften(x, y)",
            "SpendTimePlayingWith(x, y)",
            "LiveAt(x, y)",
            "LiveWith(x, y)",
            "SpendTimeplayingWith(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1012,
        "story_id": 379,
        "context": [
            "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who were born together, then they were born in a multiple birth.",
            "If people complain often about annoying siblings, then they have siblings who were born together.",
            "If people live at home, then they do not live with strangers.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
            "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
        ],
        "context_fol": [
            "\u2200x (BornIn(x, multipleBirth) \u2192 SpendTimePlayingWith(x, sibling))",
            "\u2200x (\u2203y (Sibling(x, y) \u2227 BornTogether(y)) \u2192 BornIn(x, multipleBirth))",
            "\u2200x (ComplainAboutOften(x, annoyingSiblings) \u2192 \u2203y (Sibling(x, y) \u2227 BornTogether(y)))",
            "\u2200x (LiveAt(x, home) \u2192 \u00acLiveWith(x, strangers))",
            "\u2200x (SpendTimeplayingWith(x, sibling) \u2192 LiveAt(x, home))",
            "\u00ac(BornIn(luke, multipleBirth) \u2295 LiveWith(luke, strangers))"
        ],
        "question": "Luke complains often about annoying siblings.",
        "question_fol": "ComplainAboutOften(luke, annoyingSiblings)",
        "answer": "B",
        "predicates_fol": [
            "BornIn(x, y)",
            "Sibling(x, y)",
            "BornTogether(x)",
            "ComplainAboutOften(x, y)",
            "SpendTimePlayingWith(x, y)",
            "LiveAt(x, y)",
            "LiveWith(x, y)",
            "SpendTimeplayingWith(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1013,
        "story_id": 379,
        "context": [
            "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who were born together, then they were born in a multiple birth.",
            "If people complain often about annoying siblings, then they have siblings who were born together.",
            "If people live at home, then they do not live with strangers.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
            "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
        ],
        "context_fol": [
            "\u2200x (BornIn(x, multipleBirth) \u2192 SpendTimePlayingWith(x, sibling))",
            "\u2200x (\u2203y (Sibling(x, y) \u2227 BornTogether(y)) \u2192 BornIn(x, multipleBirth))",
            "\u2200x (ComplainAboutOften(x, annoyingSiblings) \u2192 \u2203y (Sibling(x, y) \u2227 BornTogether(y)))",
            "\u2200x (LiveAt(x, home) \u2192 \u00acLiveWith(x, strangers))",
            "\u2200x (SpendTimeplayingWith(x, sibling) \u2192 LiveAt(x, home))",
            "\u00ac(BornIn(luke, multipleBirth) \u2295 LiveWith(luke, strangers))"
        ],
        "question": "Luke is neither born in a multiple birth nor complains often about annoying siblings.",
        "question_fol": "\u00ac(BornIn(luke, multipleBirth) \u2228 ComplainAbout(luke, often, annoyingSiblings) )",
        "answer": "A",
        "predicates_fol": [
            "BornIn(x, y)",
            "Sibling(x, y)",
            "BornTogether(x)",
            "ComplainAboutOften(x, y)",
            "SpendTimePlayingWith(x, y)",
            "LiveAt(x, y)",
            "LiveWith(x, y)",
            "SpendTimeplayingWith(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 560,
        "story_id": 197,
        "context": [
            "It costs $205 to take the GRE test, which is cheaper than $300.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Those living in single-parent families or having few resources available to them can prove economic hardship.",
            "Tom lives in a single-parent family.",
            "Tom's dad has been out of work, and Tom has few resources available to them. ",
            "Tom is applying to take the GRE test."
        ],
        "context_fol": [
            "Cost(gRE, 205) \u2227 Cheaper(205, 300)",
            "\u2200x (ApplicantOf(x, gre) \u2227 Prove(x, economicHardship) \u2192 ProvideTo(ets, financialAid, x))",
            "\u2200x (LivingIn(x, singleParentFamily) \u2228 AvailableTo(fewResources, x) \u2192 Prove(x, economicHardship))",
            "LivingIn(tom, singleParentFamily)",
            "OutOfWork(tomsDad) \u2227 AvailableTo(fewResources, tom)",
            "ApplicantOf(tom, gre)"
        ],
        "question": "ETS provides financial aid to Tom.",
        "question_fol": "ProvidesFinancialAidTo(eTS, tom)",
        "answer": "A",
        "predicates_fol": [
            "Cost(x, y)",
            "Cheaper(x, y)",
            "ApplicantOf(x, y)",
            "Prove(x, y)",
            "ProvideTo(x, y)",
            "LivingIn(x, y)",
            "AvailableTo(x, y)",
            "OutOfWork(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 561,
        "story_id": 197,
        "context": [
            "It costs $205 to take the GRE test, which is cheaper than $300.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Those living in single-parent families or having few resources available to them can prove economic hardship.",
            "Tom lives in a single-parent family.",
            "Tom's dad has been out of work, and Tom has few resources available to them. ",
            "Tom is applying to take the GRE test."
        ],
        "context_fol": [
            "Cost(gRE, 205) \u2227 Cheaper(205, 300)",
            "\u2200x (ApplicantOf(x, gre) \u2227 Prove(x, economicHardship) \u2192 ProvideTo(ets, financialAid, x))",
            "\u2200x (LivingIn(x, singleParentFamily) \u2228 AvailableTo(fewResources, x) \u2192 Prove(x, economicHardship))",
            "LivingIn(tom, singleParentFamily)",
            "OutOfWork(tomsDad) \u2227 AvailableTo(fewResources, tom)",
            "ApplicantOf(tom, gre)"
        ],
        "question": "It costs below US $300 to take the GRE test.",
        "question_fol": "Cost(gRE, x) \u2227 Cheaper(x, 300)",
        "answer": "A",
        "predicates_fol": [
            "Cost(x, y)",
            "Cheaper(x, y)",
            "ApplicantOf(x, y)",
            "Prove(x, y)",
            "ProvideTo(x, y)",
            "LivingIn(x, y)",
            "AvailableTo(x, y)",
            "OutOfWork(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 562,
        "story_id": 197,
        "context": [
            "It costs $205 to take the GRE test, which is cheaper than $300.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Those living in single-parent families or having few resources available to them can prove economic hardship.",
            "Tom lives in a single-parent family.",
            "Tom's dad has been out of work, and Tom has few resources available to them. ",
            "Tom is applying to take the GRE test."
        ],
        "context_fol": [
            "Cost(gRE, 205) \u2227 Cheaper(205, 300)",
            "\u2200x (ApplicantOf(x, gre) \u2227 Prove(x, economicHardship) \u2192 ProvideTo(ets, financialAid, x))",
            "\u2200x (LivingIn(x, singleParentFamily) \u2228 AvailableTo(fewResources, x) \u2192 Prove(x, economicHardship))",
            "LivingIn(tom, singleParentFamily)",
            "OutOfWork(tomsDad) \u2227 AvailableTo(fewResources, tom)",
            "ApplicantOf(tom, gre)"
        ],
        "question": "No one taking the GRE test has financial aid provided to them by something.",
        "question_fol": "\u00ac(\u2203x \u2203y (Applicant(x, gRE) \u2227 ProvidesFinancialAidTo(y, x)))",
        "answer": "B",
        "predicates_fol": [
            "Cost(x, y)",
            "Cheaper(x, y)",
            "ApplicantOf(x, y)",
            "Prove(x, y)",
            "ProvideTo(x, y)",
            "LivingIn(x, y)",
            "AvailableTo(x, y)",
            "OutOfWork(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 958,
        "story_id": 361,
        "context": [
            "If people spill a lot of food on their clothing, then they are not notably tidy.",
            "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people are cleanly, then they are notably tidy.",
            "If people value order and spotlessness, then they are cleanly.",
            "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
            "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
        ],
        "context_fol": [
            "\u2200x (Spill(x, aLotOfFood, clothing) \u2192 \u00acNotablyTidy(x))",
            "\u2200x (ClumsyFoodie(x) \u2227 GoOutFrequentlyToFindToTry(x, newFoodRestaurant) \u2192 SpillOn(x, aLotOfFood, clothing))",
            "\u2200x (Cleanly(x) \u2192 NotablyTidy(x))",
            "\u2200x (Value(x, order) \u2227 Value(x, spotlessness) \u2192 Cleanly(x))",
            "\u2200x ((\u2203y (FamilyOf(y, x) \u2227 Prioritize(y, order) \u2227 Prioritize(y, spotlessness)) \u2192 Value(x, order) \u2227 Value(x, spotlessness)) ",
            "\u00ac(Spill(peter, aLotOfFood, clothing) \u2295 Cleanly(peter))"
        ],
        "question": "Peter is notably tidy.",
        "question_fol": "NotablyTidy(peter)",
        "answer": "C",
        "predicates_fol": [
            "Spill(x, y)",
            "FamilyOf(x, y)",
            "Prioritize(x, y)",
            "NotablyTidy(x)",
            "ClumsyFoodie(x)",
            "GoOutFrequentlyToFindToTry(x, y)",
            "SpillOn(x, y)",
            "Cleanly(x)",
            "Value(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 959,
        "story_id": 361,
        "context": [
            "If people spill a lot of food on their clothing, then they are not notably tidy.",
            "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people are cleanly, then they are notably tidy.",
            "If people value order and spotlessness, then they are cleanly.",
            "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
            "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
        ],
        "context_fol": [
            "\u2200x (Spill(x, aLotOfFood, clothing) \u2192 \u00acNotablyTidy(x))",
            "\u2200x (ClumsyFoodie(x) \u2227 GoOutFrequentlyToFindToTry(x, newFoodRestaurant) \u2192 SpillOn(x, aLotOfFood, clothing))",
            "\u2200x (Cleanly(x) \u2192 NotablyTidy(x))",
            "\u2200x (Value(x, order) \u2227 Value(x, spotlessness) \u2192 Cleanly(x))",
            "\u2200x ((\u2203y (FamilyOf(y, x) \u2227 Prioritize(y, order) \u2227 Prioritize(y, spotlessness)) \u2192 Value(x, order) \u2227 Value(x, spotlessness)) ",
            "\u00ac(Spill(peter, aLotOfFood, clothing) \u2295 Cleanly(peter))"
        ],
        "question": "Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.",
        "question_fol": "ClumsyFoodie(peter) \u2228 (\u2203y (FamilyOf(y, peter) \u2227 Prioritize(y, order) \u2227 Prioritize(y, spotlessness)))",
        "answer": "B",
        "predicates_fol": [
            "Spill(x, y)",
            "FamilyOf(x, y)",
            "Prioritize(x, y)",
            "NotablyTidy(x)",
            "ClumsyFoodie(x)",
            "GoOutFrequentlyToFindToTry(x, y)",
            "SpillOn(x, y)",
            "Cleanly(x)",
            "Value(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 960,
        "story_id": 361,
        "context": [
            "If people spill a lot of food on their clothing, then they are not notably tidy.",
            "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people are cleanly, then they are notably tidy.",
            "If people value order and spotlessness, then they are cleanly.",
            "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
            "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
        ],
        "context_fol": [
            "\u2200x (Spill(x, aLotOfFood, clothing) \u2192 \u00acNotablyTidy(x))",
            "\u2200x (ClumsyFoodie(x) \u2227 GoOutFrequentlyToFindToTry(x, newFoodRestaurant) \u2192 SpillOn(x, aLotOfFood, clothing))",
            "\u2200x (Cleanly(x) \u2192 NotablyTidy(x))",
            "\u2200x (Value(x, order) \u2227 Value(x, spotlessness) \u2192 Cleanly(x))",
            "\u2200x ((\u2203y (FamilyOf(y, x) \u2227 Prioritize(y, order) \u2227 Prioritize(y, spotlessness)) \u2192 Value(x, order) \u2227 Value(x, spotlessness)) ",
            "\u00ac(Spill(peter, aLotOfFood, clothing) \u2295 Cleanly(peter))"
        ],
        "question": "Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.",
        "question_fol": "\u00ac(ClumsyFoodie(peter) \u2295 (\u2203y (FamilyOf(y, peter) \u2227 Prioritize(y, order) \u2227 Prioritize(y, spotlessness))))",
        "answer": "A",
        "predicates_fol": [
            "Spill(x, y)",
            "FamilyOf(x, y)",
            "Prioritize(x, y)",
            "NotablyTidy(x)",
            "ClumsyFoodie(x)",
            "GoOutFrequentlyToFindToTry(x, y)",
            "SpillOn(x, y)",
            "Cleanly(x)",
            "Value(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 706,
        "story_id": 262,
        "context": [
            "All fir trees are evergreens.",
            "Some objects of worship are fir trees."
        ],
        "context_fol": [
            "\u2200x (FirTree(x) \u2192 Evergreen(x))",
            "\u2203x \u2203y (ObjectOfWorship(x) \u2227 ObjectOfWorship(y) \u2227 FirTree(x) \u2227 FirTree(y) \u2227 \u00ac(x=y))"
        ],
        "question": "Some evergreens are not objects of worship.",
        "question_fol": "\u2203x \u2203y (Evergreen(x) \u2227 Evergreen(y) \u2227 \u00acObjectOfWorship(x) \u2227 \u00acObjectOfWorship(y) \u2227 \u00ac(x=y))",
        "answer": "C",
        "predicates_fol": [
            "ObjectOfWorship(x)",
            "FirTree(x)",
            "Evergreen(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 370,
        "story_id": 124,
        "context": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines that have been donated."
        ],
        "context_fol": [
            "MountainRange(thePicurisMountains) \u2227 (In(thePicurisMountains, newMexico) \u2295 In(thePicurisMountains, texas))",
            "Visited(juanDeOnate, thePicurisMountains)",
            "In(hardingPegmatiteMine, thePicurisMountains) \u2227 Mine(hardingPegmatiteMine) \u2227 Donated(hardingPegmatiteMine)",
            "\u2200x \u2200y (Mine(x) \u2227 Donated(x) \u2227 In(x, y) \u2227 MountainRange(y) \u2192 \u00acIn(y, texas))"
        ],
        "question": "Juan de Onate visited a mountain range in New Mexico.",
        "question_fol": "\u2203x (Visited(juanDeOnate, x) \u2227 MountainRange(x) \u2227 In(x, newMexico))",
        "answer": "A",
        "predicates_fol": [
            "MountainRange(x)",
            "In(x, y)",
            "Visited(x, y)",
            "Mine(x)",
            "Donated(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 371,
        "story_id": 124,
        "context": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines that have been donated."
        ],
        "context_fol": [
            "MountainRange(thePicurisMountains) \u2227 (In(thePicurisMountains, newMexico) \u2295 In(thePicurisMountains, texas))",
            "Visited(juanDeOnate, thePicurisMountains)",
            "In(hardingPegmatiteMine, thePicurisMountains) \u2227 Mine(hardingPegmatiteMine) \u2227 Donated(hardingPegmatiteMine)",
            "\u2200x \u2200y (Mine(x) \u2227 Donated(x) \u2227 In(x, y) \u2227 MountainRange(y) \u2192 \u00acIn(y, texas))"
        ],
        "question": "Juan de Onate visited a mountain range in Texas.",
        "question_fol": "\u2203x (Visited(juanDeOnate, x) \u2227 MountainRange(x) \u2227 In(x, texas))",
        "answer": "C",
        "predicates_fol": [
            "MountainRange(x)",
            "In(x, y)",
            "Visited(x, y)",
            "Mine(x)",
            "Donated(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 372,
        "story_id": 124,
        "context": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines that have been donated."
        ],
        "context_fol": [
            "MountainRange(thePicurisMountains) \u2227 (In(thePicurisMountains, newMexico) \u2295 In(thePicurisMountains, texas))",
            "Visited(juanDeOnate, thePicurisMountains)",
            "In(hardingPegmatiteMine, thePicurisMountains) \u2227 Mine(hardingPegmatiteMine) \u2227 Donated(hardingPegmatiteMine)",
            "\u2200x \u2200y (Mine(x) \u2227 Donated(x) \u2227 In(x, y) \u2227 MountainRange(y) \u2192 \u00acIn(y, texas))"
        ],
        "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
        "question_fol": "\u2200x (In(hardingPegmatiteMine, x) \u2192 \u00ac(MountainRange(x) \u2227 In(x, newMexico)))",
        "answer": "B",
        "predicates_fol": [
            "MountainRange(x)",
            "In(x, y)",
            "Visited(x, y)",
            "Mine(x)",
            "Donated(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 527,
        "story_id": 183,
        "context": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "context_fol": [
            "\u2200x \u2200y (Man(x) \u2227 Man(y) \u2227 Taller(x, y) \u2192 CanBlock(x, y))",
            "\u2200x (Man(x) \u2227 SameClass(x, michael) \u2227 \u00ac(x=michael) \u2192 Taller(michael, x))",
            "\u2200x \u2200y \u2200z ((Taller(x, y) \u2227 Taller(y, z)) \u2192 Taller(x, z))",
            "Man(peter) \u2227 Taller(peter, michael)",
            "\u2200x (\u00acJumpWhenShooting(x) \u2192 CanBlock(michael, x))",
            "\u00acCanBlock(michael, windy)",
            "\u2200x (JumpWhenShooting(x) \u2192 GreatShooter(x))"
        ],
        "question": "Peter is shorter than a man in Michael's class.",
        "question_fol": "\u2203x (Man(x) \u2227 SameClass(x, michael) \u2227 \u00acTaller(peter, x))",
        "answer": "B",
        "predicates_fol": [
            "Man(x)",
            "Taller(x, y)",
            "CanBlock(x, y)",
            "JumpWhenShooting(x)",
            "GreatShooter(x)",
            "SameClass(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 528,
        "story_id": 183,
        "context": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "context_fol": [
            "\u2200x \u2200y (Man(x) \u2227 Man(y) \u2227 Taller(x, y) \u2192 CanBlock(x, y))",
            "\u2200x (Man(x) \u2227 SameClass(x, michael) \u2227 \u00ac(x=michael) \u2192 Taller(michael, x))",
            "\u2200x \u2200y \u2200z ((Taller(x, y) \u2227 Taller(y, z)) \u2192 Taller(x, z))",
            "Man(peter) \u2227 Taller(peter, michael)",
            "\u2200x (\u00acJumpWhenShooting(x) \u2192 CanBlock(michael, x))",
            "\u00acCanBlock(michael, windy)",
            "\u2200x (JumpWhenShooting(x) \u2192 GreatShooter(x))"
        ],
        "question": "Windy is a great shooter.",
        "question_fol": "GreatShooter(windy)",
        "answer": "A",
        "predicates_fol": [
            "Man(x)",
            "Taller(x, y)",
            "CanBlock(x, y)",
            "JumpWhenShooting(x)",
            "GreatShooter(x)",
            "SameClass(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 529,
        "story_id": 183,
        "context": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "context_fol": [
            "\u2200x \u2200y (Man(x) \u2227 Man(y) \u2227 Taller(x, y) \u2192 CanBlock(x, y))",
            "\u2200x (Man(x) \u2227 SameClass(x, michael) \u2227 \u00ac(x=michael) \u2192 Taller(michael, x))",
            "\u2200x \u2200y \u2200z ((Taller(x, y) \u2227 Taller(y, z)) \u2192 Taller(x, z))",
            "Man(peter) \u2227 Taller(peter, michael)",
            "\u2200x (\u00acJumpWhenShooting(x) \u2192 CanBlock(michael, x))",
            "\u00acCanBlock(michael, windy)",
            "\u2200x (JumpWhenShooting(x) \u2192 GreatShooter(x))"
        ],
        "question": "Peter can block Windy's shooting.",
        "question_fol": "CanBlock(peter, windy)",
        "answer": "C",
        "predicates_fol": [
            "Man(x)",
            "Taller(x, y)",
            "CanBlock(x, y)",
            "JumpWhenShooting(x)",
            "GreatShooter(x)",
            "SameClass(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 439,
        "story_id": 151,
        "context": [
            "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
            "Antarctica is located on the South Shetland Islands. ",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "context_fol": [
            "Cove(barutinCove) \u2227 NamedAfter(barutinCove, barutinSettlement) \u2227 LocatedIn(barutinSettlement, bulgaria)",
            "LocatedIn(barutinCove, snowIsland)",
            "LocatedIn(snowIsland, southShetlandIslands) \u2227 LocatedIn(greenwichIsland, southShetlandIslands) \u2227 LocatedIn(deceptionIsland, southShetlandIslands)",
            "LocatedIn(southShetlandIslands, antarctica)",
            "\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))"
        ],
        "question": "Barutin Cove is named after all islands in Antarctica.",
        "question_fol": "\u2200x (LocatedIn(x, antarctica) \u2192 NamedAfter(barutinCove, x))",
        "answer": "C",
        "predicates_fol": [
            "Cove(x)",
            "NamedAfter(x, y)",
            "LocatedIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 440,
        "story_id": 151,
        "context": [
            "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
            "Antarctica is located on the South Shetland Islands. ",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "context_fol": [
            "Cove(barutinCove) \u2227 NamedAfter(barutinCove, barutinSettlement) \u2227 LocatedIn(barutinSettlement, bulgaria)",
            "LocatedIn(barutinCove, snowIsland)",
            "LocatedIn(snowIsland, southShetlandIslands) \u2227 LocatedIn(greenwichIsland, southShetlandIslands) \u2227 LocatedIn(deceptionIsland, southShetlandIslands)",
            "LocatedIn(southShetlandIslands, antarctica)",
            "\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))"
        ],
        "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
        "question_fol": "\u2203x \u2203y (Cove(x) \u2227 LocatedIn(x, antarctica) \u2227 NameAfter(x, y) \u2227 LocatedIn(y, bulgaria))",
        "answer": "A",
        "predicates_fol": [
            "Cove(x)",
            "NamedAfter(x, y)",
            "LocatedIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 441,
        "story_id": 151,
        "context": [
            "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
            "Antarctica is located on the South Shetland Islands. ",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "context_fol": [
            "Cove(barutinCove) \u2227 NamedAfter(barutinCove, barutinSettlement) \u2227 LocatedIn(barutinSettlement, bulgaria)",
            "LocatedIn(barutinCove, snowIsland)",
            "LocatedIn(snowIsland, southShetlandIslands) \u2227 LocatedIn(greenwichIsland, southShetlandIslands) \u2227 LocatedIn(deceptionIsland, southShetlandIslands)",
            "LocatedIn(southShetlandIslands, antarctica)",
            "\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))"
        ],
        "question": "Barutin Cove is not located in Antarctica.",
        "question_fol": "\u00acLocatedIn(barutinCove, antarctica)",
        "answer": "B",
        "predicates_fol": [
            "Cove(x)",
            "NamedAfter(x, y)",
            "LocatedIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 739,
        "story_id": 295,
        "context": [
            "Some affection is love.",
            "Some love is positive."
        ],
        "context_fol": [
            "\u2203x (Affection(x) \u2227 Love(x))",
            "\u2203x (Love(x) \u2227 Positive(x))"
        ],
        "question": "Some affection is positive.",
        "question_fol": "\u2203x (Affection(x) \u2227 Positive(x))",
        "answer": "C",
        "predicates_fol": [
            "Affection(x)",
            "Love(x)",
            "Positive(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 786,
        "story_id": 315,
        "context": [
            "If something can transport multiple passengers, then they are not one-seaters.",
            "All Tesla Model 3 can transport multiple passengers.",
            "All single-seat electric cars are one-seaters.",
            "All Solo EV cars are single-seat electric cars. ",
            "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
        ],
        "context_fol": [
            "\u2200x (\u2203y \u2203z (Passenger(y) \u2227 Passenger(z) \u2227 Transport(x, y) \u2227 Transport(x, y) \u2227 \u00ac(y=z)) \u2192 \u00acOneSeater(x))",
            "\u2200x (TeslaModel3(x) \u2192 (\u2203y \u2203z (Passenger(y) \u2227 Passenger(z) \u2227 Transport(x, y) \u2227 Transport(x, y) \u2227 \u00ac(y=z)))",
            "\u2200x (SingleSeat(x) \u2227 ElectricCar(x) \u2192 OneSeater(x))",
            "\u2200x (SoloEV(x) \u2227 Car(x) \u2192 SingleSeat(x) \u2227 ElectricCar(x))",
            "\u00acTeslaModel3(johnsCar) \u2192 \u00ac(TeslaModel3(johnsCar) \u2228 (SingleSeat(x) \u2227 ElectricCar(johnsCar)))"
        ],
        "question": "John's car is a Tesla Model 3.",
        "question_fol": "TeslaModel3(johnsCar)",
        "answer": "C",
        "predicates_fol": [
            "SingleSeat(x)",
            "Passenger(x)",
            "Transport(x)",
            "ElectricCar(x)",
            "OneSeater(x)",
            "SoloEV(x)",
            "Car(x)",
            "TeslaModel3(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 787,
        "story_id": 315,
        "context": [
            "If something can transport multiple passengers, then they are not one-seaters.",
            "All Tesla Model 3 can transport multiple passengers.",
            "All single-seat electric cars are one-seaters.",
            "All Solo EV cars are single-seat electric cars. ",
            "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
        ],
        "context_fol": [
            "\u2200x (\u2203y \u2203z (Passenger(y) \u2227 Passenger(z) \u2227 Transport(x, y) \u2227 Transport(x, y) \u2227 \u00ac(y=z)) \u2192 \u00acOneSeater(x))",
            "\u2200x (TeslaModel3(x) \u2192 (\u2203y \u2203z (Passenger(y) \u2227 Passenger(z) \u2227 Transport(x, y) \u2227 Transport(x, y) \u2227 \u00ac(y=z)))",
            "\u2200x (SingleSeat(x) \u2227 ElectricCar(x) \u2192 OneSeater(x))",
            "\u2200x (SoloEV(x) \u2227 Car(x) \u2192 SingleSeat(x) \u2227 ElectricCar(x))",
            "\u00acTeslaModel3(johnsCar) \u2192 \u00ac(TeslaModel3(johnsCar) \u2228 (SingleSeat(x) \u2227 ElectricCar(johnsCar)))"
        ],
        "question": "John's car is a Solo EV.",
        "question_fol": "SoloEV(johnsCar) \u2227 Car(johnsCar)",
        "answer": "B",
        "predicates_fol": [
            "SingleSeat(x)",
            "Passenger(x)",
            "Transport(x)",
            "ElectricCar(x)",
            "OneSeater(x)",
            "SoloEV(x)",
            "Car(x)",
            "TeslaModel3(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 788,
        "story_id": 315,
        "context": [
            "If something can transport multiple passengers, then they are not one-seaters.",
            "All Tesla Model 3 can transport multiple passengers.",
            "All single-seat electric cars are one-seaters.",
            "All Solo EV cars are single-seat electric cars. ",
            "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
        ],
        "context_fol": [
            "\u2200x (\u2203y \u2203z (Passenger(y) \u2227 Passenger(z) \u2227 Transport(x, y) \u2227 Transport(x, y) \u2227 \u00ac(y=z)) \u2192 \u00acOneSeater(x))",
            "\u2200x (TeslaModel3(x) \u2192 (\u2203y \u2203z (Passenger(y) \u2227 Passenger(z) \u2227 Transport(x, y) \u2227 Transport(x, y) \u2227 \u00ac(y=z)))",
            "\u2200x (SingleSeat(x) \u2227 ElectricCar(x) \u2192 OneSeater(x))",
            "\u2200x (SoloEV(x) \u2227 Car(x) \u2192 SingleSeat(x) \u2227 ElectricCar(x))",
            "\u00acTeslaModel3(johnsCar) \u2192 \u00ac(TeslaModel3(johnsCar) \u2228 (SingleSeat(x) \u2227 ElectricCar(johnsCar)))"
        ],
        "question": "John's car is not a Solo EV.",
        "question_fol": "\u00ac(SoloEV(johnsCar) \u2227 Car(johnsCar))",
        "answer": "A",
        "predicates_fol": [
            "SingleSeat(x)",
            "Passenger(x)",
            "Transport(x)",
            "ElectricCar(x)",
            "OneSeater(x)",
            "SoloEV(x)",
            "Car(x)",
            "TeslaModel3(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1348,
        "story_id": 467,
        "context": [
            "All of Peter's pets that are mammals are also animals.",
            "All monkeys are mammals. ",
            "Peter's pets are all either monkeys or birds. ",
            "Peter's birds can fly.",
            "All animals that are Peter's pets can breathe.",
            "If Peter's pet can fly, then it has wings.",
            "Rock is Peter's pet.",
            "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
        ],
        "context_fol": [
            "\u2200x (PetersPet(x) \u2227 Mammal(x) \u2192 Animal(x))",
            "\u2200x (Monkey(x) \u2192 Mammal(x))",
            "\u2200x (PetersPet(x) \u2192 Monkey(x) \u2295  Bird(x))",
            "\u2200x (Bird(x) \u2192 CanFly(x))",
            "\u2200x (PetersPet(x) \u2227 Animal(x) \u2192 Breathe(x))",
            "\u2200x (PetersPet(x) \u2227 CanFly(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
            "PeterSPet(rock)",
            "CanFly(rock) \u2228 Bird(rock) \u2228 \u00acBreathe(rock)"
        ],
        "question": "Rock is a monkey.",
        "question_fol": "Monkey(rock)",
        "answer": "C",
        "predicates_fol": [
            "PetersPet(x)",
            "Mammal(x)",
            "Animal(x)",
            "Monkey(x)",
            "Bird(x)",
            "CanFly(x)",
            "Breathe(x)",
            "PeterSPet(x)",
            "Wing(x)",
            "Have(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1349,
        "story_id": 467,
        "context": [
            "All of Peter's pets that are mammals are also animals.",
            "All monkeys are mammals. ",
            "Peter's pets are all either monkeys or birds. ",
            "Peter's birds can fly.",
            "All animals that are Peter's pets can breathe.",
            "If Peter's pet can fly, then it has wings.",
            "Rock is Peter's pet.",
            "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
        ],
        "context_fol": [
            "\u2200x (PetersPet(x) \u2227 Mammal(x) \u2192 Animal(x))",
            "\u2200x (Monkey(x) \u2192 Mammal(x))",
            "\u2200x (PetersPet(x) \u2192 Monkey(x) \u2295  Bird(x))",
            "\u2200x (Bird(x) \u2192 CanFly(x))",
            "\u2200x (PetersPet(x) \u2227 Animal(x) \u2192 Breathe(x))",
            "\u2200x (PetersPet(x) \u2227 CanFly(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
            "PeterSPet(rock)",
            "CanFly(rock) \u2228 Bird(rock) \u2228 \u00acBreathe(rock)"
        ],
        "question": "Rock has wings.",
        "question_fol": "\u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(rock, y) \u2227 Have(rock, z))",
        "answer": "A",
        "predicates_fol": [
            "PetersPet(x)",
            "Mammal(x)",
            "Animal(x)",
            "Monkey(x)",
            "Bird(x)",
            "CanFly(x)",
            "Breathe(x)",
            "PeterSPet(x)",
            "Wing(x)",
            "Have(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1350,
        "story_id": 467,
        "context": [
            "All of Peter's pets that are mammals are also animals.",
            "All monkeys are mammals. ",
            "Peter's pets are all either monkeys or birds. ",
            "Peter's birds can fly.",
            "All animals that are Peter's pets can breathe.",
            "If Peter's pet can fly, then it has wings.",
            "Rock is Peter's pet.",
            "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
        ],
        "context_fol": [
            "\u2200x (PetersPet(x) \u2227 Mammal(x) \u2192 Animal(x))",
            "\u2200x (Monkey(x) \u2192 Mammal(x))",
            "\u2200x (PetersPet(x) \u2192 Monkey(x) \u2295  Bird(x))",
            "\u2200x (Bird(x) \u2192 CanFly(x))",
            "\u2200x (PetersPet(x) \u2227 Animal(x) \u2192 Breathe(x))",
            "\u2200x (PetersPet(x) \u2227 CanFly(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
            "PeterSPet(rock)",
            "CanFly(rock) \u2228 Bird(rock) \u2228 \u00acBreathe(rock)"
        ],
        "question": "Rock does not have wings.",
        "question_fol": "\u00ac(\u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(rock, y) \u2227 Have(rock, z)))",
        "answer": "B",
        "predicates_fol": [
            "PetersPet(x)",
            "Mammal(x)",
            "Animal(x)",
            "Monkey(x)",
            "Bird(x)",
            "CanFly(x)",
            "Breathe(x)",
            "PeterSPet(x)",
            "Wing(x)",
            "Have(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 846,
        "story_id": 330,
        "context": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "context_fol": [
            "\u2200x (Make(x, weddingPlan) \u2192 Engaged(x))",
            "\u2200x (\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(x, y, wedding) \u2227 InviteToComeTo(x, z, wedding)) \u2192 Make(x, weddingPlan))",
            "\u2200x (Have(x, wellAttendedWedding) \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(x, y, wedding) \u2227 InviteToComeTo(x, z, wedding)))",
            "\u2203x (Have(x, wellAttendedWedding) \u2227 Have(x, largerFamily))",
            "Engaged(john) \u2192 \u00ac(\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(john, y, wedding) \u2227 Invite(john, z, comeTo, wedding))) \u2227 Make(john, weddingPlan)",
            "Have(john, largerFamily) \u2192 Have(john, wellAttendedWedding) \u2295 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 Invite(x, y, comeTo, wedding) \u2227 InviteToComeTo(x, z, wedding))"
        ],
        "question": "John has a larger family.",
        "question_fol": "Have(john, largeFamily)",
        "answer": "B",
        "predicates_fol": [
            "Make(x, y)",
            "InviteToComeTo(x, y, z)",
            "Invite(x, y, z, w)",
            "Engaged(x)",
            "Have(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 847,
        "story_id": 330,
        "context": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "context_fol": [
            "\u2200x (Make(x, weddingPlan) \u2192 Engaged(x))",
            "\u2200x (\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(x, y, wedding) \u2227 InviteToComeTo(x, z, wedding)) \u2192 Make(x, weddingPlan))",
            "\u2200x (Have(x, wellAttendedWedding) \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(x, y, wedding) \u2227 InviteToComeTo(x, z, wedding)))",
            "\u2203x (Have(x, wellAttendedWedding) \u2227 Have(x, largerFamily))",
            "Engaged(john) \u2192 \u00ac(\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(john, y, wedding) \u2227 Invite(john, z, comeTo, wedding))) \u2227 Make(john, weddingPlan)",
            "Have(john, largerFamily) \u2192 Have(john, wellAttendedWedding) \u2295 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 Invite(x, y, comeTo, wedding) \u2227 InviteToComeTo(x, z, wedding))"
        ],
        "question": "John does not have a larger family.",
        "question_fol": "\u00acHave(john, largerFamily)",
        "answer": "A",
        "predicates_fol": [
            "Make(x, y)",
            "InviteToComeTo(x, y, z)",
            "Invite(x, y, z, w)",
            "Engaged(x)",
            "Have(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 848,
        "story_id": 330,
        "context": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "context_fol": [
            "\u2200x (Make(x, weddingPlan) \u2192 Engaged(x))",
            "\u2200x (\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(x, y, wedding) \u2227 InviteToComeTo(x, z, wedding)) \u2192 Make(x, weddingPlan))",
            "\u2200x (Have(x, wellAttendedWedding) \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(x, y, wedding) \u2227 InviteToComeTo(x, z, wedding)))",
            "\u2203x (Have(x, wellAttendedWedding) \u2227 Have(x, largerFamily))",
            "Engaged(john) \u2192 \u00ac(\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(john, y, wedding) \u2227 Invite(john, z, comeTo, wedding))) \u2227 Make(john, weddingPlan)",
            "Have(john, largerFamily) \u2192 Have(john, wellAttendedWedding) \u2295 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 Invite(x, y, comeTo, wedding) \u2227 InviteToComeTo(x, z, wedding))"
        ],
        "question": "John is engaged.",
        "question_fol": "Engaged(john)",
        "answer": "C",
        "predicates_fol": [
            "Make(x, y)",
            "InviteToComeTo(x, y, z)",
            "Invite(x, y, z, w)",
            "Engaged(x)",
            "Have(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 849,
        "story_id": 330,
        "context": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "context_fol": [
            "\u2200x (Make(x, weddingPlan) \u2192 Engaged(x))",
            "\u2200x (\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(x, y, wedding) \u2227 InviteToComeTo(x, z, wedding)) \u2192 Make(x, weddingPlan))",
            "\u2200x (Have(x, wellAttendedWedding) \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(x, y, wedding) \u2227 InviteToComeTo(x, z, wedding)))",
            "\u2203x (Have(x, wellAttendedWedding) \u2227 Have(x, largerFamily))",
            "Engaged(john) \u2192 \u00ac(\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(john, y, wedding) \u2227 Invite(john, z, comeTo, wedding))) \u2227 Make(john, weddingPlan)",
            "Have(john, largerFamily) \u2192 Have(john, wellAttendedWedding) \u2295 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 Invite(x, y, comeTo, wedding) \u2227 InviteToComeTo(x, z, wedding))"
        ],
        "question": "John neither has a larger family nor does he invite others to his wedding.",
        "question_fol": "\u00acHave(john, largerFamily) \u2227 \u00ac(\u2203y \u2203z (\u00ac(y=john) \u2227 \u00ac(z=john) \u2227 \u00ac(y=z) \u2227 InviteToComeTo(john, y, wedding) \u2227 InviteToComeTo(john, z, wedding)))",
        "answer": "A",
        "predicates_fol": [
            "Make(x, y)",
            "InviteToComeTo(x, y, z)",
            "Invite(x, y, z, w)",
            "Engaged(x)",
            "Have(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 74,
        "story_id": 26,
        "context": [
            "Some mammals have teeth.",
            "Platypuses have no teeth.",
            "Platypuses are mammals. ",
            "Humans have teeth."
        ],
        "context_fol": [
            "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 (\u00ac(x=y)) \u2227 Have(x, teeth) \u2227 Have(y, teeth))",
            "\u00acHave(platypus, teeth)",
            "Mammal(platypus)",
            "Have(humans, teeth)"
        ],
        "question": "Platypuses are mammals with no teeth.",
        "question_fol": "Mammal(platypus) \u2227 (\u00acHave(platypus, teeth))",
        "answer": "A",
        "predicates_fol": [
            "Have(x, y)",
            "Mammal(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 75,
        "story_id": 26,
        "context": [
            "Some mammals have teeth.",
            "Platypuses have no teeth.",
            "Platypuses are mammals. ",
            "Humans have teeth."
        ],
        "context_fol": [
            "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 (\u00ac(x=y)) \u2227 Have(x, teeth) \u2227 Have(y, teeth))",
            "\u00acHave(platypus, teeth)",
            "Mammal(platypus)",
            "Have(humans, teeth)"
        ],
        "question": "Platypuses are reptiles.",
        "question_fol": "Reptile(platypus)",
        "answer": "C",
        "predicates_fol": [
            "Have(x, y)",
            "Mammal(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 76,
        "story_id": 26,
        "context": [
            "Some mammals have teeth.",
            "Platypuses have no teeth.",
            "Platypuses are mammals. ",
            "Humans have teeth."
        ],
        "context_fol": [
            "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 (\u00ac(x=y)) \u2227 Have(x, teeth) \u2227 Have(y, teeth))",
            "\u00acHave(platypus, teeth)",
            "Mammal(platypus)",
            "Have(humans, teeth)"
        ],
        "question": "Humans are mammals.",
        "question_fol": "Mammal(humans)",
        "answer": "C",
        "predicates_fol": [
            "Have(x, y)",
            "Mammal(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 578,
        "story_id": 203,
        "context": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "context_fol": [
            "\u2200x (Plunger(x) \u2192 Suck(x))",
            "\u2200x (Vacuum(x) \u2192 Suck(x))",
            "\u2200x (Vampire(x) \u2192 Suck(x))",
            "Vacuum(space)",
            "HouseholdAppliance(duster) \u2227 \u00acSuck(duster)"
        ],
        "question": "Space sucks.",
        "question_fol": "Suck(space)",
        "answer": "A",
        "predicates_fol": [
            "Plunger(x)",
            "Suck(x)",
            "Vacuum(x)",
            "Vampire(x)",
            "HouseholdAppliance(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 579,
        "story_id": 203,
        "context": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "context_fol": [
            "\u2200x (Plunger(x) \u2192 Suck(x))",
            "\u2200x (Vacuum(x) \u2192 Suck(x))",
            "\u2200x (Vampire(x) \u2192 Suck(x))",
            "Vacuum(space)",
            "HouseholdAppliance(duster) \u2227 \u00acSuck(duster)"
        ],
        "question": "Space is a vampire.",
        "question_fol": "Vampire(space)",
        "answer": "C",
        "predicates_fol": [
            "Plunger(x)",
            "Suck(x)",
            "Vacuum(x)",
            "Vampire(x)",
            "HouseholdAppliance(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 580,
        "story_id": 203,
        "context": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "context_fol": [
            "\u2200x (Plunger(x) \u2192 Suck(x))",
            "\u2200x (Vacuum(x) \u2192 Suck(x))",
            "\u2200x (Vampire(x) \u2192 Suck(x))",
            "Vacuum(space)",
            "HouseholdAppliance(duster) \u2227 \u00acSuck(duster)"
        ],
        "question": "If something is a household appliance, it sucks.",
        "question_fol": "\u2200x (HouseHoldApp(x) \u2192 Suck(x))",
        "answer": "B",
        "predicates_fol": [
            "Plunger(x)",
            "Suck(x)",
            "Vacuum(x)",
            "Vampire(x)",
            "HouseholdAppliance(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 388,
        "story_id": 131,
        "context": [
            "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
            "Unsupervised learning algorithms do not require labeled data.",
            "The state-of-the-art text summarization model is trained with machine learning algorithms.",
            "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
            "The Machine Learning algorithm for training text summarization models requires labeled data."
        ],
        "context_fol": [
            "\u2200x (MachineLearningAlgorithm(x) \u2192 SupervisedLearningAlgorithm(x) \u2228 UnsupervisedLearningAlgorithm(x) \u2228 ReinforcementLearningAlgorithm(x))",
            "\u2200x (UnsupervisedLearningAlgorithm(x) \u2192 \u00acRequire(x, labeledData))",
            "\u2200x (TrainedWith(stateOfTheArtTextSummarizationModel, x) \u2192 MachineLearningAlgorithm(x))",
            "\u2200x (ReinforcementLearningAlgorithm(x) \u2192 \u00acTrainedWith(stateOfTheArtTextSummarizationModel, x))",
            "\u2200x ((MachineLearningAlgorithm(x) \u2227 TrainedWith(stateOfTheArtTextSummarizationModel, x)) \u2192 Require(x, labeledData))"
        ],
        "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
        "question_fol": "\u2203x (SupervisedLearningAlgorithm(x) \u2227 TrainedWith(stateOfTheArtTextSummarizationModel, x))",
        "answer": "A",
        "predicates_fol": [
            "MachineLearningAlgorithm(x)",
            "SupervisedLearningAlgorithm(x)",
            "UnsupervisedLearningAlgorithm(x)",
            "ReinforcementLearningAlgorithm(x)",
            "Require(x, y)",
            "TrainedWith(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 389,
        "story_id": 131,
        "context": [
            "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
            "Unsupervised learning algorithms do not require labeled data.",
            "The state-of-the-art text summarization model is trained with machine learning algorithms.",
            "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
            "The Machine Learning algorithm for training text summarization models requires labeled data."
        ],
        "context_fol": [
            "\u2200x (MachineLearningAlgorithm(x) \u2192 SupervisedLearningAlgorithm(x) \u2228 UnsupervisedLearningAlgorithm(x) \u2228 ReinforcementLearningAlgorithm(x))",
            "\u2200x (UnsupervisedLearningAlgorithm(x) \u2192 \u00acRequire(x, labeledData))",
            "\u2200x (TrainedWith(stateOfTheArtTextSummarizationModel, x) \u2192 MachineLearningAlgorithm(x))",
            "\u2200x (ReinforcementLearningAlgorithm(x) \u2192 \u00acTrainedWith(stateOfTheArtTextSummarizationModel, x))",
            "\u2200x ((MachineLearningAlgorithm(x) \u2227 TrainedWith(stateOfTheArtTextSummarizationModel, x)) \u2192 Require(x, labeledData))"
        ],
        "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
        "question_fol": "\u2203x (UnsupervisedLearningAlgorithm(x) \u2227 TrainedWith(stateOfTheArtTextSummarizationModel, x))",
        "answer": "B",
        "predicates_fol": [
            "MachineLearningAlgorithm(x)",
            "SupervisedLearningAlgorithm(x)",
            "UnsupervisedLearningAlgorithm(x)",
            "ReinforcementLearningAlgorithm(x)",
            "Require(x, y)",
            "TrainedWith(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1327,
        "story_id": 460,
        "context": [
            "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
            "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
            "If a film is rated General Audience, then it is appropriate for people of all ages.",
            "All family-friendly animated films are rated General Audience.",
            "All movies in the Frozen series are family-friendly animated films.",
            "\u201cHachi: A dog\u2019s Tale\u201d is a film.",
            "\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. "
        ],
        "context_fol": [
            "\u2200x (Film(x) \u2227 Rated(x, adultsOnly) \u2192 CanWatchWithout(children, x, guidanceFromParents))",
            "\u2200x (Film(x) \u2227 Contain(x, excessiveEroticContent) \u2227 Contain(x, excessiveViolentContent) \u2192 \u00acCanWatchWithout(children, x, guidanceFromParents))",
            "\u2200x (Film(x) \u2227 Rated(x, generalAudience) \u2192 AppropriateFor(x, peopleOfAllAges))",
            "\u2200x (Film(x) \u2227 FamilyFriendly(x) \u2227 Animated(x) \u2192 Rated(x, generalAudience))",
            "\u2200x (Film(x) \u2227 InfrozenSeries(x) \u2192 FamilyFriendly(x) \u2227 Animated(x))",
            "Film(hachiAdogsTale)",
            "(FamilyFriendly(hachiAdogsTale) \u2227 Animated(hachiAdogsTale)) \u2295 Rated(hachiAdogsTale, adultsOnly)"
        ],
        "question": "\"Hachi: A dog's Tale\" is rated General Audience.",
        "question_fol": "Rated(x, generalAudience)",
        "answer": "C",
        "predicates_fol": [
            "Film(x)",
            "Rated(x, y)",
            "CanWatchWithout(x, y)",
            "Contain(x, y)",
            "AppropriateFor(x, y)",
            "FamilyFriendly(x)",
            "Animated(x)",
            "InfrozenSeries(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1328,
        "story_id": 460,
        "context": [
            "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
            "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
            "If a film is rated General Audience, then it is appropriate for people of all ages.",
            "All family-friendly animated films are rated General Audience.",
            "All movies in the Frozen series are family-friendly animated films.",
            "\u201cHachi: A dog\u2019s Tale\u201d is a film.",
            "\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. "
        ],
        "context_fol": [
            "\u2200x (Film(x) \u2227 Rated(x, adultsOnly) \u2192 CanWatchWithout(children, x, guidanceFromParents))",
            "\u2200x (Film(x) \u2227 Contain(x, excessiveEroticContent) \u2227 Contain(x, excessiveViolentContent) \u2192 \u00acCanWatchWithout(children, x, guidanceFromParents))",
            "\u2200x (Film(x) \u2227 Rated(x, generalAudience) \u2192 AppropriateFor(x, peopleOfAllAges))",
            "\u2200x (Film(x) \u2227 FamilyFriendly(x) \u2227 Animated(x) \u2192 Rated(x, generalAudience))",
            "\u2200x (Film(x) \u2227 InfrozenSeries(x) \u2192 FamilyFriendly(x) \u2227 Animated(x))",
            "Film(hachiAdogsTale)",
            "(FamilyFriendly(hachiAdogsTale) \u2227 Animated(hachiAdogsTale)) \u2295 Rated(hachiAdogsTale, adultsOnly)"
        ],
        "question": "\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.",
        "question_fol": "(Contain(x, excessiveEroticContent) \u2227 Contain(x, excessiveViolentContent)) \u2228 InfrozenSeries(excessiveViolentContent)",
        "answer": "B",
        "predicates_fol": [
            "Film(x)",
            "Rated(x, y)",
            "CanWatchWithout(x, y)",
            "Contain(x, y)",
            "AppropriateFor(x, y)",
            "FamilyFriendly(x)",
            "Animated(x)",
            "InfrozenSeries(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1329,
        "story_id": 460,
        "context": [
            "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
            "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
            "If a film is rated General Audience, then it is appropriate for people of all ages.",
            "All family-friendly animated films are rated General Audience.",
            "All movies in the Frozen series are family-friendly animated films.",
            "\u201cHachi: A dog\u2019s Tale\u201d is a film.",
            "\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. "
        ],
        "context_fol": [
            "\u2200x (Film(x) \u2227 Rated(x, adultsOnly) \u2192 CanWatchWithout(children, x, guidanceFromParents))",
            "\u2200x (Film(x) \u2227 Contain(x, excessiveEroticContent) \u2227 Contain(x, excessiveViolentContent) \u2192 \u00acCanWatchWithout(children, x, guidanceFromParents))",
            "\u2200x (Film(x) \u2227 Rated(x, generalAudience) \u2192 AppropriateFor(x, peopleOfAllAges))",
            "\u2200x (Film(x) \u2227 FamilyFriendly(x) \u2227 Animated(x) \u2192 Rated(x, generalAudience))",
            "\u2200x (Film(x) \u2227 InfrozenSeries(x) \u2192 FamilyFriendly(x) \u2227 Animated(x))",
            "Film(hachiAdogsTale)",
            "(FamilyFriendly(hachiAdogsTale) \u2227 Animated(hachiAdogsTale)) \u2295 Rated(hachiAdogsTale, adultsOnly)"
        ],
        "question": "\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.",
        "question_fol": "\u00ac((Contain(x, excessiveEroticContent) \u2227 Contain(x, excessiveViolentContent)) \u2295 InfrozenSeries(excessiveViolentContent))",
        "answer": "A",
        "predicates_fol": [
            "Film(x)",
            "Rated(x, y)",
            "CanWatchWithout(x, y)",
            "Contain(x, y)",
            "AppropriateFor(x, y)",
            "FamilyFriendly(x)",
            "Animated(x)",
            "InfrozenSeries(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 133,
        "story_id": 46,
        "context": [
            "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
            "Heck cattle were bred back in the 1920s to resemble the aurochs.",
            "Heck cattle are animals.",
            "Aurochs are animals.",
            "Some animals to be bred back resemble extinct animals."
        ],
        "context_fol": [
            "\u2200x (BreedingBack(x) \u2192 (ArtificialSelection(x) \u2227 DeliberateSelectiveBreedingOfDomesticAnimals(x)))",
            "\u2203x \u2203y (HeckCattle(x) \u2227 BreedingBack(x) \u2227 Auroch(y) \u2227 Resemble(x, y))",
            "\u2200x (HeckCattle(x) \u2192 Animal(x))",
            "\u2200x (Auroch(x) \u2192 Animal(x))",
            "\u2203x \u2203y (Animal(x) \u2227 Animal(y) \u2227 (\u00ac(x=y)) \u2227 BreedingBack(x) \u2227 BreedingBack(y) \u2227 (\u2203w(Dead(w) \u2227 Resemble(x, w)) \u2227 (\u00ac(w=z)) \u2227 (\u2203z(Dead(z) \u2227 Resemble(y, z))))"
        ],
        "question": "Some Heck cattle are artificially selected.",
        "question_fol": "\u2203x \u2203y(HeckCattle(x) \u2227 ArtificialSelection(x) \u2227 (\u00ac(x=y)) \u2227 HeckCattle(y) \u2227 ArtificialSelection(y))",
        "answer": "A",
        "predicates_fol": [
            "BreedingBack(x)",
            "Dead(x)",
            "ArtificialSelection(x)",
            "DeliberateSelectiveBreedingOfDomesticAnimals(x)",
            "HeckCattle(x)",
            "Auroch(x)",
            "Resemble(x, y)",
            "Animal(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 134,
        "story_id": 46,
        "context": [
            "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
            "Heck cattle were bred back in the 1920s to resemble the aurochs.",
            "Heck cattle are animals.",
            "Aurochs are animals.",
            "Some animals to be bred back resemble extinct animals."
        ],
        "context_fol": [
            "\u2200x (BreedingBack(x) \u2192 (ArtificialSelection(x) \u2227 DeliberateSelectiveBreedingOfDomesticAnimals(x)))",
            "\u2203x \u2203y (HeckCattle(x) \u2227 BreedingBack(x) \u2227 Auroch(y) \u2227 Resemble(x, y))",
            "\u2200x (HeckCattle(x) \u2192 Animal(x))",
            "\u2200x (Auroch(x) \u2192 Animal(x))",
            "\u2203x \u2203y (Animal(x) \u2227 Animal(y) \u2227 (\u00ac(x=y)) \u2227 BreedingBack(x) \u2227 BreedingBack(y) \u2227 (\u2203w(Dead(w) \u2227 Resemble(x, w)) \u2227 (\u00ac(w=z)) \u2227 (\u2203z(Dead(z) \u2227 Resemble(y, z))))"
        ],
        "question": "Aurochs are extinct.",
        "question_fol": "\u2200x (Auroch(x) \u2192 Dead(x))",
        "answer": "C",
        "predicates_fol": [
            "BreedingBack(x)",
            "Dead(x)",
            "ArtificialSelection(x)",
            "DeliberateSelectiveBreedingOfDomesticAnimals(x)",
            "HeckCattle(x)",
            "Auroch(x)",
            "Resemble(x, y)",
            "Animal(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1410,
        "story_id": 483,
        "context": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "context_fol": [
            "\u2200x (CanRegisterToVoteIn(x, unitedStates) \u2192 CanParticipateIn(x, 2024UnitedStatesElection))",
            "\u2200x (Have(x, unitedStatesCitizenship) \u2192 CanRegisterToVoteIn(x, unitedStates))",
            "\u2200x (Have(x, unitedStatesCitizenship) \u2228 Have(x, taiwaneseCitizenship))",
            "\u2200x (Russian(x) \u2227 FederationOfficial(x) \u2192 \u00acHave(x, taiwaneseCitizenship))",
            "\u00acHave(vladimir, taiwaneseCitizenship) \u2227 \u00acManagerAt(vladimir, gazprom)",
            "(Russian(ekaterina) \u2227 FederationOfficial(ekaterina)) \u2228 CanRegisterToVoteIn(ekaterina, unitedStates)"
        ],
        "question": "Vladimir is a Russian federation official",
        "question_fol": "Russian(vladimir) \u2227 FederationOfficial(vladimir)",
        "answer": "C",
        "predicates_fol": [
            "CanRegisterToVoteIn(x, y)",
            "CanParticipateIn(x, y)",
            "Have(x, y)",
            "Russian(x)",
            "FederationOfficial(x)",
            "ManagerAt(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1411,
        "story_id": 483,
        "context": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "context_fol": [
            "\u2200x (CanRegisterToVoteIn(x, unitedStates) \u2192 CanParticipateIn(x, 2024UnitedStatesElection))",
            "\u2200x (Have(x, unitedStatesCitizenship) \u2192 CanRegisterToVoteIn(x, unitedStates))",
            "\u2200x (Have(x, unitedStatesCitizenship) \u2228 Have(x, taiwaneseCitizenship))",
            "\u2200x (Russian(x) \u2227 FederationOfficial(x) \u2192 \u00acHave(x, taiwaneseCitizenship))",
            "\u00acHave(vladimir, taiwaneseCitizenship) \u2227 \u00acManagerAt(vladimir, gazprom)",
            "(Russian(ekaterina) \u2227 FederationOfficial(ekaterina)) \u2228 CanRegisterToVoteIn(ekaterina, unitedStates)"
        ],
        "question": "Vladimir is not a Russian federation official",
        "question_fol": "\u00ac(Russian(vladimir) \u2227 FederationOfficial(vladimir))",
        "answer": "C",
        "predicates_fol": [
            "CanRegisterToVoteIn(x, y)",
            "CanParticipateIn(x, y)",
            "Have(x, y)",
            "Russian(x)",
            "FederationOfficial(x)",
            "ManagerAt(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1412,
        "story_id": 483,
        "context": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "context_fol": [
            "\u2200x (CanRegisterToVoteIn(x, unitedStates) \u2192 CanParticipateIn(x, 2024UnitedStatesElection))",
            "\u2200x (Have(x, unitedStatesCitizenship) \u2192 CanRegisterToVoteIn(x, unitedStates))",
            "\u2200x (Have(x, unitedStatesCitizenship) \u2228 Have(x, taiwaneseCitizenship))",
            "\u2200x (Russian(x) \u2227 FederationOfficial(x) \u2192 \u00acHave(x, taiwaneseCitizenship))",
            "\u00acHave(vladimir, taiwaneseCitizenship) \u2227 \u00acManagerAt(vladimir, gazprom)",
            "(Russian(ekaterina) \u2227 FederationOfficial(ekaterina)) \u2228 CanRegisterToVoteIn(ekaterina, unitedStates)"
        ],
        "question": "Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.",
        "question_fol": "CanParticipateIn(ekaterina, 2024UnitedStatesElection) \u2228 ManagerAt(ekaterina, gazprom)",
        "answer": "A",
        "predicates_fol": [
            "CanRegisterToVoteIn(x, y)",
            "CanParticipateIn(x, y)",
            "Have(x, y)",
            "Russian(x)",
            "FederationOfficial(x)",
            "ManagerAt(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1413,
        "story_id": 483,
        "context": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "context_fol": [
            "\u2200x (CanRegisterToVoteIn(x, unitedStates) \u2192 CanParticipateIn(x, 2024UnitedStatesElection))",
            "\u2200x (Have(x, unitedStatesCitizenship) \u2192 CanRegisterToVoteIn(x, unitedStates))",
            "\u2200x (Have(x, unitedStatesCitizenship) \u2228 Have(x, taiwaneseCitizenship))",
            "\u2200x (Russian(x) \u2227 FederationOfficial(x) \u2192 \u00acHave(x, taiwaneseCitizenship))",
            "\u00acHave(vladimir, taiwaneseCitizenship) \u2227 \u00acManagerAt(vladimir, gazprom)",
            "(Russian(ekaterina) \u2227 FederationOfficial(ekaterina)) \u2228 CanRegisterToVoteIn(ekaterina, unitedStates)"
        ],
        "question": "Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.",
        "question_fol": "CanParticipateIn(ekaterina, 2024UnitedStatesElection) \u2295 ManagerAt(vladimir, gazprom)",
        "answer": "A",
        "predicates_fol": [
            "CanRegisterToVoteIn(x, y)",
            "CanParticipateIn(x, y)",
            "Have(x, y)",
            "Russian(x)",
            "FederationOfficial(x)",
            "ManagerAt(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1414,
        "story_id": 483,
        "context": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "context_fol": [
            "\u2200x (CanRegisterToVoteIn(x, unitedStates) \u2192 CanParticipateIn(x, 2024UnitedStatesElection))",
            "\u2200x (Have(x, unitedStatesCitizenship) \u2192 CanRegisterToVoteIn(x, unitedStates))",
            "\u2200x (Have(x, unitedStatesCitizenship) \u2228 Have(x, taiwaneseCitizenship))",
            "\u2200x (Russian(x) \u2227 FederationOfficial(x) \u2192 \u00acHave(x, taiwaneseCitizenship))",
            "\u00acHave(vladimir, taiwaneseCitizenship) \u2227 \u00acManagerAt(vladimir, gazprom)",
            "(Russian(ekaterina) \u2227 FederationOfficial(ekaterina)) \u2228 CanRegisterToVoteIn(ekaterina, unitedStates)"
        ],
        "question": "It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.",
        "question_fol": "CanRegisterToVoteIn(ekaterina, unitedStates) \u2227 CanParticipateIn(vladimir, 2024UnitedStatesElection)",
        "answer": "B",
        "predicates_fol": [
            "CanRegisterToVoteIn(x, y)",
            "CanParticipateIn(x, y)",
            "Have(x, y)",
            "Russian(x)",
            "FederationOfficial(x)",
            "ManagerAt(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 243,
        "story_id": 80,
        "context": [
            "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "context_fol": [
            "PublishingHouse(newVesselPress) \u2227 SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)",
            "\u2200x ((Book(x) \u2227 PublishedBy(x, newVesselPress)) \u2192 In(x, english))",
            "Book(neapolitanChronicles) \u2227 PublishedBy(neapolitanChronicles, newVesselPress)",
            "TranslatedFrom(neapolitanChronicles, italian)",
            "Book(palaceOfFlies) \u2227 PublishedBy(palaceOfFlies, newVesselPress)"
        ],
        "question": "Neapolitan Chronicles is an English book.",
        "question_fol": "Book(neapolitanChronicles) \u2227 In(neapolitanChronicles, english)",
        "answer": "A",
        "predicates_fol": [
            "PublishingHouse(x)",
            "SpecializesInTranslatingIntoEnglish(x, y)",
            "Book(x)",
            "PublishedBy(x, y)",
            "In(x, y)",
            "TranslatedFrom(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 244,
        "story_id": 80,
        "context": [
            "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "context_fol": [
            "PublishingHouse(newVesselPress) \u2227 SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)",
            "\u2200x ((Book(x) \u2227 PublishedBy(x, newVesselPress)) \u2192 In(x, english))",
            "Book(neapolitanChronicles) \u2227 PublishedBy(neapolitanChronicles, newVesselPress)",
            "TranslatedFrom(neapolitanChronicles, italian)",
            "Book(palaceOfFlies) \u2227 PublishedBy(palaceOfFlies, newVesselPress)"
        ],
        "question": "Harry Potter was published by New Vessel Press.",
        "question_fol": "PublishedBy(harryPotter, newVesselPress)",
        "answer": "C",
        "predicates_fol": [
            "PublishingHouse(x)",
            "SpecializesInTranslatingIntoEnglish(x, y)",
            "Book(x)",
            "PublishedBy(x, y)",
            "In(x, y)",
            "TranslatedFrom(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 245,
        "story_id": 80,
        "context": [
            "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "context_fol": [
            "PublishingHouse(newVesselPress) \u2227 SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)",
            "\u2200x ((Book(x) \u2227 PublishedBy(x, newVesselPress)) \u2192 In(x, english))",
            "Book(neapolitanChronicles) \u2227 PublishedBy(neapolitanChronicles, newVesselPress)",
            "TranslatedFrom(neapolitanChronicles, italian)",
            "Book(palaceOfFlies) \u2227 PublishedBy(palaceOfFlies, newVesselPress)"
        ],
        "question": "Palace of Flies was translated from Italian.",
        "question_fol": "TranslatedFrom(palaceOfFlies, italian)",
        "answer": "C",
        "predicates_fol": [
            "PublishingHouse(x)",
            "SpecializesInTranslatingIntoEnglish(x, y)",
            "Book(x)",
            "PublishedBy(x, y)",
            "In(x, y)",
            "TranslatedFrom(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 964,
        "story_id": 363,
        "context": [
            "All hydrocarbons are organic compounds .",
            "All alkanes are hydrocarbons",
            "All organic compounds are chemical compounds.",
            "All organic compounds contain carbon.",
            "No chemical compounds contain only one element.",
            "The mixture either both is a chemical compound and contains only one element, or neither. "
        ],
        "context_fol": [
            "\u2200x (Hydrocarbon(x) \u2192 Orgranic(x) \u2227 Compound(x))",
            "\u2200x (Alkane(x) \u2192 Hydrocarbon(x))",
            "\u2200x (Orgranic(x) \u2227 Compound(x) \u2192 Chemical(x) \u2227 Compound(x))",
            "\u2200x (Orgranic(x) \u2227 Compound(x) \u2192 Contain(x, carbon))",
            "\u2200x (Chemical(x) \u2227 Compound(x) \u2192 \u2200y \u2200z (\u00ac(Contain(x, y) \u2227 Contain(x, z) \u2227 (y=z))))",
            "\u00ac((Chemical(mixture) \u2227 Compound(mixture)) \u2295 (\u2200y \u2200z (Contain(x, y) \u2227 Contain(x, z) \u2227 y=z)))"
        ],
        "question": "The mixture contains carbon.",
        "question_fol": "Contain(mixture, carbon)",
        "answer": "C",
        "predicates_fol": [
            "Hydrocarbon(x)",
            "Orgranic(x)",
            "Compound(x)",
            "Alkane(x)",
            "Chemical(x)",
            "Contain(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 965,
        "story_id": 363,
        "context": [
            "All hydrocarbons are organic compounds .",
            "All alkanes are hydrocarbons",
            "All organic compounds are chemical compounds.",
            "All organic compounds contain carbon.",
            "No chemical compounds contain only one element.",
            "The mixture either both is a chemical compound and contains only one element, or neither. "
        ],
        "context_fol": [
            "\u2200x (Hydrocarbon(x) \u2192 Orgranic(x) \u2227 Compound(x))",
            "\u2200x (Alkane(x) \u2192 Hydrocarbon(x))",
            "\u2200x (Orgranic(x) \u2227 Compound(x) \u2192 Chemical(x) \u2227 Compound(x))",
            "\u2200x (Orgranic(x) \u2227 Compound(x) \u2192 Contain(x, carbon))",
            "\u2200x (Chemical(x) \u2227 Compound(x) \u2192 \u2200y \u2200z (\u00ac(Contain(x, y) \u2227 Contain(x, z) \u2227 (y=z))))",
            "\u00ac((Chemical(mixture) \u2227 Compound(mixture)) \u2295 (\u2200y \u2200z (Contain(x, y) \u2227 Contain(x, z) \u2227 y=z)))"
        ],
        "question": "The mixture is an alkane and contains carbon.",
        "question_fol": "Alkane(mixture) \u2227 Contain(mixture, carbon)",
        "answer": "B",
        "predicates_fol": [
            "Hydrocarbon(x)",
            "Orgranic(x)",
            "Compound(x)",
            "Alkane(x)",
            "Chemical(x)",
            "Contain(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 966,
        "story_id": 363,
        "context": [
            "All hydrocarbons are organic compounds .",
            "All alkanes are hydrocarbons",
            "All organic compounds are chemical compounds.",
            "All organic compounds contain carbon.",
            "No chemical compounds contain only one element.",
            "The mixture either both is a chemical compound and contains only one element, or neither. "
        ],
        "context_fol": [
            "\u2200x (Hydrocarbon(x) \u2192 Orgranic(x) \u2227 Compound(x))",
            "\u2200x (Alkane(x) \u2192 Hydrocarbon(x))",
            "\u2200x (Orgranic(x) \u2227 Compound(x) \u2192 Chemical(x) \u2227 Compound(x))",
            "\u2200x (Orgranic(x) \u2227 Compound(x) \u2192 Contain(x, carbon))",
            "\u2200x (Chemical(x) \u2227 Compound(x) \u2192 \u2200y \u2200z (\u00ac(Contain(x, y) \u2227 Contain(x, z) \u2227 (y=z))))",
            "\u00ac((Chemical(mixture) \u2227 Compound(mixture)) \u2295 (\u2200y \u2200z (Contain(x, y) \u2227 Contain(x, z) \u2227 y=z)))"
        ],
        "question": "If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.",
        "question_fol": "(\u2200x \u2200y (Contain(mixture, x) \u2227 Contain(mixture, y) \u2227 x=y)) \u2228 Contain(mixture, carbon) \u2192 \u00ac(Chemical(mixture) \u2227 Compound(mixture)) \u2227 \u00acAlkane(mixture))",
        "answer": "A",
        "predicates_fol": [
            "Hydrocarbon(x)",
            "Orgranic(x)",
            "Compound(x)",
            "Alkane(x)",
            "Chemical(x)",
            "Contain(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 702,
        "story_id": 258,
        "context": [
            "All humans are mortal.",
            "All Greeks are humans."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2192 Mortal(x))",
            "\u2200x (Greek(x) \u2192 Human(x))"
        ],
        "question": "Some Greeks are mortal.",
        "question_fol": "\u2203x \u2203y (Greek(x) \u2227 Greek(y) \u2227 Mortal(x) \u2227 Mortal(y) \u2227 \u00ac(x=y))",
        "answer": "C",
        "predicates_fol": [
            "Human(x)",
            "Mortal(x)",
            "Greek(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1244,
        "story_id": 435,
        "context": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2227 WorkIn(x, library) \u2192 (\u00acFrom(x, computerScienceDepartment)))",
            "\u2200x (Student(x) \u2227 Have(x, partTimeJob) \u2227 OfferedBy(y, university) \u2192 WorkIn(x, library))",
            "\u2200x ((Student(x) \u2227 Take(x, databaseCourse)) \u2192 From(x, computerScienceDepartment))",
            "\u2200x ((Student(x) \u2227 InstructedBy(x, professorDavid)) \u2192 Take(x, databaseCourse))",
            "\u2200x ((Student(x) \u2227 WorkIn(x, lab)) \u2192 InstructedBy(x, professorDavid))",
            "Student(james) \u2227 WorkIn(james, lab)",
            "\u00ac\u2203x (PartTimeJob(x) \u2227 Have(james, x) \u2227 OfferedBy(x, computerScienceDepartment)) \u2227 \u00acWorkIn(james, lab)"
        ],
        "question": "James has a part-time job offered by the university.",
        "question_fol": "\u2203y (PartTimeJob(y) \u2227 Have(james, y) \u2227 OfferedBy(y, university))",
        "answer": "B",
        "predicates_fol": [
            "Student(x)",
            "WorkIn(x, y)",
            "From(x, y)",
            "Have(x, y)",
            "OfferedBy(x, y)",
            "Take(x, y)",
            "InstructedBy(x, y)",
            "PartTimeJob(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1245,
        "story_id": 435,
        "context": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2227 WorkIn(x, library) \u2192 (\u00acFrom(x, computerScienceDepartment)))",
            "\u2200x (Student(x) \u2227 Have(x, partTimeJob) \u2227 OfferedBy(y, university) \u2192 WorkIn(x, library))",
            "\u2200x ((Student(x) \u2227 Take(x, databaseCourse)) \u2192 From(x, computerScienceDepartment))",
            "\u2200x ((Student(x) \u2227 InstructedBy(x, professorDavid)) \u2192 Take(x, databaseCourse))",
            "\u2200x ((Student(x) \u2227 WorkIn(x, lab)) \u2192 InstructedBy(x, professorDavid))",
            "Student(james) \u2227 WorkIn(james, lab)",
            "\u00ac\u2203x (PartTimeJob(x) \u2227 Have(james, x) \u2227 OfferedBy(x, computerScienceDepartment)) \u2227 \u00acWorkIn(james, lab)"
        ],
        "question": "James does not have a part-time job offered by the university.",
        "question_fol": "\u00ac\u2203y(PartTimeJob(y) \u2227 Have(james, y) \u2227 OfferedBy(y, university))",
        "answer": "A",
        "predicates_fol": [
            "Student(x)",
            "WorkIn(x, y)",
            "From(x, y)",
            "Have(x, y)",
            "OfferedBy(x, y)",
            "Take(x, y)",
            "InstructedBy(x, y)",
            "PartTimeJob(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1246,
        "story_id": 435,
        "context": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2227 WorkIn(x, library) \u2192 (\u00acFrom(x, computerScienceDepartment)))",
            "\u2200x (Student(x) \u2227 Have(x, partTimeJob) \u2227 OfferedBy(y, university) \u2192 WorkIn(x, library))",
            "\u2200x ((Student(x) \u2227 Take(x, databaseCourse)) \u2192 From(x, computerScienceDepartment))",
            "\u2200x ((Student(x) \u2227 InstructedBy(x, professorDavid)) \u2192 Take(x, databaseCourse))",
            "\u2200x ((Student(x) \u2227 WorkIn(x, lab)) \u2192 InstructedBy(x, professorDavid))",
            "Student(james) \u2227 WorkIn(james, lab)",
            "\u00ac\u2203x (PartTimeJob(x) \u2227 Have(james, x) \u2227 OfferedBy(x, computerScienceDepartment)) \u2227 \u00acWorkIn(james, lab)"
        ],
        "question": "James either takes the database course or has a part-time job offered by the university.",
        "question_fol": "Take(james, databaseCourse) \u2295 (\u2203y (PartTimeJob(y) \u2227 Have(james, y) \u2227 OfferedBy(y, university))",
        "answer": "A",
        "predicates_fol": [
            "Student(x)",
            "WorkIn(x, y)",
            "From(x, y)",
            "Have(x, y)",
            "OfferedBy(x, y)",
            "Take(x, y)",
            "InstructedBy(x, y)",
            "PartTimeJob(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1247,
        "story_id": 435,
        "context": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2227 WorkIn(x, library) \u2192 (\u00acFrom(x, computerScienceDepartment)))",
            "\u2200x (Student(x) \u2227 Have(x, partTimeJob) \u2227 OfferedBy(y, university) \u2192 WorkIn(x, library))",
            "\u2200x ((Student(x) \u2227 Take(x, databaseCourse)) \u2192 From(x, computerScienceDepartment))",
            "\u2200x ((Student(x) \u2227 InstructedBy(x, professorDavid)) \u2192 Take(x, databaseCourse))",
            "\u2200x ((Student(x) \u2227 WorkIn(x, lab)) \u2192 InstructedBy(x, professorDavid))",
            "Student(james) \u2227 WorkIn(james, lab)",
            "\u00ac\u2203x (PartTimeJob(x) \u2227 Have(james, x) \u2227 OfferedBy(x, computerScienceDepartment)) \u2227 \u00acWorkIn(james, lab)"
        ],
        "question": "James takes the database course.",
        "question_fol": "Take(james, databaseCourse)",
        "answer": "C",
        "predicates_fol": [
            "Student(x)",
            "WorkIn(x, y)",
            "From(x, y)",
            "Have(x, y)",
            "OfferedBy(x, y)",
            "Take(x, y)",
            "InstructedBy(x, y)",
            "PartTimeJob(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 618,
        "story_id": 217,
        "context": [
            "If George likes music, he wants to compose.",
            "If George has access to a program, he can compose.",
            "If George can compose and wants to compose, he will compose."
        ],
        "context_fol": [
            "LikeMusic(george) \u2192 WantToCompose(george)",
            "AccesstoProgram(george) \u2192 CanCompose(george)",
            "(WantToCompose(george) \u2227 CanCompose(george)) \u2192 WillCompose(george)"
        ],
        "question": "If George likes music and has access to a program, he will compose.",
        "question_fol": "(LikeMusic(george) \u2227 AccesstoProgram(george)) \u2192 WillCompose(george)",
        "answer": "A",
        "predicates_fol": [
            "LikeMusic(x)",
            "WantToCompose(x)",
            "AccesstoProgram(x)",
            "CanCompose(x)",
            "WillCompose(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 619,
        "story_id": 217,
        "context": [
            "If George likes music, he wants to compose.",
            "If George has access to a program, he can compose.",
            "If George can compose and wants to compose, he will compose."
        ],
        "context_fol": [
            "LikeMusic(george) \u2192 WantToCompose(george)",
            "AccesstoProgram(george) \u2192 CanCompose(george)",
            "(WantToCompose(george) \u2227 CanCompose(george)) \u2192 WillCompose(george)"
        ],
        "question": "If George will not compose, George can not compose.",
        "question_fol": "\u00acWantToCompose(george) \u2192 \u00acWillCompose(george)",
        "answer": "C",
        "predicates_fol": [
            "LikeMusic(x)",
            "WantToCompose(x)",
            "AccesstoProgram(x)",
            "CanCompose(x)",
            "WillCompose(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 736,
        "story_id": 292,
        "context": [
            "A hawk never swims. ",
            "Some birds are hawks."
        ],
        "context_fol": [
            "\u2200x (Hawk(x) \u2192 \u00acSwim(x))",
            "\u2203x \u2203y (Bird(x) \u2227 Bird(y) \u2227 Hawk(x) \u2227 Hawk(y) \u2227 \u00ac(x=y))"
        ],
        "question": "All birds swim.",
        "question_fol": "\u2200x (Bird(x) \u2192 Swim(x))",
        "answer": "B",
        "predicates_fol": [
            "Hawk(x)",
            "Bird(x)",
            "Swim(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 802,
        "story_id": 318,
        "context": [
            "Some show airing at 8 pm on Monday gives out roses on TV.",
            "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
            "The Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is a show.",
            "Breaking Bad is not a reality TV show."
        ],
        "context_fol": [
            "\u2203x (Show(x) \u2227 AiringAtOn(x, 8PMMonday) \u2227 GivenOutOn(x, rose, tV))",
            "\u2200x (Show(x) \u2227 GivenOutOnAt(rose, tV, x) \u2192 TheBachelor(x))",
            "\u2200x (TheBachelor(x) \u2192 Portray(x, lifeOfRealPeople))",
            "\u2200x (Portray(x, liveOfRealPeople) \u2192 RealityTVShow(x))",
            "Show(breakingBad)",
            "\u00acRealityTVShow(breakingBad)"
        ],
        "question": "Breaking Bad is on Monday at 8 pm.",
        "question_fol": "\u2200x (MondayAt8PM(x) \u2227 On(breakingBad, x))",
        "answer": "C",
        "predicates_fol": [
            "Show(x)",
            "AiringAtOn(x, y)",
            "GivenOutOn(x, y)",
            "GivenOutOnAt(x, y)",
            "TheBachelor(x)",
            "Portray(x, y)",
            "RealityTVShow(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 803,
        "story_id": 318,
        "context": [
            "Some show airing at 8 pm on Monday gives out roses on TV.",
            "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
            "The Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is a show.",
            "Breaking Bad is not a reality TV show."
        ],
        "context_fol": [
            "\u2203x (Show(x) \u2227 AiringAtOn(x, 8PMMonday) \u2227 GivenOutOn(x, rose, tV))",
            "\u2200x (Show(x) \u2227 GivenOutOnAt(rose, tV, x) \u2192 TheBachelor(x))",
            "\u2200x (TheBachelor(x) \u2192 Portray(x, lifeOfRealPeople))",
            "\u2200x (Portray(x, liveOfRealPeople) \u2192 RealityTVShow(x))",
            "Show(breakingBad)",
            "\u00acRealityTVShow(breakingBad)"
        ],
        "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
        "question_fol": "\u2200x \u2200y (MondayAt8PM(x) \u2227 Rose(y) \u2227 GivenOutOn(y, tv) \u2227 On(tv, x) \u2227 From(y, breakingBad))",
        "answer": "B",
        "predicates_fol": [
            "Show(x)",
            "AiringAtOn(x, y)",
            "GivenOutOn(x, y)",
            "GivenOutOnAt(x, y)",
            "TheBachelor(x)",
            "Portray(x, y)",
            "RealityTVShow(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 804,
        "story_id": 318,
        "context": [
            "Some show airing at 8 pm on Monday gives out roses on TV.",
            "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
            "The Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is a show.",
            "Breaking Bad is not a reality TV show."
        ],
        "context_fol": [
            "\u2203x (Show(x) \u2227 AiringAtOn(x, 8PMMonday) \u2227 GivenOutOn(x, rose, tV))",
            "\u2200x (Show(x) \u2227 GivenOutOnAt(rose, tV, x) \u2192 TheBachelor(x))",
            "\u2200x (TheBachelor(x) \u2192 Portray(x, lifeOfRealPeople))",
            "\u2200x (Portray(x, liveOfRealPeople) \u2192 RealityTVShow(x))",
            "Show(breakingBad)",
            "\u00acRealityTVShow(breakingBad)"
        ],
        "question": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
        "question_fol": "\u2200x \u2200y ((Rose(y) \u2227 GivenOutOn(y, tv) \u2227 On(tv, x) \u2227 From(y, breakingBad)) \u2192 MondayAt8PM(x))",
        "answer": "A",
        "predicates_fol": [
            "Show(x)",
            "AiringAtOn(x, y)",
            "GivenOutOn(x, y)",
            "GivenOutOnAt(x, y)",
            "TheBachelor(x)",
            "Portray(x, y)",
            "RealityTVShow(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 323,
        "story_id": 107,
        "context": [
            "Heinrich Schmidt was a German politician. ",
            "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "context_fol": [
            "German(heinrichSchmidt) \u2227 Politician(heinrichSchmidt)",
            "Member(heinrichSchmidt, prussianStateParliament) \u2227 Member(heinrichSchmidt, naziReichstag)"
        ],
        "question": "Heinrich Schmidt was German or Russian or both.",
        "question_fol": "German(heinrichSchmidt) \u2228 Russian(heinrichSchmidt)",
        "answer": "A",
        "predicates_fol": [
            "German(x)",
            "Politician(x)",
            "Member(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 324,
        "story_id": 107,
        "context": [
            "Heinrich Schmidt was a German politician. ",
            "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "context_fol": [
            "German(heinrichSchmidt) \u2227 Politician(heinrichSchmidt)",
            "Member(heinrichSchmidt, prussianStateParliament) \u2227 Member(heinrichSchmidt, naziReichstag)"
        ],
        "question": "Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
        "question_fol": "\u2203x (German(x) \u2227 Politician(x) \u2227 Member(x, prussianStateParliament) \u2227 Member(x, naziReichstag))",
        "answer": "A",
        "predicates_fol": [
            "German(x)",
            "Politician(x)",
            "Member(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 325,
        "story_id": 107,
        "context": [
            "Heinrich Schmidt was a German politician. ",
            "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "context_fol": [
            "German(heinrichSchmidt) \u2227 Politician(heinrichSchmidt)",
            "Member(heinrichSchmidt, prussianStateParliament) \u2227 Member(heinrichSchmidt, naziReichstag)"
        ],
        "question": "No politicians are part of the Nazi Reichstag.",
        "question_fol": "\u2200x (Politician(x) \u2192 \u00acMember(x, naziReichstag))",
        "answer": "B",
        "predicates_fol": [
            "German(x)",
            "Politician(x)",
            "Member(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1032,
        "story_id": 386,
        "context": [
            "If something is a deadly disease, then it comes with a low survival rate. ",
            "Severe cancers are deadly diseases.",
            "Bile duct cancer is a severe form cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "Mild flu comes with a low survival rate.",
            "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
        ],
        "context_fol": [
            "\u2200x (DeadlyDiseases(x) \u2192 ComeWith(x, lowSurvivalRate))",
            "\u2200x (SevereCancer(x) \u2192 DeadlyDiseases(x))",
            "\u2200x (BileDuctCancer(x) \u2192 SevereCancer(x))",
            "\u2200x (Cholangiocarcinoma(x) \u2192 BileDuctCancer(x))",
            "\u2200x (MildFlu(x) \u2192 \u00acComeWith(x, lowSurvivalRate)) ",
            "\u00ac(BileDuctCancer(colorectalCancer) \u2227 ComeWith(colorectalCancer, lowSurvivalRate))"
        ],
        "question": "Colorectal cancer is a kind of severe cancer",
        "question_fol": "SevereCancer(colorectalCancer)",
        "answer": "C",
        "predicates_fol": [
            "DeadlyDiseases(x)",
            "ComeWith(x, y)",
            "SevereCancer(x)",
            "BileDuctCancer(x)",
            "Cholangiocarcinoma(x)",
            "MildFlu(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1033,
        "story_id": 386,
        "context": [
            "If something is a deadly disease, then it comes with a low survival rate. ",
            "Severe cancers are deadly diseases.",
            "Bile duct cancer is a severe form cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "Mild flu comes with a low survival rate.",
            "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
        ],
        "context_fol": [
            "\u2200x (DeadlyDiseases(x) \u2192 ComeWith(x, lowSurvivalRate))",
            "\u2200x (SevereCancer(x) \u2192 DeadlyDiseases(x))",
            "\u2200x (BileDuctCancer(x) \u2192 SevereCancer(x))",
            "\u2200x (Cholangiocarcinoma(x) \u2192 BileDuctCancer(x))",
            "\u2200x (MildFlu(x) \u2192 \u00acComeWith(x, lowSurvivalRate)) ",
            "\u00ac(BileDuctCancer(colorectalCancer) \u2227 ComeWith(colorectalCancer, lowSurvivalRate))"
        ],
        "question": "If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.",
        "question_fol": "\u00ac(BileDuctCancer(colorectalCancer) \u2228 Cholangiocarcinoma(colorectalCancer)) \u2228 (BileDuctCancer(colorectalCancer) \u2227 MildFlu(colorectalCancer))",
        "answer": "A",
        "predicates_fol": [
            "DeadlyDiseases(x)",
            "ComeWith(x, y)",
            "SevereCancer(x)",
            "BileDuctCancer(x)",
            "Cholangiocarcinoma(x)",
            "MildFlu(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1034,
        "story_id": 386,
        "context": [
            "If something is a deadly disease, then it comes with a low survival rate. ",
            "Severe cancers are deadly diseases.",
            "Bile duct cancer is a severe form cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "Mild flu comes with a low survival rate.",
            "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
        ],
        "context_fol": [
            "\u2200x (DeadlyDiseases(x) \u2192 ComeWith(x, lowSurvivalRate))",
            "\u2200x (SevereCancer(x) \u2192 DeadlyDiseases(x))",
            "\u2200x (BileDuctCancer(x) \u2192 SevereCancer(x))",
            "\u2200x (Cholangiocarcinoma(x) \u2192 BileDuctCancer(x))",
            "\u2200x (MildFlu(x) \u2192 \u00acComeWith(x, lowSurvivalRate)) ",
            "\u00ac(BileDuctCancer(colorectalCancer) \u2227 ComeWith(colorectalCancer, lowSurvivalRate))"
        ],
        "question": "Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.",
        "question_fol": "Cholangiocarcinoma(colorectalCancer) \u2227 (MildFlu(colorectalCancer) \u2228 BileDuctCancer(colorectalCancer))",
        "answer": "B",
        "predicates_fol": [
            "DeadlyDiseases(x)",
            "ComeWith(x, y)",
            "SevereCancer(x)",
            "BileDuctCancer(x)",
            "Cholangiocarcinoma(x)",
            "MildFlu(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 941,
        "story_id": 355,
        "context": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
            "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
        ],
        "context_fol": [
            "\u2200x (RegularlyEat(x, salad) \u2192 ConsciousAbout(x, health) \u2227 ConsciousAbout(x, eatinggHabit))",
            "\u2200x (GrewUpIn(x, health-consciousChildhoodHome) \u2192 RegularlyEat(x, salad))",
            "\u2200x (Fulfill(x, dailyNutritionalIntake) \u2192 GrewUpIn(x, health-consciousChildhoodHome))",
            "\u2200x (Disregard(x, physicalWellbeing) \u2192 \u00ac(ConsciousAbout(x, health) \u2227 ConsciousAbout(x, eatingHabit)))",
            "\u2200x (VisitDaily(x, gym) \u2192 Fulfill(x, dailyNutritionalIntake))",
            "\u00ac(GrowUpIn(taylor, health-consciousChildhoodHome) \u2295 Disregard(taylor, physicalWellbeing))"
        ],
        "question": "Taylor eats salads regularly.",
        "question_fol": "RegularlyEat(taylor, salad)",
        "answer": "C",
        "predicates_fol": [
            "RegularlyEat(x, y)",
            "ConsciousAbout(x, y)",
            "GrewUpIn(x, y)",
            "Fulfill(x, y)",
            "Disregard(x, y)",
            "VisitDaily(x, y)",
            "GrowUpIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 942,
        "story_id": 355,
        "context": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
            "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
        ],
        "context_fol": [
            "\u2200x (RegularlyEat(x, salad) \u2192 ConsciousAbout(x, health) \u2227 ConsciousAbout(x, eatinggHabit))",
            "\u2200x (GrewUpIn(x, health-consciousChildhoodHome) \u2192 RegularlyEat(x, salad))",
            "\u2200x (Fulfill(x, dailyNutritionalIntake) \u2192 GrewUpIn(x, health-consciousChildhoodHome))",
            "\u2200x (Disregard(x, physicalWellbeing) \u2192 \u00ac(ConsciousAbout(x, health) \u2227 ConsciousAbout(x, eatingHabit)))",
            "\u2200x (VisitDaily(x, gym) \u2192 Fulfill(x, dailyNutritionalIntake))",
            "\u00ac(GrowUpIn(taylor, health-consciousChildhoodHome) \u2295 Disregard(taylor, physicalWellbeing))"
        ],
        "question": "Taylor visits the gym at least once a day.",
        "question_fol": "VisitDaily(taylor, gym)",
        "answer": "B",
        "predicates_fol": [
            "RegularlyEat(x, y)",
            "ConsciousAbout(x, y)",
            "GrewUpIn(x, y)",
            "Fulfill(x, y)",
            "Disregard(x, y)",
            "VisitDaily(x, y)",
            "GrowUpIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 943,
        "story_id": 355,
        "context": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
            "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
        ],
        "context_fol": [
            "\u2200x (RegularlyEat(x, salad) \u2192 ConsciousAbout(x, health) \u2227 ConsciousAbout(x, eatinggHabit))",
            "\u2200x (GrewUpIn(x, health-consciousChildhoodHome) \u2192 RegularlyEat(x, salad))",
            "\u2200x (Fulfill(x, dailyNutritionalIntake) \u2192 GrewUpIn(x, health-consciousChildhoodHome))",
            "\u2200x (Disregard(x, physicalWellbeing) \u2192 \u00ac(ConsciousAbout(x, health) \u2227 ConsciousAbout(x, eatingHabit)))",
            "\u2200x (VisitDaily(x, gym) \u2192 Fulfill(x, dailyNutritionalIntake))",
            "\u00ac(GrowUpIn(taylor, health-consciousChildhoodHome) \u2295 Disregard(taylor, physicalWellbeing))"
        ],
        "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
        "question_fol": "\u00acGrowUpIn(taylor, health-consciousChildhoodHome) \u2227 \u00acVisitDaily(taylor, gym))",
        "answer": "A",
        "predicates_fol": [
            "RegularlyEat(x, y)",
            "ConsciousAbout(x, y)",
            "GrewUpIn(x, y)",
            "Fulfill(x, y)",
            "Disregard(x, y)",
            "VisitDaily(x, y)",
            "GrowUpIn(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 147,
        "story_id": 51,
        "context": [
            "The summer Olympic games is a sporting event. ",
            "The last summer Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "context_fol": [
            "SportingEvent(olympics)",
            "LastSummerOlympics(tokyo)",
            "MostMedals(unitedStates, tokyo)"
        ],
        "question": "The world championships is a sporting event.",
        "question_fol": "SportingEvent(champs)",
        "answer": "C",
        "predicates_fol": [
            "SportingEvent(x)",
            "LastSummerOlympics(x)",
            "MostMedals(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 148,
        "story_id": 51,
        "context": [
            "The summer Olympic games is a sporting event. ",
            "The last summer Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "context_fol": [
            "SportingEvent(olympics)",
            "LastSummerOlympics(tokyo)",
            "MostMedals(unitedStates, tokyo)"
        ],
        "question": "The last summer Olympic games were not in Tokyo.",
        "question_fol": "\u00acLastSummerOlympics(tokyo)",
        "answer": "B",
        "predicates_fol": [
            "SportingEvent(x)",
            "LastSummerOlympics(x)",
            "MostMedals(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 149,
        "story_id": 51,
        "context": [
            "The summer Olympic games is a sporting event. ",
            "The last summer Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "context_fol": [
            "SportingEvent(olympics)",
            "LastSummerOlympics(tokyo)",
            "MostMedals(unitedStates, tokyo)"
        ],
        "question": "The United States won the most medals in the last summer Olympic games.",
        "question_fol": "\u2203x (LastSummerOlympics(x) \u2227 MostMedals(unitedStates, x))",
        "answer": "A",
        "predicates_fol": [
            "SportingEvent(x)",
            "LastSummerOlympics(x)",
            "MostMedals(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 703,
        "story_id": 259,
        "context": [
            "All horses have hooves.",
            "No humans have hooves."
        ],
        "context_fol": [
            "\u2200x (Horse(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Hoof(y) \u2227 Hoof(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
            "\u2200x (Human(x) \u2192 \u00ac(\u2203y \u2203z (\u00ac(y=z) \u2227 Hoof(y) \u2227 Hoof(z) \u2227 Have(x, y) \u2227 Have(x, z))))"
        ],
        "question": "Some humans are horses.",
        "question_fol": "\u2203x (Human(x) \u2227 Human(y) \u2227 Horse(x) \u2227 Horse(y) \u2227 \u00ac(x=y))",
        "answer": "B",
        "predicates_fol": [
            "Horse(x)",
            "Hoof(x)",
            "Have(x, y)",
            "Human(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 442,
        "story_id": 152,
        "context": [
            "Susan flies to LGA airport.",
            "The departure and arrival can not be at the same airport.",
            "John flies from LGA airport."
        ],
        "context_fol": [
            "FlyTo(susan, lgaAirport)",
            "\u2200x \u2200y (FlyFrom(x, y) \u2295 FlyTo(x, y))",
            "FlyFrom(john, lgaAirport)"
        ],
        "question": "Susan flies from LGA airport.",
        "question_fol": "FlyFrom(susan, lgaAirport)",
        "answer": "B",
        "predicates_fol": [
            "FlyTo(x, y)",
            "FlyFrom(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 443,
        "story_id": 152,
        "context": [
            "Susan flies to LGA airport.",
            "The departure and arrival can not be at the same airport.",
            "John flies from LGA airport."
        ],
        "context_fol": [
            "FlyTo(susan, lgaAirport)",
            "\u2200x \u2200y (FlyFrom(x, y) \u2295 FlyTo(x, y))",
            "FlyFrom(john, lgaAirport)"
        ],
        "question": "John flies to LGA airport.",
        "question_fol": "FlyTo(john, lgaAirport)",
        "answer": "B",
        "predicates_fol": [
            "FlyTo(x, y)",
            "FlyFrom(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1268,
        "story_id": 441,
        "context": [
            "No one nice to animals is also mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "All pet owners love animals.",
            "Tom is a pet owner."
        ],
        "context_fol": [
            "\u2200x (NiceTo(x, animal) \u2192 \u00acMeanTo(x, animal))",
            "\u2203x (Grumpy(x) \u2227 MeanTo(x, animal))",
            "\u2200x (AnimalLover(x) \u2192 NiceTo(x, animal))",
            "\u2200x (PetOwner(x) \u2192 AnimalLover(x))",
            "PetOwner(tom)"
        ],
        "question": "Tom is a grumpy person.",
        "question_fol": "Grumpy(tom)",
        "answer": "C",
        "predicates_fol": [
            "NiceTo(x, y)",
            "MeanTo(x, y)",
            "Grumpy(x)",
            "AnimalLover(x)",
            "PetOwner(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1269,
        "story_id": 441,
        "context": [
            "No one nice to animals is also mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "All pet owners love animals.",
            "Tom is a pet owner."
        ],
        "context_fol": [
            "\u2200x (NiceTo(x, animal) \u2192 \u00acMeanTo(x, animal))",
            "\u2203x (Grumpy(x) \u2227 MeanTo(x, animal))",
            "\u2200x (AnimalLover(x) \u2192 NiceTo(x, animal))",
            "\u2200x (PetOwner(x) \u2192 AnimalLover(x))",
            "PetOwner(tom)"
        ],
        "question": "Tom is not both a grumpy person and mean to animals.",
        "question_fol": "\u00ac(Grumpy(tom) \u2227 MeanTo(tom, animal))",
        "answer": "A",
        "predicates_fol": [
            "NiceTo(x, y)",
            "MeanTo(x, y)",
            "Grumpy(x)",
            "AnimalLover(x)",
            "PetOwner(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1270,
        "story_id": 441,
        "context": [
            "No one nice to animals is also mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "All pet owners love animals.",
            "Tom is a pet owner."
        ],
        "context_fol": [
            "\u2200x (NiceTo(x, animal) \u2192 \u00acMeanTo(x, animal))",
            "\u2203x (Grumpy(x) \u2227 MeanTo(x, animal))",
            "\u2200x (AnimalLover(x) \u2192 NiceTo(x, animal))",
            "\u2200x (PetOwner(x) \u2192 AnimalLover(x))",
            "PetOwner(tom)"
        ],
        "question": "If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.",
        "question_fol": "\u00ac(Grumpy(tom) \u2227 MeanTo(tom, animal)) \u2192 \u00acGrumpy(tom) \u2227 \u00acAnimalLover(tom))",
        "answer": "B",
        "predicates_fol": [
            "NiceTo(x, y)",
            "MeanTo(x, y)",
            "Grumpy(x)",
            "AnimalLover(x)",
            "PetOwner(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 189,
        "story_id": 64,
        "context": [
            "A podcast is not a novel.",
            "If a person is born in American City, the person is American.",
            "If a book is a novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "Boston is an American city."
        ],
        "context_fol": [
            "\u2200x (Podcast(x) \u2192 \u00acNovel(x))",
            "\u2200x((\u2203y(BornIn(x, y) \u2227 City(y) \u2227 LocatedIn(y,america)) \u2192 American(x))",
            "\u2200x \u2200y ((Novel(x) \u2227 WrittenBy(x, y)) \u2192 WritesNovel(y))",
            "American(dani_Shapiro) \u2227 Writer(dani_Shapiro)",
            "WrittenBy(family_History, dani_Shapiro)",
            "Novel(family_History) \u2227 WrittenIn(family_History, yr2003)",
            "Podcast(family_Secrets) \u2227 CreatedBy(family_Secrets, dani_Shapiro)",
            "City(boston) \u2227 American(boston)"
        ],
        "question": "Dani Shapiro is a novel writer.",
        "question_fol": "WritesNovel(dani_Shapiro)",
        "answer": "A",
        "predicates_fol": [
            "Podcast(x)",
            "BornIn(x, y)",
            "Novel(x)",
            "LocatedIn(x, y)",
            "WrittenBy(x, y)",
            "WritesNovel(x)",
            "American(x)",
            "Writer(x)",
            "WrittenIn(x, y)",
            "CreatedBy(x, y)",
            "City(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 190,
        "story_id": 64,
        "context": [
            "A podcast is not a novel.",
            "If a person is born in American City, the person is American.",
            "If a book is a novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "Boston is an American city."
        ],
        "context_fol": [
            "\u2200x (Podcast(x) \u2192 \u00acNovel(x))",
            "\u2200x((\u2203y(BornIn(x, y) \u2227 City(y) \u2227 LocatedIn(y,america)) \u2192 American(x))",
            "\u2200x \u2200y ((Novel(x) \u2227 WrittenBy(x, y)) \u2192 WritesNovel(y))",
            "American(dani_Shapiro) \u2227 Writer(dani_Shapiro)",
            "WrittenBy(family_History, dani_Shapiro)",
            "Novel(family_History) \u2227 WrittenIn(family_History, yr2003)",
            "Podcast(family_Secrets) \u2227 CreatedBy(family_Secrets, dani_Shapiro)",
            "City(boston) \u2227 American(boston)"
        ],
        "question": "Family Secrets is a novel.",
        "question_fol": "IsNovel(family_Secrets)",
        "answer": "B",
        "predicates_fol": [
            "Podcast(x)",
            "BornIn(x, y)",
            "Novel(x)",
            "LocatedIn(x, y)",
            "WrittenBy(x, y)",
            "WritesNovel(x)",
            "American(x)",
            "Writer(x)",
            "WrittenIn(x, y)",
            "CreatedBy(x, y)",
            "City(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 191,
        "story_id": 64,
        "context": [
            "A podcast is not a novel.",
            "If a person is born in American City, the person is American.",
            "If a book is a novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "Boston is an American city."
        ],
        "context_fol": [
            "\u2200x (Podcast(x) \u2192 \u00acNovel(x))",
            "\u2200x((\u2203y(BornIn(x, y) \u2227 City(y) \u2227 LocatedIn(y,america)) \u2192 American(x))",
            "\u2200x \u2200y ((Novel(x) \u2227 WrittenBy(x, y)) \u2192 WritesNovel(y))",
            "American(dani_Shapiro) \u2227 Writer(dani_Shapiro)",
            "WrittenBy(family_History, dani_Shapiro)",
            "Novel(family_History) \u2227 WrittenIn(family_History, yr2003)",
            "Podcast(family_Secrets) \u2227 CreatedBy(family_Secrets, dani_Shapiro)",
            "City(boston) \u2227 American(boston)"
        ],
        "question": "Dani Shapiro was born in Boston.",
        "question_fol": "BornIn(dani_Shapiro, boston)",
        "answer": "C",
        "predicates_fol": [
            "Podcast(x)",
            "BornIn(x, y)",
            "Novel(x)",
            "LocatedIn(x, y)",
            "WrittenBy(x, y)",
            "WritesNovel(x)",
            "American(x)",
            "Writer(x)",
            "WrittenIn(x, y)",
            "CreatedBy(x, y)",
            "City(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1313,
        "story_id": 456,
        "context": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "context_fol": [
            "\u2203x (Professional(x) \u2227 BasketballPlayer(x) \u2227 \u00acAmericanNational(x))",
            "\u2200x (Professional(x) \u2227 BasketballPlayer(x) \u2192 CanDo(x, jumpShot))",
            "\u2200x (CanDo(x, jumpShot) \u2192 LeapStraightIntoAir(x))",
            "\u2200x (LeapStraightIntoAir(x) \u2192 Activate(x, legMuscle))",
            "\u00acActivate(yuri, legMuscle)"
        ],
        "question": "Yuri is an American national.",
        "question_fol": "AmericanNational(yuri)",
        "answer": "C",
        "predicates_fol": [
            "Professional(x)",
            "BasketballPlayer(x)",
            "AmericanNational(x)",
            "CanDo(x, y)",
            "LeapStraightIntoAir(x)",
            "Activate(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1314,
        "story_id": 456,
        "context": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "context_fol": [
            "\u2203x (Professional(x) \u2227 BasketballPlayer(x) \u2227 \u00acAmericanNational(x))",
            "\u2200x (Professional(x) \u2227 BasketballPlayer(x) \u2192 CanDo(x, jumpShot))",
            "\u2200x (CanDo(x, jumpShot) \u2192 LeapStraightIntoAir(x))",
            "\u2200x (LeapStraightIntoAir(x) \u2192 Activate(x, legMuscle))",
            "\u00acActivate(yuri, legMuscle)"
        ],
        "question": "Yuri is not an American professional basketball player.",
        "question_fol": "\u00ac(AmericanNational(yuri) \u2227 Professional(yuri) \u2227 BasketballPlayer(yuri))",
        "answer": "A",
        "predicates_fol": [
            "Professional(x)",
            "BasketballPlayer(x)",
            "AmericanNational(x)",
            "CanDo(x, y)",
            "LeapStraightIntoAir(x)",
            "Activate(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1315,
        "story_id": 456,
        "context": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "context_fol": [
            "\u2203x (Professional(x) \u2227 BasketballPlayer(x) \u2227 \u00acAmericanNational(x))",
            "\u2200x (Professional(x) \u2227 BasketballPlayer(x) \u2192 CanDo(x, jumpShot))",
            "\u2200x (CanDo(x, jumpShot) \u2192 LeapStraightIntoAir(x))",
            "\u2200x (LeapStraightIntoAir(x) \u2192 Activate(x, legMuscle))",
            "\u00acActivate(yuri, legMuscle)"
        ],
        "question": "Yuri is an American professional basketball player.",
        "question_fol": "AmericanNational(yuri) \u2227 Professional(yuri) \u2227 BasketballPlayer(yuri)",
        "answer": "B",
        "predicates_fol": [
            "Professional(x)",
            "BasketballPlayer(x)",
            "AmericanNational(x)",
            "CanDo(x, y)",
            "LeapStraightIntoAir(x)",
            "Activate(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1316,
        "story_id": 456,
        "context": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "context_fol": [
            "\u2203x (Professional(x) \u2227 BasketballPlayer(x) \u2227 \u00acAmericanNational(x))",
            "\u2200x (Professional(x) \u2227 BasketballPlayer(x) \u2192 CanDo(x, jumpShot))",
            "\u2200x (CanDo(x, jumpShot) \u2192 LeapStraightIntoAir(x))",
            "\u2200x (LeapStraightIntoAir(x) \u2192 Activate(x, legMuscle))",
            "\u00acActivate(yuri, legMuscle)"
        ],
        "question": "If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.",
        "question_fol": "\u00acLeapStraightIntoAir(yuri) \u2192 (AmericanNational(yuri) \u2227 Professional(yuri) \u2227 BasketballPlayer(yuri))",
        "answer": "B",
        "predicates_fol": [
            "Professional(x)",
            "BasketballPlayer(x)",
            "AmericanNational(x)",
            "CanDo(x, y)",
            "LeapStraightIntoAir(x)",
            "Activate(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1317,
        "story_id": 456,
        "context": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "context_fol": [
            "\u2203x (Professional(x) \u2227 BasketballPlayer(x) \u2227 \u00acAmericanNational(x))",
            "\u2200x (Professional(x) \u2227 BasketballPlayer(x) \u2192 CanDo(x, jumpShot))",
            "\u2200x (CanDo(x, jumpShot) \u2192 LeapStraightIntoAir(x))",
            "\u2200x (LeapStraightIntoAir(x) \u2192 Activate(x, legMuscle))",
            "\u00acActivate(yuri, legMuscle)"
        ],
        "question": "If Yuri is not an American professional basketball player, then Yuri is a professional basketball player.",
        "question_fol": "\u00ac(AmericanNational(yuri) \u2227 Professional(yuri) \u2227 BasketballPlayer(yuri)) \u2192 (Professional(yuri) \u2227 BasketballPlayer(yuri))",
        "answer": "B",
        "predicates_fol": [
            "Professional(x)",
            "BasketballPlayer(x)",
            "AmericanNational(x)",
            "CanDo(x, y)",
            "LeapStraightIntoAir(x)",
            "Activate(x, y)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 724,
        "story_id": 280,
        "context": [
            "Events are either happy or sad.",
            "At least one event is happy. "
        ],
        "context_fol": [
            "\u2200x (Event(x) \u2192 Happy(x) \u2295 Sad(x))",
            "\u2203x (Event(x) \u2227 Happy(x)) "
        ],
        "question": "All events are sad.",
        "question_fol": "\u2200x (Event(x) \u2192 Sad(x))",
        "answer": "B",
        "predicates_fol": [
            "Event(x)",
            "Happy(x)",
            "Sad(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 411,
        "story_id": 140,
        "context": [
            "The winner of the 1992 du Maurier Classic was Steinhauer.",
            "Steinhauer participated in the 1992 du Maurier Classic.",
            "One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.",
            "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
            "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
        ],
        "context_fol": [
            "WinnerOf(steinhauer, duMaurierClassic, year1992)",
            "Participate(duMaurierClassic, steinhauer, year1992)",
            "\u2203x \u2203y (OnLeaderBoardOf(x, duMaurierClassic) \u2227 SixWayTie(x)) \u2227 In(y, sixWayTie) \u2227 Belgium(y))",
            "From(descampe, belgium) \u2227 OnLeaderBoardOf(descampe, duMaurierClassic)",
            "\u2200x (LeaderBoard(maurier, x) \u2192 Participate(maurier, x))"
        ],
        "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
        "question_fol": "\u00acWinnerOf(steinhauer, duMaurierClassic, year1992)",
        "answer": "B",
        "predicates_fol": [
            "WinnerOf(x, y)",
            "Participate(x, y)",
            "From(x, y)",
            "OnLeaderBoardOf(x, y)",
            "LeaderBoard(x, y)",
            "SixWayTie(x)",
            "Belgium(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 412,
        "story_id": 140,
        "context": [
            "The winner of the 1992 du Maurier Classic was Steinhauer.",
            "Steinhauer participated in the 1992 du Maurier Classic.",
            "One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.",
            "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
            "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
        ],
        "context_fol": [
            "WinnerOf(steinhauer, duMaurierClassic, year1992)",
            "Participate(duMaurierClassic, steinhauer, year1992)",
            "\u2203x \u2203y (OnLeaderBoardOf(x, duMaurierClassic) \u2227 SixWayTie(x)) \u2227 In(y, sixWayTie) \u2227 Belgium(y))",
            "From(descampe, belgium) \u2227 OnLeaderBoardOf(descampe, duMaurierClassic)",
            "\u2200x (LeaderBoard(maurier, x) \u2192 Participate(maurier, x))"
        ],
        "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
        "question_fol": "SixWayTie(descampe)",
        "answer": "C",
        "predicates_fol": [
            "WinnerOf(x, y)",
            "Participate(x, y)",
            "From(x, y)",
            "OnLeaderBoardOf(x, y)",
            "LeaderBoard(x, y)",
            "SixWayTie(x)",
            "Belgium(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1324,
        "story_id": 459,
        "context": [
            "Jane does not like any animals that bark.",
            "All dogs are animals that bark.",
            "Jane likes all animals that jump.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "KiKi is an animal.",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "context_fol": [
            "\u2200x (Animal(x) \u2227 Bark(x) \u2192 \u00acLike(jane, x))",
            "\u2200x (Dog(x) \u2192 Animal(x) \u2227 Bark(x))",
            "\u2200x (Animal(x) \u2227 Jump(x) \u2192 Like(jane, x))",
            "\u2200x (\u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(x, y) \u2227 Have(x, z)) \u2192 Jump(x))",
            "\u2200x (Terricolous(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
            "Animal(kiki)",
            "\u00acJump(kiki) \u2227 \u00ac(\u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(kiki, y) \u2227 Have(kiki, z))) \u2192 Terricolous(kiki) \u2228 \u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(kiki, y) \u2227 Have(kiki, z))"
        ],
        "question": "KiKi is terricolous.",
        "question_fol": "Terricolous(kiki)",
        "answer": "C",
        "predicates_fol": [
            "Animal(x)",
            "Bark(x)",
            "Like(x, y)",
            "Dog(x)",
            "Jump(x)",
            "Leg(x)",
            "Have(x, y)",
            "Terricolous(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1325,
        "story_id": 459,
        "context": [
            "Jane does not like any animals that bark.",
            "All dogs are animals that bark.",
            "Jane likes all animals that jump.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "KiKi is an animal.",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "context_fol": [
            "\u2200x (Animal(x) \u2227 Bark(x) \u2192 \u00acLike(jane, x))",
            "\u2200x (Dog(x) \u2192 Animal(x) \u2227 Bark(x))",
            "\u2200x (Animal(x) \u2227 Jump(x) \u2192 Like(jane, x))",
            "\u2200x (\u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(x, y) \u2227 Have(x, z)) \u2192 Jump(x))",
            "\u2200x (Terricolous(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
            "Animal(kiki)",
            "\u00acJump(kiki) \u2227 \u00ac(\u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(kiki, y) \u2227 Have(kiki, z))) \u2192 Terricolous(kiki) \u2228 \u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(kiki, y) \u2227 Have(kiki, z))"
        ],
        "question": "KiKi is a barking dog.",
        "question_fol": "Bark(kiki) \u2227 Dog(kiki)",
        "answer": "B",
        "predicates_fol": [
            "Animal(x)",
            "Bark(x)",
            "Like(x, y)",
            "Dog(x)",
            "Jump(x)",
            "Leg(x)",
            "Have(x, y)",
            "Terricolous(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 1326,
        "story_id": 459,
        "context": [
            "Jane does not like any animals that bark.",
            "All dogs are animals that bark.",
            "Jane likes all animals that jump.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "KiKi is an animal.",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "context_fol": [
            "\u2200x (Animal(x) \u2227 Bark(x) \u2192 \u00acLike(jane, x))",
            "\u2200x (Dog(x) \u2192 Animal(x) \u2227 Bark(x))",
            "\u2200x (Animal(x) \u2227 Jump(x) \u2192 Like(jane, x))",
            "\u2200x (\u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(x, y) \u2227 Have(x, z)) \u2192 Jump(x))",
            "\u2200x (Terricolous(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(x, y) \u2227 Have(x, z)))",
            "Animal(kiki)",
            "\u00acJump(kiki) \u2227 \u00ac(\u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(kiki, y) \u2227 Have(kiki, z))) \u2192 Terricolous(kiki) \u2228 \u2203y \u2203z (\u00ac(y=z) \u2227 Leg(y) \u2227 Leg(z) \u2227 Have(kiki, y) \u2227 Have(kiki, z))"
        ],
        "question": "KiKi does not bark and he is not a dog.",
        "question_fol": "\u00acBark(kiki) \u2227 \u00acDog(kiki)",
        "answer": "A",
        "predicates_fol": [
            "Animal(x)",
            "Bark(x)",
            "Like(x, y)",
            "Dog(x)",
            "Jump(x)",
            "Leg(x)",
            "Have(x, y)",
            "Terricolous(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 304,
        "story_id": 101,
        "context": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.",
            "N\u00e1utico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "context_fol": [
            "BornIn(ailtonSilva, year1995) \u2227 CommonlyKnownAs(ailtonSilva, ailton)",
            "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)",
            "Brazilian(ailtonSilva) \u2227 Footballplayer(ailtonSilva) \u2227 PlayFor(ailtonSilva, nautico)",
            "FootballClub(nautico) \u2227 FootballClub(braga)",
            "FootballClub(fluminense)"
        ],
        "question": "No one playing for Nautico is Brazilian.",
        "question_fol": "\u2200x (PlayFor(x, nautico) \u2192 \u00acBrazilian(x))",
        "answer": "B",
        "predicates_fol": [
            "BornIn(x, y)",
            "CommonlyKnownAs(x, y)",
            "FootballPlayer(x)",
            "LoanedTo(x, y)",
            "Brazilian(x)",
            "Footballplayer(x)",
            "PlayFor(x, y)",
            "FootballClub(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 305,
        "story_id": 101,
        "context": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.",
            "N\u00e1utico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "context_fol": [
            "BornIn(ailtonSilva, year1995) \u2227 CommonlyKnownAs(ailtonSilva, ailton)",
            "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)",
            "Brazilian(ailtonSilva) \u2227 Footballplayer(ailtonSilva) \u2227 PlayFor(ailtonSilva, nautico)",
            "FootballClub(nautico) \u2227 FootballClub(braga)",
            "FootballClub(fluminense)"
        ],
        "question": "Ailton Silva does not play for a football club.",
        "question_fol": "\u2200x (FootballClub(x) \u2192 \u00acPlayFor(ailtonSilva, x))",
        "answer": "B",
        "predicates_fol": [
            "BornIn(x, y)",
            "CommonlyKnownAs(x, y)",
            "FootballPlayer(x)",
            "LoanedTo(x, y)",
            "Brazilian(x)",
            "Footballplayer(x)",
            "PlayFor(x, y)",
            "FootballClub(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 306,
        "story_id": 101,
        "context": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.",
            "N\u00e1utico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "context_fol": [
            "BornIn(ailtonSilva, year1995) \u2227 CommonlyKnownAs(ailtonSilva, ailton)",
            "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)",
            "Brazilian(ailtonSilva) \u2227 Footballplayer(ailtonSilva) \u2227 PlayFor(ailtonSilva, nautico)",
            "FootballClub(nautico) \u2227 FootballClub(braga)",
            "FootballClub(fluminense)"
        ],
        "question": "Ailton was not loaned out to a football club.",
        "question_fol": "\u2200x (FootballClub(x) \u2192 \u00acLoanedTo(ailton, x))",
        "answer": "B",
        "predicates_fol": [
            "BornIn(x, y)",
            "CommonlyKnownAs(x, y)",
            "FootballPlayer(x)",
            "LoanedTo(x, y)",
            "Brazilian(x)",
            "Footballplayer(x)",
            "PlayFor(x, y)",
            "FootballClub(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 307,
        "story_id": 101,
        "context": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.",
            "N\u00e1utico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "context_fol": [
            "BornIn(ailtonSilva, year1995) \u2227 CommonlyKnownAs(ailtonSilva, ailton)",
            "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)",
            "Brazilian(ailtonSilva) \u2227 Footballplayer(ailtonSilva) \u2227 PlayFor(ailtonSilva, nautico)",
            "FootballClub(nautico) \u2227 FootballClub(braga)",
            "FootballClub(fluminense)"
        ],
        "question": "Ailton Silva played for Fluminense.",
        "question_fol": "PlayFor(ailtonSilva, fluminense)",
        "answer": "C",
        "predicates_fol": [
            "BornIn(x, y)",
            "CommonlyKnownAs(x, y)",
            "FootballPlayer(x)",
            "LoanedTo(x, y)",
            "Brazilian(x)",
            "Footballplayer(x)",
            "PlayFor(x, y)",
            "FootballClub(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    },
    {
        "id": 308,
        "story_id": 101,
        "context": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.",
            "N\u00e1utico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "context_fol": [
            "BornIn(ailtonSilva, year1995) \u2227 CommonlyKnownAs(ailtonSilva, ailton)",
            "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)",
            "Brazilian(ailtonSilva) \u2227 Footballplayer(ailtonSilva) \u2227 PlayFor(ailtonSilva, nautico)",
            "FootballClub(nautico) \u2227 FootballClub(braga)",
            "FootballClub(fluminense)"
        ],
        "question": "Ailton Silva was loaned out to a football club.",
        "question_fol": "\u2203x (FootballClub(x) \u2227 LoanedTo(ailtonSilva, x))",
        "answer": "C",
        "predicates_fol": [
            "BornIn(x, y)",
            "CommonlyKnownAs(x, y)",
            "FootballPlayer(x)",
            "LoanedTo(x, y)",
            "Brazilian(x)",
            "Footballplayer(x)",
            "PlayFor(x, y)",
            "FootballClub(x)"
        ],
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ]
    }
]