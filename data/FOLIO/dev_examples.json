{
    "0": [
        {
            "example_id": 868,
            "story_id": 333,
            "context": [
                "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
                "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
                "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
                "All young teenage girls who attend college are big fans of pop bands and singers.",
                "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
            ],
            "context_fol": [
                "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
                "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
                "\u2200x (Fans(x) \u2192 Decor(x))",
                "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
                "Ambitious(sam) \u2192 Fans(sam)"
            ],
            "question": "Sam is a young teenage girl who attends college.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1013,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or have friends who are getting married.",
                "No preteens and other young children are getting married or have friends who are getting married.",
                "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
                "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and very spirited are fond of large organized group functions.",
                "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
            ],
            "context_fol": [
                "\u2200x Weddings(x) \u2192 GettingMarried(x)",
                "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
                "\u2200x Celebrating(x) \u2192 Weddings(x)",
                "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
                "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
                "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
            ],
            "question": "Carol is outgoing and very spirited.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1202,
            "story_id": 423,
            "context": [
                "Students either go to the park or go to the movies. ",
                "No student who enjoys nature has free time during the weekend. ",
                "All students who go to the movies enjoy nature. ",
                "All students who do not have class during the weekend have free time during the weekend. ",
                "All students not in summer camp do not have class during the weekend. ",
                "James does not have class during the weekend."
            ],
            "context_fol": [
                "\u2200x (Park(x) \u2295 Movies(x))",
                "\u2200x (Nature(x) \u2192 \u00acFreeTime(x))",
                "\u2200x (Movies(x) \u2192 Nature(x))",
                "\u2200x (NoClass(x) \u2192 FreeTime(x))",
                "\u2200x (SummerCamp(x) \u2192 NoClass(x))",
                "NoClass(james)"
            ],
            "question": "James is in summer camp.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "1": [
        {
            "example_id": 868,
            "story_id": 333,
            "context": [
                "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
                "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
                "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
                "All young teenage girls who attend college are big fans of pop bands and singers.",
                "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
            ],
            "context_fol": [
                "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
                "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
                "\u2200x (Fans(x) \u2192 Decor(x))",
                "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
                "Ambitious(sam) \u2192 Fans(sam)"
            ],
            "question": "Sam is a young teenage girl who attends college.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1013,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or have friends who are getting married.",
                "No preteens and other young children are getting married or have friends who are getting married.",
                "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
                "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and very spirited are fond of large organized group functions.",
                "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
            ],
            "context_fol": [
                "\u2200x Weddings(x) \u2192 GettingMarried(x)",
                "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
                "\u2200x Celebrating(x) \u2192 Weddings(x)",
                "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
                "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
                "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
            ],
            "question": "Carol is outgoing and very spirited.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1202,
            "story_id": 423,
            "context": [
                "Students either go to the park or go to the movies. ",
                "No student who enjoys nature has free time during the weekend. ",
                "All students who go to the movies enjoy nature. ",
                "All students who do not have class during the weekend have free time during the weekend. ",
                "All students not in summer camp do not have class during the weekend. ",
                "James does not have class during the weekend."
            ],
            "context_fol": [
                "\u2200x (Park(x) \u2295 Movies(x))",
                "\u2200x (Nature(x) \u2192 \u00acFreeTime(x))",
                "\u2200x (Movies(x) \u2192 Nature(x))",
                "\u2200x (NoClass(x) \u2192 FreeTime(x))",
                "\u2200x (SummerCamp(x) \u2192 NoClass(x))",
                "NoClass(james)"
            ],
            "question": "James is in summer camp.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "2": [
        {
            "example_id": 868,
            "story_id": 333,
            "context": [
                "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
                "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
                "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
                "All young teenage girls who attend college are big fans of pop bands and singers.",
                "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
            ],
            "context_fol": [
                "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
                "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
                "\u2200x (Fans(x) \u2192 Decor(x))",
                "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
                "Ambitious(sam) \u2192 Fans(sam)"
            ],
            "question": "Sam is a young teenage girl who attends college.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1013,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or have friends who are getting married.",
                "No preteens and other young children are getting married or have friends who are getting married.",
                "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
                "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and very spirited are fond of large organized group functions.",
                "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
            ],
            "context_fol": [
                "\u2200x Weddings(x) \u2192 GettingMarried(x)",
                "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
                "\u2200x Celebrating(x) \u2192 Weddings(x)",
                "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
                "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
                "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
            ],
            "question": "Carol is outgoing and very spirited.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1202,
            "story_id": 423,
            "context": [
                "Students either go to the park or go to the movies. ",
                "No student who enjoys nature has free time during the weekend. ",
                "All students who go to the movies enjoy nature. ",
                "All students who do not have class during the weekend have free time during the weekend. ",
                "All students not in summer camp do not have class during the weekend. ",
                "James does not have class during the weekend."
            ],
            "context_fol": [
                "\u2200x (Park(x) \u2295 Movies(x))",
                "\u2200x (Nature(x) \u2192 \u00acFreeTime(x))",
                "\u2200x (Movies(x) \u2192 Nature(x))",
                "\u2200x (NoClass(x) \u2192 FreeTime(x))",
                "\u2200x (SummerCamp(x) \u2192 NoClass(x))",
                "NoClass(james)"
            ],
            "question": "James is in summer camp.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "3": [
        {
            "example_id": 1128,
            "story_id": 405,
            "context": [
                "Everyone who works in person is a commuter.",
                "People either work in person or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup.",
                "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
            ],
            "context_fol": [
                "\u2200x (InPerson(x) \u2192 Commuter(x))",
                "\u2200x (InPerson(x) \u2295 FromHome(x))",
                "\u2200x (FromHome(x) \u2192 Relaxed(x))",
                "Commuter(george) \u2295 HomeOffice(george)",
                "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
            ],
            "question": "George is a person who works from home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 187,
            "story_id": 63,
            "context": [
                "All students who attend in person have registered for the conference. ",
                "Students either attend the conference in person or remotely. ",
                "No students from China attend the conference remotely. ",
                "James attends the conference but he does not attend the conference remotely.",
                "Jack attends the conference and he is a student from China."
            ],
            "context_fol": [
                "\u2200x (Attend(x) \u2192 Registered(x))",
                "\u2200x (Attend(x) \u2192 InPerson(x) \u2295 Remotely(x))",
                "\u2200x ((Attend(x) \u2227 China(x)) \u2192 \u00acRemotely(x))",
                "Attend(james) \u2227 \u00acRemotely(james)",
                "China(jack) \u2227 Attend(jack)"
            ],
            "question": "James attends the conference but not in person.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1258,
            "story_id": 437,
            "context": [
                "Either present their work at the conference or provide a tutorial session at the conference. ",
                "All who present their work at the conference will attend in person. ",
                "All those providing a tutorial session at the conference are invited to join the club. ",
                "All who attend the conference in person are provided with souvenirs. ",
                "All invited to join the club are provided with delicious meals. ",
                "All provided with delicious meals are happy to communicate with each other during the dinner. ",
                "All provided with delicious meals are invited to take a photo with the audience. ",
                "James does not attend the conference in person and is not provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x ( Present(x) \u2228 Tutorial(x))",
                "\u2200x (Present(x) \u2192 InPerson(x))",
                "\u2200x (Tutorial(x) \u2192 Invited(x))",
                "\u2200x (InPerson(x) \u2192 Souvenirs(x))",
                "\u2200x (Invited(x) \u2192 Meals(x))",
                "\u2200x (Meals(x) \u2192 HappyCommunicate(x))",
                "\u2200x (Meals(x) \u2192 InvitedTakePhoto(x))",
                "\u00ac(InPerson(james) \u2227 Souvenirs(james))"
            ],
            "question": "James is provided with souvenirs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "4": [
        {
            "example_id": 1128,
            "story_id": 405,
            "context": [
                "Everyone who works in person is a commuter.",
                "People either work in person or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup.",
                "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
            ],
            "context_fol": [
                "\u2200x (InPerson(x) \u2192 Commuter(x))",
                "\u2200x (InPerson(x) \u2295 FromHome(x))",
                "\u2200x (FromHome(x) \u2192 Relaxed(x))",
                "Commuter(george) \u2295 HomeOffice(george)",
                "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
            ],
            "question": "George is a person who works from home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 187,
            "story_id": 63,
            "context": [
                "All students who attend in person have registered for the conference. ",
                "Students either attend the conference in person or remotely. ",
                "No students from China attend the conference remotely. ",
                "James attends the conference but he does not attend the conference remotely.",
                "Jack attends the conference and he is a student from China."
            ],
            "context_fol": [
                "\u2200x (Attend(x) \u2192 Registered(x))",
                "\u2200x (Attend(x) \u2192 InPerson(x) \u2295 Remotely(x))",
                "\u2200x ((Attend(x) \u2227 China(x)) \u2192 \u00acRemotely(x))",
                "Attend(james) \u2227 \u00acRemotely(james)",
                "China(jack) \u2227 Attend(jack)"
            ],
            "question": "James attends the conference but not in person.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1258,
            "story_id": 437,
            "context": [
                "Either present their work at the conference or provide a tutorial session at the conference. ",
                "All who present their work at the conference will attend in person. ",
                "All those providing a tutorial session at the conference are invited to join the club. ",
                "All who attend the conference in person are provided with souvenirs. ",
                "All invited to join the club are provided with delicious meals. ",
                "All provided with delicious meals are happy to communicate with each other during the dinner. ",
                "All provided with delicious meals are invited to take a photo with the audience. ",
                "James does not attend the conference in person and is not provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x ( Present(x) \u2228 Tutorial(x))",
                "\u2200x (Present(x) \u2192 InPerson(x))",
                "\u2200x (Tutorial(x) \u2192 Invited(x))",
                "\u2200x (InPerson(x) \u2192 Souvenirs(x))",
                "\u2200x (Invited(x) \u2192 Meals(x))",
                "\u2200x (Meals(x) \u2192 HappyCommunicate(x))",
                "\u2200x (Meals(x) \u2192 InvitedTakePhoto(x))",
                "\u00ac(InPerson(james) \u2227 Souvenirs(james))"
            ],
            "question": "James is provided with souvenirs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "5": [
        {
            "example_id": 1128,
            "story_id": 405,
            "context": [
                "Everyone who works in person is a commuter.",
                "People either work in person or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup.",
                "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
            ],
            "context_fol": [
                "\u2200x (InPerson(x) \u2192 Commuter(x))",
                "\u2200x (InPerson(x) \u2295 FromHome(x))",
                "\u2200x (FromHome(x) \u2192 Relaxed(x))",
                "Commuter(george) \u2295 HomeOffice(george)",
                "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
            ],
            "question": "George is a person who works from home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 187,
            "story_id": 63,
            "context": [
                "All students who attend in person have registered for the conference. ",
                "Students either attend the conference in person or remotely. ",
                "No students from China attend the conference remotely. ",
                "James attends the conference but he does not attend the conference remotely.",
                "Jack attends the conference and he is a student from China."
            ],
            "context_fol": [
                "\u2200x (Attend(x) \u2192 Registered(x))",
                "\u2200x (Attend(x) \u2192 InPerson(x) \u2295 Remotely(x))",
                "\u2200x ((Attend(x) \u2227 China(x)) \u2192 \u00acRemotely(x))",
                "Attend(james) \u2227 \u00acRemotely(james)",
                "China(jack) \u2227 Attend(jack)"
            ],
            "question": "James attends the conference but not in person.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1258,
            "story_id": 437,
            "context": [
                "Either present their work at the conference or provide a tutorial session at the conference. ",
                "All who present their work at the conference will attend in person. ",
                "All those providing a tutorial session at the conference are invited to join the club. ",
                "All who attend the conference in person are provided with souvenirs. ",
                "All invited to join the club are provided with delicious meals. ",
                "All provided with delicious meals are happy to communicate with each other during the dinner. ",
                "All provided with delicious meals are invited to take a photo with the audience. ",
                "James does not attend the conference in person and is not provided with souvenirs."
            ],
            "context_fol": [
                "\u2200x ( Present(x) \u2228 Tutorial(x))",
                "\u2200x (Present(x) \u2192 InPerson(x))",
                "\u2200x (Tutorial(x) \u2192 Invited(x))",
                "\u2200x (InPerson(x) \u2192 Souvenirs(x))",
                "\u2200x (Invited(x) \u2192 Meals(x))",
                "\u2200x (Meals(x) \u2192 HappyCommunicate(x))",
                "\u2200x (Meals(x) \u2192 InvitedTakePhoto(x))",
                "\u00ac(InPerson(james) \u2227 Souvenirs(james))"
            ],
            "question": "James is provided with souvenirs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "6": [
        {
            "example_id": 696,
            "story_id": 248,
            "context": [
                "Kangaroo is an animal.",
                "No Kangaroos live in Germany.",
                "If Jane saves enough money for the summer, she will fly to Germany.",
                "If Jane flies to Germany, she will go to the Berlin Zoo.",
                "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."
            ],
            "context_fol": [
                "\u2200x (Kangaroo(x) \u2192 Animal(x))",
                "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))",
                "EnoughMoney(jane) \u2192 FlyTo(jane, germany)",
                "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ",
                "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 Animal(y) \u2192 MaySee(y, x, berlinzoo))"
            ],
            "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 3,
            "story_id": 1,
            "context": [
                "Mary has the flu.",
                "Flu and influenza are the same disease.",
                "Susan doesn't have influenza."
            ],
            "context_fol": [
                "Have(mary, flu)",
                "\u2200x (Have(x, flu) \u2194 Have(x, influenza))",
                "\u00acHave(susan, influenza)"
            ],
            "question": "Either Mary or Susan has influenza.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "7": [
        {
            "example_id": 696,
            "story_id": 248,
            "context": [
                "Kangaroo is an animal.",
                "No Kangaroos live in Germany.",
                "If Jane saves enough money for the summer, she will fly to Germany.",
                "If Jane flies to Germany, she will go to the Berlin Zoo.",
                "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."
            ],
            "context_fol": [
                "\u2200x (Kangaroo(x) \u2192 Animal(x))",
                "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))",
                "EnoughMoney(jane) \u2192 FlyTo(jane, germany)",
                "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ",
                "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 Animal(y) \u2192 MaySee(y, x, berlinzoo))"
            ],
            "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 3,
            "story_id": 1,
            "context": [
                "Mary has the flu.",
                "Flu and influenza are the same disease.",
                "Susan doesn't have influenza."
            ],
            "context_fol": [
                "Have(mary, flu)",
                "\u2200x (Have(x, flu) \u2194 Have(x, influenza))",
                "\u00acHave(susan, influenza)"
            ],
            "question": "Either Mary or Susan has influenza.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "8": [
        {
            "example_id": 696,
            "story_id": 248,
            "context": [
                "Kangaroo is an animal.",
                "No Kangaroos live in Germany.",
                "If Jane saves enough money for the summer, she will fly to Germany.",
                "If Jane flies to Germany, she will go to the Berlin Zoo.",
                "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."
            ],
            "context_fol": [
                "\u2200x (Kangaroo(x) \u2192 Animal(x))",
                "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))",
                "EnoughMoney(jane) \u2192 FlyTo(jane, germany)",
                "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ",
                "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 Animal(y) \u2192 MaySee(y, x, berlinzoo))"
            ],
            "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 3,
            "story_id": 1,
            "context": [
                "Mary has the flu.",
                "Flu and influenza are the same disease.",
                "Susan doesn't have influenza."
            ],
            "context_fol": [
                "Have(mary, flu)",
                "\u2200x (Have(x, flu) \u2194 Have(x, influenza))",
                "\u00acHave(susan, influenza)"
            ],
            "question": "Either Mary or Susan has influenza.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "9": [
        {
            "example_id": 1269,
            "story_id": 440,
            "context": [
                "All animals that are tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "Everything that is a husky is a dog.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2228 Cat(fido)"
            ],
            "question": "Fido is a husky.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 730,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 InZoo(x)) \u2192 \u00acWild(x))",
                "\u2203x (Bear(x) \u2227 InZoo(x)) "
            ],
            "question": "Not all bears are wild.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "10": [
        {
            "example_id": 1269,
            "story_id": 440,
            "context": [
                "All animals that are tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "Everything that is a husky is a dog.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2228 Cat(fido)"
            ],
            "question": "Fido is a husky.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 730,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 InZoo(x)) \u2192 \u00acWild(x))",
                "\u2203x (Bear(x) \u2227 InZoo(x)) "
            ],
            "question": "Not all bears are wild.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "11": [
        {
            "example_id": 1269,
            "story_id": 440,
            "context": [
                "All animals that are tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "Everything that is a husky is a dog.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2228 Cat(fido)"
            ],
            "question": "Fido is a husky.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 730,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 InZoo(x)) \u2192 \u00acWild(x))",
                "\u2203x (Bear(x) \u2227 InZoo(x)) "
            ],
            "question": "Not all bears are wild.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "12": [
        {
            "example_id": 1157,
            "story_id": 411,
            "context": [
                "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
                "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
                "Some games published before 2010 support the Linux OS system. ",
                "All games on the Best Seller list are popular among young people. ",
                "FIFA22 neither supports the Linux OS system nor is it popular among young people."
            ],
            "context_fol": [
                "\u2200x (SoldMillion(x) \u2192 BestSeller(x))",
                "\u2200x (DevelopedByParadox(x) \u2192 SoldMillion(x))",
                "\u2203x ((PublishedBefore2010(x) \u2227 SupportLinuxSystem(x)))",
                "\u2200x (BestSeller(x) \u2192 Popular(x))",
                "\u00ac(SupportLinuxSystem(fifa21) \u2228 Popular(fifa21))"
            ],
            "question": "FIFA21 is published before 2010",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 274,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)",
                "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))",
                "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are influenced by Isaac Asimov.",
                "The book the Three Body Problem has sold more than 1 million copies.",
                "The Three Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
                "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
                "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
                "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
                "AboutFuture(threebodyproblem)"
            ],
            "question": "The Three Body Problem won the Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "13": [
        {
            "example_id": 1157,
            "story_id": 411,
            "context": [
                "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
                "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
                "Some games published before 2010 support the Linux OS system. ",
                "All games on the Best Seller list are popular among young people. ",
                "FIFA22 neither supports the Linux OS system nor is it popular among young people."
            ],
            "context_fol": [
                "\u2200x (SoldMillion(x) \u2192 BestSeller(x))",
                "\u2200x (DevelopedByParadox(x) \u2192 SoldMillion(x))",
                "\u2203x ((PublishedBefore2010(x) \u2227 SupportLinuxSystem(x)))",
                "\u2200x (BestSeller(x) \u2192 Popular(x))",
                "\u00ac(SupportLinuxSystem(fifa21) \u2228 Popular(fifa21))"
            ],
            "question": "FIFA21 is published before 2010",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 274,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)",
                "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))",
                "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are influenced by Isaac Asimov.",
                "The book the Three Body Problem has sold more than 1 million copies.",
                "The Three Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
                "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
                "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
                "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
                "AboutFuture(threebodyproblem)"
            ],
            "question": "The Three Body Problem won the Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "14": [
        {
            "example_id": 1157,
            "story_id": 411,
            "context": [
                "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
                "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
                "Some games published before 2010 support the Linux OS system. ",
                "All games on the Best Seller list are popular among young people. ",
                "FIFA22 neither supports the Linux OS system nor is it popular among young people."
            ],
            "context_fol": [
                "\u2200x (SoldMillion(x) \u2192 BestSeller(x))",
                "\u2200x (DevelopedByParadox(x) \u2192 SoldMillion(x))",
                "\u2203x ((PublishedBefore2010(x) \u2227 SupportLinuxSystem(x)))",
                "\u2200x (BestSeller(x) \u2192 Popular(x))",
                "\u00ac(SupportLinuxSystem(fifa21) \u2228 Popular(fifa21))"
            ],
            "question": "FIFA21 is published before 2010",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 274,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)",
                "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))",
                "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are influenced by Isaac Asimov.",
                "The book the Three Body Problem has sold more than 1 million copies.",
                "The Three Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
                "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
                "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
                "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
                "AboutFuture(threebodyproblem)"
            ],
            "question": "The Three Body Problem won the Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "15": [
        {
            "example_id": 739,
            "story_id": 290,
            "context": [
                "All tables are round.",
                "Some furniture are tables."
            ],
            "context_fol": [
                "\u2200x (Table(x) \u2192 Round(x))",
                "\u2203x (Furniture(x) \u2227 Table(x))"
            ],
            "question": "Some furniture are round.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 733,
            "story_id": 284,
            "context": [
                "Each building is tall. ",
                "Everything tall has  height."
            ],
            "context_fol": [
                "\u2200x (Building(x) \u2192 \u00acTall(x))",
                "\u2200x (Tall(x) \u2192 HasHeight(x))"
            ],
            "question": "All buildings are magnificent.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1294,
            "story_id": 448,
            "context": [
                "Everyone that uses a football can throw a football.",
                "If someone plays football, then they use a football.",
                "Either someone is a football player or a basketball player.",
                "Every basketball player is tall.",
                "Everyone that can throw a football can throw a football with a spiral.",
                "If someone is tall, then they are in shape.",
                "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
            ],
            "context_fol": [
                "\u2200x (UseFootball(x) \u2192 ThrowFootball(x))",
                "\u2200x (PlayFootball(x) \u2192 UseFootball(x))",
                "\u2200x (BasketballPlayer(x) \u2228 PlayFootball(x))",
                "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
                "\u2200x (ThrowFootball(x) \u2192 ThrowFootballSpiral(x))",
                "\u2200x (Tall(x) \u2192 InShape(x))",
                "\u00acTall(jack) \u2227 \u00acBasketballPlayer(jack) \u2192 \u00acTall(jack) \u2227 \u00acThrowFootball(jack)"
            ],
            "question": "Jack plays football.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "16": [
        {
            "example_id": 703,
            "story_id": 254,
            "context": [
                "All rabbits have fur",
                "Some pets are rabbits."
            ],
            "context_fol": [
                "\u2200x (Rabbit(x) \u2192 HasFur(x))",
                "\u2203x (Pet(x) \u2227 Reptile(x))"
            ],
            "question": "Some pets do not have fur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 702,
            "story_id": 253,
            "context": [
                "No reptile has fur.",
                "All snakes are reptiles."
            ],
            "context_fol": [
                "\u2200x (Reptile(x) \u2192 \u00acHasFur(x))",
                "\u2200x (Snake(x) \u2192 Reptile(x))"
            ],
            "question": "Some snake has fur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1309,
            "story_id": 453,
            "context": [
                "No cold-blooded animals are birds.",
                "All reptiles are cold-blooded.",
                "Either an animal is a bird or it eats other animals.",
                "If an animal eats other animals, then it is a carnivore.",
                "Ron is neither a cold-blooded animal nor a carnivore.",
                "Henry is neither a carnivore nor a lizard."
            ],
            "context_fol": [
                "\u2200x (ColdBlooded(x) \u2192 \u00acBird(x))",
                "\u2200x (Reptile(x) \u2192 ColdBlooded(x))",
                "\u2200x (Bird(x) \u2228 EatOtherAnimals(x))",
                "\u2200x (EatOtherAnimals(x) \u2192 Carnivore(x))",
                "\u00acColdBlooded(ron) \u2227 \u00acCarnivore(ron)",
                "\u00acCarnivore(henry) \u2227 \u00acLizard(henry)"
            ],
            "question": "Ron is a lizard.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "17": [
        {
            "example_id": 703,
            "story_id": 254,
            "context": [
                "All rabbits have fur",
                "Some pets are rabbits."
            ],
            "context_fol": [
                "\u2200x (Rabbit(x) \u2192 HasFur(x))",
                "\u2203x (Pet(x) \u2227 Reptile(x))"
            ],
            "question": "Some pets do not have fur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 702,
            "story_id": 253,
            "context": [
                "No reptile has fur.",
                "All snakes are reptiles."
            ],
            "context_fol": [
                "\u2200x (Reptile(x) \u2192 \u00acHasFur(x))",
                "\u2200x (Snake(x) \u2192 Reptile(x))"
            ],
            "question": "Some snake has fur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1309,
            "story_id": 453,
            "context": [
                "No cold-blooded animals are birds.",
                "All reptiles are cold-blooded.",
                "Either an animal is a bird or it eats other animals.",
                "If an animal eats other animals, then it is a carnivore.",
                "Ron is neither a cold-blooded animal nor a carnivore.",
                "Henry is neither a carnivore nor a lizard."
            ],
            "context_fol": [
                "\u2200x (ColdBlooded(x) \u2192 \u00acBird(x))",
                "\u2200x (Reptile(x) \u2192 ColdBlooded(x))",
                "\u2200x (Bird(x) \u2228 EatOtherAnimals(x))",
                "\u2200x (EatOtherAnimals(x) \u2192 Carnivore(x))",
                "\u00acColdBlooded(ron) \u2227 \u00acCarnivore(ron)",
                "\u00acCarnivore(henry) \u2227 \u00acLizard(henry)"
            ],
            "question": "Ron is a lizard.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "18": [
        {
            "example_id": 703,
            "story_id": 254,
            "context": [
                "All rabbits have fur",
                "Some pets are rabbits."
            ],
            "context_fol": [
                "\u2200x (Rabbit(x) \u2192 HasFur(x))",
                "\u2203x (Pet(x) \u2227 Reptile(x))"
            ],
            "question": "Some pets do not have fur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 702,
            "story_id": 253,
            "context": [
                "No reptile has fur.",
                "All snakes are reptiles."
            ],
            "context_fol": [
                "\u2200x (Reptile(x) \u2192 \u00acHasFur(x))",
                "\u2200x (Snake(x) \u2192 Reptile(x))"
            ],
            "question": "Some snake has fur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1309,
            "story_id": 453,
            "context": [
                "No cold-blooded animals are birds.",
                "All reptiles are cold-blooded.",
                "Either an animal is a bird or it eats other animals.",
                "If an animal eats other animals, then it is a carnivore.",
                "Ron is neither a cold-blooded animal nor a carnivore.",
                "Henry is neither a carnivore nor a lizard."
            ],
            "context_fol": [
                "\u2200x (ColdBlooded(x) \u2192 \u00acBird(x))",
                "\u2200x (Reptile(x) \u2192 ColdBlooded(x))",
                "\u2200x (Bird(x) \u2228 EatOtherAnimals(x))",
                "\u2200x (EatOtherAnimals(x) \u2192 Carnivore(x))",
                "\u00acColdBlooded(ron) \u2227 \u00acCarnivore(ron)",
                "\u00acCarnivore(henry) \u2227 \u00acLizard(henry)"
            ],
            "question": "Ron is a lizard.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "19": [
        {
            "example_id": 703,
            "story_id": 254,
            "context": [
                "All rabbits have fur",
                "Some pets are rabbits."
            ],
            "context_fol": [
                "\u2200x (Rabbit(x) \u2192 HasFur(x))",
                "\u2203x (Pet(x) \u2227 Reptile(x))"
            ],
            "question": "Some pets do not have fur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 702,
            "story_id": 253,
            "context": [
                "No reptile has fur.",
                "All snakes are reptiles."
            ],
            "context_fol": [
                "\u2200x (Reptile(x) \u2192 \u00acHasFur(x))",
                "\u2200x (Snake(x) \u2192 Reptile(x))"
            ],
            "question": "Some snake has fur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1309,
            "story_id": 453,
            "context": [
                "No cold-blooded animals are birds.",
                "All reptiles are cold-blooded.",
                "Either an animal is a bird or it eats other animals.",
                "If an animal eats other animals, then it is a carnivore.",
                "Ron is neither a cold-blooded animal nor a carnivore.",
                "Henry is neither a carnivore nor a lizard."
            ],
            "context_fol": [
                "\u2200x (ColdBlooded(x) \u2192 \u00acBird(x))",
                "\u2200x (Reptile(x) \u2192 ColdBlooded(x))",
                "\u2200x (Bird(x) \u2228 EatOtherAnimals(x))",
                "\u2200x (EatOtherAnimals(x) \u2192 Carnivore(x))",
                "\u00acColdBlooded(ron) \u2227 \u00acCarnivore(ron)",
                "\u00acCarnivore(henry) \u2227 \u00acLizard(henry)"
            ],
            "question": "Ron is a lizard.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "20": [
        {
            "example_id": 703,
            "story_id": 254,
            "context": [
                "All rabbits have fur",
                "Some pets are rabbits."
            ],
            "context_fol": [
                "\u2200x (Rabbit(x) \u2192 HasFur(x))",
                "\u2203x (Pet(x) \u2227 Reptile(x))"
            ],
            "question": "Some pets do not have fur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 702,
            "story_id": 253,
            "context": [
                "No reptile has fur.",
                "All snakes are reptiles."
            ],
            "context_fol": [
                "\u2200x (Reptile(x) \u2192 \u00acHasFur(x))",
                "\u2200x (Snake(x) \u2192 Reptile(x))"
            ],
            "question": "Some snake has fur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1309,
            "story_id": 453,
            "context": [
                "No cold-blooded animals are birds.",
                "All reptiles are cold-blooded.",
                "Either an animal is a bird or it eats other animals.",
                "If an animal eats other animals, then it is a carnivore.",
                "Ron is neither a cold-blooded animal nor a carnivore.",
                "Henry is neither a carnivore nor a lizard."
            ],
            "context_fol": [
                "\u2200x (ColdBlooded(x) \u2192 \u00acBird(x))",
                "\u2200x (Reptile(x) \u2192 ColdBlooded(x))",
                "\u2200x (Bird(x) \u2228 EatOtherAnimals(x))",
                "\u2200x (EatOtherAnimals(x) \u2192 Carnivore(x))",
                "\u00acColdBlooded(ron) \u2227 \u00acCarnivore(ron)",
                "\u00acCarnivore(henry) \u2227 \u00acLizard(henry)"
            ],
            "question": "Ron is a lizard.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "21": [
        {
            "example_id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, amcalist)",
                "Prefer(peter, tvseries)"
            ],
            "question": "James is not able to watch 3 movies every week without any additional fees.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1197,
            "story_id": 422,
            "context": [
                "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week",
                "Customers either subscribe to AMC service or HBO service. ",
                "Customers who prefer TV series more and will not watch TV series in cinemas.",
                "All customers who subscribe to HBO services prefer TV series to movies. ",
                "James watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (AMC(x) \u2228 HBO(x))",
                "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
                "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
                "WatchTVInCinema(james)"
            ],
            "question": "James goes to cinemas every week.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1390,
            "story_id": 477,
            "context": [
                "All video applications are software.",
                "All YouTube-related applications are video applications. ",
                "An APP is either related to YouTube or Instagram.",
                "All Instagram is entertainment. ",
                "All software is programmed. ",
                "All entertainments are interesting.",
                "If something is interesting, then it is good.",
                "TikTok is not good."
            ],
            "context_fol": [
                "\u2200x (App(x) \u2192 Software(x))",
                "\u2200x (Youtube(x) \u2192 App(x))",
                "\u2200x (Youtube(x) \u2228 Instagram(x))",
                "\u2200x (Instagram(x) \u2192 Entertainment(x))",
                "\u2200x (Software(x) \u2192 Program(x))",
                "\u2200x (Entertainment(x) \u2192 Interesting(x))",
                "\u2200x (Interesting(x) \u2192 Good(x))",
                "\u00acGood(tiktok)"
            ],
            "question": "Tiktok is a program.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "22": [
        {
            "example_id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, amcalist)",
                "Prefer(peter, tvseries)"
            ],
            "question": "James is not able to watch 3 movies every week without any additional fees.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1197,
            "story_id": 422,
            "context": [
                "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week",
                "Customers either subscribe to AMC service or HBO service. ",
                "Customers who prefer TV series more and will not watch TV series in cinemas.",
                "All customers who subscribe to HBO services prefer TV series to movies. ",
                "James watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (AMC(x) \u2228 HBO(x))",
                "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
                "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
                "WatchTVInCinema(james)"
            ],
            "question": "James goes to cinemas every week.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1390,
            "story_id": 477,
            "context": [
                "All video applications are software.",
                "All YouTube-related applications are video applications. ",
                "An APP is either related to YouTube or Instagram.",
                "All Instagram is entertainment. ",
                "All software is programmed. ",
                "All entertainments are interesting.",
                "If something is interesting, then it is good.",
                "TikTok is not good."
            ],
            "context_fol": [
                "\u2200x (App(x) \u2192 Software(x))",
                "\u2200x (Youtube(x) \u2192 App(x))",
                "\u2200x (Youtube(x) \u2228 Instagram(x))",
                "\u2200x (Instagram(x) \u2192 Entertainment(x))",
                "\u2200x (Software(x) \u2192 Program(x))",
                "\u2200x (Entertainment(x) \u2192 Interesting(x))",
                "\u2200x (Interesting(x) \u2192 Good(x))",
                "\u00acGood(tiktok)"
            ],
            "question": "Tiktok is a program.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "23": [
        {
            "example_id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, amcalist)",
                "Prefer(peter, tvseries)"
            ],
            "question": "James is not able to watch 3 movies every week without any additional fees.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1197,
            "story_id": 422,
            "context": [
                "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week",
                "Customers either subscribe to AMC service or HBO service. ",
                "Customers who prefer TV series more and will not watch TV series in cinemas.",
                "All customers who subscribe to HBO services prefer TV series to movies. ",
                "James watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (AMC(x) \u2228 HBO(x))",
                "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
                "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
                "WatchTVInCinema(james)"
            ],
            "question": "James goes to cinemas every week.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1390,
            "story_id": 477,
            "context": [
                "All video applications are software.",
                "All YouTube-related applications are video applications. ",
                "An APP is either related to YouTube or Instagram.",
                "All Instagram is entertainment. ",
                "All software is programmed. ",
                "All entertainments are interesting.",
                "If something is interesting, then it is good.",
                "TikTok is not good."
            ],
            "context_fol": [
                "\u2200x (App(x) \u2192 Software(x))",
                "\u2200x (Youtube(x) \u2192 App(x))",
                "\u2200x (Youtube(x) \u2228 Instagram(x))",
                "\u2200x (Instagram(x) \u2192 Entertainment(x))",
                "\u2200x (Software(x) \u2192 Program(x))",
                "\u2200x (Entertainment(x) \u2192 Interesting(x))",
                "\u2200x (Interesting(x) \u2192 Good(x))",
                "\u00acGood(tiktok)"
            ],
            "question": "Tiktok is a program.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "24": [
        {
            "example_id": 659,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
                "87 countries won at least one medal during the 2008 Games."
            ],
            "context_fol": [
                "HeldIn(summer2008olympics, beijingchina)",
                "SecondToBe(summer2008olympics, heldincommuniststate)",
                "Won(china, mostgoldmedals)",
                "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)",
                "Placed(russia, thirdingoldmedals)",
                "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))",
                "\u2203x (Country(x) \u2227 Won(x, medal))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 196,
            "story_id": 66,
            "context": [
                "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state which is in US, the city is a US city.",
                "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
                "LA is a city in California(CA).",
                "Atlanta is a US city.",
                "Atlanta is in Georgia(CA).",
                "CA is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States hold the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))",
                "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))",
                "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))",
                "SummerOlympicsCity(y2028, la)",
                "CityInState(la, ca)",
                "CityInCountry(atlanta, us)",
                "StateInCountry(ca, us)",
                "CityInState(atlanta, ga)",
                "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)",
                "SummerOlympicsCity(y1996, atlanta)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 593,
            "story_id": 206,
            "context": [
                "China is one of BRICS and its economy is emerging.",
                "India is one of BRICS and its economy is emerging.",
                "All people from China speak Chinese.",
                "All people from India speak Hindi or English.",
                "There is an Indian."
            ],
            "context_fol": [
                "\u2200x (China(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
                "\u2200x (India(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
                "\u2200x \u2200y (From(x, y) \u2227 China(y) \u2192 Speak(x, chinese))",
                "\u2200x \u2200y (From(x, y) \u2227 India(y) \u2192 Speak(x, hindi) \u2228 Speak(x, english))",
                "\u2203x \u2203y (From(x, y) \u2227 India(y))"
            ],
            "question": "All people from BRICS neither speak Hindi nor speak English.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "25": [
        {
            "example_id": 659,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
                "87 countries won at least one medal during the 2008 Games."
            ],
            "context_fol": [
                "HeldIn(summer2008olympics, beijingchina)",
                "SecondToBe(summer2008olympics, heldincommuniststate)",
                "Won(china, mostgoldmedals)",
                "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)",
                "Placed(russia, thirdingoldmedals)",
                "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))",
                "\u2203x (Country(x) \u2227 Won(x, medal))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 196,
            "story_id": 66,
            "context": [
                "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state which is in US, the city is a US city.",
                "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
                "LA is a city in California(CA).",
                "Atlanta is a US city.",
                "Atlanta is in Georgia(CA).",
                "CA is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States hold the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))",
                "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))",
                "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))",
                "SummerOlympicsCity(y2028, la)",
                "CityInState(la, ca)",
                "CityInCountry(atlanta, us)",
                "StateInCountry(ca, us)",
                "CityInState(atlanta, ga)",
                "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)",
                "SummerOlympicsCity(y1996, atlanta)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 593,
            "story_id": 206,
            "context": [
                "China is one of BRICS and its economy is emerging.",
                "India is one of BRICS and its economy is emerging.",
                "All people from China speak Chinese.",
                "All people from India speak Hindi or English.",
                "There is an Indian."
            ],
            "context_fol": [
                "\u2200x (China(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
                "\u2200x (India(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
                "\u2200x \u2200y (From(x, y) \u2227 China(y) \u2192 Speak(x, chinese))",
                "\u2200x \u2200y (From(x, y) \u2227 India(y) \u2192 Speak(x, hindi) \u2228 Speak(x, english))",
                "\u2203x \u2203y (From(x, y) \u2227 India(y))"
            ],
            "question": "All people from BRICS neither speak Hindi nor speak English.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "26": [
        {
            "example_id": 659,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
                "87 countries won at least one medal during the 2008 Games."
            ],
            "context_fol": [
                "HeldIn(summer2008olympics, beijingchina)",
                "SecondToBe(summer2008olympics, heldincommuniststate)",
                "Won(china, mostgoldmedals)",
                "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)",
                "Placed(russia, thirdingoldmedals)",
                "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))",
                "\u2203x (Country(x) \u2227 Won(x, medal))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 196,
            "story_id": 66,
            "context": [
                "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state which is in US, the city is a US city.",
                "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
                "LA is a city in California(CA).",
                "Atlanta is a US city.",
                "Atlanta is in Georgia(CA).",
                "CA is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States hold the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))",
                "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))",
                "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))",
                "SummerOlympicsCity(y2028, la)",
                "CityInState(la, ca)",
                "CityInCountry(atlanta, us)",
                "StateInCountry(ca, us)",
                "CityInState(atlanta, ga)",
                "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)",
                "SummerOlympicsCity(y1996, atlanta)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 593,
            "story_id": 206,
            "context": [
                "China is one of BRICS and its economy is emerging.",
                "India is one of BRICS and its economy is emerging.",
                "All people from China speak Chinese.",
                "All people from India speak Hindi or English.",
                "There is an Indian."
            ],
            "context_fol": [
                "\u2200x (China(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
                "\u2200x (India(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
                "\u2200x \u2200y (From(x, y) \u2227 China(y) \u2192 Speak(x, chinese))",
                "\u2200x \u2200y (From(x, y) \u2227 India(y) \u2192 Speak(x, hindi) \u2228 Speak(x, english))",
                "\u2203x \u2203y (From(x, y) \u2227 India(y))"
            ],
            "question": "All people from BRICS neither speak Hindi nor speak English.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "27": [
        {
            "example_id": 1347,
            "story_id": 465,
            "context": [
                "All men are human.",
                "All gentlemen are men.",
                "All lawyers are gentlemen.",
                "All women are human.",
                "No sheep are human.",
                "If Mike is not both a human and a sheep, then Mike is either a man or a human."
            ],
            "context_fol": [
                "\u2200x (Man(x) \u2192 Human(x))",
                "\u2200x (Gentleman(x) \u2192 Man(x))",
                "\u2200x (Lawyer(x) \u2192 Gentleman(x))",
                "\u2200x (Woman(x) \u2192 Human(x))",
                "\u2200x (Sheep(x) \u2192 \u00acHuman(x))",
                "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
            ],
            "question": "Mike is a woman.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1383,
            "story_id": 475,
            "context": [
                "All Asians are human. ",
                "All Chinese are Asian.",
                "A man is either Chinese or British.",
                "All British are European. ",
                "All Spanish are European. ",
                "No Indian is European. ",
                "Jessee is either both an Indian and a human, or neither an Indian nor a human."
            ],
            "context_fol": [
                "\u2200x ( Asian(x)\u2192  Human(x))",
                "\u2200x ( Chinese(x)\u2192  Asian(x))",
                "\u2200x ( Chinese(x) \u2228  British(x))",
                "\u2200x ( British(x)\u2192  European(x))",
                "\u2200x ( Spanish(x)\u2192  European(x))",
                "\u2200x ( Indian(x)\u2192 \u00ac European(x))",
                "( Indian(jesse) \u2227 Human(jesse)) \u2295 (\u00ac Indian(jesse) \u2227 \u00ac Human(jesse))"
            ],
            "question": "Jesse is Chinese.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "28": [
        {
            "example_id": 1347,
            "story_id": 465,
            "context": [
                "All men are human.",
                "All gentlemen are men.",
                "All lawyers are gentlemen.",
                "All women are human.",
                "No sheep are human.",
                "If Mike is not both a human and a sheep, then Mike is either a man or a human."
            ],
            "context_fol": [
                "\u2200x (Man(x) \u2192 Human(x))",
                "\u2200x (Gentleman(x) \u2192 Man(x))",
                "\u2200x (Lawyer(x) \u2192 Gentleman(x))",
                "\u2200x (Woman(x) \u2192 Human(x))",
                "\u2200x (Sheep(x) \u2192 \u00acHuman(x))",
                "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
            ],
            "question": "Mike is a woman.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1383,
            "story_id": 475,
            "context": [
                "All Asians are human. ",
                "All Chinese are Asian.",
                "A man is either Chinese or British.",
                "All British are European. ",
                "All Spanish are European. ",
                "No Indian is European. ",
                "Jessee is either both an Indian and a human, or neither an Indian nor a human."
            ],
            "context_fol": [
                "\u2200x ( Asian(x)\u2192  Human(x))",
                "\u2200x ( Chinese(x)\u2192  Asian(x))",
                "\u2200x ( Chinese(x) \u2228  British(x))",
                "\u2200x ( British(x)\u2192  European(x))",
                "\u2200x ( Spanish(x)\u2192  European(x))",
                "\u2200x ( Indian(x)\u2192 \u00ac European(x))",
                "( Indian(jesse) \u2227 Human(jesse)) \u2295 (\u00ac Indian(jesse) \u2227 \u00ac Human(jesse))"
            ],
            "question": "Jesse is Chinese.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "29": [
        {
            "example_id": 1347,
            "story_id": 465,
            "context": [
                "All men are human.",
                "All gentlemen are men.",
                "All lawyers are gentlemen.",
                "All women are human.",
                "No sheep are human.",
                "If Mike is not both a human and a sheep, then Mike is either a man or a human."
            ],
            "context_fol": [
                "\u2200x (Man(x) \u2192 Human(x))",
                "\u2200x (Gentleman(x) \u2192 Man(x))",
                "\u2200x (Lawyer(x) \u2192 Gentleman(x))",
                "\u2200x (Woman(x) \u2192 Human(x))",
                "\u2200x (Sheep(x) \u2192 \u00acHuman(x))",
                "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
            ],
            "question": "Mike is a woman.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1383,
            "story_id": 475,
            "context": [
                "All Asians are human. ",
                "All Chinese are Asian.",
                "A man is either Chinese or British.",
                "All British are European. ",
                "All Spanish are European. ",
                "No Indian is European. ",
                "Jessee is either both an Indian and a human, or neither an Indian nor a human."
            ],
            "context_fol": [
                "\u2200x ( Asian(x)\u2192  Human(x))",
                "\u2200x ( Chinese(x)\u2192  Asian(x))",
                "\u2200x ( Chinese(x) \u2228  British(x))",
                "\u2200x ( British(x)\u2192  European(x))",
                "\u2200x ( Spanish(x)\u2192  European(x))",
                "\u2200x ( Indian(x)\u2192 \u00ac European(x))",
                "( Indian(jesse) \u2227 Human(jesse)) \u2295 (\u00ac Indian(jesse) \u2227 \u00ac Human(jesse))"
            ],
            "question": "Jesse is Chinese.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "30": [
        {
            "example_id": 892,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 842,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerbacks are defenders.",
                "Roger Federer is not an NBA player or a defender."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 918,
            "story_id": 346,
            "context": [
                "All athletes are good at sports.",
                "All Olympic gold medal winners are good athletes.",
                "No scientists are good at sports.",
                "All Nobel laureates are scientists.",
                "Amy is good at sports or Amy is an Olympic gold medal winner.",
                "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 GoodAtSports(x))",
                "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))",
                "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))",
                "\u2200x (NobelLaureate(x) \u2192 Scientist(x))",
                "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)",
                "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
            ],
            "question": "Amy is an athlete.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "31": [
        {
            "example_id": 892,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 842,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerbacks are defenders.",
                "Roger Federer is not an NBA player or a defender."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 918,
            "story_id": 346,
            "context": [
                "All athletes are good at sports.",
                "All Olympic gold medal winners are good athletes.",
                "No scientists are good at sports.",
                "All Nobel laureates are scientists.",
                "Amy is good at sports or Amy is an Olympic gold medal winner.",
                "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 GoodAtSports(x))",
                "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))",
                "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))",
                "\u2200x (NobelLaureate(x) \u2192 Scientist(x))",
                "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)",
                "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
            ],
            "question": "Amy is an athlete.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "32": [
        {
            "example_id": 892,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 842,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerbacks are defenders.",
                "Roger Federer is not an NBA player or a defender."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 918,
            "story_id": 346,
            "context": [
                "All athletes are good at sports.",
                "All Olympic gold medal winners are good athletes.",
                "No scientists are good at sports.",
                "All Nobel laureates are scientists.",
                "Amy is good at sports or Amy is an Olympic gold medal winner.",
                "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 GoodAtSports(x))",
                "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))",
                "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))",
                "\u2200x (NobelLaureate(x) \u2192 Scientist(x))",
                "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)",
                "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
            ],
            "question": "Amy is an athlete.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "33": [
        {
            "example_id": 494,
            "story_id": 171,
            "context": [
                "Some fish may sting.",
                "Stonefish is a fish.",
                "It stings to step on a stonefish.",
                "Stonefish stings cause death if not treated.",
                "To treat stonefish stings, apply heat to the affected area or use an antivenom."
            ],
            "context_fol": [
                "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))",
                "Fish(stonefish)",
                "\u2200x (StepOn(stonefish, x) \u2192 Sting(stonefish, x))",
                "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeath(x))",
                "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeat(x) \u2228 UseAntivenom(x)) \u2192 Treated(x))"
            ],
            "question": "If you step on a stonefish and don\u2019t use an antivenom, it will cause death.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 892,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 102,
            "story_id": 35,
            "context": [
                "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
                "Carlos Reyes trains for an Olympic sport.",
                "Carlos Reyes went to the Olympics.",
                "Carlos Reyes is a welterweight.",
                "Heavy weights are not welterweights."
            ],
            "context_fol": [
                "\u2200x (DoesOlympicSport(x) \u2227 GoesToOlympicGames(x) \u2192 IsOlympian(x))",
                "DoesOlympicSport(carlosReyes)",
                "GoesToOlympicGames(carlosReyes)",
                "IsWelterWeight(carlosReyes)",
                "\u2200x (IsWelterWeight(x) \u2192 \u00acIsHeavyWeight(x))"
            ],
            "question": "Carlos Reyes is an Olympian.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "34": [
        {
            "example_id": 494,
            "story_id": 171,
            "context": [
                "Some fish may sting.",
                "Stonefish is a fish.",
                "It stings to step on a stonefish.",
                "Stonefish stings cause death if not treated.",
                "To treat stonefish stings, apply heat to the affected area or use an antivenom."
            ],
            "context_fol": [
                "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))",
                "Fish(stonefish)",
                "\u2200x (StepOn(stonefish, x) \u2192 Sting(stonefish, x))",
                "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeath(x))",
                "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeat(x) \u2228 UseAntivenom(x)) \u2192 Treated(x))"
            ],
            "question": "If you step on a stonefish and don\u2019t use an antivenom, it will cause death.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 892,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 102,
            "story_id": 35,
            "context": [
                "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
                "Carlos Reyes trains for an Olympic sport.",
                "Carlos Reyes went to the Olympics.",
                "Carlos Reyes is a welterweight.",
                "Heavy weights are not welterweights."
            ],
            "context_fol": [
                "\u2200x (DoesOlympicSport(x) \u2227 GoesToOlympicGames(x) \u2192 IsOlympian(x))",
                "DoesOlympicSport(carlosReyes)",
                "GoesToOlympicGames(carlosReyes)",
                "IsWelterWeight(carlosReyes)",
                "\u2200x (IsWelterWeight(x) \u2192 \u00acIsHeavyWeight(x))"
            ],
            "question": "Carlos Reyes is an Olympian.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "35": [
        {
            "example_id": 494,
            "story_id": 171,
            "context": [
                "Some fish may sting.",
                "Stonefish is a fish.",
                "It stings to step on a stonefish.",
                "Stonefish stings cause death if not treated.",
                "To treat stonefish stings, apply heat to the affected area or use an antivenom."
            ],
            "context_fol": [
                "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))",
                "Fish(stonefish)",
                "\u2200x (StepOn(stonefish, x) \u2192 Sting(stonefish, x))",
                "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeath(x))",
                "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeat(x) \u2228 UseAntivenom(x)) \u2192 Treated(x))"
            ],
            "question": "If you step on a stonefish and don\u2019t use an antivenom, it will cause death.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 892,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 102,
            "story_id": 35,
            "context": [
                "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
                "Carlos Reyes trains for an Olympic sport.",
                "Carlos Reyes went to the Olympics.",
                "Carlos Reyes is a welterweight.",
                "Heavy weights are not welterweights."
            ],
            "context_fol": [
                "\u2200x (DoesOlympicSport(x) \u2227 GoesToOlympicGames(x) \u2192 IsOlympian(x))",
                "DoesOlympicSport(carlosReyes)",
                "GoesToOlympicGames(carlosReyes)",
                "IsWelterWeight(carlosReyes)",
                "\u2200x (IsWelterWeight(x) \u2192 \u00acIsHeavyWeight(x))"
            ],
            "question": "Carlos Reyes is an Olympian.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "36": [
        {
            "example_id": 1135,
            "story_id": 407,
            "context": [
                "No touring musicians are permanent members of an orchestra.",
                "Musicians are either permanent members of an orchestra or have a unique musical voice or style.",
                "All musicians who have a unique musical voice or style are interesting as individual performers.",
                "All musicians who are interesting as individual performers are capable of attracting large audiences.",
                "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences."
            ],
            "context_fol": [
                "\u2200x (Orchestra(x) \u2192 \u00acTouring(x))",
                "\u2200x (Orchestra(x) \u2295 Unique(x))",
                "\u2200x (Unique(x) \u2192 Interesting(x))",
                "\u2200x (Interesting(x) \u2192 Capable(x))",
                "(Interesting(ryan) \u2227 Unique(ryan)) \u2192 \u00ac(Touring(ryan) \u2295 Capable(ryan))"
            ],
            "question": "Ryan is interesting as an individual performer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x (Musician(x) \u2192 Love(x, music))",
                "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 467,
            "story_id": 162,
            "context": [
                "If people play the instrument in the concert, then he is good at playing this kind of instrument.",
                "Peter plays piano, violin, and saxophone.",
                "Peter was invited to play piano at the concert hall.",
                "Oliver and Peter were both invited to perform in the concert.",
                "Oliver plays a different musical instrument from Peter in the concert."
            ],
            "context_fol": [
                "\u2200y (\u2200x (PlayInConcert(y, x) \u2192 GoodAt(y, x)))",
                "Play(peter, piano) \u2227Play(peter, violin)",
                "PlayInConcert(peter, piano)",
                "PlayerInConcert(peter) \u2227 PlayerInConcert(oliver)",
                "\u00acPlayInConcert(oliver, piano)"
            ],
            "question": "Oliver plays piano in the concert.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "37": [
        {
            "example_id": 1135,
            "story_id": 407,
            "context": [
                "No touring musicians are permanent members of an orchestra.",
                "Musicians are either permanent members of an orchestra or have a unique musical voice or style.",
                "All musicians who have a unique musical voice or style are interesting as individual performers.",
                "All musicians who are interesting as individual performers are capable of attracting large audiences.",
                "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences."
            ],
            "context_fol": [
                "\u2200x (Orchestra(x) \u2192 \u00acTouring(x))",
                "\u2200x (Orchestra(x) \u2295 Unique(x))",
                "\u2200x (Unique(x) \u2192 Interesting(x))",
                "\u2200x (Interesting(x) \u2192 Capable(x))",
                "(Interesting(ryan) \u2227 Unique(ryan)) \u2192 \u00ac(Touring(ryan) \u2295 Capable(ryan))"
            ],
            "question": "Ryan is interesting as an individual performer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x (Musician(x) \u2192 Love(x, music))",
                "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 467,
            "story_id": 162,
            "context": [
                "If people play the instrument in the concert, then he is good at playing this kind of instrument.",
                "Peter plays piano, violin, and saxophone.",
                "Peter was invited to play piano at the concert hall.",
                "Oliver and Peter were both invited to perform in the concert.",
                "Oliver plays a different musical instrument from Peter in the concert."
            ],
            "context_fol": [
                "\u2200y (\u2200x (PlayInConcert(y, x) \u2192 GoodAt(y, x)))",
                "Play(peter, piano) \u2227Play(peter, violin)",
                "PlayInConcert(peter, piano)",
                "PlayerInConcert(peter) \u2227 PlayerInConcert(oliver)",
                "\u00acPlayInConcert(oliver, piano)"
            ],
            "question": "Oliver plays piano in the concert.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "38": [
        {
            "example_id": 1135,
            "story_id": 407,
            "context": [
                "No touring musicians are permanent members of an orchestra.",
                "Musicians are either permanent members of an orchestra or have a unique musical voice or style.",
                "All musicians who have a unique musical voice or style are interesting as individual performers.",
                "All musicians who are interesting as individual performers are capable of attracting large audiences.",
                "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences."
            ],
            "context_fol": [
                "\u2200x (Orchestra(x) \u2192 \u00acTouring(x))",
                "\u2200x (Orchestra(x) \u2295 Unique(x))",
                "\u2200x (Unique(x) \u2192 Interesting(x))",
                "\u2200x (Interesting(x) \u2192 Capable(x))",
                "(Interesting(ryan) \u2227 Unique(ryan)) \u2192 \u00ac(Touring(ryan) \u2295 Capable(ryan))"
            ],
            "question": "Ryan is interesting as an individual performer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x (Musician(x) \u2192 Love(x, music))",
                "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 467,
            "story_id": 162,
            "context": [
                "If people play the instrument in the concert, then he is good at playing this kind of instrument.",
                "Peter plays piano, violin, and saxophone.",
                "Peter was invited to play piano at the concert hall.",
                "Oliver and Peter were both invited to perform in the concert.",
                "Oliver plays a different musical instrument from Peter in the concert."
            ],
            "context_fol": [
                "\u2200y (\u2200x (PlayInConcert(y, x) \u2192 GoodAt(y, x)))",
                "Play(peter, piano) \u2227Play(peter, violin)",
                "PlayInConcert(peter, piano)",
                "PlayerInConcert(peter) \u2227 PlayerInConcert(oliver)",
                "\u00acPlayInConcert(oliver, piano)"
            ],
            "question": "Oliver plays piano in the concert.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "39": [
        {
            "example_id": 677,
            "story_id": 237,
            "context": [
                "Zaha Hadid is a British-Iraqi architect, artist and designer.",
                "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
                "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
                "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
            ],
            "context_fol": [
                "British-IraqiArchitect(zahaHadid)",
                "BornIn(zahaHadid, y1950)",
                "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
                "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
            ],
            "question": "Hadid became a UK citizen later in her life.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 804,
            "story_id": 317,
            "context": [
                "All clothes are products. ",
                "No products are perfect. ",
                "All dresses are clothes.",
                "All skirts are dresses. ",
                "If Nike is clothes, then Nike is perfect and a dress."
            ],
            "context_fol": [
                "\u2200x (Clothes(x) \u2192 Product(x))",
                "\u2200x (Product(x) \u2192 \u00acPerfect(x))",
                "\u2200x (Dress(x) \u2192 Clothes(x))",
                "\u2200x (Skirt(x) \u2192 Dress(x))",
                "Clothes(nike) \u2192 Perfect(nike) \u2227 Dress(nike)"
            ],
            "question": "Nike is perfect.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 941,
            "story_id": 353,
            "context": [
                "Either Max listens to classical music or Max listens to rap. ",
                "All the songs that Max listens to that are classical music are from the 12th century.",
                "If the song Max listens to is rap, then the song is from Kanye West. ",
                "If a songs is from Kanye West, then the song is full of lyrics. ",
                "All songs that are full of lyrics need to be written with words",
                "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century."
            ],
            "context_fol": [
                "\u2200x (MaxListensToClassicalMusic(x) \u2228 MaxListensToRap(x))",
                "\u2200x (MaxListensToClassicalMusic(x) \u2192 SongsFrom12thCentury(x))",
                "\u2200x (MaxListensToRap(x) \u2192 SongsFromKanyeWest(x))",
                "\u2200x (SongsFromKanyeWest(x) \u2192 SongsFullOfLyrics(x))",
                "\u2200x (SongsFullOfLyrics(x) \u2192 NeedToBeWrittenWithWords(x))",
                "MaxListensToClassicalMusic(asItWasByHarryStyles) \u2228 SongsFrom12thCentury(asItWasByHarryStyles) \u2192 MaxListensToClassicalMusic(asItWasByHarryStyles) \u2295 SongsFrom12thCentury(asItWasByHarryStyles)"
            ],
            "question": "\u201cAs it was\u201d by Harry Styles needs to be written with words.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "40": [
        {
            "example_id": 677,
            "story_id": 237,
            "context": [
                "Zaha Hadid is a British-Iraqi architect, artist and designer.",
                "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
                "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
                "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
            ],
            "context_fol": [
                "British-IraqiArchitect(zahaHadid)",
                "BornIn(zahaHadid, y1950)",
                "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
                "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
            ],
            "question": "Hadid became a UK citizen later in her life.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 804,
            "story_id": 317,
            "context": [
                "All clothes are products. ",
                "No products are perfect. ",
                "All dresses are clothes.",
                "All skirts are dresses. ",
                "If Nike is clothes, then Nike is perfect and a dress."
            ],
            "context_fol": [
                "\u2200x (Clothes(x) \u2192 Product(x))",
                "\u2200x (Product(x) \u2192 \u00acPerfect(x))",
                "\u2200x (Dress(x) \u2192 Clothes(x))",
                "\u2200x (Skirt(x) \u2192 Dress(x))",
                "Clothes(nike) \u2192 Perfect(nike) \u2227 Dress(nike)"
            ],
            "question": "Nike is perfect.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 941,
            "story_id": 353,
            "context": [
                "Either Max listens to classical music or Max listens to rap. ",
                "All the songs that Max listens to that are classical music are from the 12th century.",
                "If the song Max listens to is rap, then the song is from Kanye West. ",
                "If a songs is from Kanye West, then the song is full of lyrics. ",
                "All songs that are full of lyrics need to be written with words",
                "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century."
            ],
            "context_fol": [
                "\u2200x (MaxListensToClassicalMusic(x) \u2228 MaxListensToRap(x))",
                "\u2200x (MaxListensToClassicalMusic(x) \u2192 SongsFrom12thCentury(x))",
                "\u2200x (MaxListensToRap(x) \u2192 SongsFromKanyeWest(x))",
                "\u2200x (SongsFromKanyeWest(x) \u2192 SongsFullOfLyrics(x))",
                "\u2200x (SongsFullOfLyrics(x) \u2192 NeedToBeWrittenWithWords(x))",
                "MaxListensToClassicalMusic(asItWasByHarryStyles) \u2228 SongsFrom12thCentury(asItWasByHarryStyles) \u2192 MaxListensToClassicalMusic(asItWasByHarryStyles) \u2295 SongsFrom12thCentury(asItWasByHarryStyles)"
            ],
            "question": "\u201cAs it was\u201d by Harry Styles needs to be written with words.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "41": [
        {
            "example_id": 677,
            "story_id": 237,
            "context": [
                "Zaha Hadid is a British-Iraqi architect, artist and designer.",
                "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
                "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
                "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
            ],
            "context_fol": [
                "British-IraqiArchitect(zahaHadid)",
                "BornIn(zahaHadid, y1950)",
                "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
                "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
            ],
            "question": "Hadid became a UK citizen later in her life.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 804,
            "story_id": 317,
            "context": [
                "All clothes are products. ",
                "No products are perfect. ",
                "All dresses are clothes.",
                "All skirts are dresses. ",
                "If Nike is clothes, then Nike is perfect and a dress."
            ],
            "context_fol": [
                "\u2200x (Clothes(x) \u2192 Product(x))",
                "\u2200x (Product(x) \u2192 \u00acPerfect(x))",
                "\u2200x (Dress(x) \u2192 Clothes(x))",
                "\u2200x (Skirt(x) \u2192 Dress(x))",
                "Clothes(nike) \u2192 Perfect(nike) \u2227 Dress(nike)"
            ],
            "question": "Nike is perfect.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 941,
            "story_id": 353,
            "context": [
                "Either Max listens to classical music or Max listens to rap. ",
                "All the songs that Max listens to that are classical music are from the 12th century.",
                "If the song Max listens to is rap, then the song is from Kanye West. ",
                "If a songs is from Kanye West, then the song is full of lyrics. ",
                "All songs that are full of lyrics need to be written with words",
                "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century."
            ],
            "context_fol": [
                "\u2200x (MaxListensToClassicalMusic(x) \u2228 MaxListensToRap(x))",
                "\u2200x (MaxListensToClassicalMusic(x) \u2192 SongsFrom12thCentury(x))",
                "\u2200x (MaxListensToRap(x) \u2192 SongsFromKanyeWest(x))",
                "\u2200x (SongsFromKanyeWest(x) \u2192 SongsFullOfLyrics(x))",
                "\u2200x (SongsFullOfLyrics(x) \u2192 NeedToBeWrittenWithWords(x))",
                "MaxListensToClassicalMusic(asItWasByHarryStyles) \u2228 SongsFrom12thCentury(asItWasByHarryStyles) \u2192 MaxListensToClassicalMusic(asItWasByHarryStyles) \u2295 SongsFrom12thCentury(asItWasByHarryStyles)"
            ],
            "question": "\u201cAs it was\u201d by Harry Styles needs to be written with words.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "42": [
        {
            "example_id": 892,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 99,
            "story_id": 34,
            "context": [
                "Rafa Nadal was born in Mallorca.",
                "Rafa Nadal is a professional tennis player.",
                "Nadal's win ratio is higher than 80%.",
                "All players in the Big 3 are professionals who have a high win ratio."
            ],
            "context_fol": [
                "BornIn(rafaNadal, mallorca)",
                "ProfessionalTennisPlayer(rafaNadal)",
                "HighWinRatio(rafaNadal)",
                "\u2200x (ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x) \u2192 InBig3(x))"
            ],
            "question": "Nadal was not born in Mallorca.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 842,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerbacks are defenders.",
                "Roger Federer is not an NBA player or a defender."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "43": [
        {
            "example_id": 892,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 99,
            "story_id": 34,
            "context": [
                "Rafa Nadal was born in Mallorca.",
                "Rafa Nadal is a professional tennis player.",
                "Nadal's win ratio is higher than 80%.",
                "All players in the Big 3 are professionals who have a high win ratio."
            ],
            "context_fol": [
                "BornIn(rafaNadal, mallorca)",
                "ProfessionalTennisPlayer(rafaNadal)",
                "HighWinRatio(rafaNadal)",
                "\u2200x (ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x) \u2192 InBig3(x))"
            ],
            "question": "Nadal was not born in Mallorca.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 842,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerbacks are defenders.",
                "Roger Federer is not an NBA player or a defender."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "44": [
        {
            "example_id": 892,
            "story_id": 339,
            "context": [
                "No professional tennis umpires are professional tennis players.",
                "If you are a World Tour player, then you are a professional tennis player.",
                "All Grand Slam champions are World Tour players.",
                "All Grand Slam umpires are professional tennis umpires.",
                "Nadal is a World Tour player or a Grand Slam champion"
            ],
            "context_fol": [
                "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
                "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
                "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
                "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
                "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
            ],
            "question": "Nadal is a Grand Slam umpire.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 99,
            "story_id": 34,
            "context": [
                "Rafa Nadal was born in Mallorca.",
                "Rafa Nadal is a professional tennis player.",
                "Nadal's win ratio is higher than 80%.",
                "All players in the Big 3 are professionals who have a high win ratio."
            ],
            "context_fol": [
                "BornIn(rafaNadal, mallorca)",
                "ProfessionalTennisPlayer(rafaNadal)",
                "HighWinRatio(rafaNadal)",
                "\u2200x (ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x) \u2192 InBig3(x))"
            ],
            "question": "Nadal was not born in Mallorca.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 842,
            "story_id": 327,
            "context": [
                "No professional basketball players are soccer players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerbacks are defenders.",
                "Roger Federer is not an NBA player or a defender."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))"
            ],
            "question": "Roger Federer is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "45": [
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1269,
            "story_id": 440,
            "context": [
                "All animals that are tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "Everything that is a husky is a dog.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2228 Cat(fido)"
            ],
            "question": "Fido is a husky.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "46": [
        {
            "example_id": 1202,
            "story_id": 423,
            "context": [
                "Students either go to the park or go to the movies. ",
                "No student who enjoys nature has free time during the weekend. ",
                "All students who go to the movies enjoy nature. ",
                "All students who do not have class during the weekend have free time during the weekend. ",
                "All students not in summer camp do not have class during the weekend. ",
                "James does not have class during the weekend."
            ],
            "context_fol": [
                "\u2200x (Park(x) \u2295 Movies(x))",
                "\u2200x (Nature(x) \u2192 \u00acFreeTime(x))",
                "\u2200x (Movies(x) \u2192 Nature(x))",
                "\u2200x (NoClass(x) \u2192 FreeTime(x))",
                "\u2200x (SummerCamp(x) \u2192 NoClass(x))",
                "NoClass(james)"
            ],
            "question": "James is in summer camp.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 621,
            "story_id": 216,
            "context": [
                "Olivia doesn't prefer warm temperature during the day.",
                "When Olivia sleeps, she prefers cool temperature.",
                "Olivia sleeps during the night.",
                "Olivia works during the day.",
                "Olivia either works or sleeps.",
                "The time is either the day or the night.",
                "Olivia either prefers warm temperature or prefers cool temperature."
            ],
            "context_fol": [
                "\u2200x (Day(x) \u2192 \u00acPrefersWarmAt(olivia, x))",
                "\u2200x (SleepingDuring(olivia, x) \u2192 PrefersCoolAt(olivia, x))",
                "\u2200x (SleepingDuring(olivia, x) \u2192 Night(x))",
                "\u2200x (WorkingDuring(olivia, x) \u2192 Day(x))",
                "\u2200x (WorkingDuring(olivia, x) \u2228 SleepingDuring(olivia, x))",
                "\u2200x (Day(x) \u2228 Night(x))",
                "\u2200x (PrefersWarmAt(olivia, x) \u2228 PrefersCoolAt(olivia, x))"
            ],
            "question": "At all times, Olivia prefers cool temperature.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, amcalist)",
                "Prefer(peter, tvseries)"
            ],
            "question": "James is not able to watch 3 movies every week without any additional fees.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "47": [
        {
            "example_id": 1202,
            "story_id": 423,
            "context": [
                "Students either go to the park or go to the movies. ",
                "No student who enjoys nature has free time during the weekend. ",
                "All students who go to the movies enjoy nature. ",
                "All students who do not have class during the weekend have free time during the weekend. ",
                "All students not in summer camp do not have class during the weekend. ",
                "James does not have class during the weekend."
            ],
            "context_fol": [
                "\u2200x (Park(x) \u2295 Movies(x))",
                "\u2200x (Nature(x) \u2192 \u00acFreeTime(x))",
                "\u2200x (Movies(x) \u2192 Nature(x))",
                "\u2200x (NoClass(x) \u2192 FreeTime(x))",
                "\u2200x (SummerCamp(x) \u2192 NoClass(x))",
                "NoClass(james)"
            ],
            "question": "James is in summer camp.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 621,
            "story_id": 216,
            "context": [
                "Olivia doesn't prefer warm temperature during the day.",
                "When Olivia sleeps, she prefers cool temperature.",
                "Olivia sleeps during the night.",
                "Olivia works during the day.",
                "Olivia either works or sleeps.",
                "The time is either the day or the night.",
                "Olivia either prefers warm temperature or prefers cool temperature."
            ],
            "context_fol": [
                "\u2200x (Day(x) \u2192 \u00acPrefersWarmAt(olivia, x))",
                "\u2200x (SleepingDuring(olivia, x) \u2192 PrefersCoolAt(olivia, x))",
                "\u2200x (SleepingDuring(olivia, x) \u2192 Night(x))",
                "\u2200x (WorkingDuring(olivia, x) \u2192 Day(x))",
                "\u2200x (WorkingDuring(olivia, x) \u2228 SleepingDuring(olivia, x))",
                "\u2200x (Day(x) \u2228 Night(x))",
                "\u2200x (PrefersWarmAt(olivia, x) \u2228 PrefersCoolAt(olivia, x))"
            ],
            "question": "At all times, Olivia prefers cool temperature.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, amcalist)",
                "Prefer(peter, tvseries)"
            ],
            "question": "James is not able to watch 3 movies every week without any additional fees.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "48": [
        {
            "example_id": 1202,
            "story_id": 423,
            "context": [
                "Students either go to the park or go to the movies. ",
                "No student who enjoys nature has free time during the weekend. ",
                "All students who go to the movies enjoy nature. ",
                "All students who do not have class during the weekend have free time during the weekend. ",
                "All students not in summer camp do not have class during the weekend. ",
                "James does not have class during the weekend."
            ],
            "context_fol": [
                "\u2200x (Park(x) \u2295 Movies(x))",
                "\u2200x (Nature(x) \u2192 \u00acFreeTime(x))",
                "\u2200x (Movies(x) \u2192 Nature(x))",
                "\u2200x (NoClass(x) \u2192 FreeTime(x))",
                "\u2200x (SummerCamp(x) \u2192 NoClass(x))",
                "NoClass(james)"
            ],
            "question": "James is in summer camp.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 621,
            "story_id": 216,
            "context": [
                "Olivia doesn't prefer warm temperature during the day.",
                "When Olivia sleeps, she prefers cool temperature.",
                "Olivia sleeps during the night.",
                "Olivia works during the day.",
                "Olivia either works or sleeps.",
                "The time is either the day or the night.",
                "Olivia either prefers warm temperature or prefers cool temperature."
            ],
            "context_fol": [
                "\u2200x (Day(x) \u2192 \u00acPrefersWarmAt(olivia, x))",
                "\u2200x (SleepingDuring(olivia, x) \u2192 PrefersCoolAt(olivia, x))",
                "\u2200x (SleepingDuring(olivia, x) \u2192 Night(x))",
                "\u2200x (WorkingDuring(olivia, x) \u2192 Day(x))",
                "\u2200x (WorkingDuring(olivia, x) \u2228 SleepingDuring(olivia, x))",
                "\u2200x (Day(x) \u2228 Night(x))",
                "\u2200x (PrefersWarmAt(olivia, x) \u2228 PrefersCoolAt(olivia, x))"
            ],
            "question": "At all times, Olivia prefers cool temperature.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, amcalist)",
                "Prefer(peter, tvseries)"
            ],
            "question": "James is not able to watch 3 movies every week without any additional fees.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "49": [
        {
            "example_id": 72,
            "story_id": 25,
            "context": [
                "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
                "Mort is not a Stamp catalogue.",
                "Mort is not a periodical, auction catalogue, bibliography, or background material.",
                "Mort is a piece of Philatelic literature."
            ],
            "context_fol": [
                "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))",
                "\u00acStamp(mort)",
                "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))",
                "PhilatelicLit(mort)"
            ],
            "question": "Mort is a book",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 738,
            "story_id": 289,
            "context": [
                "All iPhones are electronic.",
                "Some phones are iPhones."
            ],
            "context_fol": [
                "\u2200x (IPhone(x) \u2192 Electronic(x))",
                "\u2203x (Phone(x) \u2227 IPhone(x))"
            ],
            "question": "No phones are electronic.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1089,
            "story_id": 398,
            "context": [
                "Either brain reading or brain decoding. ",
                "All brain decoding is extracting information from BOLD signals.",
                "No extracting information from BOLD signals is without statistical pattern analysis. ",
                "Writing a novel is without statistical pattern analysis.",
                "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."
            ],
            "context_fol": [
                "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) ",
                "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))",
                "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))",
                "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) ",
                "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)"
            ],
            "question": "Multivoxel (pattern) analysis is a brain decoding.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "50": [
        {
            "example_id": 72,
            "story_id": 25,
            "context": [
                "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
                "Mort is not a Stamp catalogue.",
                "Mort is not a periodical, auction catalogue, bibliography, or background material.",
                "Mort is a piece of Philatelic literature."
            ],
            "context_fol": [
                "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))",
                "\u00acStamp(mort)",
                "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))",
                "PhilatelicLit(mort)"
            ],
            "question": "Mort is a book",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 738,
            "story_id": 289,
            "context": [
                "All iPhones are electronic.",
                "Some phones are iPhones."
            ],
            "context_fol": [
                "\u2200x (IPhone(x) \u2192 Electronic(x))",
                "\u2203x (Phone(x) \u2227 IPhone(x))"
            ],
            "question": "No phones are electronic.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1089,
            "story_id": 398,
            "context": [
                "Either brain reading or brain decoding. ",
                "All brain decoding is extracting information from BOLD signals.",
                "No extracting information from BOLD signals is without statistical pattern analysis. ",
                "Writing a novel is without statistical pattern analysis.",
                "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."
            ],
            "context_fol": [
                "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) ",
                "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))",
                "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))",
                "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) ",
                "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)"
            ],
            "question": "Multivoxel (pattern) analysis is a brain decoding.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "51": [
        {
            "example_id": 72,
            "story_id": 25,
            "context": [
                "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
                "Mort is not a Stamp catalogue.",
                "Mort is not a periodical, auction catalogue, bibliography, or background material.",
                "Mort is a piece of Philatelic literature."
            ],
            "context_fol": [
                "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))",
                "\u00acStamp(mort)",
                "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))",
                "PhilatelicLit(mort)"
            ],
            "question": "Mort is a book",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 738,
            "story_id": 289,
            "context": [
                "All iPhones are electronic.",
                "Some phones are iPhones."
            ],
            "context_fol": [
                "\u2200x (IPhone(x) \u2192 Electronic(x))",
                "\u2203x (Phone(x) \u2227 IPhone(x))"
            ],
            "question": "No phones are electronic.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1089,
            "story_id": 398,
            "context": [
                "Either brain reading or brain decoding. ",
                "All brain decoding is extracting information from BOLD signals.",
                "No extracting information from BOLD signals is without statistical pattern analysis. ",
                "Writing a novel is without statistical pattern analysis.",
                "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."
            ],
            "context_fol": [
                "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) ",
                "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))",
                "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))",
                "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) ",
                "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)"
            ],
            "question": "Multivoxel (pattern) analysis is a brain decoding.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "52": [
        {
            "example_id": 695,
            "story_id": 247,
            "context": [
                "LanguageA is a universal language",
                "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
                "Katya cannot communicate with Danil.",
                "Katya knows LanguageA. "
            ],
            "context_fol": [
                "UniversalLanguage(languageA)",
                "\u2200x \u2200y (\u2203z (Know(x, z) \u2227 Know(y, z) \u2227 UniversalLanguage(z)) \u2192 Communicate(x, y))",
                "Know(katya, languageA)",
                "\u00acCommunicate(katya, danil)"
            ],
            "question": "Danil knows LanguageA.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 600,
            "story_id": 209,
            "context": [
                "There are two places named Galicia: either in Spain or in Poland.",
                "Spain is in Europe.",
                "Poland is in Europe.",
                "Rochelle lives in Europe.",
                "Dominique does not live in Europe.",
                "Alfonso lives in Galicia."
            ],
            "context_fol": [
                "\u2200x (Galicia(x) \u2192 Spain(x) \u2295 Poland(x))",
                "\u2200x (Spain(x) \u2192 Europe(x))",
                "\u2200x (Poland(x) \u2192 Europe(x))",
                "\u2200x (RochelleLive(x) \u2192 Europe(x))",
                "\u2200x (DominiqueLive(x) \u2192 \u00acEurope(x))",
                "\u2200x (AlfonsoLive(x) \u2192 Galicia(x))"
            ],
            "question": "Rochelle lives in Galicia.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1122,
            "story_id": 403,
            "context": [
                "A person either likes eating cheese or is a francophile.",
                "No francophiles are people who like Spain as their favorite country.",
                "A person likes Spain as their favorite country or likes eating cheese.",
                "Benji is not a person who likes eating cheese and a person who studies Spanish.",
                "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French."
            ],
            "context_fol": [
                "\u2200x (Spanish(x) \u2228 Francophile(x))",
                "\u2200x (Francophile(x) \u2192 \u00acSpainFav(x))",
                "\u2200x (SpainFav(x) \u2228 Cheese(x))",
                "\u00ac(Cheese(benji) \u2227 Spanish(benji))",
                "\u00ac(Spanish(benji) \u2228 French(benji)) \u2192 \u00ac(Cheese(benji) \u2295 French(benji))"
            ],
            "question": "Benji is a person who likes eating cheese.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "53": [
        {
            "example_id": 695,
            "story_id": 247,
            "context": [
                "LanguageA is a universal language",
                "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
                "Katya cannot communicate with Danil.",
                "Katya knows LanguageA. "
            ],
            "context_fol": [
                "UniversalLanguage(languageA)",
                "\u2200x \u2200y (\u2203z (Know(x, z) \u2227 Know(y, z) \u2227 UniversalLanguage(z)) \u2192 Communicate(x, y))",
                "Know(katya, languageA)",
                "\u00acCommunicate(katya, danil)"
            ],
            "question": "Danil knows LanguageA.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 600,
            "story_id": 209,
            "context": [
                "There are two places named Galicia: either in Spain or in Poland.",
                "Spain is in Europe.",
                "Poland is in Europe.",
                "Rochelle lives in Europe.",
                "Dominique does not live in Europe.",
                "Alfonso lives in Galicia."
            ],
            "context_fol": [
                "\u2200x (Galicia(x) \u2192 Spain(x) \u2295 Poland(x))",
                "\u2200x (Spain(x) \u2192 Europe(x))",
                "\u2200x (Poland(x) \u2192 Europe(x))",
                "\u2200x (RochelleLive(x) \u2192 Europe(x))",
                "\u2200x (DominiqueLive(x) \u2192 \u00acEurope(x))",
                "\u2200x (AlfonsoLive(x) \u2192 Galicia(x))"
            ],
            "question": "Rochelle lives in Galicia.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1122,
            "story_id": 403,
            "context": [
                "A person either likes eating cheese or is a francophile.",
                "No francophiles are people who like Spain as their favorite country.",
                "A person likes Spain as their favorite country or likes eating cheese.",
                "Benji is not a person who likes eating cheese and a person who studies Spanish.",
                "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French."
            ],
            "context_fol": [
                "\u2200x (Spanish(x) \u2228 Francophile(x))",
                "\u2200x (Francophile(x) \u2192 \u00acSpainFav(x))",
                "\u2200x (SpainFav(x) \u2228 Cheese(x))",
                "\u00ac(Cheese(benji) \u2227 Spanish(benji))",
                "\u00ac(Spanish(benji) \u2228 French(benji)) \u2192 \u00ac(Cheese(benji) \u2295 French(benji))"
            ],
            "question": "Benji is a person who likes eating cheese.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "54": [
        {
            "example_id": 695,
            "story_id": 247,
            "context": [
                "LanguageA is a universal language",
                "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
                "Katya cannot communicate with Danil.",
                "Katya knows LanguageA. "
            ],
            "context_fol": [
                "UniversalLanguage(languageA)",
                "\u2200x \u2200y (\u2203z (Know(x, z) \u2227 Know(y, z) \u2227 UniversalLanguage(z)) \u2192 Communicate(x, y))",
                "Know(katya, languageA)",
                "\u00acCommunicate(katya, danil)"
            ],
            "question": "Danil knows LanguageA.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 600,
            "story_id": 209,
            "context": [
                "There are two places named Galicia: either in Spain or in Poland.",
                "Spain is in Europe.",
                "Poland is in Europe.",
                "Rochelle lives in Europe.",
                "Dominique does not live in Europe.",
                "Alfonso lives in Galicia."
            ],
            "context_fol": [
                "\u2200x (Galicia(x) \u2192 Spain(x) \u2295 Poland(x))",
                "\u2200x (Spain(x) \u2192 Europe(x))",
                "\u2200x (Poland(x) \u2192 Europe(x))",
                "\u2200x (RochelleLive(x) \u2192 Europe(x))",
                "\u2200x (DominiqueLive(x) \u2192 \u00acEurope(x))",
                "\u2200x (AlfonsoLive(x) \u2192 Galicia(x))"
            ],
            "question": "Rochelle lives in Galicia.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1122,
            "story_id": 403,
            "context": [
                "A person either likes eating cheese or is a francophile.",
                "No francophiles are people who like Spain as their favorite country.",
                "A person likes Spain as their favorite country or likes eating cheese.",
                "Benji is not a person who likes eating cheese and a person who studies Spanish.",
                "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French."
            ],
            "context_fol": [
                "\u2200x (Spanish(x) \u2228 Francophile(x))",
                "\u2200x (Francophile(x) \u2192 \u00acSpainFav(x))",
                "\u2200x (SpainFav(x) \u2228 Cheese(x))",
                "\u00ac(Cheese(benji) \u2227 Spanish(benji))",
                "\u00ac(Spanish(benji) \u2228 French(benji)) \u2192 \u00ac(Cheese(benji) \u2295 French(benji))"
            ],
            "question": "Benji is a person who likes eating cheese.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "55": [
        {
            "example_id": 374,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use their both feet very efficiently.",
                "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
                "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))",
                "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))",
                "SoccerPlayer(ronaldo)",
                "Efficient(ronaldo, right)",
                "ScoreManyGoals(ronaldo, left)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 630,
            "story_id": 221,
            "context": [
                "Ernest Pohl was a Polish football player. ",
                "A football player in the Polish First Division has scored over 180 goals. ",
                "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
                "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ",
                "Ernest Pohl is from Ruda \u015al\u0105ska. "
            ],
            "context_fol": [
                "PolishFootballPlayer(ernestpohl)",
                "\u2203x (In(x, polishfirstdivision) \u2227 ScoredMoreThan180Goals(x))",
                "ScoredMoreThan180Goals(ernestpohl) \u2227 In(ernestpohl, polishfirstdivision)",
                "\u2203x (NamedAfter(gornikzabrze, x) \u2227 FootballPlayer(x) \u2227 From(x, rudaslaska))",
                "From(ernestpohl, rudaslaska)"
            ],
            "question": "Ernest Pohl has not scored more than 180 goals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 723,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adambuska) \u2227 European(adambuska)",
                "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "56": [
        {
            "example_id": 374,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use their both feet very efficiently.",
                "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
                "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))",
                "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))",
                "SoccerPlayer(ronaldo)",
                "Efficient(ronaldo, right)",
                "ScoreManyGoals(ronaldo, left)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 630,
            "story_id": 221,
            "context": [
                "Ernest Pohl was a Polish football player. ",
                "A football player in the Polish First Division has scored over 180 goals. ",
                "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
                "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ",
                "Ernest Pohl is from Ruda \u015al\u0105ska. "
            ],
            "context_fol": [
                "PolishFootballPlayer(ernestpohl)",
                "\u2203x (In(x, polishfirstdivision) \u2227 ScoredMoreThan180Goals(x))",
                "ScoredMoreThan180Goals(ernestpohl) \u2227 In(ernestpohl, polishfirstdivision)",
                "\u2203x (NamedAfter(gornikzabrze, x) \u2227 FootballPlayer(x) \u2227 From(x, rudaslaska))",
                "From(ernestpohl, rudaslaska)"
            ],
            "question": "Ernest Pohl has not scored more than 180 goals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 723,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adambuska) \u2227 European(adambuska)",
                "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "57": [
        {
            "example_id": 374,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use their both feet very efficiently.",
                "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
                "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))",
                "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))",
                "SoccerPlayer(ronaldo)",
                "Efficient(ronaldo, right)",
                "ScoreManyGoals(ronaldo, left)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 630,
            "story_id": 221,
            "context": [
                "Ernest Pohl was a Polish football player. ",
                "A football player in the Polish First Division has scored over 180 goals. ",
                "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
                "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ",
                "Ernest Pohl is from Ruda \u015al\u0105ska. "
            ],
            "context_fol": [
                "PolishFootballPlayer(ernestpohl)",
                "\u2203x (In(x, polishfirstdivision) \u2227 ScoredMoreThan180Goals(x))",
                "ScoredMoreThan180Goals(ernestpohl) \u2227 In(ernestpohl, polishfirstdivision)",
                "\u2203x (NamedAfter(gornikzabrze, x) \u2227 FootballPlayer(x) \u2227 From(x, rudaslaska))",
                "From(ernestpohl, rudaslaska)"
            ],
            "question": "Ernest Pohl has not scored more than 180 goals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 723,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adambuska) \u2227 European(adambuska)",
                "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "58": [
        {
            "example_id": 232,
            "story_id": 76,
            "context": [
                "Asa Hoffmann was born in New York City.",
                "Asa Hoffman lives in Manhattan.",
                "Asa Hoffman is a chess player.",
                "Some chess players are grandmasters.",
                "People born and living in New York City are New Yorkers.",
                "People liviing in Manhattan live in New York City."
            ],
            "context_fol": [
                "BornIn(asaHoffmann, newyorkcity)",
                "LivesIn(asaHoffmann, manhattan)",
                "IsChessPlayer(asaHoffmann)",
                "\u2203x (IsChestPlayer(x) \u2227 IsGrandMaster(x))",
                "\u2200x (BornIn(x, newyorkcity) \u2227 LivesIn(x, newyorkcity) \u2192 IsNewYorker(x))",
                "\u2200x (LivesIn(x, manhattan) \u2192 LivesIn(x, newyorkcity))"
            ],
            "question": "Asa Hoffmann is a New Yorkers.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1228,
            "story_id": 430,
            "context": [
                "No coffee sold in Walmart is produced in France. ",
                "All coffee supplied by the company is sold in Walmart. ",
                "All coffee produced in Columbia is produced in France. ",
                "All coffee favored by local residents is coffee produced in Columbia. ",
                "All coffee with high prices is favored by local residents. ",
                "Civet Coffee is not produced in Columbia and is cheap.",
                "Jamaica Blue is sold in Walmart or favored by local residents."
            ],
            "context_fol": [
                "\u2200x (Walmart(x) \u2192 \u00acFrance(x))",
                "\u2200x (Company(x) \u2192 Walmart(x))",
                "\u2200x (Columbia(x) \u2192 France(x))",
                "\u2200x (Favored(x) \u2192 Columbia(x))",
                "\u2200x (HighPrice(x) \u2192 Favored(x))",
                "\u00ac(Columbia(civetcoffee) \u2227 HighPrice(civetcoffee))",
                "Walmart(jamaicablue) \u2228 Favored(jamaicablue)"
            ],
            "question": "Civet Coffee is produced in France.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 730,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 InZoo(x)) \u2192 \u00acWild(x))",
                "\u2203x (Bear(x) \u2227 InZoo(x)) "
            ],
            "question": "Not all bears are wild.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "59": [
        {
            "example_id": 232,
            "story_id": 76,
            "context": [
                "Asa Hoffmann was born in New York City.",
                "Asa Hoffman lives in Manhattan.",
                "Asa Hoffman is a chess player.",
                "Some chess players are grandmasters.",
                "People born and living in New York City are New Yorkers.",
                "People liviing in Manhattan live in New York City."
            ],
            "context_fol": [
                "BornIn(asaHoffmann, newyorkcity)",
                "LivesIn(asaHoffmann, manhattan)",
                "IsChessPlayer(asaHoffmann)",
                "\u2203x (IsChestPlayer(x) \u2227 IsGrandMaster(x))",
                "\u2200x (BornIn(x, newyorkcity) \u2227 LivesIn(x, newyorkcity) \u2192 IsNewYorker(x))",
                "\u2200x (LivesIn(x, manhattan) \u2192 LivesIn(x, newyorkcity))"
            ],
            "question": "Asa Hoffmann is a New Yorkers.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1228,
            "story_id": 430,
            "context": [
                "No coffee sold in Walmart is produced in France. ",
                "All coffee supplied by the company is sold in Walmart. ",
                "All coffee produced in Columbia is produced in France. ",
                "All coffee favored by local residents is coffee produced in Columbia. ",
                "All coffee with high prices is favored by local residents. ",
                "Civet Coffee is not produced in Columbia and is cheap.",
                "Jamaica Blue is sold in Walmart or favored by local residents."
            ],
            "context_fol": [
                "\u2200x (Walmart(x) \u2192 \u00acFrance(x))",
                "\u2200x (Company(x) \u2192 Walmart(x))",
                "\u2200x (Columbia(x) \u2192 France(x))",
                "\u2200x (Favored(x) \u2192 Columbia(x))",
                "\u2200x (HighPrice(x) \u2192 Favored(x))",
                "\u00ac(Columbia(civetcoffee) \u2227 HighPrice(civetcoffee))",
                "Walmart(jamaicablue) \u2228 Favored(jamaicablue)"
            ],
            "question": "Civet Coffee is produced in France.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 730,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 InZoo(x)) \u2192 \u00acWild(x))",
                "\u2203x (Bear(x) \u2227 InZoo(x)) "
            ],
            "question": "Not all bears are wild.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "60": [
        {
            "example_id": 232,
            "story_id": 76,
            "context": [
                "Asa Hoffmann was born in New York City.",
                "Asa Hoffman lives in Manhattan.",
                "Asa Hoffman is a chess player.",
                "Some chess players are grandmasters.",
                "People born and living in New York City are New Yorkers.",
                "People liviing in Manhattan live in New York City."
            ],
            "context_fol": [
                "BornIn(asaHoffmann, newyorkcity)",
                "LivesIn(asaHoffmann, manhattan)",
                "IsChessPlayer(asaHoffmann)",
                "\u2203x (IsChestPlayer(x) \u2227 IsGrandMaster(x))",
                "\u2200x (BornIn(x, newyorkcity) \u2227 LivesIn(x, newyorkcity) \u2192 IsNewYorker(x))",
                "\u2200x (LivesIn(x, manhattan) \u2192 LivesIn(x, newyorkcity))"
            ],
            "question": "Asa Hoffmann is a New Yorkers.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1228,
            "story_id": 430,
            "context": [
                "No coffee sold in Walmart is produced in France. ",
                "All coffee supplied by the company is sold in Walmart. ",
                "All coffee produced in Columbia is produced in France. ",
                "All coffee favored by local residents is coffee produced in Columbia. ",
                "All coffee with high prices is favored by local residents. ",
                "Civet Coffee is not produced in Columbia and is cheap.",
                "Jamaica Blue is sold in Walmart or favored by local residents."
            ],
            "context_fol": [
                "\u2200x (Walmart(x) \u2192 \u00acFrance(x))",
                "\u2200x (Company(x) \u2192 Walmart(x))",
                "\u2200x (Columbia(x) \u2192 France(x))",
                "\u2200x (Favored(x) \u2192 Columbia(x))",
                "\u2200x (HighPrice(x) \u2192 Favored(x))",
                "\u00ac(Columbia(civetcoffee) \u2227 HighPrice(civetcoffee))",
                "Walmart(jamaicablue) \u2228 Favored(jamaicablue)"
            ],
            "question": "Civet Coffee is produced in France.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 730,
            "story_id": 281,
            "context": [
                "All bears in zoos are not wild. ",
                "Some bears are in zoos. "
            ],
            "context_fol": [
                "\u2200x ((Bear(x) \u2227 InZoo(x)) \u2192 \u00acWild(x))",
                "\u2203x (Bear(x) \u2227 InZoo(x)) "
            ],
            "question": "Not all bears are wild.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "61": [
        {
            "example_id": 781,
            "story_id": 312,
            "context": [
                "To get a student visa, you must be full-time enrolled in an academic program.",
                "Those who are full-time enrolled in an academic program can not work full-time.",
                "Everyone who wants to study abroad needs to have a student visa.",
                "All PhD graduates can work full time. ",
                "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
            ],
            "context_fol": [
                "\u2200x (StudentVisa(x) \u2192 FullTimeAcademic(x))",
                "\u2200x (FullTimeAcademic(x) \u2192 \u00acWorkFullTime(x))",
                "\u2200x (StudyAbroad(x) \u2192 StudentVisa(x))",
                "\u2200x (PhdGraduate(x) \u2192 WorkFullTime(x))",
                "\u00acStudyAbroad(tom) \u2192 FullTimeAcademic(tom)"
            ],
            "question": "Tom is a PhD graduate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 784,
            "story_id": 313,
            "context": [
                "Some of those who apply for a Schengen Visa get it.",
                "To apply for a Schengen Visa, you need to provide financial guarantees.",
                "If you need to provide financial guarantees, you must request documents from the bank.",
                "Do not close your bank account if you request documents from the bank.",
                "Philip closed his bank account."
            ],
            "context_fol": [
                "\u2203x (ApplyVisa(x) \u2192 GetVisa(x))",
                "\u2200x (ApplyVisa(x) \u2192 FinancialGuarantees(x))",
                "\u2200x (FinancialGuarantees(x) \u2192 RequestDocuments(x))",
                "\u2200x (RequestDocuments(x) \u2192 \u00acCloseBankAccount(x))",
                "CloseBankAccount(philip)"
            ],
            "question": "Philip got a Schengen Visa.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 778,
            "story_id": 311,
            "context": [
                "No payment cards issued by Russian banks can be used with ApplePay.",
                "All MIR payment cards are issued by Russian banks.",
                "Some international payment cards can be used with ApplePay.",
                "Social payments in Russia can only be transferred to MIR payment cards.",
                "Bank of America payment cards can be used with ApplePay."
            ],
            "context_fol": [
                "\u2200x (RussianBank(x) \u2192 \u00acApplePay(x))",
                "\u2200x (Mir(x) \u2192 RussianBank(x))",
                "\u2203x (International(x) \u2192 ApplePay(x))",
                "\u2200x (SocialRussia(x) \u2192 Mir(x))",
                "ApplePay(boapaymentcards)"
            ],
            "question": "Bank of America payment cards are international.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "62": [
        {
            "example_id": 781,
            "story_id": 312,
            "context": [
                "To get a student visa, you must be full-time enrolled in an academic program.",
                "Those who are full-time enrolled in an academic program can not work full-time.",
                "Everyone who wants to study abroad needs to have a student visa.",
                "All PhD graduates can work full time. ",
                "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
            ],
            "context_fol": [
                "\u2200x (StudentVisa(x) \u2192 FullTimeAcademic(x))",
                "\u2200x (FullTimeAcademic(x) \u2192 \u00acWorkFullTime(x))",
                "\u2200x (StudyAbroad(x) \u2192 StudentVisa(x))",
                "\u2200x (PhdGraduate(x) \u2192 WorkFullTime(x))",
                "\u00acStudyAbroad(tom) \u2192 FullTimeAcademic(tom)"
            ],
            "question": "Tom is a PhD graduate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 784,
            "story_id": 313,
            "context": [
                "Some of those who apply for a Schengen Visa get it.",
                "To apply for a Schengen Visa, you need to provide financial guarantees.",
                "If you need to provide financial guarantees, you must request documents from the bank.",
                "Do not close your bank account if you request documents from the bank.",
                "Philip closed his bank account."
            ],
            "context_fol": [
                "\u2203x (ApplyVisa(x) \u2192 GetVisa(x))",
                "\u2200x (ApplyVisa(x) \u2192 FinancialGuarantees(x))",
                "\u2200x (FinancialGuarantees(x) \u2192 RequestDocuments(x))",
                "\u2200x (RequestDocuments(x) \u2192 \u00acCloseBankAccount(x))",
                "CloseBankAccount(philip)"
            ],
            "question": "Philip got a Schengen Visa.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 778,
            "story_id": 311,
            "context": [
                "No payment cards issued by Russian banks can be used with ApplePay.",
                "All MIR payment cards are issued by Russian banks.",
                "Some international payment cards can be used with ApplePay.",
                "Social payments in Russia can only be transferred to MIR payment cards.",
                "Bank of America payment cards can be used with ApplePay."
            ],
            "context_fol": [
                "\u2200x (RussianBank(x) \u2192 \u00acApplePay(x))",
                "\u2200x (Mir(x) \u2192 RussianBank(x))",
                "\u2203x (International(x) \u2192 ApplePay(x))",
                "\u2200x (SocialRussia(x) \u2192 Mir(x))",
                "ApplePay(boapaymentcards)"
            ],
            "question": "Bank of America payment cards are international.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "63": [
        {
            "example_id": 787,
            "story_id": 314,
            "context": [
                "No animals are plants. ",
                "All humans are animals.",
                "All pupils are human.",
                "All flowers are plants.",
                "If Jack is a human or a flower, then Jack is a human and a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)"
            ],
            "question": "Jack is a pupil.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "64": [
        {
            "example_id": 787,
            "story_id": 314,
            "context": [
                "No animals are plants. ",
                "All humans are animals.",
                "All pupils are human.",
                "All flowers are plants.",
                "If Jack is a human or a flower, then Jack is a human and a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)"
            ],
            "question": "Jack is a pupil.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "65": [
        {
            "example_id": 787,
            "story_id": 314,
            "context": [
                "No animals are plants. ",
                "All humans are animals.",
                "All pupils are human.",
                "All flowers are plants.",
                "If Jack is a human or a flower, then Jack is a human and a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)"
            ],
            "question": "Jack is a pupil.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "66": [
        {
            "example_id": 1236,
            "story_id": 432,
            "context": [
                "All Yale dormitories are located on York Street. ",
                "All buildings managed by Yale Housing are dormitories. ",
                "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
                "No buildings open to students are established after 1800. ",
                "All buildings located on York Street are open to students. ",
                "Harkness is either a building operated by Yale Housing staff or located on York Street. "
            ],
            "context_fol": [
                "\u2200x (YaleDormitory(x) \u2192 InYorkStreet(x))",
                "\u2200x (ManagedByYaleHousing(x) \u2192 YaleDormitory(x))",
                "\u2200x (OperatedByYaleHousingStaffs(x) \u2192 ManagedByYaleHousing(x))",
                "\u2200x (OpenToStudents(x) \u2192 \u00acEstablishedAfter1800(x))",
                "\u2200x (InYorkStreet(x) \u2192 OpenToStudents(x))",
                "OperatedByYaleHousingStaffs(harkness) \u2295 InYorkStreet(harkness)"
            ],
            "question": "Harkness is a Yale dormitory.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 178,
            "story_id": 60,
            "context": [
                "All buildings in New Haven are low. ",
                "All buildings managed by the Yale Housing are located in New Haven. ",
                "All buildings in Manhattans are high. ",
                "All buildings owned by Bloomberg are located in Manhattans. ",
                "All buildings with the Bloomberg logo are owned by Bloomberg. ",
                "Tower A is managed by the Yale Housing.",
                "Tower B is with the Bloomberg logo."
            ],
            "context_fol": [
                "\u2200x (Located(newhaven, x) \u2192 \u00acHigh(x))",
                "\u2200x (YaleHousing(x) \u2192 Located(newhaven, x))",
                "\u2200x (Located(manhattans, x) \u2192 High(x))",
                "\u2200x (Bloomberg(x) \u2192 Located(manhattans, x))",
                "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
                "YaleHousing(tower-a)",
                "BloombergLogo(tower-b)"
            ],
            "question": "Tower A is low.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 700,
            "story_id": 251,
            "context": [
                "To get a job at Google, you need to have a lot of work experience or a good education.",
                " All Yale graduates who submitted their resumes to Google got jobs there.",
                " John has a lot of work experience.",
                " John submitted his resume to Google and got a job there."
            ],
            "context_fol": [
                "\u2200x (Employed(x, google) \u2192 WorkExp(x) \u2228 GoodEduc(x))",
                "\u2200x ((Yale(x) \u2227 CV(x, google)) \u2192 Employed(x, google))",
                "WorkExp(john)",
                "CV(john, google) \u2227 Employed(john, google)"
            ],
            "question": "John is a Yale graduate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "67": [
        {
            "example_id": 1236,
            "story_id": 432,
            "context": [
                "All Yale dormitories are located on York Street. ",
                "All buildings managed by Yale Housing are dormitories. ",
                "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
                "No buildings open to students are established after 1800. ",
                "All buildings located on York Street are open to students. ",
                "Harkness is either a building operated by Yale Housing staff or located on York Street. "
            ],
            "context_fol": [
                "\u2200x (YaleDormitory(x) \u2192 InYorkStreet(x))",
                "\u2200x (ManagedByYaleHousing(x) \u2192 YaleDormitory(x))",
                "\u2200x (OperatedByYaleHousingStaffs(x) \u2192 ManagedByYaleHousing(x))",
                "\u2200x (OpenToStudents(x) \u2192 \u00acEstablishedAfter1800(x))",
                "\u2200x (InYorkStreet(x) \u2192 OpenToStudents(x))",
                "OperatedByYaleHousingStaffs(harkness) \u2295 InYorkStreet(harkness)"
            ],
            "question": "Harkness is a Yale dormitory.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 178,
            "story_id": 60,
            "context": [
                "All buildings in New Haven are low. ",
                "All buildings managed by the Yale Housing are located in New Haven. ",
                "All buildings in Manhattans are high. ",
                "All buildings owned by Bloomberg are located in Manhattans. ",
                "All buildings with the Bloomberg logo are owned by Bloomberg. ",
                "Tower A is managed by the Yale Housing.",
                "Tower B is with the Bloomberg logo."
            ],
            "context_fol": [
                "\u2200x (Located(newhaven, x) \u2192 \u00acHigh(x))",
                "\u2200x (YaleHousing(x) \u2192 Located(newhaven, x))",
                "\u2200x (Located(manhattans, x) \u2192 High(x))",
                "\u2200x (Bloomberg(x) \u2192 Located(manhattans, x))",
                "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
                "YaleHousing(tower-a)",
                "BloombergLogo(tower-b)"
            ],
            "question": "Tower A is low.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 700,
            "story_id": 251,
            "context": [
                "To get a job at Google, you need to have a lot of work experience or a good education.",
                " All Yale graduates who submitted their resumes to Google got jobs there.",
                " John has a lot of work experience.",
                " John submitted his resume to Google and got a job there."
            ],
            "context_fol": [
                "\u2200x (Employed(x, google) \u2192 WorkExp(x) \u2228 GoodEduc(x))",
                "\u2200x ((Yale(x) \u2227 CV(x, google)) \u2192 Employed(x, google))",
                "WorkExp(john)",
                "CV(john, google) \u2227 Employed(john, google)"
            ],
            "question": "John is a Yale graduate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "68": [
        {
            "example_id": 1236,
            "story_id": 432,
            "context": [
                "All Yale dormitories are located on York Street. ",
                "All buildings managed by Yale Housing are dormitories. ",
                "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
                "No buildings open to students are established after 1800. ",
                "All buildings located on York Street are open to students. ",
                "Harkness is either a building operated by Yale Housing staff or located on York Street. "
            ],
            "context_fol": [
                "\u2200x (YaleDormitory(x) \u2192 InYorkStreet(x))",
                "\u2200x (ManagedByYaleHousing(x) \u2192 YaleDormitory(x))",
                "\u2200x (OperatedByYaleHousingStaffs(x) \u2192 ManagedByYaleHousing(x))",
                "\u2200x (OpenToStudents(x) \u2192 \u00acEstablishedAfter1800(x))",
                "\u2200x (InYorkStreet(x) \u2192 OpenToStudents(x))",
                "OperatedByYaleHousingStaffs(harkness) \u2295 InYorkStreet(harkness)"
            ],
            "question": "Harkness is a Yale dormitory.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 178,
            "story_id": 60,
            "context": [
                "All buildings in New Haven are low. ",
                "All buildings managed by the Yale Housing are located in New Haven. ",
                "All buildings in Manhattans are high. ",
                "All buildings owned by Bloomberg are located in Manhattans. ",
                "All buildings with the Bloomberg logo are owned by Bloomberg. ",
                "Tower A is managed by the Yale Housing.",
                "Tower B is with the Bloomberg logo."
            ],
            "context_fol": [
                "\u2200x (Located(newhaven, x) \u2192 \u00acHigh(x))",
                "\u2200x (YaleHousing(x) \u2192 Located(newhaven, x))",
                "\u2200x (Located(manhattans, x) \u2192 High(x))",
                "\u2200x (Bloomberg(x) \u2192 Located(manhattans, x))",
                "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
                "YaleHousing(tower-a)",
                "BloombergLogo(tower-b)"
            ],
            "question": "Tower A is low.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 700,
            "story_id": 251,
            "context": [
                "To get a job at Google, you need to have a lot of work experience or a good education.",
                " All Yale graduates who submitted their resumes to Google got jobs there.",
                " John has a lot of work experience.",
                " John submitted his resume to Google and got a job there."
            ],
            "context_fol": [
                "\u2200x (Employed(x, google) \u2192 WorkExp(x) \u2228 GoodEduc(x))",
                "\u2200x ((Yale(x) \u2227 CV(x, google)) \u2192 Employed(x, google))",
                "WorkExp(john)",
                "CV(john, google) \u2227 Employed(john, google)"
            ],
            "question": "John is a Yale graduate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "69": [
        {
            "example_id": 1335,
            "story_id": 461,
            "context": [
                "No criminal is kind. ",
                "All person who breaks the law is a criminals.",
                "People are either kind or evil.",
                "If someone is evil, then they are ugly.",
                "If someone is evil, then they are cold-blood.",
                "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
            ],
            "context_fol": [
                "\u2200x (Criminal(x) \u2192 \u00acKind(x))",
                "\u2200x (BreakLaw(x) \u2192 Criminal(x))",
                "\u2200x (Kind(x) \u2295 Evil(x))",
                "\u2200x (Evil(x) \u2192 Ugly(x))",
                "\u2200x (Evil(x) \u2192 ColdBlood(x))",
                "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)"
            ],
            "question": "Garry is ugly.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 35,
            "story_id": 13,
            "context": [
                "System 7 is a UK-based electronic dance music band.",
                "Steve Hillage and Miquette Giraudy formed System 7.",
                "Steve Hillage and Miquette Giraudy are former members of the band Gong.",
                "Electric dance music bands are bands.",
                "System 7 has released several club singles.",
                "Club singles are not singles."
            ],
            "context_fol": [
                "BasedOn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)",
                "Formed(stevehillage, system7) \u2227 Formed(miquettegiraudy, system7)",
                "FormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)",
                "\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))",
                "\u2203x (ClubSingle(x) \u2227 Released(system7, x))",
                "\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))"
            ],
            "question": "System 7 was formed by former members of Gong.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 421,
            "story_id": 143,
            "context": [
                "Video Gag is a French television series that airs weekly.",
                "Video Gag airs on the French broadcast channel TF1. ",
                "If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.",
                "All videos aired on Video Gag are in French."
            ],
            "context_fol": [
                "\u2200x (VideoGag(x) \u2192 FrenchTelevision(x) \u2227 AirsWeekly(x))",
                "\u2200x (VideoGag(x) \u2192 ChannelTF1(x))",
                "\u2200x (FunnyVideos(x) \u2192 AirsWeekly(x))",
                "\u2200x (VideoGag(x) \u2192 AirsWeekly(x) \u2227 French(x))"
            ],
            "question": "Viewers send in funny videos to the French broadcast channel that are in French.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "70": [
        {
            "example_id": 1335,
            "story_id": 461,
            "context": [
                "No criminal is kind. ",
                "All person who breaks the law is a criminals.",
                "People are either kind or evil.",
                "If someone is evil, then they are ugly.",
                "If someone is evil, then they are cold-blood.",
                "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
            ],
            "context_fol": [
                "\u2200x (Criminal(x) \u2192 \u00acKind(x))",
                "\u2200x (BreakLaw(x) \u2192 Criminal(x))",
                "\u2200x (Kind(x) \u2295 Evil(x))",
                "\u2200x (Evil(x) \u2192 Ugly(x))",
                "\u2200x (Evil(x) \u2192 ColdBlood(x))",
                "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)"
            ],
            "question": "Garry is ugly.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 35,
            "story_id": 13,
            "context": [
                "System 7 is a UK-based electronic dance music band.",
                "Steve Hillage and Miquette Giraudy formed System 7.",
                "Steve Hillage and Miquette Giraudy are former members of the band Gong.",
                "Electric dance music bands are bands.",
                "System 7 has released several club singles.",
                "Club singles are not singles."
            ],
            "context_fol": [
                "BasedOn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)",
                "Formed(stevehillage, system7) \u2227 Formed(miquettegiraudy, system7)",
                "FormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)",
                "\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))",
                "\u2203x (ClubSingle(x) \u2227 Released(system7, x))",
                "\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))"
            ],
            "question": "System 7 was formed by former members of Gong.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 421,
            "story_id": 143,
            "context": [
                "Video Gag is a French television series that airs weekly.",
                "Video Gag airs on the French broadcast channel TF1. ",
                "If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.",
                "All videos aired on Video Gag are in French."
            ],
            "context_fol": [
                "\u2200x (VideoGag(x) \u2192 FrenchTelevision(x) \u2227 AirsWeekly(x))",
                "\u2200x (VideoGag(x) \u2192 ChannelTF1(x))",
                "\u2200x (FunnyVideos(x) \u2192 AirsWeekly(x))",
                "\u2200x (VideoGag(x) \u2192 AirsWeekly(x) \u2227 French(x))"
            ],
            "question": "Viewers send in funny videos to the French broadcast channel that are in French.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "71": [
        {
            "example_id": 274,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)",
                "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))",
                "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 966,
            "story_id": 362,
            "context": [
                "People either invest in the public stock market regularly or enjoy gambling regularly.",
                "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
                "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.",
                "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.",
                "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.",
                "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. "
            ],
            "context_fol": [
                "\u2200x (Invests(x) \u2228 Gambling(x))",
                "\u2200x (Invests(x) \u2192 Newspapers(x))",
                "\u2200x (Gambling(x) \u2192 Casinos(x))",
                "\u2200x (Casinos(x) \u2192 LasVegas(x))",
                "\u2200x (Casinos(x) \u2192 DisposableIncome(x))",
                "Invests(matt) \u2192 \u00acDisposableIncome(matt) \u2227 \u00acInvests(matt)"
            ],
            "question": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 821,
            "story_id": 321,
            "context": [
                "No people who work at corporate jobs are starting a new company.",
                "All entrepreneurs are starting a new company.",
                "All risk-averse people are people who work at corporate jobs.",
                "All people who hate working for others are entrepreneurs.",
                "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person."
            ],
            "context_fol": [
                "\u2200x (WorkAtCorporateJobs(x) \u2192 \u00acStartingANewCompany(x))",
                " \u2200x (Entrepreneurs(x) \u2192 StartingANewCompany(x))",
                " \u2200x (Risk-averse(x) \u2192 WorkAtCorporateJobs(x))",
                " \u2200x (HateWorkingForOthers(x) \u2192 Entrepreneurs(x))",
                " \u00acEntrepreneurs(markZuckerberg) \u2228 \u00acHateWorkingForOthers(markZuckerberg) \u2192 \u00acRisk-averse(markZuckerberg)"
            ],
            "question": "Mark Zuckerberg is an entrepreneur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "72": [
        {
            "example_id": 274,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)",
                "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))",
                "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 966,
            "story_id": 362,
            "context": [
                "People either invest in the public stock market regularly or enjoy gambling regularly.",
                "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
                "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.",
                "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.",
                "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.",
                "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. "
            ],
            "context_fol": [
                "\u2200x (Invests(x) \u2228 Gambling(x))",
                "\u2200x (Invests(x) \u2192 Newspapers(x))",
                "\u2200x (Gambling(x) \u2192 Casinos(x))",
                "\u2200x (Casinos(x) \u2192 LasVegas(x))",
                "\u2200x (Casinos(x) \u2192 DisposableIncome(x))",
                "Invests(matt) \u2192 \u00acDisposableIncome(matt) \u2227 \u00acInvests(matt)"
            ],
            "question": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 821,
            "story_id": 321,
            "context": [
                "No people who work at corporate jobs are starting a new company.",
                "All entrepreneurs are starting a new company.",
                "All risk-averse people are people who work at corporate jobs.",
                "All people who hate working for others are entrepreneurs.",
                "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person."
            ],
            "context_fol": [
                "\u2200x (WorkAtCorporateJobs(x) \u2192 \u00acStartingANewCompany(x))",
                " \u2200x (Entrepreneurs(x) \u2192 StartingANewCompany(x))",
                " \u2200x (Risk-averse(x) \u2192 WorkAtCorporateJobs(x))",
                " \u2200x (HateWorkingForOthers(x) \u2192 Entrepreneurs(x))",
                " \u00acEntrepreneurs(markZuckerberg) \u2228 \u00acHateWorkingForOthers(markZuckerberg) \u2192 \u00acRisk-averse(markZuckerberg)"
            ],
            "question": "Mark Zuckerberg is an entrepreneur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "73": [
        {
            "example_id": 274,
            "story_id": 90,
            "context": [
                "Koei Tecmo is a Japanese video game and anime holding company.",
                "Holding companies hold several companies.",
                "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
                "Video game holding companies are holding companies."
            ],
            "context_fol": [
                "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)",
                "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))",
                "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)",
                "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
            ],
            "question": "Koei Tecmo holds another company.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 966,
            "story_id": 362,
            "context": [
                "People either invest in the public stock market regularly or enjoy gambling regularly.",
                "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
                "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.",
                "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.",
                "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.",
                "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. "
            ],
            "context_fol": [
                "\u2200x (Invests(x) \u2228 Gambling(x))",
                "\u2200x (Invests(x) \u2192 Newspapers(x))",
                "\u2200x (Gambling(x) \u2192 Casinos(x))",
                "\u2200x (Casinos(x) \u2192 LasVegas(x))",
                "\u2200x (Casinos(x) \u2192 DisposableIncome(x))",
                "Invests(matt) \u2192 \u00acDisposableIncome(matt) \u2227 \u00acInvests(matt)"
            ],
            "question": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 821,
            "story_id": 321,
            "context": [
                "No people who work at corporate jobs are starting a new company.",
                "All entrepreneurs are starting a new company.",
                "All risk-averse people are people who work at corporate jobs.",
                "All people who hate working for others are entrepreneurs.",
                "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person."
            ],
            "context_fol": [
                "\u2200x (WorkAtCorporateJobs(x) \u2192 \u00acStartingANewCompany(x))",
                " \u2200x (Entrepreneurs(x) \u2192 StartingANewCompany(x))",
                " \u2200x (Risk-averse(x) \u2192 WorkAtCorporateJobs(x))",
                " \u2200x (HateWorkingForOthers(x) \u2192 Entrepreneurs(x))",
                " \u00acEntrepreneurs(markZuckerberg) \u2228 \u00acHateWorkingForOthers(markZuckerberg) \u2192 \u00acRisk-averse(markZuckerberg)"
            ],
            "question": "Mark Zuckerberg is an entrepreneur.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "74": [
        {
            "example_id": 1232,
            "story_id": 431,
            "context": [
                "No Boeing-737 plane is equipped with more than 300 seats. ",
                "All planes in Delta are of type Boeing-737. ",
                "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
                "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
                "All planes with a capacity of 100 passengers are produced before 2010. ",
                "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
                "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
            ],
            "context_fol": [
                "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))",
                "\u2200x (Delta(x) \u2192 Boeing737(x))",
                "\u2200x (Seats300(x) \u2228 Passengers100(x))",
                "\u2200x (Passengers100(x) \u2192 ShortDistance(x))",
                "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))",
                "Boeing737(jake32) \u2295 Delta(jake32) ",
                "Boeing737(t10) \u2295 Delta(t10)"
            ],
            "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 778,
            "story_id": 311,
            "context": [
                "No payment cards issued by Russian banks can be used with ApplePay.",
                "All MIR payment cards are issued by Russian banks.",
                "Some international payment cards can be used with ApplePay.",
                "Social payments in Russia can only be transferred to MIR payment cards.",
                "Bank of America payment cards can be used with ApplePay."
            ],
            "context_fol": [
                "\u2200x (RussianBank(x) \u2192 \u00acApplePay(x))",
                "\u2200x (Mir(x) \u2192 RussianBank(x))",
                "\u2203x (International(x) \u2192 ApplePay(x))",
                "\u2200x (SocialRussia(x) \u2192 Mir(x))",
                "ApplePay(boapaymentcards)"
            ],
            "question": "Bank of America payment cards are international.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 619,
            "story_id": 215,
            "context": [
                "Adam owns cars.",
                "Adam has a favorite car.",
                "Among the cars he owns, Adam's favorite car is European.",
                "Adam broke his favorite car."
            ],
            "context_fol": [
                "\u2203x (Owns(adam, x))",
                "\u2203x (Favorite(adam, x))",
                "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))",
                "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))"
            ],
            "question": "Adam owns a Japanese car.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "75": [
        {
            "example_id": 1232,
            "story_id": 431,
            "context": [
                "No Boeing-737 plane is equipped with more than 300 seats. ",
                "All planes in Delta are of type Boeing-737. ",
                "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
                "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
                "All planes with a capacity of 100 passengers are produced before 2010. ",
                "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
                "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
            ],
            "context_fol": [
                "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))",
                "\u2200x (Delta(x) \u2192 Boeing737(x))",
                "\u2200x (Seats300(x) \u2228 Passengers100(x))",
                "\u2200x (Passengers100(x) \u2192 ShortDistance(x))",
                "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))",
                "Boeing737(jake32) \u2295 Delta(jake32) ",
                "Boeing737(t10) \u2295 Delta(t10)"
            ],
            "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 778,
            "story_id": 311,
            "context": [
                "No payment cards issued by Russian banks can be used with ApplePay.",
                "All MIR payment cards are issued by Russian banks.",
                "Some international payment cards can be used with ApplePay.",
                "Social payments in Russia can only be transferred to MIR payment cards.",
                "Bank of America payment cards can be used with ApplePay."
            ],
            "context_fol": [
                "\u2200x (RussianBank(x) \u2192 \u00acApplePay(x))",
                "\u2200x (Mir(x) \u2192 RussianBank(x))",
                "\u2203x (International(x) \u2192 ApplePay(x))",
                "\u2200x (SocialRussia(x) \u2192 Mir(x))",
                "ApplePay(boapaymentcards)"
            ],
            "question": "Bank of America payment cards are international.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 619,
            "story_id": 215,
            "context": [
                "Adam owns cars.",
                "Adam has a favorite car.",
                "Among the cars he owns, Adam's favorite car is European.",
                "Adam broke his favorite car."
            ],
            "context_fol": [
                "\u2203x (Owns(adam, x))",
                "\u2203x (Favorite(adam, x))",
                "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))",
                "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))"
            ],
            "question": "Adam owns a Japanese car.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "76": [
        {
            "example_id": 926,
            "story_id": 348,
            "context": [
                "All young adults go on a diet.",
                "All college students are young adults.",
                "All Yale students are college students.",
                "Someone is either a Yale student or a Harvard student.",
                "All Harvard students are diligent.",
                "If Susan is a Harvard student, then she is a young adult.",
                "If Susan is a Yale student, then she does not go on a diet."
            ],
            "context_fol": [
                "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))",
                "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))",
                "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))",
                "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))",
                "\u2200x (HarvardStudent(x) \u2192 Diligent(x))",
                "HarvardStudent(susan) \u2192 YoungAdult(susan)",
                "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)"
            ],
            "question": "Susan is a college student.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1004,
            "story_id": 375,
            "context": [
                "All people who grow their own fresh vegetables in their home garden also have ample space.",
                "If people are young working professionals who live in large cities, then they do not have ample space.",
                "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
                "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
                "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
                "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
            ],
            "context_fol": [
                "\u2200x (Garden(x) \u2192 Space(x))",
                "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
                "\u2200x (Takeout(x) \u2192 Garden(x))",
                "\u2200x (GoingOut(x) \u2192 Takeout(x))",
                "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
                "Garden(michael) \u2228 Homecooked(michael)"
            ],
            "question": "Michael enjoys going out often to restaurants with friends.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1303,
            "story_id": 451,
            "context": [
                "If you are on the payroll, then you are being paid by the school.",
                "If someone has a job at a school, then they are on the payroll.",
                "All faculty members have a job at a school.",
                "One can either be a faculty member or a teacher.",
                "Every teacher has students.",
                "If Nancy is a teacher, then they are on the payroll.",
                "If Nancy is not a teacher, then they are not paid by the school."
            ],
            "context_fol": [
                "\u2200x (OnPayroll(x) \u2192 PaidBySchool(x))",
                "\u2200x (JobAtSchool(x) \u2192 OnPayroll(x))",
                "\u2200x (FacultyMember(x) \u2192 JobAtSchool(x))",
                "\u2200x (FacultyMember(x) \u2228 Teacher(x))",
                "\u2200x (Teacher(x) \u2192 HasStudents(x))",
                "Teacher(nancy) \u2192 OnPayroll(nancy)",
                "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)"
            ],
            "question": "Nancy is a faculty member.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "77": [
        {
            "example_id": 926,
            "story_id": 348,
            "context": [
                "All young adults go on a diet.",
                "All college students are young adults.",
                "All Yale students are college students.",
                "Someone is either a Yale student or a Harvard student.",
                "All Harvard students are diligent.",
                "If Susan is a Harvard student, then she is a young adult.",
                "If Susan is a Yale student, then she does not go on a diet."
            ],
            "context_fol": [
                "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))",
                "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))",
                "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))",
                "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))",
                "\u2200x (HarvardStudent(x) \u2192 Diligent(x))",
                "HarvardStudent(susan) \u2192 YoungAdult(susan)",
                "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)"
            ],
            "question": "Susan is a college student.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1004,
            "story_id": 375,
            "context": [
                "All people who grow their own fresh vegetables in their home garden also have ample space.",
                "If people are young working professionals who live in large cities, then they do not have ample space.",
                "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
                "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
                "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
                "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
            ],
            "context_fol": [
                "\u2200x (Garden(x) \u2192 Space(x))",
                "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
                "\u2200x (Takeout(x) \u2192 Garden(x))",
                "\u2200x (GoingOut(x) \u2192 Takeout(x))",
                "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
                "Garden(michael) \u2228 Homecooked(michael)"
            ],
            "question": "Michael enjoys going out often to restaurants with friends.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1303,
            "story_id": 451,
            "context": [
                "If you are on the payroll, then you are being paid by the school.",
                "If someone has a job at a school, then they are on the payroll.",
                "All faculty members have a job at a school.",
                "One can either be a faculty member or a teacher.",
                "Every teacher has students.",
                "If Nancy is a teacher, then they are on the payroll.",
                "If Nancy is not a teacher, then they are not paid by the school."
            ],
            "context_fol": [
                "\u2200x (OnPayroll(x) \u2192 PaidBySchool(x))",
                "\u2200x (JobAtSchool(x) \u2192 OnPayroll(x))",
                "\u2200x (FacultyMember(x) \u2192 JobAtSchool(x))",
                "\u2200x (FacultyMember(x) \u2228 Teacher(x))",
                "\u2200x (Teacher(x) \u2192 HasStudents(x))",
                "Teacher(nancy) \u2192 OnPayroll(nancy)",
                "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)"
            ],
            "question": "Nancy is a faculty member.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "78": [
        {
            "example_id": 926,
            "story_id": 348,
            "context": [
                "All young adults go on a diet.",
                "All college students are young adults.",
                "All Yale students are college students.",
                "Someone is either a Yale student or a Harvard student.",
                "All Harvard students are diligent.",
                "If Susan is a Harvard student, then she is a young adult.",
                "If Susan is a Yale student, then she does not go on a diet."
            ],
            "context_fol": [
                "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))",
                "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))",
                "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))",
                "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))",
                "\u2200x (HarvardStudent(x) \u2192 Diligent(x))",
                "HarvardStudent(susan) \u2192 YoungAdult(susan)",
                "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)"
            ],
            "question": "Susan is a college student.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1004,
            "story_id": 375,
            "context": [
                "All people who grow their own fresh vegetables in their home garden also have ample space.",
                "If people are young working professionals who live in large cities, then they do not have ample space.",
                "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
                "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
                "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
                "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
            ],
            "context_fol": [
                "\u2200x (Garden(x) \u2192 Space(x))",
                "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
                "\u2200x (Takeout(x) \u2192 Garden(x))",
                "\u2200x (GoingOut(x) \u2192 Takeout(x))",
                "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
                "Garden(michael) \u2228 Homecooked(michael)"
            ],
            "question": "Michael enjoys going out often to restaurants with friends.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1303,
            "story_id": 451,
            "context": [
                "If you are on the payroll, then you are being paid by the school.",
                "If someone has a job at a school, then they are on the payroll.",
                "All faculty members have a job at a school.",
                "One can either be a faculty member or a teacher.",
                "Every teacher has students.",
                "If Nancy is a teacher, then they are on the payroll.",
                "If Nancy is not a teacher, then they are not paid by the school."
            ],
            "context_fol": [
                "\u2200x (OnPayroll(x) \u2192 PaidBySchool(x))",
                "\u2200x (JobAtSchool(x) \u2192 OnPayroll(x))",
                "\u2200x (FacultyMember(x) \u2192 JobAtSchool(x))",
                "\u2200x (FacultyMember(x) \u2228 Teacher(x))",
                "\u2200x (Teacher(x) \u2192 HasStudents(x))",
                "Teacher(nancy) \u2192 OnPayroll(nancy)",
                "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)"
            ],
            "question": "Nancy is a faculty member.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "79": [
        {
            "example_id": 691,
            "story_id": 243,
            "context": [
                "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
                "People who have the talent of cooking can distinguish the taste of different condiments.",
                "Only people with the talent of cooking can make delicious meals.",
                "If the meal is popular at the party, then it is delicious.",
                "John can make meals which are popular at the party."
            ],
            "context_fol": [
                "\u2200x (People(x) \u2227 DistinguishCondiments(x) \u2192 UseDiffCondiments(x)) \u2227 (\u2203x (People(x) \u2227 \u00acDistinguishCondiments(x) \u2227 UseDiffCondiments(x))) \u2227 \u00ac(\u2200x (People(x) \u2227 DistinguishCondiments(x)))",
                "\u2200x (People(x) \u2227 TalentCooking(x) \u2192 DistinguishCondiments(x))",
                "\u2200x \u2200y (MakeMeal(x, y) \u2227 Delicious(y) \u2227 People(x) \u2192 TalentCooking(x)) ",
                "\u2200x \u2200y (MakeMeal(x, y) \u2227 People(x) \u2227 Popular(y) \u2192 Delicious(y))",
                "\u2203x (People(john) \u2227 MakeMeal(john, x) \u2227 Popular(x) \u2227 People(peter) \u2227 \u00acUseDiffCondiments(peter))"
            ],
            "question": "John cannot use different condiments to cook.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 697,
            "story_id": 249,
            "context": [
                "Every chef can cook.",
                "Some people who aren\u2019t chefs can cook.",
                "People who cook can make scrambled eggs and pasta.",
                "If someone can make cookies and muffins, they are a baker.",
                "Bakers who can also make scrambled eggs can make a good breakfast.",
                "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
            ],
            "context_fol": [
                "\u2200x (Chef(x) \u2192 Cook(x))",
                "\u2203x (\u00acChef(x) \u2227 Cook(x))",
                "\u2200x (Cook(x) \u2192 (MakeScrambledEggs(x) \u2227 MakePasta(x)))",
                "\u2200x (MakeCookies(x) \u2227 MakeMuffins(x) \u2192 Baker(x))",
                "\u2200x ((Baker(x) \u2227 MakeScrambledEggs(x)) \u2192 MakeGoodBreakfast(x))",
                "MakeCookies(luke) \u2227 MakeScrambledEggs(luke) \u2227 MakeMuffins(luke) \u2227 \u00acMakePasta(luke)"
            ],
            "question": "Luke can make a good breakfast.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1315,
            "story_id": 455,
            "context": [
                "All bread is food.",
                "Some sandwiches are bread.",
                "All food is edible. ",
                "No edible things are poisonous.",
                "Deodorant is poisonous."
            ],
            "context_fol": [
                "\u2200x (Bread(x) \u2192 Food(x))",
                "\u2203x (Sandwich(x) \u2227 Bread(x))",
                "\u2200x (Food(x) \u2192 Edible(x))",
                "\u2200x (Edible(x) \u2192 \u00acPoisonous(x))",
                "Poisonous(deodorant)"
            ],
            "question": "Deodorant is a sandwich.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "80": [
        {
            "example_id": 691,
            "story_id": 243,
            "context": [
                "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
                "People who have the talent of cooking can distinguish the taste of different condiments.",
                "Only people with the talent of cooking can make delicious meals.",
                "If the meal is popular at the party, then it is delicious.",
                "John can make meals which are popular at the party."
            ],
            "context_fol": [
                "\u2200x (People(x) \u2227 DistinguishCondiments(x) \u2192 UseDiffCondiments(x)) \u2227 (\u2203x (People(x) \u2227 \u00acDistinguishCondiments(x) \u2227 UseDiffCondiments(x))) \u2227 \u00ac(\u2200x (People(x) \u2227 DistinguishCondiments(x)))",
                "\u2200x (People(x) \u2227 TalentCooking(x) \u2192 DistinguishCondiments(x))",
                "\u2200x \u2200y (MakeMeal(x, y) \u2227 Delicious(y) \u2227 People(x) \u2192 TalentCooking(x)) ",
                "\u2200x \u2200y (MakeMeal(x, y) \u2227 People(x) \u2227 Popular(y) \u2192 Delicious(y))",
                "\u2203x (People(john) \u2227 MakeMeal(john, x) \u2227 Popular(x) \u2227 People(peter) \u2227 \u00acUseDiffCondiments(peter))"
            ],
            "question": "John cannot use different condiments to cook.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 697,
            "story_id": 249,
            "context": [
                "Every chef can cook.",
                "Some people who aren\u2019t chefs can cook.",
                "People who cook can make scrambled eggs and pasta.",
                "If someone can make cookies and muffins, they are a baker.",
                "Bakers who can also make scrambled eggs can make a good breakfast.",
                "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
            ],
            "context_fol": [
                "\u2200x (Chef(x) \u2192 Cook(x))",
                "\u2203x (\u00acChef(x) \u2227 Cook(x))",
                "\u2200x (Cook(x) \u2192 (MakeScrambledEggs(x) \u2227 MakePasta(x)))",
                "\u2200x (MakeCookies(x) \u2227 MakeMuffins(x) \u2192 Baker(x))",
                "\u2200x ((Baker(x) \u2227 MakeScrambledEggs(x)) \u2192 MakeGoodBreakfast(x))",
                "MakeCookies(luke) \u2227 MakeScrambledEggs(luke) \u2227 MakeMuffins(luke) \u2227 \u00acMakePasta(luke)"
            ],
            "question": "Luke can make a good breakfast.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1315,
            "story_id": 455,
            "context": [
                "All bread is food.",
                "Some sandwiches are bread.",
                "All food is edible. ",
                "No edible things are poisonous.",
                "Deodorant is poisonous."
            ],
            "context_fol": [
                "\u2200x (Bread(x) \u2192 Food(x))",
                "\u2203x (Sandwich(x) \u2227 Bread(x))",
                "\u2200x (Food(x) \u2192 Edible(x))",
                "\u2200x (Edible(x) \u2192 \u00acPoisonous(x))",
                "Poisonous(deodorant)"
            ],
            "question": "Deodorant is a sandwich.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "81": [
        {
            "example_id": 691,
            "story_id": 243,
            "context": [
                "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
                "People who have the talent of cooking can distinguish the taste of different condiments.",
                "Only people with the talent of cooking can make delicious meals.",
                "If the meal is popular at the party, then it is delicious.",
                "John can make meals which are popular at the party."
            ],
            "context_fol": [
                "\u2200x (People(x) \u2227 DistinguishCondiments(x) \u2192 UseDiffCondiments(x)) \u2227 (\u2203x (People(x) \u2227 \u00acDistinguishCondiments(x) \u2227 UseDiffCondiments(x))) \u2227 \u00ac(\u2200x (People(x) \u2227 DistinguishCondiments(x)))",
                "\u2200x (People(x) \u2227 TalentCooking(x) \u2192 DistinguishCondiments(x))",
                "\u2200x \u2200y (MakeMeal(x, y) \u2227 Delicious(y) \u2227 People(x) \u2192 TalentCooking(x)) ",
                "\u2200x \u2200y (MakeMeal(x, y) \u2227 People(x) \u2227 Popular(y) \u2192 Delicious(y))",
                "\u2203x (People(john) \u2227 MakeMeal(john, x) \u2227 Popular(x) \u2227 People(peter) \u2227 \u00acUseDiffCondiments(peter))"
            ],
            "question": "John cannot use different condiments to cook.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 697,
            "story_id": 249,
            "context": [
                "Every chef can cook.",
                "Some people who aren\u2019t chefs can cook.",
                "People who cook can make scrambled eggs and pasta.",
                "If someone can make cookies and muffins, they are a baker.",
                "Bakers who can also make scrambled eggs can make a good breakfast.",
                "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
            ],
            "context_fol": [
                "\u2200x (Chef(x) \u2192 Cook(x))",
                "\u2203x (\u00acChef(x) \u2227 Cook(x))",
                "\u2200x (Cook(x) \u2192 (MakeScrambledEggs(x) \u2227 MakePasta(x)))",
                "\u2200x (MakeCookies(x) \u2227 MakeMuffins(x) \u2192 Baker(x))",
                "\u2200x ((Baker(x) \u2227 MakeScrambledEggs(x)) \u2192 MakeGoodBreakfast(x))",
                "MakeCookies(luke) \u2227 MakeScrambledEggs(luke) \u2227 MakeMuffins(luke) \u2227 \u00acMakePasta(luke)"
            ],
            "question": "Luke can make a good breakfast.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1315,
            "story_id": 455,
            "context": [
                "All bread is food.",
                "Some sandwiches are bread.",
                "All food is edible. ",
                "No edible things are poisonous.",
                "Deodorant is poisonous."
            ],
            "context_fol": [
                "\u2200x (Bread(x) \u2192 Food(x))",
                "\u2203x (Sandwich(x) \u2227 Bread(x))",
                "\u2200x (Food(x) \u2192 Edible(x))",
                "\u2200x (Edible(x) \u2192 \u00acPoisonous(x))",
                "Poisonous(deodorant)"
            ],
            "question": "Deodorant is a sandwich.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "82": [
        {
            "example_id": 691,
            "story_id": 243,
            "context": [
                "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
                "People who have the talent of cooking can distinguish the taste of different condiments.",
                "Only people with the talent of cooking can make delicious meals.",
                "If the meal is popular at the party, then it is delicious.",
                "John can make meals which are popular at the party."
            ],
            "context_fol": [
                "\u2200x (People(x) \u2227 DistinguishCondiments(x) \u2192 UseDiffCondiments(x)) \u2227 (\u2203x (People(x) \u2227 \u00acDistinguishCondiments(x) \u2227 UseDiffCondiments(x))) \u2227 \u00ac(\u2200x (People(x) \u2227 DistinguishCondiments(x)))",
                "\u2200x (People(x) \u2227 TalentCooking(x) \u2192 DistinguishCondiments(x))",
                "\u2200x \u2200y (MakeMeal(x, y) \u2227 Delicious(y) \u2227 People(x) \u2192 TalentCooking(x)) ",
                "\u2200x \u2200y (MakeMeal(x, y) \u2227 People(x) \u2227 Popular(y) \u2192 Delicious(y))",
                "\u2203x (People(john) \u2227 MakeMeal(john, x) \u2227 Popular(x) \u2227 People(peter) \u2227 \u00acUseDiffCondiments(peter))"
            ],
            "question": "John cannot use different condiments to cook.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 697,
            "story_id": 249,
            "context": [
                "Every chef can cook.",
                "Some people who aren\u2019t chefs can cook.",
                "People who cook can make scrambled eggs and pasta.",
                "If someone can make cookies and muffins, they are a baker.",
                "Bakers who can also make scrambled eggs can make a good breakfast.",
                "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
            ],
            "context_fol": [
                "\u2200x (Chef(x) \u2192 Cook(x))",
                "\u2203x (\u00acChef(x) \u2227 Cook(x))",
                "\u2200x (Cook(x) \u2192 (MakeScrambledEggs(x) \u2227 MakePasta(x)))",
                "\u2200x (MakeCookies(x) \u2227 MakeMuffins(x) \u2192 Baker(x))",
                "\u2200x ((Baker(x) \u2227 MakeScrambledEggs(x)) \u2192 MakeGoodBreakfast(x))",
                "MakeCookies(luke) \u2227 MakeScrambledEggs(luke) \u2227 MakeMuffins(luke) \u2227 \u00acMakePasta(luke)"
            ],
            "question": "Luke can make a good breakfast.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1315,
            "story_id": 455,
            "context": [
                "All bread is food.",
                "Some sandwiches are bread.",
                "All food is edible. ",
                "No edible things are poisonous.",
                "Deodorant is poisonous."
            ],
            "context_fol": [
                "\u2200x (Bread(x) \u2192 Food(x))",
                "\u2203x (Sandwich(x) \u2227 Bread(x))",
                "\u2200x (Food(x) \u2192 Edible(x))",
                "\u2200x (Edible(x) \u2192 \u00acPoisonous(x))",
                "Poisonous(deodorant)"
            ],
            "question": "Deodorant is a sandwich.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "83": [
        {
            "example_id": 691,
            "story_id": 243,
            "context": [
                "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
                "People who have the talent of cooking can distinguish the taste of different condiments.",
                "Only people with the talent of cooking can make delicious meals.",
                "If the meal is popular at the party, then it is delicious.",
                "John can make meals which are popular at the party."
            ],
            "context_fol": [
                "\u2200x (People(x) \u2227 DistinguishCondiments(x) \u2192 UseDiffCondiments(x)) \u2227 (\u2203x (People(x) \u2227 \u00acDistinguishCondiments(x) \u2227 UseDiffCondiments(x))) \u2227 \u00ac(\u2200x (People(x) \u2227 DistinguishCondiments(x)))",
                "\u2200x (People(x) \u2227 TalentCooking(x) \u2192 DistinguishCondiments(x))",
                "\u2200x \u2200y (MakeMeal(x, y) \u2227 Delicious(y) \u2227 People(x) \u2192 TalentCooking(x)) ",
                "\u2200x \u2200y (MakeMeal(x, y) \u2227 People(x) \u2227 Popular(y) \u2192 Delicious(y))",
                "\u2203x (People(john) \u2227 MakeMeal(john, x) \u2227 Popular(x) \u2227 People(peter) \u2227 \u00acUseDiffCondiments(peter))"
            ],
            "question": "John cannot use different condiments to cook.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 697,
            "story_id": 249,
            "context": [
                "Every chef can cook.",
                "Some people who aren\u2019t chefs can cook.",
                "People who cook can make scrambled eggs and pasta.",
                "If someone can make cookies and muffins, they are a baker.",
                "Bakers who can also make scrambled eggs can make a good breakfast.",
                "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
            ],
            "context_fol": [
                "\u2200x (Chef(x) \u2192 Cook(x))",
                "\u2203x (\u00acChef(x) \u2227 Cook(x))",
                "\u2200x (Cook(x) \u2192 (MakeScrambledEggs(x) \u2227 MakePasta(x)))",
                "\u2200x (MakeCookies(x) \u2227 MakeMuffins(x) \u2192 Baker(x))",
                "\u2200x ((Baker(x) \u2227 MakeScrambledEggs(x)) \u2192 MakeGoodBreakfast(x))",
                "MakeCookies(luke) \u2227 MakeScrambledEggs(luke) \u2227 MakeMuffins(luke) \u2227 \u00acMakePasta(luke)"
            ],
            "question": "Luke can make a good breakfast.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1315,
            "story_id": 455,
            "context": [
                "All bread is food.",
                "Some sandwiches are bread.",
                "All food is edible. ",
                "No edible things are poisonous.",
                "Deodorant is poisonous."
            ],
            "context_fol": [
                "\u2200x (Bread(x) \u2192 Food(x))",
                "\u2203x (Sandwich(x) \u2227 Bread(x))",
                "\u2200x (Food(x) \u2192 Edible(x))",
                "\u2200x (Edible(x) \u2192 \u00acPoisonous(x))",
                "Poisonous(deodorant)"
            ],
            "question": "Deodorant is a sandwich.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "84": [
        {
            "example_id": 1028,
            "story_id": 383,
            "context": [
                "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
                "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
                "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
                "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
                "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
                "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out."
            ],
            "context_fol": [
                "\u2200x Spa(x) \u2192 \u00acMiserly(x)",
                "\u2200x Miserly(x) \u2228 Frivolous(x)",
                "\u2200x Frivolous(x) \u2192 Luxury(x)",
                "\u2200x Luxury(x) \u2192 Shopping(x)",
                "\u00acMiserly(Jess) \u2192 \u00acLuxury(Jess)",
                "Luxury(Jess) \u2295 Miserly(Jess)) \u2192  Luxury(Jess)"
            ],
            "question": "Jess frivolously spends a lot of money every time they go out.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 972,
            "story_id": 364,
            "context": [
                "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
                "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
                "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))",
                "\u2200x (CoffeeShop(x) \u2228 Takeout(x))",
                "\u2200x (MakeFood(x) \u2192 Takeout(x))",
                "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))",
                "\u2200x (Busy(x) \u2192 MakeFood(x))",
                "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))"
            ],
            "question": "Sam is addicted to coffee and other caffeinated drinks.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1204,
            "story_id": 424,
            "context": [
                "Customers either choose Plan A or Plan B.",
                "All who choose Plan B are rewarded with a $30 gift card. ",
                "There are no customers who do not choose any plans. ",
                "No customers rewarded a $30 gift card are older than 80.",
                "Customers are either older than 80 or are currently studying at school. ",
                "James is not a customer who is currently studying at school. "
            ],
            "context_fol": [
                "\u2200x (PlanA(x) \u2228 PlanB(x))",
                "\u2200x (PlanB(x) \u2192 Award(x))",
                "\u2200x (\u00acNoPlan(x))",
                "\u2200x (Award(x) \u2192 \u00acOlderThan80(x))",
                "\u2200x (OlderThan80(x) \u2228 StudyAtSchool(x))",
                "\u00acStudyAtSchool(james)"
            ],
            "question": "James is a customer who does not choose any plans.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "85": [
        {
            "example_id": 1028,
            "story_id": 383,
            "context": [
                "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
                "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
                "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
                "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
                "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
                "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out."
            ],
            "context_fol": [
                "\u2200x Spa(x) \u2192 \u00acMiserly(x)",
                "\u2200x Miserly(x) \u2228 Frivolous(x)",
                "\u2200x Frivolous(x) \u2192 Luxury(x)",
                "\u2200x Luxury(x) \u2192 Shopping(x)",
                "\u00acMiserly(Jess) \u2192 \u00acLuxury(Jess)",
                "Luxury(Jess) \u2295 Miserly(Jess)) \u2192  Luxury(Jess)"
            ],
            "question": "Jess frivolously spends a lot of money every time they go out.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 972,
            "story_id": 364,
            "context": [
                "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
                "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
                "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))",
                "\u2200x (CoffeeShop(x) \u2228 Takeout(x))",
                "\u2200x (MakeFood(x) \u2192 Takeout(x))",
                "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))",
                "\u2200x (Busy(x) \u2192 MakeFood(x))",
                "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))"
            ],
            "question": "Sam is addicted to coffee and other caffeinated drinks.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1204,
            "story_id": 424,
            "context": [
                "Customers either choose Plan A or Plan B.",
                "All who choose Plan B are rewarded with a $30 gift card. ",
                "There are no customers who do not choose any plans. ",
                "No customers rewarded a $30 gift card are older than 80.",
                "Customers are either older than 80 or are currently studying at school. ",
                "James is not a customer who is currently studying at school. "
            ],
            "context_fol": [
                "\u2200x (PlanA(x) \u2228 PlanB(x))",
                "\u2200x (PlanB(x) \u2192 Award(x))",
                "\u2200x (\u00acNoPlan(x))",
                "\u2200x (Award(x) \u2192 \u00acOlderThan80(x))",
                "\u2200x (OlderThan80(x) \u2228 StudyAtSchool(x))",
                "\u00acStudyAtSchool(james)"
            ],
            "question": "James is a customer who does not choose any plans.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "86": [
        {
            "example_id": 1028,
            "story_id": 383,
            "context": [
                "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
                "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
                "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
                "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
                "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
                "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out."
            ],
            "context_fol": [
                "\u2200x Spa(x) \u2192 \u00acMiserly(x)",
                "\u2200x Miserly(x) \u2228 Frivolous(x)",
                "\u2200x Frivolous(x) \u2192 Luxury(x)",
                "\u2200x Luxury(x) \u2192 Shopping(x)",
                "\u00acMiserly(Jess) \u2192 \u00acLuxury(Jess)",
                "Luxury(Jess) \u2295 Miserly(Jess)) \u2192  Luxury(Jess)"
            ],
            "question": "Jess frivolously spends a lot of money every time they go out.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 972,
            "story_id": 364,
            "context": [
                "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
                "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
                "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))",
                "\u2200x (CoffeeShop(x) \u2228 Takeout(x))",
                "\u2200x (MakeFood(x) \u2192 Takeout(x))",
                "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))",
                "\u2200x (Busy(x) \u2192 MakeFood(x))",
                "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))"
            ],
            "question": "Sam is addicted to coffee and other caffeinated drinks.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1204,
            "story_id": 424,
            "context": [
                "Customers either choose Plan A or Plan B.",
                "All who choose Plan B are rewarded with a $30 gift card. ",
                "There are no customers who do not choose any plans. ",
                "No customers rewarded a $30 gift card are older than 80.",
                "Customers are either older than 80 or are currently studying at school. ",
                "James is not a customer who is currently studying at school. "
            ],
            "context_fol": [
                "\u2200x (PlanA(x) \u2228 PlanB(x))",
                "\u2200x (PlanB(x) \u2192 Award(x))",
                "\u2200x (\u00acNoPlan(x))",
                "\u2200x (Award(x) \u2192 \u00acOlderThan80(x))",
                "\u2200x (OlderThan80(x) \u2228 StudyAtSchool(x))",
                "\u00acStudyAtSchool(james)"
            ],
            "question": "James is a customer who does not choose any plans.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "87": [
        {
            "example_id": 1335,
            "story_id": 461,
            "context": [
                "No criminal is kind. ",
                "All person who breaks the law is a criminals.",
                "People are either kind or evil.",
                "If someone is evil, then they are ugly.",
                "If someone is evil, then they are cold-blood.",
                "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
            ],
            "context_fol": [
                "\u2200x (Criminal(x) \u2192 \u00acKind(x))",
                "\u2200x (BreakLaw(x) \u2192 Criminal(x))",
                "\u2200x (Kind(x) \u2295 Evil(x))",
                "\u2200x (Evil(x) \u2192 Ugly(x))",
                "\u2200x (Evil(x) \u2192 ColdBlood(x))",
                "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)"
            ],
            "question": "Garry is ugly.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 11,
            "story_id": 5,
            "context": [
                "Peter Parker is a either a superhero or a civilian.",
                "The Hulk is a destroyer.",
                "The Hulk wakes up when he is angry.",
                "If the Hulk wakes up, then he will break a bridge.",
                "Thor is a god.",
                "Thor will break a bridge when he is happy.",
                "A god is not a destroyer and a destroyer is not a god.",
                "Peter Parker wears a uniform when he is a superhero.",
                "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.",
                "If Thor is happy, the Hulk is angry."
            ],
            "context_fol": [
                "Superhero(peter) \u2295 Civilian(peter)",
                "Destroyer(hulk)",
                "Angry(hulk) \u2192 Wake(hulk)",
                "Wake(hulk) \u2192 BreakBridge(hulk)",
                "God(thor)",
                "Happy(thor) \u2192 BreakBridge(thor)",
                "\u2200x (God(x) \u2194 \u00acDestroyer(x))",
                "Superhero(peter) \u2192 WearUniform(peter)",
                "\u2200x (\u00acCivilian(peter) \u2194 (Destroyer(x) \u2227 BreakBridge(x)))",
                "Happy(thor) \u2192 Angry(hulk)"
            ],
            "question": "If the Hulk does not wake up, then Thor is not happy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 265,
            "story_id": 87,
            "context": [
                "Daveed Diggs is an actor and film producer.",
                "Daveed Diggs played two roles in the musical Hamilton.",
                "One of the actors from Hamilton won the best actor award.",
                "The actor playing Thomas Jefferson won the best actor award.",
                "Daveed Diggs played Thomas Jefferson.",
                "Musicals are not films."
            ],
            "context_fol": [
                "Actor(daveedDiggs) \u2227 FilmProducer(daveedDiggs)",
                "PlayedTwoRoles(daveedDiggs) \u2227 PlayedIn(daveedDiggs, hamilton) \u2227 Musical(hamilton)",
                "\u2203x (Actor(x) \u2227 PlayedIn(x, hamilton) \u2227 WonBestActorAward(x))",
                "\u2200x (Actor(x) \u2227 Played(x, thomasJefferson) \u2192 WonBestActorAward(x))",
                "Played(daveedDiggs, thomasJefferson)",
                "\u2200x (Musical(x) \u2192 \u00acFilm(x))"
            ],
            "question": "Hamilton is a film.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "88": [
        {
            "example_id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are influenced by Isaac Asimov.",
                "The book the Three Body Problem has sold more than 1 million copies.",
                "The Three Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
                "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
                "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
                "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
                "AboutFuture(threebodyproblem)"
            ],
            "question": "The Three Body Problem won the Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1171,
            "story_id": 415,
            "context": [
                "All books written by Tomas have sold more than 1 million copies. ",
                "Some books that have won Hugo Awards are written by Tomas.",
                "All books about the future are inspired by Shakespeare. ",
                "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
                "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
            ],
            "context_fol": [
                "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))",
                "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))",
                "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))",
                "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) ",
                "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)"
            ],
            "question": "2001 is a book that has won a Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 139,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)",
                "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))",
                "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))"
            ],
            "question": "Douglas Adams is a writer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "89": [
        {
            "example_id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are influenced by Isaac Asimov.",
                "The book the Three Body Problem has sold more than 1 million copies.",
                "The Three Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
                "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
                "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
                "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
                "AboutFuture(threebodyproblem)"
            ],
            "question": "The Three Body Problem won the Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1171,
            "story_id": 415,
            "context": [
                "All books written by Tomas have sold more than 1 million copies. ",
                "Some books that have won Hugo Awards are written by Tomas.",
                "All books about the future are inspired by Shakespeare. ",
                "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
                "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
            ],
            "context_fol": [
                "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))",
                "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))",
                "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))",
                "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) ",
                "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)"
            ],
            "question": "2001 is a book that has won a Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 139,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)",
                "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))",
                "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))"
            ],
            "question": "Douglas Adams is a writer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "90": [
        {
            "example_id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are influenced by Isaac Asimov.",
                "The book the Three Body Problem has sold more than 1 million copies.",
                "The Three Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
                "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
                "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
                "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
                "AboutFuture(threebodyproblem)"
            ],
            "question": "The Three Body Problem won the Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1171,
            "story_id": 415,
            "context": [
                "All books written by Tomas have sold more than 1 million copies. ",
                "Some books that have won Hugo Awards are written by Tomas.",
                "All books about the future are inspired by Shakespeare. ",
                "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
                "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
            ],
            "context_fol": [
                "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))",
                "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))",
                "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))",
                "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) ",
                "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)"
            ],
            "question": "2001 is a book that has won a Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 139,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)",
                "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))",
                "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))"
            ],
            "question": "Douglas Adams is a writer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "91": [
        {
            "example_id": 545,
            "story_id": 189,
            "context": [
                "A summarization model is always faithful if it uses content from the input documents.",
                "Extractive models are a kind of summarization models.",
                "Extractive model can only use content from the input documents."
            ],
            "context_fol": [
                "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Summarization(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
            ],
            "question": "Extractive models are always faithful.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1362,
            "story_id": 470,
            "context": [
                "All OS are software.",
                "All Mac are OS.",
                "An OS is either Mac or Windows.",
                "All Windows are convenient.",
                "All software has code.",
                "If something is convenient, then it is popular.",
                "Burger is a piece of code and a Mac.",
                "PyTorch is either Windows and software, or neither Windows nor software."
            ],
            "context_fol": [
                "\u2200x (OS(x) \u2192 Software(x))",
                "\u2200x (Mac(x) \u2192 OS(x))",
                "\u2200x (Mac(x) \u2228 Windows(x))",
                "\u2200x (Windows(x) \u2192 Convenient(x))",
                "\u2200x (Software(x) \u2192 Code(x))",
                "\u2200x (Convenient(x) \u2192 Popular(x))",
                "Code(burger) \u2227 Mac(burger))",
                "(Windows(pytorch) \u2227 Software(pytorch)) \u2295 (\u00acWindows(pytorch) \u2227 \u00acSoftware(pytorch))"
            ],
            "question": "Burger is popular.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1085,
            "story_id": 397,
            "context": [
                "Either block design or event-related design. ",
                "All event-related designs are brain image acquisition.",
                "All brain image acquisition is preceded by data processing.",
                "Nothing preceded by data processing acquires data.",
                "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."
            ],
            "context_fol": [
                "\u2200x (BlockDesign(x) \u2228 Event-relatedDesign(x))",
                "\u2200x (Event-relatedDesign(x) \u2192 BrainImageAcquisition(x))",
                "\u2200x (BrainImageAcquisition(x) \u2192 PrecededByDataProcessing(x))",
                "\u2200x (PrecededByDataProcessing(x) \u2192 \u00acAcquiringData(x))",
                "(Event-relatedDesign(pictureMemory) \u2227 AcquiringData(pictureMemory)) \u2228 (\u00acEvent-relatedDesign(pictureMemory) \u2227 \u00acAcquiringData(pictureMemory))"
            ],
            "question": "Picture memory is preceded by data processing.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "92": [
        {
            "example_id": 545,
            "story_id": 189,
            "context": [
                "A summarization model is always faithful if it uses content from the input documents.",
                "Extractive models are a kind of summarization models.",
                "Extractive model can only use content from the input documents."
            ],
            "context_fol": [
                "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Summarization(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
            ],
            "question": "Extractive models are always faithful.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1362,
            "story_id": 470,
            "context": [
                "All OS are software.",
                "All Mac are OS.",
                "An OS is either Mac or Windows.",
                "All Windows are convenient.",
                "All software has code.",
                "If something is convenient, then it is popular.",
                "Burger is a piece of code and a Mac.",
                "PyTorch is either Windows and software, or neither Windows nor software."
            ],
            "context_fol": [
                "\u2200x (OS(x) \u2192 Software(x))",
                "\u2200x (Mac(x) \u2192 OS(x))",
                "\u2200x (Mac(x) \u2228 Windows(x))",
                "\u2200x (Windows(x) \u2192 Convenient(x))",
                "\u2200x (Software(x) \u2192 Code(x))",
                "\u2200x (Convenient(x) \u2192 Popular(x))",
                "Code(burger) \u2227 Mac(burger))",
                "(Windows(pytorch) \u2227 Software(pytorch)) \u2295 (\u00acWindows(pytorch) \u2227 \u00acSoftware(pytorch))"
            ],
            "question": "Burger is popular.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1085,
            "story_id": 397,
            "context": [
                "Either block design or event-related design. ",
                "All event-related designs are brain image acquisition.",
                "All brain image acquisition is preceded by data processing.",
                "Nothing preceded by data processing acquires data.",
                "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."
            ],
            "context_fol": [
                "\u2200x (BlockDesign(x) \u2228 Event-relatedDesign(x))",
                "\u2200x (Event-relatedDesign(x) \u2192 BrainImageAcquisition(x))",
                "\u2200x (BrainImageAcquisition(x) \u2192 PrecededByDataProcessing(x))",
                "\u2200x (PrecededByDataProcessing(x) \u2192 \u00acAcquiringData(x))",
                "(Event-relatedDesign(pictureMemory) \u2227 AcquiringData(pictureMemory)) \u2228 (\u00acEvent-relatedDesign(pictureMemory) \u2227 \u00acAcquiringData(pictureMemory))"
            ],
            "question": "Picture memory is preceded by data processing.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "93": [
        {
            "example_id": 987,
            "story_id": 369,
            "context": [
                "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
                "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
                "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
                "If people live with at least one roommate then they do not own at least one pet.",
                "All people who own at least one pet live with at least one roommate.",
                "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
                "\u2200x (Tech(x) \u2192 Iphone(x))",
                "\u2200x (House(x) \u2228 Apartment(x))",
                "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
                "\u2200x (Apartment(x) \u2192 Roommate(x))",
                "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
            ],
            "question": "Emma lives with at least one roommate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 863,
            "story_id": 332,
            "context": [
                "If people own at least one pet, then they do not have tidy houses.",
                "If people grew up with childhood pets, then they own at least one pet.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people live in the suburbs, then they have tidy houses.",
                "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
            ],
            "context_fol": [
                "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
                "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
                "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
                "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
                "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
            ],
            "question": "Jack lives in the suburbs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 848,
            "story_id": 329,
            "context": [
                "All young working professionals who have regular 9-5 jobs also have pets.",
                "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.",
                "All people who have pets are people who have at least one child.",
                "People who do not have at least one child are people who own a sports car.",
                "Mary either does not own a sports car or, if they do, then they do not have at least one child."
            ],
            "context_fol": [
                "\u2200x (Working(x) \u2192 Pets(x))",
                "\u2203x (Manhattan(x) \u2227 Working(x))",
                "\u2200x (Pets(x) \u2192 Child(x))",
                "\u2200x (Child(x) \u2192 \u00acCar(x))",
                "\u00ac(Car(mary) \u2295 Child(mary))"
            ],
            "question": "Mary is a person who lives in Manhattan.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "94": [
        {
            "example_id": 987,
            "story_id": 369,
            "context": [
                "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
                "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
                "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
                "If people live with at least one roommate then they do not own at least one pet.",
                "All people who own at least one pet live with at least one roommate.",
                "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
                "\u2200x (Tech(x) \u2192 Iphone(x))",
                "\u2200x (House(x) \u2228 Apartment(x))",
                "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
                "\u2200x (Apartment(x) \u2192 Roommate(x))",
                "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
            ],
            "question": "Emma lives with at least one roommate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 863,
            "story_id": 332,
            "context": [
                "If people own at least one pet, then they do not have tidy houses.",
                "If people grew up with childhood pets, then they own at least one pet.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people live in the suburbs, then they have tidy houses.",
                "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
            ],
            "context_fol": [
                "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
                "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
                "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
                "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
                "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
            ],
            "question": "Jack lives in the suburbs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 848,
            "story_id": 329,
            "context": [
                "All young working professionals who have regular 9-5 jobs also have pets.",
                "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.",
                "All people who have pets are people who have at least one child.",
                "People who do not have at least one child are people who own a sports car.",
                "Mary either does not own a sports car or, if they do, then they do not have at least one child."
            ],
            "context_fol": [
                "\u2200x (Working(x) \u2192 Pets(x))",
                "\u2203x (Manhattan(x) \u2227 Working(x))",
                "\u2200x (Pets(x) \u2192 Child(x))",
                "\u2200x (Child(x) \u2192 \u00acCar(x))",
                "\u00ac(Car(mary) \u2295 Child(mary))"
            ],
            "question": "Mary is a person who lives in Manhattan.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "95": [
        {
            "example_id": 987,
            "story_id": 369,
            "context": [
                "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
                "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
                "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
                "If people live with at least one roommate then they do not own at least one pet.",
                "All people who own at least one pet live with at least one roommate.",
                "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
                "\u2200x (Tech(x) \u2192 Iphone(x))",
                "\u2200x (House(x) \u2228 Apartment(x))",
                "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
                "\u2200x (Apartment(x) \u2192 Roommate(x))",
                "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
            ],
            "question": "Emma lives with at least one roommate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 863,
            "story_id": 332,
            "context": [
                "If people own at least one pet, then they do not have tidy houses.",
                "If people grew up with childhood pets, then they own at least one pet.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people live in the suburbs, then they have tidy houses.",
                "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
            ],
            "context_fol": [
                "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
                "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
                "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
                "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
                "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
            ],
            "question": "Jack lives in the suburbs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 848,
            "story_id": 329,
            "context": [
                "All young working professionals who have regular 9-5 jobs also have pets.",
                "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.",
                "All people who have pets are people who have at least one child.",
                "People who do not have at least one child are people who own a sports car.",
                "Mary either does not own a sports car or, if they do, then they do not have at least one child."
            ],
            "context_fol": [
                "\u2200x (Working(x) \u2192 Pets(x))",
                "\u2203x (Manhattan(x) \u2227 Working(x))",
                "\u2200x (Pets(x) \u2192 Child(x))",
                "\u2200x (Child(x) \u2192 \u00acCar(x))",
                "\u00ac(Car(mary) \u2295 Child(mary))"
            ],
            "question": "Mary is a person who lives in Manhattan.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "96": [
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 696,
            "story_id": 248,
            "context": [
                "Kangaroo is an animal.",
                "No Kangaroos live in Germany.",
                "If Jane saves enough money for the summer, she will fly to Germany.",
                "If Jane flies to Germany, she will go to the Berlin Zoo.",
                "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."
            ],
            "context_fol": [
                "\u2200x (Kangaroo(x) \u2192 Animal(x))",
                "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))",
                "EnoughMoney(jane) \u2192 FlyTo(jane, germany)",
                "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ",
                "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 Animal(y) \u2192 MaySee(y, x, berlinzoo))"
            ],
            "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "97": [
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 696,
            "story_id": 248,
            "context": [
                "Kangaroo is an animal.",
                "No Kangaroos live in Germany.",
                "If Jane saves enough money for the summer, she will fly to Germany.",
                "If Jane flies to Germany, she will go to the Berlin Zoo.",
                "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."
            ],
            "context_fol": [
                "\u2200x (Kangaroo(x) \u2192 Animal(x))",
                "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))",
                "EnoughMoney(jane) \u2192 FlyTo(jane, germany)",
                "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ",
                "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 Animal(y) \u2192 MaySee(y, x, berlinzoo))"
            ],
            "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "98": [
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 696,
            "story_id": 248,
            "context": [
                "Kangaroo is an animal.",
                "No Kangaroos live in Germany.",
                "If Jane saves enough money for the summer, she will fly to Germany.",
                "If Jane flies to Germany, she will go to the Berlin Zoo.",
                "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."
            ],
            "context_fol": [
                "\u2200x (Kangaroo(x) \u2192 Animal(x))",
                "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))",
                "EnoughMoney(jane) \u2192 FlyTo(jane, germany)",
                "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ",
                "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 Animal(y) \u2192 MaySee(y, x, berlinzoo))"
            ],
            "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "99": [
        {
            "example_id": 1335,
            "story_id": 461,
            "context": [
                "No criminal is kind. ",
                "All person who breaks the law is a criminals.",
                "People are either kind or evil.",
                "If someone is evil, then they are ugly.",
                "If someone is evil, then they are cold-blood.",
                "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
            ],
            "context_fol": [
                "\u2200x (Criminal(x) \u2192 \u00acKind(x))",
                "\u2200x (BreakLaw(x) \u2192 Criminal(x))",
                "\u2200x (Kind(x) \u2295 Evil(x))",
                "\u2200x (Evil(x) \u2192 Ugly(x))",
                "\u2200x (Evil(x) \u2192 ColdBlood(x))",
                "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)"
            ],
            "question": "Garry is ugly.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1411,
            "story_id": 482,
            "context": [
                "If someone yells, then they are not cool.",
                "If someone is angry, then they yell.",
                "If someone flies, then they are cool.",
                "Every person that knows magic can fly.",
                "All wizards know magic.",
                "Harry either yells and flies, or neither yells nor flies.",
                "Potter is a wizard and flies."
            ],
            "context_fol": [
                "\u2200x (Yell(x) \u2192 \u00acCool(x))",
                "\u2200x (Angry(x) \u2192 Yell(x))",
                "\u2200x (Fly(x) \u2192 Cool(x))",
                "\u2200x (KnowMagic(x) \u2192 Fly(x))",
                "\u2200x (Wizard(x) \u2192 KnowMagic(x))",
                "(Yell(harry) \u2227 Fly(harry)) \u2295 (\u00acYell(harry) \u2227 \u00acFly(harry))",
                "Wizard(potter) \u2227 Fly(potter)"
            ],
            "question": "Harry is cool.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1347,
            "story_id": 465,
            "context": [
                "All men are human.",
                "All gentlemen are men.",
                "All lawyers are gentlemen.",
                "All women are human.",
                "No sheep are human.",
                "If Mike is not both a human and a sheep, then Mike is either a man or a human."
            ],
            "context_fol": [
                "\u2200x (Man(x) \u2192 Human(x))",
                "\u2200x (Gentleman(x) \u2192 Man(x))",
                "\u2200x (Lawyer(x) \u2192 Gentleman(x))",
                "\u2200x (Woman(x) \u2192 Human(x))",
                "\u2200x (Sheep(x) \u2192 \u00acHuman(x))",
                "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
            ],
            "question": "Mike is a woman.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "100": [
        {
            "example_id": 1335,
            "story_id": 461,
            "context": [
                "No criminal is kind. ",
                "All person who breaks the law is a criminals.",
                "People are either kind or evil.",
                "If someone is evil, then they are ugly.",
                "If someone is evil, then they are cold-blood.",
                "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
            ],
            "context_fol": [
                "\u2200x (Criminal(x) \u2192 \u00acKind(x))",
                "\u2200x (BreakLaw(x) \u2192 Criminal(x))",
                "\u2200x (Kind(x) \u2295 Evil(x))",
                "\u2200x (Evil(x) \u2192 Ugly(x))",
                "\u2200x (Evil(x) \u2192 ColdBlood(x))",
                "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)"
            ],
            "question": "Garry is ugly.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1411,
            "story_id": 482,
            "context": [
                "If someone yells, then they are not cool.",
                "If someone is angry, then they yell.",
                "If someone flies, then they are cool.",
                "Every person that knows magic can fly.",
                "All wizards know magic.",
                "Harry either yells and flies, or neither yells nor flies.",
                "Potter is a wizard and flies."
            ],
            "context_fol": [
                "\u2200x (Yell(x) \u2192 \u00acCool(x))",
                "\u2200x (Angry(x) \u2192 Yell(x))",
                "\u2200x (Fly(x) \u2192 Cool(x))",
                "\u2200x (KnowMagic(x) \u2192 Fly(x))",
                "\u2200x (Wizard(x) \u2192 KnowMagic(x))",
                "(Yell(harry) \u2227 Fly(harry)) \u2295 (\u00acYell(harry) \u2227 \u00acFly(harry))",
                "Wizard(potter) \u2227 Fly(potter)"
            ],
            "question": "Harry is cool.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1347,
            "story_id": 465,
            "context": [
                "All men are human.",
                "All gentlemen are men.",
                "All lawyers are gentlemen.",
                "All women are human.",
                "No sheep are human.",
                "If Mike is not both a human and a sheep, then Mike is either a man or a human."
            ],
            "context_fol": [
                "\u2200x (Man(x) \u2192 Human(x))",
                "\u2200x (Gentleman(x) \u2192 Man(x))",
                "\u2200x (Lawyer(x) \u2192 Gentleman(x))",
                "\u2200x (Woman(x) \u2192 Human(x))",
                "\u2200x (Sheep(x) \u2192 \u00acHuman(x))",
                "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
            ],
            "question": "Mike is a woman.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "101": [
        {
            "example_id": 1335,
            "story_id": 461,
            "context": [
                "No criminal is kind. ",
                "All person who breaks the law is a criminals.",
                "People are either kind or evil.",
                "If someone is evil, then they are ugly.",
                "If someone is evil, then they are cold-blood.",
                "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
            ],
            "context_fol": [
                "\u2200x (Criminal(x) \u2192 \u00acKind(x))",
                "\u2200x (BreakLaw(x) \u2192 Criminal(x))",
                "\u2200x (Kind(x) \u2295 Evil(x))",
                "\u2200x (Evil(x) \u2192 Ugly(x))",
                "\u2200x (Evil(x) \u2192 ColdBlood(x))",
                "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)"
            ],
            "question": "Garry is ugly.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1411,
            "story_id": 482,
            "context": [
                "If someone yells, then they are not cool.",
                "If someone is angry, then they yell.",
                "If someone flies, then they are cool.",
                "Every person that knows magic can fly.",
                "All wizards know magic.",
                "Harry either yells and flies, or neither yells nor flies.",
                "Potter is a wizard and flies."
            ],
            "context_fol": [
                "\u2200x (Yell(x) \u2192 \u00acCool(x))",
                "\u2200x (Angry(x) \u2192 Yell(x))",
                "\u2200x (Fly(x) \u2192 Cool(x))",
                "\u2200x (KnowMagic(x) \u2192 Fly(x))",
                "\u2200x (Wizard(x) \u2192 KnowMagic(x))",
                "(Yell(harry) \u2227 Fly(harry)) \u2295 (\u00acYell(harry) \u2227 \u00acFly(harry))",
                "Wizard(potter) \u2227 Fly(potter)"
            ],
            "question": "Harry is cool.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1347,
            "story_id": 465,
            "context": [
                "All men are human.",
                "All gentlemen are men.",
                "All lawyers are gentlemen.",
                "All women are human.",
                "No sheep are human.",
                "If Mike is not both a human and a sheep, then Mike is either a man or a human."
            ],
            "context_fol": [
                "\u2200x (Man(x) \u2192 Human(x))",
                "\u2200x (Gentleman(x) \u2192 Man(x))",
                "\u2200x (Lawyer(x) \u2192 Gentleman(x))",
                "\u2200x (Woman(x) \u2192 Human(x))",
                "\u2200x (Sheep(x) \u2192 \u00acHuman(x))",
                "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
            ],
            "question": "Mike is a woman.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "102": [
        {
            "example_id": 957,
            "story_id": 359,
            "context": [
                "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
                "All young children below the age of ten eat cereal and milk every day for breakfast.",
                "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
                "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
                "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
                "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
            ],
            "context_fol": [
                "\u2200x (Cereal(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2295 Committments(x))",
                "\u2200x (Committments(x) \u2192 Hardworking(x))",
                "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))",
                "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))"
            ],
            "question": "John is good at staying organized and motivated.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 987,
            "story_id": 369,
            "context": [
                "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
                "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
                "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
                "If people live with at least one roommate then they do not own at least one pet.",
                "All people who own at least one pet live with at least one roommate.",
                "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
                "\u2200x (Tech(x) \u2192 Iphone(x))",
                "\u2200x (House(x) \u2228 Apartment(x))",
                "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
                "\u2200x (Apartment(x) \u2192 Roommate(x))",
                "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
            ],
            "question": "Emma lives with at least one roommate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 868,
            "story_id": 333,
            "context": [
                "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
                "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
                "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
                "All young teenage girls who attend college are big fans of pop bands and singers.",
                "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
            ],
            "context_fol": [
                "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
                "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
                "\u2200x (Fans(x) \u2192 Decor(x))",
                "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
                "Ambitious(sam) \u2192 Fans(sam)"
            ],
            "question": "Sam is a young teenage girl who attends college.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "103": [
        {
            "example_id": 957,
            "story_id": 359,
            "context": [
                "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
                "All young children below the age of ten eat cereal and milk every day for breakfast.",
                "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
                "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
                "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
                "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
            ],
            "context_fol": [
                "\u2200x (Cereal(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2295 Committments(x))",
                "\u2200x (Committments(x) \u2192 Hardworking(x))",
                "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))",
                "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))"
            ],
            "question": "John is good at staying organized and motivated.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 987,
            "story_id": 369,
            "context": [
                "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
                "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
                "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
                "If people live with at least one roommate then they do not own at least one pet.",
                "All people who own at least one pet live with at least one roommate.",
                "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
                "\u2200x (Tech(x) \u2192 Iphone(x))",
                "\u2200x (House(x) \u2228 Apartment(x))",
                "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
                "\u2200x (Apartment(x) \u2192 Roommate(x))",
                "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
            ],
            "question": "Emma lives with at least one roommate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 868,
            "story_id": 333,
            "context": [
                "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
                "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
                "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
                "All young teenage girls who attend college are big fans of pop bands and singers.",
                "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
            ],
            "context_fol": [
                "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
                "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
                "\u2200x (Fans(x) \u2192 Decor(x))",
                "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
                "Ambitious(sam) \u2192 Fans(sam)"
            ],
            "question": "Sam is a young teenage girl who attends college.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "104": [
        {
            "example_id": 957,
            "story_id": 359,
            "context": [
                "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
                "All young children below the age of ten eat cereal and milk every day for breakfast.",
                "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
                "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
                "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
                "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
            ],
            "context_fol": [
                "\u2200x (Cereal(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2295 Committments(x))",
                "\u2200x (Committments(x) \u2192 Hardworking(x))",
                "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))",
                "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))"
            ],
            "question": "John is good at staying organized and motivated.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 987,
            "story_id": 369,
            "context": [
                "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
                "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
                "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
                "If people live with at least one roommate then they do not own at least one pet.",
                "All people who own at least one pet live with at least one roommate.",
                "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
                "\u2200x (Tech(x) \u2192 Iphone(x))",
                "\u2200x (House(x) \u2228 Apartment(x))",
                "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
                "\u2200x (Apartment(x) \u2192 Roommate(x))",
                "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
            ],
            "question": "Emma lives with at least one roommate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 868,
            "story_id": 333,
            "context": [
                "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
                "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
                "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
                "All young teenage girls who attend college are big fans of pop bands and singers.",
                "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
            ],
            "context_fol": [
                "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
                "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
                "\u2200x (Fans(x) \u2192 Decor(x))",
                "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
                "Ambitious(sam) \u2192 Fans(sam)"
            ],
            "question": "Sam is a young teenage girl who attends college.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "105": [
        {
            "example_id": 561,
            "story_id": 196,
            "context": [
                "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
                "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
                "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
                "ETS also develops K-12 statewide assessments used for accountability testing in many states."
            ],
            "context_fol": [
                "\u2203x (Develops(ets, x) \u2227 StandardizedTest(x) \u2227 In(x, unitedstates) \u2227 For(x, k-12andhighereducation))",
                "\u2203x (Administers(ets, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTests(x)))",
                "\u2203x (Develops(ets, x) \u2227 AssociatedWith(x, entrytouseducationinstitutions))",
                "\u2203x (Develops(ets, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilitytesting))"
            ],
            "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 558,
            "story_id": 195,
            "context": [
                "The SAT test is wholly owned and developed by the College Board.",
                "The SAT test is intended to assess student's readiness for college.",
                "The SAT was originally designed not to be aligned with high school curricula. ",
                "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. "
            ],
            "context_fol": [
                "Own(sat, collegeBoard) \u2227 \u00acOwn(sat, others)",
                "Test(sat, readiness)",
                "\u2200x (Year(x) \u2227 Before2016(x) \u2192 \u00acAlignHighSchool(x)) ",
                "\u2203x (Year(x) \u2227 Since2016(x) \u2227 AlignHighSchool(x)) "
            ],
            "question": "Since 2016 the SAT has been better aligned with high school curricula.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 781,
            "story_id": 312,
            "context": [
                "To get a student visa, you must be full-time enrolled in an academic program.",
                "Those who are full-time enrolled in an academic program can not work full-time.",
                "Everyone who wants to study abroad needs to have a student visa.",
                "All PhD graduates can work full time. ",
                "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
            ],
            "context_fol": [
                "\u2200x (StudentVisa(x) \u2192 FullTimeAcademic(x))",
                "\u2200x (FullTimeAcademic(x) \u2192 \u00acWorkFullTime(x))",
                "\u2200x (StudyAbroad(x) \u2192 StudentVisa(x))",
                "\u2200x (PhdGraduate(x) \u2192 WorkFullTime(x))",
                "\u00acStudyAbroad(tom) \u2192 FullTimeAcademic(tom)"
            ],
            "question": "Tom is a PhD graduate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "106": [
        {
            "example_id": 561,
            "story_id": 196,
            "context": [
                "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
                "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
                "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
                "ETS also develops K-12 statewide assessments used for accountability testing in many states."
            ],
            "context_fol": [
                "\u2203x (Develops(ets, x) \u2227 StandardizedTest(x) \u2227 In(x, unitedstates) \u2227 For(x, k-12andhighereducation))",
                "\u2203x (Administers(ets, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTests(x)))",
                "\u2203x (Develops(ets, x) \u2227 AssociatedWith(x, entrytouseducationinstitutions))",
                "\u2203x (Develops(ets, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilitytesting))"
            ],
            "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 558,
            "story_id": 195,
            "context": [
                "The SAT test is wholly owned and developed by the College Board.",
                "The SAT test is intended to assess student's readiness for college.",
                "The SAT was originally designed not to be aligned with high school curricula. ",
                "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. "
            ],
            "context_fol": [
                "Own(sat, collegeBoard) \u2227 \u00acOwn(sat, others)",
                "Test(sat, readiness)",
                "\u2200x (Year(x) \u2227 Before2016(x) \u2192 \u00acAlignHighSchool(x)) ",
                "\u2203x (Year(x) \u2227 Since2016(x) \u2227 AlignHighSchool(x)) "
            ],
            "question": "Since 2016 the SAT has been better aligned with high school curricula.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 781,
            "story_id": 312,
            "context": [
                "To get a student visa, you must be full-time enrolled in an academic program.",
                "Those who are full-time enrolled in an academic program can not work full-time.",
                "Everyone who wants to study abroad needs to have a student visa.",
                "All PhD graduates can work full time. ",
                "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
            ],
            "context_fol": [
                "\u2200x (StudentVisa(x) \u2192 FullTimeAcademic(x))",
                "\u2200x (FullTimeAcademic(x) \u2192 \u00acWorkFullTime(x))",
                "\u2200x (StudyAbroad(x) \u2192 StudentVisa(x))",
                "\u2200x (PhdGraduate(x) \u2192 WorkFullTime(x))",
                "\u00acStudyAbroad(tom) \u2192 FullTimeAcademic(tom)"
            ],
            "question": "Tom is a PhD graduate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "107": [
        {
            "example_id": 561,
            "story_id": 196,
            "context": [
                "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
                "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
                "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
                "ETS also develops K-12 statewide assessments used for accountability testing in many states."
            ],
            "context_fol": [
                "\u2203x (Develops(ets, x) \u2227 StandardizedTest(x) \u2227 In(x, unitedstates) \u2227 For(x, k-12andhighereducation))",
                "\u2203x (Administers(ets, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTests(x)))",
                "\u2203x (Develops(ets, x) \u2227 AssociatedWith(x, entrytouseducationinstitutions))",
                "\u2203x (Develops(ets, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilitytesting))"
            ],
            "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 558,
            "story_id": 195,
            "context": [
                "The SAT test is wholly owned and developed by the College Board.",
                "The SAT test is intended to assess student's readiness for college.",
                "The SAT was originally designed not to be aligned with high school curricula. ",
                "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. "
            ],
            "context_fol": [
                "Own(sat, collegeBoard) \u2227 \u00acOwn(sat, others)",
                "Test(sat, readiness)",
                "\u2200x (Year(x) \u2227 Before2016(x) \u2192 \u00acAlignHighSchool(x)) ",
                "\u2203x (Year(x) \u2227 Since2016(x) \u2227 AlignHighSchool(x)) "
            ],
            "question": "Since 2016 the SAT has been better aligned with high school curricula.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 781,
            "story_id": 312,
            "context": [
                "To get a student visa, you must be full-time enrolled in an academic program.",
                "Those who are full-time enrolled in an academic program can not work full-time.",
                "Everyone who wants to study abroad needs to have a student visa.",
                "All PhD graduates can work full time. ",
                "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
            ],
            "context_fol": [
                "\u2200x (StudentVisa(x) \u2192 FullTimeAcademic(x))",
                "\u2200x (FullTimeAcademic(x) \u2192 \u00acWorkFullTime(x))",
                "\u2200x (StudyAbroad(x) \u2192 StudentVisa(x))",
                "\u2200x (PhdGraduate(x) \u2192 WorkFullTime(x))",
                "\u00acStudyAbroad(tom) \u2192 FullTimeAcademic(tom)"
            ],
            "question": "Tom is a PhD graduate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "108": [
        {
            "example_id": 978,
            "story_id": 366,
            "context": [
                "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
                "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
                "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
            ],
            "context_fol": [
                "\u2200x (Kombucha(x) \u2228 CocaCola(x))",
                "\u2200x (CocaCola(x) \u2192 BusyParents(x))",
                "\u2200x (CocaCola(x) \u2192 Dentist(x))",
                "\u2200x (BusyParents(x) \u2192 Erratic(x))",
                "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))",
                "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))"
            ],
            "question": "Franny has to visit the dentist frequently.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 957,
            "story_id": 359,
            "context": [
                "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
                "All young children below the age of ten eat cereal and milk every day for breakfast.",
                "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
                "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
                "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
                "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
            ],
            "context_fol": [
                "\u2200x (Cereal(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2295 Committments(x))",
                "\u2200x (Committments(x) \u2192 Hardworking(x))",
                "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))",
                "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))"
            ],
            "question": "John is good at staying organized and motivated.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 863,
            "story_id": 332,
            "context": [
                "If people own at least one pet, then they do not have tidy houses.",
                "If people grew up with childhood pets, then they own at least one pet.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people live in the suburbs, then they have tidy houses.",
                "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
            ],
            "context_fol": [
                "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
                "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
                "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
                "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
                "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
            ],
            "question": "Jack lives in the suburbs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "109": [
        {
            "example_id": 978,
            "story_id": 366,
            "context": [
                "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
                "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
                "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
            ],
            "context_fol": [
                "\u2200x (Kombucha(x) \u2228 CocaCola(x))",
                "\u2200x (CocaCola(x) \u2192 BusyParents(x))",
                "\u2200x (CocaCola(x) \u2192 Dentist(x))",
                "\u2200x (BusyParents(x) \u2192 Erratic(x))",
                "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))",
                "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))"
            ],
            "question": "Franny has to visit the dentist frequently.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 957,
            "story_id": 359,
            "context": [
                "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
                "All young children below the age of ten eat cereal and milk every day for breakfast.",
                "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
                "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
                "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
                "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
            ],
            "context_fol": [
                "\u2200x (Cereal(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2295 Committments(x))",
                "\u2200x (Committments(x) \u2192 Hardworking(x))",
                "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))",
                "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))"
            ],
            "question": "John is good at staying organized and motivated.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 863,
            "story_id": 332,
            "context": [
                "If people own at least one pet, then they do not have tidy houses.",
                "If people grew up with childhood pets, then they own at least one pet.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people live in the suburbs, then they have tidy houses.",
                "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
            ],
            "context_fol": [
                "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
                "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
                "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
                "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
                "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
            ],
            "question": "Jack lives in the suburbs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "110": [
        {
            "example_id": 978,
            "story_id": 366,
            "context": [
                "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
                "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
                "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
            ],
            "context_fol": [
                "\u2200x (Kombucha(x) \u2228 CocaCola(x))",
                "\u2200x (CocaCola(x) \u2192 BusyParents(x))",
                "\u2200x (CocaCola(x) \u2192 Dentist(x))",
                "\u2200x (BusyParents(x) \u2192 Erratic(x))",
                "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))",
                "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))"
            ],
            "question": "Franny has to visit the dentist frequently.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 957,
            "story_id": 359,
            "context": [
                "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
                "All young children below the age of ten eat cereal and milk every day for breakfast.",
                "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
                "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
                "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
                "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
            ],
            "context_fol": [
                "\u2200x (Cereal(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))",
                "\u2200x (YoungChildren(x) \u2295 Committments(x))",
                "\u2200x (Committments(x) \u2192 Hardworking(x))",
                "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))",
                "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))"
            ],
            "question": "John is good at staying organized and motivated.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 863,
            "story_id": 332,
            "context": [
                "If people own at least one pet, then they do not have tidy houses.",
                "If people grew up with childhood pets, then they own at least one pet.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people live in the suburbs, then they have tidy houses.",
                "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
            ],
            "context_fol": [
                "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
                "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
                "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
                "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
                "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
            ],
            "question": "Jack lives in the suburbs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "111": [
        {
            "example_id": 736,
            "story_id": 287,
            "context": [
                "All trees are plants. ",
                "Some living things are trees."
            ],
            "context_fol": [
                "\u2200x (Tree(x) \u2192 Plant(x))",
                "\u2203x (Living(x) \u2227 Tree(x))"
            ],
            "question": "Some living things are plants.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 787,
            "story_id": 314,
            "context": [
                "No animals are plants. ",
                "All humans are animals.",
                "All pupils are human.",
                "All flowers are plants.",
                "If Jack is a human or a flower, then Jack is a human and a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)"
            ],
            "question": "Jack is a pupil.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 41,
            "story_id": 15,
            "context": [
                "Elephantopus is a genus of perennial plants in the daisy family.",
                "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.",
                "Several species of Elephantopus are native to the southeastern United States.",
                "Elephantopus scaber is a traditional medicine."
            ],
            "context_fol": [
                "\u2200x (Elephantopus(x) \u2192 Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily))",
                "\u2200x (Elephantopus(x) \u2192 WidespreadOver(x, africa) \u2227 WidespreadOver(x, southernasia) \u2227 WidespreadOver(x, australia) \u2227 WidespreadOver(x, americas))",
                "\u2203x (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates))",
                "\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))"
            ],
            "question": "Elephantopus is widespread over much of Australia and Southern Asia.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "112": [
        {
            "example_id": 598,
            "story_id": 208,
            "context": [
                "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
                "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
                "NY, PA, OH, MI are states in the US.",
                "ON is a state of Canada.",
                "There is a major settlement of Lake Huron in ON. ",
                "All states are in their country.",
                "The US is in North America.",
                "The Great Lakes began to form at the end of the Last Glacial Period."
            ],
            "context_fol": [
                "\u2200x (GreatLake(x) \u2192 Superior(x) \u2228 Michigan(x) \u2228 Huron(x) \u2228 Erie(x) \u2228 Ontario(x))",
                "\u2203x \u2200y (Erie(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, ny) \u2228 In(x, pa) \u2228 In(x, oh) \u2228 In(x, mi))",
                "State(ny, us) \u2227 State(pa, us) \u2227 State(oh, us) \u2227 State(mi, us)",
                "State(on, canada)",
                "\u2203x \u2200y (Huron(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, on))",
                "\u2200x \u2200y (State(x, y) \u2192 In(x, y))",
                "In(us, northamerica)",
                "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastglacialperiod))"
            ],
            "question": "Lake Erie has a major settlement.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 111,
            "story_id": 38,
            "context": [
                "Metropolitan Museum of Art is a museum in NYC.",
                "Whitney Museum of American Art is a museum in NYC.",
                "Museum of Modern Art (MoMA) is a museum if NYC. ",
                "Metropolitan Museum of Art includes Bytantine and Islamic Art. ",
                "Whitney Museum of American Art includes American art."
            ],
            "context_fol": [
                "Museum(metropolitanMuseumofArt) \u2227 InNYC(metropolitanMuseumofArt)",
                "Museum(whitneyMuseumofAmericanArt) \u2227 InNYC(whitneyMuseumofAmericanArt)",
                "Museum(museumofModernArt) \u2227 InNYC(museumofModernArt)",
                "Include(metropolitanMuseumofArt, byzantineArt) \u2227 Include(metropolitanMuseumofArt, islamicArt)",
                "Include(whitneyMuseumofAmericanArt, americanArt)"
            ],
            "question": "A museum in NYC includes Byzantine and Islamic Art.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 555,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "Born(rosa, santiago)",
                "Capital(santiago, chile) \u2227 LargestCity(santiago, chile)",
                "Daughter(rosa, jose) \u2227 BuildingContractor(jose) \u2227 \u00acChilean(jose)",
                "Wife(jose, carmen) \u2227 Chilean(carmen)",
                "\u2200x \u2203y (BuildingContractor(x) \u2227 ConstructionSite(y) \u2192 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "113": [
        {
            "example_id": 598,
            "story_id": 208,
            "context": [
                "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
                "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
                "NY, PA, OH, MI are states in the US.",
                "ON is a state of Canada.",
                "There is a major settlement of Lake Huron in ON. ",
                "All states are in their country.",
                "The US is in North America.",
                "The Great Lakes began to form at the end of the Last Glacial Period."
            ],
            "context_fol": [
                "\u2200x (GreatLake(x) \u2192 Superior(x) \u2228 Michigan(x) \u2228 Huron(x) \u2228 Erie(x) \u2228 Ontario(x))",
                "\u2203x \u2200y (Erie(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, ny) \u2228 In(x, pa) \u2228 In(x, oh) \u2228 In(x, mi))",
                "State(ny, us) \u2227 State(pa, us) \u2227 State(oh, us) \u2227 State(mi, us)",
                "State(on, canada)",
                "\u2203x \u2200y (Huron(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, on))",
                "\u2200x \u2200y (State(x, y) \u2192 In(x, y))",
                "In(us, northamerica)",
                "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastglacialperiod))"
            ],
            "question": "Lake Erie has a major settlement.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 111,
            "story_id": 38,
            "context": [
                "Metropolitan Museum of Art is a museum in NYC.",
                "Whitney Museum of American Art is a museum in NYC.",
                "Museum of Modern Art (MoMA) is a museum if NYC. ",
                "Metropolitan Museum of Art includes Bytantine and Islamic Art. ",
                "Whitney Museum of American Art includes American art."
            ],
            "context_fol": [
                "Museum(metropolitanMuseumofArt) \u2227 InNYC(metropolitanMuseumofArt)",
                "Museum(whitneyMuseumofAmericanArt) \u2227 InNYC(whitneyMuseumofAmericanArt)",
                "Museum(museumofModernArt) \u2227 InNYC(museumofModernArt)",
                "Include(metropolitanMuseumofArt, byzantineArt) \u2227 Include(metropolitanMuseumofArt, islamicArt)",
                "Include(whitneyMuseumofAmericanArt, americanArt)"
            ],
            "question": "A museum in NYC includes Byzantine and Islamic Art.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 555,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "Born(rosa, santiago)",
                "Capital(santiago, chile) \u2227 LargestCity(santiago, chile)",
                "Daughter(rosa, jose) \u2227 BuildingContractor(jose) \u2227 \u00acChilean(jose)",
                "Wife(jose, carmen) \u2227 Chilean(carmen)",
                "\u2200x \u2203y (BuildingContractor(x) \u2227 ConstructionSite(y) \u2192 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "114": [
        {
            "example_id": 598,
            "story_id": 208,
            "context": [
                "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
                "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
                "NY, PA, OH, MI are states in the US.",
                "ON is a state of Canada.",
                "There is a major settlement of Lake Huron in ON. ",
                "All states are in their country.",
                "The US is in North America.",
                "The Great Lakes began to form at the end of the Last Glacial Period."
            ],
            "context_fol": [
                "\u2200x (GreatLake(x) \u2192 Superior(x) \u2228 Michigan(x) \u2228 Huron(x) \u2228 Erie(x) \u2228 Ontario(x))",
                "\u2203x \u2200y (Erie(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, ny) \u2228 In(x, pa) \u2228 In(x, oh) \u2228 In(x, mi))",
                "State(ny, us) \u2227 State(pa, us) \u2227 State(oh, us) \u2227 State(mi, us)",
                "State(on, canada)",
                "\u2203x \u2200y (Huron(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, on))",
                "\u2200x \u2200y (State(x, y) \u2192 In(x, y))",
                "In(us, northamerica)",
                "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastglacialperiod))"
            ],
            "question": "Lake Erie has a major settlement.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 111,
            "story_id": 38,
            "context": [
                "Metropolitan Museum of Art is a museum in NYC.",
                "Whitney Museum of American Art is a museum in NYC.",
                "Museum of Modern Art (MoMA) is a museum if NYC. ",
                "Metropolitan Museum of Art includes Bytantine and Islamic Art. ",
                "Whitney Museum of American Art includes American art."
            ],
            "context_fol": [
                "Museum(metropolitanMuseumofArt) \u2227 InNYC(metropolitanMuseumofArt)",
                "Museum(whitneyMuseumofAmericanArt) \u2227 InNYC(whitneyMuseumofAmericanArt)",
                "Museum(museumofModernArt) \u2227 InNYC(museumofModernArt)",
                "Include(metropolitanMuseumofArt, byzantineArt) \u2227 Include(metropolitanMuseumofArt, islamicArt)",
                "Include(whitneyMuseumofAmericanArt, americanArt)"
            ],
            "question": "A museum in NYC includes Byzantine and Islamic Art.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 555,
            "story_id": 194,
            "context": [
                "Rosa was born in Santiago. ",
                "Santiago is the capital and largest city of Chile.",
                "Rosa is the daughter of a Catalan building contractor, Jose.",
                "Jose has a Chilean wife, Carmen.",
                "A building contractor is responsible for the day-to-day oversight of a construction site. "
            ],
            "context_fol": [
                "Born(rosa, santiago)",
                "Capital(santiago, chile) \u2227 LargestCity(santiago, chile)",
                "Daughter(rosa, jose) \u2227 BuildingContractor(jose) \u2227 \u00acChilean(jose)",
                "Wife(jose, carmen) \u2227 Chilean(carmen)",
                "\u2200x \u2203y (BuildingContractor(x) \u2227 ConstructionSite(y) \u2192 Oversee(x, y))"
            ],
            "question": "Rosa was born in the largest city of Chile.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "115": [
        {
            "example_id": 1294,
            "story_id": 448,
            "context": [
                "Everyone that uses a football can throw a football.",
                "If someone plays football, then they use a football.",
                "Either someone is a football player or a basketball player.",
                "Every basketball player is tall.",
                "Everyone that can throw a football can throw a football with a spiral.",
                "If someone is tall, then they are in shape.",
                "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
            ],
            "context_fol": [
                "\u2200x (UseFootball(x) \u2192 ThrowFootball(x))",
                "\u2200x (PlayFootball(x) \u2192 UseFootball(x))",
                "\u2200x (BasketballPlayer(x) \u2228 PlayFootball(x))",
                "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
                "\u2200x (ThrowFootball(x) \u2192 ThrowFootballSpiral(x))",
                "\u2200x (Tall(x) \u2192 InShape(x))",
                "\u00acTall(jack) \u2227 \u00acBasketballPlayer(jack) \u2192 \u00acTall(jack) \u2227 \u00acThrowFootball(jack)"
            ],
            "question": "Jack plays football.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 839,
            "story_id": 326,
            "context": [
                "Some defenders are centerback.",
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "Stephen Curry is an NBA player."
            ],
            "context_fol": [
                "\u2203x (Defender(x) \u2227 Centerback(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "NBAPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 836,
            "story_id": 325,
            "context": [
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All centerbacks are defenders.",
                "All NBA players are professional basketball players.",
                "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
            ],
            "context_fol": [
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (CenterBack(x) \u2192 Defender(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
            ],
            "question": "Stephen Curry is a professional basketball player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "116": [
        {
            "example_id": 1294,
            "story_id": 448,
            "context": [
                "Everyone that uses a football can throw a football.",
                "If someone plays football, then they use a football.",
                "Either someone is a football player or a basketball player.",
                "Every basketball player is tall.",
                "Everyone that can throw a football can throw a football with a spiral.",
                "If someone is tall, then they are in shape.",
                "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
            ],
            "context_fol": [
                "\u2200x (UseFootball(x) \u2192 ThrowFootball(x))",
                "\u2200x (PlayFootball(x) \u2192 UseFootball(x))",
                "\u2200x (BasketballPlayer(x) \u2228 PlayFootball(x))",
                "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
                "\u2200x (ThrowFootball(x) \u2192 ThrowFootballSpiral(x))",
                "\u2200x (Tall(x) \u2192 InShape(x))",
                "\u00acTall(jack) \u2227 \u00acBasketballPlayer(jack) \u2192 \u00acTall(jack) \u2227 \u00acThrowFootball(jack)"
            ],
            "question": "Jack plays football.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 839,
            "story_id": 326,
            "context": [
                "Some defenders are centerback.",
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "Stephen Curry is an NBA player."
            ],
            "context_fol": [
                "\u2203x (Defender(x) \u2227 Centerback(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "NBAPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 836,
            "story_id": 325,
            "context": [
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All centerbacks are defenders.",
                "All NBA players are professional basketball players.",
                "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
            ],
            "context_fol": [
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (CenterBack(x) \u2192 Defender(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
            ],
            "question": "Stephen Curry is a professional basketball player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "117": [
        {
            "example_id": 1294,
            "story_id": 448,
            "context": [
                "Everyone that uses a football can throw a football.",
                "If someone plays football, then they use a football.",
                "Either someone is a football player or a basketball player.",
                "Every basketball player is tall.",
                "Everyone that can throw a football can throw a football with a spiral.",
                "If someone is tall, then they are in shape.",
                "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
            ],
            "context_fol": [
                "\u2200x (UseFootball(x) \u2192 ThrowFootball(x))",
                "\u2200x (PlayFootball(x) \u2192 UseFootball(x))",
                "\u2200x (BasketballPlayer(x) \u2228 PlayFootball(x))",
                "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
                "\u2200x (ThrowFootball(x) \u2192 ThrowFootballSpiral(x))",
                "\u2200x (Tall(x) \u2192 InShape(x))",
                "\u00acTall(jack) \u2227 \u00acBasketballPlayer(jack) \u2192 \u00acTall(jack) \u2227 \u00acThrowFootball(jack)"
            ],
            "question": "Jack plays football.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 839,
            "story_id": 326,
            "context": [
                "Some defenders are centerback.",
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "Stephen Curry is an NBA player."
            ],
            "context_fol": [
                "\u2203x (Defender(x) \u2227 Centerback(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "NBAPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 836,
            "story_id": 325,
            "context": [
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All centerbacks are defenders.",
                "All NBA players are professional basketball players.",
                "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
            ],
            "context_fol": [
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (CenterBack(x) \u2192 Defender(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
            ],
            "question": "Stephen Curry is a professional basketball player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "118": [
        {
            "example_id": 377,
            "story_id": 127,
            "context": [
                "New York City is Located in the United States of America.",
                "United States of America is part of North America.",
                "North America is in the western hemisphere of the earth.",
                "New York City is a highly developed city.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "Locate(nyc, usa)",
                "Locate(usa, northAmerica)",
                "Locate(northAmerica, westHemisphere)",
                "HighlyDeveloped(nyc)",
                "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
            ],
            "question": "A highly developed city is located in the western hemisphere of the earth.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 334,
            "story_id": 110,
            "context": [
                "St Johnstone is a Scottish team.",
                "St Johnstone is part of the Scottish Premiership.",
                "If a team is part of the league, it has joined the league.",
                "St Johnstone and Minsk are different teams.",
                "For two different teams, either one team wins or the other team wins.",
                "Minsk won against St Johnstone."
            ],
            "context_fol": [
                "Scottish(johnstone)",
                "PartOf(johnstone, scottishpremiership)",
                "\u2200x \u2200y (PartOf(x, y) \u2192 Joined(x, y))",
                "Different(misnk, johnstone) \u2227 Different(johnstone, minsk)",
                "\u2200x \u2200y (Different(x, y) \u2192 WonGame(x, y) \u2295 WonGame(y, x))",
                "WonGame(minsk, johnstone)"
            ],
            "question": "At least one Scottish team has joined the Scottish Premiership.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 14,
            "story_id": 6,
            "context": [
                "Boves is a railway station located in France. ",
                "The preceding station of Boves is Longueau.",
                "The preceding station of Dommartin is Boves.",
                "France is a European country.",
                "Dommartin is situated on the Paris\u2013Lille railway. ",
                "Any two contiguous stations are on the same railway.",
                "Boves is served by regional TER Hauts-de-France trains.",
                "If A is located in B and B is located in C, then A is located in C.",
                "If A precedes B and B preceds C, than A preceds C."
            ],
            "context_fol": [
                "RailwayStation(boves) \u2227 Locate(boves, france)",
                "Precede(boves, longueau)",
                "Precede(dommartin, boves)",
                "Locate(france, europe)",
                "Situate(dommartin, pairsLille)",
                "\u2200x \u2200y \u2200z ((Situate(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x))) \u2192 Situate(y, z))",
                "Serve(hautsDeFrance, boves)",
                "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))",
                "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))"
            ],
            "question": "Longueau is situated on the Paris\u2013Lille railway.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "119": [
        {
            "example_id": 377,
            "story_id": 127,
            "context": [
                "New York City is Located in the United States of America.",
                "United States of America is part of North America.",
                "North America is in the western hemisphere of the earth.",
                "New York City is a highly developed city.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "Locate(nyc, usa)",
                "Locate(usa, northAmerica)",
                "Locate(northAmerica, westHemisphere)",
                "HighlyDeveloped(nyc)",
                "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
            ],
            "question": "A highly developed city is located in the western hemisphere of the earth.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 334,
            "story_id": 110,
            "context": [
                "St Johnstone is a Scottish team.",
                "St Johnstone is part of the Scottish Premiership.",
                "If a team is part of the league, it has joined the league.",
                "St Johnstone and Minsk are different teams.",
                "For two different teams, either one team wins or the other team wins.",
                "Minsk won against St Johnstone."
            ],
            "context_fol": [
                "Scottish(johnstone)",
                "PartOf(johnstone, scottishpremiership)",
                "\u2200x \u2200y (PartOf(x, y) \u2192 Joined(x, y))",
                "Different(misnk, johnstone) \u2227 Different(johnstone, minsk)",
                "\u2200x \u2200y (Different(x, y) \u2192 WonGame(x, y) \u2295 WonGame(y, x))",
                "WonGame(minsk, johnstone)"
            ],
            "question": "At least one Scottish team has joined the Scottish Premiership.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 14,
            "story_id": 6,
            "context": [
                "Boves is a railway station located in France. ",
                "The preceding station of Boves is Longueau.",
                "The preceding station of Dommartin is Boves.",
                "France is a European country.",
                "Dommartin is situated on the Paris\u2013Lille railway. ",
                "Any two contiguous stations are on the same railway.",
                "Boves is served by regional TER Hauts-de-France trains.",
                "If A is located in B and B is located in C, then A is located in C.",
                "If A precedes B and B preceds C, than A preceds C."
            ],
            "context_fol": [
                "RailwayStation(boves) \u2227 Locate(boves, france)",
                "Precede(boves, longueau)",
                "Precede(dommartin, boves)",
                "Locate(france, europe)",
                "Situate(dommartin, pairsLille)",
                "\u2200x \u2200y \u2200z ((Situate(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x))) \u2192 Situate(y, z))",
                "Serve(hautsDeFrance, boves)",
                "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))",
                "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))"
            ],
            "question": "Longueau is situated on the Paris\u2013Lille railway.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "120": [
        {
            "example_id": 377,
            "story_id": 127,
            "context": [
                "New York City is Located in the United States of America.",
                "United States of America is part of North America.",
                "North America is in the western hemisphere of the earth.",
                "New York City is a highly developed city.",
                "If place A is located in place B and place B is located in place C, then place A is located in place C."
            ],
            "context_fol": [
                "Locate(nyc, usa)",
                "Locate(usa, northAmerica)",
                "Locate(northAmerica, westHemisphere)",
                "HighlyDeveloped(nyc)",
                "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
            ],
            "question": "A highly developed city is located in the western hemisphere of the earth.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 334,
            "story_id": 110,
            "context": [
                "St Johnstone is a Scottish team.",
                "St Johnstone is part of the Scottish Premiership.",
                "If a team is part of the league, it has joined the league.",
                "St Johnstone and Minsk are different teams.",
                "For two different teams, either one team wins or the other team wins.",
                "Minsk won against St Johnstone."
            ],
            "context_fol": [
                "Scottish(johnstone)",
                "PartOf(johnstone, scottishpremiership)",
                "\u2200x \u2200y (PartOf(x, y) \u2192 Joined(x, y))",
                "Different(misnk, johnstone) \u2227 Different(johnstone, minsk)",
                "\u2200x \u2200y (Different(x, y) \u2192 WonGame(x, y) \u2295 WonGame(y, x))",
                "WonGame(minsk, johnstone)"
            ],
            "question": "At least one Scottish team has joined the Scottish Premiership.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 14,
            "story_id": 6,
            "context": [
                "Boves is a railway station located in France. ",
                "The preceding station of Boves is Longueau.",
                "The preceding station of Dommartin is Boves.",
                "France is a European country.",
                "Dommartin is situated on the Paris\u2013Lille railway. ",
                "Any two contiguous stations are on the same railway.",
                "Boves is served by regional TER Hauts-de-France trains.",
                "If A is located in B and B is located in C, then A is located in C.",
                "If A precedes B and B preceds C, than A preceds C."
            ],
            "context_fol": [
                "RailwayStation(boves) \u2227 Locate(boves, france)",
                "Precede(boves, longueau)",
                "Precede(dommartin, boves)",
                "Locate(france, europe)",
                "Situate(dommartin, pairsLille)",
                "\u2200x \u2200y \u2200z ((Situate(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x))) \u2192 Situate(y, z))",
                "Serve(hautsDeFrance, boves)",
                "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))",
                "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))"
            ],
            "question": "Longueau is situated on the Paris\u2013Lille railway.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "121": [
        {
            "example_id": 1095,
            "story_id": 399,
            "context": [
                "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
                "If a person values physical touch as an especially important love language, then they are good with pets.",
                "No people that are good with pets are scared of animals.",
                "People are either scared of animals or love animals.",
                "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
            ],
            "context_fol": [
                "\u2200x (Physical(x) \u2228 Words(x))",
                "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
                "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
                "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
                "Physical(adam) \u2295 LoveAnimals(adam)"
            ],
            "question": "Adam is scared of animals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 750,
            "story_id": 301,
            "context": [
                "When something is depressing, it is sad.",
                "V is depressing. "
            ],
            "context_fol": [
                "\u2200x (Depressing(x) \u2192 Sad(x))",
                "\u2200x (V(x) \u2192 Depressing(x))"
            ],
            "question": "V is invigorating",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 915,
            "story_id": 345,
            "context": [
                "All kids love animals.",
                "All toddlers are kids.",
                "If someone loves animals, then they are not bad.",
                "All pirates are bad.",
                "If Nancy is not a pirate, then Nancy loves animals.",
                "If Nancy is not a toddler, then Nancy is bad."
            ],
            "context_fol": [
                "\u2200x (Kid(x) \u2192 LoveAnimals(x))",
                "\u2200x (Toddler(x) \u2192 Kid(x))",
                "\u2200x (LoveAnimals(x) \u2192 \u00acBad(x))",
                "\u2200x (Pirate(x) \u2192 Bad(x))",
                "\u00acPirate(nancy) \u2192 LoveAnimals(nancy)",
                "\u00acToddler(nancy) \u2192 Bad(nancy)"
            ],
            "question": "Nancy is a pirate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "122": [
        {
            "example_id": 1232,
            "story_id": 431,
            "context": [
                "No Boeing-737 plane is equipped with more than 300 seats. ",
                "All planes in Delta are of type Boeing-737. ",
                "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
                "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
                "All planes with a capacity of 100 passengers are produced before 2010. ",
                "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
                "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
            ],
            "context_fol": [
                "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))",
                "\u2200x (Delta(x) \u2192 Boeing737(x))",
                "\u2200x (Seats300(x) \u2228 Passengers100(x))",
                "\u2200x (Passengers100(x) \u2192 ShortDistance(x))",
                "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))",
                "Boeing737(jake32) \u2295 Delta(jake32) ",
                "Boeing737(t10) \u2295 Delta(t10)"
            ],
            "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 415,
            "story_id": 141,
            "context": [
                "TS Leda was a good passenger and cargo vessel.",
                "TS Leda was the first Norweigian vessel that was built with stabilizers.",
                "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.",
                " To be a good passenger and cargo vessel, ships must be quiet and good at sea.",
                "Some ships that are quiet and good at sea have powerful steam turbine engines."
            ],
            "context_fol": [
                "\u2200x (TSLeda(x) \u2192 Passenger(x) \u2227 CargoVessel(x))",
                "\u2200x (TSLeda(x) \u2192 Norweigian(x) \u2227 Stabilizers(x))",
                "\u2200x (Stabilizers(x) \u2192 OnlyOnShips(x) \u2227 SteamTurbine(x))",
                "\u2200x (Passenger(x) \u2227 CargoVessel(x) \u2192 Quiet(x) \u2227 GoodSea(x))",
                "\u2203x (Quiet(x) \u2227 GoodSea(x) \u2227 SteamTurbine(x))"
            ],
            "question": "TS Leda was quiet and good at sea.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 721,
            "story_id": 272,
            "context": [
                "There is no dog on the roof.",
                "If there is a dog on the roof something went wrong."
            ],
            "context_fol": [
                "\u00ac(\u2203x (Dog(x) \u2227 OnRoof(x)))",
                "\u2200x \u2203y ((Dog(x) \u2227 OnRoof(x)) \u2192 WentWrong(y))"
            ],
            "question": "Something went wrong.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "123": [
        {
            "example_id": 1232,
            "story_id": 431,
            "context": [
                "No Boeing-737 plane is equipped with more than 300 seats. ",
                "All planes in Delta are of type Boeing-737. ",
                "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
                "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
                "All planes with a capacity of 100 passengers are produced before 2010. ",
                "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
                "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
            ],
            "context_fol": [
                "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))",
                "\u2200x (Delta(x) \u2192 Boeing737(x))",
                "\u2200x (Seats300(x) \u2228 Passengers100(x))",
                "\u2200x (Passengers100(x) \u2192 ShortDistance(x))",
                "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))",
                "Boeing737(jake32) \u2295 Delta(jake32) ",
                "Boeing737(t10) \u2295 Delta(t10)"
            ],
            "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 415,
            "story_id": 141,
            "context": [
                "TS Leda was a good passenger and cargo vessel.",
                "TS Leda was the first Norweigian vessel that was built with stabilizers.",
                "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.",
                " To be a good passenger and cargo vessel, ships must be quiet and good at sea.",
                "Some ships that are quiet and good at sea have powerful steam turbine engines."
            ],
            "context_fol": [
                "\u2200x (TSLeda(x) \u2192 Passenger(x) \u2227 CargoVessel(x))",
                "\u2200x (TSLeda(x) \u2192 Norweigian(x) \u2227 Stabilizers(x))",
                "\u2200x (Stabilizers(x) \u2192 OnlyOnShips(x) \u2227 SteamTurbine(x))",
                "\u2200x (Passenger(x) \u2227 CargoVessel(x) \u2192 Quiet(x) \u2227 GoodSea(x))",
                "\u2203x (Quiet(x) \u2227 GoodSea(x) \u2227 SteamTurbine(x))"
            ],
            "question": "TS Leda was quiet and good at sea.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 721,
            "story_id": 272,
            "context": [
                "There is no dog on the roof.",
                "If there is a dog on the roof something went wrong."
            ],
            "context_fol": [
                "\u00ac(\u2203x (Dog(x) \u2227 OnRoof(x)))",
                "\u2200x \u2203y ((Dog(x) \u2227 OnRoof(x)) \u2192 WentWrong(y))"
            ],
            "question": "Something went wrong.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "124": [
        {
            "example_id": 1232,
            "story_id": 431,
            "context": [
                "No Boeing-737 plane is equipped with more than 300 seats. ",
                "All planes in Delta are of type Boeing-737. ",
                "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
                "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
                "All planes with a capacity of 100 passengers are produced before 2010. ",
                "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
                "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
            ],
            "context_fol": [
                "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))",
                "\u2200x (Delta(x) \u2192 Boeing737(x))",
                "\u2200x (Seats300(x) \u2228 Passengers100(x))",
                "\u2200x (Passengers100(x) \u2192 ShortDistance(x))",
                "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))",
                "Boeing737(jake32) \u2295 Delta(jake32) ",
                "Boeing737(t10) \u2295 Delta(t10)"
            ],
            "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 415,
            "story_id": 141,
            "context": [
                "TS Leda was a good passenger and cargo vessel.",
                "TS Leda was the first Norweigian vessel that was built with stabilizers.",
                "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.",
                " To be a good passenger and cargo vessel, ships must be quiet and good at sea.",
                "Some ships that are quiet and good at sea have powerful steam turbine engines."
            ],
            "context_fol": [
                "\u2200x (TSLeda(x) \u2192 Passenger(x) \u2227 CargoVessel(x))",
                "\u2200x (TSLeda(x) \u2192 Norweigian(x) \u2227 Stabilizers(x))",
                "\u2200x (Stabilizers(x) \u2192 OnlyOnShips(x) \u2227 SteamTurbine(x))",
                "\u2200x (Passenger(x) \u2227 CargoVessel(x) \u2192 Quiet(x) \u2227 GoodSea(x))",
                "\u2203x (Quiet(x) \u2227 GoodSea(x) \u2227 SteamTurbine(x))"
            ],
            "question": "TS Leda was quiet and good at sea.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 721,
            "story_id": 272,
            "context": [
                "There is no dog on the roof.",
                "If there is a dog on the roof something went wrong."
            ],
            "context_fol": [
                "\u00ac(\u2203x (Dog(x) \u2227 OnRoof(x)))",
                "\u2200x \u2203y ((Dog(x) \u2227 OnRoof(x)) \u2192 WentWrong(y))"
            ],
            "question": "Something went wrong.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "125": [
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1282,
            "story_id": 444,
            "context": [
                "All birds have wings.",
                "No animal with wings is a reptile.",
                "Some animals that fly are birds.",
                "If something is an iguana, then it is a reptile.",
                "John is neither an iguana nor a bird."
            ],
            "context_fol": [
                "\u2200x (Bird(x) \u2192 Winged(x))",
                "\u2200x (Winged(x) \u2192 \u00acReptile(x))",
                "\u2203x (Fly(x) \u2227 Bird(x))",
                "\u2200x (Iguana(x) \u2192 Reptile(x))",
                "\u00acIguana(john) \u2295 Bird(john)"
            ],
            "question": "John is a reptile.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "126": [
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1282,
            "story_id": 444,
            "context": [
                "All birds have wings.",
                "No animal with wings is a reptile.",
                "Some animals that fly are birds.",
                "If something is an iguana, then it is a reptile.",
                "John is neither an iguana nor a bird."
            ],
            "context_fol": [
                "\u2200x (Bird(x) \u2192 Winged(x))",
                "\u2200x (Winged(x) \u2192 \u00acReptile(x))",
                "\u2203x (Fly(x) \u2227 Bird(x))",
                "\u2200x (Iguana(x) \u2192 Reptile(x))",
                "\u00acIguana(john) \u2295 Bird(john)"
            ],
            "question": "John is a reptile.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "127": [
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1282,
            "story_id": 444,
            "context": [
                "All birds have wings.",
                "No animal with wings is a reptile.",
                "Some animals that fly are birds.",
                "If something is an iguana, then it is a reptile.",
                "John is neither an iguana nor a bird."
            ],
            "context_fol": [
                "\u2200x (Bird(x) \u2192 Winged(x))",
                "\u2200x (Winged(x) \u2192 \u00acReptile(x))",
                "\u2203x (Fly(x) \u2227 Bird(x))",
                "\u2200x (Iguana(x) \u2192 Reptile(x))",
                "\u00acIguana(john) \u2295 Bird(john)"
            ],
            "question": "John is a reptile.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "128": [
        {
            "example_id": 1013,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or have friends who are getting married.",
                "No preteens and other young children are getting married or have friends who are getting married.",
                "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
                "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and very spirited are fond of large organized group functions.",
                "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
            ],
            "context_fol": [
                "\u2200x Weddings(x) \u2192 GettingMarried(x)",
                "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
                "\u2200x Celebrating(x) \u2192 Weddings(x)",
                "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
                "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
                "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
            ],
            "question": "Carol is outgoing and very spirited.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 912,
            "story_id": 344,
            "context": [
                "All students are members of the university.",
                "All graduate students are students.",
                "All PhD students are graduate students.",
                "Some PhD students have high IQs.",
                "If John is not a PhD student, then he is not a member of the university.",
                "If John has a high IQ, then he is a PhD student or a graduate student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
                "\u2200x (GraduateStudent(x) \u2192 Student(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
                "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
                "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
            ],
            "question": "John has a high IQ.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 476,
            "story_id": 165,
            "context": [
                "Belgium, France and Germany are European countries.",
                "Paris is the capital of France.",
                "The Eiffel Tower is one of the main tourist attractions located in Paris.",
                "Some people who live in Belgium speak French.",
                "If John goes to Europe, he will see some tourist attractions.",
                "John speaks French."
            ],
            "context_fol": [
                "EuropeanCountry(belgium) \u2228 EuropeanCountry(france) \u2228 EuropeanCountry(germany)",
                "CapitalOf(paris, france)",
                "TouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)",
                "\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))",
                "\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))",
                "Speak(john, french)"
            ],
            "question": "If John goes to Europe, he will see the Eiffel Tower.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "129": [
        {
            "example_id": 1013,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or have friends who are getting married.",
                "No preteens and other young children are getting married or have friends who are getting married.",
                "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
                "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and very spirited are fond of large organized group functions.",
                "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
            ],
            "context_fol": [
                "\u2200x Weddings(x) \u2192 GettingMarried(x)",
                "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
                "\u2200x Celebrating(x) \u2192 Weddings(x)",
                "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
                "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
                "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
            ],
            "question": "Carol is outgoing and very spirited.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 912,
            "story_id": 344,
            "context": [
                "All students are members of the university.",
                "All graduate students are students.",
                "All PhD students are graduate students.",
                "Some PhD students have high IQs.",
                "If John is not a PhD student, then he is not a member of the university.",
                "If John has a high IQ, then he is a PhD student or a graduate student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
                "\u2200x (GraduateStudent(x) \u2192 Student(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
                "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
                "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
            ],
            "question": "John has a high IQ.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 476,
            "story_id": 165,
            "context": [
                "Belgium, France and Germany are European countries.",
                "Paris is the capital of France.",
                "The Eiffel Tower is one of the main tourist attractions located in Paris.",
                "Some people who live in Belgium speak French.",
                "If John goes to Europe, he will see some tourist attractions.",
                "John speaks French."
            ],
            "context_fol": [
                "EuropeanCountry(belgium) \u2228 EuropeanCountry(france) \u2228 EuropeanCountry(germany)",
                "CapitalOf(paris, france)",
                "TouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)",
                "\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))",
                "\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))",
                "Speak(john, french)"
            ],
            "question": "If John goes to Europe, he will see the Eiffel Tower.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "130": [
        {
            "example_id": 1013,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or have friends who are getting married.",
                "No preteens and other young children are getting married or have friends who are getting married.",
                "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
                "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and very spirited are fond of large organized group functions.",
                "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
            ],
            "context_fol": [
                "\u2200x Weddings(x) \u2192 GettingMarried(x)",
                "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
                "\u2200x Celebrating(x) \u2192 Weddings(x)",
                "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
                "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
                "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
            ],
            "question": "Carol is outgoing and very spirited.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 912,
            "story_id": 344,
            "context": [
                "All students are members of the university.",
                "All graduate students are students.",
                "All PhD students are graduate students.",
                "Some PhD students have high IQs.",
                "If John is not a PhD student, then he is not a member of the university.",
                "If John has a high IQ, then he is a PhD student or a graduate student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
                "\u2200x (GraduateStudent(x) \u2192 Student(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
                "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
                "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
            ],
            "question": "John has a high IQ.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 476,
            "story_id": 165,
            "context": [
                "Belgium, France and Germany are European countries.",
                "Paris is the capital of France.",
                "The Eiffel Tower is one of the main tourist attractions located in Paris.",
                "Some people who live in Belgium speak French.",
                "If John goes to Europe, he will see some tourist attractions.",
                "John speaks French."
            ],
            "context_fol": [
                "EuropeanCountry(belgium) \u2228 EuropeanCountry(france) \u2228 EuropeanCountry(germany)",
                "CapitalOf(paris, france)",
                "TouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)",
                "\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))",
                "\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))",
                "Speak(john, french)"
            ],
            "question": "If John goes to Europe, he will see the Eiffel Tower.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "131": [
        {
            "example_id": 1013,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or have friends who are getting married.",
                "No preteens and other young children are getting married or have friends who are getting married.",
                "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
                "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and very spirited are fond of large organized group functions.",
                "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
            ],
            "context_fol": [
                "\u2200x Weddings(x) \u2192 GettingMarried(x)",
                "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
                "\u2200x Celebrating(x) \u2192 Weddings(x)",
                "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
                "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
                "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
            ],
            "question": "Carol is outgoing and very spirited.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 912,
            "story_id": 344,
            "context": [
                "All students are members of the university.",
                "All graduate students are students.",
                "All PhD students are graduate students.",
                "Some PhD students have high IQs.",
                "If John is not a PhD student, then he is not a member of the university.",
                "If John has a high IQ, then he is a PhD student or a graduate student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
                "\u2200x (GraduateStudent(x) \u2192 Student(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
                "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
                "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
            ],
            "question": "John has a high IQ.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 476,
            "story_id": 165,
            "context": [
                "Belgium, France and Germany are European countries.",
                "Paris is the capital of France.",
                "The Eiffel Tower is one of the main tourist attractions located in Paris.",
                "Some people who live in Belgium speak French.",
                "If John goes to Europe, he will see some tourist attractions.",
                "John speaks French."
            ],
            "context_fol": [
                "EuropeanCountry(belgium) \u2228 EuropeanCountry(france) \u2228 EuropeanCountry(germany)",
                "CapitalOf(paris, france)",
                "TouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)",
                "\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))",
                "\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))",
                "Speak(john, french)"
            ],
            "question": "If John goes to Europe, he will see the Eiffel Tower.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "132": [
        {
            "example_id": 603,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are platypuses and echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypuses(x) \u2295 Echidnas(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "133": [
        {
            "example_id": 603,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are platypuses and echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypuses(x) \u2295 Echidnas(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "134": [
        {
            "example_id": 603,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are platypuses and echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypuses(x) \u2295 Echidnas(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 706,
            "story_id": 257,
            "context": [
                "Some cats are not pets.",
                "All cats are mammals."
            ],
            "context_fol": [
                "\u2203x (Cat(x) \u2227 \u00acPet(x))",
                "\u2200x (Cat(x) \u2192 Mammal(x))"
            ],
            "question": "Some mammals are not pets.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "135": [
        {
            "example_id": 794,
            "story_id": 316,
            "context": [
                "There are no mansion houses in an urban area.",
                "All skyscrapers reside in urban areas.",
                "Every creepy haunted house is in a mansion house.",
                "Every terrifying Halloween scare comes from a creepy haunted house.",
                "The Scream is a creepy haunted house or a terrifying Halloween scare."
            ],
            "context_fol": [
                "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
                "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
                "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
                "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
                "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
            ],
            "question": "The Scream is a skyscraper.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1004,
            "story_id": 375,
            "context": [
                "All people who grow their own fresh vegetables in their home garden also have ample space.",
                "If people are young working professionals who live in large cities, then they do not have ample space.",
                "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
                "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
                "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
                "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
            ],
            "context_fol": [
                "\u2200x (Garden(x) \u2192 Space(x))",
                "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
                "\u2200x (Takeout(x) \u2192 Garden(x))",
                "\u2200x (GoingOut(x) \u2192 Takeout(x))",
                "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
                "Garden(michael) \u2228 Homecooked(michael)"
            ],
            "question": "Michael enjoys going out often to restaurants with friends.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 573,
            "story_id": 200,
            "context": [
                "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.",
                "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.",
                "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor."
            ],
            "context_fol": [
                "\u2200x (Kitchen(x) \u2192 Up(x) \u2295 Down(x))",
                "(Cook(downstairs) \u2227 \u00acRun(ac)) \u2192 Smokey(firstFloor)",
                "(Cook(downstairs) \u2227 Run(ac)) \u2192 Smokey(secondFloor)"
            ],
            "question": "If someone is cooking downstairs, it will always cause the first floor to become smokey.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "136": [
        {
            "example_id": 794,
            "story_id": 316,
            "context": [
                "There are no mansion houses in an urban area.",
                "All skyscrapers reside in urban areas.",
                "Every creepy haunted house is in a mansion house.",
                "Every terrifying Halloween scare comes from a creepy haunted house.",
                "The Scream is a creepy haunted house or a terrifying Halloween scare."
            ],
            "context_fol": [
                "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
                "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
                "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
                "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
                "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
            ],
            "question": "The Scream is a skyscraper.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1004,
            "story_id": 375,
            "context": [
                "All people who grow their own fresh vegetables in their home garden also have ample space.",
                "If people are young working professionals who live in large cities, then they do not have ample space.",
                "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
                "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
                "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
                "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
            ],
            "context_fol": [
                "\u2200x (Garden(x) \u2192 Space(x))",
                "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
                "\u2200x (Takeout(x) \u2192 Garden(x))",
                "\u2200x (GoingOut(x) \u2192 Takeout(x))",
                "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
                "Garden(michael) \u2228 Homecooked(michael)"
            ],
            "question": "Michael enjoys going out often to restaurants with friends.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 573,
            "story_id": 200,
            "context": [
                "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.",
                "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.",
                "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor."
            ],
            "context_fol": [
                "\u2200x (Kitchen(x) \u2192 Up(x) \u2295 Down(x))",
                "(Cook(downstairs) \u2227 \u00acRun(ac)) \u2192 Smokey(firstFloor)",
                "(Cook(downstairs) \u2227 Run(ac)) \u2192 Smokey(secondFloor)"
            ],
            "question": "If someone is cooking downstairs, it will always cause the first floor to become smokey.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "137": [
        {
            "example_id": 794,
            "story_id": 316,
            "context": [
                "There are no mansion houses in an urban area.",
                "All skyscrapers reside in urban areas.",
                "Every creepy haunted house is in a mansion house.",
                "Every terrifying Halloween scare comes from a creepy haunted house.",
                "The Scream is a creepy haunted house or a terrifying Halloween scare."
            ],
            "context_fol": [
                "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
                "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
                "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
                "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
                "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
            ],
            "question": "The Scream is a skyscraper.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1004,
            "story_id": 375,
            "context": [
                "All people who grow their own fresh vegetables in their home garden also have ample space.",
                "If people are young working professionals who live in large cities, then they do not have ample space.",
                "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
                "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
                "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
                "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
            ],
            "context_fol": [
                "\u2200x (Garden(x) \u2192 Space(x))",
                "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
                "\u2200x (Takeout(x) \u2192 Garden(x))",
                "\u2200x (GoingOut(x) \u2192 Takeout(x))",
                "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
                "Garden(michael) \u2228 Homecooked(michael)"
            ],
            "question": "Michael enjoys going out often to restaurants with friends.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 573,
            "story_id": 200,
            "context": [
                "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.",
                "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.",
                "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor."
            ],
            "context_fol": [
                "\u2200x (Kitchen(x) \u2192 Up(x) \u2295 Down(x))",
                "(Cook(downstairs) \u2227 \u00acRun(ac)) \u2192 Smokey(firstFloor)",
                "(Cook(downstairs) \u2227 Run(ac)) \u2192 Smokey(secondFloor)"
            ],
            "question": "If someone is cooking downstairs, it will always cause the first floor to become smokey.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "138": [
        {
            "example_id": 545,
            "story_id": 189,
            "context": [
                "A summarization model is always faithful if it uses content from the input documents.",
                "Extractive models are a kind of summarization models.",
                "Extractive model can only use content from the input documents."
            ],
            "context_fol": [
                "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Summarization(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
            ],
            "question": "Extractive models are always faithful.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1062,
            "story_id": 392,
            "context": [
                "All univariate analyses use a generalized linear model. ",
                "All multivoxel (pattern) analyses are implementing machine learning algorithms.",
                "All implementing machine learning algorithms are to learn and classify multivariate data.",
                "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ",
                "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis."
            ],
            "context_fol": [
                "\u2200x (UnivariateAnalysis(x) \u2192 UsesGeneralizedLinearModel(x)) ",
                " \u2200x (MultivoxelPatternAnalysis(x) \u2192 ImplementingMachineLearningAlgorithms(x))",
                " \u2200x (ImplementingMachineLearningAlgorithms(x) \u2192 LearnAndClassifyMultivariateData(x)) ",
                " UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2228 UnivariateAnalysis(latentDirichletAllocationModel)",
                " \u00acLearnAndClassifyMultivariateData(latentDirichletAllocationModel) \u2192 UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2227 MultivoxelPatternAnalysis(latentDirichletAllocationModel)"
            ],
            "question": "Latent Dirichlet allocation model is implementing machine learning algorithms.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 671,
            "story_id": 235,
            "context": [
                "Westworld is an American science fiction-thriller TV series.",
                "In 2016, a new television series named Westworld debuted on HBO.",
                "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.",
                "The 1973 film Westworld is about robots that malfunction and begin killing the human visitors."
            ],
            "context_fol": [
                "TVSeries(westworld) \u2227 American(westworld) \u2227 ScienceFictionThriller(westworld)",
                "Debut(westworld, year2016)",
                "\u2203x (Adapt(westworld, x) \u2227 Produce(x, year1973) \u2227 Write(michael, x) \u2227 Direct(michael, x))",
                "About(westworld, robots)"
            ],
            "question": "Michael Crichton has directed a film about robots.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "139": [
        {
            "example_id": 545,
            "story_id": 189,
            "context": [
                "A summarization model is always faithful if it uses content from the input documents.",
                "Extractive models are a kind of summarization models.",
                "Extractive model can only use content from the input documents."
            ],
            "context_fol": [
                "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Summarization(x))",
                "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
            ],
            "question": "Extractive models are always faithful.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1062,
            "story_id": 392,
            "context": [
                "All univariate analyses use a generalized linear model. ",
                "All multivoxel (pattern) analyses are implementing machine learning algorithms.",
                "All implementing machine learning algorithms are to learn and classify multivariate data.",
                "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ",
                "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis."
            ],
            "context_fol": [
                "\u2200x (UnivariateAnalysis(x) \u2192 UsesGeneralizedLinearModel(x)) ",
                " \u2200x (MultivoxelPatternAnalysis(x) \u2192 ImplementingMachineLearningAlgorithms(x))",
                " \u2200x (ImplementingMachineLearningAlgorithms(x) \u2192 LearnAndClassifyMultivariateData(x)) ",
                " UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2228 UnivariateAnalysis(latentDirichletAllocationModel)",
                " \u00acLearnAndClassifyMultivariateData(latentDirichletAllocationModel) \u2192 UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2227 MultivoxelPatternAnalysis(latentDirichletAllocationModel)"
            ],
            "question": "Latent Dirichlet allocation model is implementing machine learning algorithms.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 671,
            "story_id": 235,
            "context": [
                "Westworld is an American science fiction-thriller TV series.",
                "In 2016, a new television series named Westworld debuted on HBO.",
                "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.",
                "The 1973 film Westworld is about robots that malfunction and begin killing the human visitors."
            ],
            "context_fol": [
                "TVSeries(westworld) \u2227 American(westworld) \u2227 ScienceFictionThriller(westworld)",
                "Debut(westworld, year2016)",
                "\u2203x (Adapt(westworld, x) \u2227 Produce(x, year1973) \u2227 Write(michael, x) \u2227 Direct(michael, x))",
                "About(westworld, robots)"
            ],
            "question": "Michael Crichton has directed a film about robots.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "140": [
        {
            "example_id": 749,
            "story_id": 300,
            "context": [
                "If entertainment is interesting, it will be popular.",
                "All popular things are well-known."
            ],
            "context_fol": [
                "\u2200x ((Entertainment(x) \u2227 Interesting(x)) \u2192 Popular(x))",
                "\u2200x (Popular(x) \u2192 WellKnown(x))"
            ],
            "question": "If entertainment is interesting, it will be well-known.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 915,
            "story_id": 345,
            "context": [
                "All kids love animals.",
                "All toddlers are kids.",
                "If someone loves animals, then they are not bad.",
                "All pirates are bad.",
                "If Nancy is not a pirate, then Nancy loves animals.",
                "If Nancy is not a toddler, then Nancy is bad."
            ],
            "context_fol": [
                "\u2200x (Kid(x) \u2192 LoveAnimals(x))",
                "\u2200x (Toddler(x) \u2192 Kid(x))",
                "\u2200x (LoveAnimals(x) \u2192 \u00acBad(x))",
                "\u2200x (Pirate(x) \u2192 Bad(x))",
                "\u00acPirate(nancy) \u2192 LoveAnimals(nancy)",
                "\u00acToddler(nancy) \u2192 Bad(nancy)"
            ],
            "question": "Nancy is a pirate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 619,
            "story_id": 215,
            "context": [
                "Adam owns cars.",
                "Adam has a favorite car.",
                "Among the cars he owns, Adam's favorite car is European.",
                "Adam broke his favorite car."
            ],
            "context_fol": [
                "\u2203x (Owns(adam, x))",
                "\u2203x (Favorite(adam, x))",
                "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))",
                "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))"
            ],
            "question": "Adam owns a Japanese car.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "141": [
        {
            "example_id": 749,
            "story_id": 300,
            "context": [
                "If entertainment is interesting, it will be popular.",
                "All popular things are well-known."
            ],
            "context_fol": [
                "\u2200x ((Entertainment(x) \u2227 Interesting(x)) \u2192 Popular(x))",
                "\u2200x (Popular(x) \u2192 WellKnown(x))"
            ],
            "question": "If entertainment is interesting, it will be well-known.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 915,
            "story_id": 345,
            "context": [
                "All kids love animals.",
                "All toddlers are kids.",
                "If someone loves animals, then they are not bad.",
                "All pirates are bad.",
                "If Nancy is not a pirate, then Nancy loves animals.",
                "If Nancy is not a toddler, then Nancy is bad."
            ],
            "context_fol": [
                "\u2200x (Kid(x) \u2192 LoveAnimals(x))",
                "\u2200x (Toddler(x) \u2192 Kid(x))",
                "\u2200x (LoveAnimals(x) \u2192 \u00acBad(x))",
                "\u2200x (Pirate(x) \u2192 Bad(x))",
                "\u00acPirate(nancy) \u2192 LoveAnimals(nancy)",
                "\u00acToddler(nancy) \u2192 Bad(nancy)"
            ],
            "question": "Nancy is a pirate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 619,
            "story_id": 215,
            "context": [
                "Adam owns cars.",
                "Adam has a favorite car.",
                "Among the cars he owns, Adam's favorite car is European.",
                "Adam broke his favorite car."
            ],
            "context_fol": [
                "\u2203x (Owns(adam, x))",
                "\u2203x (Favorite(adam, x))",
                "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))",
                "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))"
            ],
            "question": "Adam owns a Japanese car.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "142": [
        {
            "example_id": 749,
            "story_id": 300,
            "context": [
                "If entertainment is interesting, it will be popular.",
                "All popular things are well-known."
            ],
            "context_fol": [
                "\u2200x ((Entertainment(x) \u2227 Interesting(x)) \u2192 Popular(x))",
                "\u2200x (Popular(x) \u2192 WellKnown(x))"
            ],
            "question": "If entertainment is interesting, it will be well-known.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 915,
            "story_id": 345,
            "context": [
                "All kids love animals.",
                "All toddlers are kids.",
                "If someone loves animals, then they are not bad.",
                "All pirates are bad.",
                "If Nancy is not a pirate, then Nancy loves animals.",
                "If Nancy is not a toddler, then Nancy is bad."
            ],
            "context_fol": [
                "\u2200x (Kid(x) \u2192 LoveAnimals(x))",
                "\u2200x (Toddler(x) \u2192 Kid(x))",
                "\u2200x (LoveAnimals(x) \u2192 \u00acBad(x))",
                "\u2200x (Pirate(x) \u2192 Bad(x))",
                "\u00acPirate(nancy) \u2192 LoveAnimals(nancy)",
                "\u00acToddler(nancy) \u2192 Bad(nancy)"
            ],
            "question": "Nancy is a pirate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 619,
            "story_id": 215,
            "context": [
                "Adam owns cars.",
                "Adam has a favorite car.",
                "Among the cars he owns, Adam's favorite car is European.",
                "Adam broke his favorite car."
            ],
            "context_fol": [
                "\u2203x (Owns(adam, x))",
                "\u2203x (Favorite(adam, x))",
                "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))",
                "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))"
            ],
            "question": "Adam owns a Japanese car.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "143": [
        {
            "example_id": 1095,
            "story_id": 399,
            "context": [
                "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
                "If a person values physical touch as an especially important love language, then they are good with pets.",
                "No people that are good with pets are scared of animals.",
                "People are either scared of animals or love animals.",
                "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
            ],
            "context_fol": [
                "\u2200x (Physical(x) \u2228 Words(x))",
                "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
                "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
                "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
                "Physical(adam) \u2295 LoveAnimals(adam)"
            ],
            "question": "Adam is scared of animals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 603,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are platypuses and echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypuses(x) \u2295 Echidnas(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1269,
            "story_id": 440,
            "context": [
                "All animals that are tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "Everything that is a husky is a dog.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2228 Cat(fido)"
            ],
            "question": "Fido is a husky.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "144": [
        {
            "example_id": 1095,
            "story_id": 399,
            "context": [
                "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
                "If a person values physical touch as an especially important love language, then they are good with pets.",
                "No people that are good with pets are scared of animals.",
                "People are either scared of animals or love animals.",
                "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
            ],
            "context_fol": [
                "\u2200x (Physical(x) \u2228 Words(x))",
                "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
                "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
                "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
                "Physical(adam) \u2295 LoveAnimals(adam)"
            ],
            "question": "Adam is scared of animals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 603,
            "story_id": 210,
            "context": [
                "The only types of mammals that lay eggs are platypuses and echidnas.",
                "Platypuses are not hyrax.",
                "Echidnas are not hyrax.",
                "No mammals are invertebrates.",
                "All animals are either vertebrates or invertebrates.",
                "Mammals are animals.",
                "Hyraxes are mammals.",
                "Grebes lay eggs.",
                "Grebes are not platypuses and also not echidnas."
            ],
            "context_fol": [
                "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypuses(x) \u2295 Echidnas(x)))",
                "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
                "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
                "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
                "\u2200x (Mammal(x) \u2192 Animal(x))",
                "\u2200x (Hyrax(x) \u2192 Mammal(x))",
                "\u2200x (Grebes(x) \u2192 LayEgg(x))",
                "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
            ],
            "question": "Hyraxes lay eggs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1269,
            "story_id": 440,
            "context": [
                "All animals that are tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "Everything that is a husky is a dog.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2228 Cat(fido)"
            ],
            "question": "Fido is a husky.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "145": [
        {
            "example_id": 1359,
            "story_id": 469,
            "context": [
                "All professors are teachers.",
                "All researchers are professors.",
                "No teachers are students.",
                "All people who study are students.",
                "Leon is not studying or a researcher.",
                "If Leon is not studying, then Leon is a teacher."
            ],
            "context_fol": [
                "\u2200x (Professor(x) \u2192 Teacher(x))",
                "\u2200x (Researcher(x) \u2192 Professor(x))",
                "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
                "\u2200x (Study(x) \u2192 Student(x))",
                "\u00acStudy(leon) \u2295 Researcher(leon)",
                "\u00acStudy(leon) \u2192 Teacher(leon)"
            ],
            "question": "Leon is a professor.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 889,
            "story_id": 338,
            "context": [
                "No students are doctors.",
                "All people taking classes are students. ",
                "All graduate students are people taking classes. ",
                "All PhD students are graduate students. ",
                "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 \u00acDoctor(x))",
                "\u2200x (TakingClass(x) \u2192 Student(x))",
                "\u2200x (GraduateStudent(x) \u2192 TakingClass(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "GraduateStudent(joe) \u2295  Doctor(joe) \u2192 \u00ac(GraduateStudent(joe) ^ Student(joe))"
            ],
            "question": "Joe is a person taking classes.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 912,
            "story_id": 344,
            "context": [
                "All students are members of the university.",
                "All graduate students are students.",
                "All PhD students are graduate students.",
                "Some PhD students have high IQs.",
                "If John is not a PhD student, then he is not a member of the university.",
                "If John has a high IQ, then he is a PhD student or a graduate student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
                "\u2200x (GraduateStudent(x) \u2192 Student(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
                "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
                "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
            ],
            "question": "John has a high IQ.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "146": [
        {
            "example_id": 1359,
            "story_id": 469,
            "context": [
                "All professors are teachers.",
                "All researchers are professors.",
                "No teachers are students.",
                "All people who study are students.",
                "Leon is not studying or a researcher.",
                "If Leon is not studying, then Leon is a teacher."
            ],
            "context_fol": [
                "\u2200x (Professor(x) \u2192 Teacher(x))",
                "\u2200x (Researcher(x) \u2192 Professor(x))",
                "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
                "\u2200x (Study(x) \u2192 Student(x))",
                "\u00acStudy(leon) \u2295 Researcher(leon)",
                "\u00acStudy(leon) \u2192 Teacher(leon)"
            ],
            "question": "Leon is a professor.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 889,
            "story_id": 338,
            "context": [
                "No students are doctors.",
                "All people taking classes are students. ",
                "All graduate students are people taking classes. ",
                "All PhD students are graduate students. ",
                "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 \u00acDoctor(x))",
                "\u2200x (TakingClass(x) \u2192 Student(x))",
                "\u2200x (GraduateStudent(x) \u2192 TakingClass(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "GraduateStudent(joe) \u2295  Doctor(joe) \u2192 \u00ac(GraduateStudent(joe) ^ Student(joe))"
            ],
            "question": "Joe is a person taking classes.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 912,
            "story_id": 344,
            "context": [
                "All students are members of the university.",
                "All graduate students are students.",
                "All PhD students are graduate students.",
                "Some PhD students have high IQs.",
                "If John is not a PhD student, then he is not a member of the university.",
                "If John has a high IQ, then he is a PhD student or a graduate student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
                "\u2200x (GraduateStudent(x) \u2192 Student(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
                "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
                "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
            ],
            "question": "John has a high IQ.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "147": [
        {
            "example_id": 1359,
            "story_id": 469,
            "context": [
                "All professors are teachers.",
                "All researchers are professors.",
                "No teachers are students.",
                "All people who study are students.",
                "Leon is not studying or a researcher.",
                "If Leon is not studying, then Leon is a teacher."
            ],
            "context_fol": [
                "\u2200x (Professor(x) \u2192 Teacher(x))",
                "\u2200x (Researcher(x) \u2192 Professor(x))",
                "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
                "\u2200x (Study(x) \u2192 Student(x))",
                "\u00acStudy(leon) \u2295 Researcher(leon)",
                "\u00acStudy(leon) \u2192 Teacher(leon)"
            ],
            "question": "Leon is a professor.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 889,
            "story_id": 338,
            "context": [
                "No students are doctors.",
                "All people taking classes are students. ",
                "All graduate students are people taking classes. ",
                "All PhD students are graduate students. ",
                "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 \u00acDoctor(x))",
                "\u2200x (TakingClass(x) \u2192 Student(x))",
                "\u2200x (GraduateStudent(x) \u2192 TakingClass(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "GraduateStudent(joe) \u2295  Doctor(joe) \u2192 \u00ac(GraduateStudent(joe) ^ Student(joe))"
            ],
            "question": "Joe is a person taking classes.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 912,
            "story_id": 344,
            "context": [
                "All students are members of the university.",
                "All graduate students are students.",
                "All PhD students are graduate students.",
                "Some PhD students have high IQs.",
                "If John is not a PhD student, then he is not a member of the university.",
                "If John has a high IQ, then he is a PhD student or a graduate student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
                "\u2200x (GraduateStudent(x) \u2192 Student(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
                "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
                "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
            ],
            "question": "John has a high IQ.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "148": [
        {
            "example_id": 1359,
            "story_id": 469,
            "context": [
                "All professors are teachers.",
                "All researchers are professors.",
                "No teachers are students.",
                "All people who study are students.",
                "Leon is not studying or a researcher.",
                "If Leon is not studying, then Leon is a teacher."
            ],
            "context_fol": [
                "\u2200x (Professor(x) \u2192 Teacher(x))",
                "\u2200x (Researcher(x) \u2192 Professor(x))",
                "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
                "\u2200x (Study(x) \u2192 Student(x))",
                "\u00acStudy(leon) \u2295 Researcher(leon)",
                "\u00acStudy(leon) \u2192 Teacher(leon)"
            ],
            "question": "Leon is a professor.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 889,
            "story_id": 338,
            "context": [
                "No students are doctors.",
                "All people taking classes are students. ",
                "All graduate students are people taking classes. ",
                "All PhD students are graduate students. ",
                "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 \u00acDoctor(x))",
                "\u2200x (TakingClass(x) \u2192 Student(x))",
                "\u2200x (GraduateStudent(x) \u2192 TakingClass(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "GraduateStudent(joe) \u2295  Doctor(joe) \u2192 \u00ac(GraduateStudent(joe) ^ Student(joe))"
            ],
            "question": "Joe is a person taking classes.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 912,
            "story_id": 344,
            "context": [
                "All students are members of the university.",
                "All graduate students are students.",
                "All PhD students are graduate students.",
                "Some PhD students have high IQs.",
                "If John is not a PhD student, then he is not a member of the university.",
                "If John has a high IQ, then he is a PhD student or a graduate student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
                "\u2200x (GraduateStudent(x) \u2192 Student(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
                "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
                "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
            ],
            "question": "John has a high IQ.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "149": [
        {
            "example_id": 1359,
            "story_id": 469,
            "context": [
                "All professors are teachers.",
                "All researchers are professors.",
                "No teachers are students.",
                "All people who study are students.",
                "Leon is not studying or a researcher.",
                "If Leon is not studying, then Leon is a teacher."
            ],
            "context_fol": [
                "\u2200x (Professor(x) \u2192 Teacher(x))",
                "\u2200x (Researcher(x) \u2192 Professor(x))",
                "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
                "\u2200x (Study(x) \u2192 Student(x))",
                "\u00acStudy(leon) \u2295 Researcher(leon)",
                "\u00acStudy(leon) \u2192 Teacher(leon)"
            ],
            "question": "Leon is a professor.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 889,
            "story_id": 338,
            "context": [
                "No students are doctors.",
                "All people taking classes are students. ",
                "All graduate students are people taking classes. ",
                "All PhD students are graduate students. ",
                "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 \u00acDoctor(x))",
                "\u2200x (TakingClass(x) \u2192 Student(x))",
                "\u2200x (GraduateStudent(x) \u2192 TakingClass(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "GraduateStudent(joe) \u2295  Doctor(joe) \u2192 \u00ac(GraduateStudent(joe) ^ Student(joe))"
            ],
            "question": "Joe is a person taking classes.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 912,
            "story_id": 344,
            "context": [
                "All students are members of the university.",
                "All graduate students are students.",
                "All PhD students are graduate students.",
                "Some PhD students have high IQs.",
                "If John is not a PhD student, then he is not a member of the university.",
                "If John has a high IQ, then he is a PhD student or a graduate student."
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
                "\u2200x (GraduateStudent(x) \u2192 Student(x))",
                "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
                "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
                "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
                "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
            ],
            "question": "John has a high IQ.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "150": [
        {
            "example_id": 1171,
            "story_id": 415,
            "context": [
                "All books written by Tomas have sold more than 1 million copies. ",
                "Some books that have won Hugo Awards are written by Tomas.",
                "All books about the future are inspired by Shakespeare. ",
                "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
                "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
            ],
            "context_fol": [
                "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))",
                "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))",
                "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))",
                "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) ",
                "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)"
            ],
            "question": "2001 is a book that has won a Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 365,
            "story_id": 122,
            "context": [
                "Beasts of Prey is either a fantasy novel or a science fiction novel.",
                "Science fiction novels are not about mythological creatures",
                "Beasts of Prey Is about a creature known as the Shetani.",
                "Shetanis are mythological."
            ],
            "context_fol": [
                "Novel(beastsofprey) \u2227 Fantasy(beastsofprey) \u2228 ScienceFiction(beastsofprey)",
                "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))",
                "About(beastsofprey, shetani) \u2227 Creature(shetani)",
                "Mythological(shetani)"
            ],
            "question": "Beasts of prey is a fantasy novel.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are influenced by Isaac Asimov.",
                "The book the Three Body Problem has sold more than 1 million copies.",
                "The Three Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
                "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
                "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
                "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
                "AboutFuture(threebodyproblem)"
            ],
            "question": "The Three Body Problem won the Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "151": [
        {
            "example_id": 1171,
            "story_id": 415,
            "context": [
                "All books written by Tomas have sold more than 1 million copies. ",
                "Some books that have won Hugo Awards are written by Tomas.",
                "All books about the future are inspired by Shakespeare. ",
                "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
                "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
            ],
            "context_fol": [
                "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))",
                "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))",
                "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))",
                "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) ",
                "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)"
            ],
            "question": "2001 is a book that has won a Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 365,
            "story_id": 122,
            "context": [
                "Beasts of Prey is either a fantasy novel or a science fiction novel.",
                "Science fiction novels are not about mythological creatures",
                "Beasts of Prey Is about a creature known as the Shetani.",
                "Shetanis are mythological."
            ],
            "context_fol": [
                "Novel(beastsofprey) \u2227 Fantasy(beastsofprey) \u2228 ScienceFiction(beastsofprey)",
                "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))",
                "About(beastsofprey, shetani) \u2227 Creature(shetani)",
                "Mythological(shetani)"
            ],
            "question": "Beasts of prey is a fantasy novel.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are influenced by Isaac Asimov.",
                "The book the Three Body Problem has sold more than 1 million copies.",
                "The Three Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
                "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
                "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
                "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
                "AboutFuture(threebodyproblem)"
            ],
            "question": "The Three Body Problem won the Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "152": [
        {
            "example_id": 1171,
            "story_id": 415,
            "context": [
                "All books written by Tomas have sold more than 1 million copies. ",
                "Some books that have won Hugo Awards are written by Tomas.",
                "All books about the future are inspired by Shakespeare. ",
                "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
                "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
            ],
            "context_fol": [
                "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))",
                "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))",
                "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))",
                "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) ",
                "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)"
            ],
            "question": "2001 is a book that has won a Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 365,
            "story_id": 122,
            "context": [
                "Beasts of Prey is either a fantasy novel or a science fiction novel.",
                "Science fiction novels are not about mythological creatures",
                "Beasts of Prey Is about a creature known as the Shetani.",
                "Shetanis are mythological."
            ],
            "context_fol": [
                "Novel(beastsofprey) \u2227 Fantasy(beastsofprey) \u2228 ScienceFiction(beastsofprey)",
                "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))",
                "About(beastsofprey, shetani) \u2227 Creature(shetani)",
                "Mythological(shetani)"
            ],
            "question": "Beasts of prey is a fantasy novel.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 66,
            "story_id": 23,
            "context": [
                "All books written by Cixin Liu have sold more than 1 million copies. ",
                "Some books that have won the Hugo Award were written by Cixin Liu.",
                "All books about the future are influenced by Isaac Asimov.",
                "The book the Three Body Problem has sold more than 1 million copies.",
                "The Three Body Problem is about the future."
            ],
            "context_fol": [
                "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
                "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
                "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
                "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
                "AboutFuture(threebodyproblem)"
            ],
            "question": "The Three Body Problem won the Hugo Award.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "153": [
        {
            "example_id": 1128,
            "story_id": 405,
            "context": [
                "Everyone who works in person is a commuter.",
                "People either work in person or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup.",
                "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
            ],
            "context_fol": [
                "\u2200x (InPerson(x) \u2192 Commuter(x))",
                "\u2200x (InPerson(x) \u2295 FromHome(x))",
                "\u2200x (FromHome(x) \u2192 Relaxed(x))",
                "Commuter(george) \u2295 HomeOffice(george)",
                "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
            ],
            "question": "George is a person who works from home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 987,
            "story_id": 369,
            "context": [
                "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
                "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
                "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
                "If people live with at least one roommate then they do not own at least one pet.",
                "All people who own at least one pet live with at least one roommate.",
                "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
                "\u2200x (Tech(x) \u2192 Iphone(x))",
                "\u2200x (House(x) \u2228 Apartment(x))",
                "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
                "\u2200x (Apartment(x) \u2192 Roommate(x))",
                "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
            ],
            "question": "Emma lives with at least one roommate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 972,
            "story_id": 364,
            "context": [
                "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
                "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
                "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))",
                "\u2200x (CoffeeShop(x) \u2228 Takeout(x))",
                "\u2200x (MakeFood(x) \u2192 Takeout(x))",
                "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))",
                "\u2200x (Busy(x) \u2192 MakeFood(x))",
                "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))"
            ],
            "question": "Sam is addicted to coffee and other caffeinated drinks.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "154": [
        {
            "example_id": 1128,
            "story_id": 405,
            "context": [
                "Everyone who works in person is a commuter.",
                "People either work in person or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup.",
                "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
            ],
            "context_fol": [
                "\u2200x (InPerson(x) \u2192 Commuter(x))",
                "\u2200x (InPerson(x) \u2295 FromHome(x))",
                "\u2200x (FromHome(x) \u2192 Relaxed(x))",
                "Commuter(george) \u2295 HomeOffice(george)",
                "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
            ],
            "question": "George is a person who works from home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 987,
            "story_id": 369,
            "context": [
                "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
                "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
                "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
                "If people live with at least one roommate then they do not own at least one pet.",
                "All people who own at least one pet live with at least one roommate.",
                "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
                "\u2200x (Tech(x) \u2192 Iphone(x))",
                "\u2200x (House(x) \u2228 Apartment(x))",
                "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
                "\u2200x (Apartment(x) \u2192 Roommate(x))",
                "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
            ],
            "question": "Emma lives with at least one roommate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 972,
            "story_id": 364,
            "context": [
                "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
                "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
                "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))",
                "\u2200x (CoffeeShop(x) \u2228 Takeout(x))",
                "\u2200x (MakeFood(x) \u2192 Takeout(x))",
                "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))",
                "\u2200x (Busy(x) \u2192 MakeFood(x))",
                "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))"
            ],
            "question": "Sam is addicted to coffee and other caffeinated drinks.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "155": [
        {
            "example_id": 1128,
            "story_id": 405,
            "context": [
                "Everyone who works in person is a commuter.",
                "People either work in person or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup.",
                "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
            ],
            "context_fol": [
                "\u2200x (InPerson(x) \u2192 Commuter(x))",
                "\u2200x (InPerson(x) \u2295 FromHome(x))",
                "\u2200x (FromHome(x) \u2192 Relaxed(x))",
                "Commuter(george) \u2295 HomeOffice(george)",
                "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
            ],
            "question": "George is a person who works from home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 987,
            "story_id": 369,
            "context": [
                "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
                "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
                "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
                "If people live with at least one roommate then they do not own at least one pet.",
                "All people who own at least one pet live with at least one roommate.",
                "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
            ],
            "context_fol": [
                "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
                "\u2200x (Tech(x) \u2192 Iphone(x))",
                "\u2200x (House(x) \u2228 Apartment(x))",
                "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
                "\u2200x (Apartment(x) \u2192 Roommate(x))",
                "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
            ],
            "question": "Emma lives with at least one roommate.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 972,
            "story_id": 364,
            "context": [
                "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
                "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
                "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
                "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
                "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
                "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
            ],
            "context_fol": [
                "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))",
                "\u2200x (CoffeeShop(x) \u2228 Takeout(x))",
                "\u2200x (MakeFood(x) \u2192 Takeout(x))",
                "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))",
                "\u2200x (Busy(x) \u2192 MakeFood(x))",
                "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))"
            ],
            "question": "Sam is addicted to coffee and other caffeinated drinks.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "156": [
        {
            "example_id": 1383,
            "story_id": 475,
            "context": [
                "All Asians are human. ",
                "All Chinese are Asian.",
                "A man is either Chinese or British.",
                "All British are European. ",
                "All Spanish are European. ",
                "No Indian is European. ",
                "Jessee is either both an Indian and a human, or neither an Indian nor a human."
            ],
            "context_fol": [
                "\u2200x ( Asian(x)\u2192  Human(x))",
                "\u2200x ( Chinese(x)\u2192  Asian(x))",
                "\u2200x ( Chinese(x) \u2228  British(x))",
                "\u2200x ( British(x)\u2192  European(x))",
                "\u2200x ( Spanish(x)\u2192  European(x))",
                "\u2200x ( Indian(x)\u2192 \u00ac European(x))",
                "( Indian(jesse) \u2227 Human(jesse)) \u2295 (\u00ac Indian(jesse) \u2227 \u00ac Human(jesse))"
            ],
            "question": "Jesse is Chinese.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1347,
            "story_id": 465,
            "context": [
                "All men are human.",
                "All gentlemen are men.",
                "All lawyers are gentlemen.",
                "All women are human.",
                "No sheep are human.",
                "If Mike is not both a human and a sheep, then Mike is either a man or a human."
            ],
            "context_fol": [
                "\u2200x (Man(x) \u2192 Human(x))",
                "\u2200x (Gentleman(x) \u2192 Man(x))",
                "\u2200x (Lawyer(x) \u2192 Gentleman(x))",
                "\u2200x (Woman(x) \u2192 Human(x))",
                "\u2200x (Sheep(x) \u2192 \u00acHuman(x))",
                "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
            ],
            "question": "Mike is a woman.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "157": [
        {
            "example_id": 1291,
            "story_id": 447,
            "context": [
                "No faculty does homework.",
                "All students do homework.",
                "All kids are students.",
                "If someone works at a school, then they are faculty.",
                "If Jill works at a school or is a teacher, then Jill works at a school."
            ],
            "context_fol": [
                "\u2200x (Faculty(x) \u2192 \u00acDoesHomework(x))",
                "\u2200x (Student(x) \u2192 DoesHomework(x))",
                "\u2200x (Kid(x) \u2192 Student(x))",
                "\u2200x (WorkAtSchool(x) \u2192 Faculty(x))",
                "WorkAtSchool(jill) \u2228 DoesHomework(jill) \u2192 WorkAtSchool(jill)"
            ],
            "question": "Jill works at a school.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1359,
            "story_id": 469,
            "context": [
                "All professors are teachers.",
                "All researchers are professors.",
                "No teachers are students.",
                "All people who study are students.",
                "Leon is not studying or a researcher.",
                "If Leon is not studying, then Leon is a teacher."
            ],
            "context_fol": [
                "\u2200x (Professor(x) \u2192 Teacher(x))",
                "\u2200x (Researcher(x) \u2192 Professor(x))",
                "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
                "\u2200x (Study(x) \u2192 Student(x))",
                "\u00acStudy(leon) \u2295 Researcher(leon)",
                "\u00acStudy(leon) \u2192 Teacher(leon)"
            ],
            "question": "Leon is a professor.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1186,
            "story_id": 419,
            "context": [
                "Some employees working in business analysis are good at math. ",
                "All employees working in business analysis are working in this company. ",
                "No employees working in this company are from China. ",
                "All employees working in software engineering are from China. ",
                "James is working in software engineering. "
            ],
            "context_fol": [
                "\u2203x ( BusinessAnalysis(x) \u2227 GoodAtMath(x))",
                "\u2200x (BusinessAnalysis(x) \u2192 WorkInCompany(x))",
                "\u2200x (WorkInCompany(x) \u2192 \u00acFromChina(x))",
                "\u2200x (SoftwareEngineering(x) \u2192 FromChina(x))",
                "SoftwareEngineering(james)"
            ],
            "question": "James is good at math.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "158": [
        {
            "example_id": 1291,
            "story_id": 447,
            "context": [
                "No faculty does homework.",
                "All students do homework.",
                "All kids are students.",
                "If someone works at a school, then they are faculty.",
                "If Jill works at a school or is a teacher, then Jill works at a school."
            ],
            "context_fol": [
                "\u2200x (Faculty(x) \u2192 \u00acDoesHomework(x))",
                "\u2200x (Student(x) \u2192 DoesHomework(x))",
                "\u2200x (Kid(x) \u2192 Student(x))",
                "\u2200x (WorkAtSchool(x) \u2192 Faculty(x))",
                "WorkAtSchool(jill) \u2228 DoesHomework(jill) \u2192 WorkAtSchool(jill)"
            ],
            "question": "Jill works at a school.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1359,
            "story_id": 469,
            "context": [
                "All professors are teachers.",
                "All researchers are professors.",
                "No teachers are students.",
                "All people who study are students.",
                "Leon is not studying or a researcher.",
                "If Leon is not studying, then Leon is a teacher."
            ],
            "context_fol": [
                "\u2200x (Professor(x) \u2192 Teacher(x))",
                "\u2200x (Researcher(x) \u2192 Professor(x))",
                "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
                "\u2200x (Study(x) \u2192 Student(x))",
                "\u00acStudy(leon) \u2295 Researcher(leon)",
                "\u00acStudy(leon) \u2192 Teacher(leon)"
            ],
            "question": "Leon is a professor.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1186,
            "story_id": 419,
            "context": [
                "Some employees working in business analysis are good at math. ",
                "All employees working in business analysis are working in this company. ",
                "No employees working in this company are from China. ",
                "All employees working in software engineering are from China. ",
                "James is working in software engineering. "
            ],
            "context_fol": [
                "\u2203x ( BusinessAnalysis(x) \u2227 GoodAtMath(x))",
                "\u2200x (BusinessAnalysis(x) \u2192 WorkInCompany(x))",
                "\u2200x (WorkInCompany(x) \u2192 \u00acFromChina(x))",
                "\u2200x (SoftwareEngineering(x) \u2192 FromChina(x))",
                "SoftwareEngineering(james)"
            ],
            "question": "James is good at math.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "159": [
        {
            "example_id": 1291,
            "story_id": 447,
            "context": [
                "No faculty does homework.",
                "All students do homework.",
                "All kids are students.",
                "If someone works at a school, then they are faculty.",
                "If Jill works at a school or is a teacher, then Jill works at a school."
            ],
            "context_fol": [
                "\u2200x (Faculty(x) \u2192 \u00acDoesHomework(x))",
                "\u2200x (Student(x) \u2192 DoesHomework(x))",
                "\u2200x (Kid(x) \u2192 Student(x))",
                "\u2200x (WorkAtSchool(x) \u2192 Faculty(x))",
                "WorkAtSchool(jill) \u2228 DoesHomework(jill) \u2192 WorkAtSchool(jill)"
            ],
            "question": "Jill works at a school.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1359,
            "story_id": 469,
            "context": [
                "All professors are teachers.",
                "All researchers are professors.",
                "No teachers are students.",
                "All people who study are students.",
                "Leon is not studying or a researcher.",
                "If Leon is not studying, then Leon is a teacher."
            ],
            "context_fol": [
                "\u2200x (Professor(x) \u2192 Teacher(x))",
                "\u2200x (Researcher(x) \u2192 Professor(x))",
                "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
                "\u2200x (Study(x) \u2192 Student(x))",
                "\u00acStudy(leon) \u2295 Researcher(leon)",
                "\u00acStudy(leon) \u2192 Teacher(leon)"
            ],
            "question": "Leon is a professor.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1186,
            "story_id": 419,
            "context": [
                "Some employees working in business analysis are good at math. ",
                "All employees working in business analysis are working in this company. ",
                "No employees working in this company are from China. ",
                "All employees working in software engineering are from China. ",
                "James is working in software engineering. "
            ],
            "context_fol": [
                "\u2203x ( BusinessAnalysis(x) \u2227 GoodAtMath(x))",
                "\u2200x (BusinessAnalysis(x) \u2192 WorkInCompany(x))",
                "\u2200x (WorkInCompany(x) \u2192 \u00acFromChina(x))",
                "\u2200x (SoftwareEngineering(x) \u2192 FromChina(x))",
                "SoftwareEngineering(james)"
            ],
            "question": "James is good at math.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "160": [
        {
            "example_id": 1291,
            "story_id": 447,
            "context": [
                "No faculty does homework.",
                "All students do homework.",
                "All kids are students.",
                "If someone works at a school, then they are faculty.",
                "If Jill works at a school or is a teacher, then Jill works at a school."
            ],
            "context_fol": [
                "\u2200x (Faculty(x) \u2192 \u00acDoesHomework(x))",
                "\u2200x (Student(x) \u2192 DoesHomework(x))",
                "\u2200x (Kid(x) \u2192 Student(x))",
                "\u2200x (WorkAtSchool(x) \u2192 Faculty(x))",
                "WorkAtSchool(jill) \u2228 DoesHomework(jill) \u2192 WorkAtSchool(jill)"
            ],
            "question": "Jill works at a school.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1359,
            "story_id": 469,
            "context": [
                "All professors are teachers.",
                "All researchers are professors.",
                "No teachers are students.",
                "All people who study are students.",
                "Leon is not studying or a researcher.",
                "If Leon is not studying, then Leon is a teacher."
            ],
            "context_fol": [
                "\u2200x (Professor(x) \u2192 Teacher(x))",
                "\u2200x (Researcher(x) \u2192 Professor(x))",
                "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
                "\u2200x (Study(x) \u2192 Student(x))",
                "\u00acStudy(leon) \u2295 Researcher(leon)",
                "\u00acStudy(leon) \u2192 Teacher(leon)"
            ],
            "question": "Leon is a professor.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1186,
            "story_id": 419,
            "context": [
                "Some employees working in business analysis are good at math. ",
                "All employees working in business analysis are working in this company. ",
                "No employees working in this company are from China. ",
                "All employees working in software engineering are from China. ",
                "James is working in software engineering. "
            ],
            "context_fol": [
                "\u2203x ( BusinessAnalysis(x) \u2227 GoodAtMath(x))",
                "\u2200x (BusinessAnalysis(x) \u2192 WorkInCompany(x))",
                "\u2200x (WorkInCompany(x) \u2192 \u00acFromChina(x))",
                "\u2200x (SoftwareEngineering(x) \u2192 FromChina(x))",
                "SoftwareEngineering(james)"
            ],
            "question": "James is good at math.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "161": [
        {
            "example_id": 521,
            "story_id": 180,
            "context": [
                "Sam is doing a project.",
                "A project is written either in C++ or in Python.",
                "If Sam does a project written in Python, he will not use a Mac.",
                "Sam is using a Mac.",
                "If Sam uses a Mac, he will play a song.",
                "If a song is not \"Perfect\", Sam will never play it."
            ],
            "context_fol": [
                "\u2203x (Project(x) \u2227 Do(sam, x))",
                " \u2200x (Project(x) \u2192 (WrittenIn(x, python) \u2295 WrittenIn(x, c++)))",
                " \u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))",
                " Use(sam, mac)",
                " Use(sam, mac) \u2192 \u2203x (Song(x) \u2227 Play(sam, x))",
                " \u2200x (\u00acBe(x, perfect) \u2192 \u00acPlay(sam, x))"
            ],
            "question": "The project Sam is doing is written in C++.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1128,
            "story_id": 405,
            "context": [
                "Everyone who works in person is a commuter.",
                "People either work in person or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup.",
                "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
            ],
            "context_fol": [
                "\u2200x (InPerson(x) \u2192 Commuter(x))",
                "\u2200x (InPerson(x) \u2295 FromHome(x))",
                "\u2200x (FromHome(x) \u2192 Relaxed(x))",
                "Commuter(george) \u2295 HomeOffice(george)",
                "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
            ],
            "question": "George is a person who works from home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 688,
            "story_id": 241,
            "context": [
                "All students learning piano can strike the right notes. ",
                "All students who can strike the right note can get the rhythms right. ",
                "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ",
                "Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ",
                "If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. ",
                "John is a student learning piano. ",
                "John does not find coordination between the left and the right hands challenging. "
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2227 LearningPiano(x) \u2192 StrikeRightNotes(x))",
                "\u2200x (Student(x) \u2227 StrikeRightNotes(x) \u2192 GetRhythmRight(x))",
                "\u2200x (Student(x) \u2227 GetRhythmRight(x) \u2192 StartCoordination(x))",
                "\u2200x (Student(x) \u2227 StartCoordination(x) \u2192 GoodAtCoordination(x) \u2295 FindCoordinationChallenging(x))",
                "StrikeRightNotes(john) \u2227 GetRhythmRight(john) \u2227 GoodAtCoordination(john) \u2192 PutEmotion(john)",
                "Student(john) \u2227 LearningPiano(john)",
                "\u00acFindCoordinationChallenging(john)"
            ],
            "question": "John can get the rhythms right.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "162": [
        {
            "example_id": 521,
            "story_id": 180,
            "context": [
                "Sam is doing a project.",
                "A project is written either in C++ or in Python.",
                "If Sam does a project written in Python, he will not use a Mac.",
                "Sam is using a Mac.",
                "If Sam uses a Mac, he will play a song.",
                "If a song is not \"Perfect\", Sam will never play it."
            ],
            "context_fol": [
                "\u2203x (Project(x) \u2227 Do(sam, x))",
                " \u2200x (Project(x) \u2192 (WrittenIn(x, python) \u2295 WrittenIn(x, c++)))",
                " \u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))",
                " Use(sam, mac)",
                " Use(sam, mac) \u2192 \u2203x (Song(x) \u2227 Play(sam, x))",
                " \u2200x (\u00acBe(x, perfect) \u2192 \u00acPlay(sam, x))"
            ],
            "question": "The project Sam is doing is written in C++.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1128,
            "story_id": 405,
            "context": [
                "Everyone who works in person is a commuter.",
                "People either work in person or work from home.",
                "Everyone who works from home has a relaxed schedule.",
                "George is either a commuter or has a home office setup.",
                "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
            ],
            "context_fol": [
                "\u2200x (InPerson(x) \u2192 Commuter(x))",
                "\u2200x (InPerson(x) \u2295 FromHome(x))",
                "\u2200x (FromHome(x) \u2192 Relaxed(x))",
                "Commuter(george) \u2295 HomeOffice(george)",
                "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
            ],
            "question": "George is a person who works from home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 688,
            "story_id": 241,
            "context": [
                "All students learning piano can strike the right notes. ",
                "All students who can strike the right note can get the rhythms right. ",
                "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ",
                "Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ",
                "If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. ",
                "John is a student learning piano. ",
                "John does not find coordination between the left and the right hands challenging. "
            ],
            "context_fol": [
                "\u2200x (Student(x) \u2227 LearningPiano(x) \u2192 StrikeRightNotes(x))",
                "\u2200x (Student(x) \u2227 StrikeRightNotes(x) \u2192 GetRhythmRight(x))",
                "\u2200x (Student(x) \u2227 GetRhythmRight(x) \u2192 StartCoordination(x))",
                "\u2200x (Student(x) \u2227 StartCoordination(x) \u2192 GoodAtCoordination(x) \u2295 FindCoordinationChallenging(x))",
                "StrikeRightNotes(john) \u2227 GetRhythmRight(john) \u2227 GoodAtCoordination(john) \u2192 PutEmotion(john)",
                "Student(john) \u2227 LearningPiano(john)",
                "\u00acFindCoordinationChallenging(john)"
            ],
            "question": "John can get the rhythms right.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "163": [
        {
            "example_id": 1429,
            "story_id": 486,
            "context": [
                "Everything is either big or small.",
                "All big things are heavy. ",
                "All small things are light. ",
                "All heavy things are still.",
                "All light things are unstable.",
                "All unstable things are changing.",
                "All unstable things are kinetic. ",
                "A bird is not both heavy and still."
            ],
            "context_fol": [
                "\u2200x (Big(x) \u2295 Small(x))",
                "\u2200x (Big(x) \u2192 Heavy(x))",
                "\u2200x (Small(x) \u2192 Light(x))",
                "\u2200x (Heavy(x) \u2192 Still(x))",
                "\u2200x (Light(x) \u2192 Unstable(x))",
                "\u2200x (Unstable(x) \u2192 Changing(x))",
                "\u2200x (Unstable(x) \u2192 Kinetic(x))",
                "\u00ac(Heavy(bird) \u2227 Still(bird))"
            ],
            "question": "A bird is still.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1282,
            "story_id": 444,
            "context": [
                "All birds have wings.",
                "No animal with wings is a reptile.",
                "Some animals that fly are birds.",
                "If something is an iguana, then it is a reptile.",
                "John is neither an iguana nor a bird."
            ],
            "context_fol": [
                "\u2200x (Bird(x) \u2192 Winged(x))",
                "\u2200x (Winged(x) \u2192 \u00acReptile(x))",
                "\u2203x (Fly(x) \u2227 Bird(x))",
                "\u2200x (Iguana(x) \u2192 Reptile(x))",
                "\u00acIguana(john) \u2295 Bird(john)"
            ],
            "question": "John is a reptile.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1300,
            "story_id": 450,
            "context": [
                "Every swimmer can go underwater.",
                "Everyone that eats fish they catch themselves is a swimmer.",
                "Every penguin eats fish they catch themselves.",
                "All nonflying birds in Antarctica are penguins.",
                "Fido is a penguin or a swimmer."
            ],
            "context_fol": [
                "\u2200x (Swimmer(x) \u2192 GoesUnderwater(x))",
                "\u2200x (EatsFishCaughtThemselves(x) \u2192 Swimmer(x))",
                "\u2200x (Penguin(x) \u2192 EatsFishCaughtThemselves(x))",
                "\u2200x (NonFlyingBirdAntartica(x) \u2192 Penguin(x))",
                "Penguin(fido) \u2228 Swimmer(fido)"
            ],
            "question": "Fido eats fish they catch themselves.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "164": [
        {
            "example_id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, amcalist)",
                "Prefer(peter, tvseries)"
            ],
            "question": "James is not able to watch 3 movies every week without any additional fees.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1197,
            "story_id": 422,
            "context": [
                "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week",
                "Customers either subscribe to AMC service or HBO service. ",
                "Customers who prefer TV series more and will not watch TV series in cinemas.",
                "All customers who subscribe to HBO services prefer TV series to movies. ",
                "James watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (AMC(x) \u2228 HBO(x))",
                "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
                "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
                "WatchTVInCinema(james)"
            ],
            "question": "James goes to cinemas every week.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 713,
            "story_id": 264,
            "context": [
                "No television stars are certified public accountants.",
                "All certified public accountants have good business sense."
            ],
            "context_fol": [
                "\u2200x (TelevisionStar(x) \u2192 \u00acCertifiedPublicAccoutant(x))",
                "\u2200x (CertifiedPublicAccoutant(x) \u2192 GoodBusinessSense(x))"
            ],
            "question": "All television stars have good business sense.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "165": [
        {
            "example_id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, amcalist)",
                "Prefer(peter, tvseries)"
            ],
            "question": "James is not able to watch 3 movies every week without any additional fees.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1197,
            "story_id": 422,
            "context": [
                "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week",
                "Customers either subscribe to AMC service or HBO service. ",
                "Customers who prefer TV series more and will not watch TV series in cinemas.",
                "All customers who subscribe to HBO services prefer TV series to movies. ",
                "James watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (AMC(x) \u2228 HBO(x))",
                "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
                "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
                "WatchTVInCinema(james)"
            ],
            "question": "James goes to cinemas every week.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 713,
            "story_id": 264,
            "context": [
                "No television stars are certified public accountants.",
                "All certified public accountants have good business sense."
            ],
            "context_fol": [
                "\u2200x (TelevisionStar(x) \u2192 \u00acCertifiedPublicAccoutant(x))",
                "\u2200x (CertifiedPublicAccoutant(x) \u2192 GoodBusinessSense(x))"
            ],
            "question": "All television stars have good business sense.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "166": [
        {
            "example_id": 63,
            "story_id": 22,
            "context": [
                "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week. ",
                "Customers who prefer TV series will not watch TV series in cinemas.",
                "James watches TV series in cinemas. ",
                "James subscribes to AMC A List.",
                "Peter prefers TV series."
            ],
            "context_fol": [
                "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
                "WatchTVIn(james, cinemas)",
                "SubscribedTo(james, amcalist)",
                "Prefer(peter, tvseries)"
            ],
            "question": "James is not able to watch 3 movies every week without any additional fees.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1197,
            "story_id": 422,
            "context": [
                "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
                "Some customers go to cinemas every week",
                "Customers either subscribe to AMC service or HBO service. ",
                "Customers who prefer TV series more and will not watch TV series in cinemas.",
                "All customers who subscribe to HBO services prefer TV series to movies. ",
                "James watches TV series in cinemas. "
            ],
            "context_fol": [
                "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
                "\u2203x (CinemaEveryWeek(x))",
                "\u2200x (AMC(x) \u2228 HBO(x))",
                "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
                "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
                "WatchTVInCinema(james)"
            ],
            "question": "James goes to cinemas every week.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 713,
            "story_id": 264,
            "context": [
                "No television stars are certified public accountants.",
                "All certified public accountants have good business sense."
            ],
            "context_fol": [
                "\u2200x (TelevisionStar(x) \u2192 \u00acCertifiedPublicAccoutant(x))",
                "\u2200x (CertifiedPublicAccoutant(x) \u2192 GoodBusinessSense(x))"
            ],
            "question": "All television stars have good business sense.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "167": [
        {
            "example_id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x (Musician(x) \u2192 Love(x, music))",
                "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 229,
            "story_id": 75,
            "context": [
                "Robert Zimmer was born in Germany.",
                "Robert Zimmer is an essayist.",
                "Robert Zimmer was born in 1953.",
                "Every essayist is a writer.",
                "Every person born in Germany is German."
            ],
            "context_fol": [
                "BornInGermany(robertZimmer)",
                "IsEssayist(robertZimmer)",
                "BornIn(robertZimmer, year1953)",
                "\u2200x (IsEssayist(x) \u2192 IsWriter(x))",
                "\u2200x (BornInGermany(x) \u2192 IsGerman(x))"
            ],
            "question": "Robert Zimmer is German.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 51,
            "story_id": 18,
            "context": [
                "Miroslav Fiedler was a Czech mathematician.",
                "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
                "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
                "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."
            ],
            "context_fol": [
                "Czech(miroslavfiedler) \u2227 Mathematician(miroslavfiedler)",
                "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
                "HonoredBy(miroslavfiedler, fiedlerEigenvalue)",
                "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"
            ],
            "question": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "168": [
        {
            "example_id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x (Musician(x) \u2192 Love(x, music))",
                "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 229,
            "story_id": 75,
            "context": [
                "Robert Zimmer was born in Germany.",
                "Robert Zimmer is an essayist.",
                "Robert Zimmer was born in 1953.",
                "Every essayist is a writer.",
                "Every person born in Germany is German."
            ],
            "context_fol": [
                "BornInGermany(robertZimmer)",
                "IsEssayist(robertZimmer)",
                "BornIn(robertZimmer, year1953)",
                "\u2200x (IsEssayist(x) \u2192 IsWriter(x))",
                "\u2200x (BornInGermany(x) \u2192 IsGerman(x))"
            ],
            "question": "Robert Zimmer is German.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 51,
            "story_id": 18,
            "context": [
                "Miroslav Fiedler was a Czech mathematician.",
                "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
                "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
                "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."
            ],
            "context_fol": [
                "Czech(miroslavfiedler) \u2227 Mathematician(miroslavfiedler)",
                "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
                "HonoredBy(miroslavfiedler, fiedlerEigenvalue)",
                "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"
            ],
            "question": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "169": [
        {
            "example_id": 20,
            "story_id": 8,
            "context": [
                "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
                "Any choral conductor is a musician.",
                "Some musicians love music.",
                "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
            ],
            "context_fol": [
                "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)",
                "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
                "\u2203x (Musician(x) \u2192 Love(x, music))",
                "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)"
            ],
            "question": "Miroslav Venhoda loved music.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 229,
            "story_id": 75,
            "context": [
                "Robert Zimmer was born in Germany.",
                "Robert Zimmer is an essayist.",
                "Robert Zimmer was born in 1953.",
                "Every essayist is a writer.",
                "Every person born in Germany is German."
            ],
            "context_fol": [
                "BornInGermany(robertZimmer)",
                "IsEssayist(robertZimmer)",
                "BornIn(robertZimmer, year1953)",
                "\u2200x (IsEssayist(x) \u2192 IsWriter(x))",
                "\u2200x (BornInGermany(x) \u2192 IsGerman(x))"
            ],
            "question": "Robert Zimmer is German.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 51,
            "story_id": 18,
            "context": [
                "Miroslav Fiedler was a Czech mathematician.",
                "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
                "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
                "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."
            ],
            "context_fol": [
                "Czech(miroslavfiedler) \u2227 Mathematician(miroslavfiedler)",
                "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
                "HonoredBy(miroslavfiedler, fiedlerEigenvalue)",
                "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"
            ],
            "question": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "170": [
        {
            "example_id": 815,
            "story_id": 320,
            "context": [
                "All cancers are malignant tumors.",
                "No malignant tumor can be treated at home.",
                "All colorectal cancer is cancer.",
                "Having a cold can be treated at home.",
                "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
            ],
            "context_fol": [
                "\u2200x (Cancer(x) \u2192 MalignantTumor(x))",
                "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))",
                "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))",
                "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))",
                "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))"
            ],
            "question": "Breast cancer can be treated at home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1040,
            "story_id": 387,
            "context": [
                "If something requires a medical diagnosis, then lab tests or imaging is required. ",
                "All rare diseases require a medical diagnosis.",
                "If something is mild, then no lab tests or imaging is required. ",
                "All blood cancers are rare diseases.",
                "All Leukemia is blood cancer. ",
                "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
            ],
            "context_fol": [
                "\u2200x (RequiresAMedicalDiagnosis(x) \u2192 LabTestsOrImagingRequired(x)) ",
                "\u2200x (RareDiseases(x) \u2192 RequiresAMedicalDiagnosis(x))",
                "\u2200x (Mild(x) \u2192 \u00acLabTestsOrImagingRequired(x)) ",
                "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))",
                "\u2200x (Leukemia(x) \u2192 BloodCancer(x))",
                "\u00ac(BloodCancer(bladderCancer) \u2295 Leukemia(bladderCancer)) \u2192 Leukemia(bladderCancer)"
            ],
            "question": "Bladder cancer is mild.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 673,
            "story_id": 236,
            "context": [
                "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ",
                "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
                "P values are thresholds for belief, not metrics of effect. "
            ],
            "context_fol": [
                "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)",
                " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
                " \u2200x (PValue(x) \u2192 ThresholdsForBelief(x) \u2227 \u00acMetricsOfEffect(x))"
            ],
            "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "171": [
        {
            "example_id": 815,
            "story_id": 320,
            "context": [
                "All cancers are malignant tumors.",
                "No malignant tumor can be treated at home.",
                "All colorectal cancer is cancer.",
                "Having a cold can be treated at home.",
                "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
            ],
            "context_fol": [
                "\u2200x (Cancer(x) \u2192 MalignantTumor(x))",
                "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))",
                "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))",
                "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))",
                "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))"
            ],
            "question": "Breast cancer can be treated at home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1040,
            "story_id": 387,
            "context": [
                "If something requires a medical diagnosis, then lab tests or imaging is required. ",
                "All rare diseases require a medical diagnosis.",
                "If something is mild, then no lab tests or imaging is required. ",
                "All blood cancers are rare diseases.",
                "All Leukemia is blood cancer. ",
                "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
            ],
            "context_fol": [
                "\u2200x (RequiresAMedicalDiagnosis(x) \u2192 LabTestsOrImagingRequired(x)) ",
                "\u2200x (RareDiseases(x) \u2192 RequiresAMedicalDiagnosis(x))",
                "\u2200x (Mild(x) \u2192 \u00acLabTestsOrImagingRequired(x)) ",
                "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))",
                "\u2200x (Leukemia(x) \u2192 BloodCancer(x))",
                "\u00ac(BloodCancer(bladderCancer) \u2295 Leukemia(bladderCancer)) \u2192 Leukemia(bladderCancer)"
            ],
            "question": "Bladder cancer is mild.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 673,
            "story_id": 236,
            "context": [
                "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ",
                "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
                "P values are thresholds for belief, not metrics of effect. "
            ],
            "context_fol": [
                "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)",
                " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
                " \u2200x (PValue(x) \u2192 ThresholdsForBelief(x) \u2227 \u00acMetricsOfEffect(x))"
            ],
            "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "172": [
        {
            "example_id": 815,
            "story_id": 320,
            "context": [
                "All cancers are malignant tumors.",
                "No malignant tumor can be treated at home.",
                "All colorectal cancer is cancer.",
                "Having a cold can be treated at home.",
                "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
            ],
            "context_fol": [
                "\u2200x (Cancer(x) \u2192 MalignantTumor(x))",
                "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))",
                "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))",
                "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))",
                "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))"
            ],
            "question": "Breast cancer can be treated at home.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1040,
            "story_id": 387,
            "context": [
                "If something requires a medical diagnosis, then lab tests or imaging is required. ",
                "All rare diseases require a medical diagnosis.",
                "If something is mild, then no lab tests or imaging is required. ",
                "All blood cancers are rare diseases.",
                "All Leukemia is blood cancer. ",
                "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
            ],
            "context_fol": [
                "\u2200x (RequiresAMedicalDiagnosis(x) \u2192 LabTestsOrImagingRequired(x)) ",
                "\u2200x (RareDiseases(x) \u2192 RequiresAMedicalDiagnosis(x))",
                "\u2200x (Mild(x) \u2192 \u00acLabTestsOrImagingRequired(x)) ",
                "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))",
                "\u2200x (Leukemia(x) \u2192 BloodCancer(x))",
                "\u00ac(BloodCancer(bladderCancer) \u2295 Leukemia(bladderCancer)) \u2192 Leukemia(bladderCancer)"
            ],
            "question": "Bladder cancer is mild.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 673,
            "story_id": 236,
            "context": [
                "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ",
                "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
                "P values are thresholds for belief, not metrics of effect. "
            ],
            "context_fol": [
                "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)",
                " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
                " \u2200x (PValue(x) \u2192 ThresholdsForBelief(x) \u2227 \u00acMetricsOfEffect(x))"
            ],
            "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "173": [
        {
            "example_id": 978,
            "story_id": 366,
            "context": [
                "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
                "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
                "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
            ],
            "context_fol": [
                "\u2200x (Kombucha(x) \u2228 CocaCola(x))",
                "\u2200x (CocaCola(x) \u2192 BusyParents(x))",
                "\u2200x (CocaCola(x) \u2192 Dentist(x))",
                "\u2200x (BusyParents(x) \u2192 Erratic(x))",
                "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))",
                "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))"
            ],
            "question": "Franny has to visit the dentist frequently.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1004,
            "story_id": 375,
            "context": [
                "All people who grow their own fresh vegetables in their home garden also have ample space.",
                "If people are young working professionals who live in large cities, then they do not have ample space.",
                "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
                "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
                "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
                "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
            ],
            "context_fol": [
                "\u2200x (Garden(x) \u2192 Space(x))",
                "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
                "\u2200x (Takeout(x) \u2192 Garden(x))",
                "\u2200x (GoingOut(x) \u2192 Takeout(x))",
                "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
                "Garden(michael) \u2228 Homecooked(michael)"
            ],
            "question": "Michael enjoys going out often to restaurants with friends.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 926,
            "story_id": 348,
            "context": [
                "All young adults go on a diet.",
                "All college students are young adults.",
                "All Yale students are college students.",
                "Someone is either a Yale student or a Harvard student.",
                "All Harvard students are diligent.",
                "If Susan is a Harvard student, then she is a young adult.",
                "If Susan is a Yale student, then she does not go on a diet."
            ],
            "context_fol": [
                "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))",
                "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))",
                "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))",
                "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))",
                "\u2200x (HarvardStudent(x) \u2192 Diligent(x))",
                "HarvardStudent(susan) \u2192 YoungAdult(susan)",
                "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)"
            ],
            "question": "Susan is a college student.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "174": [
        {
            "example_id": 978,
            "story_id": 366,
            "context": [
                "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
                "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
                "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
            ],
            "context_fol": [
                "\u2200x (Kombucha(x) \u2228 CocaCola(x))",
                "\u2200x (CocaCola(x) \u2192 BusyParents(x))",
                "\u2200x (CocaCola(x) \u2192 Dentist(x))",
                "\u2200x (BusyParents(x) \u2192 Erratic(x))",
                "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))",
                "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))"
            ],
            "question": "Franny has to visit the dentist frequently.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1004,
            "story_id": 375,
            "context": [
                "All people who grow their own fresh vegetables in their home garden also have ample space.",
                "If people are young working professionals who live in large cities, then they do not have ample space.",
                "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
                "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
                "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
                "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
            ],
            "context_fol": [
                "\u2200x (Garden(x) \u2192 Space(x))",
                "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
                "\u2200x (Takeout(x) \u2192 Garden(x))",
                "\u2200x (GoingOut(x) \u2192 Takeout(x))",
                "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
                "Garden(michael) \u2228 Homecooked(michael)"
            ],
            "question": "Michael enjoys going out often to restaurants with friends.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 926,
            "story_id": 348,
            "context": [
                "All young adults go on a diet.",
                "All college students are young adults.",
                "All Yale students are college students.",
                "Someone is either a Yale student or a Harvard student.",
                "All Harvard students are diligent.",
                "If Susan is a Harvard student, then she is a young adult.",
                "If Susan is a Yale student, then she does not go on a diet."
            ],
            "context_fol": [
                "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))",
                "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))",
                "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))",
                "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))",
                "\u2200x (HarvardStudent(x) \u2192 Diligent(x))",
                "HarvardStudent(susan) \u2192 YoungAdult(susan)",
                "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)"
            ],
            "question": "Susan is a college student.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "175": [
        {
            "example_id": 978,
            "story_id": 366,
            "context": [
                "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
                "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
                "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
                "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
                "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
                "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
            ],
            "context_fol": [
                "\u2200x (Kombucha(x) \u2228 CocaCola(x))",
                "\u2200x (CocaCola(x) \u2192 BusyParents(x))",
                "\u2200x (CocaCola(x) \u2192 Dentist(x))",
                "\u2200x (BusyParents(x) \u2192 Erratic(x))",
                "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))",
                "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))"
            ],
            "question": "Franny has to visit the dentist frequently.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1004,
            "story_id": 375,
            "context": [
                "All people who grow their own fresh vegetables in their home garden also have ample space.",
                "If people are young working professionals who live in large cities, then they do not have ample space.",
                "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
                "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
                "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
                "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
            ],
            "context_fol": [
                "\u2200x (Garden(x) \u2192 Space(x))",
                "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
                "\u2200x (Takeout(x) \u2192 Garden(x))",
                "\u2200x (GoingOut(x) \u2192 Takeout(x))",
                "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
                "Garden(michael) \u2228 Homecooked(michael)"
            ],
            "question": "Michael enjoys going out often to restaurants with friends.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 926,
            "story_id": 348,
            "context": [
                "All young adults go on a diet.",
                "All college students are young adults.",
                "All Yale students are college students.",
                "Someone is either a Yale student or a Harvard student.",
                "All Harvard students are diligent.",
                "If Susan is a Harvard student, then she is a young adult.",
                "If Susan is a Yale student, then she does not go on a diet."
            ],
            "context_fol": [
                "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))",
                "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))",
                "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))",
                "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))",
                "\u2200x (HarvardStudent(x) \u2192 Diligent(x))",
                "HarvardStudent(susan) \u2192 YoungAdult(susan)",
                "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)"
            ],
            "question": "Susan is a college student.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "176": [
        {
            "example_id": 196,
            "story_id": 66,
            "context": [
                "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state which is in US, the city is a US city.",
                "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
                "LA is a city in California(CA).",
                "Atlanta is a US city.",
                "Atlanta is in Georgia(CA).",
                "CA is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States hold the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))",
                "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))",
                "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))",
                "SummerOlympicsCity(y2028, la)",
                "CityInState(la, ca)",
                "CityInCountry(atlanta, us)",
                "StateInCountry(ca, us)",
                "CityInState(atlanta, ga)",
                "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)",
                "SummerOlympicsCity(y1996, atlanta)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 659,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
                "87 countries won at least one medal during the 2008 Games."
            ],
            "context_fol": [
                "HeldIn(summer2008olympics, beijingchina)",
                "SecondToBe(summer2008olympics, heldincommuniststate)",
                "Won(china, mostgoldmedals)",
                "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)",
                "Placed(russia, thirdingoldmedals)",
                "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))",
                "\u2203x (Country(x) \u2227 Won(x, medal))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 918,
            "story_id": 346,
            "context": [
                "All athletes are good at sports.",
                "All Olympic gold medal winners are good athletes.",
                "No scientists are good at sports.",
                "All Nobel laureates are scientists.",
                "Amy is good at sports or Amy is an Olympic gold medal winner.",
                "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 GoodAtSports(x))",
                "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))",
                "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))",
                "\u2200x (NobelLaureate(x) \u2192 Scientist(x))",
                "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)",
                "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
            ],
            "question": "Amy is an athlete.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "177": [
        {
            "example_id": 196,
            "story_id": 66,
            "context": [
                "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state which is in US, the city is a US city.",
                "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
                "LA is a city in California(CA).",
                "Atlanta is a US city.",
                "Atlanta is in Georgia(CA).",
                "CA is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States hold the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))",
                "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))",
                "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))",
                "SummerOlympicsCity(y2028, la)",
                "CityInState(la, ca)",
                "CityInCountry(atlanta, us)",
                "StateInCountry(ca, us)",
                "CityInState(atlanta, ga)",
                "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)",
                "SummerOlympicsCity(y1996, atlanta)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 659,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
                "87 countries won at least one medal during the 2008 Games."
            ],
            "context_fol": [
                "HeldIn(summer2008olympics, beijingchina)",
                "SecondToBe(summer2008olympics, heldincommuniststate)",
                "Won(china, mostgoldmedals)",
                "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)",
                "Placed(russia, thirdingoldmedals)",
                "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))",
                "\u2203x (Country(x) \u2227 Won(x, medal))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 918,
            "story_id": 346,
            "context": [
                "All athletes are good at sports.",
                "All Olympic gold medal winners are good athletes.",
                "No scientists are good at sports.",
                "All Nobel laureates are scientists.",
                "Amy is good at sports or Amy is an Olympic gold medal winner.",
                "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 GoodAtSports(x))",
                "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))",
                "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))",
                "\u2200x (NobelLaureate(x) \u2192 Scientist(x))",
                "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)",
                "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
            ],
            "question": "Amy is an athlete.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "178": [
        {
            "example_id": 196,
            "story_id": 66,
            "context": [
                "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
                "If a city is in a state which is in US, the city is a US city.",
                "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
                "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
                "LA is a city in California(CA).",
                "Atlanta is a US city.",
                "Atlanta is in Georgia(CA).",
                "CA is a state in the United States.",
                "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
                "Atlanta in the United States hold the 1996 Summer Olympics."
            ],
            "context_fol": [
                "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))",
                "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))",
                "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))",
                "SummerOlympicsCity(y2028, la)",
                "CityInState(la, ca)",
                "CityInCountry(atlanta, us)",
                "StateInCountry(ca, us)",
                "CityInState(atlanta, ga)",
                "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)",
                "SummerOlympicsCity(y1996, atlanta)"
            ],
            "question": "The 2028 Summer Olympics will take place in the US.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 659,
            "story_id": 231,
            "context": [
                "The 2008 Summer Olympics were held in Beijing, China.",
                "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
                "China won the most gold medals (48) in the 2008 Summer Olympics.",
                "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
                "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
                "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
                "87 countries won at least one medal during the 2008 Games."
            ],
            "context_fol": [
                "HeldIn(summer2008olympics, beijingchina)",
                "SecondToBe(summer2008olympics, heldincommuniststate)",
                "Won(china, mostgoldmedals)",
                "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)",
                "Placed(russia, thirdingoldmedals)",
                "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))",
                "\u2203x (Country(x) \u2227 Won(x, medal))"
            ],
            "question": "Russia did not win fewer gold medals than China.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 918,
            "story_id": 346,
            "context": [
                "All athletes are good at sports.",
                "All Olympic gold medal winners are good athletes.",
                "No scientists are good at sports.",
                "All Nobel laureates are scientists.",
                "Amy is good at sports or Amy is an Olympic gold medal winner.",
                "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner."
            ],
            "context_fol": [
                "\u2200x (Athlete(x) \u2192 GoodAtSports(x))",
                "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))",
                "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))",
                "\u2200x (NobelLaureate(x) \u2192 Scientist(x))",
                "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)",
                "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
            ],
            "question": "Amy is an athlete.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "179": [
        {
            "example_id": 787,
            "story_id": 314,
            "context": [
                "No animals are plants. ",
                "All humans are animals.",
                "All pupils are human.",
                "All flowers are plants.",
                "If Jack is a human or a flower, then Jack is a human and a flower."
            ],
            "context_fol": [
                "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
                "\u2200x (Human(x) \u2192 Animal(x))",
                "\u2200x (Pupil(x) \u2192 Human(x))",
                "\u2200x (Flower(x) \u2192 Plant(x))",
                "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)"
            ],
            "question": "Jack is a pupil.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 1377,
            "story_id": 474,
            "context": [
                "All humans eat.",
                "If something eats, then it is not a plant.",
                "A thing is either plant or animal.",
                "All goats are animals.",
                "No dirt is an animal.",
                "Hulu is a goat or a human."
            ],
            "context_fol": [
                "\u2200x (Human(x) \u2192 Eat(x))",
                "\u2200x (Eat(x) \u2192 \u00acPlant(x))",
                "\u2200x (Plant(x) \u2228 Animal(x))",
                "\u2200x (Goat(x) \u2192 Animal(x))",
                "\u2200x (Dirt(x) \u2192 \u00acAnimal(x))",
                "Goat(hulu) \u2228 Human(hulu)"
            ],
            "question": "Hulu eats.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 921,
            "story_id": 347,
            "context": [
                "All mammals are living beings.",
                "All elephants are mammals.",
                "All baby elephants are elephants.",
                "Some baby elephants are sleepy.",
                "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
                "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
            ],
            "context_fol": [
                "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
                "\u2200x (Elephant(x) \u2192 Mammal(x))",
                "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
                "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
                "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
                "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
            ],
            "question": "Jumbo is sleepy.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "180": [
        {
            "example_id": 3,
            "story_id": 1,
            "context": [
                "Mary has the flu.",
                "Flu and influenza are the same disease.",
                "Susan doesn't have influenza."
            ],
            "context_fol": [
                "Have(mary, flu)",
                "\u2200x (Have(x, flu) \u2194 Have(x, influenza))",
                "\u00acHave(susan, influenza)"
            ],
            "question": "Either Mary or Susan has influenza.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 455,
            "story_id": 158,
            "context": [
                "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.",
                "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.",
                "Cities in Florida that they are interested in are Orlando and Miami.",
                "Mr. Smith has been to two cities in California.",
                "Mrs. Smith has been to one city in Florida."
            ],
            "context_fol": [
                "\u2200x (WantToGo(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 (NeverGo(x)))",
                "\u2200x (((SanFrancisco(x) \u2228 LosAngeles(x) \u2228 SanDiego(x)) \u2227 California(x)) \u2192 WantToGo(x))",
                "\u2200x ((Orlando(x) \u2228 Miami(x)) \u2227 Florida(x)) \u2192 WantToGo(x))",
                "CaliforniaCityVisited(mr.smith, two)",
                "FloridaCityVisited(mrs.smith, one)"
            ],
            "question": "Mr. Smith has been to San Francisco.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 482,
            "story_id": 167,
            "context": [
                "If you go somewhere by train, you will not lose time.",
                "If you go somewhere by car and meet traffic jam, you will lose time.",
                "If you lose time, you will be late for work.",
                "Mary can get from New Haven to New York City either by train or car.",
                "Mary is late for work."
            ],
            "context_fol": [
                "\u2200x (Train(x) \u2192 \u00acLoseTime(x))",
                "\u2200x ((Car(x) \u2227 MeetJam(x)) \u2192 LoseTime(x))",
                "\u2200x (LoseTime(x) \u2194 LateForWork(x))",
                "Train(mary) \u2295 Car(mary)",
                "LateForWork(mary)"
            ],
            "question": "Mary gets from New Haven to New York City by train.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "181": [
        {
            "example_id": 3,
            "story_id": 1,
            "context": [
                "Mary has the flu.",
                "Flu and influenza are the same disease.",
                "Susan doesn't have influenza."
            ],
            "context_fol": [
                "Have(mary, flu)",
                "\u2200x (Have(x, flu) \u2194 Have(x, influenza))",
                "\u00acHave(susan, influenza)"
            ],
            "question": "Either Mary or Susan has influenza.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 455,
            "story_id": 158,
            "context": [
                "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.",
                "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.",
                "Cities in Florida that they are interested in are Orlando and Miami.",
                "Mr. Smith has been to two cities in California.",
                "Mrs. Smith has been to one city in Florida."
            ],
            "context_fol": [
                "\u2200x (WantToGo(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 (NeverGo(x)))",
                "\u2200x (((SanFrancisco(x) \u2228 LosAngeles(x) \u2228 SanDiego(x)) \u2227 California(x)) \u2192 WantToGo(x))",
                "\u2200x ((Orlando(x) \u2228 Miami(x)) \u2227 Florida(x)) \u2192 WantToGo(x))",
                "CaliforniaCityVisited(mr.smith, two)",
                "FloridaCityVisited(mrs.smith, one)"
            ],
            "question": "Mr. Smith has been to San Francisco.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 482,
            "story_id": 167,
            "context": [
                "If you go somewhere by train, you will not lose time.",
                "If you go somewhere by car and meet traffic jam, you will lose time.",
                "If you lose time, you will be late for work.",
                "Mary can get from New Haven to New York City either by train or car.",
                "Mary is late for work."
            ],
            "context_fol": [
                "\u2200x (Train(x) \u2192 \u00acLoseTime(x))",
                "\u2200x ((Car(x) \u2227 MeetJam(x)) \u2192 LoseTime(x))",
                "\u2200x (LoseTime(x) \u2194 LateForWork(x))",
                "Train(mary) \u2295 Car(mary)",
                "LateForWork(mary)"
            ],
            "question": "Mary gets from New Haven to New York City by train.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "182": [
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1095,
            "story_id": 399,
            "context": [
                "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
                "If a person values physical touch as an especially important love language, then they are good with pets.",
                "No people that are good with pets are scared of animals.",
                "People are either scared of animals or love animals.",
                "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
            ],
            "context_fol": [
                "\u2200x (Physical(x) \u2228 Words(x))",
                "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
                "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
                "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
                "Physical(adam) \u2295 LoveAnimals(adam)"
            ],
            "question": "Adam is scared of animals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 863,
            "story_id": 332,
            "context": [
                "If people own at least one pet, then they do not have tidy houses.",
                "If people grew up with childhood pets, then they own at least one pet.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people live in the suburbs, then they have tidy houses.",
                "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
            ],
            "context_fol": [
                "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
                "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
                "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
                "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
                "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
            ],
            "question": "Jack lives in the suburbs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "183": [
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1095,
            "story_id": 399,
            "context": [
                "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
                "If a person values physical touch as an especially important love language, then they are good with pets.",
                "No people that are good with pets are scared of animals.",
                "People are either scared of animals or love animals.",
                "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
            ],
            "context_fol": [
                "\u2200x (Physical(x) \u2228 Words(x))",
                "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
                "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
                "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
                "Physical(adam) \u2295 LoveAnimals(adam)"
            ],
            "question": "Adam is scared of animals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 863,
            "story_id": 332,
            "context": [
                "If people own at least one pet, then they do not have tidy houses.",
                "If people grew up with childhood pets, then they own at least one pet.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people live in the suburbs, then they have tidy houses.",
                "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
            ],
            "context_fol": [
                "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
                "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
                "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
                "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
                "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
            ],
            "question": "Jack lives in the suburbs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "184": [
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1095,
            "story_id": 399,
            "context": [
                "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
                "If a person values physical touch as an especially important love language, then they are good with pets.",
                "No people that are good with pets are scared of animals.",
                "People are either scared of animals or love animals.",
                "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
            ],
            "context_fol": [
                "\u2200x (Physical(x) \u2228 Words(x))",
                "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
                "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
                "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
                "Physical(adam) \u2295 LoveAnimals(adam)"
            ],
            "question": "Adam is scared of animals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 863,
            "story_id": 332,
            "context": [
                "If people own at least one pet, then they do not have tidy houses.",
                "If people grew up with childhood pets, then they own at least one pet.",
                "If people hire a maid or cleaning service, then they have tidy houses.",
                "If people live in the suburbs, then they have tidy houses.",
                "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
            ],
            "context_fol": [
                "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
                "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
                "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
                "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
                "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
            ],
            "question": "Jack lives in the suburbs.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "185": [
        {
            "example_id": 209,
            "story_id": 70,
            "context": [
                "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
                "One of the word-setters of My Word! was Michael O'Donnell.",
                "The magazine World Medicine was edited by Michael O'Donnell.",
                "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
            ],
            "context_fol": [
                "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
                "WordSetter(michael)",
                "Magazine(worldmedicine) \u2227 EditedBy(worldmedicine, michael)",
                "\u2203x (BornIn(michael, yorkshire) \u2227 Son(michael, x) \u2227 GeneralPractitioner(x))"
            ],
            "question": "The son of a general practitioner was a word-setter of My Word!.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 139,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)",
                "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))",
                "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))"
            ],
            "question": "Douglas Adams is a writer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 681,
            "story_id": 238,
            "context": [
                "Daniel is a software engineer and he works at Palantir Technologies.",
                "Daniel studied bioengineering during his undergraduate at Rice University.",
                "Daniel\u2019s older sister works at Meta as a technical sourcer. ",
                "Daniel\u2019s dad and older sister both graduated from Stanford University.",
                "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis"
            ],
            "context_fol": [
                "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)",
                " StudiedBioengineering(daniel, riceUniversity)",
                " WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)",
                " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)",
                " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)"
            ],
            "question": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "186": [
        {
            "example_id": 209,
            "story_id": 70,
            "context": [
                "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
                "One of the word-setters of My Word! was Michael O'Donnell.",
                "The magazine World Medicine was edited by Michael O'Donnell.",
                "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
            ],
            "context_fol": [
                "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
                "WordSetter(michael)",
                "Magazine(worldmedicine) \u2227 EditedBy(worldmedicine, michael)",
                "\u2203x (BornIn(michael, yorkshire) \u2227 Son(michael, x) \u2227 GeneralPractitioner(x))"
            ],
            "question": "The son of a general practitioner was a word-setter of My Word!.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 139,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)",
                "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))",
                "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))"
            ],
            "question": "Douglas Adams is a writer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 681,
            "story_id": 238,
            "context": [
                "Daniel is a software engineer and he works at Palantir Technologies.",
                "Daniel studied bioengineering during his undergraduate at Rice University.",
                "Daniel\u2019s older sister works at Meta as a technical sourcer. ",
                "Daniel\u2019s dad and older sister both graduated from Stanford University.",
                "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis"
            ],
            "context_fol": [
                "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)",
                " StudiedBioengineering(daniel, riceUniversity)",
                " WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)",
                " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)",
                " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)"
            ],
            "question": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "187": [
        {
            "example_id": 209,
            "story_id": 70,
            "context": [
                "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
                "One of the word-setters of My Word! was Michael O'Donnell.",
                "The magazine World Medicine was edited by Michael O'Donnell.",
                "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
            ],
            "context_fol": [
                "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
                "WordSetter(michael)",
                "Magazine(worldmedicine) \u2227 EditedBy(worldmedicine, michael)",
                "\u2203x (BornIn(michael, yorkshire) \u2227 Son(michael, x) \u2227 GeneralPractitioner(x))"
            ],
            "question": "The son of a general practitioner was a word-setter of My Word!.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 139,
            "story_id": 48,
            "context": [
                "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
                "The Salmon of Doubt is about life experiences and technology.",
                "All authors are writers.",
                "Writers create innovative ideas.",
                "Some books that contain innovative ideas are about technology."
            ],
            "context_fol": [
                "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)",
                "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)",
                "\u2200x (Author(x) \u2192 Writer(x))",
                "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))",
                "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))"
            ],
            "question": "Douglas Adams is a writer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 681,
            "story_id": 238,
            "context": [
                "Daniel is a software engineer and he works at Palantir Technologies.",
                "Daniel studied bioengineering during his undergraduate at Rice University.",
                "Daniel\u2019s older sister works at Meta as a technical sourcer. ",
                "Daniel\u2019s dad and older sister both graduated from Stanford University.",
                "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis"
            ],
            "context_fol": [
                "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)",
                " StudiedBioengineering(daniel, riceUniversity)",
                " WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)",
                " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)",
                " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)"
            ],
            "question": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "188": [
        {
            "example_id": 845,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerback players are defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 839,
            "story_id": 326,
            "context": [
                "Some defenders are centerback.",
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "Stephen Curry is an NBA player."
            ],
            "context_fol": [
                "\u2203x (Defender(x) \u2227 Centerback(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "NBAPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 836,
            "story_id": 325,
            "context": [
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All centerbacks are defenders.",
                "All NBA players are professional basketball players.",
                "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
            ],
            "context_fol": [
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (CenterBack(x) \u2192 Defender(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
            ],
            "question": "Stephen Curry is a professional basketball player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "189": [
        {
            "example_id": 845,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerback players are defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 839,
            "story_id": 326,
            "context": [
                "Some defenders are centerback.",
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "Stephen Curry is an NBA player."
            ],
            "context_fol": [
                "\u2203x (Defender(x) \u2227 Centerback(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "NBAPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 836,
            "story_id": 325,
            "context": [
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All centerbacks are defenders.",
                "All NBA players are professional basketball players.",
                "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
            ],
            "context_fol": [
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (CenterBack(x) \u2192 Defender(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
            ],
            "question": "Stephen Curry is a professional basketball player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "190": [
        {
            "example_id": 845,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerback players are defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 839,
            "story_id": 326,
            "context": [
                "Some defenders are centerback.",
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "Stephen Curry is an NBA player."
            ],
            "context_fol": [
                "\u2203x (Defender(x) \u2227 Centerback(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "NBAPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 836,
            "story_id": 325,
            "context": [
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All centerbacks are defenders.",
                "All NBA players are professional basketball players.",
                "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
            ],
            "context_fol": [
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (CenterBack(x) \u2192 Defender(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
            ],
            "question": "Stephen Curry is a professional basketball player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "191": [
        {
            "example_id": 845,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerback players are defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 839,
            "story_id": 326,
            "context": [
                "Some defenders are centerback.",
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "Stephen Curry is an NBA player."
            ],
            "context_fol": [
                "\u2203x (Defender(x) \u2227 Centerback(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "NBAPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 836,
            "story_id": 325,
            "context": [
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All centerbacks are defenders.",
                "All NBA players are professional basketball players.",
                "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
            ],
            "context_fol": [
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (CenterBack(x) \u2192 Defender(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
            ],
            "question": "Stephen Curry is a professional basketball player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "192": [
        {
            "example_id": 845,
            "story_id": 328,
            "context": [
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "All defenders are soccer players.",
                "All centerback players are defenders.",
                "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
            ],
            "context_fol": [
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (Centerback(x) \u2192 Defender(x))",
                "(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is an NBA player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 839,
            "story_id": 326,
            "context": [
                "Some defenders are centerback.",
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All NBA players are professional basketball players.",
                "Stephen Curry is an NBA player."
            ],
            "context_fol": [
                "\u2203x (Defender(x) \u2227 Centerback(x))",
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "NBAPlayer(stephencurry)"
            ],
            "question": "Stephen Curry is a centerback.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 836,
            "story_id": 325,
            "context": [
                "All defenders are soccer players.",
                "No soccer players are professional basketball players.",
                "All centerbacks are defenders.",
                "All NBA players are professional basketball players.",
                "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
            ],
            "context_fol": [
                "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
                "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
                "\u2200x (CenterBack(x) \u2192 Defender(x))",
                "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
                "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
            ],
            "question": "Stephen Curry is a professional basketball player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        }
    ],
    "193": [
        {
            "example_id": 750,
            "story_id": 301,
            "context": [
                "When something is depressing, it is sad.",
                "V is depressing. "
            ],
            "context_fol": [
                "\u2200x (Depressing(x) \u2192 Sad(x))",
                "\u2200x (V(x) \u2192 Depressing(x))"
            ],
            "question": "V is invigorating",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 728,
            "story_id": 279,
            "context": [
                "Surprises are either fun or dreadful.",
                "All scares are surprises."
            ],
            "context_fol": [
                "\u2200x (Surprise(x) \u2192 (Fun(x) \u2295 Dreadful(x)))",
                "\u2200x (Scare(x) \u2192 Surprise(x))"
            ],
            "question": "All scares are fun.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 1013,
            "story_id": 378,
            "context": [
                "All people who attend weddings are getting married or have friends who are getting married.",
                "No preteens and other young children are getting married or have friends who are getting married.",
                "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
                "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
                "All people who are outgoing and very spirited are fond of large organized group functions.",
                "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
            ],
            "context_fol": [
                "\u2200x Weddings(x) \u2192 GettingMarried(x)",
                "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
                "\u2200x Celebrating(x) \u2192 Weddings(x)",
                "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
                "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
                "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
            ],
            "question": "Carol is outgoing and very spirited.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "194": [
        {
            "example_id": 654,
            "story_id": 229,
            "context": [
                "Barbara Ann Marshall is a former swimmer and former world record-holder.",
                "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
                "Barbara Ann Marshall's home country is the United States.",
                "All people who compete in the 1972 Summer Olympics represent their home country.",
                "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
                "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
                "Only relay swimmers who participated in the event final received medals."
            ],
            "context_fol": [
                "FormerSwimmer(barbaraannmarshall) \u2227 FormerWorldRecordHolder(barbaraannmarshall)",
                "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
                "HomeCountry(barbaraannmarshall, unitedstates)",
                "\u2200x \u2203y (ParticipatedIn(x, summer1972olympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))",
                "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)",
                "\u00acParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)",
                "\u2200x ((RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalheatfreerelay)) \u2194 \u00acRecieved(x, medal)))"
            ],
            "question": "Barbara Ann Marshall did not receive medals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 337,
            "story_id": 111,
            "context": [
                "Aberdeen won the cup in the 2013 final.",
                "Rangers won the cup in 2014 final.",
                "Aberdeen and Rangers are different teams.",
                "Different teams cannot win the same cup in a given year's final."
            ],
            "context_fol": [
                "WonCup(aberdeen, twentythirteen)",
                "WonCup(rangers, twentyfourteen)",
                "Different(aberdeen, rangers) \u2227 Different(rangers, aberdeen)",
                "\u2200x \u2200y \u2200z (Different(x, y)  \u2227 WonCup(x, z)  \u2192 \u00acWonCup(y, z))"
            ],
            "question": "Rangers won the cup in 2015.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 10,
            "story_id": 4,
            "context": [
                "S\u016bduva Marijampol\u0117 holds the Lithuanian Supercup.",
                "S\u016bduva Marijampol\u0117 is a soccer team."
            ],
            "context_fol": [
                "Hold(suduva, thelithuaniansupercup)",
                "SoccerTeam(suduva)"
            ],
            "question": "Some soccer team holds the Lithuanian Supercup.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "195": [
        {
            "example_id": 654,
            "story_id": 229,
            "context": [
                "Barbara Ann Marshall is a former swimmer and former world record-holder.",
                "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
                "Barbara Ann Marshall's home country is the United States.",
                "All people who compete in the 1972 Summer Olympics represent their home country.",
                "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
                "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
                "Only relay swimmers who participated in the event final received medals."
            ],
            "context_fol": [
                "FormerSwimmer(barbaraannmarshall) \u2227 FormerWorldRecordHolder(barbaraannmarshall)",
                "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
                "HomeCountry(barbaraannmarshall, unitedstates)",
                "\u2200x \u2203y (ParticipatedIn(x, summer1972olympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))",
                "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)",
                "\u00acParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)",
                "\u2200x ((RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalheatfreerelay)) \u2194 \u00acRecieved(x, medal)))"
            ],
            "question": "Barbara Ann Marshall did not receive medals.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 337,
            "story_id": 111,
            "context": [
                "Aberdeen won the cup in the 2013 final.",
                "Rangers won the cup in 2014 final.",
                "Aberdeen and Rangers are different teams.",
                "Different teams cannot win the same cup in a given year's final."
            ],
            "context_fol": [
                "WonCup(aberdeen, twentythirteen)",
                "WonCup(rangers, twentyfourteen)",
                "Different(aberdeen, rangers) \u2227 Different(rangers, aberdeen)",
                "\u2200x \u2200y \u2200z (Different(x, y)  \u2227 WonCup(x, z)  \u2192 \u00acWonCup(y, z))"
            ],
            "question": "Rangers won the cup in 2015.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "C"
        },
        {
            "example_id": 10,
            "story_id": 4,
            "context": [
                "S\u016bduva Marijampol\u0117 holds the Lithuanian Supercup.",
                "S\u016bduva Marijampol\u0117 is a soccer team."
            ],
            "context_fol": [
                "Hold(suduva, thelithuaniansupercup)",
                "SoccerTeam(suduva)"
            ],
            "question": "Some soccer team holds the Lithuanian Supercup.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "196": [
        {
            "example_id": 1374,
            "story_id": 473,
            "context": [
                "An animal is either a cat or a dog.",
                "All dogs bark.",
                "Ghosts do not exist.",
                "If something barks, then it is not alive.",
                "A thing is either alive or dead.",
                "Jojo is not dead."
            ],
            "context_fol": [
                "\u2200x (Cat(x) \u2295 Dog(x))",
                "\u2200x (Dog(x) \u2192 Bark(x))",
                "\u2200x (\u00acGhost(x))",
                "\u2200x (Bark(x) \u2192 \u00acAlive(x))",
                "\u2200x (Alive(x) \u2295 Dead(x))",
                "\u00acDead(jojo)"
            ],
            "question": "Jojo is a ghost.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1269,
            "story_id": 440,
            "context": [
                "All animals that are tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "Everything that is a husky is a dog.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2228 Cat(fido)"
            ],
            "question": "Fido is a husky.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "197": [
        {
            "example_id": 1374,
            "story_id": 473,
            "context": [
                "An animal is either a cat or a dog.",
                "All dogs bark.",
                "Ghosts do not exist.",
                "If something barks, then it is not alive.",
                "A thing is either alive or dead.",
                "Jojo is not dead."
            ],
            "context_fol": [
                "\u2200x (Cat(x) \u2295 Dog(x))",
                "\u2200x (Dog(x) \u2192 Bark(x))",
                "\u2200x (\u00acGhost(x))",
                "\u2200x (Bark(x) \u2192 \u00acAlive(x))",
                "\u2200x (Alive(x) \u2295 Dead(x))",
                "\u00acDead(jojo)"
            ],
            "question": "Jojo is a ghost.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1269,
            "story_id": 440,
            "context": [
                "All animals that are tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "Everything that is a husky is a dog.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2228 Cat(fido)"
            ],
            "question": "Fido is a husky.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "198": [
        {
            "example_id": 1374,
            "story_id": 473,
            "context": [
                "An animal is either a cat or a dog.",
                "All dogs bark.",
                "Ghosts do not exist.",
                "If something barks, then it is not alive.",
                "A thing is either alive or dead.",
                "Jojo is not dead."
            ],
            "context_fol": [
                "\u2200x (Cat(x) \u2295 Dog(x))",
                "\u2200x (Dog(x) \u2192 Bark(x))",
                "\u2200x (\u00acGhost(x))",
                "\u2200x (Bark(x) \u2192 \u00acAlive(x))",
                "\u2200x (Alive(x) \u2295 Dead(x))",
                "\u00acDead(jojo)"
            ],
            "question": "Jojo is a ghost.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        },
        {
            "example_id": 169,
            "story_id": 57,
            "context": [
                "All pets are animals.",
                "Pets can be either a dog or a cat.",
                "If a person has a pet, they care for that pet. ",
                "Dogs and Cats can be naughty. ",
                "Pets who are naughty are not liked as much. ",
                "Charlie has a naughty pet dog named Leo. "
            ],
            "context_fol": [
                "\u2200x (Pet(x) \u2192 Animal(x))",
                "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
                "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
                "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
                "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
                "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
            ],
            "question": "Leo is an animal.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 1269,
            "story_id": 440,
            "context": [
                "All animals that are tigers are cats.",
                "No cats are dogs.",
                "All Bengal tigers are tigers.",
                "Everything that is a husky is a dog.",
                "Fido is either a Bengal tiger or a cat."
            ],
            "context_fol": [
                "\u2200x (Tiger(x) \u2192 Cat(x))",
                "\u2200x (Cat(x) \u2192 \u00acDog(x))",
                "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
                "\u2200x (Husky(x) \u2192 Dog(x))",
                "BengalTiger(fido) \u2228 Cat(fido)"
            ],
            "question": "Fido is a husky.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "B"
        }
    ],
    "199": [
        {
            "example_id": 723,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adambuska) \u2227 European(adambuska)",
                "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 636,
            "story_id": 224,
            "context": [
                "Rhos Aelwyd F.C. is a Welsh football club.",
                "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
                "The Premier Division was won in 2005\u201306 by a team from Ponciau. ",
                "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.",
                "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. "
            ],
            "context_fol": [
                "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 BasedInPonciau(x) \u2227 Welsh(x))",
                "\u2200x (BasedInPonciau(x) \u2194 Rhosaelwydfc(x))",
                "\u2203x (BasedInPonciau(x) \u2227 WonPremierDivisionDuring(x, y2005))",
                "\u2200x (WonPremierDivisionDuring(x, y2009) \u2192 Promoted(x))",
                "\u2200x (WonPremierDivisionDuring(x, y2009) \u2194 WonPremierDivisionDuring(x, y2005))"
            ],
            "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 374,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use their both feet very efficiently.",
                "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
                "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))",
                "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))",
                "SoccerPlayer(ronaldo)",
                "Efficient(ronaldo, right)",
                "ScoreManyGoals(ronaldo, left)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "200": [
        {
            "example_id": 723,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adambuska) \u2227 European(adambuska)",
                "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 636,
            "story_id": 224,
            "context": [
                "Rhos Aelwyd F.C. is a Welsh football club.",
                "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
                "The Premier Division was won in 2005\u201306 by a team from Ponciau. ",
                "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.",
                "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. "
            ],
            "context_fol": [
                "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 BasedInPonciau(x) \u2227 Welsh(x))",
                "\u2200x (BasedInPonciau(x) \u2194 Rhosaelwydfc(x))",
                "\u2203x (BasedInPonciau(x) \u2227 WonPremierDivisionDuring(x, y2005))",
                "\u2200x (WonPremierDivisionDuring(x, y2009) \u2192 Promoted(x))",
                "\u2200x (WonPremierDivisionDuring(x, y2009) \u2194 WonPremierDivisionDuring(x, y2005))"
            ],
            "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 374,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use their both feet very efficiently.",
                "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
                "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))",
                "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))",
                "SoccerPlayer(ronaldo)",
                "Efficient(ronaldo, right)",
                "ScoreManyGoals(ronaldo, left)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "201": [
        {
            "example_id": 723,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adambuska) \u2227 European(adambuska)",
                "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 636,
            "story_id": 224,
            "context": [
                "Rhos Aelwyd F.C. is a Welsh football club.",
                "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
                "The Premier Division was won in 2005\u201306 by a team from Ponciau. ",
                "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.",
                "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. "
            ],
            "context_fol": [
                "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 BasedInPonciau(x) \u2227 Welsh(x))",
                "\u2200x (BasedInPonciau(x) \u2194 Rhosaelwydfc(x))",
                "\u2203x (BasedInPonciau(x) \u2227 WonPremierDivisionDuring(x, y2005))",
                "\u2200x (WonPremierDivisionDuring(x, y2009) \u2192 Promoted(x))",
                "\u2200x (WonPremierDivisionDuring(x, y2009) \u2194 WonPremierDivisionDuring(x, y2005))"
            ],
            "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 374,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use their both feet very efficiently.",
                "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
                "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))",
                "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))",
                "SoccerPlayer(ronaldo)",
                "Efficient(ronaldo, right)",
                "ScoreManyGoals(ronaldo, left)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "202": [
        {
            "example_id": 723,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adambuska) \u2227 European(adambuska)",
                "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 636,
            "story_id": 224,
            "context": [
                "Rhos Aelwyd F.C. is a Welsh football club.",
                "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
                "The Premier Division was won in 2005\u201306 by a team from Ponciau. ",
                "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.",
                "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. "
            ],
            "context_fol": [
                "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 BasedInPonciau(x) \u2227 Welsh(x))",
                "\u2200x (BasedInPonciau(x) \u2194 Rhosaelwydfc(x))",
                "\u2203x (BasedInPonciau(x) \u2227 WonPremierDivisionDuring(x, y2005))",
                "\u2200x (WonPremierDivisionDuring(x, y2009) \u2192 Promoted(x))",
                "\u2200x (WonPremierDivisionDuring(x, y2009) \u2194 WonPremierDivisionDuring(x, y2005))"
            ],
            "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 374,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use their both feet very efficiently.",
                "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
                "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))",
                "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))",
                "SoccerPlayer(ronaldo)",
                "Efficient(ronaldo, right)",
                "ScoreManyGoals(ronaldo, left)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ],
    "203": [
        {
            "example_id": 723,
            "story_id": 274,
            "context": [
                "Adam Buska is a European football player.",
                "If a European plays football, they play what Americans call soccer."
            ],
            "context_fol": [
                "FootballPlayer(adambuska) \u2227 European(adambuska)",
                "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))"
            ],
            "question": "Adam Buska plays what Americans call soccer.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 636,
            "story_id": 224,
            "context": [
                "Rhos Aelwyd F.C. is a Welsh football club.",
                "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
                "The Premier Division was won in 2005\u201306 by a team from Ponciau. ",
                "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.",
                "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. "
            ],
            "context_fol": [
                "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 BasedInPonciau(x) \u2227 Welsh(x))",
                "\u2200x (BasedInPonciau(x) \u2194 Rhosaelwydfc(x))",
                "\u2203x (BasedInPonciau(x) \u2227 WonPremierDivisionDuring(x, y2005))",
                "\u2200x (WonPremierDivisionDuring(x, y2009) \u2192 Promoted(x))",
                "\u2200x (WonPremierDivisionDuring(x, y2009) \u2194 WonPremierDivisionDuring(x, y2005))"
            ],
            "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        },
        {
            "example_id": 374,
            "story_id": 125,
            "context": [
                "Soccer players have a right foot and a left foot.",
                "Top soccer players are soccer players who can use their both feet very efficiently.",
                "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
                "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
                "Cristiano Ronaldo is a soccer player.",
                "Cristiano Ronaldo can use his right foot very efficiently.",
                "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
            ],
            "context_fol": [
                "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))",
                "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))",
                "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))",
                "SoccerPlayer(ronaldo)",
                "Efficient(ronaldo, right)",
                "ScoreManyGoals(ronaldo, left)"
            ],
            "question": "Cristiano Ronaldo is a top soccer player.",
            "options": [
                "A) True",
                "B) False",
                "C) Uncertain"
            ],
            "answer": "A"
        }
    ]
}