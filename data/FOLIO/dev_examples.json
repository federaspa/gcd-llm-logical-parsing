{
  "0": [
    {
      "id": 871,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 873,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "Sam has high ambitions and future career goals and is a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 872,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "Sam has high ambitions and future career goals and is a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "1": [
    {
      "id": 871,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 875,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 876,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "2": [
    {
      "id": 875,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 871,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 876,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "3": [
    {
      "id": 1130,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1129,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "If George is not a person who works from home and a person who works in person, then George is neither a commuter nor a person who has a relaxed schedule.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1128,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "George is a person who works from home.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "4": [
    {
      "id": 1129,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "If George is not a person who works from home and a person who works in person, then George is neither a commuter nor a person who has a relaxed schedule.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1130,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1128,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "George is a person who works from home.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "5": [
    {
      "id": 1130,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1129,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "If George is not a person who works from home and a person who works in person, then George is neither a commuter nor a person who has a relaxed schedule.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1128,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "George is a person who works from home.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "6": [
    {
      "id": 696,
      "story_id": 248,
      "context": [
        "Kangaroo is an animal.",
        "No Kangaroos live in Germany.",
        "If Jane saves enough money for the summer, she will fly to Germany.",
        "If Jane flies to Germany, she will go to the Berlin Zoo.",
        "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."
      ],
      "context_fol": [
        "∀x (Kangaroo(x) → Animal(x))",
        "∀x (Kangaroo(x) → ¬LiveIn(x, germany))",
        "EnoughMoney(jane) → FlyTo(jane, germany)",
        "FlyTo(jane, germany) → GoTo(jane, berlinzoo) ",
        "∀x ∃y (GoTo(x, berlinzoo) ∧ Animal(y) → MaySee(y, x, berlinzoo))"
      ],
      "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 171,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Dogs are always not naughty.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "7": [
    {
      "id": 3,
      "story_id": 1,
      "context": [
        "Mary has the flu.",
        "Flu and influenza are the same disease.",
        "Susan doesn't have influenza."
      ],
      "context_fol": [
        "Have(mary, flu)",
        "∀x (Have(x, flu) ↔ Have(x, influenza))",
        "¬Have(susan, influenza)"
      ],
      "question": "Either Mary or Susan has influenza.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 696,
      "story_id": 248,
      "context": [
        "Kangaroo is an animal.",
        "No Kangaroos live in Germany.",
        "If Jane saves enough money for the summer, she will fly to Germany.",
        "If Jane flies to Germany, she will go to the Berlin Zoo.",
        "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."
      ],
      "context_fol": [
        "∀x (Kangaroo(x) → Animal(x))",
        "∀x (Kangaroo(x) → ¬LiveIn(x, germany))",
        "EnoughMoney(jane) → FlyTo(jane, germany)",
        "FlyTo(jane, germany) → GoTo(jane, berlinzoo) ",
        "∀x ∃y (GoTo(x, berlinzoo) ∧ Animal(y) → MaySee(y, x, berlinzoo))"
      ],
      "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "8": [
    {
      "id": 696,
      "story_id": 248,
      "context": [
        "Kangaroo is an animal.",
        "No Kangaroos live in Germany.",
        "If Jane saves enough money for the summer, she will fly to Germany.",
        "If Jane flies to Germany, she will go to the Berlin Zoo.",
        "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."
      ],
      "context_fol": [
        "∀x (Kangaroo(x) → Animal(x))",
        "∀x (Kangaroo(x) → ¬LiveIn(x, germany))",
        "EnoughMoney(jane) → FlyTo(jane, germany)",
        "FlyTo(jane, germany) → GoTo(jane, berlinzoo) ",
        "∀x ∃y (GoTo(x, berlinzoo) ∧ Animal(y) → MaySee(y, x, berlinzoo))"
      ],
      "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 3,
      "story_id": 1,
      "context": [
        "Mary has the flu.",
        "Flu and influenza are the same disease.",
        "Susan doesn't have influenza."
      ],
      "context_fol": [
        "Have(mary, flu)",
        "∀x (Have(x, flu) ↔ Have(x, influenza))",
        "¬Have(susan, influenza)"
      ],
      "question": "Either Mary or Susan has influenza.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "9": [
    {
      "id": 1270,
      "story_id": 440,
      "context": [
        "All animals that are tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "Everything that is a husky is a dog.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ∨ Cat(fido)"
      ],
      "question": "Fido is not a husky.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1269,
      "story_id": 440,
      "context": [
        "All animals that are tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "Everything that is a husky is a dog.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ∨ Cat(fido)"
      ],
      "question": "Fido is a husky.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1271,
      "story_id": 440,
      "context": [
        "All animals that are tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "Everything that is a husky is a dog.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ∨ Cat(fido)"
      ],
      "question": "Fido is a Bengal tiger.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "10": [
    {
      "id": 1270,
      "story_id": 440,
      "context": [
        "All animals that are tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "Everything that is a husky is a dog.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ∨ Cat(fido)"
      ],
      "question": "Fido is not a husky.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1269,
      "story_id": 440,
      "context": [
        "All animals that are tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "Everything that is a husky is a dog.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ∨ Cat(fido)"
      ],
      "question": "Fido is a husky.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1271,
      "story_id": 440,
      "context": [
        "All animals that are tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "Everything that is a husky is a dog.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ∨ Cat(fido)"
      ],
      "question": "Fido is a Bengal tiger.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "11": [
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1269,
      "story_id": 440,
      "context": [
        "All animals that are tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "Everything that is a husky is a dog.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ∨ Cat(fido)"
      ],
      "question": "Fido is a husky.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "12": [
    {
      "id": 1159,
      "story_id": 411,
      "context": [
        "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "Some games published before 2010 support the Linux OS system. ",
        "All games on the Best Seller list are popular among young people. ",
        "FIFA22 neither supports the Linux OS system nor is it popular among young people."
      ],
      "context_fol": [
        "∀x (SoldMillion(x) → BestSeller(x))",
        "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "∀x (BestSeller(x) → Popular(x))",
        "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))"
      ],
      "question": "if FIFA21 is either a game published before 2010 or developed by Paradox Development Studio, then it is either in the Best Seller list and sold more than 1 million copies; or not in the Best Seller list and hasn't sold more than 1 million copies.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1157,
      "story_id": 411,
      "context": [
        "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "Some games published before 2010 support the Linux OS system. ",
        "All games on the Best Seller list are popular among young people. ",
        "FIFA22 neither supports the Linux OS system nor is it popular among young people."
      ],
      "context_fol": [
        "∀x (SoldMillion(x) → BestSeller(x))",
        "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "∀x (BestSeller(x) → Popular(x))",
        "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))"
      ],
      "question": "FIFA21 is published before 2010",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1158,
      "story_id": 411,
      "context": [
        "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "Some games published before 2010 support the Linux OS system. ",
        "All games on the Best Seller list are popular among young people. ",
        "FIFA22 neither supports the Linux OS system nor is it popular among young people."
      ],
      "context_fol": [
        "∀x (SoldMillion(x) → BestSeller(x))",
        "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "∀x (BestSeller(x) → Popular(x))",
        "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))"
      ],
      "question": "FIFA21 is published before 2010 and developed by Paradox Development Studio",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "13": [
    {
      "id": 1159,
      "story_id": 411,
      "context": [
        "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "Some games published before 2010 support the Linux OS system. ",
        "All games on the Best Seller list are popular among young people. ",
        "FIFA22 neither supports the Linux OS system nor is it popular among young people."
      ],
      "context_fol": [
        "∀x (SoldMillion(x) → BestSeller(x))",
        "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "∀x (BestSeller(x) → Popular(x))",
        "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))"
      ],
      "question": "if FIFA21 is either a game published before 2010 or developed by Paradox Development Studio, then it is either in the Best Seller list and sold more than 1 million copies; or not in the Best Seller list and hasn't sold more than 1 million copies.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1157,
      "story_id": 411,
      "context": [
        "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "Some games published before 2010 support the Linux OS system. ",
        "All games on the Best Seller list are popular among young people. ",
        "FIFA22 neither supports the Linux OS system nor is it popular among young people."
      ],
      "context_fol": [
        "∀x (SoldMillion(x) → BestSeller(x))",
        "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "∀x (BestSeller(x) → Popular(x))",
        "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))"
      ],
      "question": "FIFA21 is published before 2010",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1158,
      "story_id": 411,
      "context": [
        "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "Some games published before 2010 support the Linux OS system. ",
        "All games on the Best Seller list are popular among young people. ",
        "FIFA22 neither supports the Linux OS system nor is it popular among young people."
      ],
      "context_fol": [
        "∀x (SoldMillion(x) → BestSeller(x))",
        "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "∀x (BestSeller(x) → Popular(x))",
        "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))"
      ],
      "question": "FIFA21 is published before 2010 and developed by Paradox Development Studio",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "14": [
    {
      "id": 1159,
      "story_id": 411,
      "context": [
        "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "Some games published before 2010 support the Linux OS system. ",
        "All games on the Best Seller list are popular among young people. ",
        "FIFA22 neither supports the Linux OS system nor is it popular among young people."
      ],
      "context_fol": [
        "∀x (SoldMillion(x) → BestSeller(x))",
        "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "∀x (BestSeller(x) → Popular(x))",
        "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))"
      ],
      "question": "if FIFA21 is either a game published before 2010 or developed by Paradox Development Studio, then it is either in the Best Seller list and sold more than 1 million copies; or not in the Best Seller list and hasn't sold more than 1 million copies.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1157,
      "story_id": 411,
      "context": [
        "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "Some games published before 2010 support the Linux OS system. ",
        "All games on the Best Seller list are popular among young people. ",
        "FIFA22 neither supports the Linux OS system nor is it popular among young people."
      ],
      "context_fol": [
        "∀x (SoldMillion(x) → BestSeller(x))",
        "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "∀x (BestSeller(x) → Popular(x))",
        "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))"
      ],
      "question": "FIFA21 is published before 2010",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1158,
      "story_id": 411,
      "context": [
        "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "Some games published before 2010 support the Linux OS system. ",
        "All games on the Best Seller list are popular among young people. ",
        "FIFA22 neither supports the Linux OS system nor is it popular among young people."
      ],
      "context_fol": [
        "∀x (SoldMillion(x) → BestSeller(x))",
        "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "∀x (BestSeller(x) → Popular(x))",
        "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))"
      ],
      "question": "FIFA21 is published before 2010 and developed by Paradox Development Studio",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "15": [
    {
      "id": 739,
      "story_id": 290,
      "context": [
        "All tables are round.",
        "Some furniture are tables."
      ],
      "context_fol": [
        "∀x (Table(x) → Round(x))",
        "∃x (Furniture(x) ∧ Table(x))"
      ],
      "question": "Some furniture are round.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1296,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack is not in shape.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1295,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack is in shape.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "16": [
    {
      "id": 703,
      "story_id": 254,
      "context": [
        "All rabbits have fur",
        "Some pets are rabbits."
      ],
      "context_fol": [
        "∀x (Rabbit(x) → HasFur(x))",
        "∃x (Pet(x) ∧ Reptile(x))"
      ],
      "question": "Some pets do not have fur.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 702,
      "story_id": 253,
      "context": [
        "No reptile has fur.",
        "All snakes are reptiles."
      ],
      "context_fol": [
        "∀x (Reptile(x) → ¬HasFur(x))",
        "∀x (Snake(x) → Reptile(x))"
      ],
      "question": "Some snake has fur.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 922,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "17": [
    {
      "id": 703,
      "story_id": 254,
      "context": [
        "All rabbits have fur",
        "Some pets are rabbits."
      ],
      "context_fol": [
        "∀x (Rabbit(x) → HasFur(x))",
        "∃x (Pet(x) ∧ Reptile(x))"
      ],
      "question": "Some pets do not have fur.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 702,
      "story_id": 253,
      "context": [
        "No reptile has fur.",
        "All snakes are reptiles."
      ],
      "context_fol": [
        "∀x (Reptile(x) → ¬HasFur(x))",
        "∀x (Snake(x) → Reptile(x))"
      ],
      "question": "Some snake has fur.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1310,
      "story_id": 453,
      "context": [
        "No cold-blooded animals are birds.",
        "All reptiles are cold-blooded.",
        "Either an animal is a bird or it eats other animals.",
        "If an animal eats other animals, then it is a carnivore.",
        "Ron is neither a cold-blooded animal nor a carnivore.",
        "Henry is neither a carnivore nor a lizard."
      ],
      "context_fol": [
        "∀x (ColdBlooded(x) → ¬Bird(x))",
        "∀x (Reptile(x) → ColdBlooded(x))",
        "∀x (Bird(x) ∨ EatOtherAnimals(x))",
        "∀x (EatOtherAnimals(x) → Carnivore(x))",
        "¬ColdBlooded(ron) ∧ ¬Carnivore(ron)",
        "¬Carnivore(henry) ∧ ¬Lizard(henry)"
      ],
      "question": "Either Henry is a reptile or Ron eats other animals.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "18": [
    {
      "id": 703,
      "story_id": 254,
      "context": [
        "All rabbits have fur",
        "Some pets are rabbits."
      ],
      "context_fol": [
        "∀x (Rabbit(x) → HasFur(x))",
        "∃x (Pet(x) ∧ Reptile(x))"
      ],
      "question": "Some pets do not have fur.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 702,
      "story_id": 253,
      "context": [
        "No reptile has fur.",
        "All snakes are reptiles."
      ],
      "context_fol": [
        "∀x (Reptile(x) → ¬HasFur(x))",
        "∀x (Snake(x) → Reptile(x))"
      ],
      "question": "Some snake has fur.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1340,
      "story_id": 462,
      "context": [
        "All cats are cute.",
        "Ghosts do not exist.",
        "An animal is either a cat or a dog.",
        "Nothing that barks is lovely. ",
        "If something is a dog, then it barks.",
        "Grace is either a cat and a dog, or neither a cat nor a dog."
      ],
      "context_fol": [
        "∀x (Cat(x) → Cute(x))",
        "∀x (¬Ghost(x))",
        "∀x (Cat(x) ∨ Dog(x))",
        "∀x (Bark(x) → ¬Lovely(x))",
        "∀x (Dog(x) → Bark(x))",
        "(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))"
      ],
      "question": "If Grace is not both a ghost and lovely, then Grace is either a cat or cute.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "19": [
    {
      "id": 703,
      "story_id": 254,
      "context": [
        "All rabbits have fur",
        "Some pets are rabbits."
      ],
      "context_fol": [
        "∀x (Rabbit(x) → HasFur(x))",
        "∃x (Pet(x) ∧ Reptile(x))"
      ],
      "question": "Some pets do not have fur.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 702,
      "story_id": 253,
      "context": [
        "No reptile has fur.",
        "All snakes are reptiles."
      ],
      "context_fol": [
        "∀x (Reptile(x) → ¬HasFur(x))",
        "∀x (Snake(x) → Reptile(x))"
      ],
      "question": "Some snake has fur.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1340,
      "story_id": 462,
      "context": [
        "All cats are cute.",
        "Ghosts do not exist.",
        "An animal is either a cat or a dog.",
        "Nothing that barks is lovely. ",
        "If something is a dog, then it barks.",
        "Grace is either a cat and a dog, or neither a cat nor a dog."
      ],
      "context_fol": [
        "∀x (Cat(x) → Cute(x))",
        "∀x (¬Ghost(x))",
        "∀x (Cat(x) ∨ Dog(x))",
        "∀x (Bark(x) → ¬Lovely(x))",
        "∀x (Dog(x) → Bark(x))",
        "(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))"
      ],
      "question": "If Grace is not both a ghost and lovely, then Grace is either a cat or cute.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "20": [
    {
      "id": 703,
      "story_id": 254,
      "context": [
        "All rabbits have fur",
        "Some pets are rabbits."
      ],
      "context_fol": [
        "∀x (Rabbit(x) → HasFur(x))",
        "∃x (Pet(x) ∧ Reptile(x))"
      ],
      "question": "Some pets do not have fur.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 702,
      "story_id": 253,
      "context": [
        "No reptile has fur.",
        "All snakes are reptiles."
      ],
      "context_fol": [
        "∀x (Reptile(x) → ¬HasFur(x))",
        "∀x (Snake(x) → Reptile(x))"
      ],
      "question": "Some snake has fur.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1340,
      "story_id": 462,
      "context": [
        "All cats are cute.",
        "Ghosts do not exist.",
        "An animal is either a cat or a dog.",
        "Nothing that barks is lovely. ",
        "If something is a dog, then it barks.",
        "Grace is either a cat and a dog, or neither a cat nor a dog."
      ],
      "context_fol": [
        "∀x (Cat(x) → Cute(x))",
        "∀x (¬Ghost(x))",
        "∀x (Cat(x) ∨ Dog(x))",
        "∀x (Bark(x) → ¬Lovely(x))",
        "∀x (Dog(x) → Bark(x))",
        "(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))"
      ],
      "question": "If Grace is not both a ghost and lovely, then Grace is either a cat or cute.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "21": [
    {
      "id": 1200,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "If James does not both go to cinemas every week and subscribe to HBO service, then James is either available to watch 3 movies every week without any additional fees or he prefers TV more.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 65,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, amcalist)",
        "Prefer(peter, tvseries)"
      ],
      "question": "Peter will not watch TV series in cinemas.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1201,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "If James is available to watch 3 movies every week without any additional fees and he watches TV series in cinemas, then he goes to cinemas every week and prefers TV series more.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "22": [
    {
      "id": 1200,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "If James does not both go to cinemas every week and subscribe to HBO service, then James is either available to watch 3 movies every week without any additional fees or he prefers TV more.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 65,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, amcalist)",
        "Prefer(peter, tvseries)"
      ],
      "question": "Peter will not watch TV series in cinemas.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1201,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "If James is available to watch 3 movies every week without any additional fees and he watches TV series in cinemas, then he goes to cinemas every week and prefers TV series more.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "23": [
    {
      "id": 1200,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "If James does not both go to cinemas every week and subscribe to HBO service, then James is either available to watch 3 movies every week without any additional fees or he prefers TV more.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 65,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, amcalist)",
        "Prefer(peter, tvseries)"
      ],
      "question": "Peter will not watch TV series in cinemas.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 63,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, amcalist)",
        "Prefer(peter, tvseries)"
      ],
      "question": "James is not able to watch 3 movies every week without any additional fees.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "24": [
    {
      "id": 661,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 659,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 660,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "The United States won fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "25": [
    {
      "id": 661,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 659,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 660,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "The United States won fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "26": [
    {
      "id": 661,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 659,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 660,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "The United States won fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "27": [
    {
      "id": 506,
      "story_id": 175,
      "context": [
        "A werewolf is a human that can turn into a wolf.",
        "A werewolf has been scratched or bitten by another werewolf.",
        "If someone has been scratched or bitten, they have been attacked."
      ],
      "context_fol": [
        "∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))",
        "∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))",
        "∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)"
      ],
      "question": "All humans are werewolves.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1383,
      "story_id": 475,
      "context": [
        "All Asians are human. ",
        "All Chinese are Asian.",
        "A man is either Chinese or British.",
        "All British are European. ",
        "All Spanish are European. ",
        "No Indian is European. ",
        "Jessee is either both an Indian and a human, or neither an Indian nor a human."
      ],
      "context_fol": [
        "∀x ( Asian(x)→  Human(x))",
        "∀x ( Chinese(x)→  Asian(x))",
        "∀x ( Chinese(x) ∨  British(x))",
        "∀x ( British(x)→  European(x))",
        "∀x ( Spanish(x)→  European(x))",
        "∀x ( Indian(x)→ ¬ European(x))",
        "( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))"
      ],
      "question": "Jesse is Chinese.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1384,
      "story_id": 475,
      "context": [
        "All Asians are human. ",
        "All Chinese are Asian.",
        "A man is either Chinese or British.",
        "All British are European. ",
        "All Spanish are European. ",
        "No Indian is European. ",
        "Jessee is either both an Indian and a human, or neither an Indian nor a human."
      ],
      "context_fol": [
        "∀x ( Asian(x)→  Human(x))",
        "∀x ( Chinese(x)→  Asian(x))",
        "∀x ( Chinese(x) ∨  British(x))",
        "∀x ( British(x)→  European(x))",
        "∀x ( Spanish(x)→  European(x))",
        "∀x ( Indian(x)→ ¬ European(x))",
        "( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))"
      ],
      "question": "Jesse is not Chinese.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "28": [
    {
      "id": 1349,
      "story_id": 465,
      "context": [
        "All men are human.",
        "All gentlemen are men.",
        "All lawyers are gentlemen.",
        "All women are human.",
        "No sheep are human.",
        "If Mike is not both a human and a sheep, then Mike is either a man or a human."
      ],
      "context_fol": [
        "∀x (Man(x) → Human(x))",
        "∀x (Gentleman(x) → Man(x))",
        "∀x (Lawyer(x) → Gentleman(x))",
        "∀x (Woman(x) → Human(x))",
        "∀x (Sheep(x) → ¬Human(x))",
        "(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)"
      ],
      "question": "If Mike is not both a woman and a lawyer, then Mike is a lawyer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 506,
      "story_id": 175,
      "context": [
        "A werewolf is a human that can turn into a wolf.",
        "A werewolf has been scratched or bitten by another werewolf.",
        "If someone has been scratched or bitten, they have been attacked."
      ],
      "context_fol": [
        "∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))",
        "∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))",
        "∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)"
      ],
      "question": "All humans are werewolves.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1384,
      "story_id": 475,
      "context": [
        "All Asians are human. ",
        "All Chinese are Asian.",
        "A man is either Chinese or British.",
        "All British are European. ",
        "All Spanish are European. ",
        "No Indian is European. ",
        "Jessee is either both an Indian and a human, or neither an Indian nor a human."
      ],
      "context_fol": [
        "∀x ( Asian(x)→  Human(x))",
        "∀x ( Chinese(x)→  Asian(x))",
        "∀x ( Chinese(x) ∨  British(x))",
        "∀x ( British(x)→  European(x))",
        "∀x ( Spanish(x)→  European(x))",
        "∀x ( Indian(x)→ ¬ European(x))",
        "( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))"
      ],
      "question": "Jesse is not Chinese.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "29": [
    {
      "id": 1349,
      "story_id": 465,
      "context": [
        "All men are human.",
        "All gentlemen are men.",
        "All lawyers are gentlemen.",
        "All women are human.",
        "No sheep are human.",
        "If Mike is not both a human and a sheep, then Mike is either a man or a human."
      ],
      "context_fol": [
        "∀x (Man(x) → Human(x))",
        "∀x (Gentleman(x) → Man(x))",
        "∀x (Lawyer(x) → Gentleman(x))",
        "∀x (Woman(x) → Human(x))",
        "∀x (Sheep(x) → ¬Human(x))",
        "(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)"
      ],
      "question": "If Mike is not both a woman and a lawyer, then Mike is a lawyer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1347,
      "story_id": 465,
      "context": [
        "All men are human.",
        "All gentlemen are men.",
        "All lawyers are gentlemen.",
        "All women are human.",
        "No sheep are human.",
        "If Mike is not both a human and a sheep, then Mike is either a man or a human."
      ],
      "context_fol": [
        "∀x (Man(x) → Human(x))",
        "∀x (Gentleman(x) → Man(x))",
        "∀x (Lawyer(x) → Gentleman(x))",
        "∀x (Woman(x) → Human(x))",
        "∀x (Sheep(x) → ¬Human(x))",
        "(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)"
      ],
      "question": "Mike is a woman.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1383,
      "story_id": 475,
      "context": [
        "All Asians are human. ",
        "All Chinese are Asian.",
        "A man is either Chinese or British.",
        "All British are European. ",
        "All Spanish are European. ",
        "No Indian is European. ",
        "Jessee is either both an Indian and a human, or neither an Indian nor a human."
      ],
      "context_fol": [
        "∀x ( Asian(x)→  Human(x))",
        "∀x ( Chinese(x)→  Asian(x))",
        "∀x ( Chinese(x) ∨  British(x))",
        "∀x ( British(x)→  European(x))",
        "∀x ( Spanish(x)→  European(x))",
        "∀x ( Indian(x)→ ¬ European(x))",
        "( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))"
      ],
      "question": "Jesse is Chinese.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "30": [
    {
      "id": 894,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 896,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 897,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "31": [
    {
      "id": 895,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 894,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 896,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "32": [
    {
      "id": 895,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 894,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 896,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "33": [
    {
      "id": 494,
      "story_id": 171,
      "context": [
        "Some fish may sting.",
        "Stonefish is a fish.",
        "It stings to step on a stonefish.",
        "Stonefish stings cause death if not treated.",
        "To treat stonefish stings, apply heat to the affected area or use an antivenom."
      ],
      "context_fol": [
        "∃x ∃y (Fish(x) → Sting(x,y))",
        "Fish(stonefish)",
        "∀x (StepOn(stonefish, x) → Sting(stonefish, x))",
        "∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))",
        "∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))"
      ],
      "question": "If you step on a stonefish and don’t use an antivenom, it will cause death.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 495,
      "story_id": 171,
      "context": [
        "Some fish may sting.",
        "Stonefish is a fish.",
        "It stings to step on a stonefish.",
        "Stonefish stings cause death if not treated.",
        "To treat stonefish stings, apply heat to the affected area or use an antivenom."
      ],
      "context_fol": [
        "∃x ∃y (Fish(x) → Sting(x,y))",
        "Fish(stonefish)",
        "∀x (StepOn(stonefish, x) → Sting(stonefish, x))",
        "∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))",
        "∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))"
      ],
      "question": "Stings of some fish can cause death if not treated.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 496,
      "story_id": 171,
      "context": [
        "Some fish may sting.",
        "Stonefish is a fish.",
        "It stings to step on a stonefish.",
        "Stonefish stings cause death if not treated.",
        "To treat stonefish stings, apply heat to the affected area or use an antivenom."
      ],
      "context_fol": [
        "∃x ∃y (Fish(x) → Sting(x,y))",
        "Fish(stonefish)",
        "∀x (StepOn(stonefish, x) → Sting(stonefish, x))",
        "∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))",
        "∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))"
      ],
      "question": "If you step on a stonefish and apply heat to the affected area, stings will cause death.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "34": [
    {
      "id": 103,
      "story_id": 35,
      "context": [
        "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
        "Carlos Reyes trains for an Olympic sport.",
        "Carlos Reyes went to the Olympics.",
        "Carlos Reyes is a welterweight.",
        "Heavy weights are not welterweights."
      ],
      "context_fol": [
        "∀x (DoesOlympicSport(x) ∧ GoesToOlympicGames(x) → IsOlympian(x))",
        "DoesOlympicSport(carlosReyes)",
        "GoesToOlympicGames(carlosReyes)",
        "IsWelterWeight(carlosReyes)",
        "∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x))"
      ],
      "question": "Carlos Reyes is a heavy weight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 102,
      "story_id": 35,
      "context": [
        "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
        "Carlos Reyes trains for an Olympic sport.",
        "Carlos Reyes went to the Olympics.",
        "Carlos Reyes is a welterweight.",
        "Heavy weights are not welterweights."
      ],
      "context_fol": [
        "∀x (DoesOlympicSport(x) ∧ GoesToOlympicGames(x) → IsOlympian(x))",
        "DoesOlympicSport(carlosReyes)",
        "GoesToOlympicGames(carlosReyes)",
        "IsWelterWeight(carlosReyes)",
        "∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x))"
      ],
      "question": "Carlos Reyes is an Olympian.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 494,
      "story_id": 171,
      "context": [
        "Some fish may sting.",
        "Stonefish is a fish.",
        "It stings to step on a stonefish.",
        "Stonefish stings cause death if not treated.",
        "To treat stonefish stings, apply heat to the affected area or use an antivenom."
      ],
      "context_fol": [
        "∃x ∃y (Fish(x) → Sting(x,y))",
        "Fish(stonefish)",
        "∀x (StepOn(stonefish, x) → Sting(stonefish, x))",
        "∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))",
        "∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))"
      ],
      "question": "If you step on a stonefish and don’t use an antivenom, it will cause death.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "35": [
    {
      "id": 494,
      "story_id": 171,
      "context": [
        "Some fish may sting.",
        "Stonefish is a fish.",
        "It stings to step on a stonefish.",
        "Stonefish stings cause death if not treated.",
        "To treat stonefish stings, apply heat to the affected area or use an antivenom."
      ],
      "context_fol": [
        "∃x ∃y (Fish(x) → Sting(x,y))",
        "Fish(stonefish)",
        "∀x (StepOn(stonefish, x) → Sting(stonefish, x))",
        "∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))",
        "∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))"
      ],
      "question": "If you step on a stonefish and don’t use an antivenom, it will cause death.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 894,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 495,
      "story_id": 171,
      "context": [
        "Some fish may sting.",
        "Stonefish is a fish.",
        "It stings to step on a stonefish.",
        "Stonefish stings cause death if not treated.",
        "To treat stonefish stings, apply heat to the affected area or use an antivenom."
      ],
      "context_fol": [
        "∃x ∃y (Fish(x) → Sting(x,y))",
        "Fish(stonefish)",
        "∀x (StepOn(stonefish, x) → Sting(stonefish, x))",
        "∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))",
        "∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))"
      ],
      "question": "Stings of some fish can cause death if not treated.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "36": [
    {
      "id": 22,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "No choral conductor specialized in the performance of Renaissance.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 20,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "Miroslav Venhoda loved music.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 21,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "A Czech person wrote a book in 1946.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "37": [
    {
      "id": 22,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "No choral conductor specialized in the performance of Renaissance.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 20,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "Miroslav Venhoda loved music.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1137,
      "story_id": 407,
      "context": [
        "No touring musicians are permanent members of an orchestra.",
        "Musicians are either permanent members of an orchestra or have a unique musical voice or style.",
        "All musicians who have a unique musical voice or style are interesting as individual performers.",
        "All musicians who are interesting as individual performers are capable of attracting large audiences.",
        "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences."
      ],
      "context_fol": [
        "∀x (Orchestra(x) → ¬Touring(x))",
        "∀x (Orchestra(x) ⊕ Unique(x))",
        "∀x (Unique(x) → Interesting(x))",
        "∀x (Interesting(x) → Capable(x))",
        "(Interesting(ryan) ∧ Unique(ryan)) → ¬(Touring(ryan) ⊕ Capable(ryan))"
      ],
      "question": "Ryan is either a permanent member of an orchestra or has a unique musical voice or style.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "38": [
    {
      "id": 22,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "No choral conductor specialized in the performance of Renaissance.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 20,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "Miroslav Venhoda loved music.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 21,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "A Czech person wrote a book in 1946.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "39": [
    {
      "id": 680,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
      ],
      "context_fol": [
        "British-IraqiArchitect(zahaHadid)",
        "BornIn(zahaHadid, y1950)",
        "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Max admires Zaha Hadid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 678,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
      ],
      "context_fol": [
        "British-IraqiArchitect(zahaHadid)",
        "BornIn(zahaHadid, y1950)",
        "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Hadid did some work in interior design.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 677,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
      ],
      "context_fol": [
        "British-IraqiArchitect(zahaHadid)",
        "BornIn(zahaHadid, y1950)",
        "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Hadid became a UK citizen later in her life.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "40": [
    {
      "id": 678,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
      ],
      "context_fol": [
        "British-IraqiArchitect(zahaHadid)",
        "BornIn(zahaHadid, y1950)",
        "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Hadid did some work in interior design.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 680,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
      ],
      "context_fol": [
        "British-IraqiArchitect(zahaHadid)",
        "BornIn(zahaHadid, y1950)",
        "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Max admires Zaha Hadid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 679,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
      ],
      "context_fol": [
        "British-IraqiArchitect(zahaHadid)",
        "BornIn(zahaHadid, y1950)",
        "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Hadid was born in 1982.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "41": [
    {
      "id": 678,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
      ],
      "context_fol": [
        "British-IraqiArchitect(zahaHadid)",
        "BornIn(zahaHadid, y1950)",
        "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Hadid did some work in interior design.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 680,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
      ],
      "context_fol": [
        "British-IraqiArchitect(zahaHadid)",
        "BornIn(zahaHadid, y1950)",
        "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Max admires Zaha Hadid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 679,
      "story_id": 237,
      "context": [
        "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
      ],
      "context_fol": [
        "British-IraqiArchitect(zahaHadid)",
        "BornIn(zahaHadid, y1950)",
        "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)"
      ],
      "question": "Hadid was born in 1982.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "42": [
    {
      "id": 894,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 896,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 897,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "43": [
    {
      "id": 894,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 896,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 897,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "44": [
    {
      "id": 894,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "Nadal is a Grand Slam champion.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 896,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 897,
      "story_id": 339,
      "context": [
        "No professional tennis umpires are professional tennis players.",
        "If you are a World Tour player, then you are a professional tennis player.",
        "All Grand Slam champions are World Tour players.",
        "All Grand Slam umpires are professional tennis umpires.",
        "Nadal is a World Tour player or a Grand Slam champion"
      ],
      "context_fol": [
        "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))",
        "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)"
      ],
      "question": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "45": [
    {
      "id": 706,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1270,
      "story_id": 440,
      "context": [
        "All animals that are tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "Everything that is a husky is a dog.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ∨ Cat(fido)"
      ],
      "question": "Fido is not a husky.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1269,
      "story_id": 440,
      "context": [
        "All animals that are tigers are cats.",
        "No cats are dogs.",
        "All Bengal tigers are tigers.",
        "Everything that is a husky is a dog.",
        "Fido is either a Bengal tiger or a cat."
      ],
      "context_fol": [
        "∀x (Tiger(x) → Cat(x))",
        "∀x (Cat(x) → ¬Dog(x))",
        "∀x (BengalTiger(x) → Tiger(x))",
        "∀x (Husky(x) → Dog(x))",
        "BengalTiger(fido) ∨ Cat(fido)"
      ],
      "question": "Fido is a husky.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "46": [
    {
      "id": 1202,
      "story_id": 423,
      "context": [
        "Students either go to the park or go to the movies. ",
        "No student who enjoys nature has free time during the weekend. ",
        "All students who go to the movies enjoy nature. ",
        "All students who do not have class during the weekend have free time during the weekend. ",
        "All students not in summer camp do not have class during the weekend. ",
        "James does not have class during the weekend."
      ],
      "context_fol": [
        "∀x (Park(x) ⊕ Movies(x))",
        "∀x (Nature(x) → ¬FreeTime(x))",
        "∀x (Movies(x) → Nature(x))",
        "∀x (NoClass(x) → FreeTime(x))",
        "∀x (SummerCamp(x) → NoClass(x))",
        "NoClass(james)"
      ],
      "question": "James is in summer camp.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1203,
      "story_id": 423,
      "context": [
        "Students either go to the park or go to the movies. ",
        "No student who enjoys nature has free time during the weekend. ",
        "All students who go to the movies enjoy nature. ",
        "All students who do not have class during the weekend have free time during the weekend. ",
        "All students not in summer camp do not have class during the weekend. ",
        "James does not have class during the weekend."
      ],
      "context_fol": [
        "∀x (Park(x) ⊕ Movies(x))",
        "∀x (Nature(x) → ¬FreeTime(x))",
        "∀x (Movies(x) → Nature(x))",
        "∀x (NoClass(x) → FreeTime(x))",
        "∀x (SummerCamp(x) → NoClass(x))",
        "NoClass(james)"
      ],
      "question": "James goes to the park or is in summer camp.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 621,
      "story_id": 216,
      "context": [
        "Olivia doesn't prefer warm temperature during the day.",
        "When Olivia sleeps, she prefers cool temperature.",
        "Olivia sleeps during the night.",
        "Olivia works during the day.",
        "Olivia either works or sleeps.",
        "The time is either the day or the night.",
        "Olivia either prefers warm temperature or prefers cool temperature."
      ],
      "context_fol": [
        "∀x (Day(x) → ¬PrefersWarmAt(olivia, x))",
        "∀x (SleepingDuring(olivia, x) → PrefersCoolAt(olivia, x))",
        "∀x (SleepingDuring(olivia, x) → Night(x))",
        "∀x (WorkingDuring(olivia, x) → Day(x))",
        "∀x (WorkingDuring(olivia, x) ∨ SleepingDuring(olivia, x))",
        "∀x (Day(x) ∨ Night(x))",
        "∀x (PrefersWarmAt(olivia, x) ∨ PrefersCoolAt(olivia, x))"
      ],
      "question": "At all times, Olivia prefers cool temperature.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "47": [
    {
      "id": 1202,
      "story_id": 423,
      "context": [
        "Students either go to the park or go to the movies. ",
        "No student who enjoys nature has free time during the weekend. ",
        "All students who go to the movies enjoy nature. ",
        "All students who do not have class during the weekend have free time during the weekend. ",
        "All students not in summer camp do not have class during the weekend. ",
        "James does not have class during the weekend."
      ],
      "context_fol": [
        "∀x (Park(x) ⊕ Movies(x))",
        "∀x (Nature(x) → ¬FreeTime(x))",
        "∀x (Movies(x) → Nature(x))",
        "∀x (NoClass(x) → FreeTime(x))",
        "∀x (SummerCamp(x) → NoClass(x))",
        "NoClass(james)"
      ],
      "question": "James is in summer camp.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1203,
      "story_id": 423,
      "context": [
        "Students either go to the park or go to the movies. ",
        "No student who enjoys nature has free time during the weekend. ",
        "All students who go to the movies enjoy nature. ",
        "All students who do not have class during the weekend have free time during the weekend. ",
        "All students not in summer camp do not have class during the weekend. ",
        "James does not have class during the weekend."
      ],
      "context_fol": [
        "∀x (Park(x) ⊕ Movies(x))",
        "∀x (Nature(x) → ¬FreeTime(x))",
        "∀x (Movies(x) → Nature(x))",
        "∀x (NoClass(x) → FreeTime(x))",
        "∀x (SummerCamp(x) → NoClass(x))",
        "NoClass(james)"
      ],
      "question": "James goes to the park or is in summer camp.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 621,
      "story_id": 216,
      "context": [
        "Olivia doesn't prefer warm temperature during the day.",
        "When Olivia sleeps, she prefers cool temperature.",
        "Olivia sleeps during the night.",
        "Olivia works during the day.",
        "Olivia either works or sleeps.",
        "The time is either the day or the night.",
        "Olivia either prefers warm temperature or prefers cool temperature."
      ],
      "context_fol": [
        "∀x (Day(x) → ¬PrefersWarmAt(olivia, x))",
        "∀x (SleepingDuring(olivia, x) → PrefersCoolAt(olivia, x))",
        "∀x (SleepingDuring(olivia, x) → Night(x))",
        "∀x (WorkingDuring(olivia, x) → Day(x))",
        "∀x (WorkingDuring(olivia, x) ∨ SleepingDuring(olivia, x))",
        "∀x (Day(x) ∨ Night(x))",
        "∀x (PrefersWarmAt(olivia, x) ∨ PrefersCoolAt(olivia, x))"
      ],
      "question": "At all times, Olivia prefers cool temperature.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "48": [
    {
      "id": 1202,
      "story_id": 423,
      "context": [
        "Students either go to the park or go to the movies. ",
        "No student who enjoys nature has free time during the weekend. ",
        "All students who go to the movies enjoy nature. ",
        "All students who do not have class during the weekend have free time during the weekend. ",
        "All students not in summer camp do not have class during the weekend. ",
        "James does not have class during the weekend."
      ],
      "context_fol": [
        "∀x (Park(x) ⊕ Movies(x))",
        "∀x (Nature(x) → ¬FreeTime(x))",
        "∀x (Movies(x) → Nature(x))",
        "∀x (NoClass(x) → FreeTime(x))",
        "∀x (SummerCamp(x) → NoClass(x))",
        "NoClass(james)"
      ],
      "question": "James is in summer camp.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1203,
      "story_id": 423,
      "context": [
        "Students either go to the park or go to the movies. ",
        "No student who enjoys nature has free time during the weekend. ",
        "All students who go to the movies enjoy nature. ",
        "All students who do not have class during the weekend have free time during the weekend. ",
        "All students not in summer camp do not have class during the weekend. ",
        "James does not have class during the weekend."
      ],
      "context_fol": [
        "∀x (Park(x) ⊕ Movies(x))",
        "∀x (Nature(x) → ¬FreeTime(x))",
        "∀x (Movies(x) → Nature(x))",
        "∀x (NoClass(x) → FreeTime(x))",
        "∀x (SummerCamp(x) → NoClass(x))",
        "NoClass(james)"
      ],
      "question": "James goes to the park or is in summer camp.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 621,
      "story_id": 216,
      "context": [
        "Olivia doesn't prefer warm temperature during the day.",
        "When Olivia sleeps, she prefers cool temperature.",
        "Olivia sleeps during the night.",
        "Olivia works during the day.",
        "Olivia either works or sleeps.",
        "The time is either the day or the night.",
        "Olivia either prefers warm temperature or prefers cool temperature."
      ],
      "context_fol": [
        "∀x (Day(x) → ¬PrefersWarmAt(olivia, x))",
        "∀x (SleepingDuring(olivia, x) → PrefersCoolAt(olivia, x))",
        "∀x (SleepingDuring(olivia, x) → Night(x))",
        "∀x (WorkingDuring(olivia, x) → Day(x))",
        "∀x (WorkingDuring(olivia, x) ∨ SleepingDuring(olivia, x))",
        "∀x (Day(x) ∨ Night(x))",
        "∀x (PrefersWarmAt(olivia, x) ∨ PrefersCoolAt(olivia, x))"
      ],
      "question": "At all times, Olivia prefers cool temperature.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "49": [
    {
      "id": 738,
      "story_id": 289,
      "context": [
        "All iPhones are electronic.",
        "Some phones are iPhones."
      ],
      "context_fol": [
        "∀x (IPhone(x) → Electronic(x))",
        "∃x (Phone(x) ∧ IPhone(x))"
      ],
      "question": "No phones are electronic.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 72,
      "story_id": 25,
      "context": [
        "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
        "Mort is not a Stamp catalogue.",
        "Mort is not a periodical, auction catalogue, bibliography, or background material.",
        "Mort is a piece of Philatelic literature."
      ],
      "context_fol": [
        "∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))",
        "¬Stamp(mort)",
        "¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))",
        "PhilatelicLit(mort)"
      ],
      "question": "Mort is a book",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 73,
      "story_id": 25,
      "context": [
        "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
        "Mort is not a Stamp catalogue.",
        "Mort is not a periodical, auction catalogue, bibliography, or background material.",
        "Mort is a piece of Philatelic literature."
      ],
      "context_fol": [
        "∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))",
        "¬Stamp(mort)",
        "¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))",
        "PhilatelicLit(mort)"
      ],
      "question": "Mort is background material.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "50": [
    {
      "id": 738,
      "story_id": 289,
      "context": [
        "All iPhones are electronic.",
        "Some phones are iPhones."
      ],
      "context_fol": [
        "∀x (IPhone(x) → Electronic(x))",
        "∃x (Phone(x) ∧ IPhone(x))"
      ],
      "question": "No phones are electronic.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 72,
      "story_id": 25,
      "context": [
        "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
        "Mort is not a Stamp catalogue.",
        "Mort is not a periodical, auction catalogue, bibliography, or background material.",
        "Mort is a piece of Philatelic literature."
      ],
      "context_fol": [
        "∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))",
        "¬Stamp(mort)",
        "¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))",
        "PhilatelicLit(mort)"
      ],
      "question": "Mort is a book",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 73,
      "story_id": 25,
      "context": [
        "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
        "Mort is not a Stamp catalogue.",
        "Mort is not a periodical, auction catalogue, bibliography, or background material.",
        "Mort is a piece of Philatelic literature."
      ],
      "context_fol": [
        "∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))",
        "¬Stamp(mort)",
        "¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))",
        "PhilatelicLit(mort)"
      ],
      "question": "Mort is background material.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "51": [
    {
      "id": 738,
      "story_id": 289,
      "context": [
        "All iPhones are electronic.",
        "Some phones are iPhones."
      ],
      "context_fol": [
        "∀x (IPhone(x) → Electronic(x))",
        "∃x (Phone(x) ∧ IPhone(x))"
      ],
      "question": "No phones are electronic.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1200,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "If James does not both go to cinemas every week and subscribe to HBO service, then James is either available to watch 3 movies every week without any additional fees or he prefers TV more.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 72,
      "story_id": 25,
      "context": [
        "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
        "Mort is not a Stamp catalogue.",
        "Mort is not a periodical, auction catalogue, bibliography, or background material.",
        "Mort is a piece of Philatelic literature."
      ],
      "context_fol": [
        "∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))",
        "¬Stamp(mort)",
        "¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))",
        "PhilatelicLit(mort)"
      ],
      "question": "Mort is a book",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "52": [
    {
      "id": 695,
      "story_id": 247,
      "context": [
        "LanguageA is a universal language",
        "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
        "Katya cannot communicate with Danil.",
        "Katya knows LanguageA. "
      ],
      "context_fol": [
        "UniversalLanguage(languageA)",
        "∀x ∀y (∃z (Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → Communicate(x, y))",
        "Know(katya, languageA)",
        "¬Communicate(katya, danil)"
      ],
      "question": "Danil knows LanguageA.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 602,
      "story_id": 209,
      "context": [
        "There are two places named Galicia: either in Spain or in Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in Galicia."
      ],
      "context_fol": [
        "∀x (Galicia(x) → Spain(x) ⊕ Poland(x))",
        "∀x (Spain(x) → Europe(x))",
        "∀x (Poland(x) → Europe(x))",
        "∀x (RochelleLive(x) → Europe(x))",
        "∀x (DominiqueLive(x) → ¬Europe(x))",
        "∀x (AlfonsoLive(x) → Galicia(x))"
      ],
      "question": "Alfonso lives in Europe.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 600,
      "story_id": 209,
      "context": [
        "There are two places named Galicia: either in Spain or in Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in Galicia."
      ],
      "context_fol": [
        "∀x (Galicia(x) → Spain(x) ⊕ Poland(x))",
        "∀x (Spain(x) → Europe(x))",
        "∀x (Poland(x) → Europe(x))",
        "∀x (RochelleLive(x) → Europe(x))",
        "∀x (DominiqueLive(x) → ¬Europe(x))",
        "∀x (AlfonsoLive(x) → Galicia(x))"
      ],
      "question": "Rochelle lives in Galicia.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "53": [
    {
      "id": 695,
      "story_id": 247,
      "context": [
        "LanguageA is a universal language",
        "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
        "Katya cannot communicate with Danil.",
        "Katya knows LanguageA. "
      ],
      "context_fol": [
        "UniversalLanguage(languageA)",
        "∀x ∀y (∃z (Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → Communicate(x, y))",
        "Know(katya, languageA)",
        "¬Communicate(katya, danil)"
      ],
      "question": "Danil knows LanguageA.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 602,
      "story_id": 209,
      "context": [
        "There are two places named Galicia: either in Spain or in Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in Galicia."
      ],
      "context_fol": [
        "∀x (Galicia(x) → Spain(x) ⊕ Poland(x))",
        "∀x (Spain(x) → Europe(x))",
        "∀x (Poland(x) → Europe(x))",
        "∀x (RochelleLive(x) → Europe(x))",
        "∀x (DominiqueLive(x) → ¬Europe(x))",
        "∀x (AlfonsoLive(x) → Galicia(x))"
      ],
      "question": "Alfonso lives in Europe.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 600,
      "story_id": 209,
      "context": [
        "There are two places named Galicia: either in Spain or in Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in Galicia."
      ],
      "context_fol": [
        "∀x (Galicia(x) → Spain(x) ⊕ Poland(x))",
        "∀x (Spain(x) → Europe(x))",
        "∀x (Poland(x) → Europe(x))",
        "∀x (RochelleLive(x) → Europe(x))",
        "∀x (DominiqueLive(x) → ¬Europe(x))",
        "∀x (AlfonsoLive(x) → Galicia(x))"
      ],
      "question": "Rochelle lives in Galicia.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "54": [
    {
      "id": 695,
      "story_id": 247,
      "context": [
        "LanguageA is a universal language",
        "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
        "Katya cannot communicate with Danil.",
        "Katya knows LanguageA. "
      ],
      "context_fol": [
        "UniversalLanguage(languageA)",
        "∀x ∀y (∃z (Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → Communicate(x, y))",
        "Know(katya, languageA)",
        "¬Communicate(katya, danil)"
      ],
      "question": "Danil knows LanguageA.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 602,
      "story_id": 209,
      "context": [
        "There are two places named Galicia: either in Spain or in Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in Galicia."
      ],
      "context_fol": [
        "∀x (Galicia(x) → Spain(x) ⊕ Poland(x))",
        "∀x (Spain(x) → Europe(x))",
        "∀x (Poland(x) → Europe(x))",
        "∀x (RochelleLive(x) → Europe(x))",
        "∀x (DominiqueLive(x) → ¬Europe(x))",
        "∀x (AlfonsoLive(x) → Galicia(x))"
      ],
      "question": "Alfonso lives in Europe.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 600,
      "story_id": 209,
      "context": [
        "There are two places named Galicia: either in Spain or in Poland.",
        "Spain is in Europe.",
        "Poland is in Europe.",
        "Rochelle lives in Europe.",
        "Dominique does not live in Europe.",
        "Alfonso lives in Galicia."
      ],
      "context_fol": [
        "∀x (Galicia(x) → Spain(x) ⊕ Poland(x))",
        "∀x (Spain(x) → Europe(x))",
        "∀x (Poland(x) → Europe(x))",
        "∀x (RochelleLive(x) → Europe(x))",
        "∀x (DominiqueLive(x) → ¬Europe(x))",
        "∀x (AlfonsoLive(x) → Galicia(x))"
      ],
      "question": "Rochelle lives in Galicia.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "55": [
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 375,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is not a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 630,
      "story_id": 221,
      "context": [
        "Ernest Pohl was a Polish football player. ",
        "A football player in the Polish First Division has scored over 180 goals. ",
        "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
        "Górnik Zabrze's stadium was named after a soccer player from Ruda Śląska. ",
        "Ernest Pohl is from Ruda Śląska. "
      ],
      "context_fol": [
        "PolishFootballPlayer(ernestpohl)",
        "∃x (In(x, polishfirstdivision) ∧ ScoredMoreThan180Goals(x))",
        "ScoredMoreThan180Goals(ernestpohl) ∧ In(ernestpohl, polishfirstdivision)",
        "∃x (NamedAfter(gornikzabrze, x) ∧ FootballPlayer(x) ∧ From(x, rudaslaska))",
        "From(ernestpohl, rudaslaska)"
      ],
      "question": "Ernest Pohl has not scored more than 180 goals.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "56": [
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 375,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is not a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 233,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People liviing in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newyorkcity)",
        "LivesIn(asaHoffmann, manhattan)",
        "IsChessPlayer(asaHoffmann)",
        "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))"
      ],
      "question": "Asa Hoffmann is a grandmaster.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "57": [
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 375,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is not a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 630,
      "story_id": 221,
      "context": [
        "Ernest Pohl was a Polish football player. ",
        "A football player in the Polish First Division has scored over 180 goals. ",
        "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
        "Górnik Zabrze's stadium was named after a soccer player from Ruda Śląska. ",
        "Ernest Pohl is from Ruda Śląska. "
      ],
      "context_fol": [
        "PolishFootballPlayer(ernestpohl)",
        "∃x (In(x, polishfirstdivision) ∧ ScoredMoreThan180Goals(x))",
        "ScoredMoreThan180Goals(ernestpohl) ∧ In(ernestpohl, polishfirstdivision)",
        "∃x (NamedAfter(gornikzabrze, x) ∧ FootballPlayer(x) ∧ From(x, rudaslaska))",
        "From(ernestpohl, rudaslaska)"
      ],
      "question": "Ernest Pohl has not scored more than 180 goals.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "58": [
    {
      "id": 234,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People liviing in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newyorkcity)",
        "LivesIn(asaHoffmann, manhattan)",
        "IsChessPlayer(asaHoffmann)",
        "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))"
      ],
      "question": "Asa Hoffmann does not live in New York.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 232,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People liviing in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newyorkcity)",
        "LivesIn(asaHoffmann, manhattan)",
        "IsChessPlayer(asaHoffmann)",
        "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))"
      ],
      "question": "Asa Hoffmann is a New Yorkers.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 233,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People liviing in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newyorkcity)",
        "LivesIn(asaHoffmann, manhattan)",
        "IsChessPlayer(asaHoffmann)",
        "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))"
      ],
      "question": "Asa Hoffmann is a grandmaster.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "59": [
    {
      "id": 234,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People liviing in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newyorkcity)",
        "LivesIn(asaHoffmann, manhattan)",
        "IsChessPlayer(asaHoffmann)",
        "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))"
      ],
      "question": "Asa Hoffmann does not live in New York.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 232,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People liviing in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newyorkcity)",
        "LivesIn(asaHoffmann, manhattan)",
        "IsChessPlayer(asaHoffmann)",
        "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))"
      ],
      "question": "Asa Hoffmann is a New Yorkers.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 233,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People liviing in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newyorkcity)",
        "LivesIn(asaHoffmann, manhattan)",
        "IsChessPlayer(asaHoffmann)",
        "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))"
      ],
      "question": "Asa Hoffmann is a grandmaster.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "60": [
    {
      "id": 234,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People liviing in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newyorkcity)",
        "LivesIn(asaHoffmann, manhattan)",
        "IsChessPlayer(asaHoffmann)",
        "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))"
      ],
      "question": "Asa Hoffmann does not live in New York.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 232,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People liviing in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newyorkcity)",
        "LivesIn(asaHoffmann, manhattan)",
        "IsChessPlayer(asaHoffmann)",
        "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))"
      ],
      "question": "Asa Hoffmann is a New Yorkers.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 233,
      "story_id": 76,
      "context": [
        "Asa Hoffmann was born in New York City.",
        "Asa Hoffman lives in Manhattan.",
        "Asa Hoffman is a chess player.",
        "Some chess players are grandmasters.",
        "People born and living in New York City are New Yorkers.",
        "People liviing in Manhattan live in New York City."
      ],
      "context_fol": [
        "BornIn(asaHoffmann, newyorkcity)",
        "LivesIn(asaHoffmann, manhattan)",
        "IsChessPlayer(asaHoffmann)",
        "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))"
      ],
      "question": "Asa Hoffmann is a grandmaster.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "61": [
    {
      "id": 783,
      "story_id": 312,
      "context": [
        "To get a student visa, you must be full-time enrolled in an academic program.",
        "Those who are full-time enrolled in an academic program can not work full-time.",
        "Everyone who wants to study abroad needs to have a student visa.",
        "All PhD graduates can work full time. ",
        "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
      ],
      "context_fol": [
        "∀x (StudentVisa(x) → FullTimeAcademic(x))",
        "∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))",
        "∀x (StudyAbroad(x) → StudentVisa(x))",
        "∀x (PhdGraduate(x) → WorkFullTime(x))",
        "¬StudyAbroad(tom) → FullTimeAcademic(tom)"
      ],
      "question": "Tom wants to study abroad.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 781,
      "story_id": 312,
      "context": [
        "To get a student visa, you must be full-time enrolled in an academic program.",
        "Those who are full-time enrolled in an academic program can not work full-time.",
        "Everyone who wants to study abroad needs to have a student visa.",
        "All PhD graduates can work full time. ",
        "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
      ],
      "context_fol": [
        "∀x (StudentVisa(x) → FullTimeAcademic(x))",
        "∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))",
        "∀x (StudyAbroad(x) → StudentVisa(x))",
        "∀x (PhdGraduate(x) → WorkFullTime(x))",
        "¬StudyAbroad(tom) → FullTimeAcademic(tom)"
      ],
      "question": "Tom is a PhD graduate.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 782,
      "story_id": 312,
      "context": [
        "To get a student visa, you must be full-time enrolled in an academic program.",
        "Those who are full-time enrolled in an academic program can not work full-time.",
        "Everyone who wants to study abroad needs to have a student visa.",
        "All PhD graduates can work full time. ",
        "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
      ],
      "context_fol": [
        "∀x (StudentVisa(x) → FullTimeAcademic(x))",
        "∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))",
        "∀x (StudyAbroad(x) → StudentVisa(x))",
        "∀x (PhdGraduate(x) → WorkFullTime(x))",
        "¬StudyAbroad(tom) → FullTimeAcademic(tom)"
      ],
      "question": "Tom is not a PhD graduate.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "62": [
    {
      "id": 783,
      "story_id": 312,
      "context": [
        "To get a student visa, you must be full-time enrolled in an academic program.",
        "Those who are full-time enrolled in an academic program can not work full-time.",
        "Everyone who wants to study abroad needs to have a student visa.",
        "All PhD graduates can work full time. ",
        "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
      ],
      "context_fol": [
        "∀x (StudentVisa(x) → FullTimeAcademic(x))",
        "∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))",
        "∀x (StudyAbroad(x) → StudentVisa(x))",
        "∀x (PhdGraduate(x) → WorkFullTime(x))",
        "¬StudyAbroad(tom) → FullTimeAcademic(tom)"
      ],
      "question": "Tom wants to study abroad.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 781,
      "story_id": 312,
      "context": [
        "To get a student visa, you must be full-time enrolled in an academic program.",
        "Those who are full-time enrolled in an academic program can not work full-time.",
        "Everyone who wants to study abroad needs to have a student visa.",
        "All PhD graduates can work full time. ",
        "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
      ],
      "context_fol": [
        "∀x (StudentVisa(x) → FullTimeAcademic(x))",
        "∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))",
        "∀x (StudyAbroad(x) → StudentVisa(x))",
        "∀x (PhdGraduate(x) → WorkFullTime(x))",
        "¬StudyAbroad(tom) → FullTimeAcademic(tom)"
      ],
      "question": "Tom is a PhD graduate.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 782,
      "story_id": 312,
      "context": [
        "To get a student visa, you must be full-time enrolled in an academic program.",
        "Those who are full-time enrolled in an academic program can not work full-time.",
        "Everyone who wants to study abroad needs to have a student visa.",
        "All PhD graduates can work full time. ",
        "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
      ],
      "context_fol": [
        "∀x (StudentVisa(x) → FullTimeAcademic(x))",
        "∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))",
        "∀x (StudyAbroad(x) → StudentVisa(x))",
        "∀x (PhdGraduate(x) → WorkFullTime(x))",
        "¬StudyAbroad(tom) → FullTimeAcademic(tom)"
      ],
      "question": "Tom is not a PhD graduate.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "63": [
    {
      "id": 706,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "64": [
    {
      "id": 706,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 789,
      "story_id": 314,
      "context": [
        "No animals are plants. ",
        "All humans are animals.",
        "All pupils are human.",
        "All flowers are plants.",
        "If Jack is a human or a flower, then Jack is a human and a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)"
      ],
      "question": "Jack is a plant.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "65": [
    {
      "id": 706,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "66": [
    {
      "id": 1239,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on York Street. ",
        "All buildings managed by Yale Housing are dormitories. ",
        "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "No buildings open to students are established after 1800. ",
        "All buildings located on York Street are open to students. ",
        "Harkness is either a building operated by Yale Housing staff or located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → InYorkStreet(x))",
        "∀x (ManagedByYaleHousing(x) → YaleDormitory(x))",
        "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "∀x (InYorkStreet(x) → OpenToStudents(x))",
        "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)"
      ],
      "question": "Harkness is established before 1800.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1238,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on York Street. ",
        "All buildings managed by Yale Housing are dormitories. ",
        "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "No buildings open to students are established after 1800. ",
        "All buildings located on York Street are open to students. ",
        "Harkness is either a building operated by Yale Housing staff or located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → InYorkStreet(x))",
        "∀x (ManagedByYaleHousing(x) → YaleDormitory(x))",
        "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "∀x (InYorkStreet(x) → OpenToStudents(x))",
        "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)"
      ],
      "question": "Harkness is established after 1800.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1237,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on York Street. ",
        "All buildings managed by Yale Housing are dormitories. ",
        "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "No buildings open to students are established after 1800. ",
        "All buildings located on York Street are open to students. ",
        "Harkness is either a building operated by Yale Housing staff or located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → InYorkStreet(x))",
        "∀x (ManagedByYaleHousing(x) → YaleDormitory(x))",
        "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "∀x (InYorkStreet(x) → OpenToStudents(x))",
        "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)"
      ],
      "question": "Harkness is not a Yale dormitory.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "67": [
    {
      "id": 1239,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on York Street. ",
        "All buildings managed by Yale Housing are dormitories. ",
        "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "No buildings open to students are established after 1800. ",
        "All buildings located on York Street are open to students. ",
        "Harkness is either a building operated by Yale Housing staff or located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → InYorkStreet(x))",
        "∀x (ManagedByYaleHousing(x) → YaleDormitory(x))",
        "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "∀x (InYorkStreet(x) → OpenToStudents(x))",
        "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)"
      ],
      "question": "Harkness is established before 1800.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1238,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on York Street. ",
        "All buildings managed by Yale Housing are dormitories. ",
        "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "No buildings open to students are established after 1800. ",
        "All buildings located on York Street are open to students. ",
        "Harkness is either a building operated by Yale Housing staff or located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → InYorkStreet(x))",
        "∀x (ManagedByYaleHousing(x) → YaleDormitory(x))",
        "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "∀x (InYorkStreet(x) → OpenToStudents(x))",
        "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)"
      ],
      "question": "Harkness is established after 1800.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1237,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on York Street. ",
        "All buildings managed by Yale Housing are dormitories. ",
        "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "No buildings open to students are established after 1800. ",
        "All buildings located on York Street are open to students. ",
        "Harkness is either a building operated by Yale Housing staff or located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → InYorkStreet(x))",
        "∀x (ManagedByYaleHousing(x) → YaleDormitory(x))",
        "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "∀x (InYorkStreet(x) → OpenToStudents(x))",
        "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)"
      ],
      "question": "Harkness is not a Yale dormitory.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "68": [
    {
      "id": 1239,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on York Street. ",
        "All buildings managed by Yale Housing are dormitories. ",
        "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "No buildings open to students are established after 1800. ",
        "All buildings located on York Street are open to students. ",
        "Harkness is either a building operated by Yale Housing staff or located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → InYorkStreet(x))",
        "∀x (ManagedByYaleHousing(x) → YaleDormitory(x))",
        "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "∀x (InYorkStreet(x) → OpenToStudents(x))",
        "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)"
      ],
      "question": "Harkness is established before 1800.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1237,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on York Street. ",
        "All buildings managed by Yale Housing are dormitories. ",
        "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "No buildings open to students are established after 1800. ",
        "All buildings located on York Street are open to students. ",
        "Harkness is either a building operated by Yale Housing staff or located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → InYorkStreet(x))",
        "∀x (ManagedByYaleHousing(x) → YaleDormitory(x))",
        "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "∀x (InYorkStreet(x) → OpenToStudents(x))",
        "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)"
      ],
      "question": "Harkness is not a Yale dormitory.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1238,
      "story_id": 432,
      "context": [
        "All Yale dormitories are located on York Street. ",
        "All buildings managed by Yale Housing are dormitories. ",
        "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "No buildings open to students are established after 1800. ",
        "All buildings located on York Street are open to students. ",
        "Harkness is either a building operated by Yale Housing staff or located on York Street. "
      ],
      "context_fol": [
        "∀x (YaleDormitory(x) → InYorkStreet(x))",
        "∀x (ManagedByYaleHousing(x) → YaleDormitory(x))",
        "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "∀x (InYorkStreet(x) → OpenToStudents(x))",
        "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)"
      ],
      "question": "Harkness is established after 1800.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "69": [
    {
      "id": 1335,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is ugly.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1336,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is cold-blooded and breaks the law.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1337,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "If Garry is evil or breaks the law, then Garry is not both a criminal and breaking the law.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "70": [
    {
      "id": 1335,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is ugly.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1336,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is cold-blooded and breaks the law.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1337,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "If Garry is evil or breaks the law, then Garry is not both a criminal and breaking the law.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "71": [
    {
      "id": 276,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds anime.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 274,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds another company.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 275,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Tecmo holds another company.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "72": [
    {
      "id": 276,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds anime.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 274,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds another company.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 275,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Tecmo holds another company.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "73": [
    {
      "id": 274,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds another company.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 276,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Koei Tecmo holds anime.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 275,
      "story_id": 90,
      "context": [
        "Koei Tecmo is a Japanese video game and anime holding company.",
        "Holding companies hold several companies.",
        "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "Video game holding companies are holding companies."
      ],
      "context_fol": [
        "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))"
      ],
      "question": "Tecmo holds another company.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "74": [
    {
      "id": 1235,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1232,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 619,
      "story_id": 215,
      "context": [
        "Adam owns cars.",
        "Adam has a favorite car.",
        "Among the cars he owns, Adam's favorite car is European.",
        "Adam broke his favorite car."
      ],
      "context_fol": [
        "∃x (Owns(adam, x))",
        "∃x (Favorite(adam, x))",
        "∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → European(x))",
        "∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))"
      ],
      "question": "Adam owns a Japanese car.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "75": [
    {
      "id": 619,
      "story_id": 215,
      "context": [
        "Adam owns cars.",
        "Adam has a favorite car.",
        "Among the cars he owns, Adam's favorite car is European.",
        "Adam broke his favorite car."
      ],
      "context_fol": [
        "∃x (Owns(adam, x))",
        "∃x (Favorite(adam, x))",
        "∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → European(x))",
        "∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))"
      ],
      "question": "Adam owns a Japanese car.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 850,
      "story_id": 329,
      "context": [
        "All young working professionals who have regular 9-5 jobs also have pets.",
        "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.",
        "All people who have pets are people who have at least one child.",
        "People who do not have at least one child are people who own a sports car.",
        "Mary either does not own a sports car or, if they do, then they do not have at least one child."
      ],
      "context_fol": [
        "∀x (Working(x) → Pets(x))",
        "∃x (Manhattan(x) ∧ Working(x))",
        "∀x (Pets(x) → Child(x))",
        "∀x (Child(x) → ¬Car(x))",
        "¬(Car(mary) ⊕ Child(mary))"
      ],
      "question": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1235,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "76": [
    {
      "id": 926,
      "story_id": 348,
      "context": [
        "All young adults go on a diet.",
        "All college students are young adults.",
        "All Yale students are college students.",
        "Someone is either a Yale student or a Harvard student.",
        "All Harvard students are diligent.",
        "If Susan is a Harvard student, then she is a young adult.",
        "If Susan is a Yale student, then she does not go on a diet."
      ],
      "context_fol": [
        "∀x (YoungAdult(x) → GoOnDiet(x))",
        "∀x (CollegeStudent(x) → YoungAdult(x))",
        "∀x (YaleStudent(x) → CollegeStudent(x))",
        "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "∀x (HarvardStudent(x) → Diligent(x))",
        "HarvardStudent(susan) → YoungAdult(susan)",
        "YaleStudent(susan) → ¬GoOnDiet(susan)"
      ],
      "question": "Susan is a college student.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 928,
      "story_id": 348,
      "context": [
        "All young adults go on a diet.",
        "All college students are young adults.",
        "All Yale students are college students.",
        "Someone is either a Yale student or a Harvard student.",
        "All Harvard students are diligent.",
        "If Susan is a Harvard student, then she is a young adult.",
        "If Susan is a Yale student, then she does not go on a diet."
      ],
      "context_fol": [
        "∀x (YoungAdult(x) → GoOnDiet(x))",
        "∀x (CollegeStudent(x) → YoungAdult(x))",
        "∀x (YaleStudent(x) → CollegeStudent(x))",
        "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "∀x (HarvardStudent(x) → Diligent(x))",
        "HarvardStudent(susan) → YoungAdult(susan)",
        "YaleStudent(susan) → ¬GoOnDiet(susan)"
      ],
      "question": "Susan does not go on a diet and is diligent.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 927,
      "story_id": 348,
      "context": [
        "All young adults go on a diet.",
        "All college students are young adults.",
        "All Yale students are college students.",
        "Someone is either a Yale student or a Harvard student.",
        "All Harvard students are diligent.",
        "If Susan is a Harvard student, then she is a young adult.",
        "If Susan is a Yale student, then she does not go on a diet."
      ],
      "context_fol": [
        "∀x (YoungAdult(x) → GoOnDiet(x))",
        "∀x (CollegeStudent(x) → YoungAdult(x))",
        "∀x (YaleStudent(x) → CollegeStudent(x))",
        "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "∀x (HarvardStudent(x) → Diligent(x))",
        "HarvardStudent(susan) → YoungAdult(susan)",
        "YaleStudent(susan) → ¬GoOnDiet(susan)"
      ],
      "question": "Susan goes on a diet and is diligent.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "77": [
    {
      "id": 926,
      "story_id": 348,
      "context": [
        "All young adults go on a diet.",
        "All college students are young adults.",
        "All Yale students are college students.",
        "Someone is either a Yale student or a Harvard student.",
        "All Harvard students are diligent.",
        "If Susan is a Harvard student, then she is a young adult.",
        "If Susan is a Yale student, then she does not go on a diet."
      ],
      "context_fol": [
        "∀x (YoungAdult(x) → GoOnDiet(x))",
        "∀x (CollegeStudent(x) → YoungAdult(x))",
        "∀x (YaleStudent(x) → CollegeStudent(x))",
        "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "∀x (HarvardStudent(x) → Diligent(x))",
        "HarvardStudent(susan) → YoungAdult(susan)",
        "YaleStudent(susan) → ¬GoOnDiet(susan)"
      ],
      "question": "Susan is a college student.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 928,
      "story_id": 348,
      "context": [
        "All young adults go on a diet.",
        "All college students are young adults.",
        "All Yale students are college students.",
        "Someone is either a Yale student or a Harvard student.",
        "All Harvard students are diligent.",
        "If Susan is a Harvard student, then she is a young adult.",
        "If Susan is a Yale student, then she does not go on a diet."
      ],
      "context_fol": [
        "∀x (YoungAdult(x) → GoOnDiet(x))",
        "∀x (CollegeStudent(x) → YoungAdult(x))",
        "∀x (YaleStudent(x) → CollegeStudent(x))",
        "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "∀x (HarvardStudent(x) → Diligent(x))",
        "HarvardStudent(susan) → YoungAdult(susan)",
        "YaleStudent(susan) → ¬GoOnDiet(susan)"
      ],
      "question": "Susan does not go on a diet and is diligent.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 927,
      "story_id": 348,
      "context": [
        "All young adults go on a diet.",
        "All college students are young adults.",
        "All Yale students are college students.",
        "Someone is either a Yale student or a Harvard student.",
        "All Harvard students are diligent.",
        "If Susan is a Harvard student, then she is a young adult.",
        "If Susan is a Yale student, then she does not go on a diet."
      ],
      "context_fol": [
        "∀x (YoungAdult(x) → GoOnDiet(x))",
        "∀x (CollegeStudent(x) → YoungAdult(x))",
        "∀x (YaleStudent(x) → CollegeStudent(x))",
        "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "∀x (HarvardStudent(x) → Diligent(x))",
        "HarvardStudent(susan) → YoungAdult(susan)",
        "YaleStudent(susan) → ¬GoOnDiet(susan)"
      ],
      "question": "Susan goes on a diet and is diligent.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "78": [
    {
      "id": 926,
      "story_id": 348,
      "context": [
        "All young adults go on a diet.",
        "All college students are young adults.",
        "All Yale students are college students.",
        "Someone is either a Yale student or a Harvard student.",
        "All Harvard students are diligent.",
        "If Susan is a Harvard student, then she is a young adult.",
        "If Susan is a Yale student, then she does not go on a diet."
      ],
      "context_fol": [
        "∀x (YoungAdult(x) → GoOnDiet(x))",
        "∀x (CollegeStudent(x) → YoungAdult(x))",
        "∀x (YaleStudent(x) → CollegeStudent(x))",
        "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "∀x (HarvardStudent(x) → Diligent(x))",
        "HarvardStudent(susan) → YoungAdult(susan)",
        "YaleStudent(susan) → ¬GoOnDiet(susan)"
      ],
      "question": "Susan is a college student.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 928,
      "story_id": 348,
      "context": [
        "All young adults go on a diet.",
        "All college students are young adults.",
        "All Yale students are college students.",
        "Someone is either a Yale student or a Harvard student.",
        "All Harvard students are diligent.",
        "If Susan is a Harvard student, then she is a young adult.",
        "If Susan is a Yale student, then she does not go on a diet."
      ],
      "context_fol": [
        "∀x (YoungAdult(x) → GoOnDiet(x))",
        "∀x (CollegeStudent(x) → YoungAdult(x))",
        "∀x (YaleStudent(x) → CollegeStudent(x))",
        "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "∀x (HarvardStudent(x) → Diligent(x))",
        "HarvardStudent(susan) → YoungAdult(susan)",
        "YaleStudent(susan) → ¬GoOnDiet(susan)"
      ],
      "question": "Susan does not go on a diet and is diligent.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 927,
      "story_id": 348,
      "context": [
        "All young adults go on a diet.",
        "All college students are young adults.",
        "All Yale students are college students.",
        "Someone is either a Yale student or a Harvard student.",
        "All Harvard students are diligent.",
        "If Susan is a Harvard student, then she is a young adult.",
        "If Susan is a Yale student, then she does not go on a diet."
      ],
      "context_fol": [
        "∀x (YoungAdult(x) → GoOnDiet(x))",
        "∀x (CollegeStudent(x) → YoungAdult(x))",
        "∀x (YaleStudent(x) → CollegeStudent(x))",
        "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "∀x (HarvardStudent(x) → Diligent(x))",
        "HarvardStudent(susan) → YoungAdult(susan)",
        "YaleStudent(susan) → ¬GoOnDiet(susan)"
      ],
      "question": "Susan goes on a diet and is diligent.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "79": [
    {
      "id": 691,
      "story_id": 243,
      "context": [
        "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
        "People who have the talent of cooking can distinguish the taste of different condiments.",
        "Only people with the talent of cooking can make delicious meals.",
        "If the meal is popular at the party, then it is delicious.",
        "John can make meals which are popular at the party."
      ],
      "context_fol": [
        "∀x (People(x) ∧ DistinguishCondiments(x) → UseDiffCondiments(x)) ∧ (∃x (People(x) ∧ ¬DistinguishCondiments(x) ∧ UseDiffCondiments(x))) ∧ ¬(∀x (People(x) ∧ DistinguishCondiments(x)))",
        "∀x (People(x) ∧ TalentCooking(x) → DistinguishCondiments(x))",
        "∀x ∀y (MakeMeal(x, y) ∧ Delicious(y) ∧ People(x) → TalentCooking(x)) ",
        "∀x ∀y (MakeMeal(x, y) ∧ People(x) ∧ Popular(y) → Delicious(y))",
        "∃x (People(john) ∧ MakeMeal(john, x) ∧ Popular(x) ∧ People(peter) ∧ ¬UseDiffCondiments(peter))"
      ],
      "question": "John cannot use different condiments to cook.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 698,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Cook(x))",
        "∃x (¬Chef(x) ∧ Cook(x))",
        "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"
      ],
      "question": "Luke is a chef.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 697,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Cook(x))",
        "∃x (¬Chef(x) ∧ Cook(x))",
        "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"
      ],
      "question": "Luke can make a good breakfast.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "80": [
    {
      "id": 691,
      "story_id": 243,
      "context": [
        "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
        "People who have the talent of cooking can distinguish the taste of different condiments.",
        "Only people with the talent of cooking can make delicious meals.",
        "If the meal is popular at the party, then it is delicious.",
        "John can make meals which are popular at the party."
      ],
      "context_fol": [
        "∀x (People(x) ∧ DistinguishCondiments(x) → UseDiffCondiments(x)) ∧ (∃x (People(x) ∧ ¬DistinguishCondiments(x) ∧ UseDiffCondiments(x))) ∧ ¬(∀x (People(x) ∧ DistinguishCondiments(x)))",
        "∀x (People(x) ∧ TalentCooking(x) → DistinguishCondiments(x))",
        "∀x ∀y (MakeMeal(x, y) ∧ Delicious(y) ∧ People(x) → TalentCooking(x)) ",
        "∀x ∀y (MakeMeal(x, y) ∧ People(x) ∧ Popular(y) → Delicious(y))",
        "∃x (People(john) ∧ MakeMeal(john, x) ∧ Popular(x) ∧ People(peter) ∧ ¬UseDiffCondiments(peter))"
      ],
      "question": "John cannot use different condiments to cook.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 698,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Cook(x))",
        "∃x (¬Chef(x) ∧ Cook(x))",
        "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"
      ],
      "question": "Luke is a chef.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 697,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Cook(x))",
        "∃x (¬Chef(x) ∧ Cook(x))",
        "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"
      ],
      "question": "Luke can make a good breakfast.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "81": [
    {
      "id": 691,
      "story_id": 243,
      "context": [
        "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
        "People who have the talent of cooking can distinguish the taste of different condiments.",
        "Only people with the talent of cooking can make delicious meals.",
        "If the meal is popular at the party, then it is delicious.",
        "John can make meals which are popular at the party."
      ],
      "context_fol": [
        "∀x (People(x) ∧ DistinguishCondiments(x) → UseDiffCondiments(x)) ∧ (∃x (People(x) ∧ ¬DistinguishCondiments(x) ∧ UseDiffCondiments(x))) ∧ ¬(∀x (People(x) ∧ DistinguishCondiments(x)))",
        "∀x (People(x) ∧ TalentCooking(x) → DistinguishCondiments(x))",
        "∀x ∀y (MakeMeal(x, y) ∧ Delicious(y) ∧ People(x) → TalentCooking(x)) ",
        "∀x ∀y (MakeMeal(x, y) ∧ People(x) ∧ Popular(y) → Delicious(y))",
        "∃x (People(john) ∧ MakeMeal(john, x) ∧ Popular(x) ∧ People(peter) ∧ ¬UseDiffCondiments(peter))"
      ],
      "question": "John cannot use different condiments to cook.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 698,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Cook(x))",
        "∃x (¬Chef(x) ∧ Cook(x))",
        "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"
      ],
      "question": "Luke is a chef.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 697,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Cook(x))",
        "∃x (¬Chef(x) ∧ Cook(x))",
        "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"
      ],
      "question": "Luke can make a good breakfast.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "82": [
    {
      "id": 691,
      "story_id": 243,
      "context": [
        "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
        "People who have the talent of cooking can distinguish the taste of different condiments.",
        "Only people with the talent of cooking can make delicious meals.",
        "If the meal is popular at the party, then it is delicious.",
        "John can make meals which are popular at the party."
      ],
      "context_fol": [
        "∀x (People(x) ∧ DistinguishCondiments(x) → UseDiffCondiments(x)) ∧ (∃x (People(x) ∧ ¬DistinguishCondiments(x) ∧ UseDiffCondiments(x))) ∧ ¬(∀x (People(x) ∧ DistinguishCondiments(x)))",
        "∀x (People(x) ∧ TalentCooking(x) → DistinguishCondiments(x))",
        "∀x ∀y (MakeMeal(x, y) ∧ Delicious(y) ∧ People(x) → TalentCooking(x)) ",
        "∀x ∀y (MakeMeal(x, y) ∧ People(x) ∧ Popular(y) → Delicious(y))",
        "∃x (People(john) ∧ MakeMeal(john, x) ∧ Popular(x) ∧ People(peter) ∧ ¬UseDiffCondiments(peter))"
      ],
      "question": "John cannot use different condiments to cook.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 698,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Cook(x))",
        "∃x (¬Chef(x) ∧ Cook(x))",
        "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"
      ],
      "question": "Luke is a chef.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 697,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Cook(x))",
        "∃x (¬Chef(x) ∧ Cook(x))",
        "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"
      ],
      "question": "Luke can make a good breakfast.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "83": [
    {
      "id": 691,
      "story_id": 243,
      "context": [
        "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
        "People who have the talent of cooking can distinguish the taste of different condiments.",
        "Only people with the talent of cooking can make delicious meals.",
        "If the meal is popular at the party, then it is delicious.",
        "John can make meals which are popular at the party."
      ],
      "context_fol": [
        "∀x (People(x) ∧ DistinguishCondiments(x) → UseDiffCondiments(x)) ∧ (∃x (People(x) ∧ ¬DistinguishCondiments(x) ∧ UseDiffCondiments(x))) ∧ ¬(∀x (People(x) ∧ DistinguishCondiments(x)))",
        "∀x (People(x) ∧ TalentCooking(x) → DistinguishCondiments(x))",
        "∀x ∀y (MakeMeal(x, y) ∧ Delicious(y) ∧ People(x) → TalentCooking(x)) ",
        "∀x ∀y (MakeMeal(x, y) ∧ People(x) ∧ Popular(y) → Delicious(y))",
        "∃x (People(john) ∧ MakeMeal(john, x) ∧ Popular(x) ∧ People(peter) ∧ ¬UseDiffCondiments(peter))"
      ],
      "question": "John cannot use different condiments to cook.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 698,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Cook(x))",
        "∃x (¬Chef(x) ∧ Cook(x))",
        "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"
      ],
      "question": "Luke is a chef.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 697,
      "story_id": 249,
      "context": [
        "Every chef can cook.",
        "Some people who aren’t chefs can cook.",
        "People who cook can make scrambled eggs and pasta.",
        "If someone can make cookies and muffins, they are a baker.",
        "Bakers who can also make scrambled eggs can make a good breakfast.",
        "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
      ],
      "context_fol": [
        "∀x (Chef(x) → Cook(x))",
        "∃x (¬Chef(x) ∧ Cook(x))",
        "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)"
      ],
      "question": "Luke can make a good breakfast.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "84": [
    {
      "id": 1028,
      "story_id": 383,
      "context": [
        "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
        "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
        "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
        "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
        "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
        "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out."
      ],
      "context_fol": [
        "∀x Spa(x) → ¬Miserly(x)",
        "∀x Miserly(x) ∨ Frivolous(x)",
        "∀x Frivolous(x) → Luxury(x)",
        "∀x Luxury(x) → Shopping(x)",
        "¬Miserly(Jess) → ¬Luxury(Jess)",
        "Luxury(Jess) ⊕ Miserly(Jess)) →  Luxury(Jess)"
      ],
      "question": "Jess frivolously spends a lot of money every time they go out.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 972,
      "story_id": 364,
      "context": [
        "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
        "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (CoffeeShop(x) → CaffeineAddict(x))",
        "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "∀x (MakeFood(x) → Takeout(x))",
        "∀x (KitchenAppliance(x) → ¬Takeout(x))",
        "∀x (Busy(x) → MakeFood(x))",
        "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))"
      ],
      "question": "Sam is addicted to coffee and other caffeinated drinks.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 973,
      "story_id": 364,
      "context": [
        "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
        "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (CoffeeShop(x) → CaffeineAddict(x))",
        "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "∀x (MakeFood(x) → Takeout(x))",
        "∀x (KitchenAppliance(x) → ¬Takeout(x))",
        "∀x (Busy(x) → MakeFood(x))",
        "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))"
      ],
      "question": "Sam owns at least one coffeemaker and one blender in her home.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "85": [
    {
      "id": 1028,
      "story_id": 383,
      "context": [
        "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
        "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
        "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
        "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
        "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
        "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out."
      ],
      "context_fol": [
        "∀x Spa(x) → ¬Miserly(x)",
        "∀x Miserly(x) ∨ Frivolous(x)",
        "∀x Frivolous(x) → Luxury(x)",
        "∀x Luxury(x) → Shopping(x)",
        "¬Miserly(Jess) → ¬Luxury(Jess)",
        "Luxury(Jess) ⊕ Miserly(Jess)) →  Luxury(Jess)"
      ],
      "question": "Jess frivolously spends a lot of money every time they go out.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 972,
      "story_id": 364,
      "context": [
        "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
        "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (CoffeeShop(x) → CaffeineAddict(x))",
        "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "∀x (MakeFood(x) → Takeout(x))",
        "∀x (KitchenAppliance(x) → ¬Takeout(x))",
        "∀x (Busy(x) → MakeFood(x))",
        "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))"
      ],
      "question": "Sam is addicted to coffee and other caffeinated drinks.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 973,
      "story_id": 364,
      "context": [
        "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
        "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (CoffeeShop(x) → CaffeineAddict(x))",
        "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "∀x (MakeFood(x) → Takeout(x))",
        "∀x (KitchenAppliance(x) → ¬Takeout(x))",
        "∀x (Busy(x) → MakeFood(x))",
        "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))"
      ],
      "question": "Sam owns at least one coffeemaker and one blender in her home.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "86": [
    {
      "id": 1028,
      "story_id": 383,
      "context": [
        "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
        "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
        "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
        "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
        "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
        "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out."
      ],
      "context_fol": [
        "∀x Spa(x) → ¬Miserly(x)",
        "∀x Miserly(x) ∨ Frivolous(x)",
        "∀x Frivolous(x) → Luxury(x)",
        "∀x Luxury(x) → Shopping(x)",
        "¬Miserly(Jess) → ¬Luxury(Jess)",
        "Luxury(Jess) ⊕ Miserly(Jess)) →  Luxury(Jess)"
      ],
      "question": "Jess frivolously spends a lot of money every time they go out.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 972,
      "story_id": 364,
      "context": [
        "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
        "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (CoffeeShop(x) → CaffeineAddict(x))",
        "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "∀x (MakeFood(x) → Takeout(x))",
        "∀x (KitchenAppliance(x) → ¬Takeout(x))",
        "∀x (Busy(x) → MakeFood(x))",
        "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))"
      ],
      "question": "Sam is addicted to coffee and other caffeinated drinks.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 973,
      "story_id": 364,
      "context": [
        "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
        "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (CoffeeShop(x) → CaffeineAddict(x))",
        "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "∀x (MakeFood(x) → Takeout(x))",
        "∀x (KitchenAppliance(x) → ¬Takeout(x))",
        "∀x (Busy(x) → MakeFood(x))",
        "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))"
      ],
      "question": "Sam owns at least one coffeemaker and one blender in her home.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "87": [
    {
      "id": 11,
      "story_id": 5,
      "context": [
        "Peter Parker is a either a superhero or a civilian.",
        "The Hulk is a destroyer.",
        "The Hulk wakes up when he is angry.",
        "If the Hulk wakes up, then he will break a bridge.",
        "Thor is a god.",
        "Thor will break a bridge when he is happy.",
        "A god is not a destroyer and a destroyer is not a god.",
        "Peter Parker wears a uniform when he is a superhero.",
        "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.",
        "If Thor is happy, the Hulk is angry."
      ],
      "context_fol": [
        "Superhero(peter) ⊕ Civilian(peter)",
        "Destroyer(hulk)",
        "Angry(hulk) → Wake(hulk)",
        "Wake(hulk) → BreakBridge(hulk)",
        "God(thor)",
        "Happy(thor) → BreakBridge(thor)",
        "∀x (God(x) ↔ ¬Destroyer(x))",
        "Superhero(peter) → WearUniform(peter)",
        "∀x (¬Civilian(peter) ↔ (Destroyer(x) ∧ BreakBridge(x)))",
        "Happy(thor) → Angry(hulk)"
      ],
      "question": "If the Hulk does not wake up, then Thor is not happy.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1335,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is ugly.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 12,
      "story_id": 5,
      "context": [
        "Peter Parker is a either a superhero or a civilian.",
        "The Hulk is a destroyer.",
        "The Hulk wakes up when he is angry.",
        "If the Hulk wakes up, then he will break a bridge.",
        "Thor is a god.",
        "Thor will break a bridge when he is happy.",
        "A god is not a destroyer and a destroyer is not a god.",
        "Peter Parker wears a uniform when he is a superhero.",
        "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.",
        "If Thor is happy, the Hulk is angry."
      ],
      "context_fol": [
        "Superhero(peter) ⊕ Civilian(peter)",
        "Destroyer(hulk)",
        "Angry(hulk) → Wake(hulk)",
        "Wake(hulk) → BreakBridge(hulk)",
        "God(thor)",
        "Happy(thor) → BreakBridge(thor)",
        "∀x (God(x) ↔ ¬Destroyer(x))",
        "Superhero(peter) → WearUniform(peter)",
        "∀x (¬Civilian(peter) ↔ (Destroyer(x) ∧ BreakBridge(x)))",
        "Happy(thor) → Angry(hulk)"
      ],
      "question": "If Thor is happy, then Peter Parker wears a uniform.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "88": [
    {
      "id": 140,
      "story_id": 48,
      "context": [
        "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "The Salmon of Doubt is about life experiences and technology.",
        "All authors are writers.",
        "Writers create innovative ideas.",
        "Some books that contain innovative ideas are about technology."
      ],
      "context_fol": [
        "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)",
        "∀x (Author(x) → Writer(x))",
        "∀x (Writer(x) → CreateInnovativeIdea(x))",
        "∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))"
      ],
      "question": "Douglas Adams created innovative ideas.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 67,
      "story_id": 23,
      "context": [
        "All books written by Cixin Liu have sold more than 1 million copies. ",
        "Some books that have won the Hugo Award were written by Cixin Liu.",
        "All books about the future are influenced by Isaac Asimov.",
        "The book the Three Body Problem has sold more than 1 million copies.",
        "The Three Body Problem is about the future."
      ],
      "context_fol": [
        "∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))",
        "∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu))",
        "∀x (Book(x) ∧ AboutFuture(x) → InfluencedBy(x, isaacasimov))",
        "Book(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion)",
        "AboutFuture(threebodyproblem)"
      ],
      "question": "The Three Body Problem was influenced by Isaac Asimov.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 139,
      "story_id": 48,
      "context": [
        "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "The Salmon of Doubt is about life experiences and technology.",
        "All authors are writers.",
        "Writers create innovative ideas.",
        "Some books that contain innovative ideas are about technology."
      ],
      "context_fol": [
        "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)",
        "∀x (Author(x) → Writer(x))",
        "∀x (Writer(x) → CreateInnovativeIdea(x))",
        "∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))"
      ],
      "question": "Douglas Adams is a writer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "89": [
    {
      "id": 140,
      "story_id": 48,
      "context": [
        "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "The Salmon of Doubt is about life experiences and technology.",
        "All authors are writers.",
        "Writers create innovative ideas.",
        "Some books that contain innovative ideas are about technology."
      ],
      "context_fol": [
        "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)",
        "∀x (Author(x) → Writer(x))",
        "∀x (Writer(x) → CreateInnovativeIdea(x))",
        "∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))"
      ],
      "question": "Douglas Adams created innovative ideas.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 91,
      "story_id": 31,
      "context": [
        "Naive cynicism was proposed by Justin Kruger and a colleague.",
        "Thomas Gilovich is a colleague of Justin Kruger. ",
        "Naive cynicism is a philosophy of mind."
      ],
      "context_fol": [
        "Proposed(justinKruger, naiveCynicism) ∧ Proposed(colleagueOfJustinKruger, naiveCynicism) ",
        "Colleague(thomasGilovich, justinKruger)",
        "PhilosophyOfMind(naiveCynicism)"
      ],
      "question": "Justin Kruger propose a philosophy of mind.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 139,
      "story_id": 48,
      "context": [
        "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "The Salmon of Doubt is about life experiences and technology.",
        "All authors are writers.",
        "Writers create innovative ideas.",
        "Some books that contain innovative ideas are about technology."
      ],
      "context_fol": [
        "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)",
        "∀x (Author(x) → Writer(x))",
        "∀x (Writer(x) → CreateInnovativeIdea(x))",
        "∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))"
      ],
      "question": "Douglas Adams is a writer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "90": [
    {
      "id": 140,
      "story_id": 48,
      "context": [
        "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "The Salmon of Doubt is about life experiences and technology.",
        "All authors are writers.",
        "Writers create innovative ideas.",
        "Some books that contain innovative ideas are about technology."
      ],
      "context_fol": [
        "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)",
        "∀x (Author(x) → Writer(x))",
        "∀x (Writer(x) → CreateInnovativeIdea(x))",
        "∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))"
      ],
      "question": "Douglas Adams created innovative ideas.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 139,
      "story_id": 48,
      "context": [
        "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "The Salmon of Doubt is about life experiences and technology.",
        "All authors are writers.",
        "Writers create innovative ideas.",
        "Some books that contain innovative ideas are about technology."
      ],
      "context_fol": [
        "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)",
        "∀x (Author(x) → Writer(x))",
        "∀x (Writer(x) → CreateInnovativeIdea(x))",
        "∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))"
      ],
      "question": "Douglas Adams is a writer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 67,
      "story_id": 23,
      "context": [
        "All books written by Cixin Liu have sold more than 1 million copies. ",
        "Some books that have won the Hugo Award were written by Cixin Liu.",
        "All books about the future are influenced by Isaac Asimov.",
        "The book the Three Body Problem has sold more than 1 million copies.",
        "The Three Body Problem is about the future."
      ],
      "context_fol": [
        "∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))",
        "∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu))",
        "∀x (Book(x) ∧ AboutFuture(x) → InfluencedBy(x, isaacasimov))",
        "Book(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion)",
        "AboutFuture(threebodyproblem)"
      ],
      "question": "The Three Body Problem was influenced by Isaac Asimov.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "91": [
    {
      "id": 1085,
      "story_id": 397,
      "context": [
        "Either block design or event-related design. ",
        "All event-related designs are brain image acquisition.",
        "All brain image acquisition is preceded by data processing.",
        "Nothing preceded by data processing acquires data.",
        "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."
      ],
      "context_fol": [
        "∀x (BlockDesign(x) ∨ Event-relatedDesign(x))",
        "∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))",
        "∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))",
        "∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))",
        "(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))"
      ],
      "question": "Picture memory is preceded by data processing.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1087,
      "story_id": 397,
      "context": [
        "Either block design or event-related design. ",
        "All event-related designs are brain image acquisition.",
        "All brain image acquisition is preceded by data processing.",
        "Nothing preceded by data processing acquires data.",
        "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."
      ],
      "context_fol": [
        "∀x (BlockDesign(x) ∨ Event-relatedDesign(x))",
        "∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))",
        "∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))",
        "∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))",
        "(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))"
      ],
      "question": "Picture memory is either a block design or acquiring data.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 545,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are a kind of summarization models.",
        "Extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are always faithful.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "92": [
    {
      "id": 1085,
      "story_id": 397,
      "context": [
        "Either block design or event-related design. ",
        "All event-related designs are brain image acquisition.",
        "All brain image acquisition is preceded by data processing.",
        "Nothing preceded by data processing acquires data.",
        "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."
      ],
      "context_fol": [
        "∀x (BlockDesign(x) ∨ Event-relatedDesign(x))",
        "∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))",
        "∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))",
        "∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))",
        "(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))"
      ],
      "question": "Picture memory is preceded by data processing.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 545,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are a kind of summarization models.",
        "Extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are always faithful.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1087,
      "story_id": 397,
      "context": [
        "Either block design or event-related design. ",
        "All event-related designs are brain image acquisition.",
        "All brain image acquisition is preceded by data processing.",
        "Nothing preceded by data processing acquires data.",
        "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."
      ],
      "context_fol": [
        "∀x (BlockDesign(x) ∨ Event-relatedDesign(x))",
        "∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))",
        "∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))",
        "∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))",
        "(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))"
      ],
      "question": "Picture memory is either a block design or acquiring data.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "93": [
    {
      "id": 987,
      "story_id": 369,
      "context": [
        "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
        "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
        "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "If people live with at least one roommate then they do not own at least one pet.",
        "All people who own at least one pet live with at least one roommate.",
        "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (Iphone(x) → ¬House(x))",
        "∀x (Tech(x) → Iphone(x))",
        "∀x (House(x) ∨ Apartment(x))",
        "∀x (Roommate(x) → ¬Pet(x))",
        "∀x (Apartment(x) → Roommate(x))",
        "¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))"
      ],
      "question": "Emma lives with at least one roommate.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 988,
      "story_id": 369,
      "context": [
        "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
        "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
        "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "If people live with at least one roommate then they do not own at least one pet.",
        "All people who own at least one pet live with at least one roommate.",
        "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (Iphone(x) → ¬House(x))",
        "∀x (Tech(x) → Iphone(x))",
        "∀x (House(x) ∨ Apartment(x))",
        "∀x (Roommate(x) → ¬Pet(x))",
        "∀x (Apartment(x) → Roommate(x))",
        "¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))"
      ],
      "question": "Emma enjoys reading about tech specs and keeping up to date on the latest technology.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 863,
      "story_id": 332,
      "context": [
        "If people own at least one pet, then they do not have tidy houses.",
        "If people grew up with childhood pets, then they own at least one pet.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people live in the suburbs, then they have tidy houses.",
        "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
      ],
      "context_fol": [
        "∀x (OwnPet(x) → ¬TidyHouse(x))",
        "∀x (ChildhoodPet(x) → OwnPet(x))",
        "∀x (HireCleaning(x) → TidyHouse(x))",
        "∀x (Suburbs(x) → ChildhoodPet(x))",
        "¬(HireCleaning(jack) ⊕ OwnPet(jack))"
      ],
      "question": "Jack lives in the suburbs.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "94": [
    {
      "id": 987,
      "story_id": 369,
      "context": [
        "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
        "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
        "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "If people live with at least one roommate then they do not own at least one pet.",
        "All people who own at least one pet live with at least one roommate.",
        "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (Iphone(x) → ¬House(x))",
        "∀x (Tech(x) → Iphone(x))",
        "∀x (House(x) ∨ Apartment(x))",
        "∀x (Roommate(x) → ¬Pet(x))",
        "∀x (Apartment(x) → Roommate(x))",
        "¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))"
      ],
      "question": "Emma lives with at least one roommate.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 988,
      "story_id": 369,
      "context": [
        "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
        "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
        "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "If people live with at least one roommate then they do not own at least one pet.",
        "All people who own at least one pet live with at least one roommate.",
        "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (Iphone(x) → ¬House(x))",
        "∀x (Tech(x) → Iphone(x))",
        "∀x (House(x) ∨ Apartment(x))",
        "∀x (Roommate(x) → ¬Pet(x))",
        "∀x (Apartment(x) → Roommate(x))",
        "¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))"
      ],
      "question": "Emma enjoys reading about tech specs and keeping up to date on the latest technology.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 863,
      "story_id": 332,
      "context": [
        "If people own at least one pet, then they do not have tidy houses.",
        "If people grew up with childhood pets, then they own at least one pet.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people live in the suburbs, then they have tidy houses.",
        "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
      ],
      "context_fol": [
        "∀x (OwnPet(x) → ¬TidyHouse(x))",
        "∀x (ChildhoodPet(x) → OwnPet(x))",
        "∀x (HireCleaning(x) → TidyHouse(x))",
        "∀x (Suburbs(x) → ChildhoodPet(x))",
        "¬(HireCleaning(jack) ⊕ OwnPet(jack))"
      ],
      "question": "Jack lives in the suburbs.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "95": [
    {
      "id": 987,
      "story_id": 369,
      "context": [
        "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
        "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
        "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "If people live with at least one roommate then they do not own at least one pet.",
        "All people who own at least one pet live with at least one roommate.",
        "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (Iphone(x) → ¬House(x))",
        "∀x (Tech(x) → Iphone(x))",
        "∀x (House(x) ∨ Apartment(x))",
        "∀x (Roommate(x) → ¬Pet(x))",
        "∀x (Apartment(x) → Roommate(x))",
        "¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))"
      ],
      "question": "Emma lives with at least one roommate.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 988,
      "story_id": 369,
      "context": [
        "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
        "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
        "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "If people live with at least one roommate then they do not own at least one pet.",
        "All people who own at least one pet live with at least one roommate.",
        "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (Iphone(x) → ¬House(x))",
        "∀x (Tech(x) → Iphone(x))",
        "∀x (House(x) ∨ Apartment(x))",
        "∀x (Roommate(x) → ¬Pet(x))",
        "∀x (Apartment(x) → Roommate(x))",
        "¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))"
      ],
      "question": "Emma enjoys reading about tech specs and keeping up to date on the latest technology.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 863,
      "story_id": 332,
      "context": [
        "If people own at least one pet, then they do not have tidy houses.",
        "If people grew up with childhood pets, then they own at least one pet.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people live in the suburbs, then they have tidy houses.",
        "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
      ],
      "context_fol": [
        "∀x (OwnPet(x) → ¬TidyHouse(x))",
        "∀x (ChildhoodPet(x) → OwnPet(x))",
        "∀x (HireCleaning(x) → TidyHouse(x))",
        "∀x (Suburbs(x) → ChildhoodPet(x))",
        "¬(HireCleaning(jack) ⊕ OwnPet(jack))"
      ],
      "question": "Jack lives in the suburbs.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "96": [
    {
      "id": 921,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 922,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 923,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is a living being.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "97": [
    {
      "id": 921,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 922,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 923,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is a living being.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "98": [
    {
      "id": 921,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 922,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 923,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is a living being.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "99": [
    {
      "id": 1335,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is ugly.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1336,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is cold-blooded and breaks the law.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1348,
      "story_id": 465,
      "context": [
        "All men are human.",
        "All gentlemen are men.",
        "All lawyers are gentlemen.",
        "All women are human.",
        "No sheep are human.",
        "If Mike is not both a human and a sheep, then Mike is either a man or a human."
      ],
      "context_fol": [
        "∀x (Man(x) → Human(x))",
        "∀x (Gentleman(x) → Man(x))",
        "∀x (Lawyer(x) → Gentleman(x))",
        "∀x (Woman(x) → Human(x))",
        "∀x (Sheep(x) → ¬Human(x))",
        "(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)"
      ],
      "question": "If Mike is a gentleman or a lawyer, then Mike is neither a woman nor a lawyer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "100": [
    {
      "id": 1335,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is ugly.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1336,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is cold-blooded and breaks the law.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1337,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "If Garry is evil or breaks the law, then Garry is not both a criminal and breaking the law.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "101": [
    {
      "id": 1335,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is ugly.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1336,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "Garry is cold-blooded and breaks the law.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1337,
      "story_id": 461,
      "context": [
        "No criminal is kind. ",
        "All person who breaks the law is a criminals.",
        "People are either kind or evil.",
        "If someone is evil, then they are ugly.",
        "If someone is evil, then they are cold-blood.",
        "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
      ],
      "context_fol": [
        "∀x (Criminal(x) → ¬Kind(x))",
        "∀x (BreakLaw(x) → Criminal(x))",
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Evil(x) → ColdBlood(x))",
        "((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)"
      ],
      "question": "If Garry is evil or breaks the law, then Garry is not both a criminal and breaking the law.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "102": [
    {
      "id": 871,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 875,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 876,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "103": [
    {
      "id": 871,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 875,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 876,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "104": [
    {
      "id": 871,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 875,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 876,
      "story_id": 333,
      "context": [
        "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "All young teenage girls who attend college are big fans of pop bands and singers.",
        "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
      ],
      "context_fol": [
        "∀x (Decor(x) → ¬MoveOut(x))",
        "∀x (Ambitious(x) → MoveOut(x))",
        "∀x (Fans(x) → Decor(x))",
        "∀x (CollegeTeen(x) → Ambitious(x))",
        "Ambitious(sam) → Fans(sam)"
      ],
      "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "105": [
    {
      "id": 563,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))",
        "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))"
      ],
      "question": "ETS administers international tests including the TOEFL, GRE and subject tests in China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 561,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))",
        "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))"
      ],
      "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 562,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))",
        "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))"
      ],
      "question": "ETS doesn't administer tests internationally.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "106": [
    {
      "id": 563,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))",
        "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))"
      ],
      "question": "ETS administers international tests including the TOEFL, GRE and subject tests in China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 561,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))",
        "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))"
      ],
      "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 562,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))",
        "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))"
      ],
      "question": "ETS doesn't administer tests internationally.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "107": [
    {
      "id": 563,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))",
        "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))"
      ],
      "question": "ETS administers international tests including the TOEFL, GRE and subject tests in China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 561,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))",
        "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))"
      ],
      "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 562,
      "story_id": 196,
      "context": [
        "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ETS also develops K-12 statewide assessments used for accountability testing in many states."
      ],
      "context_fol": [
        "∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))",
        "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))"
      ],
      "question": "ETS doesn't administer tests internationally.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "108": [
    {
      "id": 978,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "Franny has to visit the dentist frequently.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 867,
      "story_id": 332,
      "context": [
        "If people own at least one pet, then they do not have tidy houses.",
        "If people grew up with childhood pets, then they own at least one pet.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people live in the suburbs, then they have tidy houses.",
        "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
      ],
      "context_fol": [
        "∀x (OwnPet(x) → ¬TidyHouse(x))",
        "∀x (ChildhoodPet(x) → OwnPet(x))",
        "∀x (HireCleaning(x) → TidyHouse(x))",
        "∀x (Suburbs(x) → ChildhoodPet(x))",
        "¬(HireCleaning(jack) ⊕ OwnPet(jack))"
      ],
      "question": "Jack grew up with childhood pets and lives in the suburbs.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 958,
      "story_id": 359,
      "context": [
        "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
        "All young children below the age of ten eat cereal and milk every day for breakfast.",
        "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
        "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
        "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
        "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
      ],
      "context_fol": [
        "∀x (Cereal(x) → BusyMorning(x))",
        "∀x (YoungChildren(x) → BusyMorning(x))",
        "∀x (YoungChildren(x) ⊕ Committments(x))",
        "∀x (Committments(x) → Hardworking(x))",
        "∀x (Hardworking(x) → ¬Organized(x))",
        "(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))"
      ],
      "question": "John eats cereal and milk every day for breakfast.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "109": [
    {
      "id": 958,
      "story_id": 359,
      "context": [
        "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
        "All young children below the age of ten eat cereal and milk every day for breakfast.",
        "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
        "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
        "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
        "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
      ],
      "context_fol": [
        "∀x (Cereal(x) → BusyMorning(x))",
        "∀x (YoungChildren(x) → BusyMorning(x))",
        "∀x (YoungChildren(x) ⊕ Committments(x))",
        "∀x (Committments(x) → Hardworking(x))",
        "∀x (Hardworking(x) → ¬Organized(x))",
        "(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))"
      ],
      "question": "John eats cereal and milk every day for breakfast.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 867,
      "story_id": 332,
      "context": [
        "If people own at least one pet, then they do not have tidy houses.",
        "If people grew up with childhood pets, then they own at least one pet.",
        "If people hire a maid or cleaning service, then they have tidy houses.",
        "If people live in the suburbs, then they have tidy houses.",
        "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
      ],
      "context_fol": [
        "∀x (OwnPet(x) → ¬TidyHouse(x))",
        "∀x (ChildhoodPet(x) → OwnPet(x))",
        "∀x (HireCleaning(x) → TidyHouse(x))",
        "∀x (Suburbs(x) → ChildhoodPet(x))",
        "¬(HireCleaning(jack) ⊕ OwnPet(jack))"
      ],
      "question": "Jack grew up with childhood pets and lives in the suburbs.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 978,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "Franny has to visit the dentist frequently.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "110": [
    {
      "id": 958,
      "story_id": 359,
      "context": [
        "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
        "All young children below the age of ten eat cereal and milk every day for breakfast.",
        "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
        "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
        "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
        "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
      ],
      "context_fol": [
        "∀x (Cereal(x) → BusyMorning(x))",
        "∀x (YoungChildren(x) → BusyMorning(x))",
        "∀x (YoungChildren(x) ⊕ Committments(x))",
        "∀x (Committments(x) → Hardworking(x))",
        "∀x (Hardworking(x) → ¬Organized(x))",
        "(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))"
      ],
      "question": "John eats cereal and milk every day for breakfast.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 978,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "Franny has to visit the dentist frequently.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 979,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "111": [
    {
      "id": 736,
      "story_id": 287,
      "context": [
        "All trees are plants. ",
        "Some living things are trees."
      ],
      "context_fol": [
        "∀x (Tree(x) → Plant(x))",
        "∃x (Living(x) ∧ Tree(x))"
      ],
      "question": "Some living things are plants.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 789,
      "story_id": 314,
      "context": [
        "No animals are plants. ",
        "All humans are animals.",
        "All pupils are human.",
        "All flowers are plants.",
        "If Jack is a human or a flower, then Jack is a human and a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)"
      ],
      "question": "Jack is a plant.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1338,
      "story_id": 462,
      "context": [
        "All cats are cute.",
        "Ghosts do not exist.",
        "An animal is either a cat or a dog.",
        "Nothing that barks is lovely. ",
        "If something is a dog, then it barks.",
        "Grace is either a cat and a dog, or neither a cat nor a dog."
      ],
      "context_fol": [
        "∀x (Cat(x) → Cute(x))",
        "∀x (¬Ghost(x))",
        "∀x (Cat(x) ∨ Dog(x))",
        "∀x (Bark(x) → ¬Lovely(x))",
        "∀x (Dog(x) → Bark(x))",
        "(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))"
      ],
      "question": "Grace is a ghost.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "112": [
    {
      "id": 281,
      "story_id": 92,
      "context": [
        "Adventures of Rusty is a drama film and children's film.",
        "Columbia Pictures produced Adventures of Rusty",
        "Tintin was produced by Paramount.",
        "Tintin is an adventure film."
      ],
      "context_fol": [
        "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "Produced(columbiapictures, adventuresofrusty)",
        "Produced(paramount, tintin)",
        "AdventureFilm(tintin)"
      ],
      "question": "Columbia pictures produces adventure films.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 280,
      "story_id": 92,
      "context": [
        "Adventures of Rusty is a drama film and children's film.",
        "Columbia Pictures produced Adventures of Rusty",
        "Tintin was produced by Paramount.",
        "Tintin is an adventure film."
      ],
      "context_fol": [
        "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "Produced(columbiapictures, adventuresofrusty)",
        "Produced(paramount, tintin)",
        "AdventureFilm(tintin)"
      ],
      "question": "Columbia pictures produces drama films.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 113,
      "story_id": 38,
      "context": [
        "Metropolitan Museum of Art is a museum in NYC.",
        "Whitney Museum of American Art is a museum in NYC.",
        "Museum of Modern Art (MoMA) is a museum if NYC. ",
        "Metropolitan Museum of Art includes Bytantine and Islamic Art. ",
        "Whitney Museum of American Art includes American art."
      ],
      "context_fol": [
        "Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)",
        "Museum(whitneyMuseumofAmericanArt) ∧ InNYC(whitneyMuseumofAmericanArt)",
        "Museum(museumofModernArt) ∧ InNYC(museumofModernArt)",
        "Include(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)",
        "Include(whitneyMuseumofAmericanArt, americanArt)"
      ],
      "question": "A museum in NYC includes Greek art.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "113": [
    {
      "id": 281,
      "story_id": 92,
      "context": [
        "Adventures of Rusty is a drama film and children's film.",
        "Columbia Pictures produced Adventures of Rusty",
        "Tintin was produced by Paramount.",
        "Tintin is an adventure film."
      ],
      "context_fol": [
        "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "Produced(columbiapictures, adventuresofrusty)",
        "Produced(paramount, tintin)",
        "AdventureFilm(tintin)"
      ],
      "question": "Columbia pictures produces adventure films.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 280,
      "story_id": 92,
      "context": [
        "Adventures of Rusty is a drama film and children's film.",
        "Columbia Pictures produced Adventures of Rusty",
        "Tintin was produced by Paramount.",
        "Tintin is an adventure film."
      ],
      "context_fol": [
        "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "Produced(columbiapictures, adventuresofrusty)",
        "Produced(paramount, tintin)",
        "AdventureFilm(tintin)"
      ],
      "question": "Columbia pictures produces drama films.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 113,
      "story_id": 38,
      "context": [
        "Metropolitan Museum of Art is a museum in NYC.",
        "Whitney Museum of American Art is a museum in NYC.",
        "Museum of Modern Art (MoMA) is a museum if NYC. ",
        "Metropolitan Museum of Art includes Bytantine and Islamic Art. ",
        "Whitney Museum of American Art includes American art."
      ],
      "context_fol": [
        "Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)",
        "Museum(whitneyMuseumofAmericanArt) ∧ InNYC(whitneyMuseumofAmericanArt)",
        "Museum(museumofModernArt) ∧ InNYC(museumofModernArt)",
        "Include(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)",
        "Include(whitneyMuseumofAmericanArt, americanArt)"
      ],
      "question": "A museum in NYC includes Greek art.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "114": [
    {
      "id": 599,
      "story_id": 208,
      "context": [
        "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
        "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
        "NY, PA, OH, MI are states in the US.",
        "ON is a state of Canada.",
        "There is a major settlement of Lake Huron in ON. ",
        "All states are in their country.",
        "The US is in North America.",
        "The Great Lakes began to form at the end of the Last Glacial Period."
      ],
      "context_fol": [
        "∀x (GreatLake(x) → Superior(x) ∨ Michigan(x) ∨ Huron(x) ∨ Erie(x) ∨ Ontario(x))",
        "∃x ∀y (Erie(y) ∧ MajorSettlementOf(x, y) ∧ In(x, ny) ∨ In(x, pa) ∨ In(x, oh) ∨ In(x, mi))",
        "State(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)",
        "State(on, canada)",
        "∃x ∀y (Huron(y) ∧ MajorSettlementOf(x, y) ∧ In(x, on))",
        "∀x ∀y (State(x, y) → In(x, y))",
        "In(us, northamerica)",
        "∀x (GreatLake(x) → FormAtEndOf(x, lastglacialperiod))"
      ],
      "question": "There is a great lake that did not form at the end of the Last Glacial Period.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 598,
      "story_id": 208,
      "context": [
        "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
        "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
        "NY, PA, OH, MI are states in the US.",
        "ON is a state of Canada.",
        "There is a major settlement of Lake Huron in ON. ",
        "All states are in their country.",
        "The US is in North America.",
        "The Great Lakes began to form at the end of the Last Glacial Period."
      ],
      "context_fol": [
        "∀x (GreatLake(x) → Superior(x) ∨ Michigan(x) ∨ Huron(x) ∨ Erie(x) ∨ Ontario(x))",
        "∃x ∀y (Erie(y) ∧ MajorSettlementOf(x, y) ∧ In(x, ny) ∨ In(x, pa) ∨ In(x, oh) ∨ In(x, mi))",
        "State(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)",
        "State(on, canada)",
        "∃x ∀y (Huron(y) ∧ MajorSettlementOf(x, y) ∧ In(x, on))",
        "∀x ∀y (State(x, y) → In(x, y))",
        "In(us, northamerica)",
        "∀x (GreatLake(x) → FormAtEndOf(x, lastglacialperiod))"
      ],
      "question": "Lake Erie has a major settlement.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 281,
      "story_id": 92,
      "context": [
        "Adventures of Rusty is a drama film and children's film.",
        "Columbia Pictures produced Adventures of Rusty",
        "Tintin was produced by Paramount.",
        "Tintin is an adventure film."
      ],
      "context_fol": [
        "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "Produced(columbiapictures, adventuresofrusty)",
        "Produced(paramount, tintin)",
        "AdventureFilm(tintin)"
      ],
      "question": "Columbia pictures produces adventure films.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "115": [
    {
      "id": 1294,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack plays football.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1295,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack is in shape.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1296,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack is not in shape.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "116": [
    {
      "id": 1294,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack plays football.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1295,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack is in shape.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1296,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack is not in shape.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "117": [
    {
      "id": 1294,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack plays football.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1295,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack is in shape.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1296,
      "story_id": 448,
      "context": [
        "Everyone that uses a football can throw a football.",
        "If someone plays football, then they use a football.",
        "Either someone is a football player or a basketball player.",
        "Every basketball player is tall.",
        "Everyone that can throw a football can throw a football with a spiral.",
        "If someone is tall, then they are in shape.",
        "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
      ],
      "context_fol": [
        "∀x (UseFootball(x) → ThrowFootball(x))",
        "∀x (PlayFootball(x) → UseFootball(x))",
        "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "∀x (Tall(x) → InShape(x))",
        "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)"
      ],
      "question": "Jack is not in shape.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "118": [
    {
      "id": 336,
      "story_id": 110,
      "context": [
        "St Johnstone is a Scottish team.",
        "St Johnstone is part of the Scottish Premiership.",
        "If a team is part of the league, it has joined the league.",
        "St Johnstone and Minsk are different teams.",
        "For two different teams, either one team wins or the other team wins.",
        "Minsk won against St Johnstone."
      ],
      "context_fol": [
        "Scottish(johnstone)",
        "PartOf(johnstone, scottishpremiership)",
        "∀x ∀y (PartOf(x, y) → Joined(x, y))",
        "Different(misnk, johnstone) ∧ Different(johnstone, minsk)",
        "∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))",
        "WonGame(minsk, johnstone)"
      ],
      "question": "Minsk joined the Scottish Premiership.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 378,
      "story_id": 127,
      "context": [
        "New York City is Located in the United States of America.",
        "United States of America is part of North America.",
        "North America is in the western hemisphere of the earth.",
        "New York City is a highly developed city.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Locate(nyc, usa)",
        "Locate(usa, northAmerica)",
        "Locate(northAmerica, westHemisphere)",
        "HighlyDeveloped(nyc)",
        "∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))"
      ],
      "question": "USA is not located in western hemisphere of the earth.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 334,
      "story_id": 110,
      "context": [
        "St Johnstone is a Scottish team.",
        "St Johnstone is part of the Scottish Premiership.",
        "If a team is part of the league, it has joined the league.",
        "St Johnstone and Minsk are different teams.",
        "For two different teams, either one team wins or the other team wins.",
        "Minsk won against St Johnstone."
      ],
      "context_fol": [
        "Scottish(johnstone)",
        "PartOf(johnstone, scottishpremiership)",
        "∀x ∀y (PartOf(x, y) → Joined(x, y))",
        "Different(misnk, johnstone) ∧ Different(johnstone, minsk)",
        "∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))",
        "WonGame(minsk, johnstone)"
      ],
      "question": "At least one Scottish team has joined the Scottish Premiership.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "119": [
    {
      "id": 378,
      "story_id": 127,
      "context": [
        "New York City is Located in the United States of America.",
        "United States of America is part of North America.",
        "North America is in the western hemisphere of the earth.",
        "New York City is a highly developed city.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Locate(nyc, usa)",
        "Locate(usa, northAmerica)",
        "Locate(northAmerica, westHemisphere)",
        "HighlyDeveloped(nyc)",
        "∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))"
      ],
      "question": "USA is not located in western hemisphere of the earth.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 334,
      "story_id": 110,
      "context": [
        "St Johnstone is a Scottish team.",
        "St Johnstone is part of the Scottish Premiership.",
        "If a team is part of the league, it has joined the league.",
        "St Johnstone and Minsk are different teams.",
        "For two different teams, either one team wins or the other team wins.",
        "Minsk won against St Johnstone."
      ],
      "context_fol": [
        "Scottish(johnstone)",
        "PartOf(johnstone, scottishpremiership)",
        "∀x ∀y (PartOf(x, y) → Joined(x, y))",
        "Different(misnk, johnstone) ∧ Different(johnstone, minsk)",
        "∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))",
        "WonGame(minsk, johnstone)"
      ],
      "question": "At least one Scottish team has joined the Scottish Premiership.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 379,
      "story_id": 127,
      "context": [
        "New York City is Located in the United States of America.",
        "United States of America is part of North America.",
        "North America is in the western hemisphere of the earth.",
        "New York City is a highly developed city.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Locate(nyc, usa)",
        "Locate(usa, northAmerica)",
        "Locate(northAmerica, westHemisphere)",
        "HighlyDeveloped(nyc)",
        "∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))"
      ],
      "question": "New York City is located in the New York State.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "120": [
    {
      "id": 378,
      "story_id": 127,
      "context": [
        "New York City is Located in the United States of America.",
        "United States of America is part of North America.",
        "North America is in the western hemisphere of the earth.",
        "New York City is a highly developed city.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Locate(nyc, usa)",
        "Locate(usa, northAmerica)",
        "Locate(northAmerica, westHemisphere)",
        "HighlyDeveloped(nyc)",
        "∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))"
      ],
      "question": "USA is not located in western hemisphere of the earth.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 379,
      "story_id": 127,
      "context": [
        "New York City is Located in the United States of America.",
        "United States of America is part of North America.",
        "North America is in the western hemisphere of the earth.",
        "New York City is a highly developed city.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Locate(nyc, usa)",
        "Locate(usa, northAmerica)",
        "Locate(northAmerica, westHemisphere)",
        "HighlyDeveloped(nyc)",
        "∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))"
      ],
      "question": "New York City is located in the New York State.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 377,
      "story_id": 127,
      "context": [
        "New York City is Located in the United States of America.",
        "United States of America is part of North America.",
        "North America is in the western hemisphere of the earth.",
        "New York City is a highly developed city.",
        "If place A is located in place B and place B is located in place C, then place A is located in place C."
      ],
      "context_fol": [
        "Locate(nyc, usa)",
        "Locate(usa, northAmerica)",
        "Locate(northAmerica, westHemisphere)",
        "HighlyDeveloped(nyc)",
        "∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))"
      ],
      "question": "A highly developed city is located in the western hemisphere of the earth.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "121": [
    {
      "id": 1099,
      "story_id": 399,
      "context": [
        "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "If a person values physical touch as an especially important love language, then they are good with pets.",
        "No people that are good with pets are scared of animals.",
        "People are either scared of animals or love animals.",
        "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
      ],
      "context_fol": [
        "∀x (Physical(x) ∨ Words(x))",
        "∀x (Physical(x) → GoodWithPets(x))",
        "∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))",
        "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "Physical(adam) ⊕ LoveAnimals(adam)"
      ],
      "question": "If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1098,
      "story_id": 399,
      "context": [
        "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "If a person values physical touch as an especially important love language, then they are good with pets.",
        "No people that are good with pets are scared of animals.",
        "People are either scared of animals or love animals.",
        "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
      ],
      "context_fol": [
        "∀x (Physical(x) ∨ Words(x))",
        "∀x (Physical(x) → GoodWithPets(x))",
        "∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))",
        "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "Physical(adam) ⊕ LoveAnimals(adam)"
      ],
      "question": "Adam either values physical touch as an especially important love language or values words of affirmation as an especially important love language.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1097,
      "story_id": 399,
      "context": [
        "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "If a person values physical touch as an especially important love language, then they are good with pets.",
        "No people that are good with pets are scared of animals.",
        "People are either scared of animals or love animals.",
        "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
      ],
      "context_fol": [
        "∀x (Physical(x) ∨ Words(x))",
        "∀x (Physical(x) → GoodWithPets(x))",
        "∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))",
        "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "Physical(adam) ⊕ LoveAnimals(adam)"
      ],
      "question": "Adam values physical touch as an especially important love language and values words of affirmation as an especially important love language.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "122": [
    {
      "id": 1233,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1234,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is produced before 2010 or scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1235,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "123": [
    {
      "id": 1233,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1234,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is produced before 2010 or scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1235,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "124": [
    {
      "id": 1233,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1234,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is produced before 2010 or scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1235,
      "story_id": 431,
      "context": [
        "No Boeing-737 plane is equipped with more than 300 seats. ",
        "All planes in Delta are of type Boeing-737. ",
        "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "All planes with a capacity of 100 passengers are produced before 2010. ",
        "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
      ],
      "context_fol": [
        "∀x (Boeing737(x) → ¬Seats300(x))",
        "∀x (Delta(x) → Boeing737(x))",
        "∀x (Seats300(x) ∨ Passengers100(x))",
        "∀x (Passengers100(x) → ShortDistance(x))",
        "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "Boeing737(jake32) ⊕ Delta(jake32) ",
        "Boeing737(t10) ⊕ Delta(t10)"
      ],
      "question": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "125": [
    {
      "id": 922,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 925,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is not sleepy or an elephant.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 921,
      "story_id": 347,
      "context": [
        "All mammals are living beings.",
        "All elephants are mammals.",
        "All baby elephants are elephants.",
        "Some baby elephants are sleepy.",
        "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
      ],
      "context_fol": [
        "∀x (Mammal(x) → LivingBeing(x)) ",
        "∀x (Elephant(x) → Mammal(x))",
        "∀x (BabyElephant(x) → Elephant(x))",
        "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))",
        "Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)"
      ],
      "question": "Jumbo is sleepy.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "126": [
    {
      "id": 1283,
      "story_id": 444,
      "context": [
        "All birds have wings.",
        "No animal with wings is a reptile.",
        "Some animals that fly are birds.",
        "If something is an iguana, then it is a reptile.",
        "John is neither an iguana nor a bird."
      ],
      "context_fol": [
        "∀x (Bird(x) → Winged(x))",
        "∀x (Winged(x) → ¬Reptile(x))",
        "∃x (Fly(x) ∧ Bird(x))",
        "∀x (Iguana(x) → Reptile(x))",
        "¬Iguana(john) ⊕ Bird(john)"
      ],
      "question": "John is not an iguana and an animal that can fly.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1284,
      "story_id": 444,
      "context": [
        "All birds have wings.",
        "No animal with wings is a reptile.",
        "Some animals that fly are birds.",
        "If something is an iguana, then it is a reptile.",
        "John is neither an iguana nor a bird."
      ],
      "context_fol": [
        "∀x (Bird(x) → Winged(x))",
        "∀x (Winged(x) → ¬Reptile(x))",
        "∃x (Fly(x) ∧ Bird(x))",
        "∀x (Iguana(x) → Reptile(x))",
        "¬Iguana(john) ⊕ Bird(john)"
      ],
      "question": "John is an animal that can fly and a bird.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 706,
      "story_id": 257,
      "context": [
        "Some cats are not pets.",
        "All cats are mammals."
      ],
      "context_fol": [
        "∃x (Cat(x) ∧ ¬Pet(x))",
        "∀x (Cat(x) → Mammal(x))"
      ],
      "question": "Some mammals are not pets.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "127": [
    {
      "id": 1283,
      "story_id": 444,
      "context": [
        "All birds have wings.",
        "No animal with wings is a reptile.",
        "Some animals that fly are birds.",
        "If something is an iguana, then it is a reptile.",
        "John is neither an iguana nor a bird."
      ],
      "context_fol": [
        "∀x (Bird(x) → Winged(x))",
        "∀x (Winged(x) → ¬Reptile(x))",
        "∃x (Fly(x) ∧ Bird(x))",
        "∀x (Iguana(x) → Reptile(x))",
        "¬Iguana(john) ⊕ Bird(john)"
      ],
      "question": "John is not an iguana and an animal that can fly.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1284,
      "story_id": 444,
      "context": [
        "All birds have wings.",
        "No animal with wings is a reptile.",
        "Some animals that fly are birds.",
        "If something is an iguana, then it is a reptile.",
        "John is neither an iguana nor a bird."
      ],
      "context_fol": [
        "∀x (Bird(x) → Winged(x))",
        "∀x (Winged(x) → ¬Reptile(x))",
        "∃x (Fly(x) ∧ Bird(x))",
        "∀x (Iguana(x) → Reptile(x))",
        "¬Iguana(john) ⊕ Bird(john)"
      ],
      "question": "John is an animal that can fly and a bird.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1282,
      "story_id": 444,
      "context": [
        "All birds have wings.",
        "No animal with wings is a reptile.",
        "Some animals that fly are birds.",
        "If something is an iguana, then it is a reptile.",
        "John is neither an iguana nor a bird."
      ],
      "context_fol": [
        "∀x (Bird(x) → Winged(x))",
        "∀x (Winged(x) → ¬Reptile(x))",
        "∃x (Fly(x) ∧ Bird(x))",
        "∀x (Iguana(x) → Reptile(x))",
        "¬Iguana(john) ⊕ Bird(john)"
      ],
      "question": "John is a reptile.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "128": [
    {
      "id": 1014,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol is either a preteen or other young child.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1013,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol is outgoing and very spirited.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1015,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "129": [
    {
      "id": 1014,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol is either a preteen or other young child.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1013,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol is outgoing and very spirited.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1015,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "130": [
    {
      "id": 1014,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol is either a preteen or other young child.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1013,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol is outgoing and very spirited.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1015,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "131": [
    {
      "id": 1014,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol is either a preteen or other young child.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1013,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol is outgoing and very spirited.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1015,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "132": [
    {
      "id": 605,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Platypuses are vertebrates.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 604,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Grebes are not mammals.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 603,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Hyraxes lay eggs.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "133": [
    {
      "id": 605,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Platypuses are vertebrates.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 604,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Grebes are not mammals.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 603,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Hyraxes lay eggs.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "134": [
    {
      "id": 605,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Platypuses are vertebrates.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 604,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Grebes are not mammals.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 603,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Hyraxes lay eggs.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "135": [
    {
      "id": 796,
      "story_id": 316,
      "context": [
        "There are no mansion houses in an urban area.",
        "All skyscrapers reside in urban areas.",
        "Every creepy haunted house is in a mansion house.",
        "Every terrifying Halloween scare comes from a creepy haunted house.",
        "The Scream is a creepy haunted house or a terrifying Halloween scare."
      ],
      "context_fol": [
        "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "∀x (Skyscraper(x) → UrbanArea(x))",
        "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)"
      ],
      "question": "The Scream is a terrifying Halloween scare.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 799,
      "story_id": 316,
      "context": [
        "There are no mansion houses in an urban area.",
        "All skyscrapers reside in urban areas.",
        "Every creepy haunted house is in a mansion house.",
        "Every terrifying Halloween scare comes from a creepy haunted house.",
        "The Scream is a creepy haunted house or a terrifying Halloween scare."
      ],
      "context_fol": [
        "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "∀x (Skyscraper(x) → UrbanArea(x))",
        "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)"
      ],
      "question": "The Scream is either a skyscraper or a creepy haunted house.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 794,
      "story_id": 316,
      "context": [
        "There are no mansion houses in an urban area.",
        "All skyscrapers reside in urban areas.",
        "Every creepy haunted house is in a mansion house.",
        "Every terrifying Halloween scare comes from a creepy haunted house.",
        "The Scream is a creepy haunted house or a terrifying Halloween scare."
      ],
      "context_fol": [
        "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "∀x (Skyscraper(x) → UrbanArea(x))",
        "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)"
      ],
      "question": "The Scream is a skyscraper.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "136": [
    {
      "id": 796,
      "story_id": 316,
      "context": [
        "There are no mansion houses in an urban area.",
        "All skyscrapers reside in urban areas.",
        "Every creepy haunted house is in a mansion house.",
        "Every terrifying Halloween scare comes from a creepy haunted house.",
        "The Scream is a creepy haunted house or a terrifying Halloween scare."
      ],
      "context_fol": [
        "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "∀x (Skyscraper(x) → UrbanArea(x))",
        "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)"
      ],
      "question": "The Scream is a terrifying Halloween scare.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 799,
      "story_id": 316,
      "context": [
        "There are no mansion houses in an urban area.",
        "All skyscrapers reside in urban areas.",
        "Every creepy haunted house is in a mansion house.",
        "Every terrifying Halloween scare comes from a creepy haunted house.",
        "The Scream is a creepy haunted house or a terrifying Halloween scare."
      ],
      "context_fol": [
        "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "∀x (Skyscraper(x) → UrbanArea(x))",
        "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)"
      ],
      "question": "The Scream is either a skyscraper or a creepy haunted house.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 794,
      "story_id": 316,
      "context": [
        "There are no mansion houses in an urban area.",
        "All skyscrapers reside in urban areas.",
        "Every creepy haunted house is in a mansion house.",
        "Every terrifying Halloween scare comes from a creepy haunted house.",
        "The Scream is a creepy haunted house or a terrifying Halloween scare."
      ],
      "context_fol": [
        "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "∀x (Skyscraper(x) → UrbanArea(x))",
        "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)"
      ],
      "question": "The Scream is a skyscraper.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "137": [
    {
      "id": 796,
      "story_id": 316,
      "context": [
        "There are no mansion houses in an urban area.",
        "All skyscrapers reside in urban areas.",
        "Every creepy haunted house is in a mansion house.",
        "Every terrifying Halloween scare comes from a creepy haunted house.",
        "The Scream is a creepy haunted house or a terrifying Halloween scare."
      ],
      "context_fol": [
        "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "∀x (Skyscraper(x) → UrbanArea(x))",
        "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)"
      ],
      "question": "The Scream is a terrifying Halloween scare.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 799,
      "story_id": 316,
      "context": [
        "There are no mansion houses in an urban area.",
        "All skyscrapers reside in urban areas.",
        "Every creepy haunted house is in a mansion house.",
        "Every terrifying Halloween scare comes from a creepy haunted house.",
        "The Scream is a creepy haunted house or a terrifying Halloween scare."
      ],
      "context_fol": [
        "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "∀x (Skyscraper(x) → UrbanArea(x))",
        "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)"
      ],
      "question": "The Scream is either a skyscraper or a creepy haunted house.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 797,
      "story_id": 316,
      "context": [
        "There are no mansion houses in an urban area.",
        "All skyscrapers reside in urban areas.",
        "Every creepy haunted house is in a mansion house.",
        "Every terrifying Halloween scare comes from a creepy haunted house.",
        "The Scream is a creepy haunted house or a terrifying Halloween scare."
      ],
      "context_fol": [
        "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "∀x (Skyscraper(x) → UrbanArea(x))",
        "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)"
      ],
      "question": "The Scream is either a skyscraper or a mansion house.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "138": [
    {
      "id": 546,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are a kind of summarization models.",
        "Extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are not always faithful.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 545,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are a kind of summarization models.",
        "Extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are always faithful.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1063,
      "story_id": 392,
      "context": [
        "All univariate analyses use a generalized linear model. ",
        "All multivoxel (pattern) analyses are implementing machine learning algorithms.",
        "All implementing machine learning algorithms are to learn and classify multivariate data.",
        "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ",
        "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis."
      ],
      "context_fol": [
        "∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x)) ",
        " ∀x (MultivoxelPatternAnalysis(x) → ImplementingMachineLearningAlgorithms(x))",
        " ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) ",
        " UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)",
        " ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)"
      ],
      "question": "Latent Dirichlet allocation model uses a generalized linear model and learns and classifies multivariate data.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "139": [
    {
      "id": 546,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are a kind of summarization models.",
        "Extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are not always faithful.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 545,
      "story_id": 189,
      "context": [
        "A summarization model is always faithful if it uses content from the input documents.",
        "Extractive models are a kind of summarization models.",
        "Extractive model can only use content from the input documents."
      ],
      "context_fol": [
        "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "∀x (Model(x) ∧ Extractive(x) → Summarization(x))",
        "∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))"
      ],
      "question": "Extractive models are always faithful.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1063,
      "story_id": 392,
      "context": [
        "All univariate analyses use a generalized linear model. ",
        "All multivoxel (pattern) analyses are implementing machine learning algorithms.",
        "All implementing machine learning algorithms are to learn and classify multivariate data.",
        "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ",
        "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis."
      ],
      "context_fol": [
        "∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x)) ",
        " ∀x (MultivoxelPatternAnalysis(x) → ImplementingMachineLearningAlgorithms(x))",
        " ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) ",
        " UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)",
        " ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)"
      ],
      "question": "Latent Dirichlet allocation model uses a generalized linear model and learns and classifies multivariate data.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "140": [
    {
      "id": 749,
      "story_id": 300,
      "context": [
        "If entertainment is interesting, it will be popular.",
        "All popular things are well-known."
      ],
      "context_fol": [
        "∀x ((Entertainment(x) ∧ Interesting(x)) → Popular(x))",
        "∀x (Popular(x) → WellKnown(x))"
      ],
      "question": "If entertainment is interesting, it will be well-known.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 917,
      "story_id": 345,
      "context": [
        "All kids love animals.",
        "All toddlers are kids.",
        "If someone loves animals, then they are not bad.",
        "All pirates are bad.",
        "If Nancy is not a pirate, then Nancy loves animals.",
        "If Nancy is not a toddler, then Nancy is bad."
      ],
      "context_fol": [
        "∀x (Kid(x) → LoveAnimals(x))",
        "∀x (Toddler(x) → Kid(x))",
        "∀x (LoveAnimals(x) → ¬Bad(x))",
        "∀x (Pirate(x) → Bad(x))",
        "¬Pirate(nancy) → LoveAnimals(nancy)",
        "¬Toddler(nancy) → Bad(nancy)"
      ],
      "question": "If Nancy is not a pirate or a toddler, then she loves animals and is a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 915,
      "story_id": 345,
      "context": [
        "All kids love animals.",
        "All toddlers are kids.",
        "If someone loves animals, then they are not bad.",
        "All pirates are bad.",
        "If Nancy is not a pirate, then Nancy loves animals.",
        "If Nancy is not a toddler, then Nancy is bad."
      ],
      "context_fol": [
        "∀x (Kid(x) → LoveAnimals(x))",
        "∀x (Toddler(x) → Kid(x))",
        "∀x (LoveAnimals(x) → ¬Bad(x))",
        "∀x (Pirate(x) → Bad(x))",
        "¬Pirate(nancy) → LoveAnimals(nancy)",
        "¬Toddler(nancy) → Bad(nancy)"
      ],
      "question": "Nancy is a pirate.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "141": [
    {
      "id": 749,
      "story_id": 300,
      "context": [
        "If entertainment is interesting, it will be popular.",
        "All popular things are well-known."
      ],
      "context_fol": [
        "∀x ((Entertainment(x) ∧ Interesting(x)) → Popular(x))",
        "∀x (Popular(x) → WellKnown(x))"
      ],
      "question": "If entertainment is interesting, it will be well-known.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 376,
      "story_id": 126,
      "context": [
        "A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. ",
        "Garfield and Odie, who is another pet of Jon, share the same home. ",
        "Garfield hates Odie.",
        "A pet who hates the pet with whom he shares the same owner is childish and possessive.",
        "Cats are pets. "
      ],
      "context_fol": [
        "Cat(garfield) ∧ MainCharacterGarfield(garfield) ∧ BeOrange(garfield) ∧ BeFat(garfield) ∧ LikeLasagna(garfield)",
        "Pet(garfield, jon) ∧ Pet(odie, jon) ∧ ShareHome(garfield, odie)",
        "Hate(garfield, odie)",
        "∀x ∀y ∃z (Pet(x, z) ∧ Pet(y, z) ∧ Hate(x, y) → BeChildish(x) ∧ BePossessive(x))",
        "∀x ∃y (Cat(x) → Pet(x, y))"
      ],
      "question": "The main character of the film Garfield is childish and possessive.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 917,
      "story_id": 345,
      "context": [
        "All kids love animals.",
        "All toddlers are kids.",
        "If someone loves animals, then they are not bad.",
        "All pirates are bad.",
        "If Nancy is not a pirate, then Nancy loves animals.",
        "If Nancy is not a toddler, then Nancy is bad."
      ],
      "context_fol": [
        "∀x (Kid(x) → LoveAnimals(x))",
        "∀x (Toddler(x) → Kid(x))",
        "∀x (LoveAnimals(x) → ¬Bad(x))",
        "∀x (Pirate(x) → Bad(x))",
        "¬Pirate(nancy) → LoveAnimals(nancy)",
        "¬Toddler(nancy) → Bad(nancy)"
      ],
      "question": "If Nancy is not a pirate or a toddler, then she loves animals and is a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "142": [
    {
      "id": 749,
      "story_id": 300,
      "context": [
        "If entertainment is interesting, it will be popular.",
        "All popular things are well-known."
      ],
      "context_fol": [
        "∀x ((Entertainment(x) ∧ Interesting(x)) → Popular(x))",
        "∀x (Popular(x) → WellKnown(x))"
      ],
      "question": "If entertainment is interesting, it will be well-known.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 376,
      "story_id": 126,
      "context": [
        "A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. ",
        "Garfield and Odie, who is another pet of Jon, share the same home. ",
        "Garfield hates Odie.",
        "A pet who hates the pet with whom he shares the same owner is childish and possessive.",
        "Cats are pets. "
      ],
      "context_fol": [
        "Cat(garfield) ∧ MainCharacterGarfield(garfield) ∧ BeOrange(garfield) ∧ BeFat(garfield) ∧ LikeLasagna(garfield)",
        "Pet(garfield, jon) ∧ Pet(odie, jon) ∧ ShareHome(garfield, odie)",
        "Hate(garfield, odie)",
        "∀x ∀y ∃z (Pet(x, z) ∧ Pet(y, z) ∧ Hate(x, y) → BeChildish(x) ∧ BePossessive(x))",
        "∀x ∃y (Cat(x) → Pet(x, y))"
      ],
      "question": "The main character of the film Garfield is childish and possessive.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 917,
      "story_id": 345,
      "context": [
        "All kids love animals.",
        "All toddlers are kids.",
        "If someone loves animals, then they are not bad.",
        "All pirates are bad.",
        "If Nancy is not a pirate, then Nancy loves animals.",
        "If Nancy is not a toddler, then Nancy is bad."
      ],
      "context_fol": [
        "∀x (Kid(x) → LoveAnimals(x))",
        "∀x (Toddler(x) → Kid(x))",
        "∀x (LoveAnimals(x) → ¬Bad(x))",
        "∀x (Pirate(x) → Bad(x))",
        "¬Pirate(nancy) → LoveAnimals(nancy)",
        "¬Toddler(nancy) → Bad(nancy)"
      ],
      "question": "If Nancy is not a pirate or a toddler, then she loves animals and is a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "143": [
    {
      "id": 1095,
      "story_id": 399,
      "context": [
        "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "If a person values physical touch as an especially important love language, then they are good with pets.",
        "No people that are good with pets are scared of animals.",
        "People are either scared of animals or love animals.",
        "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
      ],
      "context_fol": [
        "∀x (Physical(x) ∨ Words(x))",
        "∀x (Physical(x) → GoodWithPets(x))",
        "∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))",
        "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "Physical(adam) ⊕ LoveAnimals(adam)"
      ],
      "question": "Adam is scared of animals.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1096,
      "story_id": 399,
      "context": [
        "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "If a person values physical touch as an especially important love language, then they are good with pets.",
        "No people that are good with pets are scared of animals.",
        "People are either scared of animals or love animals.",
        "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
      ],
      "context_fol": [
        "∀x (Physical(x) ∨ Words(x))",
        "∀x (Physical(x) → GoodWithPets(x))",
        "∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))",
        "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "Physical(adam) ⊕ LoveAnimals(adam)"
      ],
      "question": "Adam values words of affirmation as an especially important love language.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 605,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Platypuses are vertebrates.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "144": [
    {
      "id": 1095,
      "story_id": 399,
      "context": [
        "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "If a person values physical touch as an especially important love language, then they are good with pets.",
        "No people that are good with pets are scared of animals.",
        "People are either scared of animals or love animals.",
        "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
      ],
      "context_fol": [
        "∀x (Physical(x) ∨ Words(x))",
        "∀x (Physical(x) → GoodWithPets(x))",
        "∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))",
        "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "Physical(adam) ⊕ LoveAnimals(adam)"
      ],
      "question": "Adam is scared of animals.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 605,
      "story_id": 210,
      "context": [
        "The only types of mammals that lay eggs are platypuses and echidnas.",
        "Platypuses are not hyrax.",
        "Echidnas are not hyrax.",
        "No mammals are invertebrates.",
        "All animals are either vertebrates or invertebrates.",
        "Mammals are animals.",
        "Hyraxes are mammals.",
        "Grebes lay eggs.",
        "Grebes are not platypuses and also not echidnas."
      ],
      "context_fol": [
        "∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))",
        "∀x (Platypuses(x) → ¬Hyrax(x))",
        "∀x (Echidnas(x) → ¬Hyrax(x))",
        "∀x (Mammal(x) → ¬Invertebrate(x))",
        "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Hyrax(x) → Mammal(x))",
        "∀x (Grebes(x) → LayEgg(x))",
        "∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))"
      ],
      "question": "Platypuses are vertebrates.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1096,
      "story_id": 399,
      "context": [
        "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "If a person values physical touch as an especially important love language, then they are good with pets.",
        "No people that are good with pets are scared of animals.",
        "People are either scared of animals or love animals.",
        "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
      ],
      "context_fol": [
        "∀x (Physical(x) ∨ Words(x))",
        "∀x (Physical(x) → GoodWithPets(x))",
        "∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))",
        "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "Physical(adam) ⊕ LoveAnimals(adam)"
      ],
      "question": "Adam values words of affirmation as an especially important love language.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "145": [
    {
      "id": 1360,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "Leon is neither a student nor a researcher.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1361,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "If Leon is not a researcher, then Leon is a student.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1359,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "Leon is a professor.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "146": [
    {
      "id": 1360,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "Leon is neither a student nor a researcher.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1361,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "If Leon is not a researcher, then Leon is a student.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1359,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "Leon is a professor.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "147": [
    {
      "id": 1360,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "Leon is neither a student nor a researcher.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1361,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "If Leon is not a researcher, then Leon is a student.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1359,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "Leon is a professor.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "148": [
    {
      "id": 1360,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "Leon is neither a student nor a researcher.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1361,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "If Leon is not a researcher, then Leon is a student.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1359,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "Leon is a professor.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "149": [
    {
      "id": 1360,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "Leon is neither a student nor a researcher.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1361,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "If Leon is not a researcher, then Leon is a student.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1359,
      "story_id": 469,
      "context": [
        "All professors are teachers.",
        "All researchers are professors.",
        "No teachers are students.",
        "All people who study are students.",
        "Leon is not studying or a researcher.",
        "If Leon is not studying, then Leon is a teacher."
      ],
      "context_fol": [
        "∀x (Professor(x) → Teacher(x))",
        "∀x (Researcher(x) → Professor(x))",
        "∀x (Teacher(x) → ¬Student(x))",
        "∀x (Study(x) → Student(x))",
        "¬Study(leon) ⊕ Researcher(leon)",
        "¬Study(leon) → Teacher(leon)"
      ],
      "question": "Leon is a professor.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "150": [
    {
      "id": 365,
      "story_id": 122,
      "context": [
        "Beasts of Prey is either a fantasy novel or a science fiction novel.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsofprey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey is a fantasy novel.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 366,
      "story_id": 122,
      "context": [
        "Beasts of Prey is either a fantasy novel or a science fiction novel.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsofprey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey isn't a science fiction novel.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1172,
      "story_id": 415,
      "context": [
        "All books written by Tomas have sold more than 1 million copies. ",
        "Some books that have won Hugo Awards are written by Tomas.",
        "All books about the future are inspired by Shakespeare. ",
        "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
        "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
      ],
      "context_fol": [
        "∀x (WrittenByTomas(x) → SoldOneMillion(x))",
        "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "∀x (AboutFuture(x) → InspiredFromShakespeare(x))",
        "InspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) ",
        "SoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)"
      ],
      "question": "2001 is a book that has won a Hugo Award and is about the future.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "151": [
    {
      "id": 1172,
      "story_id": 415,
      "context": [
        "All books written by Tomas have sold more than 1 million copies. ",
        "Some books that have won Hugo Awards are written by Tomas.",
        "All books about the future are inspired by Shakespeare. ",
        "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
        "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
      ],
      "context_fol": [
        "∀x (WrittenByTomas(x) → SoldOneMillion(x))",
        "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "∀x (AboutFuture(x) → InspiredFromShakespeare(x))",
        "InspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) ",
        "SoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)"
      ],
      "question": "2001 is a book that has won a Hugo Award and is about the future.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1171,
      "story_id": 415,
      "context": [
        "All books written by Tomas have sold more than 1 million copies. ",
        "Some books that have won Hugo Awards are written by Tomas.",
        "All books about the future are inspired by Shakespeare. ",
        "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
        "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
      ],
      "context_fol": [
        "∀x (WrittenByTomas(x) → SoldOneMillion(x))",
        "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "∀x (AboutFuture(x) → InspiredFromShakespeare(x))",
        "InspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) ",
        "SoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)"
      ],
      "question": "2001 is a book that has won a Hugo Award.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 365,
      "story_id": 122,
      "context": [
        "Beasts of Prey is either a fantasy novel or a science fiction novel.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsofprey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey is a fantasy novel.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "152": [
    {
      "id": 1172,
      "story_id": 415,
      "context": [
        "All books written by Tomas have sold more than 1 million copies. ",
        "Some books that have won Hugo Awards are written by Tomas.",
        "All books about the future are inspired by Shakespeare. ",
        "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
        "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
      ],
      "context_fol": [
        "∀x (WrittenByTomas(x) → SoldOneMillion(x))",
        "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "∀x (AboutFuture(x) → InspiredFromShakespeare(x))",
        "InspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) ",
        "SoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)"
      ],
      "question": "2001 is a book that has won a Hugo Award and is about the future.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 365,
      "story_id": 122,
      "context": [
        "Beasts of Prey is either a fantasy novel or a science fiction novel.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsofprey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey is a fantasy novel.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 366,
      "story_id": 122,
      "context": [
        "Beasts of Prey is either a fantasy novel or a science fiction novel.",
        "Science fiction novels are not about mythological creatures",
        "Beasts of Prey Is about a creature known as the Shetani.",
        "Shetanis are mythological."
      ],
      "context_fol": [
        "Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)",
        "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "About(beastsofprey, shetani) ∧ Creature(shetani)",
        "Mythological(shetani)"
      ],
      "question": "Beasts of prey isn't a science fiction novel.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "153": [
    {
      "id": 1130,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 973,
      "story_id": 364,
      "context": [
        "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
        "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (CoffeeShop(x) → CaffeineAddict(x))",
        "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "∀x (MakeFood(x) → Takeout(x))",
        "∀x (KitchenAppliance(x) → ¬Takeout(x))",
        "∀x (Busy(x) → MakeFood(x))",
        "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))"
      ],
      "question": "Sam owns at least one coffeemaker and one blender in her home.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 974,
      "story_id": 364,
      "context": [
        "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
        "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (CoffeeShop(x) → CaffeineAddict(x))",
        "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "∀x (MakeFood(x) → Takeout(x))",
        "∀x (KitchenAppliance(x) → ¬Takeout(x))",
        "∀x (Busy(x) → MakeFood(x))",
        "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))"
      ],
      "question": "Sam either owns at least one coffeemaker and one blender in her home or orders takeout at least once a day.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "154": [
    {
      "id": 973,
      "story_id": 364,
      "context": [
        "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
        "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
      ],
      "context_fol": [
        "∀x (CoffeeShop(x) → CaffeineAddict(x))",
        "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "∀x (MakeFood(x) → Takeout(x))",
        "∀x (KitchenAppliance(x) → ¬Takeout(x))",
        "∀x (Busy(x) → MakeFood(x))",
        "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))"
      ],
      "question": "Sam owns at least one coffeemaker and one blender in her home.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1130,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 987,
      "story_id": 369,
      "context": [
        "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
        "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
        "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "If people live with at least one roommate then they do not own at least one pet.",
        "All people who own at least one pet live with at least one roommate.",
        "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (Iphone(x) → ¬House(x))",
        "∀x (Tech(x) → Iphone(x))",
        "∀x (House(x) ∨ Apartment(x))",
        "∀x (Roommate(x) → ¬Pet(x))",
        "∀x (Apartment(x) → Roommate(x))",
        "¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))"
      ],
      "question": "Emma lives with at least one roommate.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "155": [
    {
      "id": 979,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 987,
      "story_id": 369,
      "context": [
        "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
        "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
        "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "If people live with at least one roommate then they do not own at least one pet.",
        "All people who own at least one pet live with at least one roommate.",
        "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
      ],
      "context_fol": [
        "∀x (Iphone(x) → ¬House(x))",
        "∀x (Tech(x) → Iphone(x))",
        "∀x (House(x) ∨ Apartment(x))",
        "∀x (Roommate(x) → ¬Pet(x))",
        "∀x (Apartment(x) → Roommate(x))",
        "¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))"
      ],
      "question": "Emma lives with at least one roommate.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1130,
      "story_id": 405,
      "context": [
        "Everyone who works in person is a commuter.",
        "People either work in person or work from home.",
        "Everyone who works from home has a relaxed schedule.",
        "George is either a commuter or has a home office setup.",
        "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
      ],
      "context_fol": [
        "∀x (InPerson(x) → Commuter(x))",
        "∀x (InPerson(x) ⊕ FromHome(x))",
        "∀x (FromHome(x) → Relaxed(x))",
        "Commuter(george) ⊕ HomeOffice(george)",
        "FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))"
      ],
      "question": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "156": [
    {
      "id": 1383,
      "story_id": 475,
      "context": [
        "All Asians are human. ",
        "All Chinese are Asian.",
        "A man is either Chinese or British.",
        "All British are European. ",
        "All Spanish are European. ",
        "No Indian is European. ",
        "Jessee is either both an Indian and a human, or neither an Indian nor a human."
      ],
      "context_fol": [
        "∀x ( Asian(x)→  Human(x))",
        "∀x ( Chinese(x)→  Asian(x))",
        "∀x ( Chinese(x) ∨  British(x))",
        "∀x ( British(x)→  European(x))",
        "∀x ( Spanish(x)→  European(x))",
        "∀x ( Indian(x)→ ¬ European(x))",
        "( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))"
      ],
      "question": "Jesse is Chinese.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1384,
      "story_id": 475,
      "context": [
        "All Asians are human. ",
        "All Chinese are Asian.",
        "A man is either Chinese or British.",
        "All British are European. ",
        "All Spanish are European. ",
        "No Indian is European. ",
        "Jessee is either both an Indian and a human, or neither an Indian nor a human."
      ],
      "context_fol": [
        "∀x ( Asian(x)→  Human(x))",
        "∀x ( Chinese(x)→  Asian(x))",
        "∀x ( Chinese(x) ∨  British(x))",
        "∀x ( British(x)→  European(x))",
        "∀x ( Spanish(x)→  European(x))",
        "∀x ( Indian(x)→ ¬ European(x))",
        "( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))"
      ],
      "question": "Jesse is not Chinese.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1385,
      "story_id": 475,
      "context": [
        "All Asians are human. ",
        "All Chinese are Asian.",
        "A man is either Chinese or British.",
        "All British are European. ",
        "All Spanish are European. ",
        "No Indian is European. ",
        "Jessee is either both an Indian and a human, or neither an Indian nor a human."
      ],
      "context_fol": [
        "∀x ( Asian(x)→  Human(x))",
        "∀x ( Chinese(x)→  Asian(x))",
        "∀x ( Chinese(x) ∨  British(x))",
        "∀x ( British(x)→  European(x))",
        "∀x ( Spanish(x)→  European(x))",
        "∀x ( Indian(x)→ ¬ European(x))",
        "( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))"
      ],
      "question": "If Jesse is either an Indian or a Spanish, then Jesse is either both British and European, or neither British nor European.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "157": [
    {
      "id": 1291,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill works at a school.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1293,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill is not a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1292,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill is a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "158": [
    {
      "id": 1291,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill works at a school.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1293,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill is not a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1292,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill is a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "159": [
    {
      "id": 1291,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill works at a school.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1292,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill is a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1293,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill is not a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "160": [
    {
      "id": 1291,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill works at a school.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1292,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill is a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1293,
      "story_id": 447,
      "context": [
        "No faculty does homework.",
        "All students do homework.",
        "All kids are students.",
        "If someone works at a school, then they are faculty.",
        "If Jill works at a school or is a teacher, then Jill works at a school."
      ],
      "context_fol": [
        "∀x (Faculty(x) → ¬DoesHomework(x))",
        "∀x (Student(x) → DoesHomework(x))",
        "∀x (Kid(x) → Student(x))",
        "∀x (WorkAtSchool(x) → Faculty(x))",
        "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)"
      ],
      "question": "Jill is not a kid.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "161": [
    {
      "id": 523,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or in Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not \"Perfect\", Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        " ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))",
        " ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        " Use(sam, mac)",
        " Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))",
        " ∀x (¬Be(x, perfect) → ¬Play(sam, x))"
      ],
      "question": "If a song is \"Perfect\", Sam will play it.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 521,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or in Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not \"Perfect\", Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        " ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))",
        " ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        " Use(sam, mac)",
        " Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))",
        " ∀x (¬Be(x, perfect) → ¬Play(sam, x))"
      ],
      "question": "The project Sam is doing is written in C++.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 522,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or in Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not \"Perfect\", Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        " ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))",
        " ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        " Use(sam, mac)",
        " Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))",
        " ∀x (¬Be(x, perfect) → ¬Play(sam, x))"
      ],
      "question": "The song Sam is playing is \"Perfect\".",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "162": [
    {
      "id": 523,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or in Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not \"Perfect\", Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        " ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))",
        " ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        " Use(sam, mac)",
        " Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))",
        " ∀x (¬Be(x, perfect) → ¬Play(sam, x))"
      ],
      "question": "If a song is \"Perfect\", Sam will play it.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 521,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or in Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not \"Perfect\", Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        " ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))",
        " ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        " Use(sam, mac)",
        " Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))",
        " ∀x (¬Be(x, perfect) → ¬Play(sam, x))"
      ],
      "question": "The project Sam is doing is written in C++.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 522,
      "story_id": 180,
      "context": [
        "Sam is doing a project.",
        "A project is written either in C++ or in Python.",
        "If Sam does a project written in Python, he will not use a Mac.",
        "Sam is using a Mac.",
        "If Sam uses a Mac, he will play a song.",
        "If a song is not \"Perfect\", Sam will never play it."
      ],
      "context_fol": [
        "∃x (Project(x) ∧ Do(sam, x))",
        " ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))",
        " ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        " Use(sam, mac)",
        " Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))",
        " ∀x (¬Be(x, perfect) → ¬Play(sam, x))"
      ],
      "question": "The song Sam is playing is \"Perfect\".",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "163": [
    {
      "id": 1430,
      "story_id": 486,
      "context": [
        "Everything is either big or small.",
        "All big things are heavy. ",
        "All small things are light. ",
        "All heavy things are still.",
        "All light things are unstable.",
        "All unstable things are changing.",
        "All unstable things are kinetic. ",
        "A bird is not both heavy and still."
      ],
      "context_fol": [
        "∀x (Big(x) ⊕ Small(x))",
        "∀x (Big(x) → Heavy(x))",
        "∀x (Small(x) → Light(x))",
        "∀x (Heavy(x) → Still(x))",
        "∀x (Light(x) → Unstable(x))",
        "∀x (Unstable(x) → Changing(x))",
        "∀x (Unstable(x) → Kinetic(x))",
        "¬(Heavy(bird) ∧ Still(bird))"
      ],
      "question": "A bird is not still.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1433,
      "story_id": 486,
      "context": [
        "Everything is either big or small.",
        "All big things are heavy. ",
        "All small things are light. ",
        "All heavy things are still.",
        "All light things are unstable.",
        "All unstable things are changing.",
        "All unstable things are kinetic. ",
        "A bird is not both heavy and still."
      ],
      "context_fol": [
        "∀x (Big(x) ⊕ Small(x))",
        "∀x (Big(x) → Heavy(x))",
        "∀x (Small(x) → Light(x))",
        "∀x (Heavy(x) → Still(x))",
        "∀x (Light(x) → Unstable(x))",
        "∀x (Unstable(x) → Changing(x))",
        "∀x (Unstable(x) → Kinetic(x))",
        "¬(Heavy(bird) ∧ Still(bird))"
      ],
      "question": "A bird is either kinetic or changing.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1429,
      "story_id": 486,
      "context": [
        "Everything is either big or small.",
        "All big things are heavy. ",
        "All small things are light. ",
        "All heavy things are still.",
        "All light things are unstable.",
        "All unstable things are changing.",
        "All unstable things are kinetic. ",
        "A bird is not both heavy and still."
      ],
      "context_fol": [
        "∀x (Big(x) ⊕ Small(x))",
        "∀x (Big(x) → Heavy(x))",
        "∀x (Small(x) → Light(x))",
        "∀x (Heavy(x) → Still(x))",
        "∀x (Light(x) → Unstable(x))",
        "∀x (Unstable(x) → Changing(x))",
        "∀x (Unstable(x) → Kinetic(x))",
        "¬(Heavy(bird) ∧ Still(bird))"
      ],
      "question": "A bird is still.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "164": [
    {
      "id": 1197,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "James goes to cinemas every week.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1198,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "James does not go to cinemas every week.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 64,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, amcalist)",
        "Prefer(peter, tvseries)"
      ],
      "question": "James goes to cinemas every week.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "165": [
    {
      "id": 1197,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "James goes to cinemas every week.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 64,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, amcalist)",
        "Prefer(peter, tvseries)"
      ],
      "question": "James goes to cinemas every week.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1198,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "James does not go to cinemas every week.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "166": [
    {
      "id": 1197,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "James goes to cinemas every week.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1198,
      "story_id": 422,
      "context": [
        "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week",
        "Customers either subscribe to AMC service or HBO service. ",
        "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "All customers who subscribe to HBO services prefer TV series to movies. ",
        "James watches TV series in cinemas. "
      ],
      "context_fol": [
        "∀x (AMC(x) → ThreeMovies(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (AMC(x) ∨ HBO(x))",
        "∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))",
        "∀x (HBO(x) → PreferTVSeries(x))",
        "WatchTVInCinema(james)"
      ],
      "question": "James does not go to cinemas every week.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 64,
      "story_id": 22,
      "context": [
        "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
        "Some customers go to cinemas every week. ",
        "Customers who prefer TV series will not watch TV series in cinemas.",
        "James watches TV series in cinemas. ",
        "James subscribes to AMC A List.",
        "Peter prefers TV series."
      ],
      "context_fol": [
        "∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))",
        "∃x (CinemaEveryWeek(x))",
        "∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))",
        "WatchTVIn(james, cinemas)",
        "SubscribedTo(james, amcalist)",
        "Prefer(peter, tvseries)"
      ],
      "question": "James goes to cinemas every week.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "167": [
    {
      "id": 20,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "Miroslav Venhoda loved music.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 22,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "No choral conductor specialized in the performance of Renaissance.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 21,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "A Czech person wrote a book in 1946.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "168": [
    {
      "id": 22,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "No choral conductor specialized in the performance of Renaissance.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 20,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "Miroslav Venhoda loved music.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 21,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "A Czech person wrote a book in 1946.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "169": [
    {
      "id": 22,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "No choral conductor specialized in the performance of Renaissance.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 20,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "Miroslav Venhoda loved music.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 21,
      "story_id": 8,
      "context": [
        "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "Any choral conductor is a musician.",
        "Some musicians love music.",
        "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
      ],
      "context_fol": [
        "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "∀x (ChoralConductor(x) → Musician(x))",
        "∃x (Musician(x) → Love(x, music))",
        "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)"
      ],
      "question": "A Czech person wrote a book in 1946.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "170": [
    {
      "id": 1040,
      "story_id": 387,
      "context": [
        "If something requires a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If something is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All Leukemia is blood cancer. ",
        "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
      ],
      "context_fol": [
        "∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) ",
        "∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))",
        "∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Leukemia(x) → BloodCancer(x))",
        "¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)"
      ],
      "question": "Bladder cancer is mild.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 820,
      "story_id": 320,
      "context": [
        "All cancers are malignant tumors.",
        "No malignant tumor can be treated at home.",
        "All colorectal cancer is cancer.",
        "Having a cold can be treated at home.",
        "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
      ],
      "context_fol": [
        "∀x (Cancer(x) → MalignantTumor(x))",
        "∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))",
        "∀x (ColorectalCancer(x) → Cancer(x))",
        "∀x (HavingACold(x) → CanBeTreatedAtHome(x))",
        "¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))"
      ],
      "question": "If breast cancer is not colorectal cancer, then breast cancer is a malignant tumor.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 817,
      "story_id": 320,
      "context": [
        "All cancers are malignant tumors.",
        "No malignant tumor can be treated at home.",
        "All colorectal cancer is cancer.",
        "Having a cold can be treated at home.",
        "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
      ],
      "context_fol": [
        "∀x (Cancer(x) → MalignantTumor(x))",
        "∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))",
        "∀x (ColorectalCancer(x) → Cancer(x))",
        "∀x (HavingACold(x) → CanBeTreatedAtHome(x))",
        "¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))"
      ],
      "question": "Breast cancer is not colorectal cancer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "171": [
    {
      "id": 1040,
      "story_id": 387,
      "context": [
        "If something requires a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If something is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All Leukemia is blood cancer. ",
        "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
      ],
      "context_fol": [
        "∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) ",
        "∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))",
        "∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Leukemia(x) → BloodCancer(x))",
        "¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)"
      ],
      "question": "Bladder cancer is mild.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1042,
      "story_id": 387,
      "context": [
        "If something requires a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If something is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All Leukemia is blood cancer. ",
        "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
      ],
      "context_fol": [
        "∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) ",
        "∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))",
        "∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Leukemia(x) → BloodCancer(x))",
        "¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)"
      ],
      "question": "Bladder cancer is either a rare disease or mild.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1041,
      "story_id": 387,
      "context": [
        "If something requires a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If something is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All Leukemia is blood cancer. ",
        "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
      ],
      "context_fol": [
        "∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) ",
        "∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))",
        "∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Leukemia(x) → BloodCancer(x))",
        "¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)"
      ],
      "question": "Bladder cancer is Leukemia.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "172": [
    {
      "id": 1040,
      "story_id": 387,
      "context": [
        "If something requires a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If something is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All Leukemia is blood cancer. ",
        "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
      ],
      "context_fol": [
        "∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) ",
        "∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))",
        "∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Leukemia(x) → BloodCancer(x))",
        "¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)"
      ],
      "question": "Bladder cancer is mild.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1042,
      "story_id": 387,
      "context": [
        "If something requires a medical diagnosis, then lab tests or imaging is required. ",
        "All rare diseases require a medical diagnosis.",
        "If something is mild, then no lab tests or imaging is required. ",
        "All blood cancers are rare diseases.",
        "All Leukemia is blood cancer. ",
        "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
      ],
      "context_fol": [
        "∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) ",
        "∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))",
        "∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ",
        "∀x (BloodCancer(x) → RareDiseases(x))",
        "∀x (Leukemia(x) → BloodCancer(x))",
        "¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)"
      ],
      "question": "Bladder cancer is either a rare disease or mild.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 820,
      "story_id": 320,
      "context": [
        "All cancers are malignant tumors.",
        "No malignant tumor can be treated at home.",
        "All colorectal cancer is cancer.",
        "Having a cold can be treated at home.",
        "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
      ],
      "context_fol": [
        "∀x (Cancer(x) → MalignantTumor(x))",
        "∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))",
        "∀x (ColorectalCancer(x) → Cancer(x))",
        "∀x (HavingACold(x) → CanBeTreatedAtHome(x))",
        "¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))"
      ],
      "question": "If breast cancer is not colorectal cancer, then breast cancer is a malignant tumor.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "173": [
    {
      "id": 978,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "Franny has to visit the dentist frequently.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 979,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 980,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "If Franny either visits the dentist frequently or drinks kombucha every day, then Franny both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "174": [
    {
      "id": 978,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "Franny has to visit the dentist frequently.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 979,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 980,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "If Franny either visits the dentist frequently or drinks kombucha every day, then Franny both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "175": [
    {
      "id": 978,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "Franny has to visit the dentist frequently.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 979,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 980,
      "story_id": 366,
      "context": [
        "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
      ],
      "context_fol": [
        "∀x (Kombucha(x) ∨ CocaCola(x))",
        "∀x (CocaCola(x) → BusyParents(x))",
        "∀x (CocaCola(x) → Dentist(x))",
        "∀x (BusyParents(x) → Erratic(x))",
        "∀x (Erratic(x) → ¬Consistent(x))",
        "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))"
      ],
      "question": "If Franny either visits the dentist frequently or drinks kombucha every day, then Franny both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "176": [
    {
      "id": 197,
      "story_id": 66,
      "context": [
        "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "If a city is in a state which is in US, the city is a US city.",
        "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
        "LA is a city in California(CA).",
        "Atlanta is a US city.",
        "Atlanta is in Georgia(CA).",
        "CA is a state in the United States.",
        "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
        "Atlanta in the United States hold the 1996 Summer Olympics."
      ],
      "context_fol": [
        "∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))",
        "∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us))",
        "∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))",
        "SummerOlympicsCity(y2028, la)",
        "CityInState(la, ca)",
        "CityInCountry(atlanta, us)",
        "StateInCountry(ca, us)",
        "CityInState(atlanta, ga)",
        "¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting)",
        "SummerOlympicsCity(y1996, atlanta)"
      ],
      "question": "The 1996 Summer Olympics is not in Georgia.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 659,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 661,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "177": [
    {
      "id": 197,
      "story_id": 66,
      "context": [
        "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "If a city is in a state which is in US, the city is a US city.",
        "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
        "LA is a city in California(CA).",
        "Atlanta is a US city.",
        "Atlanta is in Georgia(CA).",
        "CA is a state in the United States.",
        "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
        "Atlanta in the United States hold the 1996 Summer Olympics."
      ],
      "context_fol": [
        "∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))",
        "∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us))",
        "∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))",
        "SummerOlympicsCity(y2028, la)",
        "CityInState(la, ca)",
        "CityInCountry(atlanta, us)",
        "StateInCountry(ca, us)",
        "CityInState(atlanta, ga)",
        "¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting)",
        "SummerOlympicsCity(y1996, atlanta)"
      ],
      "question": "The 1996 Summer Olympics is not in Georgia.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 196,
      "story_id": 66,
      "context": [
        "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "If a city is in a state which is in US, the city is a US city.",
        "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
        "LA is a city in California(CA).",
        "Atlanta is a US city.",
        "Atlanta is in Georgia(CA).",
        "CA is a state in the United States.",
        "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
        "Atlanta in the United States hold the 1996 Summer Olympics."
      ],
      "context_fol": [
        "∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))",
        "∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us))",
        "∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))",
        "SummerOlympicsCity(y2028, la)",
        "CityInState(la, ca)",
        "CityInCountry(atlanta, us)",
        "StateInCountry(ca, us)",
        "CityInState(atlanta, ga)",
        "¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting)",
        "SummerOlympicsCity(y1996, atlanta)"
      ],
      "question": "The 2028 Summer Olympics will take place in the US.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 659,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "178": [
    {
      "id": 659,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia did not win fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 661,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "Russia won fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 660,
      "story_id": 231,
      "context": [
        "The 2008 Summer Olympics were held in Beijing, China.",
        "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "87 countries won at least one medal during the 2008 Games."
      ],
      "context_fol": [
        "HeldIn(summer2008olympics, beijingchina)",
        "SecondToBe(summer2008olympics, heldincommuniststate)",
        "Won(china, mostgoldmedals)",
        "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "Placed(russia, thirdingoldmedals)",
        "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "∃x (Country(x) ∧ Won(x, medal))"
      ],
      "question": "The United States won fewer gold medals than China.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "179": [
    {
      "id": 789,
      "story_id": 314,
      "context": [
        "No animals are plants. ",
        "All humans are animals.",
        "All pupils are human.",
        "All flowers are plants.",
        "If Jack is a human or a flower, then Jack is a human and a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)"
      ],
      "question": "Jack is a plant.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 787,
      "story_id": 314,
      "context": [
        "No animals are plants. ",
        "All humans are animals.",
        "All pupils are human.",
        "All flowers are plants.",
        "If Jack is a human or a flower, then Jack is a human and a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)"
      ],
      "question": "Jack is a pupil.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 788,
      "story_id": 314,
      "context": [
        "No animals are plants. ",
        "All humans are animals.",
        "All pupils are human.",
        "All flowers are plants.",
        "If Jack is a human or a flower, then Jack is a human and a flower."
      ],
      "context_fol": [
        "∀x (Animal(x) → ¬Plant(x))",
        "∀x (Human(x) → Animal(x))",
        "∀x (Pupil(x) → Human(x))",
        "∀x (Flower(x) → Plant(x))",
        "Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)"
      ],
      "question": "Jack is not a pupil.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "180": [
    {
      "id": 3,
      "story_id": 1,
      "context": [
        "Mary has the flu.",
        "Flu and influenza are the same disease.",
        "Susan doesn't have influenza."
      ],
      "context_fol": [
        "Have(mary, flu)",
        "∀x (Have(x, flu) ↔ Have(x, influenza))",
        "¬Have(susan, influenza)"
      ],
      "question": "Either Mary or Susan has influenza.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 483,
      "story_id": 167,
      "context": [
        "If you go somewhere by train, you will not lose time.",
        "If you go somewhere by car and meet traffic jam, you will lose time.",
        "If you lose time, you will be late for work.",
        "Mary can get from New Haven to New York City either by train or car.",
        "Mary is late for work."
      ],
      "context_fol": [
        "∀x (Train(x) → ¬LoseTime(x))",
        "∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))",
        "∀x (LoseTime(x) ↔ LateForWork(x))",
        "Train(mary) ⊕ Car(mary)",
        "LateForWork(mary)"
      ],
      "question": "Mary gets from New Haven to New York City by car.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 482,
      "story_id": 167,
      "context": [
        "If you go somewhere by train, you will not lose time.",
        "If you go somewhere by car and meet traffic jam, you will lose time.",
        "If you lose time, you will be late for work.",
        "Mary can get from New Haven to New York City either by train or car.",
        "Mary is late for work."
      ],
      "context_fol": [
        "∀x (Train(x) → ¬LoseTime(x))",
        "∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))",
        "∀x (LoseTime(x) ↔ LateForWork(x))",
        "Train(mary) ⊕ Car(mary)",
        "LateForWork(mary)"
      ],
      "question": "Mary gets from New Haven to New York City by train.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "181": [
    {
      "id": 3,
      "story_id": 1,
      "context": [
        "Mary has the flu.",
        "Flu and influenza are the same disease.",
        "Susan doesn't have influenza."
      ],
      "context_fol": [
        "Have(mary, flu)",
        "∀x (Have(x, flu) ↔ Have(x, influenza))",
        "¬Have(susan, influenza)"
      ],
      "question": "Either Mary or Susan has influenza.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 483,
      "story_id": 167,
      "context": [
        "If you go somewhere by train, you will not lose time.",
        "If you go somewhere by car and meet traffic jam, you will lose time.",
        "If you lose time, you will be late for work.",
        "Mary can get from New Haven to New York City either by train or car.",
        "Mary is late for work."
      ],
      "context_fol": [
        "∀x (Train(x) → ¬LoseTime(x))",
        "∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))",
        "∀x (LoseTime(x) ↔ LateForWork(x))",
        "Train(mary) ⊕ Car(mary)",
        "LateForWork(mary)"
      ],
      "question": "Mary gets from New Haven to New York City by car.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 482,
      "story_id": 167,
      "context": [
        "If you go somewhere by train, you will not lose time.",
        "If you go somewhere by car and meet traffic jam, you will lose time.",
        "If you lose time, you will be late for work.",
        "Mary can get from New Haven to New York City either by train or car.",
        "Mary is late for work."
      ],
      "context_fol": [
        "∀x (Train(x) → ¬LoseTime(x))",
        "∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))",
        "∀x (LoseTime(x) ↔ LateForWork(x))",
        "Train(mary) ⊕ Car(mary)",
        "LateForWork(mary)"
      ],
      "question": "Mary gets from New Haven to New York City by train.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "182": [
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 171,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Dogs are always not naughty.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "183": [
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 171,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Dogs are always not naughty.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "184": [
    {
      "id": 170,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Charlie does not like Leo and does not care for Leo.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 171,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Dogs are always not naughty.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 169,
      "story_id": 57,
      "context": [
        "All pets are animals.",
        "Pets can be either a dog or a cat.",
        "If a person has a pet, they care for that pet. ",
        "Dogs and Cats can be naughty. ",
        "Pets who are naughty are not liked as much. ",
        "Charlie has a naughty pet dog named Leo. "
      ],
      "context_fol": [
        "∀x (Pet(x) → Animal(x))",
        "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "∀x ∀y (HasPet(x) → Cares(x, y))",
        "∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))",
        "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)"
      ],
      "question": "Leo is an animal.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "185": [
    {
      "id": 212,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no journalists that were born in Yorkshire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 211,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no British authors.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 213,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There is a son of a general practitioner that is not an author.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "186": [
    {
      "id": 212,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no journalists that were born in Yorkshire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 139,
      "story_id": 48,
      "context": [
        "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "The Salmon of Doubt is about life experiences and technology.",
        "All authors are writers.",
        "Writers create innovative ideas.",
        "Some books that contain innovative ideas are about technology."
      ],
      "context_fol": [
        "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)",
        "∀x (Author(x) → Writer(x))",
        "∀x (Writer(x) → CreateInnovativeIdea(x))",
        "∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))"
      ],
      "question": "Douglas Adams is a writer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 211,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no British authors.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "187": [
    {
      "id": 212,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no journalists that were born in Yorkshire.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 211,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There are no British authors.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 213,
      "story_id": 70,
      "context": [
        "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "One of the word-setters of My Word! was Michael O'Donnell.",
        "The magazine World Medicine was edited by Michael O'Donnell.",
        "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
      ],
      "context_fol": [
        "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "WordSetter(michael)",
        "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))"
      ],
      "question": "There is a son of a general practitioner that is not an author.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "188": [
    {
      "id": 845,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is an NBA player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 846,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is a centerback player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 841,
      "story_id": 326,
      "context": [
        "Some defenders are centerback.",
        "All defenders are soccer players.",
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "Stephen Curry is an NBA player."
      ],
      "context_fol": [
        "∃x (Defender(x) ∧ Centerback(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "NBAPlayer(stephencurry)"
      ],
      "question": "If Stephen Curry is not a centerback and a defender, then Stephen Curry is neither a soccer player nor a professional basketball player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "189": [
    {
      "id": 845,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is an NBA player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 846,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is a centerback player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 847,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is not a centerback player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "190": [
    {
      "id": 845,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is an NBA player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 846,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is a centerback player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 841,
      "story_id": 326,
      "context": [
        "Some defenders are centerback.",
        "All defenders are soccer players.",
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "Stephen Curry is an NBA player."
      ],
      "context_fol": [
        "∃x (Defender(x) ∧ Centerback(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "NBAPlayer(stephencurry)"
      ],
      "question": "If Stephen Curry is not a centerback and a defender, then Stephen Curry is neither a soccer player nor a professional basketball player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "191": [
    {
      "id": 845,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is an NBA player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 846,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is a centerback player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 841,
      "story_id": 326,
      "context": [
        "Some defenders are centerback.",
        "All defenders are soccer players.",
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "Stephen Curry is an NBA player."
      ],
      "context_fol": [
        "∃x (Defender(x) ∧ Centerback(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "NBAPlayer(stephencurry)"
      ],
      "question": "If Stephen Curry is not a centerback and a defender, then Stephen Curry is neither a soccer player nor a professional basketball player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "192": [
    {
      "id": 845,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is an NBA player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 846,
      "story_id": 328,
      "context": [
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "All defenders are soccer players.",
        "All centerback players are defenders.",
        "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
      ],
      "context_fol": [
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "∀x (Centerback(x) → Defender(x))",
        "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)"
      ],
      "question": "Stephen Curry is a centerback player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 841,
      "story_id": 326,
      "context": [
        "Some defenders are centerback.",
        "All defenders are soccer players.",
        "No soccer players are professional basketball players.",
        "All NBA players are professional basketball players.",
        "Stephen Curry is an NBA player."
      ],
      "context_fol": [
        "∃x (Defender(x) ∧ Centerback(x))",
        "∀x (Defender(x) → SoccerPlayer(x))",
        "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "NBAPlayer(stephencurry)"
      ],
      "question": "If Stephen Curry is not a centerback and a defender, then Stephen Curry is neither a soccer player nor a professional basketball player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "193": [
    {
      "id": 750,
      "story_id": 301,
      "context": [
        "When something is depressing, it is sad.",
        "V is depressing. "
      ],
      "context_fol": [
        "∀x (Depressing(x) → Sad(x))",
        "∀x (V(x) → Depressing(x))"
      ],
      "question": "V is invigorating",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 1015,
      "story_id": 378,
      "context": [
        "All people who attend weddings are getting married or have friends who are getting married.",
        "No preteens and other young children are getting married or have friends who are getting married.",
        "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "All people who are outgoing and very spirited are fond of large organized group functions.",
        "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
      ],
      "context_fol": [
        "∀x Weddings(x) → GettingMarried(x)",
        "∀x PreTeen(x) → ¬GettingMarried(x)",
        "∀x Celebrating(x) → Weddings(x)",
        "∀x LargeGathering(x) → Celebrating(x)",
        "∀x Outgoing(x) → LargeGathering(x)",
        "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)"
      ],
      "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 387,
      "story_id": 130,
      "context": [
        "John will go to the cinema if and only if Jack goes to the cinema today.",
        "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.",
        "Some days in March have bad weather.",
        "Iron man is on.",
        "It's March now."
      ],
      "context_fol": [
        "GoToTheCinema(john, today) ↔ GoToTheCinema(jack, today)",
        "GoToTheCinema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(today))",
        "∃x (Month(march) → BadWeather(x))",
        "Movie(ironman)",
        "Month(march)"
      ],
      "question": "John will go to the cinema.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "194": [
    {
      "id": 654,
      "story_id": 229,
      "context": [
        "Barbara Ann Marshall is a former swimmer and former world record-holder.",
        "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "Barbara Ann Marshall's home country is the United States.",
        "All people who compete in the 1972 Summer Olympics represent their home country.",
        "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
        "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
        "Only relay swimmers who participated in the event final received medals."
      ],
      "context_fol": [
        "FormerSwimmer(barbaraannmarshall) ∧ FormerWorldRecordHolder(barbaraannmarshall)",
        "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
        "HomeCountry(barbaraannmarshall, unitedstates)",
        "∀x ∃y (ParticipatedIn(x, summer1972olympics) ∧ HomeCountry(x, y) → Represented(x, y))",
        "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)",
        "¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)",
        "∀x ((RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalheatfreerelay)) ↔ ¬Recieved(x, medal)))"
      ],
      "question": "Barbara Ann Marshall did not receive medals.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 655,
      "story_id": 229,
      "context": [
        "Barbara Ann Marshall is a former swimmer and former world record-holder.",
        "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "Barbara Ann Marshall's home country is the United States.",
        "All people who compete in the 1972 Summer Olympics represent their home country.",
        "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
        "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
        "Only relay swimmers who participated in the event final received medals."
      ],
      "context_fol": [
        "FormerSwimmer(barbaraannmarshall) ∧ FormerWorldRecordHolder(barbaraannmarshall)",
        "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
        "HomeCountry(barbaraannmarshall, unitedstates)",
        "∀x ∃y (ParticipatedIn(x, summer1972olympics) ∧ HomeCountry(x, y) → Represented(x, y))",
        "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)",
        "¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)",
        "∀x ((RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalheatfreerelay)) ↔ ¬Recieved(x, medal)))"
      ],
      "question": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 337,
      "story_id": 111,
      "context": [
        "Aberdeen won the cup in the 2013 final.",
        "Rangers won the cup in 2014 final.",
        "Aberdeen and Rangers are different teams.",
        "Different teams cannot win the same cup in a given year's final."
      ],
      "context_fol": [
        "WonCup(aberdeen, twentythirteen)",
        "WonCup(rangers, twentyfourteen)",
        "Different(aberdeen, rangers) ∧ Different(rangers, aberdeen)",
        "∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))"
      ],
      "question": "Rangers won the cup in 2015.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "195": [
    {
      "id": 654,
      "story_id": 229,
      "context": [
        "Barbara Ann Marshall is a former swimmer and former world record-holder.",
        "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "Barbara Ann Marshall's home country is the United States.",
        "All people who compete in the 1972 Summer Olympics represent their home country.",
        "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
        "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
        "Only relay swimmers who participated in the event final received medals."
      ],
      "context_fol": [
        "FormerSwimmer(barbaraannmarshall) ∧ FormerWorldRecordHolder(barbaraannmarshall)",
        "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
        "HomeCountry(barbaraannmarshall, unitedstates)",
        "∀x ∃y (ParticipatedIn(x, summer1972olympics) ∧ HomeCountry(x, y) → Represented(x, y))",
        "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)",
        "¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)",
        "∀x ((RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalheatfreerelay)) ↔ ¬Recieved(x, medal)))"
      ],
      "question": "Barbara Ann Marshall did not receive medals.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    },
    {
      "id": 655,
      "story_id": 229,
      "context": [
        "Barbara Ann Marshall is a former swimmer and former world record-holder.",
        "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "Barbara Ann Marshall's home country is the United States.",
        "All people who compete in the 1972 Summer Olympics represent their home country.",
        "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
        "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
        "Only relay swimmers who participated in the event final received medals."
      ],
      "context_fol": [
        "FormerSwimmer(barbaraannmarshall) ∧ FormerWorldRecordHolder(barbaraannmarshall)",
        "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
        "HomeCountry(barbaraannmarshall, unitedstates)",
        "∀x ∃y (ParticipatedIn(x, summer1972olympics) ∧ HomeCountry(x, y) → Represented(x, y))",
        "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)",
        "¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)",
        "∀x ((RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalheatfreerelay)) ↔ ¬Recieved(x, medal)))"
      ],
      "question": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 337,
      "story_id": 111,
      "context": [
        "Aberdeen won the cup in the 2013 final.",
        "Rangers won the cup in 2014 final.",
        "Aberdeen and Rangers are different teams.",
        "Different teams cannot win the same cup in a given year's final."
      ],
      "context_fol": [
        "WonCup(aberdeen, twentythirteen)",
        "WonCup(rangers, twentyfourteen)",
        "Different(aberdeen, rangers) ∧ Different(rangers, aberdeen)",
        "∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))"
      ],
      "question": "Rangers won the cup in 2015.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "C"
    }
  ],
  "196": [
    {
      "id": 1376,
      "story_id": 473,
      "context": [
        "An animal is either a cat or a dog.",
        "All dogs bark.",
        "Ghosts do not exist.",
        "If something barks, then it is not alive.",
        "A thing is either alive or dead.",
        "Jojo is not dead."
      ],
      "context_fol": [
        "∀x (Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) → ¬Alive(x))",
        "∀x (Alive(x) ⊕ Dead(x))",
        "¬Dead(jojo)"
      ],
      "question": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1375,
      "story_id": 473,
      "context": [
        "An animal is either a cat or a dog.",
        "All dogs bark.",
        "Ghosts do not exist.",
        "If something barks, then it is not alive.",
        "A thing is either alive or dead.",
        "Jojo is not dead."
      ],
      "context_fol": [
        "∀x (Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) → ¬Alive(x))",
        "∀x (Alive(x) ⊕ Dead(x))",
        "¬Dead(jojo)"
      ],
      "question": "Jojo is a cat or a ghost.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1374,
      "story_id": 473,
      "context": [
        "An animal is either a cat or a dog.",
        "All dogs bark.",
        "Ghosts do not exist.",
        "If something barks, then it is not alive.",
        "A thing is either alive or dead.",
        "Jojo is not dead."
      ],
      "context_fol": [
        "∀x (Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) → ¬Alive(x))",
        "∀x (Alive(x) ⊕ Dead(x))",
        "¬Dead(jojo)"
      ],
      "question": "Jojo is a ghost.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "197": [
    {
      "id": 1376,
      "story_id": 473,
      "context": [
        "An animal is either a cat or a dog.",
        "All dogs bark.",
        "Ghosts do not exist.",
        "If something barks, then it is not alive.",
        "A thing is either alive or dead.",
        "Jojo is not dead."
      ],
      "context_fol": [
        "∀x (Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) → ¬Alive(x))",
        "∀x (Alive(x) ⊕ Dead(x))",
        "¬Dead(jojo)"
      ],
      "question": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1375,
      "story_id": 473,
      "context": [
        "An animal is either a cat or a dog.",
        "All dogs bark.",
        "Ghosts do not exist.",
        "If something barks, then it is not alive.",
        "A thing is either alive or dead.",
        "Jojo is not dead."
      ],
      "context_fol": [
        "∀x (Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) → ¬Alive(x))",
        "∀x (Alive(x) ⊕ Dead(x))",
        "¬Dead(jojo)"
      ],
      "question": "Jojo is a cat or a ghost.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1374,
      "story_id": 473,
      "context": [
        "An animal is either a cat or a dog.",
        "All dogs bark.",
        "Ghosts do not exist.",
        "If something barks, then it is not alive.",
        "A thing is either alive or dead.",
        "Jojo is not dead."
      ],
      "context_fol": [
        "∀x (Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) → ¬Alive(x))",
        "∀x (Alive(x) ⊕ Dead(x))",
        "¬Dead(jojo)"
      ],
      "question": "Jojo is a ghost.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "198": [
    {
      "id": 1376,
      "story_id": 473,
      "context": [
        "An animal is either a cat or a dog.",
        "All dogs bark.",
        "Ghosts do not exist.",
        "If something barks, then it is not alive.",
        "A thing is either alive or dead.",
        "Jojo is not dead."
      ],
      "context_fol": [
        "∀x (Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) → ¬Alive(x))",
        "∀x (Alive(x) ⊕ Dead(x))",
        "¬Dead(jojo)"
      ],
      "question": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    },
    {
      "id": 1375,
      "story_id": 473,
      "context": [
        "An animal is either a cat or a dog.",
        "All dogs bark.",
        "Ghosts do not exist.",
        "If something barks, then it is not alive.",
        "A thing is either alive or dead.",
        "Jojo is not dead."
      ],
      "context_fol": [
        "∀x (Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) → ¬Alive(x))",
        "∀x (Alive(x) ⊕ Dead(x))",
        "¬Dead(jojo)"
      ],
      "question": "Jojo is a cat or a ghost.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 1374,
      "story_id": 473,
      "context": [
        "An animal is either a cat or a dog.",
        "All dogs bark.",
        "Ghosts do not exist.",
        "If something barks, then it is not alive.",
        "A thing is either alive or dead.",
        "Jojo is not dead."
      ],
      "context_fol": [
        "∀x (Cat(x) ⊕ Dog(x))",
        "∀x (Dog(x) → Bark(x))",
        "∀x (¬Ghost(x))",
        "∀x (Bark(x) → ¬Alive(x))",
        "∀x (Alive(x) ⊕ Dead(x))",
        "¬Dead(jojo)"
      ],
      "question": "Jojo is a ghost.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "199": [
    {
      "id": 723,
      "story_id": 274,
      "context": [
        "Adam Buska is a European football player.",
        "If a European plays football, they play what Americans call soccer."
      ],
      "context_fol": [
        "FootballPlayer(adambuska) ∧ European(adambuska)",
        "∀x ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x))"
      ],
      "question": "Adam Buska plays what Americans call soccer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 375,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is not a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "B"
    }
  ],
  "200": [
    {
      "id": 723,
      "story_id": 274,
      "context": [
        "Adam Buska is a European football player.",
        "If a European plays football, they play what Americans call soccer."
      ],
      "context_fol": [
        "FootballPlayer(adambuska) ∧ European(adambuska)",
        "∀x ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x))"
      ],
      "question": "Adam Buska plays what Americans call soccer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 636,
      "story_id": 224,
      "context": [
        "Rhos Aelwyd F.C. is a Welsh football club.",
        "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
        "The Premier Division was won in 2005–06 by a team from Ponciau. ",
        "The winner of the Premier Division in 2009–10 was promoted back to the Cymru Alliance.",
        "The Premier Division in 2009–10 was won by the same team that won in 2005-06. "
      ],
      "context_fol": [
        "∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ BasedInPonciau(x) ∧ Welsh(x))",
        "∀x (BasedInPonciau(x) ↔ Rhosaelwydfc(x))",
        "∃x (BasedInPonciau(x) ∧ WonPremierDivisionDuring(x, y2005))",
        "∀x (WonPremierDivisionDuring(x, y2009) → Promoted(x))",
        "∀x (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005))"
      ],
      "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "201": [
    {
      "id": 723,
      "story_id": 274,
      "context": [
        "Adam Buska is a European football player.",
        "If a European plays football, they play what Americans call soccer."
      ],
      "context_fol": [
        "FootballPlayer(adambuska) ∧ European(adambuska)",
        "∀x ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x))"
      ],
      "question": "Adam Buska plays what Americans call soccer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 636,
      "story_id": 224,
      "context": [
        "Rhos Aelwyd F.C. is a Welsh football club.",
        "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
        "The Premier Division was won in 2005–06 by a team from Ponciau. ",
        "The winner of the Premier Division in 2009–10 was promoted back to the Cymru Alliance.",
        "The Premier Division in 2009–10 was won by the same team that won in 2005-06. "
      ],
      "context_fol": [
        "∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ BasedInPonciau(x) ∧ Welsh(x))",
        "∀x (BasedInPonciau(x) ↔ Rhosaelwydfc(x))",
        "∃x (BasedInPonciau(x) ∧ WonPremierDivisionDuring(x, y2005))",
        "∀x (WonPremierDivisionDuring(x, y2009) → Promoted(x))",
        "∀x (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005))"
      ],
      "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "202": [
    {
      "id": 723,
      "story_id": 274,
      "context": [
        "Adam Buska is a European football player.",
        "If a European plays football, they play what Americans call soccer."
      ],
      "context_fol": [
        "FootballPlayer(adambuska) ∧ European(adambuska)",
        "∀x ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x))"
      ],
      "question": "Adam Buska plays what Americans call soccer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 636,
      "story_id": 224,
      "context": [
        "Rhos Aelwyd F.C. is a Welsh football club.",
        "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
        "The Premier Division was won in 2005–06 by a team from Ponciau. ",
        "The winner of the Premier Division in 2009–10 was promoted back to the Cymru Alliance.",
        "The Premier Division in 2009–10 was won by the same team that won in 2005-06. "
      ],
      "context_fol": [
        "∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ BasedInPonciau(x) ∧ Welsh(x))",
        "∀x (BasedInPonciau(x) ↔ Rhosaelwydfc(x))",
        "∃x (BasedInPonciau(x) ∧ WonPremierDivisionDuring(x, y2005))",
        "∀x (WonPremierDivisionDuring(x, y2009) → Promoted(x))",
        "∀x (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005))"
      ],
      "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ],
  "203": [
    {
      "id": 723,
      "story_id": 274,
      "context": [
        "Adam Buska is a European football player.",
        "If a European plays football, they play what Americans call soccer."
      ],
      "context_fol": [
        "FootballPlayer(adambuska) ∧ European(adambuska)",
        "∀x ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x))"
      ],
      "question": "Adam Buska plays what Americans call soccer.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 374,
      "story_id": 125,
      "context": [
        "Soccer players have a right foot and a left foot.",
        "Top soccer players are soccer players who can use their both feet very efficiently.",
        "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "Cristiano Ronaldo is a soccer player.",
        "Cristiano Ronaldo can use his right foot very efficiently.",
        "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
      ],
      "context_fol": [
        "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))",
        "∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))",
        "SoccerPlayer(ronaldo)",
        "Efficient(ronaldo, right)",
        "ScoreManyGoals(ronaldo, left)"
      ],
      "question": "Cristiano Ronaldo is a top soccer player.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    },
    {
      "id": 636,
      "story_id": 224,
      "context": [
        "Rhos Aelwyd F.C. is a Welsh football club.",
        "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
        "The Premier Division was won in 2005–06 by a team from Ponciau. ",
        "The winner of the Premier Division in 2009–10 was promoted back to the Cymru Alliance.",
        "The Premier Division in 2009–10 was won by the same team that won in 2005-06. "
      ],
      "context_fol": [
        "∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ BasedInPonciau(x) ∧ Welsh(x))",
        "∀x (BasedInPonciau(x) ↔ Rhosaelwydfc(x))",
        "∃x (BasedInPonciau(x) ∧ WonPremierDivisionDuring(x, y2005))",
        "∀x (WonPremierDivisionDuring(x, y2009) → Promoted(x))",
        "∀x (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005))"
      ],
      "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
      "options": [
        "A) True",
        "B) False",
        "C) Uncertain"
      ],
      "answer": "A"
    }
  ]
}