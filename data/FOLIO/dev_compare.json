[
    {
        "example_id": 0,
        "story_id": 10000,
        "context": [
            "If people perform in school talent shows often, then they attend and are very engaged with school events.",
            "People either perform in school talent shows often or are inactive and disinterested members of their community.",
            "If people chaperone high school dances, then they are not students who attend the school.",
            "All people who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
            "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
        ],
        "context_fol": [
            "\u2200x (TalentShows(x) \u2192 Engaged(x))",
            "\u2200x (TalentShows(x) \u2228 Inactive(x))",
            "\u2200x (Chaperone(x) \u2192 \u00acStudents(x))",
            "\u2200x (Inactive(x) \u2192 Chaperone(x))",
            "\u2200x (AcademicCareer(x) \u2192 Students(x))",
            "(Engaged(bonnie) \u2227 Students(bonnie)) \u2295 (\u00acEngaged(bonnie) \u2227 \u00acStudents(bonnie))"
        ],
        "conclusion": "Bonnie performs in school talent shows often.",
        "conclusion_fol": "Engaged(bonnie)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 1,
        "story_id": 10000,
        "context": [
            "If people perform in school talent shows often, then they attend and are very engaged with school events.",
            "People either perform in school talent shows often or are inactive and disinterested members of their community.",
            "If people chaperone high school dances, then they are not students who attend the school.",
            "All people who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
            "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
        ],
        "context_fol": [
            "\u2200x (TalentShows(x) \u2192 Engaged(x))",
            "\u2200x (TalentShows(x) \u2228 Inactive(x))",
            "\u2200x (Chaperone(x) \u2192 \u00acStudents(x))",
            "\u2200x (Inactive(x) \u2192 Chaperone(x))",
            "\u2200x (AcademicCareer(x) \u2192 Students(x))",
            "(Engaged(bonnie) \u2227 Students(bonnie)) \u2295 (\u00acEngaged(bonnie) \u2227 \u00acStudents(bonnie))"
        ],
        "conclusion": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
        "conclusion_fol": "AcademicCareer(bonnie) \u2295 Chaperone(bonnie) \u2192 AcademicCareer(bonnie) \u2295 Inactive(bonnie)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 2,
        "story_id": 10000,
        "context": [
            "If people perform in school talent shows often, then they attend and are very engaged with school events.",
            "People either perform in school talent shows often or are inactive and disinterested members of their community.",
            "If people chaperone high school dances, then they are not students who attend the school.",
            "All people who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
            "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
        ],
        "context_fol": [
            "\u2200x (TalentShows(x) \u2192 Engaged(x))",
            "\u2200x (TalentShows(x) \u2228 Inactive(x))",
            "\u2200x (Chaperone(x) \u2192 \u00acStudents(x))",
            "\u2200x (Inactive(x) \u2192 Chaperone(x))",
            "\u2200x (AcademicCareer(x) \u2192 Students(x))",
            "(Engaged(bonnie) \u2227 Students(bonnie)) \u2295 (\u00acEngaged(bonnie) \u2227 \u00acStudents(bonnie))"
        ],
        "conclusion": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
        "conclusion_fol": "Chaperone(bonnie) \u2295 TalentShows(bonnie) \u2192 AcademicCareer(bonnie) \u2227 Inactive(bonnie))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 3,
        "story_id": 10001,
        "context": [
            "All employees who schedule a meeting with their customers will appear in the company today. ",
            "Everyone who has lunch in the company schedules meetings with their customers. ",
            "Employees will either have lunch in the company or have lunch at home.",
            "If an employee has lunch at home, then he/she is working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
        ],
        "context_fol": [
            "\u2200x (Meeting(x) \u2192 AppearInCompany(x))",
            "\u2200x (LunchInCompany(x) \u2192 Meetings(x))",
            "\u2200x (LunchInCompany(x) \u2228 LunchAtHome(x))",
            "\u2200x (LunchAtHome(x) \u2192 WorkRemotelyFromHome(x))",
            "\u2200x (InOtherCountries(x) \u2192 WorkRemotelyFromHome(x))",
            "\u2200x (Manager(x) \u2192 \u00acWorkRemotelyFromHome(x))",
            "Manager(james) \u2295 AppearInCompany(james)"
        ],
        "conclusion": "James has lunch in the company.",
        "conclusion_fol": "LunchInCompany(james)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 4,
        "story_id": 10001,
        "context": [
            "All employees who schedule a meeting with their customers will appear in the company today. ",
            "Everyone who has lunch in the company schedules meetings with their customers. ",
            "Employees will either have lunch in the company or have lunch at home.",
            "If an employee has lunch at home, then he/she is working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
        ],
        "context_fol": [
            "\u2200x (Meeting(x) \u2192 AppearInCompany(x))",
            "\u2200x (LunchInCompany(x) \u2192 Meetings(x))",
            "\u2200x (LunchInCompany(x) \u2228 LunchAtHome(x))",
            "\u2200x (LunchAtHome(x) \u2192 WorkRemotelyFromHome(x))",
            "\u2200x (InOtherCountries(x) \u2192 WorkRemotelyFromHome(x))",
            "\u2200x (Manager(x) \u2192 \u00acWorkRemotelyFromHome(x))",
            "Manager(james) \u2295 AppearInCompany(james)"
        ],
        "conclusion": "James does not have lunch in the company.",
        "conclusion_fol": "\u00acLunchInCompany(james)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 5,
        "story_id": 10001,
        "context": [
            "All employees who schedule a meeting with their customers will appear in the company today. ",
            "Everyone who has lunch in the company schedules meetings with their customers. ",
            "Employees will either have lunch in the company or have lunch at home.",
            "If an employee has lunch at home, then he/she is working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
        ],
        "context_fol": [
            "\u2200x (Meeting(x) \u2192 AppearInCompany(x))",
            "\u2200x (LunchInCompany(x) \u2192 Meetings(x))",
            "\u2200x (LunchInCompany(x) \u2228 LunchAtHome(x))",
            "\u2200x (LunchAtHome(x) \u2192 WorkRemotelyFromHome(x))",
            "\u2200x (InOtherCountries(x) \u2192 WorkRemotelyFromHome(x))",
            "\u2200x (Manager(x) \u2192 \u00acWorkRemotelyFromHome(x))",
            "Manager(james) \u2295 AppearInCompany(james)"
        ],
        "conclusion": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
        "conclusion_fol": "(Manager(james) \u2295 InOtherCountries(james)) \u2192 (LunchAtHome(james) \u2295 WorkRemotelyFromHome(james))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 6,
        "story_id": 10002,
        "context": [
            "Monkeypox is an infectious disease caused by the monkeypox virus.",
            "Monkeypox virus can occur in certain animals, including humans.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
            "People feel tired when they get a glu."
        ],
        "context_fol": [
            "\u2203x (OccurMonkeypoxVirus(x) \u2227 GetMonkeypox(x))",
            "\u2203x (Animal(x) \u2227 OccurMonkeypoxVirus(x))",
            "\u2200x (Human(x) \u2192 Mammal(x))",
            "\u2200x (Mammal(x) \u2192 Animal(x))",
            "\u2203x (GetMonkeypox(x) \u2227 (Fever(x) \u2228 Headache(x) \u2228 MusclePain(x) \u2228 Tired(x)))",
            "\u2200x (Human(x) \u2227 Flu(x) \u2192 Tired(x))"
        ],
        "conclusion": "There is an animal.",
        "conclusion_fol": "\u2203x (Animal(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 7,
        "story_id": 10002,
        "context": [
            "Monkeypox is an infectious disease caused by the monkeypox virus.",
            "Monkeypox virus can occur in certain animals, including humans.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
            "People feel tired when they get a glu."
        ],
        "context_fol": [
            "\u2203x (OccurMonkeypoxVirus(x) \u2227 GetMonkeypox(x))",
            "\u2203x (Animal(x) \u2227 OccurMonkeypoxVirus(x))",
            "\u2200x (Human(x) \u2192 Mammal(x))",
            "\u2200x (Mammal(x) \u2192 Animal(x))",
            "\u2203x (GetMonkeypox(x) \u2227 (Fever(x) \u2228 Headache(x) \u2228 MusclePain(x) \u2228 Tired(x)))",
            "\u2200x (Human(x) \u2227 Flu(x) \u2192 Tired(x))"
        ],
        "conclusion": "No one gets flu.",
        "conclusion_fol": "\u2200x (Human(x) \u2192 \u00acFlu(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 8,
        "story_id": 10002,
        "context": [
            "Monkeypox is an infectious disease caused by the monkeypox virus.",
            "Monkeypox virus can occur in certain animals, including humans.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
            "People feel tired when they get a glu."
        ],
        "context_fol": [
            "\u2203x (OccurMonkeypoxVirus(x) \u2227 GetMonkeypox(x))",
            "\u2203x (Animal(x) \u2227 OccurMonkeypoxVirus(x))",
            "\u2200x (Human(x) \u2192 Mammal(x))",
            "\u2200x (Mammal(x) \u2192 Animal(x))",
            "\u2203x (GetMonkeypox(x) \u2227 (Fever(x) \u2228 Headache(x) \u2228 MusclePain(x) \u2228 Tired(x)))",
            "\u2200x (Human(x) \u2227 Flu(x) \u2192 Tired(x))"
        ],
        "conclusion": "Symptons of Monkeypox include coughing.",
        "conclusion_fol": "\u2203x (GetMonkeypox(x) \u2227 Coughing(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 9,
        "story_id": 10003,
        "context": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild",
            "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "context_fol": [
            "\u2200x (WildTurkey(x) \u2192 (Eastern(x) \u2228 Osceola(x) \u2228 Goulds(x) \u2228 Merriams(x) \u2228 Riogrande(x) \u2228 Ocellated(x)))",
            "\u00ac(WildTurkey(tom) \u2227 Eastern(tom))",
            "\u00ac(WildTurkey(tom) \u2227 Osceola(tom))",
            "WildTurkey(tom) \u2192 \u00ac(Goulds(tom) \u2228 Merriams(tom) \u2228 Riogrande(tom))",
            "WildTurkey(tom)"
        ],
        "conclusion": "Tom is an Ocellated wild turkey.",
        "conclusion_fol": "Ocellated(tom)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 10,
        "story_id": 10003,
        "context": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild",
            "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "context_fol": [
            "\u2200x (WildTurkey(x) \u2192 (Eastern(x) \u2228 Osceola(x) \u2228 Goulds(x) \u2228 Merriams(x) \u2228 Riogrande(x) \u2228 Ocellated(x)))",
            "\u00ac(WildTurkey(tom) \u2227 Eastern(tom))",
            "\u00ac(WildTurkey(tom) \u2227 Osceola(tom))",
            "WildTurkey(tom) \u2192 \u00ac(Goulds(tom) \u2228 Merriams(tom) \u2228 Riogrande(tom))",
            "WildTurkey(tom)"
        ],
        "conclusion": "Tom is an Eastern wild turkey.",
        "conclusion_fol": "Eastern(tom)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 11,
        "story_id": 10003,
        "context": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild",
            "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "context_fol": [
            "\u2200x (WildTurkey(x) \u2192 (Eastern(x) \u2228 Osceola(x) \u2228 Goulds(x) \u2228 Merriams(x) \u2228 Riogrande(x) \u2228 Ocellated(x)))",
            "\u00ac(WildTurkey(tom) \u2227 Eastern(tom))",
            "\u00ac(WildTurkey(tom) \u2227 Osceola(tom))",
            "WildTurkey(tom) \u2192 \u00ac(Goulds(tom) \u2228 Merriams(tom) \u2228 Riogrande(tom))",
            "WildTurkey(tom)"
        ],
        "conclusion": "Joey is a wild turkey.",
        "conclusion_fol": "WildTurkey(joey)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 12,
        "story_id": 10004,
        "context": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games in the Top 10 list are made by Japanese game companies.",
            "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "context_fol": [
            "\u2203x (Japanese(x) \u2227 VideoGameCompany(x) \u2227 Game(thelegendofzelda) \u2227 Created(x, thelegendofzelda))",
            "\u2200x \u2200y (Game(x) \u2227 InTop10(x) \u2227 Created(x, y) \u2192 Japanese(y))",
            "\u2200x (Game(x) \u2227 SellsMoreThan(x, onemillioncopies) \u2192 Top10(x))",
            "SellsMoreThan(thelegendofzelda, onemillioncopies)"
        ],
        "conclusion": "The Legend of Zelda is in the Top 10 list.",
        "conclusion_fol": "Top10(thelegendofzelda)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 13,
        "story_id": 10004,
        "context": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games in the Top 10 list are made by Japanese game companies.",
            "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "context_fol": [
            "\u2203x (Japanese(x) \u2227 VideoGameCompany(x) \u2227 Game(thelegendofzelda) \u2227 Created(x, thelegendofzelda))",
            "\u2200x \u2200y (Game(x) \u2227 InTop10(x) \u2227 Created(x, y) \u2192 Japanese(y))",
            "\u2200x (Game(x) \u2227 SellsMoreThan(x, onemillioncopies) \u2192 Top10(x))",
            "SellsMoreThan(thelegendofzelda, onemillioncopies)"
        ],
        "conclusion": "FIFA 22 is made by a Japanese video game company.",
        "conclusion_fol": "\u2200x (Created(fifa22, x) \u2192 Japanese(x) \u2227 VideoGameCompany(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 14,
        "story_id": 10004,
        "context": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games in the Top 10 list are made by Japanese game companies.",
            "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "context_fol": [
            "\u2203x (Japanese(x) \u2227 VideoGameCompany(x) \u2227 Game(thelegendofzelda) \u2227 Created(x, thelegendofzelda))",
            "\u2200x \u2200y (Game(x) \u2227 InTop10(x) \u2227 Created(x, y) \u2192 Japanese(y))",
            "\u2200x (Game(x) \u2227 SellsMoreThan(x, onemillioncopies) \u2192 Top10(x))",
            "SellsMoreThan(thelegendofzelda, onemillioncopies)"
        ],
        "conclusion": "The Legend of Zelda is not in the Top 10 list.",
        "conclusion_fol": "\u00acTop10(thelegendofzelda)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 15,
        "story_id": 10005,
        "context": [
            "All squares have four sides.",
            "All four-sided things are shapes. "
        ],
        "context_fol": [
            "\u2200x (Square(x) \u2192 FourSides(x))",
            "\u2200x (FourSides(x) \u2192 IsShape(x))"
        ],
        "conclusion": "All squares are shapes.",
        "conclusion_fol": "\u2200x (Square(x) \u2192 IsShape(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 16,
        "story_id": 10006,
        "context": [
            "All rabbits are cute. ",
            "Some turtles exist. ",
            "An animal is either a rabbit or a squirrel.",
            "If something is skittish, then it is not still.",
            "All squirrels are skittish.",
            "Rock is still."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2192 Cute(x))",
            "\u2203x (Turtle(x))",
            "\u2200x (Rabbit(x) \u2228 Squirrel(x))",
            "\u2200x (Skittish(x) \u2192 \u00acStill(x))",
            "\u2200x (Squirrel(x) \u2192 Skittish(x))",
            "Still(rock)"
        ],
        "conclusion": "Rock is a turtle.",
        "conclusion_fol": "Turtle(rock)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 17,
        "story_id": 10006,
        "context": [
            "All rabbits are cute. ",
            "Some turtles exist. ",
            "An animal is either a rabbit or a squirrel.",
            "If something is skittish, then it is not still.",
            "All squirrels are skittish.",
            "Rock is still."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2192 Cute(x))",
            "\u2203x (Turtle(x))",
            "\u2200x (Rabbit(x) \u2228 Squirrel(x))",
            "\u2200x (Skittish(x) \u2192 \u00acStill(x))",
            "\u2200x (Squirrel(x) \u2192 Skittish(x))",
            "Still(rock)"
        ],
        "conclusion": "Rock is not a turtle.",
        "conclusion_fol": "\u00acTurtle(rock)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 18,
        "story_id": 10006,
        "context": [
            "All rabbits are cute. ",
            "Some turtles exist. ",
            "An animal is either a rabbit or a squirrel.",
            "If something is skittish, then it is not still.",
            "All squirrels are skittish.",
            "Rock is still."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2192 Cute(x))",
            "\u2203x (Turtle(x))",
            "\u2200x (Rabbit(x) \u2228 Squirrel(x))",
            "\u2200x (Skittish(x) \u2192 \u00acStill(x))",
            "\u2200x (Squirrel(x) \u2192 Skittish(x))",
            "Still(rock)"
        ],
        "conclusion": "Rock is a turtle or cute.",
        "conclusion_fol": "Turtle(rock) \u2228 Cute(rock)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 19,
        "story_id": 10006,
        "context": [
            "All rabbits are cute. ",
            "Some turtles exist. ",
            "An animal is either a rabbit or a squirrel.",
            "If something is skittish, then it is not still.",
            "All squirrels are skittish.",
            "Rock is still."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2192 Cute(x))",
            "\u2203x (Turtle(x))",
            "\u2200x (Rabbit(x) \u2228 Squirrel(x))",
            "\u2200x (Skittish(x) \u2192 \u00acStill(x))",
            "\u2200x (Squirrel(x) \u2192 Skittish(x))",
            "Still(rock)"
        ],
        "conclusion": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
        "conclusion_fol": "\u00ac(Turtle(rock) \u2227 Squirrel(rock)) \u2192 Cute(rock) \u2295 Skittish(rock)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 20,
        "story_id": 10006,
        "context": [
            "All rabbits are cute. ",
            "Some turtles exist. ",
            "An animal is either a rabbit or a squirrel.",
            "If something is skittish, then it is not still.",
            "All squirrels are skittish.",
            "Rock is still."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2192 Cute(x))",
            "\u2203x (Turtle(x))",
            "\u2200x (Rabbit(x) \u2228 Squirrel(x))",
            "\u2200x (Skittish(x) \u2192 \u00acStill(x))",
            "\u2200x (Squirrel(x) \u2192 Skittish(x))",
            "Still(rock)"
        ],
        "conclusion": "If Rock is cute and still, then Rock is a turtle and skittish.",
        "conclusion_fol": "Cute(rock) \u2227 Still(rock) \u2192 Turtle(rock) \u2227 Skittish(rock)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 21,
        "story_id": 10007,
        "context": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror\".",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it to Lisa."
        ],
        "context_fol": [
            "NetflixShow(strangerThings) \u2227 Popular(strangerThings)",
            "\u2200x ((NetflixShow(x) \u2227 Popular(x)) \u2192 BingeWatch(karen, x))",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2194 Download(karen, x))",
            "\u00acDownload(karen, blackMirror)",
            "NetflixShow(blackMirror)",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2192 Share(x, lisa))"
        ],
        "conclusion": "Karen will share \"Stranger Things\" to Lisa.",
        "conclusion_fol": "Share(strangerThings, lisa)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 22,
        "story_id": 10007,
        "context": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror\".",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it to Lisa."
        ],
        "context_fol": [
            "NetflixShow(strangerThings) \u2227 Popular(strangerThings)",
            "\u2200x ((NetflixShow(x) \u2227 Popular(x)) \u2192 BingeWatch(karen, x))",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2194 Download(karen, x))",
            "\u00acDownload(karen, blackMirror)",
            "NetflixShow(blackMirror)",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2192 Share(x, lisa))"
        ],
        "conclusion": "\"Black Mirror\" is popular.",
        "conclusion_fol": "Popular(blackMirror)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 23,
        "story_id": 10007,
        "context": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror\".",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it to Lisa."
        ],
        "context_fol": [
            "NetflixShow(strangerThings) \u2227 Popular(strangerThings)",
            "\u2200x ((NetflixShow(x) \u2227 Popular(x)) \u2192 BingeWatch(karen, x))",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2194 Download(karen, x))",
            "\u00acDownload(karen, blackMirror)",
            "NetflixShow(blackMirror)",
            "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2192 Share(x, lisa))"
        ],
        "conclusion": "Karen will share \"Black Mirror\" to Lisa.",
        "conclusion_fol": "Share(blackMirror, lisa)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 24,
        "story_id": 10008,
        "context": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the world's most populous national capital city.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
            "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
        ],
        "context_fol": [
            "CapitalOf(beijing, prx)",
            "MostPopulousNationalCapitalCity(beijing)",
            "InNorthernChina(beijing)",
            "Hosted(beijing, summer2008olympic) \u2227 Hosted(beijing, summer2008paralympicgames)",
            "Hosted(beijing, summerolympic) \u2227 Hosted(beijing, winterolympic) \u2227 Hosted(beijing, summerparalympicgames)  \u2227 Hosted(beijing, winterparalympicgames)",
            "\u2203x (BeijingUniversity(x) \u2227 ConsistentlyRankAmongTheBest(x))"
        ],
        "conclusion": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
        "conclusion_fol": "Hosted(beijing, summer2008olympic) \u2227 Hosted(beijing, winterolympic)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 25,
        "story_id": 10008,
        "context": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the world's most populous national capital city.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
            "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
        ],
        "context_fol": [
            "CapitalOf(beijing, prx)",
            "MostPopulousNationalCapitalCity(beijing)",
            "InNorthernChina(beijing)",
            "Hosted(beijing, summer2008olympic) \u2227 Hosted(beijing, summer2008paralympicgames)",
            "Hosted(beijing, summerolympic) \u2227 Hosted(beijing, winterolympic) \u2227 Hosted(beijing, summerparalympicgames)  \u2227 Hosted(beijing, winterparalympicgames)",
            "\u2203x (BeijingUniversity(x) \u2227 ConsistentlyRankAmongTheBest(x))"
        ],
        "conclusion": "Beijing is located in southern China.",
        "conclusion_fol": "InSouthernChina(beijing)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 26,
        "story_id": 10008,
        "context": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the world's most populous national capital city.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
            "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
        ],
        "context_fol": [
            "CapitalOf(beijing, prx)",
            "MostPopulousNationalCapitalCity(beijing)",
            "InNorthernChina(beijing)",
            "Hosted(beijing, summer2008olympic) \u2227 Hosted(beijing, summer2008paralympicgames)",
            "Hosted(beijing, summerolympic) \u2227 Hosted(beijing, winterolympic) \u2227 Hosted(beijing, summerparalympicgames)  \u2227 Hosted(beijing, winterparalympicgames)",
            "\u2203x (BeijingUniversity(x) \u2227 ConsistentlyRankAmongTheBest(x))"
        ],
        "conclusion": "Beijing is the second largest Chinese city by urban population.",
        "conclusion_fol": "SecondLargestChineseCity(beijing)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 27,
        "story_id": 10009,
        "context": [
            "All aliens are extraterrestrial.",
            "If someone is from Mars, then they are aliens.",
            "No extraterrestrial is human.",
            "Everyone from Earth is a human.",
            "Marvin cannot be from Earth and from Mars.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "context_fol": [
            "\u2200x (Alien(x) \u2192 Extraterrestrial(x))",
            "\u2200x (FromMars(x) \u2192 Alien(x))",
            "\u2200x (Extraterrestrial(x) \u2192 \u00acHuman(x))",
            "\u2200x (FromEarth(x) \u2192 Human(x))",
            "\u00acFromEarth(marvin) \u2227 \u00acFromMars(marvin)",
            "\u00acFromEarth(marvin) \u2192 Extraterrestrial(marvin)"
        ],
        "conclusion": "Marvin is an alien.",
        "conclusion_fol": "Alien(marvin)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 28,
        "story_id": 10009,
        "context": [
            "All aliens are extraterrestrial.",
            "If someone is from Mars, then they are aliens.",
            "No extraterrestrial is human.",
            "Everyone from Earth is a human.",
            "Marvin cannot be from Earth and from Mars.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "context_fol": [
            "\u2200x (Alien(x) \u2192 Extraterrestrial(x))",
            "\u2200x (FromMars(x) \u2192 Alien(x))",
            "\u2200x (Extraterrestrial(x) \u2192 \u00acHuman(x))",
            "\u2200x (FromEarth(x) \u2192 Human(x))",
            "\u00acFromEarth(marvin) \u2227 \u00acFromMars(marvin)",
            "\u00acFromEarth(marvin) \u2192 Extraterrestrial(marvin)"
        ],
        "conclusion": "Marvin is neither a human nor from Mars.",
        "conclusion_fol": "\u00acHuman(marvin) \u2227 \u00acFromMars(marvin)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 29,
        "story_id": 10009,
        "context": [
            "All aliens are extraterrestrial.",
            "If someone is from Mars, then they are aliens.",
            "No extraterrestrial is human.",
            "Everyone from Earth is a human.",
            "Marvin cannot be from Earth and from Mars.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "context_fol": [
            "\u2200x (Alien(x) \u2192 Extraterrestrial(x))",
            "\u2200x (FromMars(x) \u2192 Alien(x))",
            "\u2200x (Extraterrestrial(x) \u2192 \u00acHuman(x))",
            "\u2200x (FromEarth(x) \u2192 Human(x))",
            "\u00acFromEarth(marvin) \u2227 \u00acFromMars(marvin)",
            "\u00acFromEarth(marvin) \u2192 Extraterrestrial(marvin)"
        ],
        "conclusion": "If Marvin is not from Mars, then Marvin is a human.",
        "conclusion_fol": "\u00acFromMars(marvin) \u2192 Human(marvin)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 30,
        "story_id": 10010,
        "context": [
            "A person is either a Grand Slam champion or an Oscar-nominated actor.",
            "All people who are Grand Slam champions are professional tennis players.",
            "All Oscar-nominated actors are celebrities.",
            "All professional tennis players are athletes.",
            "If a person is a celebrity then they are well paid.",
            "If a person is an athlete then they are famous.",
            "All well-paid people live in tax havens.",
            "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
        ],
        "context_fol": [
            "\u2200x (GrandSlamChampion(x) \u2295 OscarNominatedActor(x))",
            "\u2200x (GrandSlamChampion(x) \u2192 ProfessionalTennisPlayer(x))",
            "\u2200x (OscarNominatedActor(x) \u2192 Celebrity(x))",
            "\u2200x (ProfessionalTennisPlayer(x) \u2192 Athlete(x))",
            "\u2200x (Celebrity(x) \u2192 WellPaid(x))",
            "\u2200x (Athlete(x) \u2192 Famous(x))",
            "\u2200x (WellPaid(x) \u2192 LivesInTaxHaven(x))",
            "Famous(djokovic) \u2227 Athlete(djokovic) \u2192 LivesInTaxHaven(djokovic)"
        ],
        "conclusion": "Djokovic is a Grand Slam champion.",
        "conclusion_fol": "GrandSlamChampion(djokovic)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 31,
        "story_id": 10010,
        "context": [
            "A person is either a Grand Slam champion or an Oscar-nominated actor.",
            "All people who are Grand Slam champions are professional tennis players.",
            "All Oscar-nominated actors are celebrities.",
            "All professional tennis players are athletes.",
            "If a person is a celebrity then they are well paid.",
            "If a person is an athlete then they are famous.",
            "All well-paid people live in tax havens.",
            "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
        ],
        "context_fol": [
            "\u2200x (GrandSlamChampion(x) \u2295 OscarNominatedActor(x))",
            "\u2200x (GrandSlamChampion(x) \u2192 ProfessionalTennisPlayer(x))",
            "\u2200x (OscarNominatedActor(x) \u2192 Celebrity(x))",
            "\u2200x (ProfessionalTennisPlayer(x) \u2192 Athlete(x))",
            "\u2200x (Celebrity(x) \u2192 WellPaid(x))",
            "\u2200x (Athlete(x) \u2192 Famous(x))",
            "\u2200x (WellPaid(x) \u2192 LivesInTaxHaven(x))",
            "Famous(djokovic) \u2227 Athlete(djokovic) \u2192 LivesInTaxHaven(djokovic)"
        ],
        "conclusion": "Djokovic lives in a tax haven.",
        "conclusion_fol": "LivesInTaxHaven(djokovic)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 32,
        "story_id": 10010,
        "context": [
            "A person is either a Grand Slam champion or an Oscar-nominated actor.",
            "All people who are Grand Slam champions are professional tennis players.",
            "All Oscar-nominated actors are celebrities.",
            "All professional tennis players are athletes.",
            "If a person is a celebrity then they are well paid.",
            "If a person is an athlete then they are famous.",
            "All well-paid people live in tax havens.",
            "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
        ],
        "context_fol": [
            "\u2200x (GrandSlamChampion(x) \u2295 OscarNominatedActor(x))",
            "\u2200x (GrandSlamChampion(x) \u2192 ProfessionalTennisPlayer(x))",
            "\u2200x (OscarNominatedActor(x) \u2192 Celebrity(x))",
            "\u2200x (ProfessionalTennisPlayer(x) \u2192 Athlete(x))",
            "\u2200x (Celebrity(x) \u2192 WellPaid(x))",
            "\u2200x (Athlete(x) \u2192 Famous(x))",
            "\u2200x (WellPaid(x) \u2192 LivesInTaxHaven(x))",
            "Famous(djokovic) \u2227 Athlete(djokovic) \u2192 LivesInTaxHaven(djokovic)"
        ],
        "conclusion": "Djokovic does not live in a tax haven.",
        "conclusion_fol": "\u00acLivesInTaxHaven(djokovic)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 33,
        "story_id": 10011,
        "context": [
            "Diamond Mine is a professional wrestling stable, formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "context_fol": [
            "ProfessionalWrestlingStable(diamondmine) \u2227 FormedIn(diamondmine, wwe)",
            "Leads(roderickstrong, diamondmine)",
            "Includes(diamondmine, creedbrothers) \u2227 Includes(diamondmine, ivynile)",
            "HasFeud(imperium, diamondmine)"
        ],
        "conclusion": "Roderick strong leads a professional wrestling stable.",
        "conclusion_fol": "\u2203x (Leads(roderickstrong, x) \u2227 ProfessionalWrestlingStable(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 34,
        "story_id": 10011,
        "context": [
            "Diamond Mine is a professional wrestling stable, formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "context_fol": [
            "ProfessionalWrestlingStable(diamondmine) \u2227 FormedIn(diamondmine, wwe)",
            "Leads(roderickstrong, diamondmine)",
            "Includes(diamondmine, creedbrothers) \u2227 Includes(diamondmine, ivynile)",
            "HasFeud(imperium, diamondmine)"
        ],
        "conclusion": "Roderick strong leads the Creed Brothers.",
        "conclusion_fol": "Leads(roderickstrong, creedbrothers)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 35,
        "story_id": 10011,
        "context": [
            "Diamond Mine is a professional wrestling stable, formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "context_fol": [
            "ProfessionalWrestlingStable(diamondmine) \u2227 FormedIn(diamondmine, wwe)",
            "Leads(roderickstrong, diamondmine)",
            "Includes(diamondmine, creedbrothers) \u2227 Includes(diamondmine, ivynile)",
            "HasFeud(imperium, diamondmine)"
        ],
        "conclusion": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
        "conclusion_fol": "\u2200x (ProfessionalWrestlingStable(x) \u2227 Includes(x, ivynile) \u2192 \u00acHasFeud(imperium, x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 36,
        "story_id": 10012,
        "context": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "context_fol": [
            "MusicPiece(symphony9)",
            "\u2200x \u2200y ((MusicPiece(x) \u2227 Writtenby(x, y)) \u2192 Composer(y))",
            "Writtenby(symphony9, beethoven)",
            "Premiered(viennamusicsociety, symphony9)",
            "Orchestra(viennamusicsociety)",
            "Lead(beethoven, viennamusicsociety)",
            "\u2200x \u2200y ((Orchestra(x) \u2227 Lead(y, x)) \u2192 Conductor(y))"
        ],
        "conclusion": "Beethoven is a composer.",
        "conclusion_fol": "Composer(beethoven)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 37,
        "story_id": 10012,
        "context": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "context_fol": [
            "MusicPiece(symphony9)",
            "\u2200x \u2200y ((MusicPiece(x) \u2227 Writtenby(x, y)) \u2192 Composer(y))",
            "Writtenby(symphony9, beethoven)",
            "Premiered(viennamusicsociety, symphony9)",
            "Orchestra(viennamusicsociety)",
            "Lead(beethoven, viennamusicsociety)",
            "\u2200x \u2200y ((Orchestra(x) \u2227 Lead(y, x)) \u2192 Conductor(y))"
        ],
        "conclusion": "Some orchestras premiered music pieces.",
        "conclusion_fol": "\u2203x \u2203y (Orchestra(x) \u2227 MusicPiece(y) \u2227 Premiered(x, y))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 38,
        "story_id": 10012,
        "context": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "context_fol": [
            "MusicPiece(symphony9)",
            "\u2200x \u2200y ((MusicPiece(x) \u2227 Writtenby(x, y)) \u2192 Composer(y))",
            "Writtenby(symphony9, beethoven)",
            "Premiered(viennamusicsociety, symphony9)",
            "Orchestra(viennamusicsociety)",
            "Lead(beethoven, viennamusicsociety)",
            "\u2200x \u2200y ((Orchestra(x) \u2227 Lead(y, x)) \u2192 Conductor(y))"
        ],
        "conclusion": "Beethoven is not a conductor.",
        "conclusion_fol": "\u00acConductor(beethoven)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 39,
        "story_id": 10013,
        "context": [
            "All of Zaha Hadid's design styles are timeless.",
            "No mass product design is timeless.",
            "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles are evocative.",
            "All of Kelly Wearstler's design styles are dreamy.",
            "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
        ],
        "context_fol": [
            "\u2200x (ZahaHadidDesignStyle(x) \u2192 Timeless(x))",
            "\u2200x (MassProductDesign(x) \u2192 \u00acTimeless(x))",
            "\u2200x (ZahaHadidDesignStyle(x) \u2228 KellyWearstlerDesignStyle(x)) ",
            "\u2200x (KellyWearstlerDesignStyle(x) \u2192 Evocative(x))",
            "\u2200x (KellyWearstlerDesignStyle(x) \u2192 Dreamy(x))",
            "Timeless(aDesignByMax) \u2192 MassProductDesign(aDesignByMax) \u2227 Evocative(aDesignByMax)"
        ],
        "conclusion": "A design by Max is a mass product design.",
        "conclusion_fol": "MassProductDesign(aDesignByMax)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 40,
        "story_id": 10013,
        "context": [
            "All of Zaha Hadid's design styles are timeless.",
            "No mass product design is timeless.",
            "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles are evocative.",
            "All of Kelly Wearstler's design styles are dreamy.",
            "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
        ],
        "context_fol": [
            "\u2200x (ZahaHadidDesignStyle(x) \u2192 Timeless(x))",
            "\u2200x (MassProductDesign(x) \u2192 \u00acTimeless(x))",
            "\u2200x (ZahaHadidDesignStyle(x) \u2228 KellyWearstlerDesignStyle(x)) ",
            "\u2200x (KellyWearstlerDesignStyle(x) \u2192 Evocative(x))",
            "\u2200x (KellyWearstlerDesignStyle(x) \u2192 Dreamy(x))",
            "Timeless(aDesignByMax) \u2192 MassProductDesign(aDesignByMax) \u2227 Evocative(aDesignByMax)"
        ],
        "conclusion": "A design by Max is evocative and dreamy.",
        "conclusion_fol": "Evocative(aDesignByMax) \u2227 Dreamy(aDesignByMax)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 41,
        "story_id": 10013,
        "context": [
            "All of Zaha Hadid's design styles are timeless.",
            "No mass product design is timeless.",
            "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles are evocative.",
            "All of Kelly Wearstler's design styles are dreamy.",
            "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
        ],
        "context_fol": [
            "\u2200x (ZahaHadidDesignStyle(x) \u2192 Timeless(x))",
            "\u2200x (MassProductDesign(x) \u2192 \u00acTimeless(x))",
            "\u2200x (ZahaHadidDesignStyle(x) \u2228 KellyWearstlerDesignStyle(x)) ",
            "\u2200x (KellyWearstlerDesignStyle(x) \u2192 Evocative(x))",
            "\u2200x (KellyWearstlerDesignStyle(x) \u2192 Dreamy(x))",
            "Timeless(aDesignByMax) \u2192 MassProductDesign(aDesignByMax) \u2227 Evocative(aDesignByMax)"
        ],
        "conclusion": "A design by Max is either evocative or dreamy.",
        "conclusion_fol": "Evocative(aDesignByMax) \u2295 Dreamy(aDesignByMax)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 42,
        "story_id": 10014,
        "context": [
            "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
            "Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.",
            "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
            "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
            "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
        ],
        "context_fol": [
            "\u2200x (RankedHighlyByWomenTennisAssociation(x) \u2192 AmongMostActivePlayersInMajorTennis(x))",
            "\u2200x (LostToIga\u015awi\u0105tek(x) \u2192 RankedHighlyByWomenTennisAssociation(x))",
            "\u2200x (FemaleTennisPlayersAtRolandGarros2022(x) \u2192 LostToIga\u015awi\u0105tek(x)) ",
            "\u2200x (FemaleTennisPlayersAtRolandGarros2022(x) \u2228 MaleTennisPlayersAtRolandGarros2022(x)) ",
            "\u2200x (MaleTennisPlayersAtRolandGarros2022(x) \u2192 LostToRafaelNadal(x))",
            "RankedHighlyByWomenTennisAssociation(cocoGauff) \u2228 LostToRafaelNadal(cocoGauff) \u2192 \u00acMaleTennisPlayersAtRolandGarros2022(cocoGauff)"
        ],
        "conclusion": "Coco Gauff is among the most active players in major tennis.",
        "conclusion_fol": "AmongMostActivePlayersInMajorTennis(cocoGauff)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 43,
        "story_id": 10014,
        "context": [
            "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
            "Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.",
            "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
            "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
            "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
        ],
        "context_fol": [
            "\u2200x (RankedHighlyByWomenTennisAssociation(x) \u2192 AmongMostActivePlayersInMajorTennis(x))",
            "\u2200x (LostToIga\u015awi\u0105tek(x) \u2192 RankedHighlyByWomenTennisAssociation(x))",
            "\u2200x (FemaleTennisPlayersAtRolandGarros2022(x) \u2192 LostToIga\u015awi\u0105tek(x)) ",
            "\u2200x (FemaleTennisPlayersAtRolandGarros2022(x) \u2228 MaleTennisPlayersAtRolandGarros2022(x)) ",
            "\u2200x (MaleTennisPlayersAtRolandGarros2022(x) \u2192 LostToRafaelNadal(x))",
            "RankedHighlyByWomenTennisAssociation(cocoGauff) \u2228 LostToRafaelNadal(cocoGauff) \u2192 \u00acMaleTennisPlayersAtRolandGarros2022(cocoGauff)"
        ],
        "conclusion": "Coco Gauff has lost to Rafael Nadal.",
        "conclusion_fol": "LostToRafaelNadal(cocoGauff)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 44,
        "story_id": 10014,
        "context": [
            "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
            "Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.",
            "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
            "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
            "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
        ],
        "context_fol": [
            "\u2200x (RankedHighlyByWomenTennisAssociation(x) \u2192 AmongMostActivePlayersInMajorTennis(x))",
            "\u2200x (LostToIga\u015awi\u0105tek(x) \u2192 RankedHighlyByWomenTennisAssociation(x))",
            "\u2200x (FemaleTennisPlayersAtRolandGarros2022(x) \u2192 LostToIga\u015awi\u0105tek(x)) ",
            "\u2200x (FemaleTennisPlayersAtRolandGarros2022(x) \u2228 MaleTennisPlayersAtRolandGarros2022(x)) ",
            "\u2200x (MaleTennisPlayersAtRolandGarros2022(x) \u2192 LostToRafaelNadal(x))",
            "RankedHighlyByWomenTennisAssociation(cocoGauff) \u2228 LostToRafaelNadal(cocoGauff) \u2192 \u00acMaleTennisPlayersAtRolandGarros2022(cocoGauff)"
        ],
        "conclusion": "Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.",
        "conclusion_fol": "\u00acLostToIga\u015awi\u0105tek(cocoGauff) \u2228 \u00acAmongMostActivePlayersInMajorTennis(cocoGauff)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 45,
        "story_id": 10015,
        "context": [
            "All cats are mammals.",
            "Some pets are not mammals."
        ],
        "context_fol": [
            "\u2200x (Cat(x) \u2192 Mammal(x))",
            "\u2203x (Pet(x) \u2227 \u00acMammal(x))"
        ],
        "conclusion": "No pets are cats.",
        "conclusion_fol": "\u2200x (Pet(x) \u2192 \u00acCat(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 46,
        "story_id": 10016,
        "context": [
            "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.",
            "All students who want to have a long vacation love summer the most.",
            "Emma's favorite season is summer.",
            "Mia's favorite season is not the same as Emma's. ",
            "James wants to have a long vacation."
        ],
        "context_fol": [
            "Season(spring) \u2228 Season(summer) \u2228 Season(fall) \u2228 Season(winter)",
            "\u2200x (WantlongVacation(x) \u2192 Love(x, summer))",
            "Love(emma, summer)",
            "\u00acLove(mia, emma)",
            "WantlongVacation(james)"
        ],
        "conclusion": "James's favorite season is summer.",
        "conclusion_fol": "Love(james, summer)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 47,
        "story_id": 10016,
        "context": [
            "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.",
            "All students who want to have a long vacation love summer the most.",
            "Emma's favorite season is summer.",
            "Mia's favorite season is not the same as Emma's. ",
            "James wants to have a long vacation."
        ],
        "context_fol": [
            "Season(spring) \u2228 Season(summer) \u2228 Season(fall) \u2228 Season(winter)",
            "\u2200x (WantlongVacation(x) \u2192 Love(x, summer))",
            "Love(emma, summer)",
            "\u00acLove(mia, emma)",
            "WantlongVacation(james)"
        ],
        "conclusion": "James's favorite season is fall.",
        "conclusion_fol": "Love(james, fall)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 48,
        "story_id": 10016,
        "context": [
            "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.",
            "All students who want to have a long vacation love summer the most.",
            "Emma's favorite season is summer.",
            "Mia's favorite season is not the same as Emma's. ",
            "James wants to have a long vacation."
        ],
        "context_fol": [
            "Season(spring) \u2228 Season(summer) \u2228 Season(fall) \u2228 Season(winter)",
            "\u2200x (WantlongVacation(x) \u2192 Love(x, summer))",
            "Love(emma, summer)",
            "\u00acLove(mia, emma)",
            "WantlongVacation(james)"
        ],
        "conclusion": "Mia's favorite season is spring.",
        "conclusion_fol": "Love(mia, spring)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 49,
        "story_id": 10017,
        "context": [
            "No digital media are analog.",
            "Every printed text is analog.",
            "All streaming services are digital.",
            "If an object is a hardcover book then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "context_fol": [
            "\u2200x (Digital(x) \u2192 \u00acAnalog(x))",
            "\u2200x (PrintedText(x) \u2192 Analog(x))",
            "\u2200x (StreamingService(x) \u2192 Digital(x))",
            "\u2200x (HardcoverBook(x) \u2192 PrintedText(x))",
            "StreamingService(y1984) \u2192 HardcoverBook(y1984)"
        ],
        "conclusion": "1984 is printed text.",
        "conclusion_fol": "PrintedText(y1984)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 50,
        "story_id": 10017,
        "context": [
            "No digital media are analog.",
            "Every printed text is analog.",
            "All streaming services are digital.",
            "If an object is a hardcover book then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "context_fol": [
            "\u2200x (Digital(x) \u2192 \u00acAnalog(x))",
            "\u2200x (PrintedText(x) \u2192 Analog(x))",
            "\u2200x (StreamingService(x) \u2192 Digital(x))",
            "\u2200x (HardcoverBook(x) \u2192 PrintedText(x))",
            "StreamingService(y1984) \u2192 HardcoverBook(y1984)"
        ],
        "conclusion": "1984 is a streaming service.",
        "conclusion_fol": "StreamingService(y1984)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 51,
        "story_id": 10017,
        "context": [
            "No digital media are analog.",
            "Every printed text is analog.",
            "All streaming services are digital.",
            "If an object is a hardcover book then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "context_fol": [
            "\u2200x (Digital(x) \u2192 \u00acAnalog(x))",
            "\u2200x (PrintedText(x) \u2192 Analog(x))",
            "\u2200x (StreamingService(x) \u2192 Digital(x))",
            "\u2200x (HardcoverBook(x) \u2192 PrintedText(x))",
            "StreamingService(y1984) \u2192 HardcoverBook(y1984)"
        ],
        "conclusion": "1984 is not a streaming service.",
        "conclusion_fol": "\u00acStreamingService(y1984)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 52,
        "story_id": 10018,
        "context": [
            "All Romance languages are Indo-European languages.",
            "The Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "context_fol": [
            "\u2200x (RomanceLanguage(x) \u2192 IndoEuropeanLanguage(x))",
            "\u2200x (RomanceLanguage(x) \u2192 MemberOf(x, romancefamily))",
            "\u2200x \u2200y \u2200z ((MemberOf(x, z) \u2227 MemberOf(y, z)) \u2192 (Related(x, y) \u2227 Related(y, x)))",
            "RomanceLanguage(french) \u2227 RomanceLanguage(spanish)",
            "Related(german, spanish)",
            "\u2200x (\u00acRelated(basque, x))"
        ],
        "conclusion": "Basque is a Romance language.",
        "conclusion_fol": "RomanceLanguage(basque)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 53,
        "story_id": 10018,
        "context": [
            "All Romance languages are Indo-European languages.",
            "The Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "context_fol": [
            "\u2200x (RomanceLanguage(x) \u2192 IndoEuropeanLanguage(x))",
            "\u2200x (RomanceLanguage(x) \u2192 MemberOf(x, romancefamily))",
            "\u2200x \u2200y \u2200z ((MemberOf(x, z) \u2227 MemberOf(y, z)) \u2192 (Related(x, y) \u2227 Related(y, x)))",
            "RomanceLanguage(french) \u2227 RomanceLanguage(spanish)",
            "Related(german, spanish)",
            "\u2200x (\u00acRelated(basque, x))"
        ],
        "conclusion": "German is a Romance language.",
        "conclusion_fol": "RomanceLanguage(german)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 54,
        "story_id": 10018,
        "context": [
            "All Romance languages are Indo-European languages.",
            "The Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "context_fol": [
            "\u2200x (RomanceLanguage(x) \u2192 IndoEuropeanLanguage(x))",
            "\u2200x (RomanceLanguage(x) \u2192 MemberOf(x, romancefamily))",
            "\u2200x \u2200y \u2200z ((MemberOf(x, z) \u2227 MemberOf(y, z)) \u2192 (Related(x, y) \u2227 Related(y, x)))",
            "RomanceLanguage(french) \u2227 RomanceLanguage(spanish)",
            "Related(german, spanish)",
            "\u2200x (\u00acRelated(basque, x))"
        ],
        "conclusion": "French is an Indo-European language.",
        "conclusion_fol": "IndoEuropeanLanguage(french)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 55,
        "story_id": 10019,
        "context": [
            "Robert Lewandowski is a striker.",
            "[BG] Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "[BG] If a player left a team they no longer play for that team."
        ],
        "context_fol": [
            "IsStriker(robertLewandowski)",
            "\u2200x (IsStriker(x) \u2192 IsSoccerPlayer(x))",
            "LeftTeam(robertLewandowski, bayernMunchen)",
            "\u2200x \u2200y (LeftTeam(x, y) \u2192 \u00acPlaysForTeam(x, y))"
        ],
        "conclusion": "Robert Lewandowski is a soccer player.",
        "conclusion_fol": "IsSoccerPlayer(robertLewandowski)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 56,
        "story_id": 10019,
        "context": [
            "Robert Lewandowski is a striker.",
            "[BG] Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "[BG] If a player left a team they no longer play for that team."
        ],
        "context_fol": [
            "IsStriker(robertLewandowski)",
            "\u2200x (IsStriker(x) \u2192 IsSoccerPlayer(x))",
            "LeftTeam(robertLewandowski, bayernMunchen)",
            "\u2200x \u2200y (LeftTeam(x, y) \u2192 \u00acPlaysForTeam(x, y))"
        ],
        "conclusion": "Robert Lewandowski plays for Bayern Munchen.",
        "conclusion_fol": "PlaysForTeam(robertLewandowski, bayernMunchen)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 57,
        "story_id": 10019,
        "context": [
            "Robert Lewandowski is a striker.",
            "[BG] Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "[BG] If a player left a team they no longer play for that team."
        ],
        "context_fol": [
            "IsStriker(robertLewandowski)",
            "\u2200x (IsStriker(x) \u2192 IsSoccerPlayer(x))",
            "LeftTeam(robertLewandowski, bayernMunchen)",
            "\u2200x \u2200y (LeftTeam(x, y) \u2192 \u00acPlaysForTeam(x, y))"
        ],
        "conclusion": "Robert Lewandowski is a star.",
        "conclusion_fol": "IsSoccerStar(robertLewandowski)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 58,
        "story_id": 10020,
        "context": [
            "Billings is a city in Montana.",
            "Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state.",
            "The city of Pierre is not in Montana.",
            "Any city in Butte is not in Pierre."
        ],
        "context_fol": [
            "CityIn(billings, montana)",
            "CityIn(butte, montana) \u2227 CityIn(helena, montana) \u2227 CityIn(missoula, montana)",
            "\u2203x (CityIn(whitesulphursprings, x) \u2227 CityIn(butte, x))",
            "\u00acCityIn(pierre, montana)",
            "\u2200x (CityIn(butte, x) \u2192 \u00acCityIn(pierre, x))"
        ],
        "conclusion": "Butte and Pierre are in the same state.",
        "conclusion_fol": "\u2203x (CityIn(butte, x) \u2227 CityIn(pierre, x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 59,
        "story_id": 10020,
        "context": [
            "Billings is a city in Montana.",
            "Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state.",
            "The city of Pierre is not in Montana.",
            "Any city in Butte is not in Pierre."
        ],
        "context_fol": [
            "CityIn(billings, montana)",
            "CityIn(butte, montana) \u2227 CityIn(helena, montana) \u2227 CityIn(missoula, montana)",
            "\u2203x (CityIn(whitesulphursprings, x) \u2227 CityIn(butte, x))",
            "\u00acCityIn(pierre, montana)",
            "\u2200x (CityIn(butte, x) \u2192 \u00acCityIn(pierre, x))"
        ],
        "conclusion": "Pierre and Bismarck are in the same state.",
        "conclusion_fol": "\u2203x (CityIn(pierre, x) \u2227 CityIn(bismarck, x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 60,
        "story_id": 10020,
        "context": [
            "Billings is a city in Montana.",
            "Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state.",
            "The city of Pierre is not in Montana.",
            "Any city in Butte is not in Pierre."
        ],
        "context_fol": [
            "CityIn(billings, montana)",
            "CityIn(butte, montana) \u2227 CityIn(helena, montana) \u2227 CityIn(missoula, montana)",
            "\u2203x (CityIn(whitesulphursprings, x) \u2227 CityIn(butte, x))",
            "\u00acCityIn(pierre, montana)",
            "\u2200x (CityIn(butte, x) \u2192 \u00acCityIn(pierre, x))"
        ],
        "conclusion": "Montana is home to the city of Missoula.",
        "conclusion_fol": "CityIn(missoula, montana)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 61,
        "story_id": 10021,
        "context": [
            "International students in US have either an F1 visa or a J1 visa.",
            "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
            "Mike is an international student.",
            "Mike needs to apply for CPT if he wants to work in the US."
        ],
        "context_fol": [
            "\u2200x (InternationalStudent(x) \u2192 F1(x) \u2295 J1(x))",
            "\u2200x (InternationalStudent(x) \u2227 F1(x) \u2227 WantWorkInUS(x) \u2192 Apply(x, cpt) \u2228 Apply(x, opt))",
            "InternationalStudent(mike)",
            "WantWorkInUS(mike) \u2192 Apply(mike, cpt)"
        ],
        "conclusion": "Mike has an F1 visa.",
        "conclusion_fol": "F1(mike)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 62,
        "story_id": 10021,
        "context": [
            "International students in US have either an F1 visa or a J1 visa.",
            "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
            "Mike is an international student.",
            "Mike needs to apply for CPT if he wants to work in the US."
        ],
        "context_fol": [
            "\u2200x (InternationalStudent(x) \u2192 F1(x) \u2295 J1(x))",
            "\u2200x (InternationalStudent(x) \u2227 F1(x) \u2227 WantWorkInUS(x) \u2192 Apply(x, cpt) \u2228 Apply(x, opt))",
            "InternationalStudent(mike)",
            "WantWorkInUS(mike) \u2192 Apply(mike, cpt)"
        ],
        "conclusion": "Mike has a J1 visa.",
        "conclusion_fol": "J1(mike)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 63,
        "story_id": 10022,
        "context": [
            "All cows are bovines.",
            "Some pets are cows.",
            "If something is a bovine, then it is domesticated.",
            "No domesticated animals are alligators.",
            "Ted is an aligator."
        ],
        "context_fol": [
            "\u2200x (Cow(x) \u2192 Bovine(x))",
            "\u2203x (Pet(x) \u2227 Cow(x))",
            "\u2200x (Bovine(x) \u2192 Domesticated(x))",
            "\u2200x (Domesticated(x) \u2192 \u00acAligator(x))",
            "Aligator(ted)"
        ],
        "conclusion": "Ted is a pet.",
        "conclusion_fol": "Pet(ted)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 64,
        "story_id": 10022,
        "context": [
            "All cows are bovines.",
            "Some pets are cows.",
            "If something is a bovine, then it is domesticated.",
            "No domesticated animals are alligators.",
            "Ted is an aligator."
        ],
        "context_fol": [
            "\u2200x (Cow(x) \u2192 Bovine(x))",
            "\u2203x (Pet(x) \u2227 Cow(x))",
            "\u2200x (Bovine(x) \u2192 Domesticated(x))",
            "\u2200x (Domesticated(x) \u2192 \u00acAligator(x))",
            "Aligator(ted)"
        ],
        "conclusion": "Ted is a pet and a cow.",
        "conclusion_fol": "Pet(ted) \u2227 Cow(ted)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 65,
        "story_id": 10022,
        "context": [
            "All cows are bovines.",
            "Some pets are cows.",
            "If something is a bovine, then it is domesticated.",
            "No domesticated animals are alligators.",
            "Ted is an aligator."
        ],
        "context_fol": [
            "\u2200x (Cow(x) \u2192 Bovine(x))",
            "\u2203x (Pet(x) \u2227 Cow(x))",
            "\u2200x (Bovine(x) \u2192 Domesticated(x))",
            "\u2200x (Domesticated(x) \u2192 \u00acAligator(x))",
            "Aligator(ted)"
        ],
        "conclusion": "If Ted is a cow, then Ted is not a pet.",
        "conclusion_fol": "Cow(ted) \u2192 \u00acPet(ted)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 66,
        "story_id": 10023,
        "context": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "context_fol": [
            "PrivateIvyLeagueResearchUniversity(yale)",
            "MovedTo(yale, newhaven) \u2227 MovedIn(yale, y1716)",
            "ValuedAt(yalesendowment, y42.3billion)",
            "\u2203x (OrganizedInto(yale, x) \u2227 ConstituentCollegesandSchools(x) \u2227 ((ResidentialCollege(x) \u2295 GraduateSchool(x)) \u2295 ProfessionalSchool(x)))",
            "ResidentialCollege(benjaminfranklincollege) \u2227 AtYale(benjaminfranklincollege) \u2227 ResidentialCollege(berkeleycollege) \u2227 AtYale(berkeleycollege) \u2227 ResidentialCollege(branfordcollege) \u2227 AtYale(branfordcollege) \u2227 ResidentialCollege(davenportcollege) \u2227 AtYale(davenportcollege) \u2227 ResidentialCollege(ezrastilescollege) \u2227 AtYale(ezrastilescollege) \u2227 ResidentialCollege(gracehoppercollege) \u2227 AtYale(gracehoppercollege) \u2227 ResidentialCollege(jonathanedwardscollege) \u2227 AtYale(jonathanedwardscollege) \u2227 ResidentialCollege(morsecollege) \u2227 AtYale(morsecollege) \u2227 ResidentialCollege(paulimurraycollege) \u2227 AtYale(paulimurraycollege) \u2227 ResidentialCollege(piersoncollege) \u2227 AtYale(piersoncollege) \u2227 ResidentialCollege(saybrookcollege) \u2227 AtYale(saybrookcollege) \u2227 ResidentialCollege(sillimancollege) \u2227 AtYale(sillimancollege) \u2227 ResidentialCollege(timothydwightcollege) \u2227 AtYale(timothydwightcollege) \u2227 ResidentialCollege(trumbullcollege) \u2227 AtYale(trumbullcollege)"
        ],
        "conclusion": "A private Ivy League research university moved to New Haven.",
        "conclusion_fol": "\u2203x (PrivateIvyLeagueResearchUniversity(x) \u2227 MovedTo(x, newhaven))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 67,
        "story_id": 10023,
        "context": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "context_fol": [
            "PrivateIvyLeagueResearchUniversity(yale)",
            "MovedTo(yale, newhaven) \u2227 MovedIn(yale, y1716)",
            "ValuedAt(yalesendowment, y42.3billion)",
            "\u2203x (OrganizedInto(yale, x) \u2227 ConstituentCollegesandSchools(x) \u2227 ((ResidentialCollege(x) \u2295 GraduateSchool(x)) \u2295 ProfessionalSchool(x)))",
            "ResidentialCollege(benjaminfranklincollege) \u2227 AtYale(benjaminfranklincollege) \u2227 ResidentialCollege(berkeleycollege) \u2227 AtYale(berkeleycollege) \u2227 ResidentialCollege(branfordcollege) \u2227 AtYale(branfordcollege) \u2227 ResidentialCollege(davenportcollege) \u2227 AtYale(davenportcollege) \u2227 ResidentialCollege(ezrastilescollege) \u2227 AtYale(ezrastilescollege) \u2227 ResidentialCollege(gracehoppercollege) \u2227 AtYale(gracehoppercollege) \u2227 ResidentialCollege(jonathanedwardscollege) \u2227 AtYale(jonathanedwardscollege) \u2227 ResidentialCollege(morsecollege) \u2227 AtYale(morsecollege) \u2227 ResidentialCollege(paulimurraycollege) \u2227 AtYale(paulimurraycollege) \u2227 ResidentialCollege(piersoncollege) \u2227 AtYale(piersoncollege) \u2227 ResidentialCollege(saybrookcollege) \u2227 AtYale(saybrookcollege) \u2227 ResidentialCollege(sillimancollege) \u2227 AtYale(sillimancollege) \u2227 ResidentialCollege(timothydwightcollege) \u2227 AtYale(timothydwightcollege) \u2227 ResidentialCollege(trumbullcollege) \u2227 AtYale(trumbullcollege)"
        ],
        "conclusion": "Yale University has the largest university endowment of any educational institution.",
        "conclusion_fol": "LargestUniversityEndowmentOf(yale, anyeducationalinstitution)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 68,
        "story_id": 10023,
        "context": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "context_fol": [
            "PrivateIvyLeagueResearchUniversity(yale)",
            "MovedTo(yale, newhaven) \u2227 MovedIn(yale, y1716)",
            "ValuedAt(yalesendowment, y42.3billion)",
            "\u2203x (OrganizedInto(yale, x) \u2227 ConstituentCollegesandSchools(x) \u2227 ((ResidentialCollege(x) \u2295 GraduateSchool(x)) \u2295 ProfessionalSchool(x)))",
            "ResidentialCollege(benjaminfranklincollege) \u2227 AtYale(benjaminfranklincollege) \u2227 ResidentialCollege(berkeleycollege) \u2227 AtYale(berkeleycollege) \u2227 ResidentialCollege(branfordcollege) \u2227 AtYale(branfordcollege) \u2227 ResidentialCollege(davenportcollege) \u2227 AtYale(davenportcollege) \u2227 ResidentialCollege(ezrastilescollege) \u2227 AtYale(ezrastilescollege) \u2227 ResidentialCollege(gracehoppercollege) \u2227 AtYale(gracehoppercollege) \u2227 ResidentialCollege(jonathanedwardscollege) \u2227 AtYale(jonathanedwardscollege) \u2227 ResidentialCollege(morsecollege) \u2227 AtYale(morsecollege) \u2227 ResidentialCollege(paulimurraycollege) \u2227 AtYale(paulimurraycollege) \u2227 ResidentialCollege(piersoncollege) \u2227 AtYale(piersoncollege) \u2227 ResidentialCollege(saybrookcollege) \u2227 AtYale(saybrookcollege) \u2227 ResidentialCollege(sillimancollege) \u2227 AtYale(sillimancollege) \u2227 ResidentialCollege(timothydwightcollege) \u2227 AtYale(timothydwightcollege) \u2227 ResidentialCollege(trumbullcollege) \u2227 AtYale(trumbullcollege)"
        ],
        "conclusion": "Pierson College is a residential college at Yale.",
        "conclusion_fol": "ResidentialCollege(piersoncollege) \u2227 AtYale(piersoncollege)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 69,
        "story_id": 10024,
        "context": [
            "Badults is a British Sitcom series, starring members of Pappy's.",
            "Badults piloted in July 2013 on BBC Three.",
            "The Working title \"The Secret Dude Society\" was used for Badults.",
            "Andrew Collins was the script editor for Badults"
        ],
        "context_fol": [
            "\u2203x (MemberOf(x, pappys) \u2227 BritishSitcom(badults) \u2227 Series(badults) \u2227 Starring(badults, x))",
            "PilotedIn(badults, july2013) \u2227 PilotedOn(badults, bbcthree)",
            "WorkingTitle(thesecretdudesociety, badults)",
            "ScriptEditor(andrewcollins) \u2227 ScriptEditorFor(andrewcollins, badults)"
        ],
        "conclusion": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
        "conclusion_fol": "\u2203x (ScriptEditorFor(andrewcollins, x) \u2227 Series(x) \u2227 WorkingTitle(thesecretdudesociety, x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 70,
        "story_id": 10024,
        "context": [
            "Badults is a British Sitcom series, starring members of Pappy's.",
            "Badults piloted in July 2013 on BBC Three.",
            "The Working title \"The Secret Dude Society\" was used for Badults.",
            "Andrew Collins was the script editor for Badults"
        ],
        "context_fol": [
            "\u2203x (MemberOf(x, pappys) \u2227 BritishSitcom(badults) \u2227 Series(badults) \u2227 Starring(badults, x))",
            "PilotedIn(badults, july2013) \u2227 PilotedOn(badults, bbcthree)",
            "WorkingTitle(thesecretdudesociety, badults)",
            "ScriptEditor(andrewcollins) \u2227 ScriptEditorFor(andrewcollins, badults)"
        ],
        "conclusion": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
        "conclusion_fol": "\u2200x \u2200y (MemberOf(x, pappys) \u2227 Starring(y, x) \u2192 \u00ac(PilotedOn(y, bbctwo) \u2228 PilotedOn(y, bbcthree)))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 71,
        "story_id": 10025,
        "context": [
            "All growth companies\u2019 stocks are volatile.",
            "If the stock price is volatile, then it is not suitable for a retirement fund.",
            "Some companies\u2019 stocks are growth companies\u2019 stocks.",
            "All mature companies\u2019 stocks are suitable for a retirement fund.",
            "KO is a mature company\u2019s stock."
        ],
        "context_fol": [
            "\u2200x (GrowthCompanies\u2019Stocks(x) \u2192 PriceVolatile(x))",
            " \u2200x (PriceVolatile(x) \u2192 \u00acSuitableForRetirementRund(x)) ",
            " \u2203x (Companies\u2019Stocks(x) \u2227 GrowthCompanies\u2019Stocks(x))",
            " \u2200x (MatureCompanies\u2019Stocks(x) \u2192 SuitableForRetirementRund(x))",
            " MatureCompanies\u2019Stocks(kO)"
        ],
        "conclusion": "KO is a company stock.",
        "conclusion_fol": "Companies\u2019Stocks(kO)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 72,
        "story_id": 10025,
        "context": [
            "All growth companies\u2019 stocks are volatile.",
            "If the stock price is volatile, then it is not suitable for a retirement fund.",
            "Some companies\u2019 stocks are growth companies\u2019 stocks.",
            "All mature companies\u2019 stocks are suitable for a retirement fund.",
            "KO is a mature company\u2019s stock."
        ],
        "context_fol": [
            "\u2200x (GrowthCompanies\u2019Stocks(x) \u2192 PriceVolatile(x))",
            " \u2200x (PriceVolatile(x) \u2192 \u00acSuitableForRetirementRund(x)) ",
            " \u2203x (Companies\u2019Stocks(x) \u2227 GrowthCompanies\u2019Stocks(x))",
            " \u2200x (MatureCompanies\u2019Stocks(x) \u2192 SuitableForRetirementRund(x))",
            " MatureCompanies\u2019Stocks(kO)"
        ],
        "conclusion": "KO is a company stock and a growth company\u2019s stock.",
        "conclusion_fol": "Companies\u2019Stocks(kO) \u2227 GrowthCompanies\u2019Stocks(kO)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 73,
        "story_id": 10025,
        "context": [
            "All growth companies\u2019 stocks are volatile.",
            "If the stock price is volatile, then it is not suitable for a retirement fund.",
            "Some companies\u2019 stocks are growth companies\u2019 stocks.",
            "All mature companies\u2019 stocks are suitable for a retirement fund.",
            "KO is a mature company\u2019s stock."
        ],
        "context_fol": [
            "\u2200x (GrowthCompanies\u2019Stocks(x) \u2192 PriceVolatile(x))",
            " \u2200x (PriceVolatile(x) \u2192 \u00acSuitableForRetirementRund(x)) ",
            " \u2203x (Companies\u2019Stocks(x) \u2227 GrowthCompanies\u2019Stocks(x))",
            " \u2200x (MatureCompanies\u2019Stocks(x) \u2192 SuitableForRetirementRund(x))",
            " MatureCompanies\u2019Stocks(kO)"
        ],
        "conclusion": "If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.",
        "conclusion_fol": "GrowthCompanies\u2019Stocks(kO) \u2228 PriceVolatile(kO) \u2192 \u00acCompanies\u2019Stocks(kO) \u2228 \u00acPriceVolatile(kO)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 74,
        "story_id": 10026,
        "context": [
            "All vehicle registration plates in Istanbul begin with the number 34.",
            "Plates that do not begin with the number 34 are not from Istanbul. ",
            "Joe's vehicle registration plate is from Istanbul. ",
            "Tom's license plate begins with the number 35. ",
            "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
        ],
        "context_fol": [
            "\u2200x (Vehicleregistrationplate(x, istanbul) \u2192 Beginwith(x, number34))",
            "\u2200x (\u00acBeginwith(x, number34) \u2192 \u00acFromIstanbul(x))",
            "Vehicleregistrationplate(joe, istanbul)",
            "Beginwith(tom, number35)",
            "\u2200x (Beginwith(x, number35) \u2192 \u00acBeginwith(x, number34))"
        ],
        "conclusion": "Joe's license plate begins with the number 34.",
        "conclusion_fol": "Beginwith(joe, number34)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 75,
        "story_id": 10026,
        "context": [
            "All vehicle registration plates in Istanbul begin with the number 34.",
            "Plates that do not begin with the number 34 are not from Istanbul. ",
            "Joe's vehicle registration plate is from Istanbul. ",
            "Tom's license plate begins with the number 35. ",
            "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
        ],
        "context_fol": [
            "\u2200x (Vehicleregistrationplate(x, istanbul) \u2192 Beginwith(x, number34))",
            "\u2200x (\u00acBeginwith(x, number34) \u2192 \u00acFromIstanbul(x))",
            "Vehicleregistrationplate(joe, istanbul)",
            "Beginwith(tom, number35)",
            "\u2200x (Beginwith(x, number35) \u2192 \u00acBeginwith(x, number34))"
        ],
        "conclusion": "Tom's license plate is from Istanbul.",
        "conclusion_fol": "Vehicleregistrationplate(tom, istanbul)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 76,
        "story_id": 10027,
        "context": [
            "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people order takeout frequently in college, then they work in student jobs on campus.",
            "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "context_fol": [
            "\u2200x (StudentJobs(x) \u2192 Tuition(x))",
            "\u2200x (Takeout(x) \u2192 StudentJobs(x))",
            "\u2200x (Takeout(x) \u2228 DiningHall(x))",
            "\u2200x (DiningHall(x) \u2192 NotPicky(x))",
            "\u2200x (DiningHall(x) \u2192 Eating(x))",
            "StudentJobs(mary) \u2227 Tuition(mary) \u2192 \u00ac(NotPicky(mary) \u2228 Tuition(mary))"
        ],
        "conclusion": "Mary needs to earn money to help pay for her college tuition.",
        "conclusion_fol": "Tuition(mary)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 77,
        "story_id": 10027,
        "context": [
            "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people order takeout frequently in college, then they work in student jobs on campus.",
            "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "context_fol": [
            "\u2200x (StudentJobs(x) \u2192 Tuition(x))",
            "\u2200x (Takeout(x) \u2192 StudentJobs(x))",
            "\u2200x (Takeout(x) \u2228 DiningHall(x))",
            "\u2200x (DiningHall(x) \u2192 NotPicky(x))",
            "\u2200x (DiningHall(x) \u2192 Eating(x))",
            "StudentJobs(mary) \u2227 Tuition(mary) \u2192 \u00ac(NotPicky(mary) \u2228 Tuition(mary))"
        ],
        "conclusion": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "conclusion_fol": "NotPicky(mary) \u2227 Eating(mary)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 78,
        "story_id": 10027,
        "context": [
            "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people order takeout frequently in college, then they work in student jobs on campus.",
            "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "context_fol": [
            "\u2200x (StudentJobs(x) \u2192 Tuition(x))",
            "\u2200x (Takeout(x) \u2192 StudentJobs(x))",
            "\u2200x (Takeout(x) \u2228 DiningHall(x))",
            "\u2200x (DiningHall(x) \u2192 NotPicky(x))",
            "\u2200x (DiningHall(x) \u2192 Eating(x))",
            "StudentJobs(mary) \u2227 Tuition(mary) \u2192 \u00ac(NotPicky(mary) \u2228 Tuition(mary))"
        ],
        "conclusion": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "conclusion_fol": "NotPicky(mary) \u2295 Eating(mary)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 79,
        "story_id": 10028,
        "context": [
            "No bakery is spicy.",
            "All cupcakes are bakeries.",
            "All hotpots are spicy.",
            "All products of Baked by Melissa are cupcakes.",
            "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
        ],
        "context_fol": [
            "\u2200x (Bakery(x) \u2192 \u00acSpicy(x))",
            "\u2200x (Cupcakes(x) \u2192 Bakery(x))",
            "\u2200x (Hotpot(x) \u2192 Spicy(x))",
            "\u2200x (ProductsOfBakedByMelissa(x) \u2192 Cupcakes(x))",
            "Spicy(driedThaiChilies) \u2228 Bakery(driedThaiChilies) \u2192 Hotpot(driedThaiChilies) \u2228 Spicy(driedThaiChilies)"
        ],
        "conclusion": "Dried Thai chilies are a product of Baked by Melissa.",
        "conclusion_fol": "ProductsOfBakedByMelissa(driedThaiChilies)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 80,
        "story_id": 10028,
        "context": [
            "No bakery is spicy.",
            "All cupcakes are bakeries.",
            "All hotpots are spicy.",
            "All products of Baked by Melissa are cupcakes.",
            "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
        ],
        "context_fol": [
            "\u2200x (Bakery(x) \u2192 \u00acSpicy(x))",
            "\u2200x (Cupcakes(x) \u2192 Bakery(x))",
            "\u2200x (Hotpot(x) \u2192 Spicy(x))",
            "\u2200x (ProductsOfBakedByMelissa(x) \u2192 Cupcakes(x))",
            "Spicy(driedThaiChilies) \u2228 Bakery(driedThaiChilies) \u2192 Hotpot(driedThaiChilies) \u2228 Spicy(driedThaiChilies)"
        ],
        "conclusion": "Dried Thai chilies are not a product of Baked by Melissa.",
        "conclusion_fol": "\u00acProductsOfBakedByMelissa(driedThaiChilies)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 81,
        "story_id": 10028,
        "context": [
            "No bakery is spicy.",
            "All cupcakes are bakeries.",
            "All hotpots are spicy.",
            "All products of Baked by Melissa are cupcakes.",
            "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
        ],
        "context_fol": [
            "\u2200x (Bakery(x) \u2192 \u00acSpicy(x))",
            "\u2200x (Cupcakes(x) \u2192 Bakery(x))",
            "\u2200x (Hotpot(x) \u2192 Spicy(x))",
            "\u2200x (ProductsOfBakedByMelissa(x) \u2192 Cupcakes(x))",
            "Spicy(driedThaiChilies) \u2228 Bakery(driedThaiChilies) \u2192 Hotpot(driedThaiChilies) \u2228 Spicy(driedThaiChilies)"
        ],
        "conclusion": "Dried Thai chilies are a hotpot.",
        "conclusion_fol": "Hotpot(driedThaiChilies)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 82,
        "story_id": 10028,
        "context": [
            "No bakery is spicy.",
            "All cupcakes are bakeries.",
            "All hotpots are spicy.",
            "All products of Baked by Melissa are cupcakes.",
            "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
        ],
        "context_fol": [
            "\u2200x (Bakery(x) \u2192 \u00acSpicy(x))",
            "\u2200x (Cupcakes(x) \u2192 Bakery(x))",
            "\u2200x (Hotpot(x) \u2192 Spicy(x))",
            "\u2200x (ProductsOfBakedByMelissa(x) \u2192 Cupcakes(x))",
            "Spicy(driedThaiChilies) \u2228 Bakery(driedThaiChilies) \u2192 Hotpot(driedThaiChilies) \u2228 Spicy(driedThaiChilies)"
        ],
        "conclusion": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
        "conclusion_fol": "\u00acProductsOfBakedByMelissa(driedThaiChilies) \u2227 \u00acBakery(driedThaiChilies)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 83,
        "story_id": 10028,
        "context": [
            "No bakery is spicy.",
            "All cupcakes are bakeries.",
            "All hotpots are spicy.",
            "All products of Baked by Melissa are cupcakes.",
            "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
        ],
        "context_fol": [
            "\u2200x (Bakery(x) \u2192 \u00acSpicy(x))",
            "\u2200x (Cupcakes(x) \u2192 Bakery(x))",
            "\u2200x (Hotpot(x) \u2192 Spicy(x))",
            "\u2200x (ProductsOfBakedByMelissa(x) \u2192 Cupcakes(x))",
            "Spicy(driedThaiChilies) \u2228 Bakery(driedThaiChilies) \u2192 Hotpot(driedThaiChilies) \u2228 Spicy(driedThaiChilies)"
        ],
        "conclusion": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
        "conclusion_fol": "Cupcake(driedThaiChilies) \u2227 ProductsOfBakedByMelissa(driedThaiChilies)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 84,
        "story_id": 10029,
        "context": [
            "If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.",
            "All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than 9.",
            "Subway has a rating greater than 9 or is popular among local residents."
        ],
        "context_fol": [
            "\u2200x (YelpRecommendation(x) \u2192 \u00acNegativeReview(x))",
            "\u2200x (RatingGreaterThan9(x) \u2192 YelpRecommendation(x))",
            "\u2203x (NoTakeOutService(x) \u2227 NegativeReview(x))",
            "\u2200x (PopularAmongLocalResidents(x) \u2192 RatingGreaterThan9(x))",
            "RatingGreaterThan9(subway) \u2295 PopularAmongLocalResidents(subway)"
        ],
        "conclusion": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
        "conclusion_fol": "NoTakeOutService(subway)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 85,
        "story_id": 10029,
        "context": [
            "If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.",
            "All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than 9.",
            "Subway has a rating greater than 9 or is popular among local residents."
        ],
        "context_fol": [
            "\u2200x (YelpRecommendation(x) \u2192 \u00acNegativeReview(x))",
            "\u2200x (RatingGreaterThan9(x) \u2192 YelpRecommendation(x))",
            "\u2203x (NoTakeOutService(x) \u2227 NegativeReview(x))",
            "\u2200x (PopularAmongLocalResidents(x) \u2192 RatingGreaterThan9(x))",
            "RatingGreaterThan9(subway) \u2295 PopularAmongLocalResidents(subway)"
        ],
        "conclusion": "Subway provides take-out service and does not receive many negative reviews.",
        "conclusion_fol": "\u00ac(NoTakeOutService(subway) \u2227 NegativeReview(subway))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 86,
        "story_id": 10029,
        "context": [
            "If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.",
            "All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than 9.",
            "Subway has a rating greater than 9 or is popular among local residents."
        ],
        "context_fol": [
            "\u2200x (YelpRecommendation(x) \u2192 \u00acNegativeReview(x))",
            "\u2200x (RatingGreaterThan9(x) \u2192 YelpRecommendation(x))",
            "\u2203x (NoTakeOutService(x) \u2227 NegativeReview(x))",
            "\u2200x (PopularAmongLocalResidents(x) \u2192 RatingGreaterThan9(x))",
            "RatingGreaterThan9(subway) \u2295 PopularAmongLocalResidents(subway)"
        ],
        "conclusion": "Subway does not provide take-out service.",
        "conclusion_fol": "\u00ac(NoTakeOutService(subway) \u2227 NegativeReview(subway)) \u2192 PopularAmongLocalResidents(subway) \u2227 NoTakeOutService(subway)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 87,
        "story_id": 10030,
        "context": [
            "In superhero movies, the good guys always win.",
            "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
            "Good guys fight bad guys and vice versa.",
            "Sir Digby fights his nemesis.",
            "If a superhero movie is named after a character, that character is a good guy.",
            "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
            "If somebody wins a fight, the person they are fighting loses.",
            "If a superhero movie is named after a character, that character appears in the movie."
        ],
        "context_fol": [
            "\u2200x \u2200y (SuperheroMovie(x) \u2227 GoodGuy(y) \u2227 AppearsIn(y, x) \u2192 Wins(y))",
            "SuperheroMovie(surprisingAdventuresofSirDigbyChickenCaesar)",
            "\u2200x \u2200y (GoodGuy(x) \u2227 Fights(x, y) \u27f7 BadGuy(y) \u2227 Fights(y, x))",
            "Fights(sirDigby, sirDigbyNemesis)",
            "\u2200x \u2200y (SuperheroMovie(x), NamedAfter(x, y) \u2192 GoodGuy(y))",
            "NamedAfter(surprisingAdventuresofSirDigbyChickenCaesar, sirDigby)",
            "\u2200x \u2200y (Fights(x, y) \u2227 Wins(x) \u2192 \u00acWins(y))"
        ],
        "conclusion": "Sir Digby\u2019s nemesis loses.",
        "conclusion_fol": "\u2200x \u2200y (SuperheroMovie(x) \u2227 AppearsIn(y, x) \u2192 GoodGuy(y))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 88,
        "story_id": 10031,
        "context": [
            "[BG] Books contain tons of knowledge.",
            "[BG] When a person reads a book, that person gains knowledge. ",
            "[BG] If a person gains knowledge, they become smarter.",
            "Harry read the book \u201cWalden\u201d by Henry Thoreau."
        ],
        "context_fol": [
            "\u2200x (Book(x) \u2192 Knowledge(x))",
            "\u2200x \u2200y (ReadBook(x, y) \u2192 GainKnowledge(x))",
            "\u2200x (GainKnowledge(x) \u2192 Smarter(x))",
            "ReadBook(harry, walden) \u2227 Book(walden)"
        ],
        "conclusion": "Walden contains knowledge.",
        "conclusion_fol": "Knowledge(walden)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 89,
        "story_id": 10031,
        "context": [
            "[BG] Books contain tons of knowledge.",
            "[BG] When a person reads a book, that person gains knowledge. ",
            "[BG] If a person gains knowledge, they become smarter.",
            "Harry read the book \u201cWalden\u201d by Henry Thoreau."
        ],
        "context_fol": [
            "\u2200x (Book(x) \u2192 Knowledge(x))",
            "\u2200x \u2200y (ReadBook(x, y) \u2192 GainKnowledge(x))",
            "\u2200x (GainKnowledge(x) \u2192 Smarter(x))",
            "ReadBook(harry, walden) \u2227 Book(walden)"
        ],
        "conclusion": "Harry is smarter than before.",
        "conclusion_fol": "Smarter(harry)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 90,
        "story_id": 10031,
        "context": [
            "[BG] Books contain tons of knowledge.",
            "[BG] When a person reads a book, that person gains knowledge. ",
            "[BG] If a person gains knowledge, they become smarter.",
            "Harry read the book \u201cWalden\u201d by Henry Thoreau."
        ],
        "context_fol": [
            "\u2200x (Book(x) \u2192 Knowledge(x))",
            "\u2200x \u2200y (ReadBook(x, y) \u2192 GainKnowledge(x))",
            "\u2200x (GainKnowledge(x) \u2192 Smarter(x))",
            "ReadBook(harry, walden) \u2227 Book(walden)"
        ],
        "conclusion": "A person who is smarter has gained knowledge.",
        "conclusion_fol": "\u2200x (Smarter(x) \u2192 GainKnowledge(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 91,
        "story_id": 10032,
        "context": [
            "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
            "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
            "Machine translation is a natural language processing task.",
            "The output of machine translation is a text sequence."
        ],
        "context_fol": [
            "\u2200x (NLP(x) \u2192 NLG(x) \u2295 NLU(x))",
            "\u2200x (NLP(x) \u2227 OutputSequence(x) \u2192 NLG(x))",
            "NLP(machineTranslation)",
            "OutputSequence(machineTranslation)"
        ],
        "conclusion": "Machine translation is a language generation task.",
        "conclusion_fol": "NLG(machineTranslation)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 92,
        "story_id": 10032,
        "context": [
            "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
            "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
            "Machine translation is a natural language processing task.",
            "The output of machine translation is a text sequence."
        ],
        "context_fol": [
            "\u2200x (NLP(x) \u2192 NLG(x) \u2295 NLU(x))",
            "\u2200x (NLP(x) \u2227 OutputSequence(x) \u2192 NLG(x))",
            "NLP(machineTranslation)",
            "OutputSequence(machineTranslation)"
        ],
        "conclusion": "Machine translation is a language understanding task.",
        "conclusion_fol": "NLU(machineTranslation)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 93,
        "story_id": 10033,
        "context": [
            "Pets are allowed in some managed buildings.",
            "[BG] A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to one month's rent or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "2000$ is more than $1500."
        ],
        "context_fol": [
            "\u2203x (ManagedBuilding(x) \u2227 AllowPet(x))",
            "\u2200x (ManagedBuilding(x) \u2192 RequireDeposit(x))",
            "\u2200x (Rent2000(x) \u2194 \u00acDepositNoMoreThan1500(x))",
            "\u2200x (Rent2000(x) \u2194 DepositNoLessThan2000(x))",
            "Cat(fluffy)",
            "\u2200x (Cat(x) \u2192 Pet(x))",
            "ManagedBuilding(oliveGarden)",
            "Rent2000(oliveGarden)",
            "\u2200x (TomRent(x) \u2194 (ManagedBuilding(x) \u2227 AllowPet(x) \u2227 DepositNoMoreThan1500(x)))"
        ],
        "conclusion": "Tom will rent an apartment in The Olive Garden.",
        "conclusion_fol": "TomRent(oliveGarden)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 94,
        "story_id": 10033,
        "context": [
            "Pets are allowed in some managed buildings.",
            "[BG] A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to one month's rent or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "2000$ is more than $1500."
        ],
        "context_fol": [
            "\u2203x (ManagedBuilding(x) \u2227 AllowPet(x))",
            "\u2200x (ManagedBuilding(x) \u2192 RequireDeposit(x))",
            "\u2200x (Rent2000(x) \u2194 \u00acDepositNoMoreThan1500(x))",
            "\u2200x (Rent2000(x) \u2194 DepositNoLessThan2000(x))",
            "Cat(fluffy)",
            "\u2200x (Cat(x) \u2192 Pet(x))",
            "ManagedBuilding(oliveGarden)",
            "Rent2000(oliveGarden)",
            "\u2200x (TomRent(x) \u2194 (ManagedBuilding(x) \u2227 AllowPet(x) \u2227 DepositNoMoreThan1500(x)))"
        ],
        "conclusion": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
        "conclusion_fol": "AllowPet(oliveGarden)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 95,
        "story_id": 10033,
        "context": [
            "Pets are allowed in some managed buildings.",
            "[BG] A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to one month's rent or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "2000$ is more than $1500."
        ],
        "context_fol": [
            "\u2203x (ManagedBuilding(x) \u2227 AllowPet(x))",
            "\u2200x (ManagedBuilding(x) \u2192 RequireDeposit(x))",
            "\u2200x (Rent2000(x) \u2194 \u00acDepositNoMoreThan1500(x))",
            "\u2200x (Rent2000(x) \u2194 DepositNoLessThan2000(x))",
            "Cat(fluffy)",
            "\u2200x (Cat(x) \u2192 Pet(x))",
            "ManagedBuilding(oliveGarden)",
            "Rent2000(oliveGarden)",
            "\u2200x (TomRent(x) \u2194 (ManagedBuilding(x) \u2227 AllowPet(x) \u2227 DepositNoMoreThan1500(x)))"
        ],
        "conclusion": "The security deposit at the Olive Garden is either $2000 or more.",
        "conclusion_fol": "DepositNoLessThan2000(oliveGarden)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 96,
        "story_id": 10034,
        "context": [
            "If animals are loved by tourists, then they are Max's favorite animals. ",
            "All animals from Australia are loved by tourists. ",
            "All quokka are animals from Australia. ",
            "All of Max's favorite animals are very fluffy.",
            "All of Max's favorite animals love to sleep. ",
            "If a koala is very fluffy, then the koala is not a quokka."
        ],
        "context_fol": [
            "\u2200x (AnimalsLovedByTourists(x) \u2192 MaxFavoriteAnimals(x))",
            " \u2200x (AnimalsFromAustralia(x) \u2192 AnimalsLovedByTourists(x))",
            " \u2200x (Quokka(x) \u2192 AnimalsFromAustralia(x))",
            " \u2200x (MaxFavoriteAnimals(x) \u2192 VeryFluffy(x)) ",
            " \u2200x (MaxFavoriteAnimals(x) \u2192 LoveToSleep(x))",
            " VeryFluffy(koala) \u2192 \u00acQuokka(koala)"
        ],
        "conclusion": "Koalas love to sleep.",
        "conclusion_fol": "LoveToSleep(koala)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 97,
        "story_id": 10034,
        "context": [
            "If animals are loved by tourists, then they are Max's favorite animals. ",
            "All animals from Australia are loved by tourists. ",
            "All quokka are animals from Australia. ",
            "All of Max's favorite animals are very fluffy.",
            "All of Max's favorite animals love to sleep. ",
            "If a koala is very fluffy, then the koala is not a quokka."
        ],
        "context_fol": [
            "\u2200x (AnimalsLovedByTourists(x) \u2192 MaxFavoriteAnimals(x))",
            " \u2200x (AnimalsFromAustralia(x) \u2192 AnimalsLovedByTourists(x))",
            " \u2200x (Quokka(x) \u2192 AnimalsFromAustralia(x))",
            " \u2200x (MaxFavoriteAnimals(x) \u2192 VeryFluffy(x)) ",
            " \u2200x (MaxFavoriteAnimals(x) \u2192 LoveToSleep(x))",
            " VeryFluffy(koala) \u2192 \u00acQuokka(koala)"
        ],
        "conclusion": "Koalas love to sleep and are quokka.",
        "conclusion_fol": "LoveToSleep(koala) \u2227 Quokka(koala)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 98,
        "story_id": 10034,
        "context": [
            "If animals are loved by tourists, then they are Max's favorite animals. ",
            "All animals from Australia are loved by tourists. ",
            "All quokka are animals from Australia. ",
            "All of Max's favorite animals are very fluffy.",
            "All of Max's favorite animals love to sleep. ",
            "If a koala is very fluffy, then the koala is not a quokka."
        ],
        "context_fol": [
            "\u2200x (AnimalsLovedByTourists(x) \u2192 MaxFavoriteAnimals(x))",
            " \u2200x (AnimalsFromAustralia(x) \u2192 AnimalsLovedByTourists(x))",
            " \u2200x (Quokka(x) \u2192 AnimalsFromAustralia(x))",
            " \u2200x (MaxFavoriteAnimals(x) \u2192 VeryFluffy(x)) ",
            " \u2200x (MaxFavoriteAnimals(x) \u2192 LoveToSleep(x))",
            " VeryFluffy(koala) \u2192 \u00acQuokka(koala)"
        ],
        "conclusion": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
        "conclusion_fol": "Quokka(koala) \u2192 LoveToSleep(koala) \u2295 VeryFluffy(koala)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 99,
        "story_id": 10035,
        "context": [
            "A man is either kind or evil.",
            "No ugly person is handsome.",
            "All evil people are ugly.",
            "All gentlemen are handsome.",
            "All CEOs are gentlemen.",
            "Harry is a gentleman."
        ],
        "context_fol": [
            "\u2200x (Kind(x) \u2295 Evil(x))",
            "\u2200x (Ugly(x) \u2192 \u00acHandsome(x))",
            "\u2200x (Evil(x) \u2192 Ugly(x))",
            "\u2200x (Gentleman(x) \u2192 Handsome(x))",
            "\u2200x (CEO(x) \u2192 Gentleman(x))",
            "Gentleman(harry)"
        ],
        "conclusion": "Harry is a CEO.",
        "conclusion_fol": "CEO(harry)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 100,
        "story_id": 10035,
        "context": [
            "A man is either kind or evil.",
            "No ugly person is handsome.",
            "All evil people are ugly.",
            "All gentlemen are handsome.",
            "All CEOs are gentlemen.",
            "Harry is a gentleman."
        ],
        "context_fol": [
            "\u2200x (Kind(x) \u2295 Evil(x))",
            "\u2200x (Ugly(x) \u2192 \u00acHandsome(x))",
            "\u2200x (Evil(x) \u2192 Ugly(x))",
            "\u2200x (Gentleman(x) \u2192 Handsome(x))",
            "\u2200x (CEO(x) \u2192 Gentleman(x))",
            "Gentleman(harry)"
        ],
        "conclusion": "Harry is kind or a CEO.",
        "conclusion_fol": "Kind(harry) \u2228 CEO(harry)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 101,
        "story_id": 10035,
        "context": [
            "A man is either kind or evil.",
            "No ugly person is handsome.",
            "All evil people are ugly.",
            "All gentlemen are handsome.",
            "All CEOs are gentlemen.",
            "Harry is a gentleman."
        ],
        "context_fol": [
            "\u2200x (Kind(x) \u2295 Evil(x))",
            "\u2200x (Ugly(x) \u2192 \u00acHandsome(x))",
            "\u2200x (Evil(x) \u2192 Ugly(x))",
            "\u2200x (Gentleman(x) \u2192 Handsome(x))",
            "\u2200x (CEO(x) \u2192 Gentleman(x))",
            "Gentleman(harry)"
        ],
        "conclusion": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
        "conclusion_fol": "(Evil(harry) \u2227 Ugly(harry)) \u2295 (\u00acEvil(harry) \u2227 \u00acUgly(harry)) \u2192 \u00acKind(harry) \u2227 \u00acCEO(harry)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 102,
        "story_id": 10036,
        "context": [
            "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who are the same age, then they are twins or triplets.",
            "If people complain often about annoying siblings, then they have siblings who are the same age.",
            "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
            "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
        ],
        "context_fol": [
            "\u2200x (TwinTriplet(x) \u2192 Playing(x))",
            "\u2200x (SameAge(x) \u2192 TwinTriplet(x))",
            "\u2200x (Complain(x) \u2192 SameAge(x))",
            "\u2200x (NotHome(x) \u2192 \u00acStrongBonds(x))",
            "\u2200x (Playing(x) \u2192 NotHome(x))",
            "(TwinTriplet(luke) \u2227 StrongBonds(luke)) \u2295 (\u00acTwinTriplet(luke) \u2227 \u00acStrongBonds(luke))"
        ],
        "conclusion": "Luke spends a lot of time hanging out and playing with his siblings.",
        "conclusion_fol": "Playing(luke)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 103,
        "story_id": 10036,
        "context": [
            "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who are the same age, then they are twins or triplets.",
            "If people complain often about annoying siblings, then they have siblings who are the same age.",
            "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
            "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
        ],
        "context_fol": [
            "\u2200x (TwinTriplet(x) \u2192 Playing(x))",
            "\u2200x (SameAge(x) \u2192 TwinTriplet(x))",
            "\u2200x (Complain(x) \u2192 SameAge(x))",
            "\u2200x (NotHome(x) \u2192 \u00acStrongBonds(x))",
            "\u2200x (Playing(x) \u2192 NotHome(x))",
            "(TwinTriplet(luke) \u2227 StrongBonds(luke)) \u2295 (\u00acTwinTriplet(luke) \u2227 \u00acStrongBonds(luke))"
        ],
        "conclusion": "Luke complains often about annoying siblings.",
        "conclusion_fol": "Complain(luke)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 104,
        "story_id": 10036,
        "context": [
            "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who are the same age, then they are twins or triplets.",
            "If people complain often about annoying siblings, then they have siblings who are the same age.",
            "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
            "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
        ],
        "context_fol": [
            "\u2200x (TwinTriplet(x) \u2192 Playing(x))",
            "\u2200x (SameAge(x) \u2192 TwinTriplet(x))",
            "\u2200x (Complain(x) \u2192 SameAge(x))",
            "\u2200x (NotHome(x) \u2192 \u00acStrongBonds(x))",
            "\u2200x (Playing(x) \u2192 NotHome(x))",
            "(TwinTriplet(luke) \u2227 StrongBonds(luke)) \u2295 (\u00acTwinTriplet(luke) \u2227 \u00acStrongBonds(luke))"
        ],
        "conclusion": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
        "conclusion_fol": "\u00ac(TwinTriplet(luke) \u2228 Complain(luke))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 105,
        "story_id": 10037,
        "context": [
            "It costs US $205 to take the GRE test.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Economic hardship refers to difficulty caused by having too little money or too few resources.",
            "Tom lives in a single-parent family.",
            "His dad has been out of work for more than a year."
        ],
        "context_fol": [
            "Cost205(gre)",
            "\u2200x (Cost205(x) \u2192 CostBelow300(x))",
            "\u2200x (Hardship(x) \u2192 FinancialAid(x))",
            "\u2200x (SingleParent(x) \u2228 FewResources(x) \u2192 Hardship(x))",
            "SingleParent(tom)",
            "FewResources(tom)"
        ],
        "conclusion": "Tom can apply for financial aid from ETS to take the GRE test.",
        "conclusion_fol": "FinancialAid(tom)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 106,
        "story_id": 10037,
        "context": [
            "It costs US $205 to take the GRE test.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Economic hardship refers to difficulty caused by having too little money or too few resources.",
            "Tom lives in a single-parent family.",
            "His dad has been out of work for more than a year."
        ],
        "context_fol": [
            "Cost205(gre)",
            "\u2200x (Cost205(x) \u2192 CostBelow300(x))",
            "\u2200x (Hardship(x) \u2192 FinancialAid(x))",
            "\u2200x (SingleParent(x) \u2228 FewResources(x) \u2192 Hardship(x))",
            "SingleParent(tom)",
            "FewResources(tom)"
        ],
        "conclusion": "It cost below US $300 to take the GRE test.",
        "conclusion_fol": "CostBelow300(gre)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 107,
        "story_id": 10037,
        "context": [
            "It costs US $205 to take the GRE test.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Economic hardship refers to difficulty caused by having too little money or too few resources.",
            "Tom lives in a single-parent family.",
            "His dad has been out of work for more than a year."
        ],
        "context_fol": [
            "Cost205(gre)",
            "\u2200x (Cost205(x) \u2192 CostBelow300(x))",
            "\u2200x (Hardship(x) \u2192 FinancialAid(x))",
            "\u2200x (SingleParent(x) \u2228 FewResources(x) \u2192 Hardship(x))",
            "SingleParent(tom)",
            "FewResources(tom)"
        ],
        "conclusion": "There is no financial aid available for the GRE test.",
        "conclusion_fol": "\u00ac(\u2203x (FinancialAid(x)))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 108,
        "story_id": 10038,
        "context": [
            "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
            "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
            "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
            "All households with a high net income have people who have parents who are very busy with their regular jobs.",
            "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
        ],
        "context_fol": [
            "\u2200x (Spill(x) \u2192 \u00acTidy(x))",
            "\u2200x (Foodie(x) \u2192 Spill(x))",
            "\u2200x (OnlyChild(x) \u2192 Tidy(x))",
            "\u2200x (BusyParents(x) \u2192 OnlyChild(x))",
            "\u2200x (HighIncome(x) \u2192 BusyParents(x))",
            "(Spill(peter) \u2227 OnlyChild(peter)) \u2228 \u00acSpill(peter) \u2227 \u00acOnlyChild(peter))"
        ],
        "conclusion": "Peter tidies his space consistently and enjoys the process of cleaning.",
        "conclusion_fol": "Tidy(peter)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 109,
        "story_id": 10038,
        "context": [
            "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
            "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
            "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
            "All households with a high net income have people who have parents who are very busy with their regular jobs.",
            "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
        ],
        "context_fol": [
            "\u2200x (Spill(x) \u2192 \u00acTidy(x))",
            "\u2200x (Foodie(x) \u2192 Spill(x))",
            "\u2200x (OnlyChild(x) \u2192 Tidy(x))",
            "\u2200x (BusyParents(x) \u2192 OnlyChild(x))",
            "\u2200x (HighIncome(x) \u2192 BusyParents(x))",
            "(Spill(peter) \u2227 OnlyChild(peter)) \u2228 \u00acSpill(peter) \u2227 \u00acOnlyChild(peter))"
        ],
        "conclusion": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
        "conclusion_fol": "Foodie(peter) \u2228 HighIncome(peter)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 110,
        "story_id": 10038,
        "context": [
            "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
            "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
            "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
            "All households with a high net income have people who have parents who are very busy with their regular jobs.",
            "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
        ],
        "context_fol": [
            "\u2200x (Spill(x) \u2192 \u00acTidy(x))",
            "\u2200x (Foodie(x) \u2192 Spill(x))",
            "\u2200x (OnlyChild(x) \u2192 Tidy(x))",
            "\u2200x (BusyParents(x) \u2192 OnlyChild(x))",
            "\u2200x (HighIncome(x) \u2192 BusyParents(x))",
            "(Spill(peter) \u2227 OnlyChild(peter)) \u2228 \u00acSpill(peter) \u2227 \u00acOnlyChild(peter))"
        ],
        "conclusion": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
        "conclusion_fol": "(Foodie(peter) \u2227 HighIncome(peter)) \u2228 \u00acFoodie(peter) \u2227 \u00acHighIncome(peter))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 111,
        "story_id": 10039,
        "context": [
            "All fir trees are evergreens.",
            "Some objects of worship are fir trees."
        ],
        "context_fol": [
            "\u2200x (FirTree(x) \u2192 Evergreen(x))",
            "\u2203x (ObjectOfWorship(x) \u2227 FirTree(x))"
        ],
        "conclusion": "Some evergreens are not objects of worship.",
        "conclusion_fol": "\u2203x (Evergreen(x) \u2227 \u00acObjectOfWorship(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 112,
        "story_id": 10040,
        "context": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines which have been donated."
        ],
        "context_fol": [
            "MountainRange(picurismountains) \u2227 In(picurismountains, newmexico) \u2228 In(picurismountains, texas)",
            "Visited(juandeonate, picurismountains)",
            "In(hardingpegmatitemine, picurismountains) \u2227 Mine(hardingpegmatitemine) \u2227 Donated(hardingpegmatitemine)",
            "\u2200x \u2200y (Mine(x) \u2227 Donated(x) \u2227 In(x, y) \u2227 MountainRange(y) \u2192 \u00acIn(y, texas))"
        ],
        "conclusion": "Juan de Onate visited a mountain range in New Mexico.",
        "conclusion_fol": "\u2203x (Visited(juandeonate, x) \u2227 MountainRange(x) \u2227 In(x, newmexico))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 113,
        "story_id": 10040,
        "context": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines which have been donated."
        ],
        "context_fol": [
            "MountainRange(picurismountains) \u2227 In(picurismountains, newmexico) \u2228 In(picurismountains, texas)",
            "Visited(juandeonate, picurismountains)",
            "In(hardingpegmatitemine, picurismountains) \u2227 Mine(hardingpegmatitemine) \u2227 Donated(hardingpegmatitemine)",
            "\u2200x \u2200y (Mine(x) \u2227 Donated(x) \u2227 In(x, y) \u2227 MountainRange(y) \u2192 \u00acIn(y, texas))"
        ],
        "conclusion": "Juan de Onate visited a mountain range in Texas.",
        "conclusion_fol": "\u2203x (Visited(juandeonate, x) \u2227 MountainRange(x) \u2227 In(x, texas))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 114,
        "story_id": 10040,
        "context": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines which have been donated."
        ],
        "context_fol": [
            "MountainRange(picurismountains) \u2227 In(picurismountains, newmexico) \u2228 In(picurismountains, texas)",
            "Visited(juandeonate, picurismountains)",
            "In(hardingpegmatitemine, picurismountains) \u2227 Mine(hardingpegmatitemine) \u2227 Donated(hardingpegmatitemine)",
            "\u2200x \u2200y (Mine(x) \u2227 Donated(x) \u2227 In(x, y) \u2227 MountainRange(y) \u2192 \u00acIn(y, texas))"
        ],
        "conclusion": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
        "conclusion_fol": "\u2200x (MountainRange(x) \u2227 In(hardingpegmatitemine, x) \u2192 \u00acIn(x, newmexico))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 115,
        "story_id": 10041,
        "context": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "context_fol": [
            "\u2200x \u2200y (IsMan(x) \u2227 IsMan(y) \u2227 Taller(x, y) \u2192 CanBlock(x, y))",
            "\u2200x (IsMan(x) \u2227 SameClass(x, michael) \u2227 \u00acBe(x, michael) \u2192 Taller(michael, x))",
            "\u2200x \u2200y \u2200z ((Taller(x, y) \u2227 Taller(y, z)) \u2192 Taller(x, z))",
            "IsMan(peter) \u2227 Taller(peter, michael)",
            "\u2200x (\u00acJumpWhenShooting(x) \u2192 CanBlock(michael, x))",
            "\u00acCanBlock(michael, windy)",
            "\u2200x (JumpWhenShooting(x) \u2192 GreatShooter(x))"
        ],
        "conclusion": "Peter is shorter than a man in Michael's class.",
        "conclusion_fol": "\u2203x (IsMan(x) \u2227 SameClass(x, michael) \u2227 \u00acBe(x, michael) \u2227 \u00acTaller(peter, x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 116,
        "story_id": 10041,
        "context": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "context_fol": [
            "\u2200x \u2200y (IsMan(x) \u2227 IsMan(y) \u2227 Taller(x, y) \u2192 CanBlock(x, y))",
            "\u2200x (IsMan(x) \u2227 SameClass(x, michael) \u2227 \u00acBe(x, michael) \u2192 Taller(michael, x))",
            "\u2200x \u2200y \u2200z ((Taller(x, y) \u2227 Taller(y, z)) \u2192 Taller(x, z))",
            "IsMan(peter) \u2227 Taller(peter, michael)",
            "\u2200x (\u00acJumpWhenShooting(x) \u2192 CanBlock(michael, x))",
            "\u00acCanBlock(michael, windy)",
            "\u2200x (JumpWhenShooting(x) \u2192 GreatShooter(x))"
        ],
        "conclusion": "Windy is a great shooter.",
        "conclusion_fol": "GreatShooter(windy)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 117,
        "story_id": 10041,
        "context": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "context_fol": [
            "\u2200x \u2200y (IsMan(x) \u2227 IsMan(y) \u2227 Taller(x, y) \u2192 CanBlock(x, y))",
            "\u2200x (IsMan(x) \u2227 SameClass(x, michael) \u2227 \u00acBe(x, michael) \u2192 Taller(michael, x))",
            "\u2200x \u2200y \u2200z ((Taller(x, y) \u2227 Taller(y, z)) \u2192 Taller(x, z))",
            "IsMan(peter) \u2227 Taller(peter, michael)",
            "\u2200x (\u00acJumpWhenShooting(x) \u2192 CanBlock(michael, x))",
            "\u00acCanBlock(michael, windy)",
            "\u2200x (JumpWhenShooting(x) \u2192 GreatShooter(x))"
        ],
        "conclusion": "Peter can block Windy's shooting.",
        "conclusion_fol": "CanBlock(peter, windy)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 118,
        "story_id": 10042,
        "context": [
            "Barutin Cove is named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
            "The South Shetland Islands are considered part of Antarctica.",
            "If A is located in B and B is located in C, then A is located in C."
        ],
        "context_fol": [
            "Cove(barutin) \u2227 NameAfter(barutin, settlement) \u2227 Locate(settlement, bulgaria)",
            "Locate(barutin, snow)",
            "Locate(snow, shetland) \u2227 Locate(greenwich, shetland) \u2227 Locate(deception, shetland)",
            "Locate(shetland, antarctica)",
            "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
        ],
        "conclusion": "Barutin is named after all islands in Antarctica.",
        "conclusion_fol": "\u2200x (Locate(x, antarctica) \u2192 NameAfter(barutin, x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 119,
        "story_id": 10042,
        "context": [
            "Barutin Cove is named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
            "The South Shetland Islands are considered part of Antarctica.",
            "If A is located in B and B is located in C, then A is located in C."
        ],
        "context_fol": [
            "Cove(barutin) \u2227 NameAfter(barutin, settlement) \u2227 Locate(settlement, bulgaria)",
            "Locate(barutin, snow)",
            "Locate(snow, shetland) \u2227 Locate(greenwich, shetland) \u2227 Locate(deception, shetland)",
            "Locate(shetland, antarctica)",
            "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
        ],
        "conclusion": "There is at least one cove in Antarctica named after a place in Bulgaria.",
        "conclusion_fol": "\u2203x \u2203y (Cove(x) \u2227 NameAfter(x, y) \u2227 Locate(y, bulgaria))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 120,
        "story_id": 10042,
        "context": [
            "Barutin Cove is named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
            "The South Shetland Islands are considered part of Antarctica.",
            "If A is located in B and B is located in C, then A is located in C."
        ],
        "context_fol": [
            "Cove(barutin) \u2227 NameAfter(barutin, settlement) \u2227 Locate(settlement, bulgaria)",
            "Locate(barutin, snow)",
            "Locate(snow, shetland) \u2227 Locate(greenwich, shetland) \u2227 Locate(deception, shetland)",
            "Locate(shetland, antarctica)",
            "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
        ],
        "conclusion": "Barutin is not located in Antarctica.",
        "conclusion_fol": "\u00acLocate(barutin, antarctica)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 121,
        "story_id": 10043,
        "context": [
            "Some affection is love.",
            "Some love is positive."
        ],
        "context_fol": [
            "\u2203x (Affection(x) \u2227 Love(x))",
            "\u2203x (Love(x) \u2227 Positive(x))"
        ],
        "conclusion": "Some affection is positive.",
        "conclusion_fol": "\u2203x (Affection(x) \u2227 Positive(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 122,
        "story_id": 10044,
        "context": [
            "If something can transport multiple passengers, then they are not empty.",
            "All airlines can transport multiple passengers.",
            "All planes are empty.",
            "All Boeing 707s are planes.",
            "If Greyhound is not an airline, then there are no Greyhound planes."
        ],
        "context_fol": [
            "\u2200x (TransportMultiplePassengers(x) \u2192 \u00acEmpty(x))",
            "\u2200x (Airline(x) \u2192 TransportMultiplePassengers(x))",
            "\u2200x (Plane(x) \u2192 Empty(x))",
            "\u2200x (Boeing707(x) \u2192 Plane(x))",
            "\u00acAirline(greyhound) \u2192 \u00ac(Airline(greyhound) \u2228 Plane(greyhound))"
        ],
        "conclusion": "Greyhound is an airline.",
        "conclusion_fol": "Airline(greyhound)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 123,
        "story_id": 10044,
        "context": [
            "If something can transport multiple passengers, then they are not empty.",
            "All airlines can transport multiple passengers.",
            "All planes are empty.",
            "All Boeing 707s are planes.",
            "If Greyhound is not an airline, then there are no Greyhound planes."
        ],
        "context_fol": [
            "\u2200x (TransportMultiplePassengers(x) \u2192 \u00acEmpty(x))",
            "\u2200x (Airline(x) \u2192 TransportMultiplePassengers(x))",
            "\u2200x (Plane(x) \u2192 Empty(x))",
            "\u2200x (Boeing707(x) \u2192 Plane(x))",
            "\u00acAirline(greyhound) \u2192 \u00ac(Airline(greyhound) \u2228 Plane(greyhound))"
        ],
        "conclusion": "A Greyhound is a Boeing 707.",
        "conclusion_fol": "Boeing707(greyhound)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 124,
        "story_id": 10044,
        "context": [
            "If something can transport multiple passengers, then they are not empty.",
            "All airlines can transport multiple passengers.",
            "All planes are empty.",
            "All Boeing 707s are planes.",
            "If Greyhound is not an airline, then there are no Greyhound planes."
        ],
        "context_fol": [
            "\u2200x (TransportMultiplePassengers(x) \u2192 \u00acEmpty(x))",
            "\u2200x (Airline(x) \u2192 TransportMultiplePassengers(x))",
            "\u2200x (Plane(x) \u2192 Empty(x))",
            "\u2200x (Boeing707(x) \u2192 Plane(x))",
            "\u00acAirline(greyhound) \u2192 \u00ac(Airline(greyhound) \u2228 Plane(greyhound))"
        ],
        "conclusion": "A Greyhound is not a Boeing 707.",
        "conclusion_fol": "\u00acBoeing707(greyhound)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 125,
        "story_id": 10045,
        "context": [
            "All mammals are animals.",
            "All monkeys are mammals. ",
            "An animal is either a monkey or a bird.",
            "All birds fly.",
            "All animals breathe.",
            "If something can fly, then it has wings.",
            "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
        ],
        "context_fol": [
            "\u2200x  (Mammal (x)\u2192  Animal (x))",
            "\u2200x  (Monkey (x)\u2192  Mammal (x))",
            "\u2200x ( Monkey (x) \u2228  Bird (x))",
            "\u2200x  (Bird (x)\u2192  Fly (x))",
            "\u2200x  (Animal (x)\u2192  Breathe (x))",
            "\u2200x  (Fly (x)\u2192  HaveWings (x))",
            "\u00ac Fly (rock) \u2227 \u00ac Bird (rock) \u2192 \u00ac Fly (rock) \u2227 \u00ac Breathe (rock) "
        ],
        "conclusion": "Rock is a monkey.",
        "conclusion_fol": "Monkey(rock)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 126,
        "story_id": 10045,
        "context": [
            "All mammals are animals.",
            "All monkeys are mammals. ",
            "An animal is either a monkey or a bird.",
            "All birds fly.",
            "All animals breathe.",
            "If something can fly, then it has wings.",
            "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
        ],
        "context_fol": [
            "\u2200x  (Mammal (x)\u2192  Animal (x))",
            "\u2200x  (Monkey (x)\u2192  Mammal (x))",
            "\u2200x ( Monkey (x) \u2228  Bird (x))",
            "\u2200x  (Bird (x)\u2192  Fly (x))",
            "\u2200x  (Animal (x)\u2192  Breathe (x))",
            "\u2200x  (Fly (x)\u2192  HaveWings (x))",
            "\u00ac Fly (rock) \u2227 \u00ac Bird (rock) \u2192 \u00ac Fly (rock) \u2227 \u00ac Breathe (rock) "
        ],
        "conclusion": "Rock has wings.",
        "conclusion_fol": "HaveWings(rock)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 127,
        "story_id": 10045,
        "context": [
            "All mammals are animals.",
            "All monkeys are mammals. ",
            "An animal is either a monkey or a bird.",
            "All birds fly.",
            "All animals breathe.",
            "If something can fly, then it has wings.",
            "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
        ],
        "context_fol": [
            "\u2200x  (Mammal (x)\u2192  Animal (x))",
            "\u2200x  (Monkey (x)\u2192  Mammal (x))",
            "\u2200x ( Monkey (x) \u2228  Bird (x))",
            "\u2200x  (Bird (x)\u2192  Fly (x))",
            "\u2200x  (Animal (x)\u2192  Breathe (x))",
            "\u2200x  (Fly (x)\u2192  HaveWings (x))",
            "\u00ac Fly (rock) \u2227 \u00ac Bird (rock) \u2192 \u00ac Fly (rock) \u2227 \u00ac Breathe (rock) "
        ],
        "conclusion": "Rock does not have wings.",
        "conclusion_fol": "\u00ac HaveWings(rock)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 128,
        "story_id": 10046,
        "context": [
            "All people who have a wedding are people who have at least one child.",
            "All people who travel to Paris for their honeymoon are people who have a wedding.",
            "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
            "Some weddings in July are well-attended.",
            "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
            "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
        ],
        "context_fol": [
            "\u2200x (Wedding(x) \u2192 Child(x))",
            "\u2200x (Paris(x) \u2192 Wedding(x))",
            "\u2200x (July(x) \u2192 Paris(x))",
            "\u2203x (July(x) \u2227 WellAttended(x))",
            "Child(john) \u2192 \u00ac(Paris(john) \u2227 Wedding(john))",
            "WellAttended(john) \u2192 July(john) \u2295 Paris(john)"
        ],
        "conclusion": "John has a wedding that is well-attended.",
        "conclusion_fol": "WellAttended(john)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 129,
        "story_id": 10046,
        "context": [
            "All people who have a wedding are people who have at least one child.",
            "All people who travel to Paris for their honeymoon are people who have a wedding.",
            "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
            "Some weddings in July are well-attended.",
            "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
            "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
        ],
        "context_fol": [
            "\u2200x (Wedding(x) \u2192 Child(x))",
            "\u2200x (Paris(x) \u2192 Wedding(x))",
            "\u2200x (July(x) \u2192 Paris(x))",
            "\u2203x (July(x) \u2227 WellAttended(x))",
            "Child(john) \u2192 \u00ac(Paris(john) \u2227 Wedding(john))",
            "WellAttended(john) \u2192 July(john) \u2295 Paris(john)"
        ],
        "conclusion": "John does not have a wedding that is well-attended.",
        "conclusion_fol": "\u00acWellAttended(john)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 130,
        "story_id": 10046,
        "context": [
            "All people who have a wedding are people who have at least one child.",
            "All people who travel to Paris for their honeymoon are people who have a wedding.",
            "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
            "Some weddings in July are well-attended.",
            "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
            "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
        ],
        "context_fol": [
            "\u2200x (Wedding(x) \u2192 Child(x))",
            "\u2200x (Paris(x) \u2192 Wedding(x))",
            "\u2200x (July(x) \u2192 Paris(x))",
            "\u2203x (July(x) \u2227 WellAttended(x))",
            "Child(john) \u2192 \u00ac(Paris(john) \u2227 Wedding(john))",
            "WellAttended(john) \u2192 July(john) \u2295 Paris(john)"
        ],
        "conclusion": "John has at least one child.",
        "conclusion_fol": "Child(john)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 131,
        "story_id": 10046,
        "context": [
            "All people who have a wedding are people who have at least one child.",
            "All people who travel to Paris for their honeymoon are people who have a wedding.",
            "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
            "Some weddings in July are well-attended.",
            "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
            "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
        ],
        "context_fol": [
            "\u2200x (Wedding(x) \u2192 Child(x))",
            "\u2200x (Paris(x) \u2192 Wedding(x))",
            "\u2200x (July(x) \u2192 Paris(x))",
            "\u2203x (July(x) \u2227 WellAttended(x))",
            "Child(john) \u2192 \u00ac(Paris(john) \u2227 Wedding(john))",
            "WellAttended(john) \u2192 July(john) \u2295 Paris(john)"
        ],
        "conclusion": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
        "conclusion_fol": "\u00ac(WellAttended(john) \u2228 July(john))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 132,
        "story_id": 10047,
        "context": [
            "[BG] Some mammals have teeth.",
            "Platypus have no teeth.",
            "Platypus are mammals. ",
            "Humans have teeth."
        ],
        "context_fol": [
            "\u2203x (Mammal(x) \u2227 Have(x, teeth))",
            "\u00acHave(platypus, teeth)",
            "Mammal(platypus)",
            "Have(humans, teeth)"
        ],
        "conclusion": "Platypus are mammals with no teeth.",
        "conclusion_fol": "Mammal(platypus) \u2227 \u00acHave(platypus, teeth)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 133,
        "story_id": 10047,
        "context": [
            "[BG] Some mammals have teeth.",
            "Platypus have no teeth.",
            "Platypus are mammals. ",
            "Humans have teeth."
        ],
        "context_fol": [
            "\u2203x (Mammal(x) \u2227 Have(x, teeth))",
            "\u00acHave(platypus, teeth)",
            "Mammal(platypus)",
            "Have(humans, teeth)"
        ],
        "conclusion": "Platypus are reptiles.",
        "conclusion_fol": "Reptile(platypus)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 134,
        "story_id": 10047,
        "context": [
            "[BG] Some mammals have teeth.",
            "Platypus have no teeth.",
            "Platypus are mammals. ",
            "Humans have teeth."
        ],
        "context_fol": [
            "\u2203x (Mammal(x) \u2227 Have(x, teeth))",
            "\u00acHave(platypus, teeth)",
            "Mammal(platypus)",
            "Have(humans, teeth)"
        ],
        "conclusion": "Humans are mammals.",
        "conclusion_fol": "Mammal(humans)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 135,
        "story_id": 10048,
        "context": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "context_fol": [
            "\u2200x (Plunger(x) \u2192 Suck(x))",
            "\u2200x (Vacuum(x) \u2192 Suck(x))",
            "\u2200x (Vampire(x) \u2192 Suck(x))",
            "Vacuum(space)",
            "HouseHoldApp(duster) \u2227 \u00ac Suck(duster)"
        ],
        "conclusion": "Space sucks.",
        "conclusion_fol": "Suck(space)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 136,
        "story_id": 10048,
        "context": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "context_fol": [
            "\u2200x (Plunger(x) \u2192 Suck(x))",
            "\u2200x (Vacuum(x) \u2192 Suck(x))",
            "\u2200x (Vampire(x) \u2192 Suck(x))",
            "Vacuum(space)",
            "HouseHoldApp(duster) \u2227 \u00ac Suck(duster)"
        ],
        "conclusion": "Space is a vampire.",
        "conclusion_fol": "Vampire(space)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 137,
        "story_id": 10048,
        "context": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "context_fol": [
            "\u2200x (Plunger(x) \u2192 Suck(x))",
            "\u2200x (Vacuum(x) \u2192 Suck(x))",
            "\u2200x (Vampire(x) \u2192 Suck(x))",
            "Vacuum(space)",
            "HouseHoldApp(duster) \u2227 \u00ac Suck(duster)"
        ],
        "conclusion": "If something is a household appliance, it sucks.",
        "conclusion_fol": "\u2200x (HouseHoldApp(x) \u2192 Suck(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 138,
        "story_id": 10049,
        "context": [
            "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
            "Unsupervised learning doesn't require labelled data.",
            "The state-of-the-art text summarization model is trained with machine learning algorithms.",
            "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
            "The Machine Learning algorithm for training text summarization model requires labelled data."
        ],
        "context_fol": [
            "MLAlgorithm(supervisedLearning) \u2228 MLAlgorithm(unsupervisedLearning) \u2228 MLAlgorithm(reinforcementLearning)",
            "\u00acRequireLabelledData(unsupervisedLearning)",
            "TrainTextSumModel(supervisedLearning) \u2228 TrainTextSumModel(unsupervisedLearning) \u2228 TrainTextSumModel(reinforcementLearning)",
            "\u00acTrainTextSumModel(reinforcementLearning)",
            "\u2200x ((MLAlgorithm(x) \u2227 TrainTextSumModel(x)) \u2192 RequireLabelledData(x))"
        ],
        "conclusion": "Supervised learning is used to train the state-of-the-art text summarization model.",
        "conclusion_fol": "TrainTextSumModel(supervisedLearning)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 139,
        "story_id": 10049,
        "context": [
            "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
            "Unsupervised learning doesn't require labelled data.",
            "The state-of-the-art text summarization model is trained with machine learning algorithms.",
            "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
            "The Machine Learning algorithm for training text summarization model requires labelled data."
        ],
        "context_fol": [
            "MLAlgorithm(supervisedLearning) \u2228 MLAlgorithm(unsupervisedLearning) \u2228 MLAlgorithm(reinforcementLearning)",
            "\u00acRequireLabelledData(unsupervisedLearning)",
            "TrainTextSumModel(supervisedLearning) \u2228 TrainTextSumModel(unsupervisedLearning) \u2228 TrainTextSumModel(reinforcementLearning)",
            "\u00acTrainTextSumModel(reinforcementLearning)",
            "\u2200x ((MLAlgorithm(x) \u2227 TrainTextSumModel(x)) \u2192 RequireLabelledData(x))"
        ],
        "conclusion": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
        "conclusion_fol": "TrainTextSumModel(unsupervisedLearning)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 140,
        "story_id": 10050,
        "context": [
            "If a cartoon character is funny, then it is popular.",
            "If a cartoon character is ugly, then it is not popular.",
            "If a cartoon character is loved by children, then it is funny.",
            "If a cartoon character is from The Simpsons, then it is loved by children.",
            "If a cartoon character is yellow, then it is from The Simpsons.",
            "Ben is either from The Simpsons or funny."
        ],
        "context_fol": [
            "\u2200x (Funny(x) \u2192 Popular(x))",
            "\u2200x (Ugly(x) \u2192 \u00acPopular(x))",
            "\u2200x (Love(children, x) \u2192 Funny(x))",
            "\u2200x (Simpsons(x) \u2192 Love(children, x))",
            "\u2200x (Yellow(x) \u2192 Simpsons(x))",
            "Simpsons(ben) \u2295 Funny(ben)"
        ],
        "conclusion": "Ben is loved by children.",
        "conclusion_fol": "Love(children, ben)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 141,
        "story_id": 10050,
        "context": [
            "If a cartoon character is funny, then it is popular.",
            "If a cartoon character is ugly, then it is not popular.",
            "If a cartoon character is loved by children, then it is funny.",
            "If a cartoon character is from The Simpsons, then it is loved by children.",
            "If a cartoon character is yellow, then it is from The Simpsons.",
            "Ben is either from The Simpsons or funny."
        ],
        "context_fol": [
            "\u2200x (Funny(x) \u2192 Popular(x))",
            "\u2200x (Ugly(x) \u2192 \u00acPopular(x))",
            "\u2200x (Love(children, x) \u2192 Funny(x))",
            "\u2200x (Simpsons(x) \u2192 Love(children, x))",
            "\u2200x (Yellow(x) \u2192 Simpsons(x))",
            "Simpsons(ben) \u2295 Funny(ben)"
        ],
        "conclusion": "Ben is ugly or yellow.",
        "conclusion_fol": "Ugly(ben) \u2228 Yellow(ben)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 142,
        "story_id": 10050,
        "context": [
            "If a cartoon character is funny, then it is popular.",
            "If a cartoon character is ugly, then it is not popular.",
            "If a cartoon character is loved by children, then it is funny.",
            "If a cartoon character is from The Simpsons, then it is loved by children.",
            "If a cartoon character is yellow, then it is from The Simpsons.",
            "Ben is either from The Simpsons or funny."
        ],
        "context_fol": [
            "\u2200x (Funny(x) \u2192 Popular(x))",
            "\u2200x (Ugly(x) \u2192 \u00acPopular(x))",
            "\u2200x (Love(children, x) \u2192 Funny(x))",
            "\u2200x (Simpsons(x) \u2192 Love(children, x))",
            "\u2200x (Yellow(x) \u2192 Simpsons(x))",
            "Simpsons(ben) \u2295 Funny(ben)"
        ],
        "conclusion": "Ben is either yellow and ugly or neither yellow nor ugly.",
        "conclusion_fol": "(Yellow(ben) \u2227 Ugly(ben)) \u2295 (\u00acYellow(ben) \u2227 \u00acUgly(ben))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 143,
        "story_id": 10051,
        "context": [
            "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
            "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
            "[BG] Heck cattle are animals.",
            "[BG] Aurochs are animals.",
            "Some animals to be bred-back resemble animals that are extinct."
        ],
        "context_fol": [
            "\u2200x \u2200y (BreedingBack(x, y) \u2192 ArtificiallySelect(x))",
            "\u2203x \u2203y (HeckCattle(x) \u2227 Aurochs(y) \u2227 BreedingBack(x, y))",
            "\u2200x (HeckCattle(x) \u2192 Animal(x))",
            "\u2200x (Aurochs(x) \u2192 Animal(x))",
            "\u2203x \u2203y (Animal(x) \u2227 Animal(y) \u2227 BreedingBack(x, y) \u2227 Extinct(y))"
        ],
        "conclusion": "Some Heck cattle are artificially selected.",
        "conclusion_fol": "\u2203x (HeckCattle(x) \u2227 ArtificiallySelect(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 144,
        "story_id": 10051,
        "context": [
            "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
            "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
            "[BG] Heck cattle are animals.",
            "[BG] Aurochs are animals.",
            "Some animals to be bred-back resemble animals that are extinct."
        ],
        "context_fol": [
            "\u2200x \u2200y (BreedingBack(x, y) \u2192 ArtificiallySelect(x))",
            "\u2203x \u2203y (HeckCattle(x) \u2227 Aurochs(y) \u2227 BreedingBack(x, y))",
            "\u2200x (HeckCattle(x) \u2192 Animal(x))",
            "\u2200x (Aurochs(x) \u2192 Animal(x))",
            "\u2203x \u2203y (Animal(x) \u2227 Animal(y) \u2227 BreedingBack(x, y) \u2227 Extinct(y))"
        ],
        "conclusion": "Aurochs are extinct.",
        "conclusion_fol": "\u2200x (Aurochs(x) \u2192 Extinct(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 145,
        "story_id": 10052,
        "context": [
            "All students are humans. ",
            "If someone studies, then they are a student.",
            "A person either studys or teaches.",
            "No young person teaches.",
            "Jerry neither teaches nor is a manager.",
            "Rose is young or a student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 Human(x))",
            "\u2200x (Study(x) \u2192 Student(x))",
            "\u2200x (Study(x) \u2228 Teach(x))",
            "\u2200x (Young(x) \u2192 \u00acTeach(x))",
            "\u00acTeach(jerry) \u2227 \u00acManager(jerry)",
            "Young(rose) \u2228 Student(rose)"
        ],
        "conclusion": "Jerry is young.",
        "conclusion_fol": "Young(jerry)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 146,
        "story_id": 10052,
        "context": [
            "All students are humans. ",
            "If someone studies, then they are a student.",
            "A person either studys or teaches.",
            "No young person teaches.",
            "Jerry neither teaches nor is a manager.",
            "Rose is young or a student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 Human(x))",
            "\u2200x (Study(x) \u2192 Student(x))",
            "\u2200x (Study(x) \u2228 Teach(x))",
            "\u2200x (Young(x) \u2192 \u00acTeach(x))",
            "\u00acTeach(jerry) \u2227 \u00acManager(jerry)",
            "Young(rose) \u2228 Student(rose)"
        ],
        "conclusion": "Jerry is not young.",
        "conclusion_fol": "\u00acYoung(jerry)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 147,
        "story_id": 10052,
        "context": [
            "All students are humans. ",
            "If someone studies, then they are a student.",
            "A person either studys or teaches.",
            "No young person teaches.",
            "Jerry neither teaches nor is a manager.",
            "Rose is young or a student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 Human(x))",
            "\u2200x (Study(x) \u2192 Student(x))",
            "\u2200x (Study(x) \u2228 Teach(x))",
            "\u2200x (Young(x) \u2192 \u00acTeach(x))",
            "\u00acTeach(jerry) \u2227 \u00acManager(jerry)",
            "Young(rose) \u2228 Student(rose)"
        ],
        "conclusion": "Rose is a human or a manager.",
        "conclusion_fol": "Human(rose) \u2228 Manager(rose)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 148,
        "story_id": 10052,
        "context": [
            "All students are humans. ",
            "If someone studies, then they are a student.",
            "A person either studys or teaches.",
            "No young person teaches.",
            "Jerry neither teaches nor is a manager.",
            "Rose is young or a student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 Human(x))",
            "\u2200x (Study(x) \u2192 Student(x))",
            "\u2200x (Study(x) \u2228 Teach(x))",
            "\u2200x (Young(x) \u2192 \u00acTeach(x))",
            "\u00acTeach(jerry) \u2227 \u00acManager(jerry)",
            "Young(rose) \u2228 Student(rose)"
        ],
        "conclusion": "Rose is a human or Jerry is a manager.",
        "conclusion_fol": "Human(rose) \u2228 Manager(jerry)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 149,
        "story_id": 10052,
        "context": [
            "All students are humans. ",
            "If someone studies, then they are a student.",
            "A person either studys or teaches.",
            "No young person teaches.",
            "Jerry neither teaches nor is a manager.",
            "Rose is young or a student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 Human(x))",
            "\u2200x (Study(x) \u2192 Student(x))",
            "\u2200x (Study(x) \u2228 Teach(x))",
            "\u2200x (Young(x) \u2192 \u00acTeach(x))",
            "\u00acTeach(jerry) \u2227 \u00acManager(jerry)",
            "Young(rose) \u2228 Student(rose)"
        ],
        "conclusion": "It is not true that Rose is a student and Jerry is a human.",
        "conclusion_fol": "\u00ac(Student(rose) \u2227 Human(jerry))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 150,
        "story_id": 10053,
        "context": [
            "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "context_fol": [
            "PublishingHouse(newvesselpress) \u2227 SpecializesIn(newvessel, translatingforeignliteratureintoenglish)",
            "\u2200x (Book(x) \u2227 PublishedBy(x, newvesselpress) \u2192 In(x, english))",
            "Book(neapolitanchronicles) \u2227 PublishedBy(neapolitanchronicles, newvesselpress)",
            "TranslatedFrom(neapolitanchronicles, italian)",
            "Book(palaceofflies) \u2227 PublishedBy(palaceofflies, newvesselpress)"
        ],
        "conclusion": "Neapolitan Chronicles is an English book.",
        "conclusion_fol": "Book(neapolitanchronicles) \u2227 In(neapolitanchronicles, english)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 151,
        "story_id": 10053,
        "context": [
            "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "context_fol": [
            "PublishingHouse(newvesselpress) \u2227 SpecializesIn(newvessel, translatingforeignliteratureintoenglish)",
            "\u2200x (Book(x) \u2227 PublishedBy(x, newvesselpress) \u2192 In(x, english))",
            "Book(neapolitanchronicles) \u2227 PublishedBy(neapolitanchronicles, newvesselpress)",
            "TranslatedFrom(neapolitanchronicles, italian)",
            "Book(palaceofflies) \u2227 PublishedBy(palaceofflies, newvesselpress)"
        ],
        "conclusion": "Harry Potter was published by New Vessel Press.",
        "conclusion_fol": "PublishedBy(harrrypotter, newvesselpress)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 152,
        "story_id": 10053,
        "context": [
            "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "context_fol": [
            "PublishingHouse(newvesselpress) \u2227 SpecializesIn(newvessel, translatingforeignliteratureintoenglish)",
            "\u2200x (Book(x) \u2227 PublishedBy(x, newvesselpress) \u2192 In(x, english))",
            "Book(neapolitanchronicles) \u2227 PublishedBy(neapolitanchronicles, newvesselpress)",
            "TranslatedFrom(neapolitanchronicles, italian)",
            "Book(palaceofflies) \u2227 PublishedBy(palaceofflies, newvesselpress)"
        ],
        "conclusion": "Palace of Flies was translated from Italian.",
        "conclusion_fol": "TranslatedFrom(palaceofflies, italian)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 153,
        "story_id": 10054,
        "context": [
            "If people own a large desktop monitor at their home, then they work regularly and often at home.",
            "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
            "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
            "All people who work regularly and often at home visit the office supply store regularly.",
            "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
            "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
        ],
        "context_fol": [
            "\u2200x (Desktop(x) \u2192 WorkHome(x))",
            "\u2200x (HomeOffice(x) \u2192 Desktop(x))",
            "\u2200x (WorkHome(x) \u2192 Tidying(x))",
            "\u2200x (WorkHome(x) \u2192 OfficeStore(x))",
            "\u2200x (Tidying(x) \u2192 \u00acLate(x))",
            "(Late(remy) \u2227 Tidying(remy)) \u2295 (\u00acLate(remy) \u2227 \u00acTidying(remy))"
        ],
        "conclusion": "Remy visits the office supply store regularly.",
        "conclusion_fol": "OfficeStore(remy)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 154,
        "story_id": 10054,
        "context": [
            "If people own a large desktop monitor at their home, then they work regularly and often at home.",
            "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
            "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
            "All people who work regularly and often at home visit the office supply store regularly.",
            "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
            "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
        ],
        "context_fol": [
            "\u2200x (Desktop(x) \u2192 WorkHome(x))",
            "\u2200x (HomeOffice(x) \u2192 Desktop(x))",
            "\u2200x (WorkHome(x) \u2192 Tidying(x))",
            "\u2200x (WorkHome(x) \u2192 OfficeStore(x))",
            "\u2200x (Tidying(x) \u2192 \u00acLate(x))",
            "(Late(remy) \u2227 Tidying(remy)) \u2295 (\u00acLate(remy) \u2227 \u00acTidying(remy))"
        ],
        "conclusion": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
        "conclusion_fol": "HomeOffice(remy) \u2227 OfficeStore(remy)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 155,
        "story_id": 10054,
        "context": [
            "If people own a large desktop monitor at their home, then they work regularly and often at home.",
            "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
            "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
            "All people who work regularly and often at home visit the office supply store regularly.",
            "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
            "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
        ],
        "context_fol": [
            "\u2200x (Desktop(x) \u2192 WorkHome(x))",
            "\u2200x (HomeOffice(x) \u2192 Desktop(x))",
            "\u2200x (WorkHome(x) \u2192 Tidying(x))",
            "\u2200x (WorkHome(x) \u2192 OfficeStore(x))",
            "\u2200x (Tidying(x) \u2192 \u00acLate(x))",
            "(Late(remy) \u2227 Tidying(remy)) \u2295 (\u00acLate(remy) \u2227 \u00acTidying(remy))"
        ],
        "conclusion": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
        "conclusion_fol": "Late(remy) \u2228 OfficeStore(remy) \u2192 \u00ac(Tidying(remy) \u2228 HomeOffice(remy))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 156,
        "story_id": 10055,
        "context": [
            "All humans are mortal.",
            "All Greeks are humans."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2192 Mortal(x))",
            "\u2200x (Greek(x) \u2192 Human(x))"
        ],
        "conclusion": "Some Greeks are mortal.",
        "conclusion_fol": "\u2203x (Greek(x) \u2227 Mortal(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 157,
        "story_id": 10056,
        "context": [
            "No students who work in the library are from the computer science department. ",
            "All students who have part-time jobs offered by the university are students who work in the library. ",
            "All students who take the database course are from the computer science department. ",
            "All students instructed by professor David are taking the database course. ",
            "All students working in the lab are instructed by professor David. ",
            "James is a student working in the lab. ",
            "Jack neither has a part-time job offered by the university nor works in the lab. "
        ],
        "context_fol": [
            "\u2200x (WorkLibrary(x) \u2192 \u00acComputerScience(x))",
            "\u2200x (PartTime(x) \u2192 WorkLibrary(x))",
            "\u2200x (Database(x) \u2192 ComputerScience(x))",
            "\u2200x (ProfessorDavid(x) \u2192 Database(x))",
            "\u2200x (WorkInLab(x) \u2192 ProfessorDavid(x))",
            "WorkInLab(james)",
            "\u00acPartTime(jack) \u2227 \u00acWorkInLab(jack)"
        ],
        "conclusion": "James has a part-time job offered by the university.",
        "conclusion_fol": "PartTime(james)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 158,
        "story_id": 10056,
        "context": [
            "No students who work in the library are from the computer science department. ",
            "All students who have part-time jobs offered by the university are students who work in the library. ",
            "All students who take the database course are from the computer science department. ",
            "All students instructed by professor David are taking the database course. ",
            "All students working in the lab are instructed by professor David. ",
            "James is a student working in the lab. ",
            "Jack neither has a part-time job offered by the university nor works in the lab. "
        ],
        "context_fol": [
            "\u2200x (WorkLibrary(x) \u2192 \u00acComputerScience(x))",
            "\u2200x (PartTime(x) \u2192 WorkLibrary(x))",
            "\u2200x (Database(x) \u2192 ComputerScience(x))",
            "\u2200x (ProfessorDavid(x) \u2192 Database(x))",
            "\u2200x (WorkInLab(x) \u2192 ProfessorDavid(x))",
            "WorkInLab(james)",
            "\u00acPartTime(jack) \u2227 \u00acWorkInLab(jack)"
        ],
        "conclusion": "James does not have a part-time job offered by the university.",
        "conclusion_fol": "\u00acPartTime(james)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 159,
        "story_id": 10056,
        "context": [
            "No students who work in the library are from the computer science department. ",
            "All students who have part-time jobs offered by the university are students who work in the library. ",
            "All students who take the database course are from the computer science department. ",
            "All students instructed by professor David are taking the database course. ",
            "All students working in the lab are instructed by professor David. ",
            "James is a student working in the lab. ",
            "Jack neither has a part-time job offered by the university nor works in the lab. "
        ],
        "context_fol": [
            "\u2200x (WorkLibrary(x) \u2192 \u00acComputerScience(x))",
            "\u2200x (PartTime(x) \u2192 WorkLibrary(x))",
            "\u2200x (Database(x) \u2192 ComputerScience(x))",
            "\u2200x (ProfessorDavid(x) \u2192 Database(x))",
            "\u2200x (WorkInLab(x) \u2192 ProfessorDavid(x))",
            "WorkInLab(james)",
            "\u00acPartTime(jack) \u2227 \u00acWorkInLab(jack)"
        ],
        "conclusion": "James either takes the database course or has a part-time job offered by the university.",
        "conclusion_fol": "Database(james) \u2295 PartTime(james)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 160,
        "story_id": 10056,
        "context": [
            "No students who work in the library are from the computer science department. ",
            "All students who have part-time jobs offered by the university are students who work in the library. ",
            "All students who take the database course are from the computer science department. ",
            "All students instructed by professor David are taking the database course. ",
            "All students working in the lab are instructed by professor David. ",
            "James is a student working in the lab. ",
            "Jack neither has a part-time job offered by the university nor works in the lab. "
        ],
        "context_fol": [
            "\u2200x (WorkLibrary(x) \u2192 \u00acComputerScience(x))",
            "\u2200x (PartTime(x) \u2192 WorkLibrary(x))",
            "\u2200x (Database(x) \u2192 ComputerScience(x))",
            "\u2200x (ProfessorDavid(x) \u2192 Database(x))",
            "\u2200x (WorkInLab(x) \u2192 ProfessorDavid(x))",
            "WorkInLab(james)",
            "\u00acPartTime(jack) \u2227 \u00acWorkInLab(jack)"
        ],
        "conclusion": "Jack takes the database course.",
        "conclusion_fol": "Database(jack)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 161,
        "story_id": 10057,
        "context": [
            "If George likes music, he wants to compose.",
            "If George has access to a program, he can compose.",
            "If George can compose and wants to compose, he will compose."
        ],
        "context_fol": [
            "LikesMusic(george) \u2192 WantsToCompose(george)",
            "AccesstoProgram(george) \u2192 CanCompose(george)",
            "(WantsToCompose(george) \u2227 CanCompose(george)) \u2192 WillCompose(george)"
        ],
        "conclusion": "If George likes music and has access to a program, he will compose.",
        "conclusion_fol": "(LikesMusic(george) \u2227 AccesstoProgram(george)) \u2192 WillCompose(george)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 162,
        "story_id": 10057,
        "context": [
            "If George likes music, he wants to compose.",
            "If George has access to a program, he can compose.",
            "If George can compose and wants to compose, he will compose."
        ],
        "context_fol": [
            "LikesMusic(george) \u2192 WantsToCompose(george)",
            "AccesstoProgram(george) \u2192 CanCompose(george)",
            "(WantsToCompose(george) \u2227 CanCompose(george)) \u2192 WillCompose(george)"
        ],
        "conclusion": "If George will not compose, George can not compose.",
        "conclusion_fol": "\u00acWantsToCompose(george) \u2192 \u00acWillCompose(george)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 163,
        "story_id": 10058,
        "context": [
            "A hawk never lands. ",
            "Some birds are hawks."
        ],
        "context_fol": [
            "\u2200x (Hawk(x) \u2192 \u00acLands(x))",
            "\u2203x (Bird(x) \u2227 Hawk(x))"
        ],
        "conclusion": "All birds land",
        "conclusion_fol": "\u2200x (Bird(x) \u2192 Lands(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 164,
        "story_id": 10059,
        "context": [
            "On some Mondays at 8 pm, roses are given out on TV.",
            "Every rose given out on TV is on the Bachelor.",
            "Everything on the Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is not a reality TV show."
        ],
        "context_fol": [
            "\u2203x (Mondayat8(x) \u2227 RoseGivenOutOnTv(x))",
            "\u2200x (RoseGivenOutOnTv(x) \u2192 OnBachelor(x))",
            "\u2200x (OnBachelor(x) \u2192 PortrayLiveOfRealPeople(x))",
            "\u2200x (PortrayLiveOfRealPeople(x) \u2192 RealityTVShow(x))",
            "\u00acRealityTVShow(breakingbad)"
        ],
        "conclusion": "Breaking Bad is on Monday at 8 pm.",
        "conclusion_fol": "Mondayat8(breakingbad)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 165,
        "story_id": 10059,
        "context": [
            "On some Mondays at 8 pm, roses are given out on TV.",
            "Every rose given out on TV is on the Bachelor.",
            "Everything on the Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is not a reality TV show."
        ],
        "context_fol": [
            "\u2203x (Mondayat8(x) \u2227 RoseGivenOutOnTv(x))",
            "\u2200x (RoseGivenOutOnTv(x) \u2192 OnBachelor(x))",
            "\u2200x (OnBachelor(x) \u2192 PortrayLiveOfRealPeople(x))",
            "\u2200x (PortrayLiveOfRealPeople(x) \u2192 RealityTVShow(x))",
            "\u00acRealityTVShow(breakingbad)"
        ],
        "conclusion": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
        "conclusion_fol": "Mondayat8(breakingbad) \u2227 RoseGivenOutOnTv(breakingbad)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 166,
        "story_id": 10059,
        "context": [
            "On some Mondays at 8 pm, roses are given out on TV.",
            "Every rose given out on TV is on the Bachelor.",
            "Everything on the Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is not a reality TV show."
        ],
        "context_fol": [
            "\u2203x (Mondayat8(x) \u2227 RoseGivenOutOnTv(x))",
            "\u2200x (RoseGivenOutOnTv(x) \u2192 OnBachelor(x))",
            "\u2200x (OnBachelor(x) \u2192 PortrayLiveOfRealPeople(x))",
            "\u2200x (PortrayLiveOfRealPeople(x) \u2192 RealityTVShow(x))",
            "\u00acRealityTVShow(breakingbad)"
        ],
        "conclusion": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
        "conclusion_fol": "RoseGivenOutOnTv(breakingbad) \u2192 Mondayat8(breakingbad)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 167,
        "story_id": 10060,
        "context": [
            "Heinrich Scmidt was a Nazi German politician. ",
            "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "context_fol": [
            "From(heinrichScmidt, naziGermany) \u2227 Politician(heinrichScmidt)",
            "Member(heinrichScmidt, prussianStateParliament) \u2227 Member(heinrichScmidt, naziReichstag)"
        ],
        "conclusion": "Heinrich Schmidt was either German or Russian.",
        "conclusion_fol": "From(heinrichScmidt, naziGermany) \u2228 From(heinrichScmidt, russia)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 168,
        "story_id": 10060,
        "context": [
            "Heinrich Scmidt was a Nazi German politician. ",
            "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "context_fol": [
            "From(heinrichScmidt, naziGermany) \u2227 Politician(heinrichScmidt)",
            "Member(heinrichScmidt, prussianStateParliament) \u2227 Member(heinrichScmidt, naziReichstag)"
        ],
        "conclusion": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
        "conclusion_fol": "\u2203x (From(x, naziGermany) \u2227 Politician(x) \u2227 Member(x, prussianStateParliament) \u2227 Member(x, naziReichstag))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 169,
        "story_id": 10060,
        "context": [
            "Heinrich Scmidt was a Nazi German politician. ",
            "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "context_fol": [
            "From(heinrichScmidt, naziGermany) \u2227 Politician(heinrichScmidt)",
            "Member(heinrichScmidt, prussianStateParliament) \u2227 Member(heinrichScmidt, naziReichstag)"
        ],
        "conclusion": "No politicans are part of the Nazi Reichstag.",
        "conclusion_fol": "\u2200x (Politician(x) \u2192 \u00acMember(x, naziReichstag))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 170,
        "story_id": 10061,
        "context": [
            "If something is a deadly disease, then its survival rate is low. ",
            "All severe cancers are deadly diseases.",
            "Bile duct cancer is a severe cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "No one with mild flu has a low survival rate.",
            "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
        ],
        "context_fol": [
            "\u2200x (DeadlyDiseases(x) \u2192 SurvivalRateIsLow(x))",
            "\u2200x (SevereCancer(x) \u2192 DeadlyDiseases(x))",
            "\u2200x (BileDuctCancer(x) \u2192 SevereCancer(x))",
            "\u2200x (Cholangiocarcinoma(x) \u2192 BileDuctCancer(x))",
            "\u2200x (MildFlu(x) \u2192 \u00acSurvivalRateIsLow(x)) ",
            "BileDuctCancer(colorectalCancer) \u2228 SurvivalRateIsLow(colorectalCancer) \u2192 \u00acBileDuctCancer(colorectalCancer)"
        ],
        "conclusion": "Colorectal cancer is a severe cancer",
        "conclusion_fol": "SevereCancer(colorectalCancer)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 171,
        "story_id": 10061,
        "context": [
            "If something is a deadly disease, then its survival rate is low. ",
            "All severe cancers are deadly diseases.",
            "Bile duct cancer is a severe cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "No one with mild flu has a low survival rate.",
            "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
        ],
        "context_fol": [
            "\u2200x (DeadlyDiseases(x) \u2192 SurvivalRateIsLow(x))",
            "\u2200x (SevereCancer(x) \u2192 DeadlyDiseases(x))",
            "\u2200x (BileDuctCancer(x) \u2192 SevereCancer(x))",
            "\u2200x (Cholangiocarcinoma(x) \u2192 BileDuctCancer(x))",
            "\u2200x (MildFlu(x) \u2192 \u00acSurvivalRateIsLow(x)) ",
            "BileDuctCancer(colorectalCancer) \u2228 SurvivalRateIsLow(colorectalCancer) \u2192 \u00acBileDuctCancer(colorectalCancer)"
        ],
        "conclusion": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
        "conclusion_fol": "BileDuctCancer(colorectalCancer) \u2228 Cholangiocarcinoma(colorectalCancer) \u2192 BileDuctCancer(colorectalCancer) \u2227 MildFlu(colorectalCancer)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 172,
        "story_id": 10061,
        "context": [
            "If something is a deadly disease, then its survival rate is low. ",
            "All severe cancers are deadly diseases.",
            "Bile duct cancer is a severe cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "No one with mild flu has a low survival rate.",
            "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
        ],
        "context_fol": [
            "\u2200x (DeadlyDiseases(x) \u2192 SurvivalRateIsLow(x))",
            "\u2200x (SevereCancer(x) \u2192 DeadlyDiseases(x))",
            "\u2200x (BileDuctCancer(x) \u2192 SevereCancer(x))",
            "\u2200x (Cholangiocarcinoma(x) \u2192 BileDuctCancer(x))",
            "\u2200x (MildFlu(x) \u2192 \u00acSurvivalRateIsLow(x)) ",
            "BileDuctCancer(colorectalCancer) \u2228 SurvivalRateIsLow(colorectalCancer) \u2192 \u00acBileDuctCancer(colorectalCancer)"
        ],
        "conclusion": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
        "conclusion_fol": "\u00acMildFlu(colorectalCancer) \u2228 \u00acCholangiocarcinoma(colorectalCancer) \u2192 BileDuctCancer(colorectalCancer) \u2228 Cholangiocarcinoma(colorectalCancer)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 173,
        "story_id": 10062,
        "context": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
            "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
            "If people have good relationships with their parents, then they do not eat salads regularly.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
        ],
        "context_fol": [
            "\u2200x (Salad(x) \u2192 HealthyHabits(x))",
            "\u2200x (HealthyChildhood(x) \u2192 Salad(x))",
            "\u2200x (Nutritional(x) \u2192 HealthyChildhood(x))",
            "\u2200x (GoodRelationship(x) \u2192 \u00acHealthyHabits(x))",
            "\u2200x (Gym(x) \u2192 Nutritional(x))",
            "(HealthyChildhood(taylor) \u2227 GoodRelationship(taylor)) \u2228 \u00acHealthyChildhood(taylor) \u2227 \u00acGoodRelationship(marcy)"
        ],
        "conclusion": "Taylor eats salads regularly.",
        "conclusion_fol": "Salad(taylor)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 174,
        "story_id": 10062,
        "context": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
            "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
            "If people have good relationships with their parents, then they do not eat salads regularly.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
        ],
        "context_fol": [
            "\u2200x (Salad(x) \u2192 HealthyHabits(x))",
            "\u2200x (HealthyChildhood(x) \u2192 Salad(x))",
            "\u2200x (Nutritional(x) \u2192 HealthyChildhood(x))",
            "\u2200x (GoodRelationship(x) \u2192 \u00acHealthyHabits(x))",
            "\u2200x (Gym(x) \u2192 Nutritional(x))",
            "(HealthyChildhood(taylor) \u2227 GoodRelationship(taylor)) \u2228 \u00acHealthyChildhood(taylor) \u2227 \u00acGoodRelationship(marcy)"
        ],
        "conclusion": "Taylor visits the gym at least once a day.",
        "conclusion_fol": "Gym(taylor)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 175,
        "story_id": 10062,
        "context": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
            "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
            "If people have good relationships with their parents, then they do not eat salads regularly.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
        ],
        "context_fol": [
            "\u2200x (Salad(x) \u2192 HealthyHabits(x))",
            "\u2200x (HealthyChildhood(x) \u2192 Salad(x))",
            "\u2200x (Nutritional(x) \u2192 HealthyChildhood(x))",
            "\u2200x (GoodRelationship(x) \u2192 \u00acHealthyHabits(x))",
            "\u2200x (Gym(x) \u2192 Nutritional(x))",
            "(HealthyChildhood(taylor) \u2227 GoodRelationship(taylor)) \u2228 \u00acHealthyChildhood(taylor) \u2227 \u00acGoodRelationship(marcy)"
        ],
        "conclusion": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
        "conclusion_fol": "\u00ac(HealthyChildhood(taylor) \u2228 Gym(taylor))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 176,
        "story_id": 10063,
        "context": [
            "[BG] The Olympic games is a sporting event. ",
            "The last Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "context_fol": [
            "SportingEvent(olympics)",
            "LastOlympics(tokyo)",
            "MostMedals(unitedStates, tokyo)"
        ],
        "conclusion": "The world championships is a sporting event.",
        "conclusion_fol": "SportingEvent(champs)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 177,
        "story_id": 10063,
        "context": [
            "[BG] The Olympic games is a sporting event. ",
            "The last Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "context_fol": [
            "SportingEvent(olympics)",
            "LastOlympics(tokyo)",
            "MostMedals(unitedStates, tokyo)"
        ],
        "conclusion": "The last Olympic games were not in Tokyo.",
        "conclusion_fol": "\u00acLastOlympics(tokyo)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 178,
        "story_id": 10063,
        "context": [
            "[BG] The Olympic games is a sporting event. ",
            "The last Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "context_fol": [
            "SportingEvent(olympics)",
            "LastOlympics(tokyo)",
            "MostMedals(unitedStates, tokyo)"
        ],
        "conclusion": "The United States won the most medals in the last Olympic games.",
        "conclusion_fol": "\u2203x (LastOlympics(x) \u2227 MostMedals(unitedStates, x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 179,
        "story_id": 10064,
        "context": [
            "All horses have hooves.",
            "No humans have hooves."
        ],
        "context_fol": [
            "\u2200x (Horse(x) \u2192 Hooves(x))",
            "\u2200x (Human(x) \u2192 \u00acHooves(x))"
        ],
        "conclusion": "Some humans are horses.",
        "conclusion_fol": "\u2203x (Human(x) \u2227 Horse(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 180,
        "story_id": 10065,
        "context": [
            "Susan flies to LGA airport.",
            "The departure and arrival can not be the same airport.",
            "John flies from LGA airport."
        ],
        "context_fol": [
            "FlyTo(susan, lga)",
            "\u2200x \u2200y (FlyFrom(x, y) \u2295 FlyTo(x, y))",
            "FlyFrom(john, lga)"
        ],
        "conclusion": "Susan flies from LGA airport.",
        "conclusion_fol": "FlyFrom(susan, lga)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 181,
        "story_id": 10065,
        "context": [
            "Susan flies to LGA airport.",
            "The departure and arrival can not be the same airport.",
            "John flies from LGA airport."
        ],
        "context_fol": [
            "FlyTo(susan, lga)",
            "\u2200x \u2200y (FlyFrom(x, y) \u2295 FlyTo(x, y))",
            "FlyFrom(john, lga)"
        ],
        "conclusion": "John flies to LGA airport.",
        "conclusion_fol": "FlyTo(john, lga)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 182,
        "story_id": 10066,
        "context": [
            "No one nice to animals is mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "If someone owns a pet, then they love animals.",
            "Tom is a pet owner."
        ],
        "context_fol": [
            "\u2200x (Nice(x) \u2192 \u00acMean(x))",
            "\u2203x (Grumpy(x) \u2227 Mean(x))",
            "\u2200x (AnimalLover(x) \u2192 Nice(x))",
            "\u2200x (PetOwner(x) \u2192 AnimalLover(x))",
            "PetOwner(tom)"
        ],
        "conclusion": "Tom is a grumpy person.",
        "conclusion_fol": "Grumpy(tom)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 183,
        "story_id": 10066,
        "context": [
            "No one nice to animals is mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "If someone owns a pet, then they love animals.",
            "Tom is a pet owner."
        ],
        "context_fol": [
            "\u2200x (Nice(x) \u2192 \u00acMean(x))",
            "\u2203x (Grumpy(x) \u2227 Mean(x))",
            "\u2200x (AnimalLover(x) \u2192 Nice(x))",
            "\u2200x (PetOwner(x) \u2192 AnimalLover(x))",
            "PetOwner(tom)"
        ],
        "conclusion": "Tom is not a grumpy person and mean to animals.",
        "conclusion_fol": "\u00ac(Grumpy(tom) \u2227 Mean(tom))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 184,
        "story_id": 10066,
        "context": [
            "No one nice to animals is mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "If someone owns a pet, then they love animals.",
            "Tom is a pet owner."
        ],
        "context_fol": [
            "\u2200x (Nice(x) \u2192 \u00acMean(x))",
            "\u2203x (Grumpy(x) \u2227 Mean(x))",
            "\u2200x (AnimalLover(x) \u2192 Nice(x))",
            "\u2200x (PetOwner(x) \u2192 AnimalLover(x))",
            "PetOwner(tom)"
        ],
        "conclusion": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
        "conclusion_fol": "\u00ac(Grumpy(tom) \u2227 Mean(tom)) \u2192 \u00ac(Grumpy(tom) \u2228 AnimalLover(tom))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 185,
        "story_id": 10067,
        "context": [
            "A podcast is not a novel.",
            "[BG] If a person is born in American City, the person is American.",
            "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "[BG] Boston is an American city."
        ],
        "context_fol": [
            "\u2200x (IsPodcast(x) \u2192 \u00acIsNovel(x))",
            "\u2200x \u2203y (BornIn(x, y) \u2227 IsCity(y) \u2227 IsAmerican(y) \u2192 IsAmerican(x))",
            "\u2200x \u2200y (IsNovel(x) \u2227 WrittenBy(x, y) \u2192 WritesNovel(y))",
            "IsAmerican(dani_Shapiro) \u2227 IsWriter(dani_Shapiro)",
            "WrittenBy(family_History, dani_Shapiro)",
            "IsNovel(family_History) \u2227 WrittenIn(family_History, y2003)",
            "IsPodcast(family_Secrets) \u2227 CreatedBy(family_Secrets, dani_Shapiro)",
            "IsCity(boston) \u2227 IsAmerican(boston)"
        ],
        "conclusion": "Dani Shapiro is a novel writer.",
        "conclusion_fol": "WritesNovel(dani_Shapiro)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 186,
        "story_id": 10067,
        "context": [
            "A podcast is not a novel.",
            "[BG] If a person is born in American City, the person is American.",
            "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "[BG] Boston is an American city."
        ],
        "context_fol": [
            "\u2200x (IsPodcast(x) \u2192 \u00acIsNovel(x))",
            "\u2200x \u2203y (BornIn(x, y) \u2227 IsCity(y) \u2227 IsAmerican(y) \u2192 IsAmerican(x))",
            "\u2200x \u2200y (IsNovel(x) \u2227 WrittenBy(x, y) \u2192 WritesNovel(y))",
            "IsAmerican(dani_Shapiro) \u2227 IsWriter(dani_Shapiro)",
            "WrittenBy(family_History, dani_Shapiro)",
            "IsNovel(family_History) \u2227 WrittenIn(family_History, y2003)",
            "IsPodcast(family_Secrets) \u2227 CreatedBy(family_Secrets, dani_Shapiro)",
            "IsCity(boston) \u2227 IsAmerican(boston)"
        ],
        "conclusion": "Family Secrets is a novel.",
        "conclusion_fol": "IsNovel(family_Secrets)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 187,
        "story_id": 10067,
        "context": [
            "A podcast is not a novel.",
            "[BG] If a person is born in American City, the person is American.",
            "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "[BG] Boston is an American city."
        ],
        "context_fol": [
            "\u2200x (IsPodcast(x) \u2192 \u00acIsNovel(x))",
            "\u2200x \u2203y (BornIn(x, y) \u2227 IsCity(y) \u2227 IsAmerican(y) \u2192 IsAmerican(x))",
            "\u2200x \u2200y (IsNovel(x) \u2227 WrittenBy(x, y) \u2192 WritesNovel(y))",
            "IsAmerican(dani_Shapiro) \u2227 IsWriter(dani_Shapiro)",
            "WrittenBy(family_History, dani_Shapiro)",
            "IsNovel(family_History) \u2227 WrittenIn(family_History, y2003)",
            "IsPodcast(family_Secrets) \u2227 CreatedBy(family_Secrets, dani_Shapiro)",
            "IsCity(boston) \u2227 IsAmerican(boston)"
        ],
        "conclusion": "Dani Shapiro was born in Boston.",
        "conclusion_fol": "BornIn(dani_Shapiro, boston)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 188,
        "story_id": 10068,
        "context": [
            "Some basketball players are not American.",
            "All basketball players are tall.",
            "If someone is tall, they wear large shoes.",
            "If someone wears large shoes, they wear large-sized clothes.",
            "Yuri does not wear large-size clothes."
        ],
        "context_fol": [
            "\u2203x (BasketballPlayer(x) \u2227 \u00acAmerican(x))",
            "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
            "\u2200x (Tall(x) \u2192 WearLargeShoes(x))",
            "\u2200x (WearLargeShoes(x) \u2192 WearLargeClothes(x))",
            "\u00acWearLargeClothes(yuri)"
        ],
        "conclusion": "Yuri is an American.",
        "conclusion_fol": "American(yuri)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 189,
        "story_id": 10068,
        "context": [
            "Some basketball players are not American.",
            "All basketball players are tall.",
            "If someone is tall, they wear large shoes.",
            "If someone wears large shoes, they wear large-sized clothes.",
            "Yuri does not wear large-size clothes."
        ],
        "context_fol": [
            "\u2203x (BasketballPlayer(x) \u2227 \u00acAmerican(x))",
            "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
            "\u2200x (Tall(x) \u2192 WearLargeShoes(x))",
            "\u2200x (WearLargeShoes(x) \u2192 WearLargeClothes(x))",
            "\u00acWearLargeClothes(yuri)"
        ],
        "conclusion": "Yuri is not an American basketball player.",
        "conclusion_fol": "\u00ac(American(yuri) \u2227 BasketballPlayer(yuri))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 190,
        "story_id": 10068,
        "context": [
            "Some basketball players are not American.",
            "All basketball players are tall.",
            "If someone is tall, they wear large shoes.",
            "If someone wears large shoes, they wear large-sized clothes.",
            "Yuri does not wear large-size clothes."
        ],
        "context_fol": [
            "\u2203x (BasketballPlayer(x) \u2227 \u00acAmerican(x))",
            "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
            "\u2200x (Tall(x) \u2192 WearLargeShoes(x))",
            "\u2200x (WearLargeShoes(x) \u2192 WearLargeClothes(x))",
            "\u00acWearLargeClothes(yuri)"
        ],
        "conclusion": "Yuri is an American basketball player.",
        "conclusion_fol": "American(yuri) \u2227 BasketballPlayer(yuri)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 191,
        "story_id": 10068,
        "context": [
            "Some basketball players are not American.",
            "All basketball players are tall.",
            "If someone is tall, they wear large shoes.",
            "If someone wears large shoes, they wear large-sized clothes.",
            "Yuri does not wear large-size clothes."
        ],
        "context_fol": [
            "\u2203x (BasketballPlayer(x) \u2227 \u00acAmerican(x))",
            "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
            "\u2200x (Tall(x) \u2192 WearLargeShoes(x))",
            "\u2200x (WearLargeShoes(x) \u2192 WearLargeClothes(x))",
            "\u00acWearLargeClothes(yuri)"
        ],
        "conclusion": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
        "conclusion_fol": "\u00acWearLargeShoes(yuri) \u2192 (American(yuri) \u2227 BasketballPlayer(yuri))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 192,
        "story_id": 10068,
        "context": [
            "Some basketball players are not American.",
            "All basketball players are tall.",
            "If someone is tall, they wear large shoes.",
            "If someone wears large shoes, they wear large-sized clothes.",
            "Yuri does not wear large-size clothes."
        ],
        "context_fol": [
            "\u2203x (BasketballPlayer(x) \u2227 \u00acAmerican(x))",
            "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
            "\u2200x (Tall(x) \u2192 WearLargeShoes(x))",
            "\u2200x (WearLargeShoes(x) \u2192 WearLargeClothes(x))",
            "\u00acWearLargeClothes(yuri)"
        ],
        "conclusion": "If Yuri is not an American basketball player, then Yuri is a basketball player.",
        "conclusion_fol": "\u00ac(American(yuri) \u2227 BasketballPlayer(yuri)) \u2192 BasketballPlayer(yuri)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 193,
        "story_id": 10069,
        "context": [
            "Events are either happy or sad.",
            "At least one event is happy. "
        ],
        "context_fol": [
            "\u2200x (Event(x) \u2192 Happy(x) \u2295 Sad(x))",
            "\u2203x (Event(x) \u2227 Happy(x)) "
        ],
        "conclusion": "All events are sad.",
        "conclusion_fol": "\u2200x (Event(x) \u2192 Sad(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 194,
        "story_id": 10070,
        "context": [
            "The winner of the 1992 du Maurier Classic was Steinhauer.",
            "Steinhauer participated in the 1992 du Maurier Classic.",
            "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
            "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
            "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
        ],
        "context_fol": [
            "Winner(maurier, steinhauer)",
            "Participate(maurier, steinhauer)",
            "\u2203x (LeaderBoard(maurier, x) \u2227 SixWayTie(x) \u2227 Belgium(x))",
            "Belgium(descampe) \u2227 LeaderBoard(maurier, descampe)",
            "\u2200x (LeaderBoard(maurier, x) \u2192 Participate(maurier, x))"
        ],
        "conclusion": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
        "conclusion_fol": "\u00acWinner(maurier, steinhauer)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 195,
        "story_id": 10070,
        "context": [
            "The winner of the 1992 du Maurier Classic was Steinhauer.",
            "Steinhauer participated in the 1992 du Maurier Classic.",
            "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
            "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
            "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
        ],
        "context_fol": [
            "Winner(maurier, steinhauer)",
            "Participate(maurier, steinhauer)",
            "\u2203x (LeaderBoard(maurier, x) \u2227 SixWayTie(x) \u2227 Belgium(x))",
            "Belgium(descampe) \u2227 LeaderBoard(maurier, descampe)",
            "\u2200x (LeaderBoard(maurier, x) \u2192 Participate(maurier, x))"
        ],
        "conclusion": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
        "conclusion_fol": "SixWayTie(descampe)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 196,
        "story_id": 10071,
        "context": [
            "If an animal barks, then Jane does not like it.",
            "All dogs are animals that bark.",
            "If an animal jumps, then Jane likes it.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "context_fol": [
            "\u2200x (Bark(x) \u2192 \u00acLike(jane, x))",
            "\u2200x (Dog(x) \u2192 Bark(x))",
            "\u2200x (Jump(x) \u2192 Like(jane, x))",
            "\u2200x (HaveLegs(x) \u2192 Jump(x))",
            "\u2200x (Terricolous(x) \u2192 HaveLegs(x))",
            "(\u00acJump(kiki) \u2227 \u00acHaveLegs(kiki)) \u2192 (Terricolous(kiki) \u2228 HaveLegs(kiki))"
        ],
        "conclusion": "KiKi is terricolous.",
        "conclusion_fol": "Terricolous(kiki)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 197,
        "story_id": 10071,
        "context": [
            "If an animal barks, then Jane does not like it.",
            "All dogs are animals that bark.",
            "If an animal jumps, then Jane likes it.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "context_fol": [
            "\u2200x (Bark(x) \u2192 \u00acLike(jane, x))",
            "\u2200x (Dog(x) \u2192 Bark(x))",
            "\u2200x (Jump(x) \u2192 Like(jane, x))",
            "\u2200x (HaveLegs(x) \u2192 Jump(x))",
            "\u2200x (Terricolous(x) \u2192 HaveLegs(x))",
            "(\u00acJump(kiki) \u2227 \u00acHaveLegs(kiki)) \u2192 (Terricolous(kiki) \u2228 HaveLegs(kiki))"
        ],
        "conclusion": "KiKi barks and is a dog.",
        "conclusion_fol": "Bark(kiki) \u2227 Dog(kiki)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 198,
        "story_id": 10071,
        "context": [
            "If an animal barks, then Jane does not like it.",
            "All dogs are animals that bark.",
            "If an animal jumps, then Jane likes it.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "context_fol": [
            "\u2200x (Bark(x) \u2192 \u00acLike(jane, x))",
            "\u2200x (Dog(x) \u2192 Bark(x))",
            "\u2200x (Jump(x) \u2192 Like(jane, x))",
            "\u2200x (HaveLegs(x) \u2192 Jump(x))",
            "\u2200x (Terricolous(x) \u2192 HaveLegs(x))",
            "(\u00acJump(kiki) \u2227 \u00acHaveLegs(kiki)) \u2192 (Terricolous(kiki) \u2228 HaveLegs(kiki))"
        ],
        "conclusion": "KiKi neither barks nor is a dog.",
        "conclusion_fol": "\u00acBark(kiki) \u2227 \u00acDog(kiki)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "example_id": 199,
        "story_id": 10072,
        "context": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazillian footballer who plays for Nautico.",
            "Nautico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "context_fol": [
            "BornIn(ailtonsilva, y1995) \u2227 CommonlyKnownAs(ailtonsilva, ailton)",
            "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)",
            "Brazilian(ailtonsilva) \u2227 Footballplayer(ailtonsilva) \u2227 PlaysFor(ailtonsilva, nautico)",
            "FootballClub(nautico) \u2227 FootballClub(braga)",
            "FootballClub(fluminense)"
        ],
        "conclusion": "No one playing for Nautico is Brazilian.",
        "conclusion_fol": "\u2200x (PlaysFor(x, nautico) \u2192 \u00acBrazilian(x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 200,
        "story_id": 10072,
        "context": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazillian footballer who plays for Nautico.",
            "Nautico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "context_fol": [
            "BornIn(ailtonsilva, y1995) \u2227 CommonlyKnownAs(ailtonsilva, ailton)",
            "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)",
            "Brazilian(ailtonsilva) \u2227 Footballplayer(ailtonsilva) \u2227 PlaysFor(ailtonsilva, nautico)",
            "FootballClub(nautico) \u2227 FootballClub(braga)",
            "FootballClub(fluminense)"
        ],
        "conclusion": "Ailton Silva foes not play for a football club.",
        "conclusion_fol": "\u2200x (FootballClub(x) \u2192 \u00acPlaysFor(ailtonsilva, x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 201,
        "story_id": 10072,
        "context": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazillian footballer who plays for Nautico.",
            "Nautico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "context_fol": [
            "BornIn(ailtonsilva, y1995) \u2227 CommonlyKnownAs(ailtonsilva, ailton)",
            "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)",
            "Brazilian(ailtonsilva) \u2227 Footballplayer(ailtonsilva) \u2227 PlaysFor(ailtonsilva, nautico)",
            "FootballClub(nautico) \u2227 FootballClub(braga)",
            "FootballClub(fluminense)"
        ],
        "conclusion": "Ailton was not loaned out to a football club.",
        "conclusion_fol": "\u2200x (FootballClub(x) \u2192 \u00acLoanedTo(ailton, x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "example_id": 202,
        "story_id": 10072,
        "context": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazillian footballer who plays for Nautico.",
            "Nautico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "context_fol": [
            "BornIn(ailtonsilva, y1995) \u2227 CommonlyKnownAs(ailtonsilva, ailton)",
            "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)",
            "Brazilian(ailtonsilva) \u2227 Footballplayer(ailtonsilva) \u2227 PlaysFor(ailtonsilva, nautico)",
            "FootballClub(nautico) \u2227 FootballClub(braga)",
            "FootballClub(fluminense)"
        ],
        "conclusion": "Ailton Silva played for Fluminense.",
        "conclusion_fol": "PlaysFor(ailtonsilva, fluminense)",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "example_id": 203,
        "story_id": 10072,
        "context": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazillian footballer who plays for Nautico.",
            "Nautico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "context_fol": [
            "BornIn(ailtonsilva, y1995) \u2227 CommonlyKnownAs(ailtonsilva, ailton)",
            "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)",
            "Brazilian(ailtonsilva) \u2227 Footballplayer(ailtonsilva) \u2227 PlaysFor(ailtonsilva, nautico)",
            "FootballClub(nautico) \u2227 FootballClub(braga)",
            "FootballClub(fluminense)"
        ],
        "conclusion": "Ailton Silva was loaned out to a football club.",
        "conclusion_fol": "\u2203x (FootballClub(x) \u2227 LoanedTo(ailtonsilva, x))",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    }
]