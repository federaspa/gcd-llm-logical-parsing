[
    {
        "id": 1131,
        "story_id": 406,
        "context": [
            "All people who regularly drink coffee are dependent on caffeine.",
            "People either regularly drink coffee or joke about being addicted to caffeine.",
            "No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.",
            "Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.",
            "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. "
        ],
        "context_fol": [
            "\u2200x (Drinks(x) \u2192 Dependent(x))",
            "\u2200x (Drinks(x) \u2295 Jokes(x))",
            "\u2200x (Jokes(x) \u2192 \u00acUnaware(x))",
            "(Student(rina) \u2227 Unaware(rina)) \u2295 \u00ac(Student(rina) \u2228 Unaware(rina))",
            "\u00ac(Dependent(rina) \u2227 Student(rina)) \u2192 (Dependent(rina) \u2227 Student(rina)) \u2295 \u00ac(Dependent(rina) \u2228 Student(rina))"
        ],
        "question": "Rina is a person who jokes about being addicted to caffeine or unaware that caffeine is a drug.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1132,
        "story_id": 406,
        "context": [
            "All people who regularly drink coffee are dependent on caffeine.",
            "People either regularly drink coffee or joke about being addicted to caffeine.",
            "No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.",
            "Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.",
            "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. "
        ],
        "context_fol": [
            "\u2200x (Drinks(x) \u2192 Dependent(x))",
            "\u2200x (Drinks(x) \u2295 Jokes(x))",
            "\u2200x (Jokes(x) \u2192 \u00acUnaware(x))",
            "(Student(rina) \u2227 Unaware(rina)) \u2295 \u00ac(Student(rina) \u2228 Unaware(rina))",
            "\u00ac(Dependent(rina) \u2227 Student(rina)) \u2192 (Dependent(rina) \u2227 Student(rina)) \u2295 \u00ac(Dependent(rina) \u2228 Student(rina))"
        ],
        "question": "Rina is either a person who jokes about being addicted to caffeine or is unaware that caffeine is a drug.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1133,
        "story_id": 406,
        "context": [
            "All people who regularly drink coffee are dependent on caffeine.",
            "People either regularly drink coffee or joke about being addicted to caffeine.",
            "No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.",
            "Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.",
            "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. "
        ],
        "context_fol": [
            "\u2200x (Drinks(x) \u2192 Dependent(x))",
            "\u2200x (Drinks(x) \u2295 Jokes(x))",
            "\u2200x (Jokes(x) \u2192 \u00acUnaware(x))",
            "(Student(rina) \u2227 Unaware(rina)) \u2295 \u00ac(Student(rina) \u2228 Unaware(rina))",
            "\u00ac(Dependent(rina) \u2227 Student(rina)) \u2192 (Dependent(rina) \u2227 Student(rina)) \u2295 \u00ac(Dependent(rina) \u2228 Student(rina))"
        ],
        "question": "Rina is either a person who regularly drinks coffee or a person who is unaware that caffeine is a drug.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1134,
        "story_id": 406,
        "context": [
            "All people who regularly drink coffee are dependent on caffeine.",
            "People either regularly drink coffee or joke about being addicted to caffeine.",
            "No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.",
            "Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.",
            "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. "
        ],
        "context_fol": [
            "\u2200x (Drinks(x) \u2192 Dependent(x))",
            "\u2200x (Drinks(x) \u2295 Jokes(x))",
            "\u2200x (Jokes(x) \u2192 \u00acUnaware(x))",
            "(Student(rina) \u2227 Unaware(rina)) \u2295 \u00ac(Student(rina) \u2228 Unaware(rina))",
            "\u00ac(Dependent(rina) \u2227 Student(rina)) \u2192 (Dependent(rina) \u2227 Student(rina)) \u2295 \u00ac(Dependent(rina) \u2228 Student(rina))"
        ],
        "question": "If Rina is either a person who jokes about being addicted to caffeine and a person who is unaware that caffeine is a drug, or neither a person who jokes about being addicted to caffeine nor a person who is unaware that caffeine is a drug, then Rina jokes about being addicted to caffeine and regularly drinks coffee.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 20,
        "story_id": 8,
        "context": [
            "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
            "Any choral conductor is a musician.",
            "Some musicians love music.",
            "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
        ],
        "context_fol": [
            "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)",
            "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
            "\u2203x (Musician(x) \u2192 Love(x, music))",
            "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)"
        ],
        "question": "Miroslav Venhoda loved music.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 21,
        "story_id": 8,
        "context": [
            "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
            "Any choral conductor is a musician.",
            "Some musicians love music.",
            "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
        ],
        "context_fol": [
            "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)",
            "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
            "\u2203x (Musician(x) \u2192 Love(x, music))",
            "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)"
        ],
        "question": "A Czech person wrote a book in 1946.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 22,
        "story_id": 8,
        "context": [
            "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
            "Any choral conductor is a musician.",
            "Some musicians love music.",
            "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."
        ],
        "context_fol": [
            "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)",
            "\u2200x (ChoralConductor(x) \u2192 Musician(x))",
            "\u2203x (Musician(x) \u2192 Love(x, music))",
            "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)"
        ],
        "question": "No choral conductor specialized in the performance of Renaissance.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1341,
        "story_id": 463,
        "context": [
            "All eels are fish. ",
            "No fish are plants. ",
            "A thing is either a plant or animal.",
            "Nothing that breathes is paper. ",
            "All animals breathe.",
            "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal."
        ],
        "context_fol": [
            "\u2200x  (Eel (x)\u2192  Fish (x))",
            "\u2200x  (Fish (x)\u2192 \u00ac Plant (x))",
            "\u2200x ( Plant (x) \u2228  Animal (x))",
            "\u2200x  (Breathe (x)\u2192 \u00ac Paper (x))",
            "\u2200x  (Animal (x)\u2192  Breathe (x))",
            " Eel (seaEel) \u2295 Plant (seaEel) \u2192 Eel (seaEel) \u2228 Animal (seaEel) "
        ],
        "question": "Sea eel is an eel.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1342,
        "story_id": 463,
        "context": [
            "All eels are fish. ",
            "No fish are plants. ",
            "A thing is either a plant or animal.",
            "Nothing that breathes is paper. ",
            "All animals breathe.",
            "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal."
        ],
        "context_fol": [
            "\u2200x  (Eel (x)\u2192  Fish (x))",
            "\u2200x  (Fish (x)\u2192 \u00ac Plant (x))",
            "\u2200x ( Plant (x) \u2228  Animal (x))",
            "\u2200x  (Breathe (x)\u2192 \u00ac Paper (x))",
            "\u2200x  (Animal (x)\u2192  Breathe (x))",
            " Eel (seaEel) \u2295 Plant (seaEel) \u2192 Eel (seaEel) \u2228 Animal (seaEel) "
        ],
        "question": "Sea eel is a paper.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1343,
        "story_id": 463,
        "context": [
            "All eels are fish. ",
            "No fish are plants. ",
            "A thing is either a plant or animal.",
            "Nothing that breathes is paper. ",
            "All animals breathe.",
            "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal."
        ],
        "context_fol": [
            "\u2200x  (Eel (x)\u2192  Fish (x))",
            "\u2200x  (Fish (x)\u2192 \u00ac Plant (x))",
            "\u2200x ( Plant (x) \u2228  Animal (x))",
            "\u2200x  (Breathe (x)\u2192 \u00ac Paper (x))",
            "\u2200x  (Animal (x)\u2192  Breathe (x))",
            " Eel (seaEel) \u2295 Plant (seaEel) \u2192 Eel (seaEel) \u2228 Animal (seaEel) "
        ],
        "question": "Sea eel breathes or is a paper.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 393,
        "story_id": 133,
        "context": [
            "The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.",
            "The Blake McFall Company Building was added to the National Register of Historic Places in 1990.",
            "The Emmet Building is a five-story building in Portland, Oregon.",
            "The Emmet Building was built in 1915.",
            "The Emmet Building is another name for the Blake McFall Company Building.",
            "John works at the Emmet Building."
        ],
        "context_fol": [
            "\u2200x (Blake(x) \u2192 Building(x))",
            "\u2200x (Blake(x) \u2192 Historic(x, year1990))",
            "\u2200x (Emmet(x) \u2192 Building(x) \u2227 FiveStory(x) \u2227 Locate(x, portland))",
            "\u2200x (Emmet(x) \u2192 Construct(x, year1915))",
            "\u2200x (Emmet(x) \u2194 Blake(x))",
            "\u2203x (Emmet(x) \u2227 Work(john, x))"
        ],
        "question": "A five-story building is built in 1915.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 394,
        "story_id": 133,
        "context": [
            "The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.",
            "The Blake McFall Company Building was added to the National Register of Historic Places in 1990.",
            "The Emmet Building is a five-story building in Portland, Oregon.",
            "The Emmet Building was built in 1915.",
            "The Emmet Building is another name for the Blake McFall Company Building.",
            "John works at the Emmet Building."
        ],
        "context_fol": [
            "\u2200x (Blake(x) \u2192 Building(x))",
            "\u2200x (Blake(x) \u2192 Historic(x, year1990))",
            "\u2200x (Emmet(x) \u2192 Building(x) \u2227 FiveStory(x) \u2227 Locate(x, portland))",
            "\u2200x (Emmet(x) \u2192 Construct(x, year1915))",
            "\u2200x (Emmet(x) \u2194 Blake(x))",
            "\u2203x (Emmet(x) \u2227 Work(john, x))"
        ],
        "question": "The Blake McFall Company Building is located in Portland, Oregon.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 395,
        "story_id": 133,
        "context": [
            "The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.",
            "The Blake McFall Company Building was added to the National Register of Historic Places in 1990.",
            "The Emmet Building is a five-story building in Portland, Oregon.",
            "The Emmet Building was built in 1915.",
            "The Emmet Building is another name for the Blake McFall Company Building.",
            "John works at the Emmet Building."
        ],
        "context_fol": [
            "\u2200x (Blake(x) \u2192 Building(x))",
            "\u2200x (Blake(x) \u2192 Historic(x, year1990))",
            "\u2200x (Emmet(x) \u2192 Building(x) \u2227 FiveStory(x) \u2227 Locate(x, portland))",
            "\u2200x (Emmet(x) \u2192 Construct(x, year1915))",
            "\u2200x (Emmet(x) \u2194 Blake(x))",
            "\u2203x (Emmet(x) \u2227 Work(john, x))"
        ],
        "question": "John started his current job in 1990.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 640,
        "story_id": 226,
        "context": [
            "William Dickinson was a British politician who sat in the House of Commons",
            "William Dickinson attended Westminster school for high school and then the University of Edinburgh.",
            "The University of Edinburgh is a university located in the United Kingdom.",
            "William Dickinson supported the Portland Whigs.",
            "People who supported the Portland Whigs did not get a seat in the Parliament."
        ],
        "context_fol": [
            "BritishPolitician(williamdickinson) \u2227 SatInHouseOfCommons(williamdickinson)",
            "Attended(williamdickinson, westminster) \u2227 Highschool(westminster) \u2227 Attended(williamdickinson, universityofedinburgh)",
            "LocatedIn(universityofedinburgh, unitedkingdom) \u2227 University(universityofedinburgh)",
            "Supported(williamdickinson, portlandwhigs)",
            "\u2200x (Supported(x, portlandwhigs) \u2192 \u00acSeatInParliament(x))"
        ],
        "question": "William Dickinson did not get a seat in the Parliament.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 641,
        "story_id": 226,
        "context": [
            "William Dickinson was a British politician who sat in the House of Commons",
            "William Dickinson attended Westminster school for high school and then the University of Edinburgh.",
            "The University of Edinburgh is a university located in the United Kingdom.",
            "William Dickinson supported the Portland Whigs.",
            "People who supported the Portland Whigs did not get a seat in the Parliament."
        ],
        "context_fol": [
            "BritishPolitician(williamdickinson) \u2227 SatInHouseOfCommons(williamdickinson)",
            "Attended(williamdickinson, westminster) \u2227 Highschool(westminster) \u2227 Attended(williamdickinson, universityofedinburgh)",
            "LocatedIn(universityofedinburgh, unitedkingdom) \u2227 University(universityofedinburgh)",
            "Supported(williamdickinson, portlandwhigs)",
            "\u2200x (Supported(x, portlandwhigs) \u2192 \u00acSeatInParliament(x))"
        ],
        "question": "William Dickinson went to schools located in the United Kingdom for both high school and university.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 642,
        "story_id": 226,
        "context": [
            "William Dickinson was a British politician who sat in the House of Commons",
            "William Dickinson attended Westminster school for high school and then the University of Edinburgh.",
            "The University of Edinburgh is a university located in the United Kingdom.",
            "William Dickinson supported the Portland Whigs.",
            "People who supported the Portland Whigs did not get a seat in the Parliament."
        ],
        "context_fol": [
            "BritishPolitician(williamdickinson) \u2227 SatInHouseOfCommons(williamdickinson)",
            "Attended(williamdickinson, westminster) \u2227 Highschool(westminster) \u2227 Attended(williamdickinson, universityofedinburgh)",
            "LocatedIn(universityofedinburgh, unitedkingdom) \u2227 University(universityofedinburgh)",
            "Supported(williamdickinson, portlandwhigs)",
            "\u2200x (Supported(x, portlandwhigs) \u2192 \u00acSeatInParliament(x))"
        ],
        "question": "William Dickinson attended university in the United Kingdom.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 643,
        "story_id": 226,
        "context": [
            "William Dickinson was a British politician who sat in the House of Commons",
            "William Dickinson attended Westminster school for high school and then the University of Edinburgh.",
            "The University of Edinburgh is a university located in the United Kingdom.",
            "William Dickinson supported the Portland Whigs.",
            "People who supported the Portland Whigs did not get a seat in the Parliament."
        ],
        "context_fol": [
            "BritishPolitician(williamdickinson) \u2227 SatInHouseOfCommons(williamdickinson)",
            "Attended(williamdickinson, westminster) \u2227 Highschool(westminster) \u2227 Attended(williamdickinson, universityofedinburgh)",
            "LocatedIn(universityofedinburgh, unitedkingdom) \u2227 University(universityofedinburgh)",
            "Supported(williamdickinson, portlandwhigs)",
            "\u2200x (Supported(x, portlandwhigs) \u2192 \u00acSeatInParliament(x))"
        ],
        "question": "William Dickinson sat in the House of Commons.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 695,
        "story_id": 247,
        "context": [
            "LanguageA is a universal language",
            "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
            "Katya cannot communicate with Danil.",
            "Katya knows LanguageA. "
        ],
        "context_fol": [
            "UniversalLanguage(languageA)",
            "\u2200x \u2200y (\u2203z (Know(x, z) \u2227 Know(y, z) \u2227 UniversalLanguage(z)) \u2192 Communicate(x, y))",
            "Know(katya, languageA)",
            "\u00acCommunicate(katya, danil)"
        ],
        "question": "Danil knows LanguageA.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1197,
        "story_id": 422,
        "context": [
            "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
            "Some customers go to cinemas every week",
            "Customers either subscribe to AMC service or HBO service. ",
            "Customers who prefer TV series more and will not watch TV series in cinemas.",
            "All customers who subscribe to HBO services prefer TV series to movies. ",
            "James watches TV series in cinemas. "
        ],
        "context_fol": [
            "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
            "\u2203x (CinemaEveryWeek(x))",
            "\u2200x (AMC(x) \u2228 HBO(x))",
            "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
            "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
            "WatchTVInCinema(james)"
        ],
        "question": "James goes to cinemas every week.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1198,
        "story_id": 422,
        "context": [
            "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
            "Some customers go to cinemas every week",
            "Customers either subscribe to AMC service or HBO service. ",
            "Customers who prefer TV series more and will not watch TV series in cinemas.",
            "All customers who subscribe to HBO services prefer TV series to movies. ",
            "James watches TV series in cinemas. "
        ],
        "context_fol": [
            "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
            "\u2203x (CinemaEveryWeek(x))",
            "\u2200x (AMC(x) \u2228 HBO(x))",
            "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
            "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
            "WatchTVInCinema(james)"
        ],
        "question": "James does not go to cinemas every week.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1199,
        "story_id": 422,
        "context": [
            "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
            "Some customers go to cinemas every week",
            "Customers either subscribe to AMC service or HBO service. ",
            "Customers who prefer TV series more and will not watch TV series in cinemas.",
            "All customers who subscribe to HBO services prefer TV series to movies. ",
            "James watches TV series in cinemas. "
        ],
        "context_fol": [
            "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
            "\u2203x (CinemaEveryWeek(x))",
            "\u2200x (AMC(x) \u2228 HBO(x))",
            "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
            "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
            "WatchTVInCinema(james)"
        ],
        "question": "James goes to cinemas every week or watches 3 movies every week without any additional fees.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1200,
        "story_id": 422,
        "context": [
            "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
            "Some customers go to cinemas every week",
            "Customers either subscribe to AMC service or HBO service. ",
            "Customers who prefer TV series more and will not watch TV series in cinemas.",
            "All customers who subscribe to HBO services prefer TV series to movies. ",
            "James watches TV series in cinemas. "
        ],
        "context_fol": [
            "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
            "\u2203x (CinemaEveryWeek(x))",
            "\u2200x (AMC(x) \u2228 HBO(x))",
            "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
            "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
            "WatchTVInCinema(james)"
        ],
        "question": "If James does not both go to cinemas every week and subscribe to HBO service, then James is either available to watch 3 movies every week without any additional fees or he prefers TV more.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1201,
        "story_id": 422,
        "context": [
            "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
            "Some customers go to cinemas every week",
            "Customers either subscribe to AMC service or HBO service. ",
            "Customers who prefer TV series more and will not watch TV series in cinemas.",
            "All customers who subscribe to HBO services prefer TV series to movies. ",
            "James watches TV series in cinemas. "
        ],
        "context_fol": [
            "\u2200x (AMC(x) \u2192 ThreeMovies(x))",
            "\u2203x (CinemaEveryWeek(x))",
            "\u2200x (AMC(x) \u2228 HBO(x))",
            "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))",
            "\u2200x (HBO(x) \u2192 PreferTVSeries(x))",
            "WatchTVInCinema(james)"
        ],
        "question": "If James is available to watch 3 movies every week without any additional fees and he watches TV series in cinemas, then he goes to cinemas every week and prefers TV series more.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 553,
        "story_id": 193,
        "context": [
            "A La Liga soccer team ranks higher than another if it receives more points.",
            "If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.",
            "Real Madrid and Barcelona are both La Liga soccer teams.",
            "In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.",
            "In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them."
        ],
        "context_fol": [
            "\u2200x \u2200y (LaLiga(x) \u2227 LaLiga(y) \u2227 MorePoints(x, y) \u2192 HigherRank(x, y))",
            "\u2200x \u2200y (LaLiga(x) \u2227 LaLiga(y) \u2227 \u00acMorePoints(x, y) \u2227 \u00acMorePoints(y, x) \u2227 MorePointsInGameBetween(x, y) \u2192 HigherRank(x, y))",
            "LaLiga(realMadrid) \u2227 LaLiga(barcelona)",
            "MorePoints(realMadrid, barcelona)",
            "\u00acMorePointsInGameBetween(realMadrid, barcelona) \u2227 \u00acMorePointsInGameBetween(barcelona, realMadrid)"
        ],
        "question": "In La Liga 2021-2022, Real Madrid ranks higher than Barcelona.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 554,
        "story_id": 193,
        "context": [
            "A La Liga soccer team ranks higher than another if it receives more points.",
            "If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.",
            "Real Madrid and Barcelona are both La Liga soccer teams.",
            "In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.",
            "In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them."
        ],
        "context_fol": [
            "\u2200x \u2200y (LaLiga(x) \u2227 LaLiga(y) \u2227 MorePoints(x, y) \u2192 HigherRank(x, y))",
            "\u2200x \u2200y (LaLiga(x) \u2227 LaLiga(y) \u2227 \u00acMorePoints(x, y) \u2227 \u00acMorePoints(y, x) \u2227 MorePointsInGameBetween(x, y) \u2192 HigherRank(x, y))",
            "LaLiga(realMadrid) \u2227 LaLiga(barcelona)",
            "MorePoints(realMadrid, barcelona)",
            "\u00acMorePointsInGameBetween(realMadrid, barcelona) \u2227 \u00acMorePointsInGameBetween(barcelona, realMadrid)"
        ],
        "question": "In La Liga 2021-2022, Barcelona ranks higher than Real Madrid.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 250,
        "story_id": 82,
        "context": [
            "Lawton Park is a neighbourhood in Seattle. ",
            "All citizens of Lawton Park use the zip code 98199. ",
            "Tom is a citizen of Lawton Park.",
            "Daniel uses the zip code 98199. "
        ],
        "context_fol": [
            "Neighbourhoodin(lawtonPark, seattle)",
            "\u2200x (Citizenof(x, lawtonPark) \u2192 Usezipcode(x, number98199))",
            "Citizenof(tom, lawtonPark)",
            "Usezipcode(daniel, number98199)"
        ],
        "question": "Tom uses the zip code 98199.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 251,
        "story_id": 82,
        "context": [
            "Lawton Park is a neighbourhood in Seattle. ",
            "All citizens of Lawton Park use the zip code 98199. ",
            "Tom is a citizen of Lawton Park.",
            "Daniel uses the zip code 98199. "
        ],
        "context_fol": [
            "Neighbourhoodin(lawtonPark, seattle)",
            "\u2200x (Citizenof(x, lawtonPark) \u2192 Usezipcode(x, number98199))",
            "Citizenof(tom, lawtonPark)",
            "Usezipcode(daniel, number98199)"
        ],
        "question": "Tom doesn't use the zip code 98199.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 252,
        "story_id": 82,
        "context": [
            "Lawton Park is a neighbourhood in Seattle. ",
            "All citizens of Lawton Park use the zip code 98199. ",
            "Tom is a citizen of Lawton Park.",
            "Daniel uses the zip code 98199. "
        ],
        "context_fol": [
            "Neighbourhoodin(lawtonPark, seattle)",
            "\u2200x (Citizenof(x, lawtonPark) \u2192 Usezipcode(x, number98199))",
            "Citizenof(tom, lawtonPark)",
            "Usezipcode(daniel, number98199)"
        ],
        "question": "Tom is a citizen of Washington.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 253,
        "story_id": 82,
        "context": [
            "Lawton Park is a neighbourhood in Seattle. ",
            "All citizens of Lawton Park use the zip code 98199. ",
            "Tom is a citizen of Lawton Park.",
            "Daniel uses the zip code 98199. "
        ],
        "context_fol": [
            "Neighbourhoodin(lawtonPark, seattle)",
            "\u2200x (Citizenof(x, lawtonPark) \u2192 Usezipcode(x, number98199))",
            "Citizenof(tom, lawtonPark)",
            "Usezipcode(daniel, number98199)"
        ],
        "question": "Daniel is a citizen of Lawton Park.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 262,
        "story_id": 86,
        "context": [
            "If a legislator is found guilty of stealing government funds, they will be suspended from office.",
            "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.",
            "Tiffany T. Alston was found guilty of stealing government funds in 2012."
        ],
        "context_fol": [
            "\u2200x (IsLegislator(x) \u2227 StealsFunds(x) \u2192 Suspended(x))",
            "IsLegislator(tiffanyTAlston)",
            "StealsFunds(tiffanyTAlston)"
        ],
        "question": "Tiffany T. Alston was suspended from the Maryland House of Delegates.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 263,
        "story_id": 86,
        "context": [
            "If a legislator is found guilty of stealing government funds, they will be suspended from office.",
            "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.",
            "Tiffany T. Alston was found guilty of stealing government funds in 2012."
        ],
        "context_fol": [
            "\u2200x (IsLegislator(x) \u2227 StealsFunds(x) \u2192 Suspended(x))",
            "IsLegislator(tiffanyTAlston)",
            "StealsFunds(tiffanyTAlston)"
        ],
        "question": "Tiffany T. Alston was not suspended from the Maryland House of Delegates.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 264,
        "story_id": 86,
        "context": [
            "If a legislator is found guilty of stealing government funds, they will be suspended from office.",
            "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.",
            "Tiffany T. Alston was found guilty of stealing government funds in 2012."
        ],
        "context_fol": [
            "\u2200x (IsLegislator(x) \u2227 StealsFunds(x) \u2192 Suspended(x))",
            "IsLegislator(tiffanyTAlston)",
            "StealsFunds(tiffanyTAlston)"
        ],
        "question": "Tiffany T. Alston went to prison for stealing government funds.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 494,
        "story_id": 171,
        "context": [
            "Some fish may sting.",
            "Stonefish is a fish.",
            "It stings to step on a stonefish.",
            "Stonefish stings cause death if not treated.",
            "To treat stonefish stings, apply heat to the affected area or use an antivenom."
        ],
        "context_fol": [
            "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))",
            "Fish(stonefish)",
            "\u2200x (StepOn(stonefish, x) \u2192 Sting(stonefish, x))",
            "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeath(x))",
            "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeat(x) \u2228 UseAntivenom(x)) \u2192 Treated(x))"
        ],
        "question": "If you step on a stonefish and don\u2019t use an antivenom, it will cause death.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 495,
        "story_id": 171,
        "context": [
            "Some fish may sting.",
            "Stonefish is a fish.",
            "It stings to step on a stonefish.",
            "Stonefish stings cause death if not treated.",
            "To treat stonefish stings, apply heat to the affected area or use an antivenom."
        ],
        "context_fol": [
            "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))",
            "Fish(stonefish)",
            "\u2200x (StepOn(stonefish, x) \u2192 Sting(stonefish, x))",
            "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeath(x))",
            "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeat(x) \u2228 UseAntivenom(x)) \u2192 Treated(x))"
        ],
        "question": "Stings of some fish can cause death if not treated.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 496,
        "story_id": 171,
        "context": [
            "Some fish may sting.",
            "Stonefish is a fish.",
            "It stings to step on a stonefish.",
            "Stonefish stings cause death if not treated.",
            "To treat stonefish stings, apply heat to the affected area or use an antivenom."
        ],
        "context_fol": [
            "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))",
            "Fish(stonefish)",
            "\u2200x (StepOn(stonefish, x) \u2192 Sting(stonefish, x))",
            "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeath(x))",
            "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeat(x) \u2228 UseAntivenom(x)) \u2192 Treated(x))"
        ],
        "question": "If you step on a stonefish and apply heat to the affected area, stings will cause death.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1178,
        "story_id": 417,
        "context": [
            "Some monitors produced by LG have a type-c port.",
            "If the monitor has a type-c port, then it is not produced by AOC.",
            "All monitors in the library are produced by AOC. ",
            "L-2021 is either in the library or has a type-c port.",
            "L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG."
        ],
        "context_fol": [
            "\u2203x (LG(x) \u2227 TypeC(x))",
            "\u2200x (TypeC(x) \u2192 \u00acAOC(x))",
            "\u2200x (Library(x) \u2192 AOC(x))",
            "Library(l-2021) \u2295 TypeC(l-2021) ",
            "\u00ac(AOC(l-2021) \u2295 LG(l-2021))"
        ],
        "question": "L-2021 is in the library.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1179,
        "story_id": 417,
        "context": [
            "Some monitors produced by LG have a type-c port.",
            "If the monitor has a type-c port, then it is not produced by AOC.",
            "All monitors in the library are produced by AOC. ",
            "L-2021 is either in the library or has a type-c port.",
            "L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG."
        ],
        "context_fol": [
            "\u2203x (LG(x) \u2227 TypeC(x))",
            "\u2200x (TypeC(x) \u2192 \u00acAOC(x))",
            "\u2200x (Library(x) \u2192 AOC(x))",
            "Library(l-2021) \u2295 TypeC(l-2021) ",
            "\u00ac(AOC(l-2021) \u2295 LG(l-2021))"
        ],
        "question": "L-2021 is either in the library or produced by LG.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1180,
        "story_id": 417,
        "context": [
            "Some monitors produced by LG have a type-c port.",
            "If the monitor has a type-c port, then it is not produced by AOC.",
            "All monitors in the library are produced by AOC. ",
            "L-2021 is either in the library or has a type-c port.",
            "L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG."
        ],
        "context_fol": [
            "\u2203x (LG(x) \u2227 TypeC(x))",
            "\u2200x (TypeC(x) \u2192 \u00acAOC(x))",
            "\u2200x (Library(x) \u2192 AOC(x))",
            "Library(l-2021) \u2295 TypeC(l-2021) ",
            "\u00ac(AOC(l-2021) \u2295 LG(l-2021))"
        ],
        "question": "L-2021 either has a type-c port or is produced by LG.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1181,
        "story_id": 417,
        "context": [
            "Some monitors produced by LG have a type-c port.",
            "If the monitor has a type-c port, then it is not produced by AOC.",
            "All monitors in the library are produced by AOC. ",
            "L-2021 is either in the library or has a type-c port.",
            "L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG."
        ],
        "context_fol": [
            "\u2203x (LG(x) \u2227 TypeC(x))",
            "\u2200x (TypeC(x) \u2192 \u00acAOC(x))",
            "\u2200x (Library(x) \u2192 AOC(x))",
            "Library(l-2021) \u2295 TypeC(l-2021) ",
            "\u00ac(AOC(l-2021) \u2295 LG(l-2021))"
        ],
        "question": "If L-2021 is either in the library and produced by LG, or neither in the library nor produced by LG,  then L-2021 neither has a type-c port nor is produced by LG.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1182,
        "story_id": 417,
        "context": [
            "Some monitors produced by LG have a type-c port.",
            "If the monitor has a type-c port, then it is not produced by AOC.",
            "All monitors in the library are produced by AOC. ",
            "L-2021 is either in the library or has a type-c port.",
            "L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG."
        ],
        "context_fol": [
            "\u2203x (LG(x) \u2227 TypeC(x))",
            "\u2200x (TypeC(x) \u2192 \u00acAOC(x))",
            "\u2200x (Library(x) \u2192 AOC(x))",
            "Library(l-2021) \u2295 TypeC(l-2021) ",
            "\u00ac(AOC(l-2021) \u2295 LG(l-2021))"
        ],
        "question": "If L-2021 is either produced by LG and produced by AOC or neither produced by LG nor produced by AOC,  then L-2021 is either in the library or produced by LG.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1010,
        "story_id": 377,
        "context": [
            "People eat meat regularly or are vegetation.",
            "If people eat meat regularly, then they enjoy eating hamburgers and steaks.",
            "All people who are vegetarian are conscious of the environment or their health.",
            "If people are conscious about the environment or their health, then they do not go to fast food places often.",
            "If people have busy schedules without time to cook, then they go to fast food places often.",
            "If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often."
        ],
        "context_fol": [
            "\u2200x (Meat(x) \u2228 Vegetarian(x))",
            "\u2200x (Meat(x) \u2192 Hamburgers(x))",
            "\u2200x (Vegetarian(x) \u2192 Conscious(x))",
            "\u2200x (Conscious(x) \u2192 \u00acFastFood(x))",
            "\u2200x (Busy(x) \u2192 FastFood(x))",
            "\u00ac(FastFood(jeremy) \u2227 Conscious(jeremy)) \u2192 FastFood(jeremy)"
        ],
        "question": "Jeremy has a busy schedule without time to cook.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1011,
        "story_id": 377,
        "context": [
            "People eat meat regularly or are vegetation.",
            "If people eat meat regularly, then they enjoy eating hamburgers and steaks.",
            "All people who are vegetarian are conscious of the environment or their health.",
            "If people are conscious about the environment or their health, then they do not go to fast food places often.",
            "If people have busy schedules without time to cook, then they go to fast food places often.",
            "If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often."
        ],
        "context_fol": [
            "\u2200x (Meat(x) \u2228 Vegetarian(x))",
            "\u2200x (Meat(x) \u2192 Hamburgers(x))",
            "\u2200x (Vegetarian(x) \u2192 Conscious(x))",
            "\u2200x (Conscious(x) \u2192 \u00acFastFood(x))",
            "\u2200x (Busy(x) \u2192 FastFood(x))",
            "\u00ac(FastFood(jeremy) \u2227 Conscious(jeremy)) \u2192 FastFood(jeremy)"
        ],
        "question": "Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1012,
        "story_id": 377,
        "context": [
            "People eat meat regularly or are vegetation.",
            "If people eat meat regularly, then they enjoy eating hamburgers and steaks.",
            "All people who are vegetarian are conscious of the environment or their health.",
            "If people are conscious about the environment or their health, then they do not go to fast food places often.",
            "If people have busy schedules without time to cook, then they go to fast food places often.",
            "If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often."
        ],
        "context_fol": [
            "\u2200x (Meat(x) \u2228 Vegetarian(x))",
            "\u2200x (Meat(x) \u2192 Hamburgers(x))",
            "\u2200x (Vegetarian(x) \u2192 Conscious(x))",
            "\u2200x (Conscious(x) \u2192 \u00acFastFood(x))",
            "\u2200x (Busy(x) \u2192 FastFood(x))",
            "\u00ac(FastFood(jeremy) \u2227 Conscious(jeremy)) \u2192 FastFood(jeremy)"
        ],
        "question": "If Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks, then Jeremy neither has a busy schedule without having time to cook nor enjoys eating hamburgers and steaks.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 521,
        "story_id": 180,
        "context": [
            "Sam is doing a project.",
            "A project is written either in C++ or in Python.",
            "If Sam does a project written in Python, he will not use a Mac.",
            "Sam is using a Mac.",
            "If Sam uses a Mac, he will play a song.",
            "If a song is not \"Perfect\", Sam will never play it."
        ],
        "context_fol": [
            "\u2203x (Project(x) \u2227 Do(sam, x))",
            " \u2200x (Project(x) \u2192 (WrittenIn(x, python) \u2295 WrittenIn(x, c++)))",
            " \u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))",
            " Use(sam, mac)",
            " Use(sam, mac) \u2192 \u2203x (Song(x) \u2227 Play(sam, x))",
            " \u2200x (\u00acBe(x, perfect) \u2192 \u00acPlay(sam, x))"
        ],
        "question": "The project Sam is doing is written in C++.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 522,
        "story_id": 180,
        "context": [
            "Sam is doing a project.",
            "A project is written either in C++ or in Python.",
            "If Sam does a project written in Python, he will not use a Mac.",
            "Sam is using a Mac.",
            "If Sam uses a Mac, he will play a song.",
            "If a song is not \"Perfect\", Sam will never play it."
        ],
        "context_fol": [
            "\u2203x (Project(x) \u2227 Do(sam, x))",
            " \u2200x (Project(x) \u2192 (WrittenIn(x, python) \u2295 WrittenIn(x, c++)))",
            " \u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))",
            " Use(sam, mac)",
            " Use(sam, mac) \u2192 \u2203x (Song(x) \u2227 Play(sam, x))",
            " \u2200x (\u00acBe(x, perfect) \u2192 \u00acPlay(sam, x))"
        ],
        "question": "The song Sam is playing is \"Perfect\".",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 523,
        "story_id": 180,
        "context": [
            "Sam is doing a project.",
            "A project is written either in C++ or in Python.",
            "If Sam does a project written in Python, he will not use a Mac.",
            "Sam is using a Mac.",
            "If Sam uses a Mac, he will play a song.",
            "If a song is not \"Perfect\", Sam will never play it."
        ],
        "context_fol": [
            "\u2203x (Project(x) \u2227 Do(sam, x))",
            " \u2200x (Project(x) \u2192 (WrittenIn(x, python) \u2295 WrittenIn(x, c++)))",
            " \u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))",
            " Use(sam, mac)",
            " Use(sam, mac) \u2192 \u2203x (Song(x) \u2227 Play(sam, x))",
            " \u2200x (\u00acBe(x, perfect) \u2192 \u00acPlay(sam, x))"
        ],
        "question": "If a song is \"Perfect\", Sam will play it.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 703,
        "story_id": 254,
        "context": [
            "All rabbits have fur",
            "Some pets are rabbits."
        ],
        "context_fol": [
            "\u2200x (Rabbit(x) \u2192 HasFur(x))",
            "\u2203x (Pet(x) \u2227 Reptile(x))"
        ],
        "question": "Some pets do not have fur.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1390,
        "story_id": 477,
        "context": [
            "All video applications are software.",
            "All YouTube-related applications are video applications. ",
            "An APP is either related to YouTube or Instagram.",
            "All Instagram is entertainment. ",
            "All software is programmed. ",
            "All entertainments are interesting.",
            "If something is interesting, then it is good.",
            "TikTok is not good."
        ],
        "context_fol": [
            "\u2200x (App(x) \u2192 Software(x))",
            "\u2200x (Youtube(x) \u2192 App(x))",
            "\u2200x (Youtube(x) \u2228 Instagram(x))",
            "\u2200x (Instagram(x) \u2192 Entertainment(x))",
            "\u2200x (Software(x) \u2192 Program(x))",
            "\u2200x (Entertainment(x) \u2192 Interesting(x))",
            "\u2200x (Interesting(x) \u2192 Good(x))",
            "\u00acGood(tiktok)"
        ],
        "question": "Tiktok is a program.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1391,
        "story_id": 477,
        "context": [
            "All video applications are software.",
            "All YouTube-related applications are video applications. ",
            "An APP is either related to YouTube or Instagram.",
            "All Instagram is entertainment. ",
            "All software is programmed. ",
            "All entertainments are interesting.",
            "If something is interesting, then it is good.",
            "TikTok is not good."
        ],
        "context_fol": [
            "\u2200x (App(x) \u2192 Software(x))",
            "\u2200x (Youtube(x) \u2192 App(x))",
            "\u2200x (Youtube(x) \u2228 Instagram(x))",
            "\u2200x (Instagram(x) \u2192 Entertainment(x))",
            "\u2200x (Software(x) \u2192 Program(x))",
            "\u2200x (Entertainment(x) \u2192 Interesting(x))",
            "\u2200x (Interesting(x) \u2192 Good(x))",
            "\u00acGood(tiktok)"
        ],
        "question": "Tiktok is either good or a program.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1392,
        "story_id": 477,
        "context": [
            "All video applications are software.",
            "All YouTube-related applications are video applications. ",
            "An APP is either related to YouTube or Instagram.",
            "All Instagram is entertainment. ",
            "All software is programmed. ",
            "All entertainments are interesting.",
            "If something is interesting, then it is good.",
            "TikTok is not good."
        ],
        "context_fol": [
            "\u2200x (App(x) \u2192 Software(x))",
            "\u2200x (Youtube(x) \u2192 App(x))",
            "\u2200x (Youtube(x) \u2228 Instagram(x))",
            "\u2200x (Instagram(x) \u2192 Entertainment(x))",
            "\u2200x (Software(x) \u2192 Program(x))",
            "\u2200x (Entertainment(x) \u2192 Interesting(x))",
            "\u2200x (Interesting(x) \u2192 Good(x))",
            "\u00acGood(tiktok)"
        ],
        "question": "Tiktok is not both related to youtube and a program.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1393,
        "story_id": 477,
        "context": [
            "All video applications are software.",
            "All YouTube-related applications are video applications. ",
            "An APP is either related to YouTube or Instagram.",
            "All Instagram is entertainment. ",
            "All software is programmed. ",
            "All entertainments are interesting.",
            "If something is interesting, then it is good.",
            "TikTok is not good."
        ],
        "context_fol": [
            "\u2200x (App(x) \u2192 Software(x))",
            "\u2200x (Youtube(x) \u2192 App(x))",
            "\u2200x (Youtube(x) \u2228 Instagram(x))",
            "\u2200x (Instagram(x) \u2192 Entertainment(x))",
            "\u2200x (Software(x) \u2192 Program(x))",
            "\u2200x (Entertainment(x) \u2192 Interesting(x))",
            "\u2200x (Interesting(x) \u2192 Good(x))",
            "\u00acGood(tiktok)"
        ],
        "question": "Tiktok is either related to youtube or a program.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 317,
        "story_id": 104,
        "context": [
            "Ordinary is an unincorporated community.",
            "Located within Elliot County, Ordinary is on Kentucky Route 32.",
            "Ordinary is located northwest of Sandy Hook."
        ],
        "context_fol": [
            "UnincorporatedCommunity(ordinary)",
            "In(ordinary, elliotcounty) \u2227 On(ordinary, kentuckyroute32)",
            "NorthwestOf(ordinary, sandyhook)"
        ],
        "question": "There are no unincorporated communities along Kentucky Route 32.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 318,
        "story_id": 104,
        "context": [
            "Ordinary is an unincorporated community.",
            "Located within Elliot County, Ordinary is on Kentucky Route 32.",
            "Ordinary is located northwest of Sandy Hook."
        ],
        "context_fol": [
            "UnincorporatedCommunity(ordinary)",
            "In(ordinary, elliotcounty) \u2227 On(ordinary, kentuckyroute32)",
            "NorthwestOf(ordinary, sandyhook)"
        ],
        "question": "There is an unincorporated community in Elliot County.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 926,
        "story_id": 348,
        "context": [
            "All young adults go on a diet.",
            "All college students are young adults.",
            "All Yale students are college students.",
            "Someone is either a Yale student or a Harvard student.",
            "All Harvard students are diligent.",
            "If Susan is a Harvard student, then she is a young adult.",
            "If Susan is a Yale student, then she does not go on a diet."
        ],
        "context_fol": [
            "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))",
            "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))",
            "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))",
            "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))",
            "\u2200x (HarvardStudent(x) \u2192 Diligent(x))",
            "HarvardStudent(susan) \u2192 YoungAdult(susan)",
            "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)"
        ],
        "question": "Susan is a college student.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 927,
        "story_id": 348,
        "context": [
            "All young adults go on a diet.",
            "All college students are young adults.",
            "All Yale students are college students.",
            "Someone is either a Yale student or a Harvard student.",
            "All Harvard students are diligent.",
            "If Susan is a Harvard student, then she is a young adult.",
            "If Susan is a Yale student, then she does not go on a diet."
        ],
        "context_fol": [
            "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))",
            "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))",
            "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))",
            "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))",
            "\u2200x (HarvardStudent(x) \u2192 Diligent(x))",
            "HarvardStudent(susan) \u2192 YoungAdult(susan)",
            "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)"
        ],
        "question": "Susan goes on a diet and is diligent.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 928,
        "story_id": 348,
        "context": [
            "All young adults go on a diet.",
            "All college students are young adults.",
            "All Yale students are college students.",
            "Someone is either a Yale student or a Harvard student.",
            "All Harvard students are diligent.",
            "If Susan is a Harvard student, then she is a young adult.",
            "If Susan is a Yale student, then she does not go on a diet."
        ],
        "context_fol": [
            "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))",
            "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))",
            "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))",
            "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))",
            "\u2200x (HarvardStudent(x) \u2192 Diligent(x))",
            "HarvardStudent(susan) \u2192 YoungAdult(susan)",
            "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)"
        ],
        "question": "Susan does not go on a diet and is diligent.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 432,
        "story_id": 147,
        "context": [
            "Vic DiCara plays guitar and bass.",
            "The only style of music Vic DiCara plays is punk music.",
            "Vic DiCara played in the band Inside Out."
        ],
        "context_fol": [
            "Play(vicdicara, guitar) \u2227 Play(vicdicara, bass)",
            "\u00ac(\u2203x (Music (vicdicara, punk) \u2227 Music (vicdicara, x)))",
            "Band(vicdicara, insideOut)"
        ],
        "question": "Inside Out was a punk band.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 433,
        "story_id": 147,
        "context": [
            "Vic DiCara plays guitar and bass.",
            "The only style of music Vic DiCara plays is punk music.",
            "Vic DiCara played in the band Inside Out."
        ],
        "context_fol": [
            "Play(vicdicara, guitar) \u2227 Play(vicdicara, bass)",
            "\u00ac(\u2203x (Music (vicdicara, punk) \u2227 Music (vicdicara, x)))",
            "Band(vicdicara, insideOut)"
        ],
        "question": "A musician of Inside Out plays bass.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 918,
        "story_id": 346,
        "context": [
            "All athletes are good at sports.",
            "All Olympic gold medal winners are good athletes.",
            "No scientists are good at sports.",
            "All Nobel laureates are scientists.",
            "Amy is good at sports or Amy is an Olympic gold medal winner.",
            "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner."
        ],
        "context_fol": [
            "\u2200x (Athlete(x) \u2192 GoodAtSports(x))",
            "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))",
            "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))",
            "\u2200x (NobelLaureate(x) \u2192 Scientist(x))",
            "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)",
            "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
        ],
        "question": "Amy is an athlete.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 919,
        "story_id": 346,
        "context": [
            "All athletes are good at sports.",
            "All Olympic gold medal winners are good athletes.",
            "No scientists are good at sports.",
            "All Nobel laureates are scientists.",
            "Amy is good at sports or Amy is an Olympic gold medal winner.",
            "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner."
        ],
        "context_fol": [
            "\u2200x (Athlete(x) \u2192 GoodAtSports(x))",
            "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))",
            "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))",
            "\u2200x (NobelLaureate(x) \u2192 Scientist(x))",
            "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)",
            "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
        ],
        "question": "Amy is neither a scientist nor an Olympic gold medal winner.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 920,
        "story_id": 346,
        "context": [
            "All athletes are good at sports.",
            "All Olympic gold medal winners are good athletes.",
            "No scientists are good at sports.",
            "All Nobel laureates are scientists.",
            "Amy is good at sports or Amy is an Olympic gold medal winner.",
            "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner."
        ],
        "context_fol": [
            "\u2200x (Athlete(x) \u2192 GoodAtSports(x))",
            "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))",
            "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))",
            "\u2200x (NobelLaureate(x) \u2192 Scientist(x))",
            "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)",
            "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
        ],
        "question": "If Amy is not an Olympic gold medal winner, then Amy is a Nobel laureate.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1147,
        "story_id": 409,
        "context": [
            "All fruits with the color red contain a large amount of vitamin C.",
            "All apples are fruits with the color red.",
            "All fruits containing a large amount of vitamin C are beneficial to people. ",
            "No fruits that are beneficial to people are on a warning list.",
            "If K is not beneficial to people and also not an apple, then it is a fruit with the color red."
        ],
        "context_fol": [
            "\u2200x (RedFruit(x) \u2192 VC(x))",
            "\u2200x (Apple(x) \u2192 RedFruit(x))",
            "\u2200x (VC(x) \u2192 Benefit(x))",
            "\u2200x (Benefit(x) \u2192 \u00acWarningList(x))",
            "\u00ac(Benefit(k) \u2227 Apple(k)) \u2192 RedFruit(k)"
        ],
        "question": "K is an apple.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1148,
        "story_id": 409,
        "context": [
            "All fruits with the color red contain a large amount of vitamin C.",
            "All apples are fruits with the color red.",
            "All fruits containing a large amount of vitamin C are beneficial to people. ",
            "No fruits that are beneficial to people are on a warning list.",
            "If K is not beneficial to people and also not an apple, then it is a fruit with the color red."
        ],
        "context_fol": [
            "\u2200x (RedFruit(x) \u2192 VC(x))",
            "\u2200x (Apple(x) \u2192 RedFruit(x))",
            "\u2200x (VC(x) \u2192 Benefit(x))",
            "\u2200x (Benefit(x) \u2192 \u00acWarningList(x))",
            "\u00ac(Benefit(k) \u2227 Apple(k)) \u2192 RedFruit(k)"
        ],
        "question": "K either contains a large amount of vitamin C or is on a warning list.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1149,
        "story_id": 409,
        "context": [
            "All fruits with the color red contain a large amount of vitamin C.",
            "All apples are fruits with the color red.",
            "All fruits containing a large amount of vitamin C are beneficial to people. ",
            "No fruits that are beneficial to people are on a warning list.",
            "If K is not beneficial to people and also not an apple, then it is a fruit with the color red."
        ],
        "context_fol": [
            "\u2200x (RedFruit(x) \u2192 VC(x))",
            "\u2200x (Apple(x) \u2192 RedFruit(x))",
            "\u2200x (VC(x) \u2192 Benefit(x))",
            "\u2200x (Benefit(x) \u2192 \u00acWarningList(x))",
            "\u00ac(Benefit(k) \u2227 Apple(k)) \u2192 RedFruit(k)"
        ],
        "question": "K is either on a warning list or with the color red.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1150,
        "story_id": 409,
        "context": [
            "All fruits with the color red contain a large amount of vitamin C.",
            "All apples are fruits with the color red.",
            "All fruits containing a large amount of vitamin C are beneficial to people. ",
            "No fruits that are beneficial to people are on a warning list.",
            "If K is not beneficial to people and also not an apple, then it is a fruit with the color red."
        ],
        "context_fol": [
            "\u2200x (RedFruit(x) \u2192 VC(x))",
            "\u2200x (Apple(x) \u2192 RedFruit(x))",
            "\u2200x (VC(x) \u2192 Benefit(x))",
            "\u2200x (Benefit(x) \u2192 \u00acWarningList(x))",
            "\u00ac(Benefit(k) \u2227 Apple(k)) \u2192 RedFruit(k)"
        ],
        "question": "If K is either beneficial to people or on a warning list, then it is not red.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1151,
        "story_id": 409,
        "context": [
            "All fruits with the color red contain a large amount of vitamin C.",
            "All apples are fruits with the color red.",
            "All fruits containing a large amount of vitamin C are beneficial to people. ",
            "No fruits that are beneficial to people are on a warning list.",
            "If K is not beneficial to people and also not an apple, then it is a fruit with the color red."
        ],
        "context_fol": [
            "\u2200x (RedFruit(x) \u2192 VC(x))",
            "\u2200x (Apple(x) \u2192 RedFruit(x))",
            "\u2200x (VC(x) \u2192 Benefit(x))",
            "\u2200x (Benefit(x) \u2192 \u00acWarningList(x))",
            "\u00ac(Benefit(k) \u2227 Apple(k)) \u2192 RedFruit(k)"
        ],
        "question": "If K is either on a warning list or with the color red, then it is not beneficial to people and does not contain a large amount of vitamin C.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1207,
        "story_id": 425,
        "context": [
            "Everyone working at Meta has a high income. ",
            "If a person has a high income, then he/she will not take a bus to their destination.",
            "People will either take a bus or drive to their destination. ",
            "Everyone who has a car will choose to drive to their destination. ",
            "No students drive to their destination. ",
            "James has a car or works at Meta."
        ],
        "context_fol": [
            "\u2200x (Meta(x) \u2192 HighIncome(x))",
            "\u2200x (HighIncome(x) \u2192 \u00acBus(x))",
            "\u2200x (Bus(x) \u2228 Drive(x))",
            "\u2200x (HaveCars(x) \u2192 Drive(x))",
            "\u2200x (Student(x) \u2192 \u00acDrive(x))",
            "HaveCars(james) \u2228 Meta(james)"
        ],
        "question": "James has a high income.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1208,
        "story_id": 425,
        "context": [
            "Everyone working at Meta has a high income. ",
            "If a person has a high income, then he/she will not take a bus to their destination.",
            "People will either take a bus or drive to their destination. ",
            "Everyone who has a car will choose to drive to their destination. ",
            "No students drive to their destination. ",
            "James has a car or works at Meta."
        ],
        "context_fol": [
            "\u2200x (Meta(x) \u2192 HighIncome(x))",
            "\u2200x (HighIncome(x) \u2192 \u00acBus(x))",
            "\u2200x (Bus(x) \u2228 Drive(x))",
            "\u2200x (HaveCars(x) \u2192 Drive(x))",
            "\u2200x (Student(x) \u2192 \u00acDrive(x))",
            "HaveCars(james) \u2228 Meta(james)"
        ],
        "question": "James does not have a high income.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1209,
        "story_id": 425,
        "context": [
            "Everyone working at Meta has a high income. ",
            "If a person has a high income, then he/she will not take a bus to their destination.",
            "People will either take a bus or drive to their destination. ",
            "Everyone who has a car will choose to drive to their destination. ",
            "No students drive to their destination. ",
            "James has a car or works at Meta."
        ],
        "context_fol": [
            "\u2200x (Meta(x) \u2192 HighIncome(x))",
            "\u2200x (HighIncome(x) \u2192 \u00acBus(x))",
            "\u2200x (Bus(x) \u2228 Drive(x))",
            "\u2200x (HaveCars(x) \u2192 Drive(x))",
            "\u2200x (Student(x) \u2192 \u00acDrive(x))",
            "HaveCars(james) \u2228 Meta(james)"
        ],
        "question": "James is a student.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1210,
        "story_id": 425,
        "context": [
            "Everyone working at Meta has a high income. ",
            "If a person has a high income, then he/she will not take a bus to their destination.",
            "People will either take a bus or drive to their destination. ",
            "Everyone who has a car will choose to drive to their destination. ",
            "No students drive to their destination. ",
            "James has a car or works at Meta."
        ],
        "context_fol": [
            "\u2200x (Meta(x) \u2192 HighIncome(x))",
            "\u2200x (HighIncome(x) \u2192 \u00acBus(x))",
            "\u2200x (Bus(x) \u2228 Drive(x))",
            "\u2200x (HaveCars(x) \u2192 Drive(x))",
            "\u2200x (Student(x) \u2192 \u00acDrive(x))",
            "HaveCars(james) \u2228 Meta(james)"
        ],
        "question": "James drives to his destination or he is a student.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1211,
        "story_id": 425,
        "context": [
            "Everyone working at Meta has a high income. ",
            "If a person has a high income, then he/she will not take a bus to their destination.",
            "People will either take a bus or drive to their destination. ",
            "Everyone who has a car will choose to drive to their destination. ",
            "No students drive to their destination. ",
            "James has a car or works at Meta."
        ],
        "context_fol": [
            "\u2200x (Meta(x) \u2192 HighIncome(x))",
            "\u2200x (HighIncome(x) \u2192 \u00acBus(x))",
            "\u2200x (Bus(x) \u2228 Drive(x))",
            "\u2200x (HaveCars(x) \u2192 Drive(x))",
            "\u2200x (Student(x) \u2192 \u00acDrive(x))",
            "HaveCars(james) \u2228 Meta(james)"
        ],
        "question": "James either drives to their destination or is a student.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1212,
        "story_id": 425,
        "context": [
            "Everyone working at Meta has a high income. ",
            "If a person has a high income, then he/she will not take a bus to their destination.",
            "People will either take a bus or drive to their destination. ",
            "Everyone who has a car will choose to drive to their destination. ",
            "No students drive to their destination. ",
            "James has a car or works at Meta."
        ],
        "context_fol": [
            "\u2200x (Meta(x) \u2192 HighIncome(x))",
            "\u2200x (HighIncome(x) \u2192 \u00acBus(x))",
            "\u2200x (Bus(x) \u2228 Drive(x))",
            "\u2200x (HaveCars(x) \u2192 Drive(x))",
            "\u2200x (Student(x) \u2192 \u00acDrive(x))",
            "HaveCars(james) \u2228 Meta(james)"
        ],
        "question": "If James either drives to his destination or is a student, then he has a high income and is a student.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1202,
        "story_id": 423,
        "context": [
            "Students either go to the park or go to the movies. ",
            "No student who enjoys nature has free time during the weekend. ",
            "All students who go to the movies enjoy nature. ",
            "All students who do not have class during the weekend have free time during the weekend. ",
            "All students not in summer camp do not have class during the weekend. ",
            "James does not have class during the weekend."
        ],
        "context_fol": [
            "\u2200x (Park(x) \u2295 Movies(x))",
            "\u2200x (Nature(x) \u2192 \u00acFreeTime(x))",
            "\u2200x (Movies(x) \u2192 Nature(x))",
            "\u2200x (NoClass(x) \u2192 FreeTime(x))",
            "\u2200x (SummerCamp(x) \u2192 NoClass(x))",
            "NoClass(james)"
        ],
        "question": "James is in summer camp.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1203,
        "story_id": 423,
        "context": [
            "Students either go to the park or go to the movies. ",
            "No student who enjoys nature has free time during the weekend. ",
            "All students who go to the movies enjoy nature. ",
            "All students who do not have class during the weekend have free time during the weekend. ",
            "All students not in summer camp do not have class during the weekend. ",
            "James does not have class during the weekend."
        ],
        "context_fol": [
            "\u2200x (Park(x) \u2295 Movies(x))",
            "\u2200x (Nature(x) \u2192 \u00acFreeTime(x))",
            "\u2200x (Movies(x) \u2192 Nature(x))",
            "\u2200x (NoClass(x) \u2192 FreeTime(x))",
            "\u2200x (SummerCamp(x) \u2192 NoClass(x))",
            "NoClass(james)"
        ],
        "question": "James goes to the park or is in summer camp.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 713,
        "story_id": 264,
        "context": [
            "No television stars are certified public accountants.",
            "All certified public accountants have good business sense."
        ],
        "context_fol": [
            "\u2200x (TelevisionStar(x) \u2192 \u00acCertifiedPublicAccoutant(x))",
            "\u2200x (CertifiedPublicAccoutant(x) \u2192 GoodBusinessSense(x))"
        ],
        "question": "All television stars have good business sense.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1174,
        "story_id": 416,
        "context": [
            "Some students good at math are good at chemistry.",
            "All students good at chemistry enjoy conducting experiments. ",
            "All students that enjoy conducting experiments are good at planning. ",
            "No student good at planning is awarded the Dean's List. ",
            "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List."
        ],
        "context_fol": [
            "\u2203x (Math(x) \u2227 Chemistry(x))",
            "\u2200x (Chemistry(x) \u2192 Experiment(x))",
            "\u2200x (Experiment(x) \u2192 Planning(x))",
            "\u2200x (Planning(x) \u2192 \u00acAward(x))",
            "\u00ac(Chemistry(james) \u2295 Award(james))"
        ],
        "question": "James is good at planning.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1175,
        "story_id": 416,
        "context": [
            "Some students good at math are good at chemistry.",
            "All students good at chemistry enjoy conducting experiments. ",
            "All students that enjoy conducting experiments are good at planning. ",
            "No student good at planning is awarded the Dean's List. ",
            "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List."
        ],
        "context_fol": [
            "\u2203x (Math(x) \u2227 Chemistry(x))",
            "\u2200x (Chemistry(x) \u2192 Experiment(x))",
            "\u2200x (Experiment(x) \u2192 Planning(x))",
            "\u2200x (Planning(x) \u2192 \u00acAward(x))",
            "\u00ac(Chemistry(james) \u2295 Award(james))"
        ],
        "question": "James is either good at planning or good at math.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1176,
        "story_id": 416,
        "context": [
            "Some students good at math are good at chemistry.",
            "All students good at chemistry enjoy conducting experiments. ",
            "All students that enjoy conducting experiments are good at planning. ",
            "No student good at planning is awarded the Dean's List. ",
            "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List."
        ],
        "context_fol": [
            "\u2203x (Math(x) \u2227 Chemistry(x))",
            "\u2200x (Chemistry(x) \u2192 Experiment(x))",
            "\u2200x (Experiment(x) \u2192 Planning(x))",
            "\u2200x (Planning(x) \u2192 \u00acAward(x))",
            "\u00ac(Chemistry(james) \u2295 Award(james))"
        ],
        "question": "James is either good at chemistry or good at math.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1177,
        "story_id": 416,
        "context": [
            "Some students good at math are good at chemistry.",
            "All students good at chemistry enjoy conducting experiments. ",
            "All students that enjoy conducting experiments are good at planning. ",
            "No student good at planning is awarded the Dean's List. ",
            "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List."
        ],
        "context_fol": [
            "\u2203x (Math(x) \u2227 Chemistry(x))",
            "\u2200x (Chemistry(x) \u2192 Experiment(x))",
            "\u2200x (Experiment(x) \u2192 Planning(x))",
            "\u2200x (Planning(x) \u2192 \u00acAward(x))",
            "\u00ac(Chemistry(james) \u2295 Award(james))"
        ],
        "question": "If James is good at Chemistry or gets awarded the Dean's List, then James is either good at planning or good at math.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 69,
        "story_id": 24,
        "context": [
            "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. ",
            "All Leetcode problems that are recommended to novices are easy. ",
            "A Leetode problem is either easy or hard.",
            "Leetcode problems that are starred by more than 1 thousand users are hard.",
            "2Sum is recommended to novices. ",
            "4Sum is starred by more than 1 thousand users."
        ],
        "context_fol": [
            "\u2200x (Easy(x) \u2192 LowerAC(x))",
            "\u2200x (Recommended(x) \u2192 Easy(x))",
            "\u2200x (Easy(x) \u2295 Hard(x))",
            "\u2200x (Starred(x) \u2192 Hard(x))",
            "Recommended(twosum) ",
            "Starred(foursum)"
        ],
        "question": "2Sum is a Leetcode problem with an easy level.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 70,
        "story_id": 24,
        "context": [
            "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. ",
            "All Leetcode problems that are recommended to novices are easy. ",
            "A Leetode problem is either easy or hard.",
            "Leetcode problems that are starred by more than 1 thousand users are hard.",
            "2Sum is recommended to novices. ",
            "4Sum is starred by more than 1 thousand users."
        ],
        "context_fol": [
            "\u2200x (Easy(x) \u2192 LowerAC(x))",
            "\u2200x (Recommended(x) \u2192 Easy(x))",
            "\u2200x (Easy(x) \u2295 Hard(x))",
            "\u2200x (Starred(x) \u2192 Hard(x))",
            "Recommended(twosum) ",
            "Starred(foursum)"
        ],
        "question": "4Sum is a Leetcode problem recommended to the novice.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 71,
        "story_id": 24,
        "context": [
            "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. ",
            "All Leetcode problems that are recommended to novices are easy. ",
            "A Leetode problem is either easy or hard.",
            "Leetcode problems that are starred by more than 1 thousand users are hard.",
            "2Sum is recommended to novices. ",
            "4Sum is starred by more than 1 thousand users."
        ],
        "context_fol": [
            "\u2200x (Easy(x) \u2192 LowerAC(x))",
            "\u2200x (Recommended(x) \u2192 Easy(x))",
            "\u2200x (Easy(x) \u2295 Hard(x))",
            "\u2200x (Starred(x) \u2192 Hard(x))",
            "Recommended(twosum) ",
            "Starred(foursum)"
        ],
        "question": "2Sum has an AC rate higher than 20 percent.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 692,
        "story_id": 244,
        "context": [
            "All rental cars cost the renter money.",
            "Whenever Sarah goes to Vermont, Sarah drives there.",
            "For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car.",
            "Sarah doesn\u2019t own a car.",
            "Sarah never borrows a car to go camping.",
            "Sarah is going to go camping in Vermont this weekend.",
            "To go camping somewhere, you must go to that place."
        ],
        "context_fol": [
            "\u2200x (Rent(x, car) \u2192 Spend(x, money))",
            "GoesTo(sarah, vermont) \u2192 DriveTo(sarah, vermont)",
            "\u2200x \u2200y (\u00acOwn(x, car) \u2227 DriveTo(x, y) \u2192 Borrow(x, car) \u2295 Rent(x, car))",
            "\u00acOwn(sarah, car)",
            "\u2200x (Camping(sarah, x) \u2192 \u00ac(Borrow(sarah, car)))",
            "Camping(sarah, vermont)",
            "\u2200x \u2200y (Camping(x, y) \u2192 GoesTo(x, y))"
        ],
        "question": "Sarah will spend money this weekend.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1013,
        "story_id": 378,
        "context": [
            "All people who attend weddings are getting married or have friends who are getting married.",
            "No preteens and other young children are getting married or have friends who are getting married.",
            "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
            "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
            "All people who are outgoing and very spirited are fond of large organized group functions.",
            "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
        ],
        "context_fol": [
            "\u2200x Weddings(x) \u2192 GettingMarried(x)",
            "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
            "\u2200x Celebrating(x) \u2192 Weddings(x)",
            "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
            "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
            "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
        ],
        "question": "Carol is outgoing and very spirited.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1014,
        "story_id": 378,
        "context": [
            "All people who attend weddings are getting married or have friends who are getting married.",
            "No preteens and other young children are getting married or have friends who are getting married.",
            "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
            "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
            "All people who are outgoing and very spirited are fond of large organized group functions.",
            "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
        ],
        "context_fol": [
            "\u2200x Weddings(x) \u2192 GettingMarried(x)",
            "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
            "\u2200x Celebrating(x) \u2192 Weddings(x)",
            "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
            "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
            "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
        ],
        "question": "Carol is either a preteen or other young child.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1015,
        "story_id": 378,
        "context": [
            "All people who attend weddings are getting married or have friends who are getting married.",
            "No preteens and other young children are getting married or have friends who are getting married.",
            "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
            "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
            "All people who are outgoing and very spirited are fond of large organized group functions.",
            "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "
        ],
        "context_fol": [
            "\u2200x Weddings(x) \u2192 GettingMarried(x)",
            "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)",
            "\u2200x Celebrating(x) \u2192 Weddings(x)",
            "\u2200x LargeGathering(x) \u2192 Celebrating(x)",
            "\u2200x Outgoing(x) \u2192 LargeGathering(x)",
            "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
        ],
        "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1073,
        "story_id": 395,
        "context": [
            "All Republicans are anti-abortion.",
            "Either Republicans or Democrats. ",
            "No Democrats are conservative.",
            "Either conservative or liberal. ",
            "A U.S government official is either conservative or a Republican."
        ],
        "context_fol": [
            "\u2200x (Republicans(x) \u2192 Anti-abortion(x))",
            " \u2200x (Republicans(x) \u2228 Democrats(x))",
            " \u2200x (Democrats(x) \u2192 \u00acConservative(x))",
            " \u2200x (Conservative(x) \u2228 Liberal(x))",
            " Conservative(anU.SGovernmentOfficial) \u2295 Republicans(anU.SGovernmentOfficial)"
        ],
        "question": "A U.S government official is a Democrat.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1074,
        "story_id": 395,
        "context": [
            "All Republicans are anti-abortion.",
            "Either Republicans or Democrats. ",
            "No Democrats are conservative.",
            "Either conservative or liberal. ",
            "A U.S government official is either conservative or a Republican."
        ],
        "context_fol": [
            "\u2200x (Republicans(x) \u2192 Anti-abortion(x))",
            " \u2200x (Republicans(x) \u2228 Democrats(x))",
            " \u2200x (Democrats(x) \u2192 \u00acConservative(x))",
            " \u2200x (Conservative(x) \u2228 Liberal(x))",
            " Conservative(anU.SGovernmentOfficial) \u2295 Republicans(anU.SGovernmentOfficial)"
        ],
        "question": "A U.S government official is anti-abortion and a liberal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1075,
        "story_id": 395,
        "context": [
            "All Republicans are anti-abortion.",
            "Either Republicans or Democrats. ",
            "No Democrats are conservative.",
            "Either conservative or liberal. ",
            "A U.S government official is either conservative or a Republican."
        ],
        "context_fol": [
            "\u2200x (Republicans(x) \u2192 Anti-abortion(x))",
            " \u2200x (Republicans(x) \u2228 Democrats(x))",
            " \u2200x (Democrats(x) \u2192 \u00acConservative(x))",
            " \u2200x (Conservative(x) \u2228 Liberal(x))",
            " Conservative(anU.SGovernmentOfficial) \u2295 Republicans(anU.SGovernmentOfficial)"
        ],
        "question": "A U.S government official is either anti-abortion or a liberal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1076,
        "story_id": 395,
        "context": [
            "All Republicans are anti-abortion.",
            "Either Republicans or Democrats. ",
            "No Democrats are conservative.",
            "Either conservative or liberal. ",
            "A U.S government official is either conservative or a Republican."
        ],
        "context_fol": [
            "\u2200x (Republicans(x) \u2192 Anti-abortion(x))",
            " \u2200x (Republicans(x) \u2228 Democrats(x))",
            " \u2200x (Democrats(x) \u2192 \u00acConservative(x))",
            " \u2200x (Conservative(x) \u2228 Liberal(x))",
            " Conservative(anU.SGovernmentOfficial) \u2295 Republicans(anU.SGovernmentOfficial)"
        ],
        "question": "If a U.S government official is not anti-abortion and a Republican, then a U.S government official is neither anti-abortion nor a liberal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1077,
        "story_id": 395,
        "context": [
            "All Republicans are anti-abortion.",
            "Either Republicans or Democrats. ",
            "No Democrats are conservative.",
            "Either conservative or liberal. ",
            "A U.S government official is either conservative or a Republican."
        ],
        "context_fol": [
            "\u2200x (Republicans(x) \u2192 Anti-abortion(x))",
            " \u2200x (Republicans(x) \u2228 Democrats(x))",
            " \u2200x (Democrats(x) \u2192 \u00acConservative(x))",
            " \u2200x (Conservative(x) \u2228 Liberal(x))",
            " Conservative(anU.SGovernmentOfficial) \u2295 Republicans(anU.SGovernmentOfficial)"
        ],
        "question": "If a U.S government official is anti-abortion and a liberal, then a U.S government official is either a Republican or a liberal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1078,
        "story_id": 395,
        "context": [
            "All Republicans are anti-abortion.",
            "Either Republicans or Democrats. ",
            "No Democrats are conservative.",
            "Either conservative or liberal. ",
            "A U.S government official is either conservative or a Republican."
        ],
        "context_fol": [
            "\u2200x (Republicans(x) \u2192 Anti-abortion(x))",
            " \u2200x (Republicans(x) \u2228 Democrats(x))",
            " \u2200x (Democrats(x) \u2192 \u00acConservative(x))",
            " \u2200x (Conservative(x) \u2228 Liberal(x))",
            " Conservative(anU.SGovernmentOfficial) \u2295 Republicans(anU.SGovernmentOfficial)"
        ],
        "question": "If a U.S government official is either a conservative or anti-abortion, then a U.S government official is either a conservative and a liberal or neither a conservative nor a liberal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1079,
        "story_id": 395,
        "context": [
            "All Republicans are anti-abortion.",
            "Either Republicans or Democrats. ",
            "No Democrats are conservative.",
            "Either conservative or liberal. ",
            "A U.S government official is either conservative or a Republican."
        ],
        "context_fol": [
            "\u2200x (Republicans(x) \u2192 Anti-abortion(x))",
            " \u2200x (Republicans(x) \u2228 Democrats(x))",
            " \u2200x (Democrats(x) \u2192 \u00acConservative(x))",
            " \u2200x (Conservative(x) \u2228 Liberal(x))",
            " Conservative(anU.SGovernmentOfficial) \u2295 Republicans(anU.SGovernmentOfficial)"
        ],
        "question": "If a U.S government official is either a conservative or anti-abortion, then a U.S government official is neither a Democrat or a liberal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1080,
        "story_id": 395,
        "context": [
            "All Republicans are anti-abortion.",
            "Either Republicans or Democrats. ",
            "No Democrats are conservative.",
            "Either conservative or liberal. ",
            "A U.S government official is either conservative or a Republican."
        ],
        "context_fol": [
            "\u2200x (Republicans(x) \u2192 Anti-abortion(x))",
            " \u2200x (Republicans(x) \u2228 Democrats(x))",
            " \u2200x (Democrats(x) \u2192 \u00acConservative(x))",
            " \u2200x (Conservative(x) \u2228 Liberal(x))",
            " Conservative(anU.SGovernmentOfficial) \u2295 Republicans(anU.SGovernmentOfficial)"
        ],
        "question": "If an U.S government official is anti-abortion or a liberal, then a U.S government official is either anti-abortion or a liberal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 714,
        "story_id": 265,
        "context": [
            "All advocates of high tariff rates are Republicans.",
            "Some Republicans are not conservatives."
        ],
        "context_fol": [
            "\u2200x (AdvocateOfHighTariff(x) \u2192 Republican(x))",
            "\u2203x (Republican(x) \u2227 \u00acConservative(x))"
        ],
        "question": "Some conservatives are advocates of high tariff rates.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 886,
        "story_id": 337,
        "context": [
            "No athletes are slow runners. ",
            "All professional basketball players are athletes. ",
            "All NBA players are professional basketball players. ",
            "All Knicks players are NBA players. ",
            "Jim is either not a professional basketball player or not a slow runner. "
        ],
        "context_fol": [
            "\u2200x (Athlete(x) \u2192 \u00acSlowRunner(x))",
            "\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))",
            "\u00ac(ProfessionalBasketballPlayer(jim) \u2295 SlowRunner(jim))"
        ],
        "question": "Jim is a Knicks player.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 887,
        "story_id": 337,
        "context": [
            "No athletes are slow runners. ",
            "All professional basketball players are athletes. ",
            "All NBA players are professional basketball players. ",
            "All Knicks players are NBA players. ",
            "Jim is either not a professional basketball player or not a slow runner. "
        ],
        "context_fol": [
            "\u2200x (Athlete(x) \u2192 \u00acSlowRunner(x))",
            "\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))",
            "\u00ac(ProfessionalBasketballPlayer(jim) \u2295 SlowRunner(jim))"
        ],
        "question": "Jim is not a Knicks player.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 888,
        "story_id": 337,
        "context": [
            "No athletes are slow runners. ",
            "All professional basketball players are athletes. ",
            "All NBA players are professional basketball players. ",
            "All Knicks players are NBA players. ",
            "Jim is either not a professional basketball player or not a slow runner. "
        ],
        "context_fol": [
            "\u2200x (Athlete(x) \u2192 \u00acSlowRunner(x))",
            "\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))",
            "\u00ac(ProfessionalBasketballPlayer(jim) \u2295 SlowRunner(jim))"
        ],
        "question": "Jim is an athlete.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 915,
        "story_id": 345,
        "context": [
            "All kids love animals.",
            "All toddlers are kids.",
            "If someone loves animals, then they are not bad.",
            "All pirates are bad.",
            "If Nancy is not a pirate, then Nancy loves animals.",
            "If Nancy is not a toddler, then Nancy is bad."
        ],
        "context_fol": [
            "\u2200x (Kid(x) \u2192 LoveAnimals(x))",
            "\u2200x (Toddler(x) \u2192 Kid(x))",
            "\u2200x (LoveAnimals(x) \u2192 \u00acBad(x))",
            "\u2200x (Pirate(x) \u2192 Bad(x))",
            "\u00acPirate(nancy) \u2192 LoveAnimals(nancy)",
            "\u00acToddler(nancy) \u2192 Bad(nancy)"
        ],
        "question": "Nancy is a pirate.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 916,
        "story_id": 345,
        "context": [
            "All kids love animals.",
            "All toddlers are kids.",
            "If someone loves animals, then they are not bad.",
            "All pirates are bad.",
            "If Nancy is not a pirate, then Nancy loves animals.",
            "If Nancy is not a toddler, then Nancy is bad."
        ],
        "context_fol": [
            "\u2200x (Kid(x) \u2192 LoveAnimals(x))",
            "\u2200x (Toddler(x) \u2192 Kid(x))",
            "\u2200x (LoveAnimals(x) \u2192 \u00acBad(x))",
            "\u2200x (Pirate(x) \u2192 Bad(x))",
            "\u00acPirate(nancy) \u2192 LoveAnimals(nancy)",
            "\u00acToddler(nancy) \u2192 Bad(nancy)"
        ],
        "question": "Nancy is not a pirate or a toddler.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 917,
        "story_id": 345,
        "context": [
            "All kids love animals.",
            "All toddlers are kids.",
            "If someone loves animals, then they are not bad.",
            "All pirates are bad.",
            "If Nancy is not a pirate, then Nancy loves animals.",
            "If Nancy is not a toddler, then Nancy is bad."
        ],
        "context_fol": [
            "\u2200x (Kid(x) \u2192 LoveAnimals(x))",
            "\u2200x (Toddler(x) \u2192 Kid(x))",
            "\u2200x (LoveAnimals(x) \u2192 \u00acBad(x))",
            "\u2200x (Pirate(x) \u2192 Bad(x))",
            "\u00acPirate(nancy) \u2192 LoveAnimals(nancy)",
            "\u00acToddler(nancy) \u2192 Bad(nancy)"
        ],
        "question": "If Nancy is not a pirate or a toddler, then she loves animals and is a kid.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 202,
        "story_id": 68,
        "context": [
            "Lana Wilson directed After Tiller, The Departure, and Miss Americana.",
            "If a film is directedy by a person, the person is a filmmaker.",
            "After Tiller is a documentary.",
            "The documentary is a type of films.",
            "Lana Wilson is from Kirkland.",
            "Kirkland is a US city.",
            "If a person is from a city in a country, the person is from the country.",
            "After Tiller is nominated for the Independent Spirit Award for Best Documentary."
        ],
        "context_fol": [
            "DirectedBy(after_Tiller, lana_Wilson) \u2227 DirectedBy(the_Departure, lana_Wilson) \u2227 DirectedBy(miss_Americana, lana_Wilson)",
            "\u2200x \u2203y (DirectedBy(y, x) \u2192 Filmmaker(x))",
            "IsDocumentary(after_Tiller)",
            "\u2200x (IsDocumentary(x) \u2192 IsFilm(x))",
            "FromCity(lana_Wilson, kirkland)",
            "CityCountry(kirkland, us)",
            "\u2200x \u2200y \u2200z (FromCity(x, y) \u2227 CityCountry(y, z) \u2192 FromCountry(x, z))",
            "Nomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)"
        ],
        "question": "Lana Wilson is a US filmmaker.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 203,
        "story_id": 68,
        "context": [
            "Lana Wilson directed After Tiller, The Departure, and Miss Americana.",
            "If a film is directedy by a person, the person is a filmmaker.",
            "After Tiller is a documentary.",
            "The documentary is a type of films.",
            "Lana Wilson is from Kirkland.",
            "Kirkland is a US city.",
            "If a person is from a city in a country, the person is from the country.",
            "After Tiller is nominated for the Independent Spirit Award for Best Documentary."
        ],
        "context_fol": [
            "DirectedBy(after_Tiller, lana_Wilson) \u2227 DirectedBy(the_Departure, lana_Wilson) \u2227 DirectedBy(miss_Americana, lana_Wilson)",
            "\u2200x \u2203y (DirectedBy(y, x) \u2192 Filmmaker(x))",
            "IsDocumentary(after_Tiller)",
            "\u2200x (IsDocumentary(x) \u2192 IsFilm(x))",
            "FromCity(lana_Wilson, kirkland)",
            "CityCountry(kirkland, us)",
            "\u2200x \u2200y \u2200z (FromCity(x, y) \u2227 CityCountry(y, z) \u2192 FromCountry(x, z))",
            "Nomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)"
        ],
        "question": "Miss Americana is not directed by a filmmaker from Kirkland.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 204,
        "story_id": 68,
        "context": [
            "Lana Wilson directed After Tiller, The Departure, and Miss Americana.",
            "If a film is directedy by a person, the person is a filmmaker.",
            "After Tiller is a documentary.",
            "The documentary is a type of films.",
            "Lana Wilson is from Kirkland.",
            "Kirkland is a US city.",
            "If a person is from a city in a country, the person is from the country.",
            "After Tiller is nominated for the Independent Spirit Award for Best Documentary."
        ],
        "context_fol": [
            "DirectedBy(after_Tiller, lana_Wilson) \u2227 DirectedBy(the_Departure, lana_Wilson) \u2227 DirectedBy(miss_Americana, lana_Wilson)",
            "\u2200x \u2203y (DirectedBy(y, x) \u2192 Filmmaker(x))",
            "IsDocumentary(after_Tiller)",
            "\u2200x (IsDocumentary(x) \u2192 IsFilm(x))",
            "FromCity(lana_Wilson, kirkland)",
            "CityCountry(kirkland, us)",
            "\u2200x \u2200y \u2200z (FromCity(x, y) \u2227 CityCountry(y, z) \u2192 FromCountry(x, z))",
            "Nomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)"
        ],
        "question": "Lana Wilson has won the Independent Spirit Award.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 730,
        "story_id": 281,
        "context": [
            "All bears in zoos are not wild. ",
            "Some bears are in zoos. "
        ],
        "context_fol": [
            "\u2200x ((Bear(x) \u2227 InZoo(x)) \u2192 \u00acWild(x))",
            "\u2203x (Bear(x) \u2227 InZoo(x)) "
        ],
        "question": "Not all bears are wild.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 166,
        "story_id": 56,
        "context": [
            "If a person is the leader of a country for life, that person is in a monarchy. ",
            "Leaders are either a king or a queen.",
            "Queens are female.",
            "Kings are male. ",
            "Elizabeth is a queen.",
            "Elizabeth is a leader"
        ],
        "context_fol": [
            "\u2200x (Leader(x) \u2192 InMonarchy(x))",
            "\u2200x (Leader(x) \u2192 King(x) \u2295 Queen(x))",
            "\u2200x (Queen(x) \u2192 Female(x))",
            "\u2200x (King(x) \u2192 Male(x))",
            "Queen(elizabeth)",
            "Leader(elizabeth)"
        ],
        "question": "Elizabeth is a king.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 167,
        "story_id": 56,
        "context": [
            "If a person is the leader of a country for life, that person is in a monarchy. ",
            "Leaders are either a king or a queen.",
            "Queens are female.",
            "Kings are male. ",
            "Elizabeth is a queen.",
            "Elizabeth is a leader"
        ],
        "context_fol": [
            "\u2200x (Leader(x) \u2192 InMonarchy(x))",
            "\u2200x (Leader(x) \u2192 King(x) \u2295 Queen(x))",
            "\u2200x (Queen(x) \u2192 Female(x))",
            "\u2200x (King(x) \u2192 Male(x))",
            "Queen(elizabeth)",
            "Leader(elizabeth)"
        ],
        "question": "Elizabeth is in a monarchy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 168,
        "story_id": 56,
        "context": [
            "If a person is the leader of a country for life, that person is in a monarchy. ",
            "Leaders are either a king or a queen.",
            "Queens are female.",
            "Kings are male. ",
            "Elizabeth is a queen.",
            "Elizabeth is a leader"
        ],
        "context_fol": [
            "\u2200x (Leader(x) \u2192 InMonarchy(x))",
            "\u2200x (Leader(x) \u2192 King(x) \u2295 Queen(x))",
            "\u2200x (Queen(x) \u2192 Female(x))",
            "\u2200x (King(x) \u2192 Male(x))",
            "Queen(elizabeth)",
            "Leader(elizabeth)"
        ],
        "question": "Elizabeth is a leader of a country.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 981,
        "story_id": 367,
        "context": [
            "If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.",
            "If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.",
            "If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.",
            "If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.",
            "All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.",
            "Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder."
        ],
        "context_fol": [
            "\u2200x (Matcha(x) \u2192 \u00acLate(x))",
            "\u2200x (California(x) \u2192 Matcha(x))",
            "\u2200x (Celebrities(x) \u2192 Late(x))",
            "\u2200x (Jobs(x) \u2192 Celebrities(x))",
            "\u2200x (WorkHome(x) \u2192 Jobs(x))",
            "(WorkHome(clay) \u2227 Matcha(clay)) \u2295 (\u00acWorkHome(clay) \u2227 \u00acMatcha(clay))"
        ],
        "question": "Clay does not have a regular 9-5 job.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 982,
        "story_id": 367,
        "context": [
            "If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.",
            "If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.",
            "If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.",
            "If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.",
            "All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.",
            "Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder."
        ],
        "context_fol": [
            "\u2200x (Matcha(x) \u2192 \u00acLate(x))",
            "\u2200x (California(x) \u2192 Matcha(x))",
            "\u2200x (Celebrities(x) \u2192 Late(x))",
            "\u2200x (Jobs(x) \u2192 Celebrities(x))",
            "\u2200x (WorkHome(x) \u2192 Jobs(x))",
            "(WorkHome(clay) \u2227 Matcha(clay)) \u2295 (\u00acWorkHome(clay) \u2227 \u00acMatcha(clay))"
        ],
        "question": "Clay lives in California and attends yoga classes regularly.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 983,
        "story_id": 367,
        "context": [
            "If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.",
            "If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.",
            "If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.",
            "If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.",
            "All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.",
            "Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder."
        ],
        "context_fol": [
            "\u2200x (Matcha(x) \u2192 \u00acLate(x))",
            "\u2200x (California(x) \u2192 Matcha(x))",
            "\u2200x (Celebrities(x) \u2192 Late(x))",
            "\u2200x (Jobs(x) \u2192 Celebrities(x))",
            "\u2200x (WorkHome(x) \u2192 Jobs(x))",
            "(WorkHome(clay) \u2227 Matcha(clay)) \u2295 (\u00acWorkHome(clay) \u2227 \u00acMatcha(clay))"
        ],
        "question": "Clay neither prefers working at home over going to the office every day nor lives in California and attends yoga classes regularly.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 54,
        "story_id": 19,
        "context": [
            "Thomas Barber was an English professional footballer.",
            "Thomas Barber played in the Football League for Aston Villa.",
            "Thomas Barber played as a half back and inside left.",
            "Thomas Barber scored the winning goal in the 1913 FA Cup Final."
        ],
        "context_fol": [
            "English(thomasBarber) \u2227 ProfessionalFootballer(thomasBarber)",
            "PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)",
            "PlayedAs(thomasBarber, aHalfBack) \u2227 PlayedAs(thomasBarber, anInsideLeft)",
            "ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)"
        ],
        "question": "Thomas Barber played in the Football League for Bolton Wanderers",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 55,
        "story_id": 19,
        "context": [
            "Thomas Barber was an English professional footballer.",
            "Thomas Barber played in the Football League for Aston Villa.",
            "Thomas Barber played as a half back and inside left.",
            "Thomas Barber scored the winning goal in the 1913 FA Cup Final."
        ],
        "context_fol": [
            "English(thomasBarber) \u2227 ProfessionalFootballer(thomasBarber)",
            "PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)",
            "PlayedAs(thomasBarber, aHalfBack) \u2227 PlayedAs(thomasBarber, anInsideLeft)",
            "ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)"
        ],
        "question": "Thomas Barber played as an inside left.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 56,
        "story_id": 19,
        "context": [
            "Thomas Barber was an English professional footballer.",
            "Thomas Barber played in the Football League for Aston Villa.",
            "Thomas Barber played as a half back and inside left.",
            "Thomas Barber scored the winning goal in the 1913 FA Cup Final."
        ],
        "context_fol": [
            "English(thomasBarber) \u2227 ProfessionalFootballer(thomasBarber)",
            "PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)",
            "PlayedAs(thomasBarber, aHalfBack) \u2227 PlayedAs(thomasBarber, anInsideLeft)",
            "ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)"
        ],
        "question": "An English professional footballer scored the winning goal in the 1913 FA Cup Final.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 467,
        "story_id": 162,
        "context": [
            "If people play the instrument in the concert, then he is good at playing this kind of instrument.",
            "Peter plays piano, violin, and saxophone.",
            "Peter was invited to play piano at the concert hall.",
            "Oliver and Peter were both invited to perform in the concert.",
            "Oliver plays a different musical instrument from Peter in the concert."
        ],
        "context_fol": [
            "\u2200y (\u2200x (PlayInConcert(y, x) \u2192 GoodAt(y, x)))",
            "Play(peter, piano) \u2227Play(peter, violin)",
            "PlayInConcert(peter, piano)",
            "PlayerInConcert(peter) \u2227 PlayerInConcert(oliver)",
            "\u00acPlayInConcert(oliver, piano)"
        ],
        "question": "Oliver plays piano in the concert.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 468,
        "story_id": 162,
        "context": [
            "If people play the instrument in the concert, then he is good at playing this kind of instrument.",
            "Peter plays piano, violin, and saxophone.",
            "Peter was invited to play piano at the concert hall.",
            "Oliver and Peter were both invited to perform in the concert.",
            "Oliver plays a different musical instrument from Peter in the concert."
        ],
        "context_fol": [
            "\u2200y (\u2200x (PlayInConcert(y, x) \u2192 GoodAt(y, x)))",
            "Play(peter, piano) \u2227Play(peter, violin)",
            "PlayInConcert(peter, piano)",
            "PlayerInConcert(peter) \u2227 PlayerInConcert(oliver)",
            "\u00acPlayInConcert(oliver, piano)"
        ],
        "question": "Oliver plays violin in the concert.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 469,
        "story_id": 162,
        "context": [
            "If people play the instrument in the concert, then he is good at playing this kind of instrument.",
            "Peter plays piano, violin, and saxophone.",
            "Peter was invited to play piano at the concert hall.",
            "Oliver and Peter were both invited to perform in the concert.",
            "Oliver plays a different musical instrument from Peter in the concert."
        ],
        "context_fol": [
            "\u2200y (\u2200x (PlayInConcert(y, x) \u2192 GoodAt(y, x)))",
            "Play(peter, piano) \u2227Play(peter, violin)",
            "PlayInConcert(peter, piano)",
            "PlayerInConcert(peter) \u2227 PlayerInConcert(oliver)",
            "\u00acPlayInConcert(oliver, piano)"
        ],
        "question": "Peter is good at playing piano.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1312,
        "story_id": 454,
        "context": [
            "If something can go underwater, then it enjoys water.",
            "All animals that can swim can go underwater.",
            "Either an animal can swim or it can walk.",
            "Animals that can walk travel on land.",
            "Animals that enjoy water splash water around.",
            "Every animal that travels on land enjoys basking in the sun.",
            "George splashes water around and can swim.",
            "Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water."
        ],
        "context_fol": [
            "\u2200x (GoesUnderwater(x) \u2192 EnjoysWater(x))",
            "\u2200x (CanSwim(x) \u2192 GoesUnderwater(x))",
            "\u2200x (CanSwim(x) \u2228 CanWalk(x))",
            "\u2200x (CanWalk(x) \u2192 TravelsOnLand(x))",
            "\u2200x (EnjoysWater(x) \u2192 Splashes(x))",
            "\u2200x (TravelsOnLand(x) \u2192 EnjoysBasking(x))",
            "Splashes(george) \u2227 CanSwim(george)",
            "(CanWalk(liam) \u2227 EnjoysWater(liam)) \u2228 (\u00acCanWalk(liam) \u2227 \u00acEnjoysWater(liam))"
        ],
        "question": "George enjoys basking in the sun.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1313,
        "story_id": 454,
        "context": [
            "If something can go underwater, then it enjoys water.",
            "All animals that can swim can go underwater.",
            "Either an animal can swim or it can walk.",
            "Animals that can walk travel on land.",
            "Animals that enjoy water splash water around.",
            "Every animal that travels on land enjoys basking in the sun.",
            "George splashes water around and can swim.",
            "Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water."
        ],
        "context_fol": [
            "\u2200x (GoesUnderwater(x) \u2192 EnjoysWater(x))",
            "\u2200x (CanSwim(x) \u2192 GoesUnderwater(x))",
            "\u2200x (CanSwim(x) \u2228 CanWalk(x))",
            "\u2200x (CanWalk(x) \u2192 TravelsOnLand(x))",
            "\u2200x (EnjoysWater(x) \u2192 Splashes(x))",
            "\u2200x (TravelsOnLand(x) \u2192 EnjoysBasking(x))",
            "Splashes(george) \u2227 CanSwim(george)",
            "(CanWalk(liam) \u2227 EnjoysWater(liam)) \u2228 (\u00acCanWalk(liam) \u2227 \u00acEnjoysWater(liam))"
        ],
        "question": "Liam enjoys basking in the sun and splashing water around.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1314,
        "story_id": 454,
        "context": [
            "If something can go underwater, then it enjoys water.",
            "All animals that can swim can go underwater.",
            "Either an animal can swim or it can walk.",
            "Animals that can walk travel on land.",
            "Animals that enjoy water splash water around.",
            "Every animal that travels on land enjoys basking in the sun.",
            "George splashes water around and can swim.",
            "Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water."
        ],
        "context_fol": [
            "\u2200x (GoesUnderwater(x) \u2192 EnjoysWater(x))",
            "\u2200x (CanSwim(x) \u2192 GoesUnderwater(x))",
            "\u2200x (CanSwim(x) \u2228 CanWalk(x))",
            "\u2200x (CanWalk(x) \u2192 TravelsOnLand(x))",
            "\u2200x (EnjoysWater(x) \u2192 Splashes(x))",
            "\u2200x (TravelsOnLand(x) \u2192 EnjoysBasking(x))",
            "Splashes(george) \u2227 CanSwim(george)",
            "(CanWalk(liam) \u2227 EnjoysWater(liam)) \u2228 (\u00acCanWalk(liam) \u2227 \u00acEnjoysWater(liam))"
        ],
        "question": "Liam neither enjoys basking in the sun nor splashing water around.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 673,
        "story_id": 236,
        "context": [
            "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ",
            "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
            "P values are thresholds for belief, not metrics of effect. "
        ],
        "context_fol": [
            "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)",
            " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
            " \u2200x (PValue(x) \u2192 ThresholdsForBelief(x) \u2227 \u00acMetricsOfEffect(x))"
        ],
        "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 674,
        "story_id": 236,
        "context": [
            "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ",
            "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
            "P values are thresholds for belief, not metrics of effect. "
        ],
        "context_fol": [
            "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)",
            " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
            " \u2200x (PValue(x) \u2192 ThresholdsForBelief(x) \u2227 \u00acMetricsOfEffect(x))"
        ],
        "question": "P value represents the selection intensity for somatic variants in cancer cell lineages.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 675,
        "story_id": 236,
        "context": [
            "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ",
            "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
            "P values are thresholds for belief, not metrics of effect. "
        ],
        "context_fol": [
            "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)",
            " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
            " \u2200x (PValue(x) \u2192 ThresholdsForBelief(x) \u2227 \u00acMetricsOfEffect(x))"
        ],
        "question": "Cancer effect size is a metric that is preferred by the majority of cancer researchers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 676,
        "story_id": 236,
        "context": [
            "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ",
            "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
            "P values are thresholds for belief, not metrics of effect. "
        ],
        "context_fol": [
            "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)",
            " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
            " \u2200x (PValue(x) \u2192 ThresholdsForBelief(x) \u2227 \u00acMetricsOfEffect(x))"
        ],
        "question": "P value doesn't represent metrics of effect.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1407,
        "story_id": 481,
        "context": [
            "All dispensable things are environment-friendly. ",
            "All woodware is dispensable.",
            "All paper is woodware. ",
            "No good things are bad. ",
            "All environment-friendly things are good.",
            "A worksheet is either paper or is environment-friendly."
        ],
        "context_fol": [
            "\u2200x (Dispensable(x) \u2192 EnvironmentFriendly(x))",
            "\u2200x (Woodware(x) \u2192 Dispensable(x))",
            "\u2200x (Paper(x) \u2192 Woodware(x))",
            "\u2200x (Good(x) \u2192 \u00acBad(x))",
            "\u2200x (EnvironmentFriendly(x) \u2192 Good(x))",
            "Paper(worksheet) \u2295 EnvironmentFriendly(worksheet)"
        ],
        "question": "A worksheet is dispensable.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1408,
        "story_id": 481,
        "context": [
            "All dispensable things are environment-friendly. ",
            "All woodware is dispensable.",
            "All paper is woodware. ",
            "No good things are bad. ",
            "All environment-friendly things are good.",
            "A worksheet is either paper or is environment-friendly."
        ],
        "context_fol": [
            "\u2200x (Dispensable(x) \u2192 EnvironmentFriendly(x))",
            "\u2200x (Woodware(x) \u2192 Dispensable(x))",
            "\u2200x (Paper(x) \u2192 Woodware(x))",
            "\u2200x (Good(x) \u2192 \u00acBad(x))",
            "\u2200x (EnvironmentFriendly(x) \u2192 Good(x))",
            "Paper(worksheet) \u2295 EnvironmentFriendly(worksheet)"
        ],
        "question": "A worksheet is not dispensable.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1409,
        "story_id": 481,
        "context": [
            "All dispensable things are environment-friendly. ",
            "All woodware is dispensable.",
            "All paper is woodware. ",
            "No good things are bad. ",
            "All environment-friendly things are good.",
            "A worksheet is either paper or is environment-friendly."
        ],
        "context_fol": [
            "\u2200x (Dispensable(x) \u2192 EnvironmentFriendly(x))",
            "\u2200x (Woodware(x) \u2192 Dispensable(x))",
            "\u2200x (Paper(x) \u2192 Woodware(x))",
            "\u2200x (Good(x) \u2192 \u00acBad(x))",
            "\u2200x (EnvironmentFriendly(x) \u2192 Good(x))",
            "Paper(worksheet) \u2295 EnvironmentFriendly(worksheet)"
        ],
        "question": "A worksheet is bad.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1410,
        "story_id": 481,
        "context": [
            "All dispensable things are environment-friendly. ",
            "All woodware is dispensable.",
            "All paper is woodware. ",
            "No good things are bad. ",
            "All environment-friendly things are good.",
            "A worksheet is either paper or is environment-friendly."
        ],
        "context_fol": [
            "\u2200x (Dispensable(x) \u2192 EnvironmentFriendly(x))",
            "\u2200x (Woodware(x) \u2192 Dispensable(x))",
            "\u2200x (Paper(x) \u2192 Woodware(x))",
            "\u2200x (Good(x) \u2192 \u00acBad(x))",
            "\u2200x (EnvironmentFriendly(x) \u2192 Good(x))",
            "Paper(worksheet) \u2295 EnvironmentFriendly(worksheet)"
        ],
        "question": "A worksheet is not bad.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 702,
        "story_id": 253,
        "context": [
            "No reptile has fur.",
            "All snakes are reptiles."
        ],
        "context_fol": [
            "\u2200x (Reptile(x) \u2192 \u00acHasFur(x))",
            "\u2200x (Snake(x) \u2192 Reptile(x))"
        ],
        "question": "Some snake has fur.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 178,
        "story_id": 60,
        "context": [
            "All buildings in New Haven are low. ",
            "All buildings managed by the Yale Housing are located in New Haven. ",
            "All buildings in Manhattans are high. ",
            "All buildings owned by Bloomberg are located in Manhattans. ",
            "All buildings with the Bloomberg logo are owned by Bloomberg. ",
            "Tower A is managed by the Yale Housing.",
            "Tower B is with the Bloomberg logo."
        ],
        "context_fol": [
            "\u2200x (Located(newhaven, x) \u2192 \u00acHigh(x))",
            "\u2200x (YaleHousing(x) \u2192 Located(newhaven, x))",
            "\u2200x (Located(manhattans, x) \u2192 High(x))",
            "\u2200x (Bloomberg(x) \u2192 Located(manhattans, x))",
            "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
            "YaleHousing(tower-a)",
            "BloombergLogo(tower-b)"
        ],
        "question": "Tower A is low.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 179,
        "story_id": 60,
        "context": [
            "All buildings in New Haven are low. ",
            "All buildings managed by the Yale Housing are located in New Haven. ",
            "All buildings in Manhattans are high. ",
            "All buildings owned by Bloomberg are located in Manhattans. ",
            "All buildings with the Bloomberg logo are owned by Bloomberg. ",
            "Tower A is managed by the Yale Housing.",
            "Tower B is with the Bloomberg logo."
        ],
        "context_fol": [
            "\u2200x (Located(newhaven, x) \u2192 \u00acHigh(x))",
            "\u2200x (YaleHousing(x) \u2192 Located(newhaven, x))",
            "\u2200x (Located(manhattans, x) \u2192 High(x))",
            "\u2200x (Bloomberg(x) \u2192 Located(manhattans, x))",
            "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
            "YaleHousing(tower-a)",
            "BloombergLogo(tower-b)"
        ],
        "question": "Tower B is not located in Manhattans.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 180,
        "story_id": 60,
        "context": [
            "All buildings in New Haven are low. ",
            "All buildings managed by the Yale Housing are located in New Haven. ",
            "All buildings in Manhattans are high. ",
            "All buildings owned by Bloomberg are located in Manhattans. ",
            "All buildings with the Bloomberg logo are owned by Bloomberg. ",
            "Tower A is managed by the Yale Housing.",
            "Tower B is with the Bloomberg logo."
        ],
        "context_fol": [
            "\u2200x (Located(newhaven, x) \u2192 \u00acHigh(x))",
            "\u2200x (YaleHousing(x) \u2192 Located(newhaven, x))",
            "\u2200x (Located(manhattans, x) \u2192 High(x))",
            "\u2200x (Bloomberg(x) \u2192 Located(manhattans, x))",
            "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
            "YaleHousing(tower-a)",
            "BloombergLogo(tower-b)"
        ],
        "question": "Tower B is located in New Haven.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1309,
        "story_id": 453,
        "context": [
            "No cold-blooded animals are birds.",
            "All reptiles are cold-blooded.",
            "Either an animal is a bird or it eats other animals.",
            "If an animal eats other animals, then it is a carnivore.",
            "Ron is neither a cold-blooded animal nor a carnivore.",
            "Henry is neither a carnivore nor a lizard."
        ],
        "context_fol": [
            "\u2200x (ColdBlooded(x) \u2192 \u00acBird(x))",
            "\u2200x (Reptile(x) \u2192 ColdBlooded(x))",
            "\u2200x (Bird(x) \u2228 EatOtherAnimals(x))",
            "\u2200x (EatOtherAnimals(x) \u2192 Carnivore(x))",
            "\u00acColdBlooded(ron) \u2227 \u00acCarnivore(ron)",
            "\u00acCarnivore(henry) \u2227 \u00acLizard(henry)"
        ],
        "question": "Ron is a lizard.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1310,
        "story_id": 453,
        "context": [
            "No cold-blooded animals are birds.",
            "All reptiles are cold-blooded.",
            "Either an animal is a bird or it eats other animals.",
            "If an animal eats other animals, then it is a carnivore.",
            "Ron is neither a cold-blooded animal nor a carnivore.",
            "Henry is neither a carnivore nor a lizard."
        ],
        "context_fol": [
            "\u2200x (ColdBlooded(x) \u2192 \u00acBird(x))",
            "\u2200x (Reptile(x) \u2192 ColdBlooded(x))",
            "\u2200x (Bird(x) \u2228 EatOtherAnimals(x))",
            "\u2200x (EatOtherAnimals(x) \u2192 Carnivore(x))",
            "\u00acColdBlooded(ron) \u2227 \u00acCarnivore(ron)",
            "\u00acCarnivore(henry) \u2227 \u00acLizard(henry)"
        ],
        "question": "Either Henry is a reptile or Ron eats other animals.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1311,
        "story_id": 453,
        "context": [
            "No cold-blooded animals are birds.",
            "All reptiles are cold-blooded.",
            "Either an animal is a bird or it eats other animals.",
            "If an animal eats other animals, then it is a carnivore.",
            "Ron is neither a cold-blooded animal nor a carnivore.",
            "Henry is neither a carnivore nor a lizard."
        ],
        "context_fol": [
            "\u2200x (ColdBlooded(x) \u2192 \u00acBird(x))",
            "\u2200x (Reptile(x) \u2192 ColdBlooded(x))",
            "\u2200x (Bird(x) \u2228 EatOtherAnimals(x))",
            "\u2200x (EatOtherAnimals(x) \u2192 Carnivore(x))",
            "\u00acColdBlooded(ron) \u2227 \u00acCarnivore(ron)",
            "\u00acCarnivore(henry) \u2227 \u00acLizard(henry)"
        ],
        "question": "It is not true that Ron is a reptile or that Henry is cold-blooded.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 222,
        "story_id": 73,
        "context": [
            "Ambiortus is a prehistoric bird genus.",
            "Ambiorus Dementjevi is the only known species of Ambiortus.",
            "The Mongol region was where Ambiorus Dementjevi lived.",
            "Yevgeny Kurochkin was the discoverer of Ambiortus."
        ],
        "context_fol": [
            "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)",
            "\u2200x (Species(x, ambiortus) \u2192 AmbiortusDementjevi(x))",
            "\u2200x (AmbiortusDementjevi(x) \u2192 Lived(x, mongolregion))",
            "Discovered(yevgenykurochkin, ambiortus)"
        ],
        "question": "Yevgeny Kurochkin discovered a new bird genus.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 223,
        "story_id": 73,
        "context": [
            "Ambiortus is a prehistoric bird genus.",
            "Ambiorus Dementjevi is the only known species of Ambiortus.",
            "The Mongol region was where Ambiorus Dementjevi lived.",
            "Yevgeny Kurochkin was the discoverer of Ambiortus."
        ],
        "context_fol": [
            "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)",
            "\u2200x (Species(x, ambiortus) \u2192 AmbiortusDementjevi(x))",
            "\u2200x (AmbiortusDementjevi(x) \u2192 Lived(x, mongolregion))",
            "Discovered(yevgenykurochkin, ambiortus)"
        ],
        "question": "There is a species of Ambiortus that doesn't live in the Mongol region.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 224,
        "story_id": 73,
        "context": [
            "Ambiortus is a prehistoric bird genus.",
            "Ambiorus Dementjevi is the only known species of Ambiortus.",
            "The Mongol region was where Ambiorus Dementjevi lived.",
            "Yevgeny Kurochkin was the discoverer of Ambiortus."
        ],
        "context_fol": [
            "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)",
            "\u2200x (Species(x, ambiortus) \u2192 AmbiortusDementjevi(x))",
            "\u2200x (AmbiortusDementjevi(x) \u2192 Lived(x, mongolregion))",
            "Discovered(yevgenykurochkin, ambiortus)"
        ],
        "question": "Yevgeny Kurochkin lived in the Mongol region.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 225,
        "story_id": 73,
        "context": [
            "Ambiortus is a prehistoric bird genus.",
            "Ambiorus Dementjevi is the only known species of Ambiortus.",
            "The Mongol region was where Ambiorus Dementjevi lived.",
            "Yevgeny Kurochkin was the discoverer of Ambiortus."
        ],
        "context_fol": [
            "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)",
            "\u2200x (Species(x, ambiortus) \u2192 AmbiortusDementjevi(x))",
            "\u2200x (AmbiortusDementjevi(x) \u2192 Lived(x, mongolregion))",
            "Discovered(yevgenykurochkin, ambiortus)"
        ],
        "question": "All species of Ambiortus live in the Mongol region.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1294,
        "story_id": 448,
        "context": [
            "Everyone that uses a football can throw a football.",
            "If someone plays football, then they use a football.",
            "Either someone is a football player or a basketball player.",
            "Every basketball player is tall.",
            "Everyone that can throw a football can throw a football with a spiral.",
            "If someone is tall, then they are in shape.",
            "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
        ],
        "context_fol": [
            "\u2200x (UseFootball(x) \u2192 ThrowFootball(x))",
            "\u2200x (PlayFootball(x) \u2192 UseFootball(x))",
            "\u2200x (BasketballPlayer(x) \u2228 PlayFootball(x))",
            "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
            "\u2200x (ThrowFootball(x) \u2192 ThrowFootballSpiral(x))",
            "\u2200x (Tall(x) \u2192 InShape(x))",
            "\u00acTall(jack) \u2227 \u00acBasketballPlayer(jack) \u2192 \u00acTall(jack) \u2227 \u00acThrowFootball(jack)"
        ],
        "question": "Jack plays football.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1295,
        "story_id": 448,
        "context": [
            "Everyone that uses a football can throw a football.",
            "If someone plays football, then they use a football.",
            "Either someone is a football player or a basketball player.",
            "Every basketball player is tall.",
            "Everyone that can throw a football can throw a football with a spiral.",
            "If someone is tall, then they are in shape.",
            "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
        ],
        "context_fol": [
            "\u2200x (UseFootball(x) \u2192 ThrowFootball(x))",
            "\u2200x (PlayFootball(x) \u2192 UseFootball(x))",
            "\u2200x (BasketballPlayer(x) \u2228 PlayFootball(x))",
            "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
            "\u2200x (ThrowFootball(x) \u2192 ThrowFootballSpiral(x))",
            "\u2200x (Tall(x) \u2192 InShape(x))",
            "\u00acTall(jack) \u2227 \u00acBasketballPlayer(jack) \u2192 \u00acTall(jack) \u2227 \u00acThrowFootball(jack)"
        ],
        "question": "Jack is in shape.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1296,
        "story_id": 448,
        "context": [
            "Everyone that uses a football can throw a football.",
            "If someone plays football, then they use a football.",
            "Either someone is a football player or a basketball player.",
            "Every basketball player is tall.",
            "Everyone that can throw a football can throw a football with a spiral.",
            "If someone is tall, then they are in shape.",
            "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."
        ],
        "context_fol": [
            "\u2200x (UseFootball(x) \u2192 ThrowFootball(x))",
            "\u2200x (PlayFootball(x) \u2192 UseFootball(x))",
            "\u2200x (BasketballPlayer(x) \u2228 PlayFootball(x))",
            "\u2200x (BasketballPlayer(x) \u2192 Tall(x))",
            "\u2200x (ThrowFootball(x) \u2192 ThrowFootballSpiral(x))",
            "\u2200x (Tall(x) \u2192 InShape(x))",
            "\u00acTall(jack) \u2227 \u00acBasketballPlayer(jack) \u2192 \u00acTall(jack) \u2227 \u00acThrowFootball(jack)"
        ],
        "question": "Jack is not in shape.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 7,
        "story_id": 3,
        "context": [
            "Fort Ticonderoga is the current name for Fort Carillon.",
            "Pierre de Rigaud de Vaudreuil built Fort Carillon.",
            "Fort Carillon was located in New France.",
            "New France is not in Europe."
        ],
        "context_fol": [
            "CurrentName(fortticonderoga, fortcarillon)",
            "Built(pierrederigauddevaudreuil, fortcarillon)",
            "LocatedIn(fortcarillon, newfrance)",
            "\u00acLocatedIn(newfrance, europe)"
        ],
        "question": "Pierre de Rigaud de Vaudreuil built a fort in New France.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 8,
        "story_id": 3,
        "context": [
            "Fort Ticonderoga is the current name for Fort Carillon.",
            "Pierre de Rigaud de Vaudreuil built Fort Carillon.",
            "Fort Carillon was located in New France.",
            "New France is not in Europe."
        ],
        "context_fol": [
            "CurrentName(fortticonderoga, fortcarillon)",
            "Built(pierrederigauddevaudreuil, fortcarillon)",
            "LocatedIn(fortcarillon, newfrance)",
            "\u00acLocatedIn(newfrance, europe)"
        ],
        "question": "Pierre de Rigaud de Vaudreuil built a fort in New England.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 9,
        "story_id": 3,
        "context": [
            "Fort Ticonderoga is the current name for Fort Carillon.",
            "Pierre de Rigaud de Vaudreuil built Fort Carillon.",
            "Fort Carillon was located in New France.",
            "New France is not in Europe."
        ],
        "context_fol": [
            "CurrentName(fortticonderoga, fortcarillon)",
            "Built(pierrederigauddevaudreuil, fortcarillon)",
            "LocatedIn(fortcarillon, newfrance)",
            "\u00acLocatedIn(newfrance, europe)"
        ],
        "question": "Fort Carillon was located in Europe.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 845,
        "story_id": 328,
        "context": [
            "No soccer players are professional basketball players.",
            "All NBA players are professional basketball players.",
            "All defenders are soccer players.",
            "All centerback players are defenders.",
            "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
        ],
        "context_fol": [
            "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u2200x (Centerback(x) \u2192 Defender(x))",
            "(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
        ],
        "question": "Stephen Curry is an NBA player.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 846,
        "story_id": 328,
        "context": [
            "No soccer players are professional basketball players.",
            "All NBA players are professional basketball players.",
            "All defenders are soccer players.",
            "All centerback players are defenders.",
            "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
        ],
        "context_fol": [
            "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u2200x (Centerback(x) \u2192 Defender(x))",
            "(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
        ],
        "question": "Stephen Curry is a centerback player.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 847,
        "story_id": 328,
        "context": [
            "No soccer players are professional basketball players.",
            "All NBA players are professional basketball players.",
            "All defenders are soccer players.",
            "All centerback players are defenders.",
            "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."
        ],
        "context_fol": [
            "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u2200x (Centerback(x) \u2192 Defender(x))",
            "(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
        ],
        "question": "Stephen Curry is not a centerback player.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1420,
        "story_id": 484,
        "context": [
            "No songs are visual. ",
            "All folk songs are songs. ",
            "All videos are visual. ",
            "All movies are videos.",
            "All sci-fi movies are movies.",
            "Inception is a sci-fi movie.",
            "Mac is neither a folk song nor a sci-fi movie."
        ],
        "context_fol": [
            "\u2200x (Song(x) \u2192 \u00acVisual(x))",
            "\u2200x (FolkSong(x) \u2192 Song(x))",
            "\u2200x (Video(x) \u2192 Visual(x))",
            "\u2200x (Movie(x) \u2192 Video(x))",
            "\u2200x (ScifiMovie(x) \u2192 Movie(x))",
            "ScifiMovie(inception)",
            "\u00acFolkSong(mac) \u2227 \u00acScifiMovie(mac)"
        ],
        "question": "Inception is a folk song.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1421,
        "story_id": 484,
        "context": [
            "No songs are visual. ",
            "All folk songs are songs. ",
            "All videos are visual. ",
            "All movies are videos.",
            "All sci-fi movies are movies.",
            "Inception is a sci-fi movie.",
            "Mac is neither a folk song nor a sci-fi movie."
        ],
        "context_fol": [
            "\u2200x (Song(x) \u2192 \u00acVisual(x))",
            "\u2200x (FolkSong(x) \u2192 Song(x))",
            "\u2200x (Video(x) \u2192 Visual(x))",
            "\u2200x (Movie(x) \u2192 Video(x))",
            "\u2200x (ScifiMovie(x) \u2192 Movie(x))",
            "ScifiMovie(inception)",
            "\u00acFolkSong(mac) \u2227 \u00acScifiMovie(mac)"
        ],
        "question": "Inception is not a folk song.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1422,
        "story_id": 484,
        "context": [
            "No songs are visual. ",
            "All folk songs are songs. ",
            "All videos are visual. ",
            "All movies are videos.",
            "All sci-fi movies are movies.",
            "Inception is a sci-fi movie.",
            "Mac is neither a folk song nor a sci-fi movie."
        ],
        "context_fol": [
            "\u2200x (Song(x) \u2192 \u00acVisual(x))",
            "\u2200x (FolkSong(x) \u2192 Song(x))",
            "\u2200x (Video(x) \u2192 Visual(x))",
            "\u2200x (Movie(x) \u2192 Video(x))",
            "\u2200x (ScifiMovie(x) \u2192 Movie(x))",
            "ScifiMovie(inception)",
            "\u00acFolkSong(mac) \u2227 \u00acScifiMovie(mac)"
        ],
        "question": "Inception is either a video or a folk song.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1423,
        "story_id": 484,
        "context": [
            "No songs are visual. ",
            "All folk songs are songs. ",
            "All videos are visual. ",
            "All movies are videos.",
            "All sci-fi movies are movies.",
            "Inception is a sci-fi movie.",
            "Mac is neither a folk song nor a sci-fi movie."
        ],
        "context_fol": [
            "\u2200x (Song(x) \u2192 \u00acVisual(x))",
            "\u2200x (FolkSong(x) \u2192 Song(x))",
            "\u2200x (Video(x) \u2192 Visual(x))",
            "\u2200x (Movie(x) \u2192 Video(x))",
            "\u2200x (ScifiMovie(x) \u2192 Movie(x))",
            "ScifiMovie(inception)",
            "\u00acFolkSong(mac) \u2227 \u00acScifiMovie(mac)"
        ],
        "question": "Mac is a video.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1065,
        "story_id": 393,
        "context": [
            "All extroverts are overtly expressive.",
            "People are either extroverts or introverts.",
            "If someone is an introvert, then they are shy and reticent. ",
            "No shy and reticent person likes to talk to strangers.",
            "Jeff is not an extrovert and someone who likes to talk to strangers."
        ],
        "context_fol": [
            "\u2200x (Extroverts(x) \u2192 OvertlyExpressive(x))",
            " \u2200x (Extroverts(x) \u2228 Introverts(x)) ",
            " \u2200x (Introverts(x) \u2192 ShyAndReticentPerson(x))",
            " \u2200x (ShyAndReticentPerson(x) \u2192 \u00acLikeToTalkToStrangers(x))",
            " \u00acExtroverts(jeff) \u2227 \u00acLikeToTalkToStrangers(jeff)"
        ],
        "question": "Jeff is a shy and reticent person.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1066,
        "story_id": 393,
        "context": [
            "All extroverts are overtly expressive.",
            "People are either extroverts or introverts.",
            "If someone is an introvert, then they are shy and reticent. ",
            "No shy and reticent person likes to talk to strangers.",
            "Jeff is not an extrovert and someone who likes to talk to strangers."
        ],
        "context_fol": [
            "\u2200x (Extroverts(x) \u2192 OvertlyExpressive(x))",
            " \u2200x (Extroverts(x) \u2228 Introverts(x)) ",
            " \u2200x (Introverts(x) \u2192 ShyAndReticentPerson(x))",
            " \u2200x (ShyAndReticentPerson(x) \u2192 \u00acLikeToTalkToStrangers(x))",
            " \u00acExtroverts(jeff) \u2227 \u00acLikeToTalkToStrangers(jeff)"
        ],
        "question": "Jeff is overtly expressive and likes to talk to strangers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1067,
        "story_id": 393,
        "context": [
            "All extroverts are overtly expressive.",
            "People are either extroverts or introverts.",
            "If someone is an introvert, then they are shy and reticent. ",
            "No shy and reticent person likes to talk to strangers.",
            "Jeff is not an extrovert and someone who likes to talk to strangers."
        ],
        "context_fol": [
            "\u2200x (Extroverts(x) \u2192 OvertlyExpressive(x))",
            " \u2200x (Extroverts(x) \u2228 Introverts(x)) ",
            " \u2200x (Introverts(x) \u2192 ShyAndReticentPerson(x))",
            " \u2200x (ShyAndReticentPerson(x) \u2192 \u00acLikeToTalkToStrangers(x))",
            " \u00acExtroverts(jeff) \u2227 \u00acLikeToTalkToStrangers(jeff)"
        ],
        "question": "If Jeff is either overtly expressive and likes to talk to strangers or neither overtly expressive nor likes to talk to strangers, then Jeff is neither an extrovert nor likes to talk to strangers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1138,
        "story_id": 408,
        "context": [
            "No low-scoring players are top players in the league.",
            "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
            "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
            "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
            "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers."
        ],
        "context_fol": [
            "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))",
            "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))",
            "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))",
            "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))",
            "LowScore(candace) \u2295 ThreePointer(candace)"
        ],
        "question": "Candace is a top player in the league.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1139,
        "story_id": 408,
        "context": [
            "No low-scoring players are top players in the league.",
            "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
            "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
            "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
            "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers."
        ],
        "context_fol": [
            "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))",
            "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))",
            "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))",
            "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))",
            "LowScore(candace) \u2295 ThreePointer(candace)"
        ],
        "question": "Candace is bad at mid-range shots.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1140,
        "story_id": 408,
        "context": [
            "No low-scoring players are top players in the league.",
            "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
            "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
            "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
            "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers."
        ],
        "context_fol": [
            "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))",
            "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))",
            "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))",
            "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))",
            "LowScore(candace) \u2295 ThreePointer(candace)"
        ],
        "question": "Candace is solid at shooting 2-pointers or bad at mid-range shots.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1141,
        "story_id": 408,
        "context": [
            "No low-scoring players are top players in the league.",
            "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
            "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
            "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
            "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers."
        ],
        "context_fol": [
            "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))",
            "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))",
            "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))",
            "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))",
            "LowScore(candace) \u2295 ThreePointer(candace)"
        ],
        "question": "Candace is either solid at shooting 2-pointers or bad at mid-range shots.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1142,
        "story_id": 408,
        "context": [
            "No low-scoring players are top players in the league.",
            "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
            "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
            "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
            "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers."
        ],
        "context_fol": [
            "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))",
            "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))",
            "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))",
            "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))",
            "LowScore(candace) \u2295 ThreePointer(candace)"
        ],
        "question": "Candace is a low-scoring player or bad at mid-range shots.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1143,
        "story_id": 408,
        "context": [
            "No low-scoring players are top players in the league.",
            "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
            "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
            "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
            "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers."
        ],
        "context_fol": [
            "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))",
            "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))",
            "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))",
            "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))",
            "LowScore(candace) \u2295 ThreePointer(candace)"
        ],
        "question": "Candace is either a low-scoring player or bad at mid-range shots.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1144,
        "story_id": 408,
        "context": [
            "No low-scoring players are top players in the league.",
            "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
            "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
            "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
            "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers."
        ],
        "context_fol": [
            "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))",
            "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))",
            "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))",
            "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))",
            "LowScore(candace) \u2295 ThreePointer(candace)"
        ],
        "question": "Candace is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1145,
        "story_id": 408,
        "context": [
            "No low-scoring players are top players in the league.",
            "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
            "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
            "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
            "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers."
        ],
        "context_fol": [
            "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))",
            "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))",
            "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))",
            "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))",
            "LowScore(candace) \u2295 ThreePointer(candace)"
        ],
        "question": "If Candace is not solid at shooting 2-pointers and bad at mid-range shots, then Candace is not solid at shooting 2-pointers and is a player who successfully shoots a high percentage of 3-pointers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1146,
        "story_id": 408,
        "context": [
            "No low-scoring players are top players in the league.",
            "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
            "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
            "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
            "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers."
        ],
        "context_fol": [
            "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))",
            "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))",
            "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))",
            "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))",
            "LowScore(candace) \u2295 ThreePointer(candace)"
        ],
        "question": "If Candace is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Candace is a top player in the league and bad at mid-range shots.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 720,
        "story_id": 271,
        "context": [
            "No plants are fungi.",
            "Mushrooms are fungi."
        ],
        "context_fol": [
            "\u2200x (Plant(x) \u2192 \u00acFungi(x))",
            "\u2200x (Mushroom(x) \u2192 Fungi(x))"
        ],
        "question": "No plants are mushrooms.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 740,
        "story_id": 291,
        "context": [
            "No road is clean.",
            "And some streets are roads."
        ],
        "context_fol": [
            "\u2200x (Road(x) \u2192 \u00acClean(x))",
            "\u2203x (Street(x) \u2227 Road(x))"
        ],
        "question": "Some streets are clean",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 632,
        "story_id": 222,
        "context": [
            "New York City is on the East Coast. ",
            "Seattle is on the West Coast. ",
            "If a person from a city on the East coast is traveling to a city on the west coast, they will be on a long flight.",
            "Most passengers on flights to Seattle from New York City are not in first class.",
            "People on long flights are uncomfortable unless they're in first class"
        ],
        "context_fol": [
            "On(newyorkcity, eastcoast)",
            "On(seattle, westcoast)",
            "\u2200x \u2200y \u2200z ((TravelingFrom(x, y) \u2227 On(y, eastcoast) \u2227 TravelingTo(x, z) \u2227 On(z, westcoast)) \u2192 OnLongFlight(x))",
            "\u2203x (\u00acInFirstClass(x) \u2227 TravelingFrom(x, newyorkcity) \u2227 TravelingTo(x, seattle))",
            "\u2200x (OnLongFlight(x) \u2227 \u00acInFirstClass(x) \u2192 Uncomfortable(x))"
        ],
        "question": "Some people flying from New York City to Seattle will be uncomfortable.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 356,
        "story_id": 118,
        "context": [
            "Musicians have very busy lives.",
            "Singh Kaur is a musician and famous.",
            "If a musician is not famous, that musician will not make a lot of money.",
            "A musician can be a singer or a writer."
        ],
        "context_fol": [
            "\u2200x (Musician(x) \u2192 Busy(x))",
            "Musician(singhKaur) \u2227 Famous(singhKaur)",
            "\u2200x (Musician(x) \u2227 \u00acFamous(x) \u2192 \u00acMakeMoney(x))",
            "\u2203x (Musician(x) \u2227 Singer(x) \u2228 Writer(x))"
        ],
        "question": "Singh Kaur makes a lot of money.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 357,
        "story_id": 118,
        "context": [
            "Musicians have very busy lives.",
            "Singh Kaur is a musician and famous.",
            "If a musician is not famous, that musician will not make a lot of money.",
            "A musician can be a singer or a writer."
        ],
        "context_fol": [
            "\u2200x (Musician(x) \u2192 Busy(x))",
            "Musician(singhKaur) \u2227 Famous(singhKaur)",
            "\u2200x (Musician(x) \u2227 \u00acFamous(x) \u2192 \u00acMakeMoney(x))",
            "\u2203x (Musician(x) \u2227 Singer(x) \u2228 Writer(x))"
        ],
        "question": "Singh Kaur is a writer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 358,
        "story_id": 118,
        "context": [
            "Musicians have very busy lives.",
            "Singh Kaur is a musician and famous.",
            "If a musician is not famous, that musician will not make a lot of money.",
            "A musician can be a singer or a writer."
        ],
        "context_fol": [
            "\u2200x (Musician(x) \u2192 Busy(x))",
            "Musician(singhKaur) \u2227 Famous(singhKaur)",
            "\u2200x (Musician(x) \u2227 \u00acFamous(x) \u2192 \u00acMakeMoney(x))",
            "\u2203x (Musician(x) \u2227 Singer(x) \u2228 Writer(x))"
        ],
        "question": "Singh Kaur has a very busy life.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 733,
        "story_id": 284,
        "context": [
            "Each building is tall. ",
            "Everything tall has  height."
        ],
        "context_fol": [
            "\u2200x (Building(x) \u2192 \u00acTall(x))",
            "\u2200x (Tall(x) \u2192 HasHeight(x))"
        ],
        "question": "All buildings are magnificent.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 376,
        "story_id": 126,
        "context": [
            "A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. ",
            "Garfield and Odie, who is another pet of Jon, share the same home. ",
            "Garfield hates Odie.",
            "A pet who hates the pet with whom he shares the same owner is childish and possessive.",
            "Cats are pets. "
        ],
        "context_fol": [
            "Cat(garfield) \u2227 MainCharacterGarfield(garfield) \u2227 BeOrange(garfield) \u2227 BeFat(garfield) \u2227 LikeLasagna(garfield)",
            "Pet(garfield, jon) \u2227 Pet(odie, jon) \u2227 ShareHome(garfield, odie)",
            "Hate(garfield, odie)",
            "\u2200x \u2200y \u2203z (Pet(x, z) \u2227 Pet(y, z) \u2227 Hate(x, y) \u2192 BeChildish(x) \u2227 BePossessive(x))",
            "\u2200x \u2203y (Cat(x) \u2192 Pet(x, y))"
        ],
        "question": "The main character of the film Garfield is childish and possessive.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1377,
        "story_id": 474,
        "context": [
            "All humans eat.",
            "If something eats, then it is not a plant.",
            "A thing is either plant or animal.",
            "All goats are animals.",
            "No dirt is an animal.",
            "Hulu is a goat or a human."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2192 Eat(x))",
            "\u2200x (Eat(x) \u2192 \u00acPlant(x))",
            "\u2200x (Plant(x) \u2228 Animal(x))",
            "\u2200x (Goat(x) \u2192 Animal(x))",
            "\u2200x (Dirt(x) \u2192 \u00acAnimal(x))",
            "Goat(hulu) \u2228 Human(hulu)"
        ],
        "question": "Hulu eats.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1378,
        "story_id": 474,
        "context": [
            "All humans eat.",
            "If something eats, then it is not a plant.",
            "A thing is either plant or animal.",
            "All goats are animals.",
            "No dirt is an animal.",
            "Hulu is a goat or a human."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2192 Eat(x))",
            "\u2200x (Eat(x) \u2192 \u00acPlant(x))",
            "\u2200x (Plant(x) \u2228 Animal(x))",
            "\u2200x (Goat(x) \u2192 Animal(x))",
            "\u2200x (Dirt(x) \u2192 \u00acAnimal(x))",
            "Goat(hulu) \u2228 Human(hulu)"
        ],
        "question": "Hulu does not eat.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1379,
        "story_id": 474,
        "context": [
            "All humans eat.",
            "If something eats, then it is not a plant.",
            "A thing is either plant or animal.",
            "All goats are animals.",
            "No dirt is an animal.",
            "Hulu is a goat or a human."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2192 Eat(x))",
            "\u2200x (Eat(x) \u2192 \u00acPlant(x))",
            "\u2200x (Plant(x) \u2228 Animal(x))",
            "\u2200x (Goat(x) \u2192 Animal(x))",
            "\u2200x (Dirt(x) \u2192 \u00acAnimal(x))",
            "Goat(hulu) \u2228 Human(hulu)"
        ],
        "question": "Hulu is dirt.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1380,
        "story_id": 474,
        "context": [
            "All humans eat.",
            "If something eats, then it is not a plant.",
            "A thing is either plant or animal.",
            "All goats are animals.",
            "No dirt is an animal.",
            "Hulu is a goat or a human."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2192 Eat(x))",
            "\u2200x (Eat(x) \u2192 \u00acPlant(x))",
            "\u2200x (Plant(x) \u2228 Animal(x))",
            "\u2200x (Goat(x) \u2192 Animal(x))",
            "\u2200x (Dirt(x) \u2192 \u00acAnimal(x))",
            "Goat(hulu) \u2228 Human(hulu)"
        ],
        "question": "Hulu is an animal or dirt.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1381,
        "story_id": 474,
        "context": [
            "All humans eat.",
            "If something eats, then it is not a plant.",
            "A thing is either plant or animal.",
            "All goats are animals.",
            "No dirt is an animal.",
            "Hulu is a goat or a human."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2192 Eat(x))",
            "\u2200x (Eat(x) \u2192 \u00acPlant(x))",
            "\u2200x (Plant(x) \u2228 Animal(x))",
            "\u2200x (Goat(x) \u2192 Animal(x))",
            "\u2200x (Dirt(x) \u2192 \u00acAnimal(x))",
            "Goat(hulu) \u2228 Human(hulu)"
        ],
        "question": "Hulu is either an animal or dirt.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1382,
        "story_id": 474,
        "context": [
            "All humans eat.",
            "If something eats, then it is not a plant.",
            "A thing is either plant or animal.",
            "All goats are animals.",
            "No dirt is an animal.",
            "Hulu is a goat or a human."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2192 Eat(x))",
            "\u2200x (Eat(x) \u2192 \u00acPlant(x))",
            "\u2200x (Plant(x) \u2228 Animal(x))",
            "\u2200x (Goat(x) \u2192 Animal(x))",
            "\u2200x (Dirt(x) \u2192 \u00acAnimal(x))",
            "Goat(hulu) \u2228 Human(hulu)"
        ],
        "question": "If Hulu is either an animal or dirt, then Hulu eats and is dirt.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 136,
        "story_id": 47,
        "context": [
            "A controlled substance is a drug.",
            "There exist both harmful and beneficial controlled substances.",
            "If a child is exposed to a controlled substance, he or she is in chemical endangerment.",
            "Chemical Endangerment is harmful. ",
            "The Controlled Substances Act was an act passed in 1971.",
            "Some Acts prevent harmful things."
        ],
        "context_fol": [
            "\u2200x (ControlledSubstances(x) \u2192 Drugs(x))",
            "\u2203x \u2203x (ControlledSubstances(x) \u2227 ControlledSubstances(y) \u2227 Beneficial(x) \u2227 Harmful(y))",
            "\u2200x \u2200y (ExposedToControlledSubstance(x, y) \u2192 ChemicalEndangerment(x))",
            "\u2200x (ChemicalEndangerment(x) \u2192 Harmful(x))",
            "PassedIn(controlledSubstancesAct, year1971) \u2227 Act(controlledSubstancesAct)",
            "\u2203x (Act(x) \u2227 PreventsHarm(x))"
        ],
        "question": "The Controlled Substances Act prevents harmful things.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 137,
        "story_id": 47,
        "context": [
            "A controlled substance is a drug.",
            "There exist both harmful and beneficial controlled substances.",
            "If a child is exposed to a controlled substance, he or she is in chemical endangerment.",
            "Chemical Endangerment is harmful. ",
            "The Controlled Substances Act was an act passed in 1971.",
            "Some Acts prevent harmful things."
        ],
        "context_fol": [
            "\u2200x (ControlledSubstances(x) \u2192 Drugs(x))",
            "\u2203x \u2203x (ControlledSubstances(x) \u2227 ControlledSubstances(y) \u2227 Beneficial(x) \u2227 Harmful(y))",
            "\u2200x \u2200y (ExposedToControlledSubstance(x, y) \u2192 ChemicalEndangerment(x))",
            "\u2200x (ChemicalEndangerment(x) \u2192 Harmful(x))",
            "PassedIn(controlledSubstancesAct, year1971) \u2227 Act(controlledSubstancesAct)",
            "\u2203x (Act(x) \u2227 PreventsHarm(x))"
        ],
        "question": "Some drugs are beneficial.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 138,
        "story_id": 47,
        "context": [
            "A controlled substance is a drug.",
            "There exist both harmful and beneficial controlled substances.",
            "If a child is exposed to a controlled substance, he or she is in chemical endangerment.",
            "Chemical Endangerment is harmful. ",
            "The Controlled Substances Act was an act passed in 1971.",
            "Some Acts prevent harmful things."
        ],
        "context_fol": [
            "\u2200x (ControlledSubstances(x) \u2192 Drugs(x))",
            "\u2203x \u2203x (ControlledSubstances(x) \u2227 ControlledSubstances(y) \u2227 Beneficial(x) \u2227 Harmful(y))",
            "\u2200x \u2200y (ExposedToControlledSubstance(x, y) \u2192 ChemicalEndangerment(x))",
            "\u2200x (ChemicalEndangerment(x) \u2192 Harmful(x))",
            "PassedIn(controlledSubstancesAct, year1971) \u2227 Act(controlledSubstancesAct)",
            "\u2203x (Act(x) \u2227 PreventsHarm(x))"
        ],
        "question": "A child in chemical endangerment is in harm.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 821,
        "story_id": 321,
        "context": [
            "No people who work at corporate jobs are starting a new company.",
            "All entrepreneurs are starting a new company.",
            "All risk-averse people are people who work at corporate jobs.",
            "All people who hate working for others are entrepreneurs.",
            "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person."
        ],
        "context_fol": [
            "\u2200x (WorkAtCorporateJobs(x) \u2192 \u00acStartingANewCompany(x))",
            " \u2200x (Entrepreneurs(x) \u2192 StartingANewCompany(x))",
            " \u2200x (Risk-averse(x) \u2192 WorkAtCorporateJobs(x))",
            " \u2200x (HateWorkingForOthers(x) \u2192 Entrepreneurs(x))",
            " \u00acEntrepreneurs(markZuckerberg) \u2228 \u00acHateWorkingForOthers(markZuckerberg) \u2192 \u00acRisk-averse(markZuckerberg)"
        ],
        "question": "Mark Zuckerberg is an entrepreneur.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 822,
        "story_id": 321,
        "context": [
            "No people who work at corporate jobs are starting a new company.",
            "All entrepreneurs are starting a new company.",
            "All risk-averse people are people who work at corporate jobs.",
            "All people who hate working for others are entrepreneurs.",
            "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person."
        ],
        "context_fol": [
            "\u2200x (WorkAtCorporateJobs(x) \u2192 \u00acStartingANewCompany(x))",
            " \u2200x (Entrepreneurs(x) \u2192 StartingANewCompany(x))",
            " \u2200x (Risk-averse(x) \u2192 WorkAtCorporateJobs(x))",
            " \u2200x (HateWorkingForOthers(x) \u2192 Entrepreneurs(x))",
            " \u00acEntrepreneurs(markZuckerberg) \u2228 \u00acHateWorkingForOthers(markZuckerberg) \u2192 \u00acRisk-averse(markZuckerberg)"
        ],
        "question": "Mark Zuckerberg is a risk-averse person.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 823,
        "story_id": 321,
        "context": [
            "No people who work at corporate jobs are starting a new company.",
            "All entrepreneurs are starting a new company.",
            "All risk-averse people are people who work at corporate jobs.",
            "All people who hate working for others are entrepreneurs.",
            "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person."
        ],
        "context_fol": [
            "\u2200x (WorkAtCorporateJobs(x) \u2192 \u00acStartingANewCompany(x))",
            " \u2200x (Entrepreneurs(x) \u2192 StartingANewCompany(x))",
            " \u2200x (Risk-averse(x) \u2192 WorkAtCorporateJobs(x))",
            " \u2200x (HateWorkingForOthers(x) \u2192 Entrepreneurs(x))",
            " \u00acEntrepreneurs(markZuckerberg) \u2228 \u00acHateWorkingForOthers(markZuckerberg) \u2192 \u00acRisk-averse(markZuckerberg)"
        ],
        "question": "Mark Zuckerberg is not a risk-averse person.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 573,
        "story_id": 200,
        "context": [
            "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.",
            "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.",
            "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor."
        ],
        "context_fol": [
            "\u2200x (Kitchen(x) \u2192 Up(x) \u2295 Down(x))",
            "(Cook(downstairs) \u2227 \u00acRun(ac)) \u2192 Smokey(firstFloor)",
            "(Cook(downstairs) \u2227 Run(ac)) \u2192 Smokey(secondFloor)"
        ],
        "question": "If someone is cooking downstairs, it will always cause the first floor to become smokey.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 574,
        "story_id": 200,
        "context": [
            "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.",
            "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.",
            "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor."
        ],
        "context_fol": [
            "\u2200x (Kitchen(x) \u2192 Up(x) \u2295 Down(x))",
            "(Cook(downstairs) \u2227 \u00acRun(ac)) \u2192 Smokey(firstFloor)",
            "(Cook(downstairs) \u2227 Run(ac)) \u2192 Smokey(secondFloor)"
        ],
        "question": "If someone is cooking upstairs, the first floor will become smokey.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 575,
        "story_id": 200,
        "context": [
            "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.",
            "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.",
            "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor."
        ],
        "context_fol": [
            "\u2200x (Kitchen(x) \u2192 Up(x) \u2295 Down(x))",
            "(Cook(downstairs) \u2227 \u00acRun(ac)) \u2192 Smokey(firstFloor)",
            "(Cook(downstairs) \u2227 Run(ac)) \u2192 Smokey(secondFloor)"
        ],
        "question": "If someone is cooking downstairs and the air conditioner is running, there will be smoke upstairs.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 377,
        "story_id": 127,
        "context": [
            "New York City is Located in the United States of America.",
            "United States of America is part of North America.",
            "North America is in the western hemisphere of the earth.",
            "New York City is a highly developed city.",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "context_fol": [
            "Locate(nyc, usa)",
            "Locate(usa, northAmerica)",
            "Locate(northAmerica, westHemisphere)",
            "HighlyDeveloped(nyc)",
            "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
        ],
        "question": "A highly developed city is located in the western hemisphere of the earth.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 378,
        "story_id": 127,
        "context": [
            "New York City is Located in the United States of America.",
            "United States of America is part of North America.",
            "North America is in the western hemisphere of the earth.",
            "New York City is a highly developed city.",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "context_fol": [
            "Locate(nyc, usa)",
            "Locate(usa, northAmerica)",
            "Locate(northAmerica, westHemisphere)",
            "HighlyDeveloped(nyc)",
            "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
        ],
        "question": "USA is not located in western hemisphere of the earth.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 379,
        "story_id": 127,
        "context": [
            "New York City is Located in the United States of America.",
            "United States of America is part of North America.",
            "North America is in the western hemisphere of the earth.",
            "New York City is a highly developed city.",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "context_fol": [
            "Locate(nyc, usa)",
            "Locate(usa, northAmerica)",
            "Locate(northAmerica, westHemisphere)",
            "HighlyDeveloped(nyc)",
            "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
        ],
        "question": "New York City is located in the New York State.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 429,
        "story_id": 146,
        "context": [
            "Callus 4 is a poem that was written by the ancient Roman writer Catullus.",
            "Callus 4 is a story about the retirement of a well-traveled ship.",
            "There is a strong analogy of human aging in the poem Callus 4.",
            "Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves."
        ],
        "context_fol": [
            "Poem(callus4) \u2227 WrittenBy(callus4, catullus) \u2227 Roman(catullus)",
            "RetirementShip(callus4)",
            "Poem(callus4) \u2192 AgingAnalogy(callus4)",
            "Poem(callus4) \u2192 Lambic(callus4) \u2227 Waves(callus4)"
        ],
        "question": "There exists a poem written by an ancient Roman writer with a strong analogy of human aging.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 430,
        "story_id": 146,
        "context": [
            "Callus 4 is a poem that was written by the ancient Roman writer Catullus.",
            "Callus 4 is a story about the retirement of a well-traveled ship.",
            "There is a strong analogy of human aging in the poem Callus 4.",
            "Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves."
        ],
        "context_fol": [
            "Poem(callus4) \u2227 WrittenBy(callus4, catullus) \u2227 Roman(catullus)",
            "RetirementShip(callus4)",
            "Poem(callus4) \u2192 AgingAnalogy(callus4)",
            "Poem(callus4) \u2192 Lambic(callus4) \u2227 Waves(callus4)"
        ],
        "question": "There exists a poem written by an ancient Roman writer written in iambic petameter.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 431,
        "story_id": 146,
        "context": [
            "Callus 4 is a poem that was written by the ancient Roman writer Catullus.",
            "Callus 4 is a story about the retirement of a well-traveled ship.",
            "There is a strong analogy of human aging in the poem Callus 4.",
            "Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves."
        ],
        "context_fol": [
            "Poem(callus4) \u2227 WrittenBy(callus4, catullus) \u2227 Roman(catullus)",
            "RetirementShip(callus4)",
            "Poem(callus4) \u2192 AgingAnalogy(callus4)",
            "Poem(callus4) \u2192 Lambic(callus4) \u2227 Waves(callus4)"
        ],
        "question": "Callus 4 is written in an unusual iambic trimeter to convey a strong analogy of human aging.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 671,
        "story_id": 235,
        "context": [
            "Westworld is an American science fiction-thriller TV series.",
            "In 2016, a new television series named Westworld debuted on HBO.",
            "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.",
            "The 1973 film Westworld is about robots that malfunction and begin killing the human visitors."
        ],
        "context_fol": [
            "TVSeries(westworld) \u2227 American(westworld) \u2227 ScienceFictionThriller(westworld)",
            "Debut(westworld, year2016)",
            "\u2203x (Adapt(westworld, x) \u2227 Produce(x, year1973) \u2227 Write(michael, x) \u2227 Direct(michael, x))",
            "About(westworld, robots)"
        ],
        "question": "Michael Crichton has directed a film about robots.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 672,
        "story_id": 235,
        "context": [
            "Westworld is an American science fiction-thriller TV series.",
            "In 2016, a new television series named Westworld debuted on HBO.",
            "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.",
            "The 1973 film Westworld is about robots that malfunction and begin killing the human visitors."
        ],
        "context_fol": [
            "TVSeries(westworld) \u2227 American(westworld) \u2227 ScienceFictionThriller(westworld)",
            "Debut(westworld, year2016)",
            "\u2203x (Adapt(westworld, x) \u2227 Produce(x, year1973) \u2227 Write(michael, x) \u2227 Direct(michael, x))",
            "About(westworld, robots)"
        ],
        "question": "An American TV series debuted in 2016.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 659,
        "story_id": 231,
        "context": [
            "The 2008 Summer Olympics were held in Beijing, China.",
            "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
            "China won the most gold medals (48) in the 2008 Summer Olympics.",
            "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
            "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
            "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
            "87 countries won at least one medal during the 2008 Games."
        ],
        "context_fol": [
            "HeldIn(summer2008olympics, beijingchina)",
            "SecondToBe(summer2008olympics, heldincommuniststate)",
            "Won(china, mostgoldmedals)",
            "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)",
            "Placed(russia, thirdingoldmedals)",
            "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))",
            "\u2203x (Country(x) \u2227 Won(x, medal))"
        ],
        "question": "Russia did not win fewer gold medals than China.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 660,
        "story_id": 231,
        "context": [
            "The 2008 Summer Olympics were held in Beijing, China.",
            "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
            "China won the most gold medals (48) in the 2008 Summer Olympics.",
            "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
            "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
            "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
            "87 countries won at least one medal during the 2008 Games."
        ],
        "context_fol": [
            "HeldIn(summer2008olympics, beijingchina)",
            "SecondToBe(summer2008olympics, heldincommuniststate)",
            "Won(china, mostgoldmedals)",
            "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)",
            "Placed(russia, thirdingoldmedals)",
            "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))",
            "\u2203x (Country(x) \u2227 Won(x, medal))"
        ],
        "question": "The United States won fewer gold medals than China.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 661,
        "story_id": 231,
        "context": [
            "The 2008 Summer Olympics were held in Beijing, China.",
            "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
            "China won the most gold medals (48) in the 2008 Summer Olympics.",
            "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
            "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
            "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
            "87 countries won at least one medal during the 2008 Games."
        ],
        "context_fol": [
            "HeldIn(summer2008olympics, beijingchina)",
            "SecondToBe(summer2008olympics, heldincommuniststate)",
            "Won(china, mostgoldmedals)",
            "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)",
            "Placed(russia, thirdingoldmedals)",
            "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))",
            "\u2203x (Country(x) \u2227 Won(x, medal))"
        ],
        "question": "Russia won fewer gold medals than China.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 78,
        "story_id": 27,
        "context": [
            "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.",
            "Yangshuo is not a district in Guilin. "
        ],
        "context_fol": [
            "DistrictIn(xiufeng, guilin) \u2227 DistrictIn(xiangshan, guilin) \u2227 DistrictIn(diecai, guilin) \u2227 DistrictIn(qixing, guilin) \u2227 City(guilin)",
            "\u00acDistrictIn(yangshuo, guilin)"
        ],
        "question": "Xiangshan and Diecai are districts in the same city.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 79,
        "story_id": 27,
        "context": [
            "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.",
            "Yangshuo is not a district in Guilin. "
        ],
        "context_fol": [
            "DistrictIn(xiufeng, guilin) \u2227 DistrictIn(xiangshan, guilin) \u2227 DistrictIn(diecai, guilin) \u2227 DistrictIn(qixing, guilin) \u2227 City(guilin)",
            "\u00acDistrictIn(yangshuo, guilin)"
        ],
        "question": "Xiufeng is in Guilin.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 80,
        "story_id": 27,
        "context": [
            "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.",
            "Yangshuo is not a district in Guilin. "
        ],
        "context_fol": [
            "DistrictIn(xiufeng, guilin) \u2227 DistrictIn(xiangshan, guilin) \u2227 DistrictIn(diecai, guilin) \u2227 DistrictIn(qixing, guilin) \u2227 City(guilin)",
            "\u00acDistrictIn(yangshuo, guilin)"
        ],
        "question": "Kowloon District is in Hong Kong.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1004,
        "story_id": 375,
        "context": [
            "All people who grow their own fresh vegetables in their home garden also have ample space.",
            "If people are young working professionals who live in large cities, then they do not have ample space.",
            "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
            "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
            "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
            "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
        ],
        "context_fol": [
            "\u2200x (Garden(x) \u2192 Space(x))",
            "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
            "\u2200x (Takeout(x) \u2192 Garden(x))",
            "\u2200x (GoingOut(x) \u2192 Takeout(x))",
            "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
            "Garden(michael) \u2228 Homecooked(michael)"
        ],
        "question": "Michael enjoys going out often to restaurants with friends.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1005,
        "story_id": 375,
        "context": [
            "All people who grow their own fresh vegetables in their home garden also have ample space.",
            "If people are young working professionals who live in large cities, then they do not have ample space.",
            "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
            "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
            "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
            "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
        ],
        "context_fol": [
            "\u2200x (Garden(x) \u2192 Space(x))",
            "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
            "\u2200x (Takeout(x) \u2192 Garden(x))",
            "\u2200x (GoingOut(x) \u2192 Takeout(x))",
            "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
            "Garden(michael) \u2228 Homecooked(michael)"
        ],
        "question": "Michael is a young working professional who lives in large cities.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1006,
        "story_id": 375,
        "context": [
            "All people who grow their own fresh vegetables in their home garden also have ample space.",
            "If people are young working professionals who live in large cities, then they do not have ample space.",
            "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
            "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
            "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
            "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."
        ],
        "context_fol": [
            "\u2200x (Garden(x) \u2192 Space(x))",
            "\u2200x (Professional(x) \u2192 \u00acSpace(x))",
            "\u2200x (Takeout(x) \u2192 Garden(x))",
            "\u2200x (GoingOut(x) \u2192 Takeout(x))",
            "\u2200x (Homecooked(x) \u2192 GoingOut(x))",
            "Garden(michael) \u2228 Homecooked(michael)"
        ],
        "question": "Michael grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 184,
        "story_id": 62,
        "context": [
            "All devices belonging to the company are connected to Google Home. ",
            "All devices belonging to employees are connected to the company's wifi. ",
            "All devices connected to Google Home are controlled by the managers. ",
            "All devices that connect to the company's wifi are easy to operate. ",
            "IPod1 belongs to employees. "
        ],
        "context_fol": [
            "\u2200x (Company(x) \u2192 GoogleHome(x))",
            "\u2200x (Employee(x) \u2192 Wifi(x))",
            "\u2200x (GoogleHome(x) \u2192 Controlled(x))",
            "\u2200x (Wifi(x) \u2192 EasyToOperate(x))",
            "Employee(iPod1)"
        ],
        "question": "iPod1 is easy to operate.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 185,
        "story_id": 62,
        "context": [
            "All devices belonging to the company are connected to Google Home. ",
            "All devices belonging to employees are connected to the company's wifi. ",
            "All devices connected to Google Home are controlled by the managers. ",
            "All devices that connect to the company's wifi are easy to operate. ",
            "IPod1 belongs to employees. "
        ],
        "context_fol": [
            "\u2200x (Company(x) \u2192 GoogleHome(x))",
            "\u2200x (Employee(x) \u2192 Wifi(x))",
            "\u2200x (GoogleHome(x) \u2192 Controlled(x))",
            "\u2200x (Wifi(x) \u2192 EasyToOperate(x))",
            "Employee(iPod1)"
        ],
        "question": "iPod1 is controlled by managers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 186,
        "story_id": 62,
        "context": [
            "All devices belonging to the company are connected to Google Home. ",
            "All devices belonging to employees are connected to the company's wifi. ",
            "All devices connected to Google Home are controlled by the managers. ",
            "All devices that connect to the company's wifi are easy to operate. ",
            "IPod1 belongs to employees. "
        ],
        "context_fol": [
            "\u2200x (Company(x) \u2192 GoogleHome(x))",
            "\u2200x (Employee(x) \u2192 Wifi(x))",
            "\u2200x (GoogleHome(x) \u2192 Controlled(x))",
            "\u2200x (Wifi(x) \u2192 EasyToOperate(x))",
            "Employee(iPod1)"
        ],
        "question": "iPod1 is connected to Google Home.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1135,
        "story_id": 407,
        "context": [
            "No touring musicians are permanent members of an orchestra.",
            "Musicians are either permanent members of an orchestra or have a unique musical voice or style.",
            "All musicians who have a unique musical voice or style are interesting as individual performers.",
            "All musicians who are interesting as individual performers are capable of attracting large audiences.",
            "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences."
        ],
        "context_fol": [
            "\u2200x (Orchestra(x) \u2192 \u00acTouring(x))",
            "\u2200x (Orchestra(x) \u2295 Unique(x))",
            "\u2200x (Unique(x) \u2192 Interesting(x))",
            "\u2200x (Interesting(x) \u2192 Capable(x))",
            "(Interesting(ryan) \u2227 Unique(ryan)) \u2192 \u00ac(Touring(ryan) \u2295 Capable(ryan))"
        ],
        "question": "Ryan is interesting as an individual performer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1136,
        "story_id": 407,
        "context": [
            "No touring musicians are permanent members of an orchestra.",
            "Musicians are either permanent members of an orchestra or have a unique musical voice or style.",
            "All musicians who have a unique musical voice or style are interesting as individual performers.",
            "All musicians who are interesting as individual performers are capable of attracting large audiences.",
            "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences."
        ],
        "context_fol": [
            "\u2200x (Orchestra(x) \u2192 \u00acTouring(x))",
            "\u2200x (Orchestra(x) \u2295 Unique(x))",
            "\u2200x (Unique(x) \u2192 Interesting(x))",
            "\u2200x (Interesting(x) \u2192 Capable(x))",
            "(Interesting(ryan) \u2227 Unique(ryan)) \u2192 \u00ac(Touring(ryan) \u2295 Capable(ryan))"
        ],
        "question": "Ryan is either a permanent member of an orchestra or a touring soloist musician.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1137,
        "story_id": 407,
        "context": [
            "No touring musicians are permanent members of an orchestra.",
            "Musicians are either permanent members of an orchestra or have a unique musical voice or style.",
            "All musicians who have a unique musical voice or style are interesting as individual performers.",
            "All musicians who are interesting as individual performers are capable of attracting large audiences.",
            "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences."
        ],
        "context_fol": [
            "\u2200x (Orchestra(x) \u2192 \u00acTouring(x))",
            "\u2200x (Orchestra(x) \u2295 Unique(x))",
            "\u2200x (Unique(x) \u2192 Interesting(x))",
            "\u2200x (Interesting(x) \u2192 Capable(x))",
            "(Interesting(ryan) \u2227 Unique(ryan)) \u2192 \u00ac(Touring(ryan) \u2295 Capable(ryan))"
        ],
        "question": "Ryan is either a permanent member of an orchestra or has a unique musical voice or style.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1411,
        "story_id": 482,
        "context": [
            "If someone yells, then they are not cool.",
            "If someone is angry, then they yell.",
            "If someone flies, then they are cool.",
            "Every person that knows magic can fly.",
            "All wizards know magic.",
            "Harry either yells and flies, or neither yells nor flies.",
            "Potter is a wizard and flies."
        ],
        "context_fol": [
            "\u2200x (Yell(x) \u2192 \u00acCool(x))",
            "\u2200x (Angry(x) \u2192 Yell(x))",
            "\u2200x (Fly(x) \u2192 Cool(x))",
            "\u2200x (KnowMagic(x) \u2192 Fly(x))",
            "\u2200x (Wizard(x) \u2192 KnowMagic(x))",
            "(Yell(harry) \u2227 Fly(harry)) \u2295 (\u00acYell(harry) \u2227 \u00acFly(harry))",
            "Wizard(potter) \u2227 Fly(potter)"
        ],
        "question": "Harry is cool.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1412,
        "story_id": 482,
        "context": [
            "If someone yells, then they are not cool.",
            "If someone is angry, then they yell.",
            "If someone flies, then they are cool.",
            "Every person that knows magic can fly.",
            "All wizards know magic.",
            "Harry either yells and flies, or neither yells nor flies.",
            "Potter is a wizard and flies."
        ],
        "context_fol": [
            "\u2200x (Yell(x) \u2192 \u00acCool(x))",
            "\u2200x (Angry(x) \u2192 Yell(x))",
            "\u2200x (Fly(x) \u2192 Cool(x))",
            "\u2200x (KnowMagic(x) \u2192 Fly(x))",
            "\u2200x (Wizard(x) \u2192 KnowMagic(x))",
            "(Yell(harry) \u2227 Fly(harry)) \u2295 (\u00acYell(harry) \u2227 \u00acFly(harry))",
            "Wizard(potter) \u2227 Fly(potter)"
        ],
        "question": "Harry is not cool.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1413,
        "story_id": 482,
        "context": [
            "If someone yells, then they are not cool.",
            "If someone is angry, then they yell.",
            "If someone flies, then they are cool.",
            "Every person that knows magic can fly.",
            "All wizards know magic.",
            "Harry either yells and flies, or neither yells nor flies.",
            "Potter is a wizard and flies."
        ],
        "context_fol": [
            "\u2200x (Yell(x) \u2192 \u00acCool(x))",
            "\u2200x (Angry(x) \u2192 Yell(x))",
            "\u2200x (Fly(x) \u2192 Cool(x))",
            "\u2200x (KnowMagic(x) \u2192 Fly(x))",
            "\u2200x (Wizard(x) \u2192 KnowMagic(x))",
            "(Yell(harry) \u2227 Fly(harry)) \u2295 (\u00acYell(harry) \u2227 \u00acFly(harry))",
            "Wizard(potter) \u2227 Fly(potter)"
        ],
        "question": "Harry is a wizard or angry.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1414,
        "story_id": 482,
        "context": [
            "If someone yells, then they are not cool.",
            "If someone is angry, then they yell.",
            "If someone flies, then they are cool.",
            "Every person that knows magic can fly.",
            "All wizards know magic.",
            "Harry either yells and flies, or neither yells nor flies.",
            "Potter is a wizard and flies."
        ],
        "context_fol": [
            "\u2200x (Yell(x) \u2192 \u00acCool(x))",
            "\u2200x (Angry(x) \u2192 Yell(x))",
            "\u2200x (Fly(x) \u2192 Cool(x))",
            "\u2200x (KnowMagic(x) \u2192 Fly(x))",
            "\u2200x (Wizard(x) \u2192 KnowMagic(x))",
            "(Yell(harry) \u2227 Fly(harry)) \u2295 (\u00acYell(harry) \u2227 \u00acFly(harry))",
            "Wizard(potter) \u2227 Fly(potter)"
        ],
        "question": "Harry is neither a wizard nor angry.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1253,
        "story_id": 436,
        "context": [
            "Products are either produced in China or the US. ",
            "All produced in China are labeled. ",
            "All produced in the US are sold in the US. ",
            "If labeled, then the product is cheaper. ",
            "All sold in the US are sold in Walmart. ",
            "All displayed on the homepage are sold in Walmart. ",
            "No products returned by customers are sold in Walmart. ",
            "G-910 is either displayed on the homepage or cheaper."
        ],
        "context_fol": [
            "\u2200x (China(x) \u2295 US(x))",
            "\u2200x (China(x) \u2192 Labeled(x))",
            "\u2200x (US(x) \u2192 SoldInUS(x))",
            "\u2200x (Labeled(x) \u2192 Cheaper(x))",
            "\u2200x (SoldInUS(x) \u2192 SoldInWalmart(x))",
            "\u2200x (DisplayedInHomepage(x) \u2192 SoldInWalmart(x))",
            "\u2200x (ReturnedByCustomer(x) \u2192 \u00acSoldInWalmart(x))",
            "\u00ac(DisplayedInHomepage(g910) \u2295 Cheaper(g910))"
        ],
        "question": "G-910 is displayed on the homepage.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1254,
        "story_id": 436,
        "context": [
            "Products are either produced in China or the US. ",
            "All produced in China are labeled. ",
            "All produced in the US are sold in the US. ",
            "If labeled, then the product is cheaper. ",
            "All sold in the US are sold in Walmart. ",
            "All displayed on the homepage are sold in Walmart. ",
            "No products returned by customers are sold in Walmart. ",
            "G-910 is either displayed on the homepage or cheaper."
        ],
        "context_fol": [
            "\u2200x (China(x) \u2295 US(x))",
            "\u2200x (China(x) \u2192 Labeled(x))",
            "\u2200x (US(x) \u2192 SoldInUS(x))",
            "\u2200x (Labeled(x) \u2192 Cheaper(x))",
            "\u2200x (SoldInUS(x) \u2192 SoldInWalmart(x))",
            "\u2200x (DisplayedInHomepage(x) \u2192 SoldInWalmart(x))",
            "\u2200x (ReturnedByCustomer(x) \u2192 \u00acSoldInWalmart(x))",
            "\u00ac(DisplayedInHomepage(g910) \u2295 Cheaper(g910))"
        ],
        "question": "G-910 is not displayed on the homepage.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1255,
        "story_id": 436,
        "context": [
            "Products are either produced in China or the US. ",
            "All produced in China are labeled. ",
            "All produced in the US are sold in the US. ",
            "If labeled, then the product is cheaper. ",
            "All sold in the US are sold in Walmart. ",
            "All displayed on the homepage are sold in Walmart. ",
            "No products returned by customers are sold in Walmart. ",
            "G-910 is either displayed on the homepage or cheaper."
        ],
        "context_fol": [
            "\u2200x (China(x) \u2295 US(x))",
            "\u2200x (China(x) \u2192 Labeled(x))",
            "\u2200x (US(x) \u2192 SoldInUS(x))",
            "\u2200x (Labeled(x) \u2192 Cheaper(x))",
            "\u2200x (SoldInUS(x) \u2192 SoldInWalmart(x))",
            "\u2200x (DisplayedInHomepage(x) \u2192 SoldInWalmart(x))",
            "\u2200x (ReturnedByCustomer(x) \u2192 \u00acSoldInWalmart(x))",
            "\u00ac(DisplayedInHomepage(g910) \u2295 Cheaper(g910))"
        ],
        "question": "G-910 is a product returned by customers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1256,
        "story_id": 436,
        "context": [
            "Products are either produced in China or the US. ",
            "All produced in China are labeled. ",
            "All produced in the US are sold in the US. ",
            "If labeled, then the product is cheaper. ",
            "All sold in the US are sold in Walmart. ",
            "All displayed on the homepage are sold in Walmart. ",
            "No products returned by customers are sold in Walmart. ",
            "G-910 is either displayed on the homepage or cheaper."
        ],
        "context_fol": [
            "\u2200x (China(x) \u2295 US(x))",
            "\u2200x (China(x) \u2192 Labeled(x))",
            "\u2200x (US(x) \u2192 SoldInUS(x))",
            "\u2200x (Labeled(x) \u2192 Cheaper(x))",
            "\u2200x (SoldInUS(x) \u2192 SoldInWalmart(x))",
            "\u2200x (DisplayedInHomepage(x) \u2192 SoldInWalmart(x))",
            "\u2200x (ReturnedByCustomer(x) \u2192 \u00acSoldInWalmart(x))",
            "\u00ac(DisplayedInHomepage(g910) \u2295 Cheaper(g910))"
        ],
        "question": "G-910 is a product returned by customers or sold in Walmart.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1257,
        "story_id": 436,
        "context": [
            "Products are either produced in China or the US. ",
            "All produced in China are labeled. ",
            "All produced in the US are sold in the US. ",
            "If labeled, then the product is cheaper. ",
            "All sold in the US are sold in Walmart. ",
            "All displayed on the homepage are sold in Walmart. ",
            "No products returned by customers are sold in Walmart. ",
            "G-910 is either displayed on the homepage or cheaper."
        ],
        "context_fol": [
            "\u2200x (China(x) \u2295 US(x))",
            "\u2200x (China(x) \u2192 Labeled(x))",
            "\u2200x (US(x) \u2192 SoldInUS(x))",
            "\u2200x (Labeled(x) \u2192 Cheaper(x))",
            "\u2200x (SoldInUS(x) \u2192 SoldInWalmart(x))",
            "\u2200x (DisplayedInHomepage(x) \u2192 SoldInWalmart(x))",
            "\u2200x (ReturnedByCustomer(x) \u2192 \u00acSoldInWalmart(x))",
            "\u00ac(DisplayedInHomepage(g910) \u2295 Cheaper(g910))"
        ],
        "question": "G-910 is either returned by customers or sold in Walmart.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 944,
        "story_id": 354,
        "context": [
            "People either order a lot of Amazon packages or are environmentally conscious.",
            "If people order a lot of Amazon packages, then they get a lot of daily mail delivered.",
            "If people are environmentally conscious, then they have solar panels in their homes.",
            "If people get a lot of daily mail delivered, then they are very involved with their neighborhood.",
            "If people have solar panels in their homes, then they save a lot of money.",
            "If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. "
        ],
        "context_fol": [
            "\u2200x (Amazon(x) \u2295 Environmental(x))",
            "\u2200x (Amazon(x) \u2192 DailyMail(x))",
            "\u2200x (Environmental(x) \u2192 Solar(x))",
            "\u2200x (DailyMail(x) \u2192 Neighborhood(x))",
            "\u2200x (Solar(x) \u2192 SaveMoney(x))",
            "\u00ac(DailyMail(marcy) \u2295 Neighborhood(marcy)) \u2192 (\u00acDailyMail(marcy) \u2228 \u00acAmazon(marcy))"
        ],
        "question": "Marcy either orders a lot of Amazon packages or saves a lot of money.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 945,
        "story_id": 354,
        "context": [
            "People either order a lot of Amazon packages or are environmentally conscious.",
            "If people order a lot of Amazon packages, then they get a lot of daily mail delivered.",
            "If people are environmentally conscious, then they have solar panels in their homes.",
            "If people get a lot of daily mail delivered, then they are very involved with their neighborhood.",
            "If people have solar panels in their homes, then they save a lot of money.",
            "If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. "
        ],
        "context_fol": [
            "\u2200x (Amazon(x) \u2295 Environmental(x))",
            "\u2200x (Amazon(x) \u2192 DailyMail(x))",
            "\u2200x (Environmental(x) \u2192 Solar(x))",
            "\u2200x (DailyMail(x) \u2192 Neighborhood(x))",
            "\u2200x (Solar(x) \u2192 SaveMoney(x))",
            "\u00ac(DailyMail(marcy) \u2295 Neighborhood(marcy)) \u2192 (\u00acDailyMail(marcy) \u2228 \u00acAmazon(marcy))"
        ],
        "question": "If Marcy is not a person who orders a lot of Amazon packages and is very environmentally conscious, then Taylor is not someone who saves a lot of money and is environmentally conscious.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 497,
        "story_id": 172,
        "context": [
            "Indonesia is a country.",
            "In Indonesia, the prosecutor only personally investigates cases of some special crimes.",
            "Corruption is a type of crime.",
            "Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ",
            "Evidence can be either satisfactory or unsatisfactory.",
            "If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court."
        ],
        "context_fol": [
            "Country(indonesia)",
            "\u2203x \u2203y (Country(indonesia) \u2227 Prosecutor(x) \u2227 Crime(y) \u2192 InvestigatePersonally(x, y))",
            "Crime(corruption)",
            "\u2200x \u2200y (Crime(y) \u2227 PoliceCompInves(y) \u2227 Prosecutor(x) \u2192 Evidence(y) \u2227 HandToProsecutor(x, y))",
            "\u2200x (Crime(x) \u2227 Evidence(x) \u2227 (Satisfactory(x) \u2295 Unsatisfactory(x)))",
            "\u2200x \u2200y (Evidence(y) \u2227 HandToProsecutor(x, y) \u2227 Satisfactory(y) \u2192 ProsecuteTheOffender(x, y))"
        ],
        "question": "When the police complete investigations, the prosecutor will prosecute the offender at an appropriate court.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 498,
        "story_id": 172,
        "context": [
            "Indonesia is a country.",
            "In Indonesia, the prosecutor only personally investigates cases of some special crimes.",
            "Corruption is a type of crime.",
            "Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ",
            "Evidence can be either satisfactory or unsatisfactory.",
            "If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court."
        ],
        "context_fol": [
            "Country(indonesia)",
            "\u2203x \u2203y (Country(indonesia) \u2227 Prosecutor(x) \u2227 Crime(y) \u2192 InvestigatePersonally(x, y))",
            "Crime(corruption)",
            "\u2200x \u2200y (Crime(y) \u2227 PoliceCompInves(y) \u2227 Prosecutor(x) \u2192 Evidence(y) \u2227 HandToProsecutor(x, y))",
            "\u2200x (Crime(x) \u2227 Evidence(x) \u2227 (Satisfactory(x) \u2295 Unsatisfactory(x)))",
            "\u2200x \u2200y (Evidence(y) \u2227 HandToProsecutor(x, y) \u2227 Satisfactory(y) \u2192 ProsecuteTheOffender(x, y))"
        ],
        "question": "In Indonesia, the prosecutor personally investigates cases of corruption.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 499,
        "story_id": 172,
        "context": [
            "Indonesia is a country.",
            "In Indonesia, the prosecutor only personally investigates cases of some special crimes.",
            "Corruption is a type of crime.",
            "Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ",
            "Evidence can be either satisfactory or unsatisfactory.",
            "If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court."
        ],
        "context_fol": [
            "Country(indonesia)",
            "\u2203x \u2203y (Country(indonesia) \u2227 Prosecutor(x) \u2227 Crime(y) \u2192 InvestigatePersonally(x, y))",
            "Crime(corruption)",
            "\u2200x \u2200y (Crime(y) \u2227 PoliceCompInves(y) \u2227 Prosecutor(x) \u2192 Evidence(y) \u2227 HandToProsecutor(x, y))",
            "\u2200x (Crime(x) \u2227 Evidence(x) \u2227 (Satisfactory(x) \u2295 Unsatisfactory(x)))",
            "\u2200x \u2200y (Evidence(y) \u2227 HandToProsecutor(x, y) \u2227 Satisfactory(y) \u2192 ProsecuteTheOffender(x, y))"
        ],
        "question": "When the police complete investigations, the prosecutor investigates in personally.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 901,
        "story_id": 341,
        "context": [
            "No watch that is battery-powered is automatic.",
            "All digital watches are battery-powered.",
            "Some mechanical watches are automatic.",
            "All smart watches are digital.",
            "Moonwatch is not a digital watch or an automatic."
        ],
        "context_fol": [
            "\u2200x (BatteryPoweredWatch(x) \u2192 \u00acAutomaticWatch(x))",
            "\u2200x (DigitalWatch(x) \u2192 BatteryPoweredWatch(x))",
            "\u2203x (MechanicalWatch(x) \u2227 AutomaticWatch(x))",
            "\u2200x (SmartWatch(x) \u2192 DigitalWatch(x))",
            "\u00acDigitalWatch(moonwatch) \u2295 AutomaticWatch(moonwatch)"
        ],
        "question": "Moonwatch is a mechanical watch.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 902,
        "story_id": 341,
        "context": [
            "No watch that is battery-powered is automatic.",
            "All digital watches are battery-powered.",
            "Some mechanical watches are automatic.",
            "All smart watches are digital.",
            "Moonwatch is not a digital watch or an automatic."
        ],
        "context_fol": [
            "\u2200x (BatteryPoweredWatch(x) \u2192 \u00acAutomaticWatch(x))",
            "\u2200x (DigitalWatch(x) \u2192 BatteryPoweredWatch(x))",
            "\u2203x (MechanicalWatch(x) \u2227 AutomaticWatch(x))",
            "\u2200x (SmartWatch(x) \u2192 DigitalWatch(x))",
            "\u00acDigitalWatch(moonwatch) \u2295 AutomaticWatch(moonwatch)"
        ],
        "question": "Moonwatch is a smartwatch and a mechanical watch.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 903,
        "story_id": 341,
        "context": [
            "No watch that is battery-powered is automatic.",
            "All digital watches are battery-powered.",
            "Some mechanical watches are automatic.",
            "All smart watches are digital.",
            "Moonwatch is not a digital watch or an automatic."
        ],
        "context_fol": [
            "\u2200x (BatteryPoweredWatch(x) \u2192 \u00acAutomaticWatch(x))",
            "\u2200x (DigitalWatch(x) \u2192 BatteryPoweredWatch(x))",
            "\u2203x (MechanicalWatch(x) \u2227 AutomaticWatch(x))",
            "\u2200x (SmartWatch(x) \u2192 DigitalWatch(x))",
            "\u00acDigitalWatch(moonwatch) \u2295 AutomaticWatch(moonwatch)"
        ],
        "question": "If Moonwatch is a smartwatch and a mechanical watch, then Moonwatch is not a mechanical watch.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 904,
        "story_id": 341,
        "context": [
            "No watch that is battery-powered is automatic.",
            "All digital watches are battery-powered.",
            "Some mechanical watches are automatic.",
            "All smart watches are digital.",
            "Moonwatch is not a digital watch or an automatic."
        ],
        "context_fol": [
            "\u2200x (BatteryPoweredWatch(x) \u2192 \u00acAutomaticWatch(x))",
            "\u2200x (DigitalWatch(x) \u2192 BatteryPoweredWatch(x))",
            "\u2203x (MechanicalWatch(x) \u2227 AutomaticWatch(x))",
            "\u2200x (SmartWatch(x) \u2192 DigitalWatch(x))",
            "\u00acDigitalWatch(moonwatch) \u2295 AutomaticWatch(moonwatch)"
        ],
        "question": "If Moonwatch is a mechanical or battery-powered watch, then Moonwatch is not a smartwatch.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 691,
        "story_id": 243,
        "context": [
            "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.",
            "People who have the talent of cooking can distinguish the taste of different condiments.",
            "Only people with the talent of cooking can make delicious meals.",
            "If the meal is popular at the party, then it is delicious.",
            "John can make meals which are popular at the party."
        ],
        "context_fol": [
            "\u2200x (People(x) \u2227 DistinguishCondiments(x) \u2192 UseDiffCondiments(x)) \u2227 (\u2203x (People(x) \u2227 \u00acDistinguishCondiments(x) \u2227 UseDiffCondiments(x))) \u2227 \u00ac(\u2200x (People(x) \u2227 DistinguishCondiments(x)))",
            "\u2200x (People(x) \u2227 TalentCooking(x) \u2192 DistinguishCondiments(x))",
            "\u2200x \u2200y (MakeMeal(x, y) \u2227 Delicious(y) \u2227 People(x) \u2192 TalentCooking(x)) ",
            "\u2200x \u2200y (MakeMeal(x, y) \u2227 People(x) \u2227 Popular(y) \u2192 Delicious(y))",
            "\u2203x (People(john) \u2227 MakeMeal(john, x) \u2227 Popular(x) \u2227 People(peter) \u2227 \u00acUseDiffCondiments(peter))"
        ],
        "question": "John cannot use different condiments to cook.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 701,
        "story_id": 252,
        "context": [
            "Effective monetary policy is possible with successful inflation control and a strong national currency.",
            "A country cannot simultaneously regulate the exchange rate and successfully control inflation.",
            "The introduction of an embargo on foreign trade goods in a country leads to a sharp decrease in exports.",
            "If exports fall sharply, the national currency cannot be in this country.",
            "Regulation of the exchange rate is required to have a strong national currency. ",
            "There is an embargo on Russian foreign trade goods."
        ],
        "context_fol": [
            "\u2200x (EffMonPolicy(x) \u2192 InfControl(x) \u2227 StongCurr(x))",
            "\u00ac(\u2200x (InfControl(x) \u2227 ExRate(x)))",
            "\u2200x (Embargo(x) \u2192 ExportFall(x))",
            "\u2200x (ExportFall(x) \u2192 \u00acStongCurr(x))",
            "\u2200x (ExRate(x) \u2192 StongCurr(x))",
            "Embargo(russia)"
        ],
        "question": "In Russia, an effective monetary policy is possible.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 421,
        "story_id": 143,
        "context": [
            "Video Gag is a French television series that airs weekly.",
            "Video Gag airs on the French broadcast channel TF1. ",
            "If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.",
            "All videos aired on Video Gag are in French."
        ],
        "context_fol": [
            "\u2200x (VideoGag(x) \u2192 FrenchTelevision(x) \u2227 AirsWeekly(x))",
            "\u2200x (VideoGag(x) \u2192 ChannelTF1(x))",
            "\u2200x (FunnyVideos(x) \u2192 AirsWeekly(x))",
            "\u2200x (VideoGag(x) \u2192 AirsWeekly(x) \u2227 French(x))"
        ],
        "question": "Viewers send in funny videos to the French broadcast channel that are in French.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 422,
        "story_id": 143,
        "context": [
            "Video Gag is a French television series that airs weekly.",
            "Video Gag airs on the French broadcast channel TF1. ",
            "If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.",
            "All videos aired on Video Gag are in French."
        ],
        "context_fol": [
            "\u2200x (VideoGag(x) \u2192 FrenchTelevision(x) \u2227 AirsWeekly(x))",
            "\u2200x (VideoGag(x) \u2192 ChannelTF1(x))",
            "\u2200x (FunnyVideos(x) \u2192 AirsWeekly(x))",
            "\u2200x (VideoGag(x) \u2192 AirsWeekly(x) \u2227 French(x))"
        ],
        "question": "Viewers send in funny videos to the French broadcast channel that are in English.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1386,
        "story_id": 476,
        "context": [
            "All phones are things.",
            "All cellphones are phones. ",
            "All iPhones are cellphones. ",
            "All engineers are workers.",
            "All workers are human. ",
            "Jack is either an engineer or a worker.",
            "Jack is is either a human or a phone."
        ],
        "context_fol": [
            "\u2200x (Phone(x) \u2192 Thing(x))",
            "\u2200x (Cellphone(x) \u2192 Phone(x))",
            "\u2200x (Iphone(x) \u2192 Cellphone(x))",
            "\u2200x (Engineer(x) \u2192 Worker(x))",
            "\u2200x (Worker(x) \u2192 Human(x))",
            "Engineer(jack) \u2295 Worker(jack) ",
            "Human(jack) \u2295 Phone(jack)"
        ],
        "question": "Jack is a thing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1387,
        "story_id": 476,
        "context": [
            "All phones are things.",
            "All cellphones are phones. ",
            "All iPhones are cellphones. ",
            "All engineers are workers.",
            "All workers are human. ",
            "Jack is either an engineer or a worker.",
            "Jack is is either a human or a phone."
        ],
        "context_fol": [
            "\u2200x (Phone(x) \u2192 Thing(x))",
            "\u2200x (Cellphone(x) \u2192 Phone(x))",
            "\u2200x (Iphone(x) \u2192 Cellphone(x))",
            "\u2200x (Engineer(x) \u2192 Worker(x))",
            "\u2200x (Worker(x) \u2192 Human(x))",
            "Engineer(jack) \u2295 Worker(jack) ",
            "Human(jack) \u2295 Phone(jack)"
        ],
        "question": "Jack is not a thing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1388,
        "story_id": 476,
        "context": [
            "All phones are things.",
            "All cellphones are phones. ",
            "All iPhones are cellphones. ",
            "All engineers are workers.",
            "All workers are human. ",
            "Jack is either an engineer or a worker.",
            "Jack is is either a human or a phone."
        ],
        "context_fol": [
            "\u2200x (Phone(x) \u2192 Thing(x))",
            "\u2200x (Cellphone(x) \u2192 Phone(x))",
            "\u2200x (Iphone(x) \u2192 Cellphone(x))",
            "\u2200x (Engineer(x) \u2192 Worker(x))",
            "\u2200x (Worker(x) \u2192 Human(x))",
            "Engineer(jack) \u2295 Worker(jack) ",
            "Human(jack) \u2295 Phone(jack)"
        ],
        "question": "Jack is a thing and an iPhone.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1389,
        "story_id": 476,
        "context": [
            "All phones are things.",
            "All cellphones are phones. ",
            "All iPhones are cellphones. ",
            "All engineers are workers.",
            "All workers are human. ",
            "Jack is either an engineer or a worker.",
            "Jack is is either a human or a phone."
        ],
        "context_fol": [
            "\u2200x (Phone(x) \u2192 Thing(x))",
            "\u2200x (Cellphone(x) \u2192 Phone(x))",
            "\u2200x (Iphone(x) \u2192 Cellphone(x))",
            "\u2200x (Engineer(x) \u2192 Worker(x))",
            "\u2200x (Worker(x) \u2192 Human(x))",
            "Engineer(jack) \u2295 Worker(jack) ",
            "Human(jack) \u2295 Phone(jack)"
        ],
        "question": "Jack is not both a thing and an iPhone.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 738,
        "story_id": 289,
        "context": [
            "All iPhones are electronic.",
            "Some phones are iPhones."
        ],
        "context_fol": [
            "\u2200x (IPhone(x) \u2192 Electronic(x))",
            "\u2203x (Phone(x) \u2227 IPhone(x))"
        ],
        "question": "No phones are electronic.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 111,
        "story_id": 38,
        "context": [
            "Metropolitan Museum of Art is a museum in NYC.",
            "Whitney Museum of American Art is a museum in NYC.",
            "Museum of Modern Art (MoMA) is a museum if NYC. ",
            "Metropolitan Museum of Art includes Bytantine and Islamic Art. ",
            "Whitney Museum of American Art includes American art."
        ],
        "context_fol": [
            "Museum(metropolitanMuseumofArt) \u2227 InNYC(metropolitanMuseumofArt)",
            "Museum(whitneyMuseumofAmericanArt) \u2227 InNYC(whitneyMuseumofAmericanArt)",
            "Museum(museumofModernArt) \u2227 InNYC(museumofModernArt)",
            "Include(metropolitanMuseumofArt, byzantineArt) \u2227 Include(metropolitanMuseumofArt, islamicArt)",
            "Include(whitneyMuseumofAmericanArt, americanArt)"
        ],
        "question": "A museum in NYC includes Byzantine and Islamic Art.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 112,
        "story_id": 38,
        "context": [
            "Metropolitan Museum of Art is a museum in NYC.",
            "Whitney Museum of American Art is a museum in NYC.",
            "Museum of Modern Art (MoMA) is a museum if NYC. ",
            "Metropolitan Museum of Art includes Bytantine and Islamic Art. ",
            "Whitney Museum of American Art includes American art."
        ],
        "context_fol": [
            "Museum(metropolitanMuseumofArt) \u2227 InNYC(metropolitanMuseumofArt)",
            "Museum(whitneyMuseumofAmericanArt) \u2227 InNYC(whitneyMuseumofAmericanArt)",
            "Museum(museumofModernArt) \u2227 InNYC(museumofModernArt)",
            "Include(metropolitanMuseumofArt, byzantineArt) \u2227 Include(metropolitanMuseumofArt, islamicArt)",
            "Include(whitneyMuseumofAmericanArt, americanArt)"
        ],
        "question": "A museum in NYC includes American art.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 113,
        "story_id": 38,
        "context": [
            "Metropolitan Museum of Art is a museum in NYC.",
            "Whitney Museum of American Art is a museum in NYC.",
            "Museum of Modern Art (MoMA) is a museum if NYC. ",
            "Metropolitan Museum of Art includes Bytantine and Islamic Art. ",
            "Whitney Museum of American Art includes American art."
        ],
        "context_fol": [
            "Museum(metropolitanMuseumofArt) \u2227 InNYC(metropolitanMuseumofArt)",
            "Museum(whitneyMuseumofAmericanArt) \u2227 InNYC(whitneyMuseumofAmericanArt)",
            "Museum(museumofModernArt) \u2227 InNYC(museumofModernArt)",
            "Include(metropolitanMuseumofArt, byzantineArt) \u2227 Include(metropolitanMuseumofArt, islamicArt)",
            "Include(whitneyMuseumofAmericanArt, americanArt)"
        ],
        "question": "A museum in NYC includes Greek art.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1122,
        "story_id": 403,
        "context": [
            "A person either likes eating cheese or is a francophile.",
            "No francophiles are people who like Spain as their favorite country.",
            "A person likes Spain as their favorite country or likes eating cheese.",
            "Benji is not a person who likes eating cheese and a person who studies Spanish.",
            "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French."
        ],
        "context_fol": [
            "\u2200x (Spanish(x) \u2228 Francophile(x))",
            "\u2200x (Francophile(x) \u2192 \u00acSpainFav(x))",
            "\u2200x (SpainFav(x) \u2228 Cheese(x))",
            "\u00ac(Cheese(benji) \u2227 Spanish(benji))",
            "\u00ac(Spanish(benji) \u2228 French(benji)) \u2192 \u00ac(Cheese(benji) \u2295 French(benji))"
        ],
        "question": "Benji is a person who likes eating cheese.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1123,
        "story_id": 403,
        "context": [
            "A person either likes eating cheese or is a francophile.",
            "No francophiles are people who like Spain as their favorite country.",
            "A person likes Spain as their favorite country or likes eating cheese.",
            "Benji is not a person who likes eating cheese and a person who studies Spanish.",
            "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French."
        ],
        "context_fol": [
            "\u2200x (Spanish(x) \u2228 Francophile(x))",
            "\u2200x (Francophile(x) \u2192 \u00acSpainFav(x))",
            "\u2200x (SpainFav(x) \u2228 Cheese(x))",
            "\u00ac(Cheese(benji) \u2227 Spanish(benji))",
            "\u00ac(Spanish(benji) \u2228 French(benji)) \u2192 \u00ac(Cheese(benji) \u2295 French(benji))"
        ],
        "question": "If Benji is either a person who likes eating cheese or a francophile, then Benji is neither a person who studies Spanish nor a person who studies French.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1124,
        "story_id": 403,
        "context": [
            "A person either likes eating cheese or is a francophile.",
            "No francophiles are people who like Spain as their favorite country.",
            "A person likes Spain as their favorite country or likes eating cheese.",
            "Benji is not a person who likes eating cheese and a person who studies Spanish.",
            "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French."
        ],
        "context_fol": [
            "\u2200x (Spanish(x) \u2228 Francophile(x))",
            "\u2200x (Francophile(x) \u2192 \u00acSpainFav(x))",
            "\u2200x (SpainFav(x) \u2228 Cheese(x))",
            "\u00ac(Cheese(benji) \u2227 Spanish(benji))",
            "\u00ac(Spanish(benji) \u2228 French(benji)) \u2192 \u00ac(Cheese(benji) \u2295 French(benji))"
        ],
        "question": "If Benji is a person who likes Spain as their favorite country or studies French, then Benji is either a person who studies Spanish or a person who likes Spain as their favorite country.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 84,
        "story_id": 29,
        "context": [
            "Gasteren is village located in the province of Drenthe.",
            "Drenthe is a Dutch province. ",
            "No cities are villages.",
            "The population of a village in Drenthe was 155 people."
        ],
        "context_fol": [
            "Village(gasteren) \u2227 Province(drenthe) \u2227 LocatedIn(gasteren, drenthe)",
            "Province(drenthe) \u2227 Dutch(drenthe)",
            "\u2200x (City(x) \u2192 \u00acVillage(x))",
            "\u2203x (Population155(x) \u2227 Village(x) \u2227 LocatedIn(x, drenthe))"
        ],
        "question": "Gasteren is a Dutch village.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 85,
        "story_id": 29,
        "context": [
            "Gasteren is village located in the province of Drenthe.",
            "Drenthe is a Dutch province. ",
            "No cities are villages.",
            "The population of a village in Drenthe was 155 people."
        ],
        "context_fol": [
            "Village(gasteren) \u2227 Province(drenthe) \u2227 LocatedIn(gasteren, drenthe)",
            "Province(drenthe) \u2227 Dutch(drenthe)",
            "\u2200x (City(x) \u2192 \u00acVillage(x))",
            "\u2203x (Population155(x) \u2227 Village(x) \u2227 LocatedIn(x, drenthe))"
        ],
        "question": "Gasteren is a city.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 86,
        "story_id": 29,
        "context": [
            "Gasteren is village located in the province of Drenthe.",
            "Drenthe is a Dutch province. ",
            "No cities are villages.",
            "The population of a village in Drenthe was 155 people."
        ],
        "context_fol": [
            "Village(gasteren) \u2227 Province(drenthe) \u2227 LocatedIn(gasteren, drenthe)",
            "Province(drenthe) \u2227 Dutch(drenthe)",
            "\u2200x (City(x) \u2192 \u00acVillage(x))",
            "\u2203x (Population155(x) \u2227 Village(x) \u2227 LocatedIn(x, drenthe))"
        ],
        "question": "Gasteren has a population of 155.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 603,
        "story_id": 210,
        "context": [
            "The only types of mammals that lay eggs are platypuses and echidnas.",
            "Platypuses are not hyrax.",
            "Echidnas are not hyrax.",
            "No mammals are invertebrates.",
            "All animals are either vertebrates or invertebrates.",
            "Mammals are animals.",
            "Hyraxes are mammals.",
            "Grebes lay eggs.",
            "Grebes are not platypuses and also not echidnas."
        ],
        "context_fol": [
            "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypuses(x) \u2295 Echidnas(x)))",
            "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
            "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
            "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
            "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
            "\u2200x (Mammal(x) \u2192 Animal(x))",
            "\u2200x (Hyrax(x) \u2192 Mammal(x))",
            "\u2200x (Grebes(x) \u2192 LayEgg(x))",
            "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
        ],
        "question": "Hyraxes lay eggs.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 604,
        "story_id": 210,
        "context": [
            "The only types of mammals that lay eggs are platypuses and echidnas.",
            "Platypuses are not hyrax.",
            "Echidnas are not hyrax.",
            "No mammals are invertebrates.",
            "All animals are either vertebrates or invertebrates.",
            "Mammals are animals.",
            "Hyraxes are mammals.",
            "Grebes lay eggs.",
            "Grebes are not platypuses and also not echidnas."
        ],
        "context_fol": [
            "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypuses(x) \u2295 Echidnas(x)))",
            "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
            "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
            "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
            "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
            "\u2200x (Mammal(x) \u2192 Animal(x))",
            "\u2200x (Hyrax(x) \u2192 Mammal(x))",
            "\u2200x (Grebes(x) \u2192 LayEgg(x))",
            "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
        ],
        "question": "Grebes are not mammals.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 605,
        "story_id": 210,
        "context": [
            "The only types of mammals that lay eggs are platypuses and echidnas.",
            "Platypuses are not hyrax.",
            "Echidnas are not hyrax.",
            "No mammals are invertebrates.",
            "All animals are either vertebrates or invertebrates.",
            "Mammals are animals.",
            "Hyraxes are mammals.",
            "Grebes lay eggs.",
            "Grebes are not platypuses and also not echidnas."
        ],
        "context_fol": [
            "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypuses(x) \u2295 Echidnas(x)))",
            "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))",
            "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))",
            "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))",
            "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))",
            "\u2200x (Mammal(x) \u2192 Animal(x))",
            "\u2200x (Hyrax(x) \u2192 Mammal(x))",
            "\u2200x (Grebes(x) \u2192 LayEgg(x))",
            "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
        ],
        "question": "Platypuses are vertebrates.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 271,
        "story_id": 89,
        "context": [
            "Bobby Flynn is a singer-songwriter. ",
            "Bobby Flynn finished 7th while competing on Australian Idol.",
            "Australian Idol competitors are Australian citizens.",
            "The Omega Three band made a nationwide tour in 2007.",
            "Bobby Flynn is a member of The Omega Three band.",
            "Bobby Flynn was born in Queensland."
        ],
        "context_fol": [
            "Singer(bobbyFlynn) \u2227 SongWriter(bobbyFlynn)",
            "Finished7th(bobbyFlynn) \u2227 CompetedOnAustralianIdol(bobbyFlynn)",
            "\u2200x (CompetedOnAustralianIdol(x) \u2192 AustralianCitizen(x))",
            "MadeNationWideTour2007(theOmegaThreeBand) ",
            "IsMember(bobbyFlynn, theOmegaThreeBand)",
            "BornIn(bobbyFlynn, queensland)"
        ],
        "question": "Bobby Flynn is an Australian citizen.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 272,
        "story_id": 89,
        "context": [
            "Bobby Flynn is a singer-songwriter. ",
            "Bobby Flynn finished 7th while competing on Australian Idol.",
            "Australian Idol competitors are Australian citizens.",
            "The Omega Three band made a nationwide tour in 2007.",
            "Bobby Flynn is a member of The Omega Three band.",
            "Bobby Flynn was born in Queensland."
        ],
        "context_fol": [
            "Singer(bobbyFlynn) \u2227 SongWriter(bobbyFlynn)",
            "Finished7th(bobbyFlynn) \u2227 CompetedOnAustralianIdol(bobbyFlynn)",
            "\u2200x (CompetedOnAustralianIdol(x) \u2192 AustralianCitizen(x))",
            "MadeNationWideTour2007(theOmegaThreeBand) ",
            "IsMember(bobbyFlynn, theOmegaThreeBand)",
            "BornIn(bobbyFlynn, queensland)"
        ],
        "question": "Bobby Flynn flew to America in 2007.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 273,
        "story_id": 89,
        "context": [
            "Bobby Flynn is a singer-songwriter. ",
            "Bobby Flynn finished 7th while competing on Australian Idol.",
            "Australian Idol competitors are Australian citizens.",
            "The Omega Three band made a nationwide tour in 2007.",
            "Bobby Flynn is a member of The Omega Three band.",
            "Bobby Flynn was born in Queensland."
        ],
        "context_fol": [
            "Singer(bobbyFlynn) \u2227 SongWriter(bobbyFlynn)",
            "Finished7th(bobbyFlynn) \u2227 CompetedOnAustralianIdol(bobbyFlynn)",
            "\u2200x (CompetedOnAustralianIdol(x) \u2192 AustralianCitizen(x))",
            "MadeNationWideTour2007(theOmegaThreeBand) ",
            "IsMember(bobbyFlynn, theOmegaThreeBand)",
            "BornIn(bobbyFlynn, queensland)"
        ],
        "question": "Bobby Flynn was born in Queens.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 718,
        "story_id": 269,
        "context": [
            "All proteins are organic compounds.",
            "All enzymes are organic compounds."
        ],
        "context_fol": [
            "\u2200x (Protein(x) \u2192 OrganicCompound(x))",
            "\u2200x (Enzyme(x) \u2192 OrganicCompound(x))"
        ],
        "question": "All enzymes are proteins.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 296,
        "story_id": 98,
        "context": [
            "One American screenwriter and producer is Maggie Friedman.",
            "Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.",
            "Witches of East End is a fantasy-drama series.",
            "Maggie Friedman produced and developed Eastwick.",
            "Eastwick is a series by ABC."
        ],
        "context_fol": [
            "American(maggiefriedman) \u2227 Screenwriter(maggiefriedman) \u2227 Producer(maggiefriedman)",
            "ShowRunnerOf(maggiefriedman, witchesofeastend) \u2227 ExecutiveProducerOf(maggiefriedman, witchesofeastend) \u2227 LifetimeTelevisionSeries(maggiefriedman)",
            "Fantasy-Drama(witchesofeastend) \u2227 Series(witchesofeastend)",
            "Produced(maggiefriedman, eastwick) \u2227 Developed(maggiefriedman, eastwick)",
            "Series(eastwick) \u2227 By(eastwick, abc)"
        ],
        "question": "There is a series by ABC that was developed by the showrunner of Witches of East End.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 297,
        "story_id": 98,
        "context": [
            "One American screenwriter and producer is Maggie Friedman.",
            "Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.",
            "Witches of East End is a fantasy-drama series.",
            "Maggie Friedman produced and developed Eastwick.",
            "Eastwick is a series by ABC."
        ],
        "context_fol": [
            "American(maggiefriedman) \u2227 Screenwriter(maggiefriedman) \u2227 Producer(maggiefriedman)",
            "ShowRunnerOf(maggiefriedman, witchesofeastend) \u2227 ExecutiveProducerOf(maggiefriedman, witchesofeastend) \u2227 LifetimeTelevisionSeries(maggiefriedman)",
            "Fantasy-Drama(witchesofeastend) \u2227 Series(witchesofeastend)",
            "Produced(maggiefriedman, eastwick) \u2227 Developed(maggiefriedman, eastwick)",
            "Series(eastwick) \u2227 By(eastwick, abc)"
        ],
        "question": "There isn't a series by ABC that was developed by the showrunner of Witches of East End.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 298,
        "story_id": 98,
        "context": [
            "One American screenwriter and producer is Maggie Friedman.",
            "Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.",
            "Witches of East End is a fantasy-drama series.",
            "Maggie Friedman produced and developed Eastwick.",
            "Eastwick is a series by ABC."
        ],
        "context_fol": [
            "American(maggiefriedman) \u2227 Screenwriter(maggiefriedman) \u2227 Producer(maggiefriedman)",
            "ShowRunnerOf(maggiefriedman, witchesofeastend) \u2227 ExecutiveProducerOf(maggiefriedman, witchesofeastend) \u2227 LifetimeTelevisionSeries(maggiefriedman)",
            "Fantasy-Drama(witchesofeastend) \u2227 Series(witchesofeastend)",
            "Produced(maggiefriedman, eastwick) \u2227 Developed(maggiefriedman, eastwick)",
            "Series(eastwick) \u2227 By(eastwick, abc)"
        ],
        "question": "Maggie Friedman developed Witches of East End.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 359,
        "story_id": 119,
        "context": [
            "Evangelos Eleftheriou is a Greek electrical engineer.",
            "Evangelos Eleftheriou worked for IBM in Zurich.",
            "If a company has employees working for them somewhere, then they have an office there.",
            "IBM is a company."
        ],
        "context_fol": [
            "Greek(evangeloseleftheriou) \u2227 ElectricalEngineer(evangeloseleftheriou)",
            "WorkedFor(evangeloseleftheriou, ibm) \u2227 WorkedIn(evangeloseleftheriou, zurich)",
            "\u2200x \u2200x \u2200z (Company(x) \u2227 WorkedFor(y, x) \u2227 WorkedIn(y, z) \u2192 HasOfficeIn(x, z))",
            "Company(ibm)"
        ],
        "question": "IBM has an office in London or Zurich.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 360,
        "story_id": 119,
        "context": [
            "Evangelos Eleftheriou is a Greek electrical engineer.",
            "Evangelos Eleftheriou worked for IBM in Zurich.",
            "If a company has employees working for them somewhere, then they have an office there.",
            "IBM is a company."
        ],
        "context_fol": [
            "Greek(evangeloseleftheriou) \u2227 ElectricalEngineer(evangeloseleftheriou)",
            "WorkedFor(evangeloseleftheriou, ibm) \u2227 WorkedIn(evangeloseleftheriou, zurich)",
            "\u2200x \u2200x \u2200z (Company(x) \u2227 WorkedFor(y, x) \u2227 WorkedIn(y, z) \u2192 HasOfficeIn(x, z))",
            "Company(ibm)"
        ],
        "question": "No Greeks have worked for IBM.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 434,
        "story_id": 148,
        "context": [
            "Before releasing their single, \"Hooray! Hooray! It's a Holi-Holiday!\", Boney M. had had seven consecutive German #1 singles.",
            "\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.",
            "Nevertheless, \"Hooray! Hooray! It's a Holi-Holiday!\" broke Boney M's streak of consecutive German #1 singles.",
            "A song that peaks below #1 on the german charts is also a song that is not the #1 single"
        ],
        "context_fol": [
            "\u2203x (Song(x) \u2227 By(x, boneym) \u2227 N1GermanSingle(x))",
            "Song(hooray) \u2227 HitEurope(hooray)",
            "Song(hooray) \u2227 \u00acN1GermanSingle(hooray)",
            "\u2200x (PeaksBelowN1(x) \u2194 \u00acN1GermanSingle(x))"
        ],
        "question": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a #1 hit in Germany.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 435,
        "story_id": 148,
        "context": [
            "Before releasing their single, \"Hooray! Hooray! It's a Holi-Holiday!\", Boney M. had had seven consecutive German #1 singles.",
            "\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.",
            "Nevertheless, \"Hooray! Hooray! It's a Holi-Holiday!\" broke Boney M's streak of consecutive German #1 singles.",
            "A song that peaks below #1 on the german charts is also a song that is not the #1 single"
        ],
        "context_fol": [
            "\u2203x (Song(x) \u2227 By(x, boneym) \u2227 N1GermanSingle(x))",
            "Song(hooray) \u2227 HitEurope(hooray)",
            "Song(hooray) \u2227 \u00acN1GermanSingle(hooray)",
            "\u2200x (PeaksBelowN1(x) \u2194 \u00acN1GermanSingle(x))"
        ],
        "question": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked below #1 on the German charts.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 436,
        "story_id": 148,
        "context": [
            "Before releasing their single, \"Hooray! Hooray! It's a Holi-Holiday!\", Boney M. had had seven consecutive German #1 singles.",
            "\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.",
            "Nevertheless, \"Hooray! Hooray! It's a Holi-Holiday!\" broke Boney M's streak of consecutive German #1 singles.",
            "A song that peaks below #1 on the german charts is also a song that is not the #1 single"
        ],
        "context_fol": [
            "\u2203x (Song(x) \u2227 By(x, boneym) \u2227 N1GermanSingle(x))",
            "Song(hooray) \u2227 HitEurope(hooray)",
            "Song(hooray) \u2227 \u00acN1GermanSingle(hooray)",
            "\u2200x (PeaksBelowN1(x) \u2194 \u00acN1GermanSingle(x))"
        ],
        "question": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked at #3 on the UK charts.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 697,
        "story_id": 249,
        "context": [
            "Every chef can cook.",
            "Some people who aren\u2019t chefs can cook.",
            "People who cook can make scrambled eggs and pasta.",
            "If someone can make cookies and muffins, they are a baker.",
            "Bakers who can also make scrambled eggs can make a good breakfast.",
            "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
        ],
        "context_fol": [
            "\u2200x (Chef(x) \u2192 Cook(x))",
            "\u2203x (\u00acChef(x) \u2227 Cook(x))",
            "\u2200x (Cook(x) \u2192 (MakeScrambledEggs(x) \u2227 MakePasta(x)))",
            "\u2200x (MakeCookies(x) \u2227 MakeMuffins(x) \u2192 Baker(x))",
            "\u2200x ((Baker(x) \u2227 MakeScrambledEggs(x)) \u2192 MakeGoodBreakfast(x))",
            "MakeCookies(luke) \u2227 MakeScrambledEggs(luke) \u2227 MakeMuffins(luke) \u2227 \u00acMakePasta(luke)"
        ],
        "question": "Luke can make a good breakfast.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 698,
        "story_id": 249,
        "context": [
            "Every chef can cook.",
            "Some people who aren\u2019t chefs can cook.",
            "People who cook can make scrambled eggs and pasta.",
            "If someone can make cookies and muffins, they are a baker.",
            "Bakers who can also make scrambled eggs can make a good breakfast.",
            "Luke can make cookies, scrambled eggs, and muffins, but not pasta."
        ],
        "context_fol": [
            "\u2200x (Chef(x) \u2192 Cook(x))",
            "\u2203x (\u00acChef(x) \u2227 Cook(x))",
            "\u2200x (Cook(x) \u2192 (MakeScrambledEggs(x) \u2227 MakePasta(x)))",
            "\u2200x (MakeCookies(x) \u2227 MakeMuffins(x) \u2192 Baker(x))",
            "\u2200x ((Baker(x) \u2227 MakeScrambledEggs(x)) \u2192 MakeGoodBreakfast(x))",
            "MakeCookies(luke) \u2227 MakeScrambledEggs(luke) \u2227 MakeMuffins(luke) \u2227 \u00acMakePasta(luke)"
        ],
        "question": "Luke is a chef.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 561,
        "story_id": 196,
        "context": [
            "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
            "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
            "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
            "ETS also develops K-12 statewide assessments used for accountability testing in many states."
        ],
        "context_fol": [
            "\u2203x (Develops(ets, x) \u2227 StandardizedTest(x) \u2227 In(x, unitedstates) \u2227 For(x, k-12andhighereducation))",
            "\u2203x (Administers(ets, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTests(x)))",
            "\u2203x (Develops(ets, x) \u2227 AssociatedWith(x, entrytouseducationinstitutions))",
            "\u2203x (Develops(ets, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilitytesting))"
        ],
        "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 562,
        "story_id": 196,
        "context": [
            "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
            "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
            "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
            "ETS also develops K-12 statewide assessments used for accountability testing in many states."
        ],
        "context_fol": [
            "\u2203x (Develops(ets, x) \u2227 StandardizedTest(x) \u2227 In(x, unitedstates) \u2227 For(x, k-12andhighereducation))",
            "\u2203x (Administers(ets, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTests(x)))",
            "\u2203x (Develops(ets, x) \u2227 AssociatedWith(x, entrytouseducationinstitutions))",
            "\u2203x (Develops(ets, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilitytesting))"
        ],
        "question": "ETS doesn't administer tests internationally.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 563,
        "story_id": 196,
        "context": [
            "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
            "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
            "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
            "ETS also develops K-12 statewide assessments used for accountability testing in many states."
        ],
        "context_fol": [
            "\u2203x (Develops(ets, x) \u2227 StandardizedTest(x) \u2227 In(x, unitedstates) \u2227 For(x, k-12andhighereducation))",
            "\u2203x (Administers(ets, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTests(x)))",
            "\u2203x (Develops(ets, x) \u2227 AssociatedWith(x, entrytouseducationinstitutions))",
            "\u2203x (Develops(ets, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilitytesting))"
        ],
        "question": "ETS administers international tests including the TOEFL, GRE and subject tests in China.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 998,
        "story_id": 373,
        "context": [
            "All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.",
            "There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.",
            "People either enjoy eating gelato ice cream or love to travel and vacation often.",
            "If people often take study abroad semesters to Europe, then they do not regret their college experiences.",
            "If people love to travel and vacation often, then they often take study abroad semesters to Europe.",
            "Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often."
        ],
        "context_fol": [
            "\u2200x (Gelato(x) \u2192 Italy(x))",
            "\u2200x (\u00acResist(x))",
            "\u2200x (Gelato(x) \u2228 Travel(x))",
            "\u2200x (Europe(x) \u2192 \u00acRegret(x))",
            "\u2200x (Travel(x) \u2192 Europe(x))",
            "(Gelato(robert) \u2227 Travel(robert)) \u2228 (\u00acGelato(robert) \u2227 \u00acTravel(robert))"
        ],
        "question": "Robert can resist the hallmark delectable drinks and desserts that are famed in Italy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 999,
        "story_id": 373,
        "context": [
            "All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.",
            "There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.",
            "People either enjoy eating gelato ice cream or love to travel and vacation often.",
            "If people often take study abroad semesters to Europe, then they do not regret their college experiences.",
            "If people love to travel and vacation often, then they often take study abroad semesters to Europe.",
            "Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often."
        ],
        "context_fol": [
            "\u2200x (Gelato(x) \u2192 Italy(x))",
            "\u2200x (\u00acResist(x))",
            "\u2200x (Gelato(x) \u2228 Travel(x))",
            "\u2200x (Europe(x) \u2192 \u00acRegret(x))",
            "\u2200x (Travel(x) \u2192 Europe(x))",
            "(Gelato(robert) \u2227 Travel(robert)) \u2228 (\u00acGelato(robert) \u2227 \u00acTravel(robert))"
        ],
        "question": "If Robert either would both enjoy a vacation to Italy and regrets his college experiences or neither would enjoy a vacation to Italy nor regrets his college experiences, then Robert would either enjoy a vacation to Italy or, if not, then he can resist the hallmark delectable drinks and desserts that are famed in Italy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1000,
        "story_id": 373,
        "context": [
            "All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.",
            "There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.",
            "People either enjoy eating gelato ice cream or love to travel and vacation often.",
            "If people often take study abroad semesters to Europe, then they do not regret their college experiences.",
            "If people love to travel and vacation often, then they often take study abroad semesters to Europe.",
            "Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often."
        ],
        "context_fol": [
            "\u2200x (Gelato(x) \u2192 Italy(x))",
            "\u2200x (\u00acResist(x))",
            "\u2200x (Gelato(x) \u2228 Travel(x))",
            "\u2200x (Europe(x) \u2192 \u00acRegret(x))",
            "\u2200x (Travel(x) \u2192 Europe(x))",
            "(Gelato(robert) \u2227 Travel(robert)) \u2228 (\u00acGelato(robert) \u2227 \u00acTravel(robert))"
        ],
        "question": "If Robert is not both a person who can resist the hallmark delectable drinks and desserts that are famed in Italy and regrets his college experiences, then Robert either enjoys eating gelato ice cream or would enjoy a vacation to Italy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 781,
        "story_id": 312,
        "context": [
            "To get a student visa, you must be full-time enrolled in an academic program.",
            "Those who are full-time enrolled in an academic program can not work full-time.",
            "Everyone who wants to study abroad needs to have a student visa.",
            "All PhD graduates can work full time. ",
            "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
        ],
        "context_fol": [
            "\u2200x (StudentVisa(x) \u2192 FullTimeAcademic(x))",
            "\u2200x (FullTimeAcademic(x) \u2192 \u00acWorkFullTime(x))",
            "\u2200x (StudyAbroad(x) \u2192 StudentVisa(x))",
            "\u2200x (PhdGraduate(x) \u2192 WorkFullTime(x))",
            "\u00acStudyAbroad(tom) \u2192 FullTimeAcademic(tom)"
        ],
        "question": "Tom is a PhD graduate.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 782,
        "story_id": 312,
        "context": [
            "To get a student visa, you must be full-time enrolled in an academic program.",
            "Those who are full-time enrolled in an academic program can not work full-time.",
            "Everyone who wants to study abroad needs to have a student visa.",
            "All PhD graduates can work full time. ",
            "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
        ],
        "context_fol": [
            "\u2200x (StudentVisa(x) \u2192 FullTimeAcademic(x))",
            "\u2200x (FullTimeAcademic(x) \u2192 \u00acWorkFullTime(x))",
            "\u2200x (StudyAbroad(x) \u2192 StudentVisa(x))",
            "\u2200x (PhdGraduate(x) \u2192 WorkFullTime(x))",
            "\u00acStudyAbroad(tom) \u2192 FullTimeAcademic(tom)"
        ],
        "question": "Tom is not a PhD graduate.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 783,
        "story_id": 312,
        "context": [
            "To get a student visa, you must be full-time enrolled in an academic program.",
            "Those who are full-time enrolled in an academic program can not work full-time.",
            "Everyone who wants to study abroad needs to have a student visa.",
            "All PhD graduates can work full time. ",
            "If Tom does not want to study abroad, he is full-time enrolled in an educational program."
        ],
        "context_fol": [
            "\u2200x (StudentVisa(x) \u2192 FullTimeAcademic(x))",
            "\u2200x (FullTimeAcademic(x) \u2192 \u00acWorkFullTime(x))",
            "\u2200x (StudyAbroad(x) \u2192 StudentVisa(x))",
            "\u2200x (PhdGraduate(x) \u2192 WorkFullTime(x))",
            "\u00acStudyAbroad(tom) \u2192 FullTimeAcademic(tom)"
        ],
        "question": "Tom wants to study abroad.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 396,
        "story_id": 134,
        "context": [
            "The installment sales method is the approach to recognize revenue under the US GAAP.",
            "In accrual accounting, revenues are recognized when they are realized.",
            "In cash accounting, revenues are recognized when cash is received.",
            "The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.",
            "Sally works for the US Securities and Exchange Commission."
        ],
        "context_fol": [
            "\u2200x (UsesGAAP(x) \u2192 UsesInstallmentMethod(x))",
            "\u2200x (UsesAccruralAccounting(x) \u2192 RecognizedWhen(revenues, realized))",
            "\u2200x (UsesCashAccounting(x) \u2192 RecognizedWhen(revenues, cashrecieved))",
            "DevelopedBy(usgaap, ussecuritiesandexchangecommission) \u2227 UsesGAAP(ussecuritiesandexchangecommission)",
            "WorksFor(sally, ussecuritiesandexchangecommission)"
        ],
        "question": "Sally's company utilizes the installment sales method.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 397,
        "story_id": 134,
        "context": [
            "The installment sales method is the approach to recognize revenue under the US GAAP.",
            "In accrual accounting, revenues are recognized when they are realized.",
            "In cash accounting, revenues are recognized when cash is received.",
            "The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.",
            "Sally works for the US Securities and Exchange Commission."
        ],
        "context_fol": [
            "\u2200x (UsesGAAP(x) \u2192 UsesInstallmentMethod(x))",
            "\u2200x (UsesAccruralAccounting(x) \u2192 RecognizedWhen(revenues, realized))",
            "\u2200x (UsesCashAccounting(x) \u2192 RecognizedWhen(revenues, cashrecieved))",
            "DevelopedBy(usgaap, ussecuritiesandexchangecommission) \u2227 UsesGAAP(ussecuritiesandexchangecommission)",
            "WorksFor(sally, ussecuritiesandexchangecommission)"
        ],
        "question": "The company Sally works for performs accrual accounting.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 398,
        "story_id": 134,
        "context": [
            "The installment sales method is the approach to recognize revenue under the US GAAP.",
            "In accrual accounting, revenues are recognized when they are realized.",
            "In cash accounting, revenues are recognized when cash is received.",
            "The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.",
            "Sally works for the US Securities and Exchange Commission."
        ],
        "context_fol": [
            "\u2200x (UsesGAAP(x) \u2192 UsesInstallmentMethod(x))",
            "\u2200x (UsesAccruralAccounting(x) \u2192 RecognizedWhen(revenues, realized))",
            "\u2200x (UsesCashAccounting(x) \u2192 RecognizedWhen(revenues, cashrecieved))",
            "DevelopedBy(usgaap, ussecuritiesandexchangecommission) \u2227 UsesGAAP(ussecuritiesandexchangecommission)",
            "WorksFor(sally, ussecuritiesandexchangecommission)"
        ],
        "question": "Sally does not work for a company that uses the GAAP.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1216,
        "story_id": 427,
        "context": [
            "All people who are respected by others are people who contribute to the country. ",
            "If a person is respected by others, then he/she contributes to the country. ",
            "All people available to have a visit without any fees are those respected by others. ",
            "All Customers who once served in the army are available to have a visit without any fees. ",
            "All people who once were sentenced for thief stayed in prison for some time. ",
            "All people who once stayed in prison for some time have a bad record in the local state. ",
            "James was either once sentenced for thief or stayed in prison for some time. ",
            "James is either with a bad record in the local state or respected by others. "
        ],
        "context_fol": [
            "\u2200x (Respected(x) \u2192 ContributeToCountry(x))",
            "\u2200x (Respected(x) \u2192 ContributeToCountry(x))",
            "\u2200x (HaveVisitWithoutAnyFees(x) \u2192 Respected(x))",
            "\u2200x (Army(x) \u2192 HaveVisitWithoutAnyFees(x))",
            "\u2200x (Thief(x) \u2192 Prison(x))",
            "\u2200x (Prison(x) \u2192 BadRecord(x))",
            "Thief(james) \u2295 Prison(james) ",
            "BadRecord(james) \u2295 Respected(james)"
        ],
        "question": "James contributes to the country.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1217,
        "story_id": 427,
        "context": [
            "All people who are respected by others are people who contribute to the country. ",
            "If a person is respected by others, then he/she contributes to the country. ",
            "All people available to have a visit without any fees are those respected by others. ",
            "All Customers who once served in the army are available to have a visit without any fees. ",
            "All people who once were sentenced for thief stayed in prison for some time. ",
            "All people who once stayed in prison for some time have a bad record in the local state. ",
            "James was either once sentenced for thief or stayed in prison for some time. ",
            "James is either with a bad record in the local state or respected by others. "
        ],
        "context_fol": [
            "\u2200x (Respected(x) \u2192 ContributeToCountry(x))",
            "\u2200x (Respected(x) \u2192 ContributeToCountry(x))",
            "\u2200x (HaveVisitWithoutAnyFees(x) \u2192 Respected(x))",
            "\u2200x (Army(x) \u2192 HaveVisitWithoutAnyFees(x))",
            "\u2200x (Thief(x) \u2192 Prison(x))",
            "\u2200x (Prison(x) \u2192 BadRecord(x))",
            "Thief(james) \u2295 Prison(james) ",
            "BadRecord(james) \u2295 Respected(james)"
        ],
        "question": "James does not contribute to the country.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1218,
        "story_id": 427,
        "context": [
            "All people who are respected by others are people who contribute to the country. ",
            "If a person is respected by others, then he/she contributes to the country. ",
            "All people available to have a visit without any fees are those respected by others. ",
            "All Customers who once served in the army are available to have a visit without any fees. ",
            "All people who once were sentenced for thief stayed in prison for some time. ",
            "All people who once stayed in prison for some time have a bad record in the local state. ",
            "James was either once sentenced for thief or stayed in prison for some time. ",
            "James is either with a bad record in the local state or respected by others. "
        ],
        "context_fol": [
            "\u2200x (Respected(x) \u2192 ContributeToCountry(x))",
            "\u2200x (Respected(x) \u2192 ContributeToCountry(x))",
            "\u2200x (HaveVisitWithoutAnyFees(x) \u2192 Respected(x))",
            "\u2200x (Army(x) \u2192 HaveVisitWithoutAnyFees(x))",
            "\u2200x (Thief(x) \u2192 Prison(x))",
            "\u2200x (Prison(x) \u2192 BadRecord(x))",
            "Thief(james) \u2295 Prison(james) ",
            "BadRecord(james) \u2295 Respected(james)"
        ],
        "question": "James contributes to the country, and he once served in the army.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1219,
        "story_id": 427,
        "context": [
            "All people who are respected by others are people who contribute to the country. ",
            "If a person is respected by others, then he/she contributes to the country. ",
            "All people available to have a visit without any fees are those respected by others. ",
            "All Customers who once served in the army are available to have a visit without any fees. ",
            "All people who once were sentenced for thief stayed in prison for some time. ",
            "All people who once stayed in prison for some time have a bad record in the local state. ",
            "James was either once sentenced for thief or stayed in prison for some time. ",
            "James is either with a bad record in the local state or respected by others. "
        ],
        "context_fol": [
            "\u2200x (Respected(x) \u2192 ContributeToCountry(x))",
            "\u2200x (Respected(x) \u2192 ContributeToCountry(x))",
            "\u2200x (HaveVisitWithoutAnyFees(x) \u2192 Respected(x))",
            "\u2200x (Army(x) \u2192 HaveVisitWithoutAnyFees(x))",
            "\u2200x (Thief(x) \u2192 Prison(x))",
            "\u2200x (Prison(x) \u2192 BadRecord(x))",
            "Thief(james) \u2295 Prison(james) ",
            "BadRecord(james) \u2295 Respected(james)"
        ],
        "question": "James did not contribute to the country and did not serve in the army.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 32,
        "story_id": 12,
        "context": [
            "The Croton River watershed is the drainage basin of the Croton River.",
            "The Croton River is in southwestern New York.",
            "Water from the Croton River watershed flows to the Bronx.",
            "The Bronx is in New York."
        ],
        "context_fol": [
            "DrainageBasinOf(crotonriverwatershed, crotonriver)",
            "In(crotonriver, southwesternnewyork)",
            "\u2203x (Water(x) \u2227 From(x, crotonriverwatershed) \u2227 FlowsTo(x, bronx))",
            "In(bronx, newyork)"
        ],
        "question": "Water from the Croton River watershed flows to somewhere in New York.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 33,
        "story_id": 12,
        "context": [
            "The Croton River watershed is the drainage basin of the Croton River.",
            "The Croton River is in southwestern New York.",
            "Water from the Croton River watershed flows to the Bronx.",
            "The Bronx is in New York."
        ],
        "context_fol": [
            "DrainageBasinOf(crotonriverwatershed, crotonriver)",
            "In(crotonriver, southwesternnewyork)",
            "\u2203x (Water(x) \u2227 From(x, crotonriverwatershed) \u2227 FlowsTo(x, bronx))",
            "In(bronx, newyork)"
        ],
        "question": "The Croton River watershed is in the Bronx.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 34,
        "story_id": 12,
        "context": [
            "The Croton River watershed is the drainage basin of the Croton River.",
            "The Croton River is in southwestern New York.",
            "Water from the Croton River watershed flows to the Bronx.",
            "The Bronx is in New York."
        ],
        "context_fol": [
            "DrainageBasinOf(crotonriverwatershed, crotonriver)",
            "In(crotonriver, southwesternnewyork)",
            "\u2203x (Water(x) \u2227 From(x, crotonriverwatershed) \u2227 FlowsTo(x, bronx))",
            "In(bronx, newyork)"
        ],
        "question": "Water from the Croton River flows to the Bronx.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 710,
        "story_id": 261,
        "context": [
            "All nuclear-powered submarines are warships.",
            "No nuclear-powered submarines are commercial vessels."
        ],
        "context_fol": [
            "\u2200x (NuclearPoweredSubmarine(x) \u2192 Warship(x))",
            "\u2200x (NuclearPoweredSubmarine(x) \u2192 \u00acCommercialVessel(x))"
        ],
        "question": "Some warships are commercial vessels.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 199,
        "story_id": 67,
        "context": [
            "If a album is written by a rock band, then the genre of the album is rock.",
            "If a band writes a album winning an award, then this band wins this award.",
            "Trouble at the Henhouse is an album by The Tragically Hip.",
            "The Tragically Hip is a Canadian rock band.",
            "The song \"Butts Wigglin'\" is in Trouble at the Henhouse.",
            "Trouble at the Henhouse won the Album of the Year award.",
            "A song in Trouble at the Henhouse appeared in a film."
        ],
        "context_fol": [
            "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 RockBand(y, z) \u2192 Genre(x, rock))",
            "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 AlbumAward(x, z) \u2192 RockBandAward(y, z))",
            "AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)",
            "RockBand(the_Tragically_Hip, canada)",
            "SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)",
            "AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)",
            "\u2203x (SongInFilm(x) \u2227 SongInAlbum(x, trouble_at_the_Henhouse))"
        ],
        "question": "The genre of Trouble at the Henhouse is rock.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 200,
        "story_id": 67,
        "context": [
            "If a album is written by a rock band, then the genre of the album is rock.",
            "If a band writes a album winning an award, then this band wins this award.",
            "Trouble at the Henhouse is an album by The Tragically Hip.",
            "The Tragically Hip is a Canadian rock band.",
            "The song \"Butts Wigglin'\" is in Trouble at the Henhouse.",
            "Trouble at the Henhouse won the Album of the Year award.",
            "A song in Trouble at the Henhouse appeared in a film."
        ],
        "context_fol": [
            "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 RockBand(y, z) \u2192 Genre(x, rock))",
            "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 AlbumAward(x, z) \u2192 RockBandAward(y, z))",
            "AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)",
            "RockBand(the_Tragically_Hip, canada)",
            "SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)",
            "AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)",
            "\u2203x (SongInFilm(x) \u2227 SongInAlbum(x, trouble_at_the_Henhouse))"
        ],
        "question": "A canada rock band didn't win the Album of the Year award.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 201,
        "story_id": 67,
        "context": [
            "If a album is written by a rock band, then the genre of the album is rock.",
            "If a band writes a album winning an award, then this band wins this award.",
            "Trouble at the Henhouse is an album by The Tragically Hip.",
            "The Tragically Hip is a Canadian rock band.",
            "The song \"Butts Wigglin'\" is in Trouble at the Henhouse.",
            "Trouble at the Henhouse won the Album of the Year award.",
            "A song in Trouble at the Henhouse appeared in a film."
        ],
        "context_fol": [
            "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 RockBand(y, z) \u2192 Genre(x, rock))",
            "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 AlbumAward(x, z) \u2192 RockBandAward(y, z))",
            "AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)",
            "RockBand(the_Tragically_Hip, canada)",
            "SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)",
            "AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)",
            "\u2203x (SongInFilm(x) \u2227 SongInAlbum(x, trouble_at_the_Henhouse))"
        ],
        "question": "\"Butts Wigglin'\" appeared in a film.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 681,
        "story_id": 238,
        "context": [
            "Daniel is a software engineer and he works at Palantir Technologies.",
            "Daniel studied bioengineering during his undergraduate at Rice University.",
            "Daniel\u2019s older sister works at Meta as a technical sourcer. ",
            "Daniel\u2019s dad and older sister both graduated from Stanford University.",
            "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis"
        ],
        "context_fol": [
            "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)",
            " StudiedBioengineering(daniel, riceUniversity)",
            " WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)",
            " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)",
            " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)"
        ],
        "question": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 682,
        "story_id": 238,
        "context": [
            "Daniel is a software engineer and he works at Palantir Technologies.",
            "Daniel studied bioengineering during his undergraduate at Rice University.",
            "Daniel\u2019s older sister works at Meta as a technical sourcer. ",
            "Daniel\u2019s dad and older sister both graduated from Stanford University.",
            "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis"
        ],
        "context_fol": [
            "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)",
            " StudiedBioengineering(daniel, riceUniversity)",
            " WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)",
            " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)",
            " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)"
        ],
        "question": "Daniel studied bioengineering as his major at Rice University.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 683,
        "story_id": 238,
        "context": [
            "Daniel is a software engineer and he works at Palantir Technologies.",
            "Daniel studied bioengineering during his undergraduate at Rice University.",
            "Daniel\u2019s older sister works at Meta as a technical sourcer. ",
            "Daniel\u2019s dad and older sister both graduated from Stanford University.",
            "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis"
        ],
        "context_fol": [
            "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)",
            " StudiedBioengineering(daniel, riceUniversity)",
            " WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)",
            " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)",
            " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)"
        ],
        "question": "Daniel and his sister grew up in Minneapolis, Minnesota.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 327,
        "story_id": 108,
        "context": [
            "All commerical aircraft are produced by either Boeing or Airbus.",
            "All American Airlines jets are commerical aircraft. ",
            "Airbus made more in revenue than Boeing last year."
        ],
        "context_fol": [
            "\u2200x (CommercialAircraft(x) \u2192 ProducedBy(x, boeing) \u2295 ProducedBy(x, airbus))",
            "\u2200x (AmericanAirlinesAircraft(x) \u2192 CommercialAircraft(x))",
            "MoreinRevenue(airbus, boeing)"
        ],
        "question": "An American Airlines plane is either a Boeing or Airbus plane.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 328,
        "story_id": 108,
        "context": [
            "All commerical aircraft are produced by either Boeing or Airbus.",
            "All American Airlines jets are commerical aircraft. ",
            "Airbus made more in revenue than Boeing last year."
        ],
        "context_fol": [
            "\u2200x (CommercialAircraft(x) \u2192 ProducedBy(x, boeing) \u2295 ProducedBy(x, airbus))",
            "\u2200x (AmericanAirlinesAircraft(x) \u2192 CommercialAircraft(x))",
            "MoreinRevenue(airbus, boeing)"
        ],
        "question": "There exists a SpaceX commerical aircraft.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 329,
        "story_id": 108,
        "context": [
            "All commerical aircraft are produced by either Boeing or Airbus.",
            "All American Airlines jets are commerical aircraft. ",
            "Airbus made more in revenue than Boeing last year."
        ],
        "context_fol": [
            "\u2200x (CommercialAircraft(x) \u2192 ProducedBy(x, boeing) \u2295 ProducedBy(x, airbus))",
            "\u2200x (AmericanAirlinesAircraft(x) \u2192 CommercialAircraft(x))",
            "MoreinRevenue(airbus, boeing)"
        ],
        "question": "There does not exist a United Airlines plane produced by Boeing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 330,
        "story_id": 108,
        "context": [
            "All commerical aircraft are produced by either Boeing or Airbus.",
            "All American Airlines jets are commerical aircraft. ",
            "Airbus made more in revenue than Boeing last year."
        ],
        "context_fol": [
            "\u2200x (CommercialAircraft(x) \u2192 ProducedBy(x, boeing) \u2295 ProducedBy(x, airbus))",
            "\u2200x (AmericanAirlinesAircraft(x) \u2192 CommercialAircraft(x))",
            "MoreinRevenue(airbus, boeing)"
        ],
        "question": "There is a commercial plane made by both Airbus and Boeing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 256,
        "story_id": 84,
        "context": [
            "Luzon is an island in the Philippines.",
            "In December 1999, an earthquake struck Luzon.",
            "People died in the December 1999 earthquake in Luzon."
        ],
        "context_fol": [
            "Island(luzon) \u2227 In(luzon, philippines)",
            "\u2203x (Earthquake(x) \u2227 StruckIn(x, december1999) \u2227 Struck(x, luzon))",
            "\u2203x (Earthquake(x) \u2227 StruckIn(x, december1999) \u2227 Struck(x, luzon) \u2227 Killed(x))"
        ],
        "question": "Leyte is an island in the Philippines.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 257,
        "story_id": 84,
        "context": [
            "Luzon is an island in the Philippines.",
            "In December 1999, an earthquake struck Luzon.",
            "People died in the December 1999 earthquake in Luzon."
        ],
        "context_fol": [
            "Island(luzon) \u2227 In(luzon, philippines)",
            "\u2203x (Earthquake(x) \u2227 StruckIn(x, december1999) \u2227 Struck(x, luzon))",
            "\u2203x (Earthquake(x) \u2227 StruckIn(x, december1999) \u2227 Struck(x, luzon) \u2227 Killed(x))"
        ],
        "question": "No one has ever died of an earthquake that struck in the Philippines.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 258,
        "story_id": 84,
        "context": [
            "Luzon is an island in the Philippines.",
            "In December 1999, an earthquake struck Luzon.",
            "People died in the December 1999 earthquake in Luzon."
        ],
        "context_fol": [
            "Island(luzon) \u2227 In(luzon, philippines)",
            "\u2203x (Earthquake(x) \u2227 StruckIn(x, december1999) \u2227 Struck(x, luzon))",
            "\u2203x (Earthquake(x) \u2227 StruckIn(x, december1999) \u2227 Struck(x, luzon) \u2227 Killed(x))"
        ],
        "question": "In 1999, there was at least one earthquake in the Philippines.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 966,
        "story_id": 362,
        "context": [
            "People either invest in the public stock market regularly or enjoy gambling regularly.",
            "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
            "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.",
            "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.",
            "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.",
            "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. "
        ],
        "context_fol": [
            "\u2200x (Invests(x) \u2228 Gambling(x))",
            "\u2200x (Invests(x) \u2192 Newspapers(x))",
            "\u2200x (Gambling(x) \u2192 Casinos(x))",
            "\u2200x (Casinos(x) \u2192 LasVegas(x))",
            "\u2200x (Casinos(x) \u2192 DisposableIncome(x))",
            "Invests(matt) \u2192 \u00acDisposableIncome(matt) \u2227 \u00acInvests(matt)"
        ],
        "question": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 967,
        "story_id": 362,
        "context": [
            "People either invest in the public stock market regularly or enjoy gambling regularly.",
            "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
            "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.",
            "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.",
            "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.",
            "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. "
        ],
        "context_fol": [
            "\u2200x (Invests(x) \u2228 Gambling(x))",
            "\u2200x (Invests(x) \u2192 Newspapers(x))",
            "\u2200x (Gambling(x) \u2192 Casinos(x))",
            "\u2200x (Casinos(x) \u2192 LasVegas(x))",
            "\u2200x (Casinos(x) \u2192 DisposableIncome(x))",
            "Invests(matt) \u2192 \u00acDisposableIncome(matt) \u2227 \u00acInvests(matt)"
        ],
        "question": "If Matt is either both a person who has a lot of disposable income to spend and invests in the public stock market regularly, or neither has a lot of disposable income to spend nor invests in the public stock market regularly, then Matt neither visits the Las Vegas Strip regularly nor reads the Wall Street Journal and other newspapers regularly to keep updated on the financial metrics.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 968,
        "story_id": 362,
        "context": [
            "People either invest in the public stock market regularly or enjoy gambling regularly.",
            "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
            "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.",
            "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.",
            "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.",
            "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. "
        ],
        "context_fol": [
            "\u2200x (Invests(x) \u2228 Gambling(x))",
            "\u2200x (Invests(x) \u2192 Newspapers(x))",
            "\u2200x (Gambling(x) \u2192 Casinos(x))",
            "\u2200x (Casinos(x) \u2192 LasVegas(x))",
            "\u2200x (Casinos(x) \u2192 DisposableIncome(x))",
            "Invests(matt) \u2192 \u00acDisposableIncome(matt) \u2227 \u00acInvests(matt)"
        ],
        "question": "If Matt is either a person who has a lot of disposable income to spend or reads the Wall Street Journal and other newspapers regularly, then Matt neither has a lot of disposable income to spend nor visits the Las Vegas Strip Regularly.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 688,
        "story_id": 241,
        "context": [
            "All students learning piano can strike the right notes. ",
            "All students who can strike the right note can get the rhythms right. ",
            "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ",
            "Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ",
            "If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. ",
            "John is a student learning piano. ",
            "John does not find coordination between the left and the right hands challenging. "
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2227 LearningPiano(x) \u2192 StrikeRightNotes(x))",
            "\u2200x (Student(x) \u2227 StrikeRightNotes(x) \u2192 GetRhythmRight(x))",
            "\u2200x (Student(x) \u2227 GetRhythmRight(x) \u2192 StartCoordination(x))",
            "\u2200x (Student(x) \u2227 StartCoordination(x) \u2192 GoodAtCoordination(x) \u2295 FindCoordinationChallenging(x))",
            "StrikeRightNotes(john) \u2227 GetRhythmRight(john) \u2227 GoodAtCoordination(john) \u2192 PutEmotion(john)",
            "Student(john) \u2227 LearningPiano(john)",
            "\u00acFindCoordinationChallenging(john)"
        ],
        "question": "John can get the rhythms right.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 689,
        "story_id": 241,
        "context": [
            "All students learning piano can strike the right notes. ",
            "All students who can strike the right note can get the rhythms right. ",
            "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ",
            "Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ",
            "If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. ",
            "John is a student learning piano. ",
            "John does not find coordination between the left and the right hands challenging. "
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2227 LearningPiano(x) \u2192 StrikeRightNotes(x))",
            "\u2200x (Student(x) \u2227 StrikeRightNotes(x) \u2192 GetRhythmRight(x))",
            "\u2200x (Student(x) \u2227 GetRhythmRight(x) \u2192 StartCoordination(x))",
            "\u2200x (Student(x) \u2227 StartCoordination(x) \u2192 GoodAtCoordination(x) \u2295 FindCoordinationChallenging(x))",
            "StrikeRightNotes(john) \u2227 GetRhythmRight(john) \u2227 GoodAtCoordination(john) \u2192 PutEmotion(john)",
            "Student(john) \u2227 LearningPiano(john)",
            "\u00acFindCoordinationChallenging(john)"
        ],
        "question": "John does not put emotions into his playing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 654,
        "story_id": 229,
        "context": [
            "Barbara Ann Marshall is a former swimmer and former world record-holder.",
            "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
            "Barbara Ann Marshall's home country is the United States.",
            "All people who compete in the 1972 Summer Olympics represent their home country.",
            "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
            "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
            "Only relay swimmers who participated in the event final received medals."
        ],
        "context_fol": [
            "FormerSwimmer(barbaraannmarshall) \u2227 FormerWorldRecordHolder(barbaraannmarshall)",
            "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
            "HomeCountry(barbaraannmarshall, unitedstates)",
            "\u2200x \u2203y (ParticipatedIn(x, summer1972olympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))",
            "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)",
            "\u00acParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)",
            "\u2200x ((RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalheatfreerelay)) \u2194 \u00acRecieved(x, medal)))"
        ],
        "question": "Barbara Ann Marshall did not receive medals.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 655,
        "story_id": 229,
        "context": [
            "Barbara Ann Marshall is a former swimmer and former world record-holder.",
            "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
            "Barbara Ann Marshall's home country is the United States.",
            "All people who compete in the 1972 Summer Olympics represent their home country.",
            "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
            "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
            "Only relay swimmers who participated in the event final received medals."
        ],
        "context_fol": [
            "FormerSwimmer(barbaraannmarshall) \u2227 FormerWorldRecordHolder(barbaraannmarshall)",
            "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
            "HomeCountry(barbaraannmarshall, unitedstates)",
            "\u2200x \u2203y (ParticipatedIn(x, summer1972olympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))",
            "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)",
            "\u00acParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)",
            "\u2200x ((RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalheatfreerelay)) \u2194 \u00acRecieved(x, medal)))"
        ],
        "question": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 576,
        "story_id": 201,
        "context": [
            "A game is played with three stages: red stage, yellow stage, and green stage.",
            "Each player begins at the red stage.",
            "All players must reach the yellow stage before they can reach the green stage.",
            "The yellow stage comes after the red stage.",
            "All players must proceed one stage at a time."
        ],
        "context_fol": [
            "\u2203x (Player(x))",
            "\u2200x (Player(x) \u2192 StartRed(x))",
            "\u2200x (Player(x) \u2192 YellowToGreen(x))",
            "\u2200x (Player(x) \u2192 RedToYellow(x))",
            "\u2200x (Player(x) \u2192 \u00acRedToGreen(x))"
        ],
        "question": "It is possible to move to the green stage without ever reaching the yellow stage.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 577,
        "story_id": 201,
        "context": [
            "A game is played with three stages: red stage, yellow stage, and green stage.",
            "Each player begins at the red stage.",
            "All players must reach the yellow stage before they can reach the green stage.",
            "The yellow stage comes after the red stage.",
            "All players must proceed one stage at a time."
        ],
        "context_fol": [
            "\u2203x (Player(x))",
            "\u2200x (Player(x) \u2192 StartRed(x))",
            "\u2200x (Player(x) \u2192 YellowToGreen(x))",
            "\u2200x (Player(x) \u2192 RedToYellow(x))",
            "\u2200x (Player(x) \u2192 \u00acRedToGreen(x))"
        ],
        "question": "It is possible to reach the yellow stage without ever reaching the green stage.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 578,
        "story_id": 201,
        "context": [
            "A game is played with three stages: red stage, yellow stage, and green stage.",
            "Each player begins at the red stage.",
            "All players must reach the yellow stage before they can reach the green stage.",
            "The yellow stage comes after the red stage.",
            "All players must proceed one stage at a time."
        ],
        "context_fol": [
            "\u2203x (Player(x))",
            "\u2200x (Player(x) \u2192 StartRed(x))",
            "\u2200x (Player(x) \u2192 YellowToGreen(x))",
            "\u2200x (Player(x) \u2192 RedToYellow(x))",
            "\u2200x (Player(x) \u2192 \u00acRedToGreen(x))"
        ],
        "question": "It is possible to complete the game without ever reaching the green stage.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1095,
        "story_id": 399,
        "context": [
            "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
            "If a person values physical touch as an especially important love language, then they are good with pets.",
            "No people that are good with pets are scared of animals.",
            "People are either scared of animals or love animals.",
            "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
        ],
        "context_fol": [
            "\u2200x (Physical(x) \u2228 Words(x))",
            "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
            "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
            "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
            "Physical(adam) \u2295 LoveAnimals(adam)"
        ],
        "question": "Adam is scared of animals.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1096,
        "story_id": 399,
        "context": [
            "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
            "If a person values physical touch as an especially important love language, then they are good with pets.",
            "No people that are good with pets are scared of animals.",
            "People are either scared of animals or love animals.",
            "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
        ],
        "context_fol": [
            "\u2200x (Physical(x) \u2228 Words(x))",
            "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
            "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
            "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
            "Physical(adam) \u2295 LoveAnimals(adam)"
        ],
        "question": "Adam values words of affirmation as an especially important love language.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1097,
        "story_id": 399,
        "context": [
            "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
            "If a person values physical touch as an especially important love language, then they are good with pets.",
            "No people that are good with pets are scared of animals.",
            "People are either scared of animals or love animals.",
            "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
        ],
        "context_fol": [
            "\u2200x (Physical(x) \u2228 Words(x))",
            "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
            "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
            "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
            "Physical(adam) \u2295 LoveAnimals(adam)"
        ],
        "question": "Adam values physical touch as an especially important love language and values words of affirmation as an especially important love language.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1098,
        "story_id": 399,
        "context": [
            "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
            "If a person values physical touch as an especially important love language, then they are good with pets.",
            "No people that are good with pets are scared of animals.",
            "People are either scared of animals or love animals.",
            "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
        ],
        "context_fol": [
            "\u2200x (Physical(x) \u2228 Words(x))",
            "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
            "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
            "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
            "Physical(adam) \u2295 LoveAnimals(adam)"
        ],
        "question": "Adam either values physical touch as an especially important love language or values words of affirmation as an especially important love language.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1099,
        "story_id": 399,
        "context": [
            "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
            "If a person values physical touch as an especially important love language, then they are good with pets.",
            "No people that are good with pets are scared of animals.",
            "People are either scared of animals or love animals.",
            "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."
        ],
        "context_fol": [
            "\u2200x (Physical(x) \u2228 Words(x))",
            "\u2200x (Physical(x) \u2192 GoodWithPets(x))",
            "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))",
            "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))",
            "Physical(adam) \u2295 LoveAnimals(adam)"
        ],
        "question": "If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1282,
        "story_id": 444,
        "context": [
            "All birds have wings.",
            "No animal with wings is a reptile.",
            "Some animals that fly are birds.",
            "If something is an iguana, then it is a reptile.",
            "John is neither an iguana nor a bird."
        ],
        "context_fol": [
            "\u2200x (Bird(x) \u2192 Winged(x))",
            "\u2200x (Winged(x) \u2192 \u00acReptile(x))",
            "\u2203x (Fly(x) \u2227 Bird(x))",
            "\u2200x (Iguana(x) \u2192 Reptile(x))",
            "\u00acIguana(john) \u2295 Bird(john)"
        ],
        "question": "John is a reptile.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1283,
        "story_id": 444,
        "context": [
            "All birds have wings.",
            "No animal with wings is a reptile.",
            "Some animals that fly are birds.",
            "If something is an iguana, then it is a reptile.",
            "John is neither an iguana nor a bird."
        ],
        "context_fol": [
            "\u2200x (Bird(x) \u2192 Winged(x))",
            "\u2200x (Winged(x) \u2192 \u00acReptile(x))",
            "\u2203x (Fly(x) \u2227 Bird(x))",
            "\u2200x (Iguana(x) \u2192 Reptile(x))",
            "\u00acIguana(john) \u2295 Bird(john)"
        ],
        "question": "John is not an iguana and an animal that can fly.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1284,
        "story_id": 444,
        "context": [
            "All birds have wings.",
            "No animal with wings is a reptile.",
            "Some animals that fly are birds.",
            "If something is an iguana, then it is a reptile.",
            "John is neither an iguana nor a bird."
        ],
        "context_fol": [
            "\u2200x (Bird(x) \u2192 Winged(x))",
            "\u2200x (Winged(x) \u2192 \u00acReptile(x))",
            "\u2203x (Fly(x) \u2227 Bird(x))",
            "\u2200x (Iguana(x) \u2192 Reptile(x))",
            "\u00acIguana(john) \u2295 Bird(john)"
        ],
        "question": "John is an animal that can fly and a bird.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 87,
        "story_id": 30,
        "context": [
            "EndGame is a movie released in 2006.",
            "EndGame was set in Washington.",
            "EndGame was filmed outside of Washington.",
            "Some movies are filmed in New York.",
            "Andy Chang directed EndGame.",
            "Andy Chang is from Hong Kong."
        ],
        "context_fol": [
            "Movie(endGame) \u2227 Released(endGame, year2006)",
            "Set(endGame, washington)",
            "FilmedOutside(endGame, washington)",
            "\u2203x (FilmedIn(x, newYork))",
            "Directed(andyChang, endGame)",
            "From(andyChang, hongKong)"
        ],
        "question": "EndGame was filmed in New York.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 88,
        "story_id": 30,
        "context": [
            "EndGame is a movie released in 2006.",
            "EndGame was set in Washington.",
            "EndGame was filmed outside of Washington.",
            "Some movies are filmed in New York.",
            "Andy Chang directed EndGame.",
            "Andy Chang is from Hong Kong."
        ],
        "context_fol": [
            "Movie(endGame) \u2227 Released(endGame, year2006)",
            "Set(endGame, washington)",
            "FilmedOutside(endGame, washington)",
            "\u2203x (FilmedIn(x, newYork))",
            "Directed(andyChang, endGame)",
            "From(andyChang, hongKong)"
        ],
        "question": "EndGame was not directed by someone from Hong Kong.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 89,
        "story_id": 30,
        "context": [
            "EndGame is a movie released in 2006.",
            "EndGame was set in Washington.",
            "EndGame was filmed outside of Washington.",
            "Some movies are filmed in New York.",
            "Andy Chang directed EndGame.",
            "Andy Chang is from Hong Kong."
        ],
        "context_fol": [
            "Movie(endGame) \u2227 Released(endGame, year2006)",
            "Set(endGame, washington)",
            "FilmedOutside(endGame, washington)",
            "\u2203x (FilmedIn(x, newYork))",
            "Directed(andyChang, endGame)",
            "From(andyChang, hongKong)"
        ],
        "question": "All of Andy Chang's movies are filmed outside of Washington.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 17,
        "story_id": 7,
        "context": [
            "Six, seven and eight are real numbers.",
            "If a real number equals another real number adding one, the first number is larger.",
            "If the number x is larger than number y, then y is not larger than x.",
            "Seven equals six plus one.",
            "Eight equals seven plus one.",
            "Two is positive.",
            "If a number is positive, then the double of it is also positive.",
            "Eight is the double of four.",
            "Four is the double of two."
        ],
        "context_fol": [
            "RealNum(six) \u2227 RealNum(seven) \u2227 RealNum(eight)",
            "\u2200x \u2200y (RealNum(x) \u2227 RealNum(y) \u2227 EqualAddOne(x, y) \u2192 Larger(x, y))",
            "\u2200x \u2200y (Larger(x, y) \u2194 \u00acLarger(y, x))",
            "EqualAddOne(seven, six)",
            "EqualAddOne(eight, seven)",
            "Positive(two)",
            "\u2200x \u2200y ((Positive(x) \u2227 EqualDouble(y, x)) \u2192 Positive(y))",
            "EqualDouble(eight, four)",
            "EqualDouble(four, two)"
        ],
        "question": "Eight is larger than seven.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 18,
        "story_id": 7,
        "context": [
            "Six, seven and eight are real numbers.",
            "If a real number equals another real number adding one, the first number is larger.",
            "If the number x is larger than number y, then y is not larger than x.",
            "Seven equals six plus one.",
            "Eight equals seven plus one.",
            "Two is positive.",
            "If a number is positive, then the double of it is also positive.",
            "Eight is the double of four.",
            "Four is the double of two."
        ],
        "context_fol": [
            "RealNum(six) \u2227 RealNum(seven) \u2227 RealNum(eight)",
            "\u2200x \u2200y (RealNum(x) \u2227 RealNum(y) \u2227 EqualAddOne(x, y) \u2192 Larger(x, y))",
            "\u2200x \u2200y (Larger(x, y) \u2194 \u00acLarger(y, x))",
            "EqualAddOne(seven, six)",
            "EqualAddOne(eight, seven)",
            "Positive(two)",
            "\u2200x \u2200y ((Positive(x) \u2227 EqualDouble(y, x)) \u2192 Positive(y))",
            "EqualDouble(eight, four)",
            "EqualDouble(four, two)"
        ],
        "question": "Eight is positive.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 19,
        "story_id": 7,
        "context": [
            "Six, seven and eight are real numbers.",
            "If a real number equals another real number adding one, the first number is larger.",
            "If the number x is larger than number y, then y is not larger than x.",
            "Seven equals six plus one.",
            "Eight equals seven plus one.",
            "Two is positive.",
            "If a number is positive, then the double of it is also positive.",
            "Eight is the double of four.",
            "Four is the double of two."
        ],
        "context_fol": [
            "RealNum(six) \u2227 RealNum(seven) \u2227 RealNum(eight)",
            "\u2200x \u2200y (RealNum(x) \u2227 RealNum(y) \u2227 EqualAddOne(x, y) \u2192 Larger(x, y))",
            "\u2200x \u2200y (Larger(x, y) \u2194 \u00acLarger(y, x))",
            "EqualAddOne(seven, six)",
            "EqualAddOne(eight, seven)",
            "Positive(two)",
            "\u2200x \u2200y ((Positive(x) \u2227 EqualDouble(y, x)) \u2192 Positive(y))",
            "EqualDouble(eight, four)",
            "EqualDouble(four, two)"
        ],
        "question": "Six is larger than seven.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 742,
        "story_id": 293,
        "context": [
            "A dog never tells the truth.",
            "Some poker players are dogs."
        ],
        "context_fol": [
            "\u2200x (Dog(x) \u2192 NeverTellsTruth(x))",
            "\u2203x (PokerPlayer(x) \u2227 Dog(x))"
        ],
        "question": "Some poker players never tell the truth.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1383,
        "story_id": 475,
        "context": [
            "All Asians are human. ",
            "All Chinese are Asian.",
            "A man is either Chinese or British.",
            "All British are European. ",
            "All Spanish are European. ",
            "No Indian is European. ",
            "Jessee is either both an Indian and a human, or neither an Indian nor a human."
        ],
        "context_fol": [
            "\u2200x ( Asian(x)\u2192  Human(x))",
            "\u2200x ( Chinese(x)\u2192  Asian(x))",
            "\u2200x ( Chinese(x) \u2228  British(x))",
            "\u2200x ( British(x)\u2192  European(x))",
            "\u2200x ( Spanish(x)\u2192  European(x))",
            "\u2200x ( Indian(x)\u2192 \u00ac European(x))",
            "( Indian(jesse) \u2227 Human(jesse)) \u2295 (\u00ac Indian(jesse) \u2227 \u00ac Human(jesse))"
        ],
        "question": "Jesse is Chinese.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1384,
        "story_id": 475,
        "context": [
            "All Asians are human. ",
            "All Chinese are Asian.",
            "A man is either Chinese or British.",
            "All British are European. ",
            "All Spanish are European. ",
            "No Indian is European. ",
            "Jessee is either both an Indian and a human, or neither an Indian nor a human."
        ],
        "context_fol": [
            "\u2200x ( Asian(x)\u2192  Human(x))",
            "\u2200x ( Chinese(x)\u2192  Asian(x))",
            "\u2200x ( Chinese(x) \u2228  British(x))",
            "\u2200x ( British(x)\u2192  European(x))",
            "\u2200x ( Spanish(x)\u2192  European(x))",
            "\u2200x ( Indian(x)\u2192 \u00ac European(x))",
            "( Indian(jesse) \u2227 Human(jesse)) \u2295 (\u00ac Indian(jesse) \u2227 \u00ac Human(jesse))"
        ],
        "question": "Jesse is not Chinese.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1385,
        "story_id": 475,
        "context": [
            "All Asians are human. ",
            "All Chinese are Asian.",
            "A man is either Chinese or British.",
            "All British are European. ",
            "All Spanish are European. ",
            "No Indian is European. ",
            "Jessee is either both an Indian and a human, or neither an Indian nor a human."
        ],
        "context_fol": [
            "\u2200x ( Asian(x)\u2192  Human(x))",
            "\u2200x ( Chinese(x)\u2192  Asian(x))",
            "\u2200x ( Chinese(x) \u2228  British(x))",
            "\u2200x ( British(x)\u2192  European(x))",
            "\u2200x ( Spanish(x)\u2192  European(x))",
            "\u2200x ( Indian(x)\u2192 \u00ac European(x))",
            "( Indian(jesse) \u2227 Human(jesse)) \u2295 (\u00ac Indian(jesse) \u2227 \u00ac Human(jesse))"
        ],
        "question": "If Jesse is either an Indian or a Spanish, then Jesse is either both British and European, or neither British nor European.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 717,
        "story_id": 268,
        "context": [
            "No people who never admit a mistake are good teachers.",
            "Some well-informed people are people who never admit a mistake."
        ],
        "context_fol": [
            "\u2200x (NeverAdmitMistakes(x) \u2192 \u00acGoodTeacher(x))",
            "\u2203x (WellInformed(x) \u2227 NeverAdmitMistakes(x))"
        ],
        "question": "Some good teachers are not well-informed people.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 72,
        "story_id": 25,
        "context": [
            "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
            "Mort is not a Stamp catalogue.",
            "Mort is not a periodical, auction catalogue, bibliography, or background material.",
            "Mort is a piece of Philatelic literature."
        ],
        "context_fol": [
            "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))",
            "\u00acStamp(mort)",
            "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))",
            "PhilatelicLit(mort)"
        ],
        "question": "Mort is a book",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 73,
        "story_id": 25,
        "context": [
            "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
            "Mort is not a Stamp catalogue.",
            "Mort is not a periodical, auction catalogue, bibliography, or background material.",
            "Mort is a piece of Philatelic literature."
        ],
        "context_fol": [
            "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))",
            "\u00acStamp(mort)",
            "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))",
            "PhilatelicLit(mort)"
        ],
        "question": "Mort is background material.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 74,
        "story_id": 25,
        "context": [
            "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
            "Mort is not a Stamp catalogue.",
            "Mort is not a periodical, auction catalogue, bibliography, or background material.",
            "Mort is a piece of Philatelic literature."
        ],
        "context_fol": [
            "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))",
            "\u00acStamp(mort)",
            "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))",
            "PhilatelicLit(mort)"
        ],
        "question": "Eragon is a piece of Philatelic literature.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 280,
        "story_id": 92,
        "context": [
            "Adventures of Rusty is a drama film and children's film.",
            "Columbia Pictures produced Adventures of Rusty",
            "Tintin was produced by Paramount.",
            "Tintin is an adventure film."
        ],
        "context_fol": [
            "DramaFilm(adventuresofrusty) \u2227 ChildrensFilm(adventuresofrusty)",
            "Produced(columbiapictures, adventuresofrusty)",
            "Produced(paramount, tintin)",
            "AdventureFilm(tintin)"
        ],
        "question": "Columbia pictures produces drama films.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 281,
        "story_id": 92,
        "context": [
            "Adventures of Rusty is a drama film and children's film.",
            "Columbia Pictures produced Adventures of Rusty",
            "Tintin was produced by Paramount.",
            "Tintin is an adventure film."
        ],
        "context_fol": [
            "DramaFilm(adventuresofrusty) \u2227 ChildrensFilm(adventuresofrusty)",
            "Produced(columbiapictures, adventuresofrusty)",
            "Produced(paramount, tintin)",
            "AdventureFilm(tintin)"
        ],
        "question": "Columbia pictures produces adventure films.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 282,
        "story_id": 92,
        "context": [
            "Adventures of Rusty is a drama film and children's film.",
            "Columbia Pictures produced Adventures of Rusty",
            "Tintin was produced by Paramount.",
            "Tintin is an adventure film."
        ],
        "context_fol": [
            "DramaFilm(adventuresofrusty) \u2227 ChildrensFilm(adventuresofrusty)",
            "Produced(columbiapictures, adventuresofrusty)",
            "Produced(paramount, tintin)",
            "AdventureFilm(tintin)"
        ],
        "question": "Paramount produces children's films.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 283,
        "story_id": 92,
        "context": [
            "Adventures of Rusty is a drama film and children's film.",
            "Columbia Pictures produced Adventures of Rusty",
            "Tintin was produced by Paramount.",
            "Tintin is an adventure film."
        ],
        "context_fol": [
            "DramaFilm(adventuresofrusty) \u2227 ChildrensFilm(adventuresofrusty)",
            "Produced(columbiapictures, adventuresofrusty)",
            "Produced(paramount, tintin)",
            "AdventureFilm(tintin)"
        ],
        "question": "Paramount produces adventure films.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 665,
        "story_id": 233,
        "context": [
            "Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ",
            "Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.",
            "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.",
            "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958\u20131960).",
            "Mao Zedong died in 1976.",
            "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power."
        ],
        "context_fol": [
            "ParamountLeaderOf(dengxiaoping, prc)",
            "PraisedFor(dengxiaoping, reaffirmationofreformprogram) \u2227 PraisedFor(dengxiaoping, reversionofhongkong) \u2227 PraisedFor(dengxiaoping, returnofmacau)",
            "PartysSecretaryGeneral(dengxiaoping) \u2227 Under(dengxiaoping, mao) \u2227 VicePremier(dengxiaoping) \u2227 PresidedOver(dengxiaoping, antirightistcampaign) \u2227 LaunchedBy(antirightistcampaign, mao)",
            "InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) \u2227 Following(chinaseconomicreconstruction, greatleapforward) \u2227 Disastrous(greatleapforward)",
            "DiedIn(mao, y1976)",
            "GraduallyRoseTo(dengxiaoping, supremepower)"
        ],
        "question": "The paramount leader of the PRC was also the vice premier.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 666,
        "story_id": 233,
        "context": [
            "Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ",
            "Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.",
            "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.",
            "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958\u20131960).",
            "Mao Zedong died in 1976.",
            "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power."
        ],
        "context_fol": [
            "ParamountLeaderOf(dengxiaoping, prc)",
            "PraisedFor(dengxiaoping, reaffirmationofreformprogram) \u2227 PraisedFor(dengxiaoping, reversionofhongkong) \u2227 PraisedFor(dengxiaoping, returnofmacau)",
            "PartysSecretaryGeneral(dengxiaoping) \u2227 Under(dengxiaoping, mao) \u2227 VicePremier(dengxiaoping) \u2227 PresidedOver(dengxiaoping, antirightistcampaign) \u2227 LaunchedBy(antirightistcampaign, mao)",
            "InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) \u2227 Following(chinaseconomicreconstruction, greatleapforward) \u2227 Disastrous(greatleapforward)",
            "DiedIn(mao, y1976)",
            "GraduallyRoseTo(dengxiaoping, supremepower)"
        ],
        "question": "Deng Xiaoping presided over something launched by someone he was under.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 667,
        "story_id": 233,
        "context": [
            "Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ",
            "Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.",
            "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.",
            "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958\u20131960).",
            "Mao Zedong died in 1976.",
            "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power."
        ],
        "context_fol": [
            "ParamountLeaderOf(dengxiaoping, prc)",
            "PraisedFor(dengxiaoping, reaffirmationofreformprogram) \u2227 PraisedFor(dengxiaoping, reversionofhongkong) \u2227 PraisedFor(dengxiaoping, returnofmacau)",
            "PartysSecretaryGeneral(dengxiaoping) \u2227 Under(dengxiaoping, mao) \u2227 VicePremier(dengxiaoping) \u2227 PresidedOver(dengxiaoping, antirightistcampaign) \u2227 LaunchedBy(antirightistcampaign, mao)",
            "InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) \u2227 Following(chinaseconomicreconstruction, greatleapforward) \u2227 Disastrous(greatleapforward)",
            "DiedIn(mao, y1976)",
            "GraduallyRoseTo(dengxiaoping, supremepower)"
        ],
        "question": "The person instrumental in china's economic reconstruction gradually rose to supreme power.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1052,
        "story_id": 391,
        "context": [
            "All imaginative processes are produced in human brains.",
            "All science-fiction is from an imaginative process.",
            "Either science-fiction or fact. ",
            "No facts are proven to be false.",
            "Dune is a science-fiction or proven to be false."
        ],
        "context_fol": [
            "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))",
            " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ",
            " \u2200x (Science-fiction(x) \u2228 Fact(x))",
            " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ",
            " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
        ],
        "question": "Dune is a fact.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1053,
        "story_id": 391,
        "context": [
            "All imaginative processes are produced in human brains.",
            "All science-fiction is from an imaginative process.",
            "Either science-fiction or fact. ",
            "No facts are proven to be false.",
            "Dune is a science-fiction or proven to be false."
        ],
        "context_fol": [
            "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))",
            " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ",
            " \u2200x (Science-fiction(x) \u2228 Fact(x))",
            " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ",
            " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
        ],
        "question": "Dune is produced in human brains and is an imaginative process.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1054,
        "story_id": 391,
        "context": [
            "All imaginative processes are produced in human brains.",
            "All science-fiction is from an imaginative process.",
            "Either science-fiction or fact. ",
            "No facts are proven to be false.",
            "Dune is a science-fiction or proven to be false."
        ],
        "context_fol": [
            "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))",
            " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ",
            " \u2200x (Science-fiction(x) \u2228 Fact(x))",
            " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ",
            " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
        ],
        "question": "Dune is either produced in human brains or an imaginative process.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1055,
        "story_id": 391,
        "context": [
            "All imaginative processes are produced in human brains.",
            "All science-fiction is from an imaginative process.",
            "Either science-fiction or fact. ",
            "No facts are proven to be false.",
            "Dune is a science-fiction or proven to be false."
        ],
        "context_fol": [
            "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))",
            " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ",
            " \u2200x (Science-fiction(x) \u2228 Fact(x))",
            " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ",
            " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
        ],
        "question": "Dune is produced in human brains and is science fiction.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1056,
        "story_id": 391,
        "context": [
            "All imaginative processes are produced in human brains.",
            "All science-fiction is from an imaginative process.",
            "Either science-fiction or fact. ",
            "No facts are proven to be false.",
            "Dune is a science-fiction or proven to be false."
        ],
        "context_fol": [
            "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))",
            " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ",
            " \u2200x (Science-fiction(x) \u2228 Fact(x))",
            " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ",
            " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
        ],
        "question": "Dune is either produced in human brains or science-fiction.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1057,
        "story_id": 391,
        "context": [
            "All imaginative processes are produced in human brains.",
            "All science-fiction is from an imaginative process.",
            "Either science-fiction or fact. ",
            "No facts are proven to be false.",
            "Dune is a science-fiction or proven to be false."
        ],
        "context_fol": [
            "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))",
            " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ",
            " \u2200x (Science-fiction(x) \u2228 Fact(x))",
            " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ",
            " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
        ],
        "question": "If Dune is produced in human brains and is an imaginative process, then Dune is not produced in human brains and science-fiction.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1058,
        "story_id": 391,
        "context": [
            "All imaginative processes are produced in human brains.",
            "All science-fiction is from an imaginative process.",
            "Either science-fiction or fact. ",
            "No facts are proven to be false.",
            "Dune is a science-fiction or proven to be false."
        ],
        "context_fol": [
            "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))",
            " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ",
            " \u2200x (Science-fiction(x) \u2228 Fact(x))",
            " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ",
            " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
        ],
        "question": "If Dune is either a fact and produced in human brains, or neither a fact nor produced in human brains, then Dune is produced in human brains and science-fiction.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1059,
        "story_id": 391,
        "context": [
            "All imaginative processes are produced in human brains.",
            "All science-fiction is from an imaginative process.",
            "Either science-fiction or fact. ",
            "No facts are proven to be false.",
            "Dune is a science-fiction or proven to be false."
        ],
        "context_fol": [
            "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))",
            " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ",
            " \u2200x (Science-fiction(x) \u2228 Fact(x))",
            " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ",
            " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
        ],
        "question": "If Dune is science-fiction, then Dune is not produced in human brains and science-fiction.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1060,
        "story_id": 391,
        "context": [
            "All imaginative processes are produced in human brains.",
            "All science-fiction is from an imaginative process.",
            "Either science-fiction or fact. ",
            "No facts are proven to be false.",
            "Dune is a science-fiction or proven to be false."
        ],
        "context_fol": [
            "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))",
            " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ",
            " \u2200x (Science-fiction(x) \u2228 Fact(x))",
            " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ",
            " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
        ],
        "question": "If Dune is not produced in human brains and science-fiction, then Dune is neither an imaginative process nor proved to be false.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1061,
        "story_id": 391,
        "context": [
            "All imaginative processes are produced in human brains.",
            "All science-fiction is from an imaginative process.",
            "Either science-fiction or fact. ",
            "No facts are proven to be false.",
            "Dune is a science-fiction or proven to be false."
        ],
        "context_fol": [
            "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))",
            " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ",
            " \u2200x (Science-fiction(x) \u2228 Fact(x))",
            " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ",
            " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
        ],
        "question": "If Dune is not an imaginative process and science-fiction, then Dune is neither produced in human brains nor an imaginative process.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 524,
        "story_id": 181,
        "context": [
            "An American superhero comes from either DC universe or Marvel universe.",
            "Captain America is a superhero.",
            "Captain America is an American.",
            "Captain America does not come from DC universe.",
            "If a superhero is American, he speaks English.",
            "A superhero speaks English or Spanish."
        ],
        "context_fol": [
            "\u2200x (Superhero(x) \u2227 American(x) \u2192 (ComeFrom(x, dc universe) \u2295 ComeFrom(x, marvel universe))) ",
            " Superhero(captain america) ",
            " American(captain america) ",
            " \u00acComeFrom(captain america, dc universe) ",
            " \u2200x (Superhero(x) \u2227 American(x) \u2192 Speak(x, english)) ",
            " \u2200x (Superhero(x) \u2192 (Speak(x, english) \u2228 Speak(x, spanish)))"
        ],
        "question": "Captain America does not speak English.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 525,
        "story_id": 181,
        "context": [
            "An American superhero comes from either DC universe or Marvel universe.",
            "Captain America is a superhero.",
            "Captain America is an American.",
            "Captain America does not come from DC universe.",
            "If a superhero is American, he speaks English.",
            "A superhero speaks English or Spanish."
        ],
        "context_fol": [
            "\u2200x (Superhero(x) \u2227 American(x) \u2192 (ComeFrom(x, dc universe) \u2295 ComeFrom(x, marvel universe))) ",
            " Superhero(captain america) ",
            " American(captain america) ",
            " \u00acComeFrom(captain america, dc universe) ",
            " \u2200x (Superhero(x) \u2227 American(x) \u2192 Speak(x, english)) ",
            " \u2200x (Superhero(x) \u2192 (Speak(x, english) \u2228 Speak(x, spanish)))"
        ],
        "question": "Captain America comes from Marvel universe.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 526,
        "story_id": 181,
        "context": [
            "An American superhero comes from either DC universe or Marvel universe.",
            "Captain America is a superhero.",
            "Captain America is an American.",
            "Captain America does not come from DC universe.",
            "If a superhero is American, he speaks English.",
            "A superhero speaks English or Spanish."
        ],
        "context_fol": [
            "\u2200x (Superhero(x) \u2227 American(x) \u2192 (ComeFrom(x, dc universe) \u2295 ComeFrom(x, marvel universe))) ",
            " Superhero(captain america) ",
            " American(captain america) ",
            " \u00acComeFrom(captain america, dc universe) ",
            " \u2200x (Superhero(x) \u2227 American(x) \u2192 Speak(x, english)) ",
            " \u2200x (Superhero(x) \u2192 (Speak(x, english) \u2228 Speak(x, spanish)))"
        ],
        "question": "Captain America speaks Spanish.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 229,
        "story_id": 75,
        "context": [
            "Robert Zimmer was born in Germany.",
            "Robert Zimmer is an essayist.",
            "Robert Zimmer was born in 1953.",
            "Every essayist is a writer.",
            "Every person born in Germany is German."
        ],
        "context_fol": [
            "BornInGermany(robertZimmer)",
            "IsEssayist(robertZimmer)",
            "BornIn(robertZimmer, year1953)",
            "\u2200x (IsEssayist(x) \u2192 IsWriter(x))",
            "\u2200x (BornInGermany(x) \u2192 IsGerman(x))"
        ],
        "question": "Robert Zimmer is German.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 230,
        "story_id": 75,
        "context": [
            "Robert Zimmer was born in Germany.",
            "Robert Zimmer is an essayist.",
            "Robert Zimmer was born in 1953.",
            "Every essayist is a writer.",
            "Every person born in Germany is German."
        ],
        "context_fol": [
            "BornInGermany(robertZimmer)",
            "IsEssayist(robertZimmer)",
            "BornIn(robertZimmer, year1953)",
            "\u2200x (IsEssayist(x) \u2192 IsWriter(x))",
            "\u2200x (BornInGermany(x) \u2192 IsGerman(x))"
        ],
        "question": "Robert Zimmer is not a writer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 231,
        "story_id": 75,
        "context": [
            "Robert Zimmer was born in Germany.",
            "Robert Zimmer is an essayist.",
            "Robert Zimmer was born in 1953.",
            "Every essayist is a writer.",
            "Every person born in Germany is German."
        ],
        "context_fol": [
            "BornInGermany(robertZimmer)",
            "IsEssayist(robertZimmer)",
            "BornIn(robertZimmer, year1953)",
            "\u2200x (IsEssayist(x) \u2192 IsWriter(x))",
            "\u2200x (BornInGermany(x) \u2192 IsGerman(x))"
        ],
        "question": "Robert Zimmer is a biographer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 699,
        "story_id": 250,
        "context": [
            "All people who repay their loans on time have a high credit score.",
            "Some people with high credit scores and high salaries are approved for mortgages.",
            "John has a high salary."
        ],
        "context_fol": [
            "\u2200x (Repay(x) \u2192 HighCreditScore(x))",
            "\u2203x ((HighCreditScore(x) \u2227 HighSalary(x)) \u2192 Mortgage(x))",
            "HighSalary(john)"
        ],
        "question": "If John repays his loans on time, he will be approved for a mortgage.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 912,
        "story_id": 344,
        "context": [
            "All students are members of the university.",
            "All graduate students are students.",
            "All PhD students are graduate students.",
            "Some PhD students have high IQs.",
            "If John is not a PhD student, then he is not a member of the university.",
            "If John has a high IQ, then he is a PhD student or a graduate student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
            "\u2200x (GraduateStudent(x) \u2192 Student(x))",
            "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
            "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
            "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
            "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
        ],
        "question": "John has a high IQ.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 913,
        "story_id": 344,
        "context": [
            "All students are members of the university.",
            "All graduate students are students.",
            "All PhD students are graduate students.",
            "Some PhD students have high IQs.",
            "If John is not a PhD student, then he is not a member of the university.",
            "If John has a high IQ, then he is a PhD student or a graduate student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
            "\u2200x (GraduateStudent(x) \u2192 Student(x))",
            "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
            "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
            "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
            "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
        ],
        "question": "John does not have a high IQ.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 914,
        "story_id": 344,
        "context": [
            "All students are members of the university.",
            "All graduate students are students.",
            "All PhD students are graduate students.",
            "Some PhD students have high IQs.",
            "If John is not a PhD student, then he is not a member of the university.",
            "If John has a high IQ, then he is a PhD student or a graduate student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 MemberOfUniversity(x))",
            "\u2200x (GraduateStudent(x) \u2192 Student(x))",
            "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
            "\u2203x (PhDStudent(x) \u2227 HighIQ(x))",
            "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)",
            "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
        ],
        "question": "John is a PhD student.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 476,
        "story_id": 165,
        "context": [
            "Belgium, France and Germany are European countries.",
            "Paris is the capital of France.",
            "The Eiffel Tower is one of the main tourist attractions located in Paris.",
            "Some people who live in Belgium speak French.",
            "If John goes to Europe, he will see some tourist attractions.",
            "John speaks French."
        ],
        "context_fol": [
            "EuropeanCountry(belgium) \u2228 EuropeanCountry(france) \u2228 EuropeanCountry(germany)",
            "CapitalOf(paris, france)",
            "TouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)",
            "\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))",
            "\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))",
            "Speak(john, french)"
        ],
        "question": "If John goes to Europe, he will see the Eiffel Tower.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 477,
        "story_id": 165,
        "context": [
            "Belgium, France and Germany are European countries.",
            "Paris is the capital of France.",
            "The Eiffel Tower is one of the main tourist attractions located in Paris.",
            "Some people who live in Belgium speak French.",
            "If John goes to Europe, he will see some tourist attractions.",
            "John speaks French."
        ],
        "context_fol": [
            "EuropeanCountry(belgium) \u2228 EuropeanCountry(france) \u2228 EuropeanCountry(germany)",
            "CapitalOf(paris, france)",
            "TouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)",
            "\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))",
            "\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))",
            "Speak(john, french)"
        ],
        "question": "The Eiffel Tower is located in the capital of France.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 478,
        "story_id": 165,
        "context": [
            "Belgium, France and Germany are European countries.",
            "Paris is the capital of France.",
            "The Eiffel Tower is one of the main tourist attractions located in Paris.",
            "Some people who live in Belgium speak French.",
            "If John goes to Europe, he will see some tourist attractions.",
            "John speaks French."
        ],
        "context_fol": [
            "EuropeanCountry(belgium) \u2228 EuropeanCountry(france) \u2228 EuropeanCountry(germany)",
            "CapitalOf(paris, france)",
            "TouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)",
            "\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))",
            "\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))",
            "Speak(john, french)"
        ],
        "question": "John lives in Belgium.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 905,
        "story_id": 342,
        "context": [
            "All sports cars are loud.",
            "No loud cars are electric.",
            "If a car is a Ferrari, then it is a sports car.",
            "All cars made in Maranello are Ferrari",
            "If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car."
        ],
        "context_fol": [
            "\u2200x (SportsCar(x) \u2192 LoudCar(x))",
            "\u2200x (LoudCar(x) \u2192 \u00acElectricCar(x))",
            "\u2200x (Ferrari(x) \u2192 SportsCar(x))",
            "\u2200x (MadeInMaranello(x) \u2192 Ferrari(x))",
            "\u2200x (\u00acSportsCar(prius) \u2228 \u00acLoudCar(prius) \u2192 MadeInMaranello(prius) \u2228 LoudCar(prius))"
        ],
        "question": "Prius is an electric car.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 906,
        "story_id": 342,
        "context": [
            "All sports cars are loud.",
            "No loud cars are electric.",
            "If a car is a Ferrari, then it is a sports car.",
            "All cars made in Maranello are Ferrari",
            "If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car."
        ],
        "context_fol": [
            "\u2200x (SportsCar(x) \u2192 LoudCar(x))",
            "\u2200x (LoudCar(x) \u2192 \u00acElectricCar(x))",
            "\u2200x (Ferrari(x) \u2192 SportsCar(x))",
            "\u2200x (MadeInMaranello(x) \u2192 Ferrari(x))",
            "\u2200x (\u00acSportsCar(prius) \u2228 \u00acLoudCar(prius) \u2192 MadeInMaranello(prius) \u2228 LoudCar(prius))"
        ],
        "question": "Prius is not an electric car.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 907,
        "story_id": 342,
        "context": [
            "All sports cars are loud.",
            "No loud cars are electric.",
            "If a car is a Ferrari, then it is a sports car.",
            "All cars made in Maranello are Ferrari",
            "If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car."
        ],
        "context_fol": [
            "\u2200x (SportsCar(x) \u2192 LoudCar(x))",
            "\u2200x (LoudCar(x) \u2192 \u00acElectricCar(x))",
            "\u2200x (Ferrari(x) \u2192 SportsCar(x))",
            "\u2200x (MadeInMaranello(x) \u2192 Ferrari(x))",
            "\u2200x (\u00acSportsCar(prius) \u2228 \u00acLoudCar(prius) \u2192 MadeInMaranello(prius) \u2228 LoudCar(prius))"
        ],
        "question": "Prius is a Maranello-made car.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 908,
        "story_id": 342,
        "context": [
            "All sports cars are loud.",
            "No loud cars are electric.",
            "If a car is a Ferrari, then it is a sports car.",
            "All cars made in Maranello are Ferrari",
            "If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car."
        ],
        "context_fol": [
            "\u2200x (SportsCar(x) \u2192 LoudCar(x))",
            "\u2200x (LoudCar(x) \u2192 \u00acElectricCar(x))",
            "\u2200x (Ferrari(x) \u2192 SportsCar(x))",
            "\u2200x (MadeInMaranello(x) \u2192 Ferrari(x))",
            "\u2200x (\u00acSportsCar(prius) \u2228 \u00acLoudCar(prius) \u2192 MadeInMaranello(prius) \u2228 LoudCar(prius))"
        ],
        "question": "If Prius is a Ferrari or a loud car, then Prius is an electric car.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1288,
        "story_id": 446,
        "context": [
            "If something is a plant, then it is not a cute animal.",
            "All flowers are plants.",
            "Every kitten is a cute animal.",
            "If something is grown in a garden, then it is a flower.",
            "Piper is a kitten or a cute animal."
        ],
        "context_fol": [
            "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))",
            "\u2200x (Flower(x) \u2192 Plant(x))",
            "\u2200x (Kitten(x) \u2192 CuteAnimal(x))",
            "\u2200x (GrownInGarden(x) \u2192 Flower(x))",
            "Kitten(piper) \u2228 CuteAnimal(piper)"
        ],
        "question": "Piper was grown in a garden.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1289,
        "story_id": 446,
        "context": [
            "If something is a plant, then it is not a cute animal.",
            "All flowers are plants.",
            "Every kitten is a cute animal.",
            "If something is grown in a garden, then it is a flower.",
            "Piper is a kitten or a cute animal."
        ],
        "context_fol": [
            "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))",
            "\u2200x (Flower(x) \u2192 Plant(x))",
            "\u2200x (Kitten(x) \u2192 CuteAnimal(x))",
            "\u2200x (GrownInGarden(x) \u2192 Flower(x))",
            "Kitten(piper) \u2228 CuteAnimal(piper)"
        ],
        "question": "Piper was not grown in a garden.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1290,
        "story_id": 446,
        "context": [
            "If something is a plant, then it is not a cute animal.",
            "All flowers are plants.",
            "Every kitten is a cute animal.",
            "If something is grown in a garden, then it is a flower.",
            "Piper is a kitten or a cute animal."
        ],
        "context_fol": [
            "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))",
            "\u2200x (Flower(x) \u2192 Plant(x))",
            "\u2200x (Kitten(x) \u2192 CuteAnimal(x))",
            "\u2200x (GrownInGarden(x) \u2192 Flower(x))",
            "Kitten(piper) \u2228 CuteAnimal(piper)"
        ],
        "question": "Piper is a kitten.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 437,
        "story_id": 149,
        "context": [
            "Guam has participated in the Winter Olympics.",
            "In 1988, the Winter Olympics were held in Calgary.",
            "Guam sent an athlete to the Calgary Winter Olympics.",
            "If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.",
            "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics."
        ],
        "context_fol": [
            "ParticipatedIn(guam, winterolympics)",
            "Year(y1988) \u2192 BeHeld(winterolympics, calgary)",
            "BeHeld(winterolympics, calgary) \u2192 SendAthletes(guam)",
            "SendAthletes(guam) \u2192 ParticipatedIn(guam, winterolympics)",
            "BeFrom(bankert, guam) \u2227 ParticipatedIn(bankert, winterolympics)"
        ],
        "question": "Judd Bankert competed in the 1992 Winter Olympics.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 438,
        "story_id": 149,
        "context": [
            "Guam has participated in the Winter Olympics.",
            "In 1988, the Winter Olympics were held in Calgary.",
            "Guam sent an athlete to the Calgary Winter Olympics.",
            "If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.",
            "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics."
        ],
        "context_fol": [
            "ParticipatedIn(guam, winterolympics)",
            "Year(y1988) \u2192 BeHeld(winterolympics, calgary)",
            "BeHeld(winterolympics, calgary) \u2192 SendAthletes(guam)",
            "SendAthletes(guam) \u2192 ParticipatedIn(guam, winterolympics)",
            "BeFrom(bankert, guam) \u2227 ParticipatedIn(bankert, winterolympics)"
        ],
        "question": "Guam has participated in the Summer Olympics at least once.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 209,
        "story_id": 70,
        "context": [
            "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
            "One of the word-setters of My Word! was Michael O'Donnell.",
            "The magazine World Medicine was edited by Michael O'Donnell.",
            "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
        ],
        "context_fol": [
            "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
            "WordSetter(michael)",
            "Magazine(worldmedicine) \u2227 EditedBy(worldmedicine, michael)",
            "\u2203x (BornIn(michael, yorkshire) \u2227 Son(michael, x) \u2227 GeneralPractitioner(x))"
        ],
        "question": "The son of a general practitioner was a word-setter of My Word!.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 210,
        "story_id": 70,
        "context": [
            "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
            "One of the word-setters of My Word! was Michael O'Donnell.",
            "The magazine World Medicine was edited by Michael O'Donnell.",
            "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
        ],
        "context_fol": [
            "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
            "WordSetter(michael)",
            "Magazine(worldmedicine) \u2227 EditedBy(worldmedicine, michael)",
            "\u2203x (BornIn(michael, yorkshire) \u2227 Son(michael, x) \u2227 GeneralPractitioner(x))"
        ],
        "question": "World Medicine is not a magazine.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 211,
        "story_id": 70,
        "context": [
            "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
            "One of the word-setters of My Word! was Michael O'Donnell.",
            "The magazine World Medicine was edited by Michael O'Donnell.",
            "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
        ],
        "context_fol": [
            "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
            "WordSetter(michael)",
            "Magazine(worldmedicine) \u2227 EditedBy(worldmedicine, michael)",
            "\u2203x (BornIn(michael, yorkshire) \u2227 Son(michael, x) \u2227 GeneralPractitioner(x))"
        ],
        "question": "There are no British authors.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 212,
        "story_id": 70,
        "context": [
            "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
            "One of the word-setters of My Word! was Michael O'Donnell.",
            "The magazine World Medicine was edited by Michael O'Donnell.",
            "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
        ],
        "context_fol": [
            "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
            "WordSetter(michael)",
            "Magazine(worldmedicine) \u2227 EditedBy(worldmedicine, michael)",
            "\u2203x (BornIn(michael, yorkshire) \u2227 Son(michael, x) \u2227 GeneralPractitioner(x))"
        ],
        "question": "There are no journalists that were born in Yorkshire.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 213,
        "story_id": 70,
        "context": [
            "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
            "One of the word-setters of My Word! was Michael O'Donnell.",
            "The magazine World Medicine was edited by Michael O'Donnell.",
            "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."
        ],
        "context_fol": [
            "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)",
            "WordSetter(michael)",
            "Magazine(worldmedicine) \u2227 EditedBy(worldmedicine, michael)",
            "\u2203x (BornIn(michael, yorkshire) \u2227 Son(michael, x) \u2227 GeneralPractitioner(x))"
        ],
        "question": "There is a son of a general practitioner that is not an author.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 704,
        "story_id": 255,
        "context": [
            "No homework is fun.",
            "Some reading is homework."
        ],
        "context_fol": [
            "\u2200x (Homework(x) \u2192 \u00acIsFun(x))",
            "\u2203x (IsReading(x) \u2227 Homework(x))"
        ],
        "question": "Some reading is fun.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 747,
        "story_id": 298,
        "context": [
            "If violence is good, it is justified.",
            "If something is justified, it is lawful."
        ],
        "context_fol": [
            "\u2200x ((Violence(x) \u2227 Good(x)) \u2192 Justified(x))",
            "\u2200x (Justified(x) \u2192 Lawful(x))"
        ],
        "question": "If violence is good, it is lawful.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1025,
        "story_id": 382,
        "context": [
            "All people who have a horse ranch regularly ride horses for pleasure and sport.",
            "All people who have a lot of disposable income have a horse ranch.",
            "If people compete in horse dressage shows, then they have a lot of disposable income.",
            "If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.",
            "If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.",
            "Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings."
        ],
        "context_fol": [
            "\u2200x (Ranch(x) \u2192 RegularlyRide(x))",
            "\u2200x (DisposableIncome(x) \u2192 Ranch(x))",
            "\u2200x (Compete(x) \u2192 DisposableIncome(x))",
            "\u2200x (Compete(x) \u2192 Invested(x))",
            "\u2200x (RegularlyRide(x) \u2192 \u00acCramped(x))",
            "(Ranch(manny) \u2227 Cramped(manny)) \u2295 (\u00acRanch(manny) \u2227 \u00acCramped(manny))"
        ],
        "question": "Manny regularly rides horses for pleasure and sport.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1026,
        "story_id": 382,
        "context": [
            "All people who have a horse ranch regularly ride horses for pleasure and sport.",
            "All people who have a lot of disposable income have a horse ranch.",
            "If people compete in horse dressage shows, then they have a lot of disposable income.",
            "If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.",
            "If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.",
            "Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings."
        ],
        "context_fol": [
            "\u2200x (Ranch(x) \u2192 RegularlyRide(x))",
            "\u2200x (DisposableIncome(x) \u2192 Ranch(x))",
            "\u2200x (Compete(x) \u2192 DisposableIncome(x))",
            "\u2200x (Compete(x) \u2192 Invested(x))",
            "\u2200x (RegularlyRide(x) \u2192 \u00acCramped(x))",
            "(Ranch(manny) \u2227 Cramped(manny)) \u2295 (\u00acRanch(manny) \u2227 \u00acCramped(manny))"
        ],
        "question": "Manny competes in horse dressage shows and has invested in high-quality equestrian equipment and gear.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1027,
        "story_id": 382,
        "context": [
            "All people who have a horse ranch regularly ride horses for pleasure and sport.",
            "All people who have a lot of disposable income have a horse ranch.",
            "If people compete in horse dressage shows, then they have a lot of disposable income.",
            "If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.",
            "If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.",
            "Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings."
        ],
        "context_fol": [
            "\u2200x (Ranch(x) \u2192 RegularlyRide(x))",
            "\u2200x (DisposableIncome(x) \u2192 Ranch(x))",
            "\u2200x (Compete(x) \u2192 DisposableIncome(x))",
            "\u2200x (Compete(x) \u2192 Invested(x))",
            "\u2200x (RegularlyRide(x) \u2192 \u00acCramped(x))",
            "(Ranch(manny) \u2227 Cramped(manny)) \u2295 (\u00acRanch(manny) \u2227 \u00acCramped(manny))"
        ],
        "question": "If Manny either has a horse ranch or competes in horse dressage shows, then Manny has not invested in high-quality equestrian equipment and gear.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 159,
        "story_id": 54,
        "context": [
            "A roundel is a rounded artillery fortification.",
            "A roundel is not higher than adjacent walls. ",
            "Cannons can be deployed on artillery fortifications. ",
            "Roundels are the oldest artillery fortifications.",
            "Battery towers are an artillery fortification."
        ],
        "context_fol": [
            "\u2200x (Roundel(x) \u2192 Rounded(x) \u2227 ArtilleryFortification(x))",
            "\u2200x \u2200y (Roundel(x) \u2227 AdjacentWall(y) \u2192 \u00acHigher(x, y))",
            "\u2200x (ArtilleryFortification(x) \u2192 DeployCannons(x))",
            "\u2200x \u2200y (Roundel(x) \u2227 ArtilleryFortification(x) \u2227 ArtilleryFortification(y) \u2192 Older(x, y))",
            "\u2200x (BatteryTower(x) \u2192 ArtilleryFortification(x))"
        ],
        "question": "Cannons can be deployed on battery towers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 160,
        "story_id": 54,
        "context": [
            "A roundel is a rounded artillery fortification.",
            "A roundel is not higher than adjacent walls. ",
            "Cannons can be deployed on artillery fortifications. ",
            "Roundels are the oldest artillery fortifications.",
            "Battery towers are an artillery fortification."
        ],
        "context_fol": [
            "\u2200x (Roundel(x) \u2192 Rounded(x) \u2227 ArtilleryFortification(x))",
            "\u2200x \u2200y (Roundel(x) \u2227 AdjacentWall(y) \u2192 \u00acHigher(x, y))",
            "\u2200x (ArtilleryFortification(x) \u2192 DeployCannons(x))",
            "\u2200x \u2200y (Roundel(x) \u2227 ArtilleryFortification(x) \u2227 ArtilleryFortification(y) \u2192 Older(x, y))",
            "\u2200x (BatteryTower(x) \u2192 ArtilleryFortification(x))"
        ],
        "question": "Roundels are older than battery towers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 161,
        "story_id": 54,
        "context": [
            "A roundel is a rounded artillery fortification.",
            "A roundel is not higher than adjacent walls. ",
            "Cannons can be deployed on artillery fortifications. ",
            "Roundels are the oldest artillery fortifications.",
            "Battery towers are an artillery fortification."
        ],
        "context_fol": [
            "\u2200x (Roundel(x) \u2192 Rounded(x) \u2227 ArtilleryFortification(x))",
            "\u2200x \u2200y (Roundel(x) \u2227 AdjacentWall(y) \u2192 \u00acHigher(x, y))",
            "\u2200x (ArtilleryFortification(x) \u2192 DeployCannons(x))",
            "\u2200x \u2200y (Roundel(x) \u2227 ArtilleryFortification(x) \u2227 ArtilleryFortification(y) \u2192 Older(x, y))",
            "\u2200x (BatteryTower(x) \u2192 ArtilleryFortification(x))"
        ],
        "question": "Battery towers are higher than adjacent walls.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 162,
        "story_id": 54,
        "context": [
            "A roundel is a rounded artillery fortification.",
            "A roundel is not higher than adjacent walls. ",
            "Cannons can be deployed on artillery fortifications. ",
            "Roundels are the oldest artillery fortifications.",
            "Battery towers are an artillery fortification."
        ],
        "context_fol": [
            "\u2200x (Roundel(x) \u2192 Rounded(x) \u2227 ArtilleryFortification(x))",
            "\u2200x \u2200y (Roundel(x) \u2227 AdjacentWall(y) \u2192 \u00acHigher(x, y))",
            "\u2200x (ArtilleryFortification(x) \u2192 DeployCannons(x))",
            "\u2200x \u2200y (Roundel(x) \u2227 ArtilleryFortification(x) \u2227 ArtilleryFortification(y) \u2192 Older(x, y))",
            "\u2200x (BatteryTower(x) \u2192 ArtilleryFortification(x))"
        ],
        "question": "Roundels can be deployed on roundels.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 737,
        "story_id": 288,
        "context": [
            "All tissues are soft.",
            "Some papers are tissues."
        ],
        "context_fol": [
            "\u2200x (Tissue(x) \u2192 Soft(x))",
            "\u2203x (Paper(x) \u2227 Tissue(x))"
        ],
        "question": "Some papers are hard.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 488,
        "story_id": 169,
        "context": [
            "All volunteers receive intangible benefits for their work.",
            "Volunteers work regularly or on an as-needed basis.",
            "Some volunteers are trained.",
            "Volunteers work in groups or individually.",
            "Environmental volunteers contribute toward environmental management or conservation.",
            "Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis."
        ],
        "context_fol": [
            "\u2200x (Volunteer(x) \u2192 GetIntangibleBenefits(x))",
            "\u2200x (Volunteer(x) \u2192 WorkRegularly(x) \u2228 WorkAsNeeded(x))",
            "\u2203x (Volunteer(x) \u2192 Trained(x))",
            "\u2200x (Volunteer(x) \u2192 (WorkInGroup(x) \u2228 WorkIndividually(x)))",
            "\u2200x (Volunteer(x) \u2227 Environmental(x) \u2192 (ContributeTo(x, environmentalmanagement) \u2228 ContributeTo(x, environmentalconservation)))",
            "\u2203x (Volunteer(x) \u2227 ContributeTo(x, naturaldisasterresponse) \u2192 WorkInGroup(x) \u2227 WorkAsNeeded(x))"
        ],
        "question": "Volunteers who participate in natural disaster response receive intangible benefits for their work.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 489,
        "story_id": 169,
        "context": [
            "All volunteers receive intangible benefits for their work.",
            "Volunteers work regularly or on an as-needed basis.",
            "Some volunteers are trained.",
            "Volunteers work in groups or individually.",
            "Environmental volunteers contribute toward environmental management or conservation.",
            "Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis."
        ],
        "context_fol": [
            "\u2200x (Volunteer(x) \u2192 GetIntangibleBenefits(x))",
            "\u2200x (Volunteer(x) \u2192 WorkRegularly(x) \u2228 WorkAsNeeded(x))",
            "\u2203x (Volunteer(x) \u2192 Trained(x))",
            "\u2200x (Volunteer(x) \u2192 (WorkInGroup(x) \u2228 WorkIndividually(x)))",
            "\u2200x (Volunteer(x) \u2227 Environmental(x) \u2192 (ContributeTo(x, environmentalmanagement) \u2228 ContributeTo(x, environmentalconservation)))",
            "\u2203x (Volunteer(x) \u2227 ContributeTo(x, naturaldisasterresponse) \u2192 WorkInGroup(x) \u2227 WorkAsNeeded(x))"
        ],
        "question": "Environmental volunteers work in groups.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 490,
        "story_id": 169,
        "context": [
            "All volunteers receive intangible benefits for their work.",
            "Volunteers work regularly or on an as-needed basis.",
            "Some volunteers are trained.",
            "Volunteers work in groups or individually.",
            "Environmental volunteers contribute toward environmental management or conservation.",
            "Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis."
        ],
        "context_fol": [
            "\u2200x (Volunteer(x) \u2192 GetIntangibleBenefits(x))",
            "\u2200x (Volunteer(x) \u2192 WorkRegularly(x) \u2228 WorkAsNeeded(x))",
            "\u2203x (Volunteer(x) \u2192 Trained(x))",
            "\u2200x (Volunteer(x) \u2192 (WorkInGroup(x) \u2228 WorkIndividually(x)))",
            "\u2200x (Volunteer(x) \u2227 Environmental(x) \u2192 (ContributeTo(x, environmentalmanagement) \u2228 ContributeTo(x, environmentalconservation)))",
            "\u2203x (Volunteer(x) \u2227 ContributeTo(x, naturaldisasterresponse) \u2192 WorkInGroup(x) \u2227 WorkAsNeeded(x))"
        ],
        "question": "To be a volunteer, you must be trained.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1007,
        "story_id": 376,
        "context": [
            "All people who are very consistent and enjoy sticking to their regular routines do not like surprises.",
            "If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.",
            "If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.",
            "All old people living in stable homes do not like surprises.",
            "If people have very high energy and are impulsive, then they like surprises.",
            "If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises."
        ],
        "context_fol": [
            "\u2200x (Consistent(x) \u2192 NoSurprises(x))",
            "\u2200x (Flannel(x) \u2192 Consistent(x))",
            "\u2200x (NoShopping(x) \u2192 Flannel(x))",
            "\u2200x (Old(x) \u2192 NoSurprises(x))",
            "\u2200x (Impulsive(x) \u2192 \u00acNoSurprises(x))",
            "\u00ac(NoSurprises(mike) \u2227 Impulsive(mike)) \u2192 Consistent(mike) \u2295 NoSurprises(mike)"
        ],
        "question": "Mike is an old person living in a stable home.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1008,
        "story_id": 376,
        "context": [
            "All people who are very consistent and enjoy sticking to their regular routines do not like surprises.",
            "If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.",
            "If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.",
            "All old people living in stable homes do not like surprises.",
            "If people have very high energy and are impulsive, then they like surprises.",
            "If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises."
        ],
        "context_fol": [
            "\u2200x (Consistent(x) \u2192 NoSurprises(x))",
            "\u2200x (Flannel(x) \u2192 Consistent(x))",
            "\u2200x (NoShopping(x) \u2192 Flannel(x))",
            "\u2200x (Old(x) \u2192 NoSurprises(x))",
            "\u2200x (Impulsive(x) \u2192 \u00acNoSurprises(x))",
            "\u00ac(NoSurprises(mike) \u2227 Impulsive(mike)) \u2192 Consistent(mike) \u2295 NoSurprises(mike)"
        ],
        "question": "If Mike wears flannel shirts every day or does not like shopping for clothes and other materialistic goods, then Mike is neither an old person living in a stable home nor does not like shopping for clothes and other materialistic goods.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1009,
        "story_id": 376,
        "context": [
            "All people who are very consistent and enjoy sticking to their regular routines do not like surprises.",
            "If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.",
            "If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.",
            "All old people living in stable homes do not like surprises.",
            "If people have very high energy and are impulsive, then they like surprises.",
            "If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises."
        ],
        "context_fol": [
            "\u2200x (Consistent(x) \u2192 NoSurprises(x))",
            "\u2200x (Flannel(x) \u2192 Consistent(x))",
            "\u2200x (NoShopping(x) \u2192 Flannel(x))",
            "\u2200x (Old(x) \u2192 NoSurprises(x))",
            "\u2200x (Impulsive(x) \u2192 \u00acNoSurprises(x))",
            "\u00ac(NoSurprises(mike) \u2227 Impulsive(mike)) \u2192 Consistent(mike) \u2295 NoSurprises(mike)"
        ],
        "question": "If Mike is not an old person living in a stable home and does not like shopping for clothes and other materialistic goods, then Mike does not like shopping for clothes and other materialistic goods.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 619,
        "story_id": 215,
        "context": [
            "Adam owns cars.",
            "Adam has a favorite car.",
            "Among the cars he owns, Adam's favorite car is European.",
            "Adam broke his favorite car."
        ],
        "context_fol": [
            "\u2203x (Owns(adam, x))",
            "\u2203x (Favorite(adam, x))",
            "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))",
            "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))"
        ],
        "question": "Adam owns a Japanese car.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 620,
        "story_id": 215,
        "context": [
            "Adam owns cars.",
            "Adam has a favorite car.",
            "Among the cars he owns, Adam's favorite car is European.",
            "Adam broke his favorite car."
        ],
        "context_fol": [
            "\u2203x (Owns(adam, x))",
            "\u2203x (Favorite(adam, x))",
            "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))",
            "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))"
        ],
        "question": "Adam broke a European car.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1240,
        "story_id": 433,
        "context": [
            "No buildings in New Haven are higher than 400 meters. ",
            "All buildings managed by Yale Housing are in New Haven. ",
            "All buildings in Manhattan are higher than 400 meters. ",
            "All buildings owned by Bloomberg are in Manhattan. ",
            "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ",
            "Tower A is neither in New Haven nor in Manhattan.",
            "Tower B is a building with the Bloomberg logo and in Manhattan. "
        ],
        "context_fol": [
            "\u2200x (NewHaven(x) \u2192 \u00acHigh(x))",
            "\u2200x (YaleHousing(x) \u2192 NewHaven(x))",
            "\u2200x (Manhattan(x) \u2192 High(x))",
            "\u2200x (Bloomberg(x) \u2192 Manhattan(x))",
            "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
            "\u00ac(NewHaven(towera) \u2295 Manhattan(towera))",
            "BloombergLogo(towerb) \u2227 Manhattan(towerb)"
        ],
        "question": "Tower A is higher than 400 meters.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1241,
        "story_id": 433,
        "context": [
            "No buildings in New Haven are higher than 400 meters. ",
            "All buildings managed by Yale Housing are in New Haven. ",
            "All buildings in Manhattan are higher than 400 meters. ",
            "All buildings owned by Bloomberg are in Manhattan. ",
            "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ",
            "Tower A is neither in New Haven nor in Manhattan.",
            "Tower B is a building with the Bloomberg logo and in Manhattan. "
        ],
        "context_fol": [
            "\u2200x (NewHaven(x) \u2192 \u00acHigh(x))",
            "\u2200x (YaleHousing(x) \u2192 NewHaven(x))",
            "\u2200x (Manhattan(x) \u2192 High(x))",
            "\u2200x (Bloomberg(x) \u2192 Manhattan(x))",
            "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
            "\u00ac(NewHaven(towera) \u2295 Manhattan(towera))",
            "BloombergLogo(towerb) \u2227 Manhattan(towerb)"
        ],
        "question": "Tower A is not higher than 400 meters.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1242,
        "story_id": 433,
        "context": [
            "No buildings in New Haven are higher than 400 meters. ",
            "All buildings managed by Yale Housing are in New Haven. ",
            "All buildings in Manhattan are higher than 400 meters. ",
            "All buildings owned by Bloomberg are in Manhattan. ",
            "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ",
            "Tower A is neither in New Haven nor in Manhattan.",
            "Tower B is a building with the Bloomberg logo and in Manhattan. "
        ],
        "context_fol": [
            "\u2200x (NewHaven(x) \u2192 \u00acHigh(x))",
            "\u2200x (YaleHousing(x) \u2192 NewHaven(x))",
            "\u2200x (Manhattan(x) \u2192 High(x))",
            "\u2200x (Bloomberg(x) \u2192 Manhattan(x))",
            "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
            "\u00ac(NewHaven(towera) \u2295 Manhattan(towera))",
            "BloombergLogo(towerb) \u2227 Manhattan(towerb)"
        ],
        "question": "Tower A is a building with the Bloomberg logo or managed by Yale Housing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1243,
        "story_id": 433,
        "context": [
            "No buildings in New Haven are higher than 400 meters. ",
            "All buildings managed by Yale Housing are in New Haven. ",
            "All buildings in Manhattan are higher than 400 meters. ",
            "All buildings owned by Bloomberg are in Manhattan. ",
            "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ",
            "Tower A is neither in New Haven nor in Manhattan.",
            "Tower B is a building with the Bloomberg logo and in Manhattan. "
        ],
        "context_fol": [
            "\u2200x (NewHaven(x) \u2192 \u00acHigh(x))",
            "\u2200x (YaleHousing(x) \u2192 NewHaven(x))",
            "\u2200x (Manhattan(x) \u2192 High(x))",
            "\u2200x (Bloomberg(x) \u2192 Manhattan(x))",
            "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))",
            "\u00ac(NewHaven(towera) \u2295 Manhattan(towera))",
            "BloombergLogo(towerb) \u2227 Manhattan(towerb)"
        ],
        "question": "Tower A is neither a building with the Bloomberg logo nor managed by Yale Housing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1266,
        "story_id": 439,
        "context": [
            "No fish are birds.",
            "Everything that is an osprey is a bird.",
            "If something is a carp, then it is a fish.",
            "All goldfish are carp.",
            "If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish."
        ],
        "context_fol": [
            "\u2200x (Fish(x) \u2192 \u00acBird(x))",
            "\u2200x (Osprey(x) \u2192 Bird(x))",
            "\u2200x (Carp(x) \u2192 Fish(x))",
            "\u2200x (Goldfish(x) \u2192 Carp(x))",
            "Osprey(bubbles) \u2295 Carp(bubbles) \u2192 \u00acFish(bubbles)"
        ],
        "question": "Bubbles is an Osprey.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1267,
        "story_id": 439,
        "context": [
            "No fish are birds.",
            "Everything that is an osprey is a bird.",
            "If something is a carp, then it is a fish.",
            "All goldfish are carp.",
            "If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish."
        ],
        "context_fol": [
            "\u2200x (Fish(x) \u2192 \u00acBird(x))",
            "\u2200x (Osprey(x) \u2192 Bird(x))",
            "\u2200x (Carp(x) \u2192 Fish(x))",
            "\u2200x (Goldfish(x) \u2192 Carp(x))",
            "Osprey(bubbles) \u2295 Carp(bubbles) \u2192 \u00acFish(bubbles)"
        ],
        "question": "Bubbles is a carp.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1268,
        "story_id": 439,
        "context": [
            "No fish are birds.",
            "Everything that is an osprey is a bird.",
            "If something is a carp, then it is a fish.",
            "All goldfish are carp.",
            "If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish."
        ],
        "context_fol": [
            "\u2200x (Fish(x) \u2192 \u00acBird(x))",
            "\u2200x (Osprey(x) \u2192 Bird(x))",
            "\u2200x (Carp(x) \u2192 Fish(x))",
            "\u2200x (Goldfish(x) \u2192 Carp(x))",
            "Osprey(bubbles) \u2295 Carp(bubbles) \u2192 \u00acFish(bubbles)"
        ],
        "question": "Bubbles is not a carp.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 455,
        "story_id": 158,
        "context": [
            "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.",
            "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.",
            "Cities in Florida that they are interested in are Orlando and Miami.",
            "Mr. Smith has been to two cities in California.",
            "Mrs. Smith has been to one city in Florida."
        ],
        "context_fol": [
            "\u2200x (WantToGo(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 (NeverGo(x)))",
            "\u2200x (((SanFrancisco(x) \u2228 LosAngeles(x) \u2228 SanDiego(x)) \u2227 California(x)) \u2192 WantToGo(x))",
            "\u2200x ((Orlando(x) \u2228 Miami(x)) \u2227 Florida(x)) \u2192 WantToGo(x))",
            "CaliforniaCityVisited(mr.smith, two)",
            "FloridaCityVisited(mrs.smith, one)"
        ],
        "question": "Mr. Smith has been to San Francisco.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 456,
        "story_id": 158,
        "context": [
            "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.",
            "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.",
            "Cities in Florida that they are interested in are Orlando and Miami.",
            "Mr. Smith has been to two cities in California.",
            "Mrs. Smith has been to one city in Florida."
        ],
        "context_fol": [
            "\u2200x (WantToGo(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 (NeverGo(x)))",
            "\u2200x (((SanFrancisco(x) \u2228 LosAngeles(x) \u2228 SanDiego(x)) \u2227 California(x)) \u2192 WantToGo(x))",
            "\u2200x ((Orlando(x) \u2228 Miami(x)) \u2227 Florida(x)) \u2192 WantToGo(x))",
            "CaliforniaCityVisited(mr.smith, two)",
            "FloridaCityVisited(mrs.smith, one)"
        ],
        "question": "They have at leat one candidate city in Florida to visit.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 457,
        "story_id": 158,
        "context": [
            "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.",
            "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.",
            "Cities in Florida that they are interested in are Orlando and Miami.",
            "Mr. Smith has been to two cities in California.",
            "Mrs. Smith has been to one city in Florida."
        ],
        "context_fol": [
            "\u2200x (WantToGo(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 (NeverGo(x)))",
            "\u2200x (((SanFrancisco(x) \u2228 LosAngeles(x) \u2228 SanDiego(x)) \u2227 California(x)) \u2192 WantToGo(x))",
            "\u2200x ((Orlando(x) \u2228 Miami(x)) \u2227 Florida(x)) \u2192 WantToGo(x))",
            "CaliforniaCityVisited(mr.smith, two)",
            "FloridaCityVisited(mrs.smith, one)"
        ],
        "question": "They have at least two candidate cities in California to visit.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1429,
        "story_id": 486,
        "context": [
            "Everything is either big or small.",
            "All big things are heavy. ",
            "All small things are light. ",
            "All heavy things are still.",
            "All light things are unstable.",
            "All unstable things are changing.",
            "All unstable things are kinetic. ",
            "A bird is not both heavy and still."
        ],
        "context_fol": [
            "\u2200x (Big(x) \u2295 Small(x))",
            "\u2200x (Big(x) \u2192 Heavy(x))",
            "\u2200x (Small(x) \u2192 Light(x))",
            "\u2200x (Heavy(x) \u2192 Still(x))",
            "\u2200x (Light(x) \u2192 Unstable(x))",
            "\u2200x (Unstable(x) \u2192 Changing(x))",
            "\u2200x (Unstable(x) \u2192 Kinetic(x))",
            "\u00ac(Heavy(bird) \u2227 Still(bird))"
        ],
        "question": "A bird is still.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1430,
        "story_id": 486,
        "context": [
            "Everything is either big or small.",
            "All big things are heavy. ",
            "All small things are light. ",
            "All heavy things are still.",
            "All light things are unstable.",
            "All unstable things are changing.",
            "All unstable things are kinetic. ",
            "A bird is not both heavy and still."
        ],
        "context_fol": [
            "\u2200x (Big(x) \u2295 Small(x))",
            "\u2200x (Big(x) \u2192 Heavy(x))",
            "\u2200x (Small(x) \u2192 Light(x))",
            "\u2200x (Heavy(x) \u2192 Still(x))",
            "\u2200x (Light(x) \u2192 Unstable(x))",
            "\u2200x (Unstable(x) \u2192 Changing(x))",
            "\u2200x (Unstable(x) \u2192 Kinetic(x))",
            "\u00ac(Heavy(bird) \u2227 Still(bird))"
        ],
        "question": "A bird is not still.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1431,
        "story_id": 486,
        "context": [
            "Everything is either big or small.",
            "All big things are heavy. ",
            "All small things are light. ",
            "All heavy things are still.",
            "All light things are unstable.",
            "All unstable things are changing.",
            "All unstable things are kinetic. ",
            "A bird is not both heavy and still."
        ],
        "context_fol": [
            "\u2200x (Big(x) \u2295 Small(x))",
            "\u2200x (Big(x) \u2192 Heavy(x))",
            "\u2200x (Small(x) \u2192 Light(x))",
            "\u2200x (Heavy(x) \u2192 Still(x))",
            "\u2200x (Light(x) \u2192 Unstable(x))",
            "\u2200x (Unstable(x) \u2192 Changing(x))",
            "\u2200x (Unstable(x) \u2192 Kinetic(x))",
            "\u00ac(Heavy(bird) \u2227 Still(bird))"
        ],
        "question": "A bird is kinetic and changing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1432,
        "story_id": 486,
        "context": [
            "Everything is either big or small.",
            "All big things are heavy. ",
            "All small things are light. ",
            "All heavy things are still.",
            "All light things are unstable.",
            "All unstable things are changing.",
            "All unstable things are kinetic. ",
            "A bird is not both heavy and still."
        ],
        "context_fol": [
            "\u2200x (Big(x) \u2295 Small(x))",
            "\u2200x (Big(x) \u2192 Heavy(x))",
            "\u2200x (Small(x) \u2192 Light(x))",
            "\u2200x (Heavy(x) \u2192 Still(x))",
            "\u2200x (Light(x) \u2192 Unstable(x))",
            "\u2200x (Unstable(x) \u2192 Changing(x))",
            "\u2200x (Unstable(x) \u2192 Kinetic(x))",
            "\u00ac(Heavy(bird) \u2227 Still(bird))"
        ],
        "question": "A bird is kinetic or changing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1433,
        "story_id": 486,
        "context": [
            "Everything is either big or small.",
            "All big things are heavy. ",
            "All small things are light. ",
            "All heavy things are still.",
            "All light things are unstable.",
            "All unstable things are changing.",
            "All unstable things are kinetic. ",
            "A bird is not both heavy and still."
        ],
        "context_fol": [
            "\u2200x (Big(x) \u2295 Small(x))",
            "\u2200x (Big(x) \u2192 Heavy(x))",
            "\u2200x (Small(x) \u2192 Light(x))",
            "\u2200x (Heavy(x) \u2192 Still(x))",
            "\u2200x (Light(x) \u2192 Unstable(x))",
            "\u2200x (Unstable(x) \u2192 Changing(x))",
            "\u2200x (Unstable(x) \u2192 Kinetic(x))",
            "\u00ac(Heavy(bird) \u2227 Still(bird))"
        ],
        "question": "A bird is either kinetic or changing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1434,
        "story_id": 486,
        "context": [
            "Everything is either big or small.",
            "All big things are heavy. ",
            "All small things are light. ",
            "All heavy things are still.",
            "All light things are unstable.",
            "All unstable things are changing.",
            "All unstable things are kinetic. ",
            "A bird is not both heavy and still."
        ],
        "context_fol": [
            "\u2200x (Big(x) \u2295 Small(x))",
            "\u2200x (Big(x) \u2192 Heavy(x))",
            "\u2200x (Small(x) \u2192 Light(x))",
            "\u2200x (Heavy(x) \u2192 Still(x))",
            "\u2200x (Light(x) \u2192 Unstable(x))",
            "\u2200x (Unstable(x) \u2192 Changing(x))",
            "\u2200x (Unstable(x) \u2192 Kinetic(x))",
            "\u00ac(Heavy(bird) \u2227 Still(bird))"
        ],
        "question": "If a bird is small or still, then the bird is either kinetic or changing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 288,
        "story_id": 95,
        "context": [
            "DI Ray is a police procedural television series.",
            "DI Ray was created and written by Maya Sondhi.",
            "DI Ray was produced by Jed Mercurio.",
            "Maya Sondhi and Jed Mercurio are both British."
        ],
        "context_fol": [
            "TelevisionSeries(diRay)",
            "Create(maya, diRay) \u2227 Write(maya, diRay)",
            "Produce(jed, diRay)",
            "British(maya) \u2227 British(jed) "
        ],
        "question": "DI Ray was created by a Brit.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 289,
        "story_id": 95,
        "context": [
            "DI Ray is a police procedural television series.",
            "DI Ray was created and written by Maya Sondhi.",
            "DI Ray was produced by Jed Mercurio.",
            "Maya Sondhi and Jed Mercurio are both British."
        ],
        "context_fol": [
            "TelevisionSeries(diRay)",
            "Create(maya, diRay) \u2227 Write(maya, diRay)",
            "Produce(jed, diRay)",
            "British(maya) \u2227 British(jed) "
        ],
        "question": "Some Brit produced a television series.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1347,
        "story_id": 465,
        "context": [
            "All men are human.",
            "All gentlemen are men.",
            "All lawyers are gentlemen.",
            "All women are human.",
            "No sheep are human.",
            "If Mike is not both a human and a sheep, then Mike is either a man or a human."
        ],
        "context_fol": [
            "\u2200x (Man(x) \u2192 Human(x))",
            "\u2200x (Gentleman(x) \u2192 Man(x))",
            "\u2200x (Lawyer(x) \u2192 Gentleman(x))",
            "\u2200x (Woman(x) \u2192 Human(x))",
            "\u2200x (Sheep(x) \u2192 \u00acHuman(x))",
            "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
        ],
        "question": "Mike is a woman.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1348,
        "story_id": 465,
        "context": [
            "All men are human.",
            "All gentlemen are men.",
            "All lawyers are gentlemen.",
            "All women are human.",
            "No sheep are human.",
            "If Mike is not both a human and a sheep, then Mike is either a man or a human."
        ],
        "context_fol": [
            "\u2200x (Man(x) \u2192 Human(x))",
            "\u2200x (Gentleman(x) \u2192 Man(x))",
            "\u2200x (Lawyer(x) \u2192 Gentleman(x))",
            "\u2200x (Woman(x) \u2192 Human(x))",
            "\u2200x (Sheep(x) \u2192 \u00acHuman(x))",
            "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
        ],
        "question": "If Mike is a gentleman or a lawyer, then Mike is neither a woman nor a lawyer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1349,
        "story_id": 465,
        "context": [
            "All men are human.",
            "All gentlemen are men.",
            "All lawyers are gentlemen.",
            "All women are human.",
            "No sheep are human.",
            "If Mike is not both a human and a sheep, then Mike is either a man or a human."
        ],
        "context_fol": [
            "\u2200x (Man(x) \u2192 Human(x))",
            "\u2200x (Gentleman(x) \u2192 Man(x))",
            "\u2200x (Lawyer(x) \u2192 Gentleman(x))",
            "\u2200x (Woman(x) \u2192 Human(x))",
            "\u2200x (Sheep(x) \u2192 \u00acHuman(x))",
            "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
        ],
        "question": "If Mike is not both a woman and a lawyer, then Mike is a lawyer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 839,
        "story_id": 326,
        "context": [
            "Some defenders are centerback.",
            "All defenders are soccer players.",
            "No soccer players are professional basketball players.",
            "All NBA players are professional basketball players.",
            "Stephen Curry is an NBA player."
        ],
        "context_fol": [
            "\u2203x (Defender(x) \u2227 Centerback(x))",
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "NBAPlayer(stephencurry)"
        ],
        "question": "Stephen Curry is a centerback.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 840,
        "story_id": 326,
        "context": [
            "Some defenders are centerback.",
            "All defenders are soccer players.",
            "No soccer players are professional basketball players.",
            "All NBA players are professional basketball players.",
            "Stephen Curry is an NBA player."
        ],
        "context_fol": [
            "\u2203x (Defender(x) \u2227 Centerback(x))",
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "NBAPlayer(stephencurry)"
        ],
        "question": "Stephen Curry is not a centerback and a defender.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 841,
        "story_id": 326,
        "context": [
            "Some defenders are centerback.",
            "All defenders are soccer players.",
            "No soccer players are professional basketball players.",
            "All NBA players are professional basketball players.",
            "Stephen Curry is an NBA player."
        ],
        "context_fol": [
            "\u2203x (Defender(x) \u2227 Centerback(x))",
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "NBAPlayer(stephencurry)"
        ],
        "question": "If Stephen Curry is not a centerback and a defender, then Stephen Curry is neither a soccer player nor a professional basketball player.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 540,
        "story_id": 186,
        "context": [
            "If a person doesn't have enough money to buy a product, then that person can't buy it.",
            "Monitors are products.",
            "4k monitors are more expensive than 1080 monitors and 2k monitors.",
            "John is a person.",
            "John doesn't have enough money to buy a 2k monitor."
        ],
        "context_fol": [
            "\u2200x \u2200y (Person(x) \u2227 Product(y) \u2227 \u00acHaveEnoughMoneyFor(x, y) \u2192 \u00acBuy(x, y))",
            "\u2200x (Monitor(x) \u2192 Product(x))",
            "\u2200x \u2200y \u2200z (Monitor(x) \u2227 Monitor(y) \u2227 Monitor(z) \u2227 FourK(x) \u2227 OneOEightO(y) \u2227 TwoK(z) \u2192 MoreExpensive(x, y) \u2227 MoreExpensive(x, z))",
            "Person(john)",
            "\u2200x (Monitor(x) \u2227 TwoK(x) \u2192 \u00acHaveEnoughMoneyFor(john, x))"
        ],
        "question": "John can not buy the 1080 monitor.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 541,
        "story_id": 186,
        "context": [
            "If a person doesn't have enough money to buy a product, then that person can't buy it.",
            "Monitors are products.",
            "4k monitors are more expensive than 1080 monitors and 2k monitors.",
            "John is a person.",
            "John doesn't have enough money to buy a 2k monitor."
        ],
        "context_fol": [
            "\u2200x \u2200y (Person(x) \u2227 Product(y) \u2227 \u00acHaveEnoughMoneyFor(x, y) \u2192 \u00acBuy(x, y))",
            "\u2200x (Monitor(x) \u2192 Product(x))",
            "\u2200x \u2200y \u2200z (Monitor(x) \u2227 Monitor(y) \u2227 Monitor(z) \u2227 FourK(x) \u2227 OneOEightO(y) \u2227 TwoK(z) \u2192 MoreExpensive(x, y) \u2227 MoreExpensive(x, z))",
            "Person(john)",
            "\u2200x (Monitor(x) \u2227 TwoK(x) \u2192 \u00acHaveEnoughMoneyFor(john, x))"
        ],
        "question": "John can not buy the 2k monitor.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 712,
        "story_id": 263,
        "context": [
            "All artificial satellites are important scientific achievements.",
            "Some artificial satellites are not U.S. inventions."
        ],
        "context_fol": [
            "\u2200x (ArtificialSatellite(x) \u2192 ImportantScientificAchievement(x))",
            "\u2203x (ArtificialSatellite(x) \u2227 \u00acUSInvention(x))"
        ],
        "question": "All important scientific achievements are U.S. inventions.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 706,
        "story_id": 257,
        "context": [
            "Some cats are not pets.",
            "All cats are mammals."
        ],
        "context_fol": [
            "\u2203x (Cat(x) \u2227 \u00acPet(x))",
            "\u2200x (Cat(x) \u2192 Mammal(x))"
        ],
        "question": "Some mammals are not pets.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 972,
        "story_id": 364,
        "context": [
            "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
            "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
            "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
            "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
            "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
            "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
        ],
        "context_fol": [
            "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))",
            "\u2200x (CoffeeShop(x) \u2228 Takeout(x))",
            "\u2200x (MakeFood(x) \u2192 Takeout(x))",
            "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))",
            "\u2200x (Busy(x) \u2192 MakeFood(x))",
            "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))"
        ],
        "question": "Sam is addicted to coffee and other caffeinated drinks.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 973,
        "story_id": 364,
        "context": [
            "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
            "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
            "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
            "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
            "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
            "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
        ],
        "context_fol": [
            "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))",
            "\u2200x (CoffeeShop(x) \u2228 Takeout(x))",
            "\u2200x (MakeFood(x) \u2192 Takeout(x))",
            "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))",
            "\u2200x (Busy(x) \u2192 MakeFood(x))",
            "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))"
        ],
        "question": "Sam owns at least one coffeemaker and one blender in her home.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 974,
        "story_id": 364,
        "context": [
            "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
            "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
            "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
            "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
            "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
            "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"
        ],
        "context_fol": [
            "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))",
            "\u2200x (CoffeeShop(x) \u2228 Takeout(x))",
            "\u2200x (MakeFood(x) \u2192 Takeout(x))",
            "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))",
            "\u2200x (Busy(x) \u2192 MakeFood(x))",
            "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))"
        ],
        "question": "Sam either owns at least one coffeemaker and one blender in her home or orders takeout at least once a day.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 842,
        "story_id": 327,
        "context": [
            "No professional basketball players are soccer players.",
            "All NBA players are professional basketball players.",
            "All defenders are soccer players.",
            "All centerbacks are defenders.",
            "Roger Federer is not an NBA player or a defender."
        ],
        "context_fol": [
            "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u2200x (Centerback(x) \u2192 Defender(x))",
            "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))"
        ],
        "question": "Roger Federer is a centerback.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 843,
        "story_id": 327,
        "context": [
            "No professional basketball players are soccer players.",
            "All NBA players are professional basketball players.",
            "All defenders are soccer players.",
            "All centerbacks are defenders.",
            "Roger Federer is not an NBA player or a defender."
        ],
        "context_fol": [
            "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u2200x (Centerback(x) \u2192 Defender(x))",
            "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))"
        ],
        "question": "Roger Federer is not a centerback.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 844,
        "story_id": 327,
        "context": [
            "No professional basketball players are soccer players.",
            "All NBA players are professional basketball players.",
            "All defenders are soccer players.",
            "All centerbacks are defenders.",
            "Roger Federer is not an NBA player or a defender."
        ],
        "context_fol": [
            "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u2200x (Centerback(x) \u2192 Defender(x))",
            "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))"
        ],
        "question": "Roger Federer is a soccer player.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1279,
        "story_id": 443,
        "context": [
            "Some teachers working at a pool are not nice.",
            "All teachers working at pools are pool managers.",
            "All pool managers are lifeguards.",
            "If someone is a lifeguard, then they work at a pool.",
            "Mary does not work at a pool."
        ],
        "context_fol": [
            "\u2203x (TeacherWorkingAtPool(x) \u2227 \u00acNice(x))",
            "\u2200x (TeacherWorkingAtPool(x) \u2192 PoolManager(x))",
            "\u2200x (PoolManager(x) \u2192 Lifeguard(x))",
            "\u2200x (Lifeguard(x) \u2192 WorkAtPool(x))",
            "\u00acWorkAtPool(mary))"
        ],
        "question": "Mary is nice.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1280,
        "story_id": 443,
        "context": [
            "Some teachers working at a pool are not nice.",
            "All teachers working at pools are pool managers.",
            "All pool managers are lifeguards.",
            "If someone is a lifeguard, then they work at a pool.",
            "Mary does not work at a pool."
        ],
        "context_fol": [
            "\u2203x (TeacherWorkingAtPool(x) \u2227 \u00acNice(x))",
            "\u2200x (TeacherWorkingAtPool(x) \u2192 PoolManager(x))",
            "\u2200x (PoolManager(x) \u2192 Lifeguard(x))",
            "\u2200x (Lifeguard(x) \u2192 WorkAtPool(x))",
            "\u00acWorkAtPool(mary))"
        ],
        "question": "Mary is not nice and is a teacher working at a pool.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1281,
        "story_id": 443,
        "context": [
            "Some teachers working at a pool are not nice.",
            "All teachers working at pools are pool managers.",
            "All pool managers are lifeguards.",
            "If someone is a lifeguard, then they work at a pool.",
            "Mary does not work at a pool."
        ],
        "context_fol": [
            "\u2203x (TeacherWorkingAtPool(x) \u2227 \u00acNice(x))",
            "\u2200x (TeacherWorkingAtPool(x) \u2192 PoolManager(x))",
            "\u2200x (PoolManager(x) \u2192 Lifeguard(x))",
            "\u2200x (Lifeguard(x) \u2192 WorkAtPool(x))",
            "\u00acWorkAtPool(mary))"
        ],
        "question": "Mary is nice and is a teacher working at a pool.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 751,
        "story_id": 302,
        "context": [
            "Not all art pieces require talent.",
            "Everything that requires talent requires practice."
        ],
        "context_fol": [
            "\u2203x (ArtPiece(x) \u2227 \u00acRequiresTalent(x))",
            "\u2200x (RequiresTalent(x) \u2192 RequiresPractice(x))"
        ],
        "question": "There exist art pieces that do not require practice.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 268,
        "story_id": 88,
        "context": [
            "Bernarda Bryson Shahn was a painter and lithographer.",
            "Bernarda Bryson Shahn was born in Athens, Ohio. ",
            "Bernarda Bryson Shahn was married to Ben Shahn.",
            "People born in Athens, Ohio are Americans."
        ],
        "context_fol": [
            "Painter(bernardaBrysonShahn) \u2227 Lithographer(bernardaBrysonShahn) ",
            "BornIn(bernardaBrysonShahn, athensOhio)",
            "MarriedTo(bernardaBrysonShahn, benShahn)",
            "\u2200x (BornIn(x, athensOhio) \u2192 American(x))"
        ],
        "question": "Bernarda Bryson Shahn was born in Greece.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 269,
        "story_id": 88,
        "context": [
            "Bernarda Bryson Shahn was a painter and lithographer.",
            "Bernarda Bryson Shahn was born in Athens, Ohio. ",
            "Bernarda Bryson Shahn was married to Ben Shahn.",
            "People born in Athens, Ohio are Americans."
        ],
        "context_fol": [
            "Painter(bernardaBrysonShahn) \u2227 Lithographer(bernardaBrysonShahn) ",
            "BornIn(bernardaBrysonShahn, athensOhio)",
            "MarriedTo(bernardaBrysonShahn, benShahn)",
            "\u2200x (BornIn(x, athensOhio) \u2192 American(x))"
        ],
        "question": "Bernarda Bryson Shahn was American.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 270,
        "story_id": 88,
        "context": [
            "Bernarda Bryson Shahn was a painter and lithographer.",
            "Bernarda Bryson Shahn was born in Athens, Ohio. ",
            "Bernarda Bryson Shahn was married to Ben Shahn.",
            "People born in Athens, Ohio are Americans."
        ],
        "context_fol": [
            "Painter(bernardaBrysonShahn) \u2227 Lithographer(bernardaBrysonShahn) ",
            "BornIn(bernardaBrysonShahn, athensOhio)",
            "MarriedTo(bernardaBrysonShahn, benShahn)",
            "\u2200x (BornIn(x, athensOhio) \u2192 American(x))"
        ],
        "question": "Bernarda Bryson Shahn had been divorced once.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 987,
        "story_id": 369,
        "context": [
            "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
            "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
            "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
            "If people live with at least one roommate then they do not own at least one pet.",
            "All people who own at least one pet live with at least one roommate.",
            "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
        ],
        "context_fol": [
            "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
            "\u2200x (Tech(x) \u2192 Iphone(x))",
            "\u2200x (House(x) \u2228 Apartment(x))",
            "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
            "\u2200x (Apartment(x) \u2192 Roommate(x))",
            "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
        ],
        "question": "Emma lives with at least one roommate.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 988,
        "story_id": 369,
        "context": [
            "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
            "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
            "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
            "If people live with at least one roommate then they do not own at least one pet.",
            "All people who own at least one pet live with at least one roommate.",
            "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "
        ],
        "context_fol": [
            "\u2200x (Iphone(x) \u2192 \u00acHouse(x))",
            "\u2200x (Tech(x) \u2192 Iphone(x))",
            "\u2200x (House(x) \u2228 Apartment(x))",
            "\u2200x (Roommate(x) \u2192 \u00acPet(x))",
            "\u2200x (Apartment(x) \u2192 Roommate(x))",
            "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
        ],
        "question": "Emma enjoys reading about tech specs and keeping up to date on the latest technology.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1303,
        "story_id": 451,
        "context": [
            "If you are on the payroll, then you are being paid by the school.",
            "If someone has a job at a school, then they are on the payroll.",
            "All faculty members have a job at a school.",
            "One can either be a faculty member or a teacher.",
            "Every teacher has students.",
            "If Nancy is a teacher, then they are on the payroll.",
            "If Nancy is not a teacher, then they are not paid by the school."
        ],
        "context_fol": [
            "\u2200x (OnPayroll(x) \u2192 PaidBySchool(x))",
            "\u2200x (JobAtSchool(x) \u2192 OnPayroll(x))",
            "\u2200x (FacultyMember(x) \u2192 JobAtSchool(x))",
            "\u2200x (FacultyMember(x) \u2228 Teacher(x))",
            "\u2200x (Teacher(x) \u2192 HasStudents(x))",
            "Teacher(nancy) \u2192 OnPayroll(nancy)",
            "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)"
        ],
        "question": "Nancy is a faculty member.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1304,
        "story_id": 451,
        "context": [
            "If you are on the payroll, then you are being paid by the school.",
            "If someone has a job at a school, then they are on the payroll.",
            "All faculty members have a job at a school.",
            "One can either be a faculty member or a teacher.",
            "Every teacher has students.",
            "If Nancy is a teacher, then they are on the payroll.",
            "If Nancy is not a teacher, then they are not paid by the school."
        ],
        "context_fol": [
            "\u2200x (OnPayroll(x) \u2192 PaidBySchool(x))",
            "\u2200x (JobAtSchool(x) \u2192 OnPayroll(x))",
            "\u2200x (FacultyMember(x) \u2192 JobAtSchool(x))",
            "\u2200x (FacultyMember(x) \u2228 Teacher(x))",
            "\u2200x (Teacher(x) \u2192 HasStudents(x))",
            "Teacher(nancy) \u2192 OnPayroll(nancy)",
            "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)"
        ],
        "question": "Nancy is paid by the school and has students.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1305,
        "story_id": 451,
        "context": [
            "If you are on the payroll, then you are being paid by the school.",
            "If someone has a job at a school, then they are on the payroll.",
            "All faculty members have a job at a school.",
            "One can either be a faculty member or a teacher.",
            "Every teacher has students.",
            "If Nancy is a teacher, then they are on the payroll.",
            "If Nancy is not a teacher, then they are not paid by the school."
        ],
        "context_fol": [
            "\u2200x (OnPayroll(x) \u2192 PaidBySchool(x))",
            "\u2200x (JobAtSchool(x) \u2192 OnPayroll(x))",
            "\u2200x (FacultyMember(x) \u2192 JobAtSchool(x))",
            "\u2200x (FacultyMember(x) \u2228 Teacher(x))",
            "\u2200x (Teacher(x) \u2192 HasStudents(x))",
            "Teacher(nancy) \u2192 OnPayroll(nancy)",
            "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)"
        ],
        "question": "Nancy is not paid by the school and has students.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 696,
        "story_id": 248,
        "context": [
            "Kangaroo is an animal.",
            "No Kangaroos live in Germany.",
            "If Jane saves enough money for the summer, she will fly to Germany.",
            "If Jane flies to Germany, she will go to the Berlin Zoo.",
            "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."
        ],
        "context_fol": [
            "\u2200x (Kangaroo(x) \u2192 Animal(x))",
            "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))",
            "EnoughMoney(jane) \u2192 FlyTo(jane, germany)",
            "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ",
            "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 Animal(y) \u2192 MaySee(y, x, berlinzoo))"
        ],
        "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 615,
        "story_id": 214,
        "context": [
            "If a class has prerequisites the student must take the prerequisites to take the class.",
            "If a class has no prerequisites, then the student can take the class",
            "CPSC 201 and CPSC 223 are prerequisites for CPSC 323.",
            "Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.",
            "Intro Geology has no prerequisites."
        ],
        "context_fol": [
            "\u2200x \u2200y ((Prereq(x, y) \u2227 Taken(x)) \u2194 CanTake(y))",
            "\u2200x \u2200y (\u00acPrereq(x, y) \u2192 CanTake(y))",
            "Prereq(cpsc201, cpsc323) \u2227 Prereq(cpsc223, cpsc323)",
            "(Prereq(intromicro, intermediatemicro) \u2227 Taken(intromicro)) \u2192 CanTake(intermediatemicro)",
            "\u2200x (\u00acPrereq(x, introgeology))"
        ],
        "question": "CPSC 201 has no prerequisites.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 616,
        "story_id": 214,
        "context": [
            "If a class has prerequisites the student must take the prerequisites to take the class.",
            "If a class has no prerequisites, then the student can take the class",
            "CPSC 201 and CPSC 223 are prerequisites for CPSC 323.",
            "Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.",
            "Intro Geology has no prerequisites."
        ],
        "context_fol": [
            "\u2200x \u2200y ((Prereq(x, y) \u2227 Taken(x)) \u2194 CanTake(y))",
            "\u2200x \u2200y (\u00acPrereq(x, y) \u2192 CanTake(y))",
            "Prereq(cpsc201, cpsc323) \u2227 Prereq(cpsc223, cpsc323)",
            "(Prereq(intromicro, intermediatemicro) \u2227 Taken(intromicro)) \u2192 CanTake(intermediatemicro)",
            "\u2200x (\u00acPrereq(x, introgeology))"
        ],
        "question": "If a student took CPSC 201 but did not take CPSC 223, they can take CPSC 323.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 617,
        "story_id": 214,
        "context": [
            "If a class has prerequisites the student must take the prerequisites to take the class.",
            "If a class has no prerequisites, then the student can take the class",
            "CPSC 201 and CPSC 223 are prerequisites for CPSC 323.",
            "Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.",
            "Intro Geology has no prerequisites."
        ],
        "context_fol": [
            "\u2200x \u2200y ((Prereq(x, y) \u2227 Taken(x)) \u2194 CanTake(y))",
            "\u2200x \u2200y (\u00acPrereq(x, y) \u2192 CanTake(y))",
            "Prereq(cpsc201, cpsc323) \u2227 Prereq(cpsc223, cpsc323)",
            "(Prereq(intromicro, intermediatemicro) \u2227 Taken(intromicro)) \u2192 CanTake(intermediatemicro)",
            "\u2200x (\u00acPrereq(x, introgeology))"
        ],
        "question": "A student cannot take Intro Geology.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 618,
        "story_id": 214,
        "context": [
            "If a class has prerequisites the student must take the prerequisites to take the class.",
            "If a class has no prerequisites, then the student can take the class",
            "CPSC 201 and CPSC 223 are prerequisites for CPSC 323.",
            "Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.",
            "Intro Geology has no prerequisites."
        ],
        "context_fol": [
            "\u2200x \u2200y ((Prereq(x, y) \u2227 Taken(x)) \u2194 CanTake(y))",
            "\u2200x \u2200y (\u00acPrereq(x, y) \u2192 CanTake(y))",
            "Prereq(cpsc201, cpsc323) \u2227 Prereq(cpsc223, cpsc323)",
            "(Prereq(intromicro, intermediatemicro) \u2227 Taken(intromicro)) \u2192 CanTake(intermediatemicro)",
            "\u2200x (\u00acPrereq(x, introgeology))"
        ],
        "question": "Intermediate Microeconomics has one prerequisite.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 108,
        "story_id": 37,
        "context": [
            "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.",
            "The Harry Potter series consists of 7 distinct works.",
            "The Chronicles of Narnia consists of 7 distinct works."
        ],
        "context_fol": [
            "\u2200x (SevenDistinctWorks(x) \u2192 Heptalogy(x))",
            "SevenDistinctWorks(harryPotter)",
            "SevenDistinctWorks(chroniclesofNarnia)"
        ],
        "question": "The Harry Potter series of books is a heptalogy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 109,
        "story_id": 37,
        "context": [
            "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.",
            "The Harry Potter series consists of 7 distinct works.",
            "The Chronicles of Narnia consists of 7 distinct works."
        ],
        "context_fol": [
            "\u2200x (SevenDistinctWorks(x) \u2192 Heptalogy(x))",
            "SevenDistinctWorks(harryPotter)",
            "SevenDistinctWorks(chroniclesofNarnia)"
        ],
        "question": "The Chronicles of Narnia series of books is not a heptalogy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 110,
        "story_id": 37,
        "context": [
            "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.",
            "The Harry Potter series consists of 7 distinct works.",
            "The Chronicles of Narnia consists of 7 distinct works."
        ],
        "context_fol": [
            "\u2200x (SevenDistinctWorks(x) \u2192 Heptalogy(x))",
            "SevenDistinctWorks(harryPotter)",
            "SevenDistinctWorks(chroniclesofNarnia)"
        ],
        "question": "The Lord of Rings is a heptalogy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1022,
        "story_id": 381,
        "context": [
            "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.",
            "If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.",
            "People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.",
            "If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.",
            "If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.",
            "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing."
        ],
        "context_fol": [
            "\u2200x (RenaissanceFair(x) \u2192 DressingUp(x))",
            "\u2200x (HistoryRenaissance(x) \u2192 RenaissanceFair(x))",
            "\u2200x (HistoryRenaissance(x) \u2228 NotAcademics(x))",
            "\u2200x (Industry(x) \u2192 NotAcademics(x))",
            "\u2200x (HistoryProf(x) \u2192 \u00acNotAcademics(x))",
            "\u00acIndustry(clyde) \u2192 \u00ac(Industry(clyde) \u2228 DressingUp(clyde))"
        ],
        "question": "Clyde attends Renaissance fairs regularly.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1023,
        "story_id": 381,
        "context": [
            "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.",
            "If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.",
            "People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.",
            "If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.",
            "If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.",
            "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing."
        ],
        "context_fol": [
            "\u2200x (RenaissanceFair(x) \u2192 DressingUp(x))",
            "\u2200x (HistoryRenaissance(x) \u2192 RenaissanceFair(x))",
            "\u2200x (HistoryRenaissance(x) \u2228 NotAcademics(x))",
            "\u2200x (Industry(x) \u2192 NotAcademics(x))",
            "\u2200x (HistoryProf(x) \u2192 \u00acNotAcademics(x))",
            "\u00acIndustry(clyde) \u2192 \u00ac(Industry(clyde) \u2228 DressingUp(clyde))"
        ],
        "question": "Clyde is a history professor who is passionate about his job and subject.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1024,
        "story_id": 381,
        "context": [
            "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.",
            "If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.",
            "People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.",
            "If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.",
            "If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.",
            "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing."
        ],
        "context_fol": [
            "\u2200x (RenaissanceFair(x) \u2192 DressingUp(x))",
            "\u2200x (HistoryRenaissance(x) \u2192 RenaissanceFair(x))",
            "\u2200x (HistoryRenaissance(x) \u2228 NotAcademics(x))",
            "\u2200x (Industry(x) \u2192 NotAcademics(x))",
            "\u2200x (HistoryProf(x) \u2192 \u00acNotAcademics(x))",
            "\u00acIndustry(clyde) \u2192 \u00ac(Industry(clyde) \u2228 DressingUp(clyde))"
        ],
        "question": "Clyde is a history professor who is passionate about his job and subject, or is not a nostalgic academic who enjoys learning.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 719,
        "story_id": 270,
        "context": [
            "No sports cars are vehicles intended to be driven at moderate speeds.",
            "All automobiles designed for family use are vehicles intended to be driven at moderate speeds."
        ],
        "context_fol": [
            "\u2200x (SportsCar(x) \u2192 \u00acIntendedToBeDrivenAtModerateSpeeds(x))",
            "\u2200x (ForFamilyUse(x) \u2192 IntendedToBeDrivenAtModerateSpeeds(x))"
        ],
        "question": "No sports cars are automobiles designed for family use.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 949,
        "story_id": 356,
        "context": [
            "If people work well in teams in their workplace, then they get along with all their colleagues at their work.",
            "If people come to work every day with a positive attitude, then they work well in teams in their workplace.",
            "People either come into work every day with a positive attitude or are always tired every morning.",
            "If people get many promotions from their boss at work, then they receive negative feedback from teams at work.",
            "Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning."
        ],
        "context_fol": [
            "\u2200x (WorkTeams(x) \u2192 Colleagues(x))",
            "\u2200x (PositiveAttitude(x) \u2192 WorkTeams(x))",
            "\u2200x (PositiveAttitude(x) \u2295 Tired(x)) \u2227 (\u2200x (Tired(x) \u2192 BossPromotions(x)))",
            "\u2200x (BossPromotions(x) \u2192 \u00acNegativeFeedback(x))",
            "(WorkTeams(kat) \u2227 Tired(kat)) \u2228 \u00acWorkTeams(kat) \u2227 \u00acTired(kat))"
        ],
        "question": "Kat is a person who comes to work every day with a positive attitude.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 950,
        "story_id": 356,
        "context": [
            "If people work well in teams in their workplace, then they get along with all their colleagues at their work.",
            "If people come to work every day with a positive attitude, then they work well in teams in their workplace.",
            "People either come into work every day with a positive attitude or are always tired every morning.",
            "If people get many promotions from their boss at work, then they receive negative feedback from teams at work.",
            "Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning."
        ],
        "context_fol": [
            "\u2200x (WorkTeams(x) \u2192 Colleagues(x))",
            "\u2200x (PositiveAttitude(x) \u2192 WorkTeams(x))",
            "\u2200x (PositiveAttitude(x) \u2295 Tired(x)) \u2227 (\u2200x (Tired(x) \u2192 BossPromotions(x)))",
            "\u2200x (BossPromotions(x) \u2192 \u00acNegativeFeedback(x))",
            "(WorkTeams(kat) \u2227 Tired(kat)) \u2228 \u00acWorkTeams(kat) \u2227 \u00acTired(kat))"
        ],
        "question": "Kat gets along with her colleagues at her work and receives negative feedback from teams at her work.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 951,
        "story_id": 356,
        "context": [
            "If people work well in teams in their workplace, then they get along with all their colleagues at their work.",
            "If people come to work every day with a positive attitude, then they work well in teams in their workplace.",
            "People either come into work every day with a positive attitude or are always tired every morning.",
            "If people get many promotions from their boss at work, then they receive negative feedback from teams at work.",
            "Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning."
        ],
        "context_fol": [
            "\u2200x (WorkTeams(x) \u2192 Colleagues(x))",
            "\u2200x (PositiveAttitude(x) \u2192 WorkTeams(x))",
            "\u2200x (PositiveAttitude(x) \u2295 Tired(x)) \u2227 (\u2200x (Tired(x) \u2192 BossPromotions(x)))",
            "\u2200x (BossPromotions(x) \u2192 \u00acNegativeFeedback(x))",
            "(WorkTeams(kat) \u2227 Tired(kat)) \u2228 \u00acWorkTeams(kat) \u2227 \u00acTired(kat))"
        ],
        "question": "Kat either gets along with her colleagues at her work or receives negative feedback from teams at her work.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 725,
        "story_id": 276,
        "context": [
            "Drishti is open-source.",
            "Open-source software is free to modify."
        ],
        "context_fol": [
            "OpenSource(drishti)",
            "\u2200x (OpenSource(x) \u2192 ModifyFree(x))"
        ],
        "question": "Drishti is free to modify.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 464,
        "story_id": 161,
        "context": [
            "There are five grades including A+, A, B+, B, and C in English.",
            "If a student gets A+ in English, then his score is greater than 95.",
            "If a student gets A in English, then his score is in the range of 90-95.",
            "Zhang got an A in English.",
            "Wang's English score is better than Zhang's.",
            "Wu's English score is lower than 90."
        ],
        "context_fol": [
            "Grade(a+) \u2228 Grade(a) \u2228 Grade(b+) \u2228 Grade(b) \u2228 Grade(c)",
            "\u2200x (GetGrade(x, a+) \u2192 GreaterThan95(x))",
            "\u2200x (GetGrade(x, a) \u2192 Range90to95(x))",
            "GetGrade(zhang, a)",
            "Better(wang, zhang)",
            "LowerThan90(wu)"
        ],
        "question": "Zhang's English score is lower than 95.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 465,
        "story_id": 161,
        "context": [
            "There are five grades including A+, A, B+, B, and C in English.",
            "If a student gets A+ in English, then his score is greater than 95.",
            "If a student gets A in English, then his score is in the range of 90-95.",
            "Zhang got an A in English.",
            "Wang's English score is better than Zhang's.",
            "Wu's English score is lower than 90."
        ],
        "context_fol": [
            "Grade(a+) \u2228 Grade(a) \u2228 Grade(b+) \u2228 Grade(b) \u2228 Grade(c)",
            "\u2200x (GetGrade(x, a+) \u2192 GreaterThan95(x))",
            "\u2200x (GetGrade(x, a) \u2192 Range90to95(x))",
            "GetGrade(zhang, a)",
            "Better(wang, zhang)",
            "LowerThan90(wu)"
        ],
        "question": "Wang got an A+ in English.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 466,
        "story_id": 161,
        "context": [
            "There are five grades including A+, A, B+, B, and C in English.",
            "If a student gets A+ in English, then his score is greater than 95.",
            "If a student gets A in English, then his score is in the range of 90-95.",
            "Zhang got an A in English.",
            "Wang's English score is better than Zhang's.",
            "Wu's English score is lower than 90."
        ],
        "context_fol": [
            "Grade(a+) \u2228 Grade(a) \u2228 Grade(b+) \u2228 Grade(b) \u2228 Grade(c)",
            "\u2200x (GetGrade(x, a+) \u2192 GreaterThan95(x))",
            "\u2200x (GetGrade(x, a) \u2192 Range90to95(x))",
            "GetGrade(zhang, a)",
            "Better(wang, zhang)",
            "LowerThan90(wu)"
        ],
        "question": "Wu does not get an A or A+ in English.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 621,
        "story_id": 216,
        "context": [
            "Olivia doesn't prefer warm temperature during the day.",
            "When Olivia sleeps, she prefers cool temperature.",
            "Olivia sleeps during the night.",
            "Olivia works during the day.",
            "Olivia either works or sleeps.",
            "The time is either the day or the night.",
            "Olivia either prefers warm temperature or prefers cool temperature."
        ],
        "context_fol": [
            "\u2200x (Day(x) \u2192 \u00acPrefersWarmAt(olivia, x))",
            "\u2200x (SleepingDuring(olivia, x) \u2192 PrefersCoolAt(olivia, x))",
            "\u2200x (SleepingDuring(olivia, x) \u2192 Night(x))",
            "\u2200x (WorkingDuring(olivia, x) \u2192 Day(x))",
            "\u2200x (WorkingDuring(olivia, x) \u2228 SleepingDuring(olivia, x))",
            "\u2200x (Day(x) \u2228 Night(x))",
            "\u2200x (PrefersWarmAt(olivia, x) \u2228 PrefersCoolAt(olivia, x))"
        ],
        "question": "At all times, Olivia prefers cool temperature.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 596,
        "story_id": 207,
        "context": [
            "Taylor Swift gives a commencement speech in New York University in 2022.",
            "Both Columbia University and New York University are located in Manhattan.",
            "Taylor Swift has received three Grammy Album of the Year Awards.",
            "Columbia University is one of the Ivy League schools."
        ],
        "context_fol": [
            "Speech(taylorSwift, nyc)",
            "Manhattan(columbiaUniversity) \u2227 Manhattan(nyc)",
            "HaveAlbum(taylorSwift)",
            "IvyLeague(columbiaUniversity)"
        ],
        "question": "Taylor Swift delivers a commencement speech in Manhattan.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 597,
        "story_id": 207,
        "context": [
            "Taylor Swift gives a commencement speech in New York University in 2022.",
            "Both Columbia University and New York University are located in Manhattan.",
            "Taylor Swift has received three Grammy Album of the Year Awards.",
            "Columbia University is one of the Ivy League schools."
        ],
        "context_fol": [
            "Speech(taylorSwift, nyc)",
            "Manhattan(columbiaUniversity) \u2227 Manhattan(nyc)",
            "HaveAlbum(taylorSwift)",
            "IvyLeague(columbiaUniversity)"
        ],
        "question": "The commencement speaker of NYU does not have any album.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1204,
        "story_id": 424,
        "context": [
            "Customers either choose Plan A or Plan B.",
            "All who choose Plan B are rewarded with a $30 gift card. ",
            "There are no customers who do not choose any plans. ",
            "No customers rewarded a $30 gift card are older than 80.",
            "Customers are either older than 80 or are currently studying at school. ",
            "James is not a customer who is currently studying at school. "
        ],
        "context_fol": [
            "\u2200x (PlanA(x) \u2228 PlanB(x))",
            "\u2200x (PlanB(x) \u2192 Award(x))",
            "\u2200x (\u00acNoPlan(x))",
            "\u2200x (Award(x) \u2192 \u00acOlderThan80(x))",
            "\u2200x (OlderThan80(x) \u2228 StudyAtSchool(x))",
            "\u00acStudyAtSchool(james)"
        ],
        "question": "James is a customer who does not choose any plans.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1205,
        "story_id": 424,
        "context": [
            "Customers either choose Plan A or Plan B.",
            "All who choose Plan B are rewarded with a $30 gift card. ",
            "There are no customers who do not choose any plans. ",
            "No customers rewarded a $30 gift card are older than 80.",
            "Customers are either older than 80 or are currently studying at school. ",
            "James is not a customer who is currently studying at school. "
        ],
        "context_fol": [
            "\u2200x (PlanA(x) \u2228 PlanB(x))",
            "\u2200x (PlanB(x) \u2192 Award(x))",
            "\u2200x (\u00acNoPlan(x))",
            "\u2200x (Award(x) \u2192 \u00acOlderThan80(x))",
            "\u2200x (OlderThan80(x) \u2228 StudyAtSchool(x))",
            "\u00acStudyAtSchool(james)"
        ],
        "question": "James is a customer who chooses Plan A or does not choose any plans.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1206,
        "story_id": 424,
        "context": [
            "Customers either choose Plan A or Plan B.",
            "All who choose Plan B are rewarded with a $30 gift card. ",
            "There are no customers who do not choose any plans. ",
            "No customers rewarded a $30 gift card are older than 80.",
            "Customers are either older than 80 or are currently studying at school. ",
            "James is not a customer who is currently studying at school. "
        ],
        "context_fol": [
            "\u2200x (PlanA(x) \u2228 PlanB(x))",
            "\u2200x (PlanB(x) \u2192 Award(x))",
            "\u2200x (\u00acNoPlan(x))",
            "\u2200x (Award(x) \u2192 \u00acOlderThan80(x))",
            "\u2200x (OlderThan80(x) \u2228 StudyAtSchool(x))",
            "\u00acStudyAtSchool(james)"
        ],
        "question": "Suppose James is a customer who chooses Plan A or does not choose any plans, then he is either rewarded a $30 gift card or chooses Plan B.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 500,
        "story_id": 173,
        "context": [
            "Detroit City is a horse.",
            "Some horses are racehorses.",
            "If a horse falls during a race, then it dies.",
            "Detroit City fell during a race.",
            "A horse is a racehorse if it is in a race."
        ],
        "context_fol": [
            "Horse(detroitcity)",
            "\u2203x (Horse(x) \u2227 Racehorse(x))",
            "\u2200x (Horse(x) \u2227 Racing(x) \u2227 Falls(x) \u2192 Dead(x))",
            "Racing(detroitcity) \u2227 Falls(detroitcity)",
            "\u2200x (Horse(x) \u2227 Racing(x) \u2192 Racehorse(x))"
        ],
        "question": "Detroit City has been in multiple races.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 501,
        "story_id": 173,
        "context": [
            "Detroit City is a horse.",
            "Some horses are racehorses.",
            "If a horse falls during a race, then it dies.",
            "Detroit City fell during a race.",
            "A horse is a racehorse if it is in a race."
        ],
        "context_fol": [
            "Horse(detroitcity)",
            "\u2203x (Horse(x) \u2227 Racehorse(x))",
            "\u2200x (Horse(x) \u2227 Racing(x) \u2227 Falls(x) \u2192 Dead(x))",
            "Racing(detroitcity) \u2227 Falls(detroitcity)",
            "\u2200x (Horse(x) \u2227 Racing(x) \u2192 Racehorse(x))"
        ],
        "question": "Detroit City is dead.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 502,
        "story_id": 173,
        "context": [
            "Detroit City is a horse.",
            "Some horses are racehorses.",
            "If a horse falls during a race, then it dies.",
            "Detroit City fell during a race.",
            "A horse is a racehorse if it is in a race."
        ],
        "context_fol": [
            "Horse(detroitcity)",
            "\u2203x (Horse(x) \u2227 Racehorse(x))",
            "\u2200x (Horse(x) \u2227 Racing(x) \u2227 Falls(x) \u2192 Dead(x))",
            "Racing(detroitcity) \u2227 Falls(detroitcity)",
            "\u2200x (Horse(x) \u2227 Racing(x) \u2192 Racehorse(x))"
        ],
        "question": "Detroit City is a racehorse.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 340,
        "story_id": 112,
        "context": [
            "Frederick Monhoff was an architect, artist, and illustrator.",
            "Frederick Monhoff was an American.",
            "An artist is good at painting or music.",
            "All Americans speak English."
        ],
        "context_fol": [
            "Architect(monhoff) \u2227 Artist(monhoff) \u2227 Illustrator(monhoff)",
            "American(monhoff)",
            "\u2200x (Artist(x) \u2192 GoodAt(x, painting) \u2228 GoodAt(x, music))",
            "\u2200x (American(x) \u2192 Speak(x, english))"
        ],
        "question": "Frederick Monhoff is good at music.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 341,
        "story_id": 112,
        "context": [
            "Frederick Monhoff was an architect, artist, and illustrator.",
            "Frederick Monhoff was an American.",
            "An artist is good at painting or music.",
            "All Americans speak English."
        ],
        "context_fol": [
            "Architect(monhoff) \u2227 Artist(monhoff) \u2227 Illustrator(monhoff)",
            "American(monhoff)",
            "\u2200x (Artist(x) \u2192 GoodAt(x, painting) \u2228 GoodAt(x, music))",
            "\u2200x (American(x) \u2192 Speak(x, english))"
        ],
        "question": "There is no illustrator who speaks English.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 51,
        "story_id": 18,
        "context": [
            "Miroslav Fiedler was a Czech mathematician.",
            "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
            "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
            "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."
        ],
        "context_fol": [
            "Czech(miroslavfiedler) \u2227 Mathematician(miroslavfiedler)",
            "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
            "HonoredBy(miroslavfiedler, fiedlerEigenvalue)",
            "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"
        ],
        "question": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 52,
        "story_id": 18,
        "context": [
            "Miroslav Fiedler was a Czech mathematician.",
            "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
            "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
            "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."
        ],
        "context_fol": [
            "Czech(miroslavfiedler) \u2227 Mathematician(miroslavfiedler)",
            "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
            "HonoredBy(miroslavfiedler, fiedlerEigenvalue)",
            "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"
        ],
        "question": "Miroslav Fiedler was a French mathematician.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 53,
        "story_id": 18,
        "context": [
            "Miroslav Fiedler was a Czech mathematician.",
            "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
            "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
            "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."
        ],
        "context_fol": [
            "Czech(miroslavfiedler) \u2227 Mathematician(miroslavfiedler)",
            "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
            "HonoredBy(miroslavfiedler, fiedlerEigenvalue)",
            "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"
        ],
        "question": "A Czech mathematician is known for his contributions to linear algebra and graph theory.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 446,
        "story_id": 153,
        "context": [
            "A laptop is a computer.",
            "You can play games on a computer.",
            "A phone is not a computer."
        ],
        "context_fol": [
            "\u2200x (Laptop(x) \u2192 Computer(x))",
            "\u2200x (Computer(x) \u2192 CanPlayGames(x))",
            "\u2200x (Phone(x) \u2192 \u00acComputer(x))",
            ""
        ],
        "question": "You can play games on a laptop.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 447,
        "story_id": 153,
        "context": [
            "A laptop is a computer.",
            "You can play games on a computer.",
            "A phone is not a computer."
        ],
        "context_fol": [
            "\u2200x (Laptop(x) \u2192 Computer(x))",
            "\u2200x (Computer(x) \u2192 CanPlayGames(x))",
            "\u2200x (Phone(x) \u2192 \u00acComputer(x))",
            ""
        ],
        "question": "You can not play games on a phone.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 29,
        "story_id": 11,
        "context": [
            "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.",
            "Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.",
            "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.",
            "Katherin Hafer married Walter Folger Brown."
        ],
        "context_fol": [
            "AmericanPolitician(walterbrown) \u2227 Lawyer(walterbrown) \u2227 ServedAs(walterbrown, postamastergeneral)",
            "Graduated(walterbrown, harvard) \u2227 GraduatedWith(walterbrown, bachelorsofart)",
            "In(walterbrown, toledo) \u2227 In(walterbrownfather, toledo) \u2227 PracticedLawTogether(walterbrownfather, walterbrown)",
            "Married(ketherinhafer, walterbrown)"
        ],
        "question": "Walter Folger Brown graduated with a Bachelors of Arts.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 30,
        "story_id": 11,
        "context": [
            "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.",
            "Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.",
            "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.",
            "Katherin Hafer married Walter Folger Brown."
        ],
        "context_fol": [
            "AmericanPolitician(walterbrown) \u2227 Lawyer(walterbrown) \u2227 ServedAs(walterbrown, postamastergeneral)",
            "Graduated(walterbrown, harvard) \u2227 GraduatedWith(walterbrown, bachelorsofart)",
            "In(walterbrown, toledo) \u2227 In(walterbrownfather, toledo) \u2227 PracticedLawTogether(walterbrownfather, walterbrown)",
            "Married(ketherinhafer, walterbrown)"
        ],
        "question": "Walter Folger Brown's father was in Toledo.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 31,
        "story_id": 11,
        "context": [
            "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.",
            "Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.",
            "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.",
            "Katherin Hafer married Walter Folger Brown."
        ],
        "context_fol": [
            "AmericanPolitician(walterbrown) \u2227 Lawyer(walterbrown) \u2227 ServedAs(walterbrown, postamastergeneral)",
            "Graduated(walterbrown, harvard) \u2227 GraduatedWith(walterbrown, bachelorsofart)",
            "In(walterbrown, toledo) \u2227 In(walterbrownfather, toledo) \u2227 PracticedLawTogether(walterbrownfather, walterbrown)",
            "Married(ketherinhafer, walterbrown)"
        ],
        "question": "Walter Folger Brown was not in Toledo.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1152,
        "story_id": 410,
        "context": [
            "All products shipped from China are made in China. ",
            "All products sold in JD are shipped from China. ",
            "All products commonly used in China are sold in JD.",
            "All products favored by young people are commonly used in China. ",
            "MacBook is not made in China and is not commonly used in China."
        ],
        "context_fol": [
            "\u2200x (ShipChina(x) \u2192 MadeInChina(x))",
            "\u2200x (SoldJD(x) \u2192 ShipChina(x))",
            "\u2200x (CommonlyUsedChina(x) \u2192 SoldJD(x))",
            "\u2200x (FavoredByYoungPeople(x) \u2192 CommonlyUsedChina(x))",
            "\u00ac(MadeInChina(macbook) \u2227 CommonlyUsedChina(macbook))"
        ],
        "question": "The MacBook is favored by young people.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1153,
        "story_id": 410,
        "context": [
            "All products shipped from China are made in China. ",
            "All products sold in JD are shipped from China. ",
            "All products commonly used in China are sold in JD.",
            "All products favored by young people are commonly used in China. ",
            "MacBook is not made in China and is not commonly used in China."
        ],
        "context_fol": [
            "\u2200x (ShipChina(x) \u2192 MadeInChina(x))",
            "\u2200x (SoldJD(x) \u2192 ShipChina(x))",
            "\u2200x (CommonlyUsedChina(x) \u2192 SoldJD(x))",
            "\u2200x (FavoredByYoungPeople(x) \u2192 CommonlyUsedChina(x))",
            "\u00ac(MadeInChina(macbook) \u2227 CommonlyUsedChina(macbook))"
        ],
        "question": "The MacBook is made in China.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1154,
        "story_id": 410,
        "context": [
            "All products shipped from China are made in China. ",
            "All products sold in JD are shipped from China. ",
            "All products commonly used in China are sold in JD.",
            "All products favored by young people are commonly used in China. ",
            "MacBook is not made in China and is not commonly used in China."
        ],
        "context_fol": [
            "\u2200x (ShipChina(x) \u2192 MadeInChina(x))",
            "\u2200x (SoldJD(x) \u2192 ShipChina(x))",
            "\u2200x (CommonlyUsedChina(x) \u2192 SoldJD(x))",
            "\u2200x (FavoredByYoungPeople(x) \u2192 CommonlyUsedChina(x))",
            "\u00ac(MadeInChina(macbook) \u2227 CommonlyUsedChina(macbook))"
        ],
        "question": "The MacBook is favored by young people and commonly used in China.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1155,
        "story_id": 410,
        "context": [
            "All products shipped from China are made in China. ",
            "All products sold in JD are shipped from China. ",
            "All products commonly used in China are sold in JD.",
            "All products favored by young people are commonly used in China. ",
            "MacBook is not made in China and is not commonly used in China."
        ],
        "context_fol": [
            "\u2200x (ShipChina(x) \u2192 MadeInChina(x))",
            "\u2200x (SoldJD(x) \u2192 ShipChina(x))",
            "\u2200x (CommonlyUsedChina(x) \u2192 SoldJD(x))",
            "\u2200x (FavoredByYoungPeople(x) \u2192 CommonlyUsedChina(x))",
            "\u00ac(MadeInChina(macbook) \u2227 CommonlyUsedChina(macbook))"
        ],
        "question": "The MacBook is either favored by young people or commonly used in China.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1156,
        "story_id": 410,
        "context": [
            "All products shipped from China are made in China. ",
            "All products sold in JD are shipped from China. ",
            "All products commonly used in China are sold in JD.",
            "All products favored by young people are commonly used in China. ",
            "MacBook is not made in China and is not commonly used in China."
        ],
        "context_fol": [
            "\u2200x (ShipChina(x) \u2192 MadeInChina(x))",
            "\u2200x (SoldJD(x) \u2192 ShipChina(x))",
            "\u2200x (CommonlyUsedChina(x) \u2192 SoldJD(x))",
            "\u2200x (FavoredByYoungPeople(x) \u2192 CommonlyUsedChina(x))",
            "\u00ac(MadeInChina(macbook) \u2227 CommonlyUsedChina(macbook))"
        ],
        "question": "If the MacBook is favored by young people and commonly used in China, then it is neither favored by young people nor made in China.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 589,
        "story_id": 205,
        "context": [
            "Oxford Circus is a road junction connecting Oxford Street and Regent Street.",
            "Oxford Street is in London.",
            "John Nash designed the construction on Regent Street.",
            "John Nash designed Oxford Circus.",
            "John Nash is an architect in British.",
            "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900."
        ],
        "context_fol": [
            "OxfordStreet(oxfordCircus) \u2227 RegentStreet(oxfordCircus)",
            "\u2200x (OxfordStreet(x) \u2192 London(x))",
            "\u2203x (RegentStreet(x) \u2227 Design(johnNash, x))",
            "Design(johnNash, oxfordCircus)",
            "British(johnNash) \u2227 Architect(johnNash)",
            "CentralLine(oxfordCircus)"
        ],
        "question": "Oxford Circus is in London.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 590,
        "story_id": 205,
        "context": [
            "Oxford Circus is a road junction connecting Oxford Street and Regent Street.",
            "Oxford Street is in London.",
            "John Nash designed the construction on Regent Street.",
            "John Nash designed Oxford Circus.",
            "John Nash is an architect in British.",
            "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900."
        ],
        "context_fol": [
            "OxfordStreet(oxfordCircus) \u2227 RegentStreet(oxfordCircus)",
            "\u2200x (OxfordStreet(x) \u2192 London(x))",
            "\u2203x (RegentStreet(x) \u2227 Design(johnNash, x))",
            "Design(johnNash, oxfordCircus)",
            "British(johnNash) \u2227 Architect(johnNash)",
            "CentralLine(oxfordCircus)"
        ],
        "question": "Oxford Circus is designed by a British architect.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 591,
        "story_id": 205,
        "context": [
            "Oxford Circus is a road junction connecting Oxford Street and Regent Street.",
            "Oxford Street is in London.",
            "John Nash designed the construction on Regent Street.",
            "John Nash designed Oxford Circus.",
            "John Nash is an architect in British.",
            "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900."
        ],
        "context_fol": [
            "OxfordStreet(oxfordCircus) \u2227 RegentStreet(oxfordCircus)",
            "\u2200x (OxfordStreet(x) \u2192 London(x))",
            "\u2203x (RegentStreet(x) \u2227 Design(johnNash, x))",
            "Design(johnNash, oxfordCircus)",
            "British(johnNash) \u2227 Architect(johnNash)",
            "CentralLine(oxfordCircus)"
        ],
        "question": "John Nash designed the Central line in 1900.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 592,
        "story_id": 205,
        "context": [
            "Oxford Circus is a road junction connecting Oxford Street and Regent Street.",
            "Oxford Street is in London.",
            "John Nash designed the construction on Regent Street.",
            "John Nash designed Oxford Circus.",
            "John Nash is an architect in British.",
            "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900."
        ],
        "context_fol": [
            "OxfordStreet(oxfordCircus) \u2227 RegentStreet(oxfordCircus)",
            "\u2200x (OxfordStreet(x) \u2192 London(x))",
            "\u2203x (RegentStreet(x) \u2227 Design(johnNash, x))",
            "Design(johnNash, oxfordCircus)",
            "British(johnNash) \u2227 Architect(johnNash)",
            "CentralLine(oxfordCircus)"
        ],
        "question": "Regent Street is not in London.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1374,
        "story_id": 473,
        "context": [
            "An animal is either a cat or a dog.",
            "All dogs bark.",
            "Ghosts do not exist.",
            "If something barks, then it is not alive.",
            "A thing is either alive or dead.",
            "Jojo is not dead."
        ],
        "context_fol": [
            "\u2200x (Cat(x) \u2295 Dog(x))",
            "\u2200x (Dog(x) \u2192 Bark(x))",
            "\u2200x (\u00acGhost(x))",
            "\u2200x (Bark(x) \u2192 \u00acAlive(x))",
            "\u2200x (Alive(x) \u2295 Dead(x))",
            "\u00acDead(jojo)"
        ],
        "question": "Jojo is a ghost.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1375,
        "story_id": 473,
        "context": [
            "An animal is either a cat or a dog.",
            "All dogs bark.",
            "Ghosts do not exist.",
            "If something barks, then it is not alive.",
            "A thing is either alive or dead.",
            "Jojo is not dead."
        ],
        "context_fol": [
            "\u2200x (Cat(x) \u2295 Dog(x))",
            "\u2200x (Dog(x) \u2192 Bark(x))",
            "\u2200x (\u00acGhost(x))",
            "\u2200x (Bark(x) \u2192 \u00acAlive(x))",
            "\u2200x (Alive(x) \u2295 Dead(x))",
            "\u00acDead(jojo)"
        ],
        "question": "Jojo is a cat or a ghost.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1376,
        "story_id": 473,
        "context": [
            "An animal is either a cat or a dog.",
            "All dogs bark.",
            "Ghosts do not exist.",
            "If something barks, then it is not alive.",
            "A thing is either alive or dead.",
            "Jojo is not dead."
        ],
        "context_fol": [
            "\u2200x (Cat(x) \u2295 Dog(x))",
            "\u2200x (Dog(x) \u2192 Bark(x))",
            "\u2200x (\u00acGhost(x))",
            "\u2200x (Bark(x) \u2192 \u00acAlive(x))",
            "\u2200x (Alive(x) \u2295 Dead(x))",
            "\u00acDead(jojo)"
        ],
        "question": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1269,
        "story_id": 440,
        "context": [
            "All animals that are tigers are cats.",
            "No cats are dogs.",
            "All Bengal tigers are tigers.",
            "Everything that is a husky is a dog.",
            "Fido is either a Bengal tiger or a cat."
        ],
        "context_fol": [
            "\u2200x (Tiger(x) \u2192 Cat(x))",
            "\u2200x (Cat(x) \u2192 \u00acDog(x))",
            "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
            "\u2200x (Husky(x) \u2192 Dog(x))",
            "BengalTiger(fido) \u2228 Cat(fido)"
        ],
        "question": "Fido is a husky.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1270,
        "story_id": 440,
        "context": [
            "All animals that are tigers are cats.",
            "No cats are dogs.",
            "All Bengal tigers are tigers.",
            "Everything that is a husky is a dog.",
            "Fido is either a Bengal tiger or a cat."
        ],
        "context_fol": [
            "\u2200x (Tiger(x) \u2192 Cat(x))",
            "\u2200x (Cat(x) \u2192 \u00acDog(x))",
            "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
            "\u2200x (Husky(x) \u2192 Dog(x))",
            "BengalTiger(fido) \u2228 Cat(fido)"
        ],
        "question": "Fido is not a husky.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1271,
        "story_id": 440,
        "context": [
            "All animals that are tigers are cats.",
            "No cats are dogs.",
            "All Bengal tigers are tigers.",
            "Everything that is a husky is a dog.",
            "Fido is either a Bengal tiger or a cat."
        ],
        "context_fol": [
            "\u2200x (Tiger(x) \u2192 Cat(x))",
            "\u2200x (Cat(x) \u2192 \u00acDog(x))",
            "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
            "\u2200x (Husky(x) \u2192 Dog(x))",
            "BengalTiger(fido) \u2228 Cat(fido)"
        ],
        "question": "Fido is a Bengal tiger.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1272,
        "story_id": 440,
        "context": [
            "All animals that are tigers are cats.",
            "No cats are dogs.",
            "All Bengal tigers are tigers.",
            "Everything that is a husky is a dog.",
            "Fido is either a Bengal tiger or a cat."
        ],
        "context_fol": [
            "\u2200x (Tiger(x) \u2192 Cat(x))",
            "\u2200x (Cat(x) \u2192 \u00acDog(x))",
            "\u2200x (BengalTiger(x) \u2192 Tiger(x))",
            "\u2200x (Husky(x) \u2192 Dog(x))",
            "BengalTiger(fido) \u2228 Cat(fido)"
        ],
        "question": "Fido is neither a dog nor a husky.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 196,
        "story_id": 66,
        "context": [
            "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
            "If a city is in a state which is in US, the city is a US city.",
            "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
            "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
            "LA is a city in California(CA).",
            "Atlanta is a US city.",
            "Atlanta is in Georgia(CA).",
            "CA is a state in the United States.",
            "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
            "Atlanta in the United States hold the 1996 Summer Olympics."
        ],
        "context_fol": [
            "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))",
            "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))",
            "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))",
            "SummerOlympicsCity(y2028, la)",
            "CityInState(la, ca)",
            "CityInCountry(atlanta, us)",
            "StateInCountry(ca, us)",
            "CityInState(atlanta, ga)",
            "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)",
            "SummerOlympicsCity(y1996, atlanta)"
        ],
        "question": "The 2028 Summer Olympics will take place in the US.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 197,
        "story_id": 66,
        "context": [
            "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
            "If a city is in a state which is in US, the city is a US city.",
            "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
            "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
            "LA is a city in California(CA).",
            "Atlanta is a US city.",
            "Atlanta is in Georgia(CA).",
            "CA is a state in the United States.",
            "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
            "Atlanta in the United States hold the 1996 Summer Olympics."
        ],
        "context_fol": [
            "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))",
            "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))",
            "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))",
            "SummerOlympicsCity(y2028, la)",
            "CityInState(la, ca)",
            "CityInCountry(atlanta, us)",
            "StateInCountry(ca, us)",
            "CityInState(atlanta, ga)",
            "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)",
            "SummerOlympicsCity(y1996, atlanta)"
        ],
        "question": "The 1996 Summer Olympics is not in Georgia.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 198,
        "story_id": 66,
        "context": [
            "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
            "If a city is in a state which is in US, the city is a US city.",
            "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
            "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
            "LA is a city in California(CA).",
            "Atlanta is a US city.",
            "Atlanta is in Georgia(CA).",
            "CA is a state in the United States.",
            "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
            "Atlanta in the United States hold the 1996 Summer Olympics."
        ],
        "context_fol": [
            "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))",
            "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))",
            "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))",
            "SummerOlympicsCity(y2028, la)",
            "CityInState(la, ca)",
            "CityInCountry(atlanta, us)",
            "StateInCountry(ca, us)",
            "CityInState(atlanta, ga)",
            "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)",
            "SummerOlympicsCity(y1996, atlanta)"
        ],
        "question": "Skateboarding will appear at The 2028 Summer Olympics.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 23,
        "story_id": 9,
        "context": [
            "The taiga vole is a large vole found in northwestern North America. ",
            "Cats like playing with all voles.",
            "The taiga vole lives in the boreal taiga zone.",
            "The boreal taiga zone in North America is a cold place to live in.",
            "Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus."
        ],
        "context_fol": [
            "Vole(taigaVole) \u2227 Find(taigaVole, northAmerica)",
            "\u2200x (Vole(x) \u2192 CatLikePlayingWith(x))",
            "Live(taigaVole, borealTaigaZone)",
            "\u2200x (Find(x, northAmerica) \u2227 Live(x, borealTaigaZone) \u2192 LiveInColdPlace(x))",
            "Larger(taigaVole, microtusVole)"
        ],
        "question": "Cats like playing with taiga vole.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 24,
        "story_id": 9,
        "context": [
            "The taiga vole is a large vole found in northwestern North America. ",
            "Cats like playing with all voles.",
            "The taiga vole lives in the boreal taiga zone.",
            "The boreal taiga zone in North America is a cold place to live in.",
            "Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus."
        ],
        "context_fol": [
            "Vole(taigaVole) \u2227 Find(taigaVole, northAmerica)",
            "\u2200x (Vole(x) \u2192 CatLikePlayingWith(x))",
            "Live(taigaVole, borealTaigaZone)",
            "\u2200x (Find(x, northAmerica) \u2227 Live(x, borealTaigaZone) \u2192 LiveInColdPlace(x))",
            "Larger(taigaVole, microtusVole)"
        ],
        "question": "Taiga vole's living place is not cold.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1046,
        "story_id": 389,
        "context": [
            "Either in women or in men. ",
            "No men have breast cancer.",
            "Either breast cancer or non-breast cancer. ",
            "No type of cancer is without a tumor.",
            "All non-breast cancers are a type of cancer.",
            "If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor."
        ],
        "context_fol": [
            "\u2200x (Women(x) \u2228 Men(x)) ",
            " \u2200x (Men(x) \u2192 \u00acBreastCancer(x))",
            " \u2200x (BreastCancer (x) \u2228 Non-BreastCancer(x)) ",
            " \u2200x (ATypeOfCancer(x) \u2192 \u00acWithoutTumor (x)) ",
            " \u2200x (Non-BreastCancer(x) \u2192 ATypeOfCancer(x)) ",
            " ATypeOfCancer(adenocarcinoma) \u2228 WithoutTumor(adenocarcinoma) \u2192 women(adenocarcinoma) \u2228 WithoutTumor(adenocarcinoma)"
        ],
        "question": "Adenocarcinoma is a breast cancer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1047,
        "story_id": 389,
        "context": [
            "Either in women or in men. ",
            "No men have breast cancer.",
            "Either breast cancer or non-breast cancer. ",
            "No type of cancer is without a tumor.",
            "All non-breast cancers are a type of cancer.",
            "If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor."
        ],
        "context_fol": [
            "\u2200x (Women(x) \u2228 Men(x)) ",
            " \u2200x (Men(x) \u2192 \u00acBreastCancer(x))",
            " \u2200x (BreastCancer (x) \u2228 Non-BreastCancer(x)) ",
            " \u2200x (ATypeOfCancer(x) \u2192 \u00acWithoutTumor (x)) ",
            " \u2200x (Non-BreastCancer(x) \u2192 ATypeOfCancer(x)) ",
            " ATypeOfCancer(adenocarcinoma) \u2228 WithoutTumor(adenocarcinoma) \u2192 women(adenocarcinoma) \u2228 WithoutTumor(adenocarcinoma)"
        ],
        "question": "Adenocarcinoma is in women.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1048,
        "story_id": 389,
        "context": [
            "Either in women or in men. ",
            "No men have breast cancer.",
            "Either breast cancer or non-breast cancer. ",
            "No type of cancer is without a tumor.",
            "All non-breast cancers are a type of cancer.",
            "If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor."
        ],
        "context_fol": [
            "\u2200x (Women(x) \u2228 Men(x)) ",
            " \u2200x (Men(x) \u2192 \u00acBreastCancer(x))",
            " \u2200x (BreastCancer (x) \u2228 Non-BreastCancer(x)) ",
            " \u2200x (ATypeOfCancer(x) \u2192 \u00acWithoutTumor (x)) ",
            " \u2200x (Non-BreastCancer(x) \u2192 ATypeOfCancer(x)) ",
            " ATypeOfCancer(adenocarcinoma) \u2228 WithoutTumor(adenocarcinoma) \u2192 women(adenocarcinoma) \u2228 WithoutTumor(adenocarcinoma)"
        ],
        "question": "If adenocarcinoma is in women or without a tumor, then adenocarcinoma is without a tumor and a non-breast cancer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 175,
        "story_id": 59,
        "context": [
            "Some monitors equipped in the lab are produced by the company named AOC. ",
            "All monitors equipped in the lab are cheaper than their original prices. ",
            "If the monitor is cheaper than its original prices, then its resolution is 1080p. ",
            "If a monitor is with a resolution of 1080p, then it does not support the type-c port. ",
            "LG34 is equipped in the lab.  "
        ],
        "context_fol": [
            "\u2203x (Lab(x) \u2227 AOC(x))",
            "\u2200x (Lab(x) \u2192 Cheaper(x))",
            "\u2200x (Cheaper(x) \u2192 A1080p(x))",
            "\u2200x (A1080p(x) \u2192 \u00acTypeC(x))",
            "Lab(lg-34)"
        ],
        "question": "LG34 machine is produced by AOC.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 176,
        "story_id": 59,
        "context": [
            "Some monitors equipped in the lab are produced by the company named AOC. ",
            "All monitors equipped in the lab are cheaper than their original prices. ",
            "If the monitor is cheaper than its original prices, then its resolution is 1080p. ",
            "If a monitor is with a resolution of 1080p, then it does not support the type-c port. ",
            "LG34 is equipped in the lab.  "
        ],
        "context_fol": [
            "\u2203x (Lab(x) \u2227 AOC(x))",
            "\u2200x (Lab(x) \u2192 Cheaper(x))",
            "\u2200x (Cheaper(x) \u2192 A1080p(x))",
            "\u2200x (A1080p(x) \u2192 \u00acTypeC(x))",
            "Lab(lg-34)"
        ],
        "question": "LG34 machine does not support the type-c port.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 177,
        "story_id": 59,
        "context": [
            "Some monitors equipped in the lab are produced by the company named AOC. ",
            "All monitors equipped in the lab are cheaper than their original prices. ",
            "If the monitor is cheaper than its original prices, then its resolution is 1080p. ",
            "If a monitor is with a resolution of 1080p, then it does not support the type-c port. ",
            "LG34 is equipped in the lab.  "
        ],
        "context_fol": [
            "\u2203x (Lab(x) \u2227 AOC(x))",
            "\u2200x (Lab(x) \u2192 Cheaper(x))",
            "\u2200x (Cheaper(x) \u2192 A1080p(x))",
            "\u2200x (A1080p(x) \u2192 \u00acTypeC(x))",
            "Lab(lg-34)"
        ],
        "question": "LG34 is not with a resolution of 1080p.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1160,
        "story_id": 412,
        "context": [
            "All fruits sold in Boston are shipped from Columbia. ",
            "Some fruits sold in New Haven are shipped from Mexico.",
            "No fruits shipped from Columbia are fruits sold in New York. ",
            "Avocadoe are a kind of fruit sold in New York or New York. ",
            "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. "
        ],
        "context_fol": [
            "\u2200x (SoldBoston(x) \u2192 ShippedFromColumbia(x))",
            "\u2203x (SoldNewHaven(x) \u2227 ShippedFromMexico(x))",
            "\u2200x (ShippedFromColumbia(x) \u2192 \u00acSoldNewYork(x))",
            "SoldNewYork(avocado) \u2228 SoldBoston(avocado)",
            "\u00ac(ShippedFromColumbia(avocado) \u2295 SoldNewHaven(avocado))"
        ],
        "question": "Avocados are a kind of fruit sold in New York.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1161,
        "story_id": 412,
        "context": [
            "All fruits sold in Boston are shipped from Columbia. ",
            "Some fruits sold in New Haven are shipped from Mexico.",
            "No fruits shipped from Columbia are fruits sold in New York. ",
            "Avocadoe are a kind of fruit sold in New York or New York. ",
            "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. "
        ],
        "context_fol": [
            "\u2200x (SoldBoston(x) \u2192 ShippedFromColumbia(x))",
            "\u2203x (SoldNewHaven(x) \u2227 ShippedFromMexico(x))",
            "\u2200x (ShippedFromColumbia(x) \u2192 \u00acSoldNewYork(x))",
            "SoldNewYork(avocado) \u2228 SoldBoston(avocado)",
            "\u00ac(ShippedFromColumbia(avocado) \u2295 SoldNewHaven(avocado))"
        ],
        "question": "Avocados are either sold in New York or sold in New Haven.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1162,
        "story_id": 412,
        "context": [
            "All fruits sold in Boston are shipped from Columbia. ",
            "Some fruits sold in New Haven are shipped from Mexico.",
            "No fruits shipped from Columbia are fruits sold in New York. ",
            "Avocadoe are a kind of fruit sold in New York or New York. ",
            "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. "
        ],
        "context_fol": [
            "\u2200x (SoldBoston(x) \u2192 ShippedFromColumbia(x))",
            "\u2203x (SoldNewHaven(x) \u2227 ShippedFromMexico(x))",
            "\u2200x (ShippedFromColumbia(x) \u2192 \u00acSoldNewYork(x))",
            "SoldNewYork(avocado) \u2228 SoldBoston(avocado)",
            "\u00ac(ShippedFromColumbia(avocado) \u2295 SoldNewHaven(avocado))"
        ],
        "question": "Avocados are either sold in New Haven or sold in Boston",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1163,
        "story_id": 412,
        "context": [
            "All fruits sold in Boston are shipped from Columbia. ",
            "Some fruits sold in New Haven are shipped from Mexico.",
            "No fruits shipped from Columbia are fruits sold in New York. ",
            "Avocadoe are a kind of fruit sold in New York or New York. ",
            "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. "
        ],
        "context_fol": [
            "\u2200x (SoldBoston(x) \u2192 ShippedFromColumbia(x))",
            "\u2203x (SoldNewHaven(x) \u2227 ShippedFromMexico(x))",
            "\u2200x (ShippedFromColumbia(x) \u2192 \u00acSoldNewYork(x))",
            "SoldNewYork(avocado) \u2228 SoldBoston(avocado)",
            "\u00ac(ShippedFromColumbia(avocado) \u2295 SoldNewHaven(avocado))"
        ],
        "question": "If avocados are not sold in New York and not shipped from Columbia, then they are neither sold in New York nor New Haven.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1183,
        "story_id": 418,
        "context": [
            "Some monitors equipped in the library are produced by AOC. ",
            "All monitors equipped in the library are cheaper than 800 dollars. ",
            "All monitors cheaper than 800 dollars are with a resolution of 1080p. ",
            "If a monitor has a resolution of 1080p, then it does not support the type-c port. ",
            "A-2017 supports the type-c port. "
        ],
        "context_fol": [
            "\u2203x (Library(x) \u2227 AOC(x))",
            "\u2200x (Library(x) \u2192 Cheap(x))",
            "\u2200x (Cheap(x) \u2192 A1080p(x))",
            "\u2200x (A1080p(x) \u2192 \u00acTypeC(x))",
            "TypeC(a-2017)"
        ],
        "question": "A-2017 is produced by AOC.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1184,
        "story_id": 418,
        "context": [
            "Some monitors equipped in the library are produced by AOC. ",
            "All monitors equipped in the library are cheaper than 800 dollars. ",
            "All monitors cheaper than 800 dollars are with a resolution of 1080p. ",
            "If a monitor has a resolution of 1080p, then it does not support the type-c port. ",
            "A-2017 supports the type-c port. "
        ],
        "context_fol": [
            "\u2203x (Library(x) \u2227 AOC(x))",
            "\u2200x (Library(x) \u2192 Cheap(x))",
            "\u2200x (Cheap(x) \u2192 A1080p(x))",
            "\u2200x (A1080p(x) \u2192 \u00acTypeC(x))",
            "TypeC(a-2017)"
        ],
        "question": "A-2017 is produced by AOC and equipped in the library.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1185,
        "story_id": 418,
        "context": [
            "Some monitors equipped in the library are produced by AOC. ",
            "All monitors equipped in the library are cheaper than 800 dollars. ",
            "All monitors cheaper than 800 dollars are with a resolution of 1080p. ",
            "If a monitor has a resolution of 1080p, then it does not support the type-c port. ",
            "A-2017 supports the type-c port. "
        ],
        "context_fol": [
            "\u2203x (Library(x) \u2227 AOC(x))",
            "\u2200x (Library(x) \u2192 Cheap(x))",
            "\u2200x (Cheap(x) \u2192 A1080p(x))",
            "\u2200x (A1080p(x) \u2192 \u00acTypeC(x))",
            "TypeC(a-2017)"
        ],
        "question": "If A-2017 is not with a resolution of 1080p or produced by AOC, then it is not equipped in the library.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 10,
        "story_id": 4,
        "context": [
            "S\u016bduva Marijampol\u0117 holds the Lithuanian Supercup.",
            "S\u016bduva Marijampol\u0117 is a soccer team."
        ],
        "context_fol": [
            "Hold(suduva, thelithuaniansupercup)",
            "SoccerTeam(suduva)"
        ],
        "question": "Some soccer team holds the Lithuanian Supercup.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 286,
        "story_id": 94,
        "context": [
            "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
            "Hambleton District is in North Yorkshire.",
            "North Yorkshire is in England."
        ],
        "context_fol": [
            "\u2200x (AinderbyQuernhow(x) \u2192 Village(x) \u2227 CivilParish(x) \u2227 Hambleton(x))",
            "\u2200x (Hambleton(x) \u2192 NorthYorkshire(x))",
            "\u2200x (NorthYorkshire(x) \u2192 England(x))"
        ],
        "question": "There is a village in England.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 287,
        "story_id": 94,
        "context": [
            "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
            "Hambleton District is in North Yorkshire.",
            "North Yorkshire is in England."
        ],
        "context_fol": [
            "\u2200x (AinderbyQuernhow(x) \u2192 Village(x) \u2227 CivilParish(x) \u2227 Hambleton(x))",
            "\u2200x (Hambleton(x) \u2192 NorthYorkshire(x))",
            "\u2200x (NorthYorkshire(x) \u2192 England(x))"
        ],
        "question": "There is no civil parish in England.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 139,
        "story_id": 48,
        "context": [
            "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
            "The Salmon of Doubt is about life experiences and technology.",
            "All authors are writers.",
            "Writers create innovative ideas.",
            "Some books that contain innovative ideas are about technology."
        ],
        "context_fol": [
            "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)",
            "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)",
            "\u2200x (Author(x) \u2192 Writer(x))",
            "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))",
            "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))"
        ],
        "question": "Douglas Adams is a writer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 140,
        "story_id": 48,
        "context": [
            "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
            "The Salmon of Doubt is about life experiences and technology.",
            "All authors are writers.",
            "Writers create innovative ideas.",
            "Some books that contain innovative ideas are about technology."
        ],
        "context_fol": [
            "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)",
            "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)",
            "\u2200x (Author(x) \u2192 Writer(x))",
            "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))",
            "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))"
        ],
        "question": "Douglas Adams created innovative ideas.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 141,
        "story_id": 48,
        "context": [
            "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
            "The Salmon of Doubt is about life experiences and technology.",
            "All authors are writers.",
            "Writers create innovative ideas.",
            "Some books that contain innovative ideas are about technology."
        ],
        "context_fol": [
            "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)",
            "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)",
            "\u2200x (Author(x) \u2192 Writer(x))",
            "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))",
            "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))"
        ],
        "question": "The Salmon of Doubt has no innovative Ideas.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 827,
        "story_id": 323,
        "context": [
            "No disposable products can help slow down global warming. ",
            "All eco-friendly brands can help slow down global warming. ",
            "All sustainable fashion brands are eco-friendly brands.",
            "All fast fashion products are disposable products.",
            "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand."
        ],
        "context_fol": [
            "\u2200x (DisposableProducts(x) \u2192 \u00acHelpSlowDownGlobalWarming(x))",
            " \u2200x (Eco-friendlyBrand(x) \u2192 HelpSlowDownGlobalWarming(x))",
            " \u2200x (SustainableFashionBrand(x) \u2192 Eco-friendlyBrand(x))",
            " \u2200x (FastFashionProducts(x) \u2192 DisposableProducts(x)) ",
            " \u00acHelpSlowDownGlobalWarming(reformation) \u2192 Eco-friendlyBrand(reformation) \u2228 SustainableFashionBrand(reformation)"
        ],
        "question": "Reformation is an eco-friendly brand.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 828,
        "story_id": 323,
        "context": [
            "No disposable products can help slow down global warming. ",
            "All eco-friendly brands can help slow down global warming. ",
            "All sustainable fashion brands are eco-friendly brands.",
            "All fast fashion products are disposable products.",
            "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand."
        ],
        "context_fol": [
            "\u2200x (DisposableProducts(x) \u2192 \u00acHelpSlowDownGlobalWarming(x))",
            " \u2200x (Eco-friendlyBrand(x) \u2192 HelpSlowDownGlobalWarming(x))",
            " \u2200x (SustainableFashionBrand(x) \u2192 Eco-friendlyBrand(x))",
            " \u2200x (FastFashionProducts(x) \u2192 DisposableProducts(x)) ",
            " \u00acHelpSlowDownGlobalWarming(reformation) \u2192 Eco-friendlyBrand(reformation) \u2228 SustainableFashionBrand(reformation)"
        ],
        "question": "Reformation produces fast fashion products.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 829,
        "story_id": 323,
        "context": [
            "No disposable products can help slow down global warming. ",
            "All eco-friendly brands can help slow down global warming. ",
            "All sustainable fashion brands are eco-friendly brands.",
            "All fast fashion products are disposable products.",
            "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand."
        ],
        "context_fol": [
            "\u2200x (DisposableProducts(x) \u2192 \u00acHelpSlowDownGlobalWarming(x))",
            " \u2200x (Eco-friendlyBrand(x) \u2192 HelpSlowDownGlobalWarming(x))",
            " \u2200x (SustainableFashionBrand(x) \u2192 Eco-friendlyBrand(x))",
            " \u2200x (FastFashionProducts(x) \u2192 DisposableProducts(x)) ",
            " \u00acHelpSlowDownGlobalWarming(reformation) \u2192 Eco-friendlyBrand(reformation) \u2228 SustainableFashionBrand(reformation)"
        ],
        "question": "Reformation does not produce fast fashion products.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 830,
        "story_id": 323,
        "context": [
            "No disposable products can help slow down global warming. ",
            "All eco-friendly brands can help slow down global warming. ",
            "All sustainable fashion brands are eco-friendly brands.",
            "All fast fashion products are disposable products.",
            "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand."
        ],
        "context_fol": [
            "\u2200x (DisposableProducts(x) \u2192 \u00acHelpSlowDownGlobalWarming(x))",
            " \u2200x (Eco-friendlyBrand(x) \u2192 HelpSlowDownGlobalWarming(x))",
            " \u2200x (SustainableFashionBrand(x) \u2192 Eco-friendlyBrand(x))",
            " \u2200x (FastFashionProducts(x) \u2192 DisposableProducts(x)) ",
            " \u00acHelpSlowDownGlobalWarming(reformation) \u2192 Eco-friendlyBrand(reformation) \u2228 SustainableFashionBrand(reformation)"
        ],
        "question": "Reformation does not produce fast fashion products or does not produce disposable products.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 831,
        "story_id": 323,
        "context": [
            "No disposable products can help slow down global warming. ",
            "All eco-friendly brands can help slow down global warming. ",
            "All sustainable fashion brands are eco-friendly brands.",
            "All fast fashion products are disposable products.",
            "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand."
        ],
        "context_fol": [
            "\u2200x (DisposableProducts(x) \u2192 \u00acHelpSlowDownGlobalWarming(x))",
            " \u2200x (Eco-friendlyBrand(x) \u2192 HelpSlowDownGlobalWarming(x))",
            " \u2200x (SustainableFashionBrand(x) \u2192 Eco-friendlyBrand(x))",
            " \u2200x (FastFashionProducts(x) \u2192 DisposableProducts(x)) ",
            " \u00acHelpSlowDownGlobalWarming(reformation) \u2192 Eco-friendlyBrand(reformation) \u2228 SustainableFashionBrand(reformation)"
        ],
        "question": "If Reformation produces disposable products, then Reformation produces fast fashion products.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 832,
        "story_id": 323,
        "context": [
            "No disposable products can help slow down global warming. ",
            "All eco-friendly brands can help slow down global warming. ",
            "All sustainable fashion brands are eco-friendly brands.",
            "All fast fashion products are disposable products.",
            "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand."
        ],
        "context_fol": [
            "\u2200x (DisposableProducts(x) \u2192 \u00acHelpSlowDownGlobalWarming(x))",
            " \u2200x (Eco-friendlyBrand(x) \u2192 HelpSlowDownGlobalWarming(x))",
            " \u2200x (SustainableFashionBrand(x) \u2192 Eco-friendlyBrand(x))",
            " \u2200x (FastFashionProducts(x) \u2192 DisposableProducts(x)) ",
            " \u00acHelpSlowDownGlobalWarming(reformation) \u2192 Eco-friendlyBrand(reformation) \u2228 SustainableFashionBrand(reformation)"
        ],
        "question": "If Reformation produces fast fashion products or helps slow down global warming, then Reformation produces fast fashion products.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 284,
        "story_id": 93,
        "context": [
            "Roy Richardson was a cricketer for Sint Maartener, a consituent country.",
            "Roy Richardson was a right handed batsman and medium pace bowler.",
            "Roy Richardson was old when he debuted in cricket.",
            "Sherville Huggins dismissed Roy Richardson."
        ],
        "context_fol": [
            "Cricketeer(royrichardson) \u2227 PlayedFor(royrichardson, sintmaartener) \u2227 ConstituentCountry(sintmaartener)",
            "RightHanded(royrichardson) \u2227 Batsman(royrichardson) \u2227 MediumPaceBowler(royrichardson)",
            "Old(royrichardson) \u2227 DebutedIn(royrichardson, cricket)",
            "Dismissed(shervillehuggins, royrichardson)"
        ],
        "question": "Sherville Huggins has never dismissed anyone playing for a constituent country.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 285,
        "story_id": 93,
        "context": [
            "Roy Richardson was a cricketer for Sint Maartener, a consituent country.",
            "Roy Richardson was a right handed batsman and medium pace bowler.",
            "Roy Richardson was old when he debuted in cricket.",
            "Sherville Huggins dismissed Roy Richardson."
        ],
        "context_fol": [
            "Cricketeer(royrichardson) \u2227 PlayedFor(royrichardson, sintmaartener) \u2227 ConstituentCountry(sintmaartener)",
            "RightHanded(royrichardson) \u2227 Batsman(royrichardson) \u2227 MediumPaceBowler(royrichardson)",
            "Old(royrichardson) \u2227 DebutedIn(royrichardson, cricket)",
            "Dismissed(shervillehuggins, royrichardson)"
        ],
        "question": "There are no right handed medium pace bowlers playing for Sint Maartener.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 700,
        "story_id": 251,
        "context": [
            "To get a job at Google, you need to have a lot of work experience or a good education.",
            " All Yale graduates who submitted their resumes to Google got jobs there.",
            " John has a lot of work experience.",
            " John submitted his resume to Google and got a job there."
        ],
        "context_fol": [
            "\u2200x (Employed(x, google) \u2192 WorkExp(x) \u2228 GoodEduc(x))",
            "\u2200x ((Yale(x) \u2227 CV(x, google)) \u2192 Employed(x, google))",
            "WorkExp(john)",
            "CV(john, google) \u2227 Employed(john, google)"
        ],
        "question": "John is a Yale graduate.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 889,
        "story_id": 338,
        "context": [
            "No students are doctors.",
            "All people taking classes are students. ",
            "All graduate students are people taking classes. ",
            "All PhD students are graduate students. ",
            "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 \u00acDoctor(x))",
            "\u2200x (TakingClass(x) \u2192 Student(x))",
            "\u2200x (GraduateStudent(x) \u2192 TakingClass(x))",
            "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
            "GraduateStudent(joe) \u2295  Doctor(joe) \u2192 \u00ac(GraduateStudent(joe) ^ Student(joe))"
        ],
        "question": "Joe is a person taking classes.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 890,
        "story_id": 338,
        "context": [
            "No students are doctors.",
            "All people taking classes are students. ",
            "All graduate students are people taking classes. ",
            "All PhD students are graduate students. ",
            "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 \u00acDoctor(x))",
            "\u2200x (TakingClass(x) \u2192 Student(x))",
            "\u2200x (GraduateStudent(x) \u2192 TakingClass(x))",
            "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
            "GraduateStudent(joe) \u2295  Doctor(joe) \u2192 \u00ac(GraduateStudent(joe) ^ Student(joe))"
        ],
        "question": "Joe is a PhD student.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 891,
        "story_id": 338,
        "context": [
            "No students are doctors.",
            "All people taking classes are students. ",
            "All graduate students are people taking classes. ",
            "All PhD students are graduate students. ",
            "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2192 \u00acDoctor(x))",
            "\u2200x (TakingClass(x) \u2192 Student(x))",
            "\u2200x (GraduateStudent(x) \u2192 TakingClass(x))",
            "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))",
            "GraduateStudent(joe) \u2295  Doctor(joe) \u2192 \u00ac(GraduateStudent(joe) ^ Student(joe))"
        ],
        "question": "Joe is not a PhD student.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 93,
        "story_id": 32,
        "context": [
            "Hugh Vanstone is one of the world's leading lighting designers. ",
            "Hugh Vanstone is from the UK.",
            "Hugh Vanstone has lit more than 160 productions.",
            "Hugh Vanstone attended school where he is from. "
        ],
        "context_fol": [
            "WorldLeadingLightningDesigner(hughVanstone)",
            "FromUK(hughVanstone)",
            "LitOver160Productions(hughVanstone)",
            "AttendedSchoolWhereFrom(hughVanstone)"
        ],
        "question": "Hugh Vanstone is one of the world's leading ligting designers and from the uk",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 94,
        "story_id": 32,
        "context": [
            "Hugh Vanstone is one of the world's leading lighting designers. ",
            "Hugh Vanstone is from the UK.",
            "Hugh Vanstone has lit more than 160 productions.",
            "Hugh Vanstone attended school where he is from. "
        ],
        "context_fol": [
            "WorldLeadingLightningDesigner(hughVanstone)",
            "FromUK(hughVanstone)",
            "LitOver160Productions(hughVanstone)",
            "AttendedSchoolWhereFrom(hughVanstone)"
        ],
        "question": "Hugh Vanstone has lit 170 productions.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 95,
        "story_id": 32,
        "context": [
            "Hugh Vanstone is one of the world's leading lighting designers. ",
            "Hugh Vanstone is from the UK.",
            "Hugh Vanstone has lit more than 160 productions.",
            "Hugh Vanstone attended school where he is from. "
        ],
        "context_fol": [
            "WorldLeadingLightningDesigner(hughVanstone)",
            "FromUK(hughVanstone)",
            "LitOver160Productions(hughVanstone)",
            "AttendedSchoolWhereFrom(hughVanstone)"
        ],
        "question": "Hugh Vanstone attended school in the US.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 450,
        "story_id": 155,
        "context": [
            "No man can run faster than Bolt. ",
            "Superman is not a man."
        ],
        "context_fol": [
            "\u2200x (Man(x) \u2192 \u00acFasterThanBolt(x))",
            "\u00acMan(superman) "
        ],
        "question": "Superman can run faster than Bolt.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 380,
        "story_id": 128,
        "context": [
            "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.",
            "Knuth has been called the \"father of the analysis of algorithms\"."
        ],
        "context_fol": [
            "AmericanComputerScientist(donaldErvinKnuth) \u2227 Mathematician(donaldErvinKnuth) \u2227 ProfessorStanford(donaldErvinKnuth)",
            "BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)"
        ],
        "question": "An American scientist has been called the \"father of the analysis of algorithms\".",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 381,
        "story_id": 128,
        "context": [
            "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.",
            "Knuth has been called the \"father of the analysis of algorithms\"."
        ],
        "context_fol": [
            "AmericanComputerScientist(donaldErvinKnuth) \u2227 Mathematician(donaldErvinKnuth) \u2227 ProfessorStanford(donaldErvinKnuth)",
            "BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)"
        ],
        "question": "A mathematician has been called the \"father of the analysis of algorithms\".",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 382,
        "story_id": 128,
        "context": [
            "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.",
            "Knuth has been called the \"father of the analysis of algorithms\"."
        ],
        "context_fol": [
            "AmericanComputerScientist(donaldErvinKnuth) \u2227 Mathematician(donaldErvinKnuth) \u2227 ProfessorStanford(donaldErvinKnuth)",
            "BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)"
        ],
        "question": "Donald Knuth is a well-known figure in the field of artificial intelligence .",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 363,
        "story_id": 121,
        "context": [
            "Neocrepidodera Corpulentas are flea beetles or moths.",
            "The species Neocrepidodera Corpulenta is in the Chrysomelidae family.",
            "There are no moths within the Chrysomelidae family."
        ],
        "context_fol": [
            "FleaBeetle(neocrepidoderacorpulenta) \u2228 Moth(neocrepidoderacorpulenta)",
            "Species(neocrepidoderacorpulenta) \u2227 Family(chrysomelidae) \u2227 In(neocrepidoderacorpulenta, chrysomelidae)",
            "\u2200x (In(x, chrysomelidae) \u2227 Family(chrysomelidae) \u2192 \u00acMoth(x))"
        ],
        "question": "There is a flea beetle within the Chrysomelidae family.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 364,
        "story_id": 121,
        "context": [
            "Neocrepidodera Corpulentas are flea beetles or moths.",
            "The species Neocrepidodera Corpulenta is in the Chrysomelidae family.",
            "There are no moths within the Chrysomelidae family."
        ],
        "context_fol": [
            "FleaBeetle(neocrepidoderacorpulenta) \u2228 Moth(neocrepidoderacorpulenta)",
            "Species(neocrepidoderacorpulenta) \u2227 Family(chrysomelidae) \u2227 In(neocrepidoderacorpulenta, chrysomelidae)",
            "\u2200x (In(x, chrysomelidae) \u2227 Family(chrysomelidae) \u2192 \u00acMoth(x))"
        ],
        "question": "There are no flea beetles within the Chrysomelidae family.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 644,
        "story_id": 227,
        "context": [
            "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.",
            "Carrozzeria Colli is a company that specialized in using aluminum.",
            "The first automobiles built by Carrozzeria Colli were racing cars.",
            "Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.",
            "Carrozzeria Colli worked for airforces.",
            "Carrozzeria Colli made car bodies. "
        ],
        "context_fol": [
            "MilaneseCoachbuilderCompany(carrozzeriacolli) \u2227 EstablishedBy(carrozzeriacolli, giuseppecolli) \u2227 EstablishedIn(carrozzeriacolli, y1901)",
            "SpecializedIn(carrozzeriacolli, usingaluminum)",
            "\u2200x (FirstAutomobilesBy(x, carrozzeriacolli) \u2192 Racingcar(x))",
            "\u2203x (RacingCar(x) \u2227 BuiltBy(x, carrozzeriacolli) \u2227 Used(x, fiat110mechanicals) \u2227 Used(x, chasis))",
            "\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriacolli, x))",
            "Made(carrozzeriacolli, carbodies)"
        ],
        "question": "Carrozzeria Colli made car bodies in 1931.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 645,
        "story_id": 227,
        "context": [
            "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.",
            "Carrozzeria Colli is a company that specialized in using aluminum.",
            "The first automobiles built by Carrozzeria Colli were racing cars.",
            "Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.",
            "Carrozzeria Colli worked for airforces.",
            "Carrozzeria Colli made car bodies. "
        ],
        "context_fol": [
            "MilaneseCoachbuilderCompany(carrozzeriacolli) \u2227 EstablishedBy(carrozzeriacolli, giuseppecolli) \u2227 EstablishedIn(carrozzeriacolli, y1901)",
            "SpecializedIn(carrozzeriacolli, usingaluminum)",
            "\u2200x (FirstAutomobilesBy(x, carrozzeriacolli) \u2192 Racingcar(x))",
            "\u2203x (RacingCar(x) \u2227 BuiltBy(x, carrozzeriacolli) \u2227 Used(x, fiat110mechanicals) \u2227 Used(x, chasis))",
            "\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriacolli, x))",
            "Made(carrozzeriacolli, carbodies)"
        ],
        "question": "Carrozzeria Colli built airplanes during World War II.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 646,
        "story_id": 227,
        "context": [
            "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.",
            "Carrozzeria Colli is a company that specialized in using aluminum.",
            "The first automobiles built by Carrozzeria Colli were racing cars.",
            "Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.",
            "Carrozzeria Colli worked for airforces.",
            "Carrozzeria Colli made car bodies. "
        ],
        "context_fol": [
            "MilaneseCoachbuilderCompany(carrozzeriacolli) \u2227 EstablishedBy(carrozzeriacolli, giuseppecolli) \u2227 EstablishedIn(carrozzeriacolli, y1901)",
            "SpecializedIn(carrozzeriacolli, usingaluminum)",
            "\u2200x (FirstAutomobilesBy(x, carrozzeriacolli) \u2192 Racingcar(x))",
            "\u2203x (RacingCar(x) \u2227 BuiltBy(x, carrozzeriacolli) \u2227 Used(x, fiat110mechanicals) \u2227 Used(x, chasis))",
            "\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriacolli, x))",
            "Made(carrozzeriacolli, carbodies)"
        ],
        "question": "Giuseppe Colli established a company that made car bodies.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 647,
        "story_id": 227,
        "context": [
            "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.",
            "Carrozzeria Colli is a company that specialized in using aluminum.",
            "The first automobiles built by Carrozzeria Colli were racing cars.",
            "Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.",
            "Carrozzeria Colli worked for airforces.",
            "Carrozzeria Colli made car bodies. "
        ],
        "context_fol": [
            "MilaneseCoachbuilderCompany(carrozzeriacolli) \u2227 EstablishedBy(carrozzeriacolli, giuseppecolli) \u2227 EstablishedIn(carrozzeriacolli, y1901)",
            "SpecializedIn(carrozzeriacolli, usingaluminum)",
            "\u2200x (FirstAutomobilesBy(x, carrozzeriacolli) \u2192 Racingcar(x))",
            "\u2203x (RacingCar(x) \u2227 BuiltBy(x, carrozzeriacolli) \u2227 Used(x, fiat110mechanicals) \u2227 Used(x, chasis))",
            "\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriacolli, x))",
            "Made(carrozzeriacolli, carbodies)"
        ],
        "question": "Giuseppe Colli established a Milanese coachbuilder company that specialized in using aluminum.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 648,
        "story_id": 227,
        "context": [
            "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.",
            "Carrozzeria Colli is a company that specialized in using aluminum.",
            "The first automobiles built by Carrozzeria Colli were racing cars.",
            "Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.",
            "Carrozzeria Colli worked for airforces.",
            "Carrozzeria Colli made car bodies. "
        ],
        "context_fol": [
            "MilaneseCoachbuilderCompany(carrozzeriacolli) \u2227 EstablishedBy(carrozzeriacolli, giuseppecolli) \u2227 EstablishedIn(carrozzeriacolli, y1901)",
            "SpecializedIn(carrozzeriacolli, usingaluminum)",
            "\u2200x (FirstAutomobilesBy(x, carrozzeriacolli) \u2192 Racingcar(x))",
            "\u2203x (RacingCar(x) \u2227 BuiltBy(x, carrozzeriacolli) \u2227 Used(x, fiat110mechanicals) \u2227 Used(x, chasis))",
            "\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriacolli, x))",
            "Made(carrozzeriacolli, carbodies)"
        ],
        "question": "The first automobiles built by Carrozzeria Colli were built using Fiat 1100 mechanicals and chasis.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 387,
        "story_id": 130,
        "context": [
            "John will go to the cinema if and only if Jack goes to the cinema today.",
            "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.",
            "Some days in March have bad weather.",
            "Iron man is on.",
            "It's March now."
        ],
        "context_fol": [
            "GoToTheCinema(john, today) \u2194 GoToTheCinema(jack, today)",
            "GoToTheCinema(jack, today) \u2194 (Movie(ironman) \u2227 \u00acBadWeather(today))",
            "\u2203x (Month(march) \u2192 BadWeather(x))",
            "Movie(ironman)",
            "Month(march)"
        ],
        "question": "John will go to the cinema.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 388,
        "story_id": 130,
        "context": [
            "John will go to the cinema if and only if Jack goes to the cinema today.",
            "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.",
            "Some days in March have bad weather.",
            "Iron man is on.",
            "It's March now."
        ],
        "context_fol": [
            "GoToTheCinema(john, today) \u2194 GoToTheCinema(jack, today)",
            "GoToTheCinema(jack, today) \u2194 (Movie(ironman) \u2227 \u00acBadWeather(today))",
            "\u2203x (Month(march) \u2192 BadWeather(x))",
            "Movie(ironman)",
            "Month(march)"
        ],
        "question": "The weather is good today.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 247,
        "story_id": 81,
        "context": [
            "Quiksilver sells sportswear, clothing, footwear, and accessories.",
            "Flannels are a type of clothing.",
            "Joe owns an item fron Quiksilver."
        ],
        "context_fol": [
            "\u2200x (QuiksilverSells(x) \u2192 Sportswear(x) \u2228 Clothing(x) \u2228 Footwear(x) \u2228 Accessory(x))",
            "Clothing(flannel)",
            "\u2203x (QuiksilverSells(x) \u2192 JoeOwns(x))"
        ],
        "question": "Quiksilver sells beer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 248,
        "story_id": 81,
        "context": [
            "Quiksilver sells sportswear, clothing, footwear, and accessories.",
            "Flannels are a type of clothing.",
            "Joe owns an item fron Quiksilver."
        ],
        "context_fol": [
            "\u2200x (QuiksilverSells(x) \u2192 Sportswear(x) \u2228 Clothing(x) \u2228 Footwear(x) \u2228 Accessory(x))",
            "Clothing(flannel)",
            "\u2203x (QuiksilverSells(x) \u2192 JoeOwns(x))"
        ],
        "question": "Joe owns a flannel.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 249,
        "story_id": 81,
        "context": [
            "Quiksilver sells sportswear, clothing, footwear, and accessories.",
            "Flannels are a type of clothing.",
            "Joe owns an item fron Quiksilver."
        ],
        "context_fol": [
            "\u2200x (QuiksilverSells(x) \u2192 Sportswear(x) \u2228 Clothing(x) \u2228 Footwear(x) \u2228 Accessory(x))",
            "Clothing(flannel)",
            "\u2203x (QuiksilverSells(x) \u2192 JoeOwns(x))"
        ],
        "question": "Joe owns at least one a piece of sportswear, clothing, footwear, or accessory",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 765,
        "story_id": 308,
        "context": [
            "No video games released by Nintendo support the PS4 platform.",
            "All video games in the Pokemon series are released by Nintendo. ",
            "All video games in the FIFA series support the PS4 platform. ",
            "All video games supporting users to simulate playing soccer games online are in the FIFA series.",
            "The video game named \u201cBe Lionel\u201d is in the Pokemon series or supports users to simulate playing football games online."
        ],
        "context_fol": [
            "\u2200x (Nintendo(x) \u2192 \u00acSupportPS4(x))",
            "\u2200x (Pokemon(x) \u2192 Nintendo(x))",
            "\u2200x (FIFA(x) \u2192 SupportPS4(x))",
            "\u2200x (SoccerOnline(x) \u2192 FIFA(x))",
            "Pokemon(belionel) \u2295 SoccerOnline(belionel)"
        ],
        "question": "The video game \"Be Lionel\" is in the pokemon series.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 766,
        "story_id": 308,
        "context": [
            "No video games released by Nintendo support the PS4 platform.",
            "All video games in the Pokemon series are released by Nintendo. ",
            "All video games in the FIFA series support the PS4 platform. ",
            "All video games supporting users to simulate playing soccer games online are in the FIFA series.",
            "The video game named \u201cBe Lionel\u201d is in the Pokemon series or supports users to simulate playing football games online."
        ],
        "context_fol": [
            "\u2200x (Nintendo(x) \u2192 \u00acSupportPS4(x))",
            "\u2200x (Pokemon(x) \u2192 Nintendo(x))",
            "\u2200x (FIFA(x) \u2192 SupportPS4(x))",
            "\u2200x (SoccerOnline(x) \u2192 FIFA(x))",
            "Pokemon(belionel) \u2295 SoccerOnline(belionel)"
        ],
        "question": "The video game named \u201cBe Lionel\u201d is not in the FIFA series or supports the PS4 platform.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 767,
        "story_id": 308,
        "context": [
            "No video games released by Nintendo support the PS4 platform.",
            "All video games in the Pokemon series are released by Nintendo. ",
            "All video games in the FIFA series support the PS4 platform. ",
            "All video games supporting users to simulate playing soccer games online are in the FIFA series.",
            "The video game named \u201cBe Lionel\u201d is in the Pokemon series or supports users to simulate playing football games online."
        ],
        "context_fol": [
            "\u2200x (Nintendo(x) \u2192 \u00acSupportPS4(x))",
            "\u2200x (Pokemon(x) \u2192 Nintendo(x))",
            "\u2200x (FIFA(x) \u2192 SupportPS4(x))",
            "\u2200x (SoccerOnline(x) \u2192 FIFA(x))",
            "Pokemon(belionel) \u2295 SoccerOnline(belionel)"
        ],
        "question": "The video game named \u201cBe Lionel\u201d is in the FIFA series or supports the PS4 platform.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 768,
        "story_id": 308,
        "context": [
            "No video games released by Nintendo support the PS4 platform.",
            "All video games in the Pokemon series are released by Nintendo. ",
            "All video games in the FIFA series support the PS4 platform. ",
            "All video games supporting users to simulate playing soccer games online are in the FIFA series.",
            "The video game named \u201cBe Lionel\u201d is in the Pokemon series or supports users to simulate playing football games online."
        ],
        "context_fol": [
            "\u2200x (Nintendo(x) \u2192 \u00acSupportPS4(x))",
            "\u2200x (Pokemon(x) \u2192 Nintendo(x))",
            "\u2200x (FIFA(x) \u2192 SupportPS4(x))",
            "\u2200x (SoccerOnline(x) \u2192 FIFA(x))",
            "Pokemon(belionel) \u2295 SoccerOnline(belionel)"
        ],
        "question": "The video game named \u201cBe Lionel\u201d  is not in the FIFA or Pokemon series.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 778,
        "story_id": 311,
        "context": [
            "No payment cards issued by Russian banks can be used with ApplePay.",
            "All MIR payment cards are issued by Russian banks.",
            "Some international payment cards can be used with ApplePay.",
            "Social payments in Russia can only be transferred to MIR payment cards.",
            "Bank of America payment cards can be used with ApplePay."
        ],
        "context_fol": [
            "\u2200x (RussianBank(x) \u2192 \u00acApplePay(x))",
            "\u2200x (Mir(x) \u2192 RussianBank(x))",
            "\u2203x (International(x) \u2192 ApplePay(x))",
            "\u2200x (SocialRussia(x) \u2192 Mir(x))",
            "ApplePay(boapaymentcards)"
        ],
        "question": "Bank of America payment cards are international.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 779,
        "story_id": 311,
        "context": [
            "No payment cards issued by Russian banks can be used with ApplePay.",
            "All MIR payment cards are issued by Russian banks.",
            "Some international payment cards can be used with ApplePay.",
            "Social payments in Russia can only be transferred to MIR payment cards.",
            "Bank of America payment cards can be used with ApplePay."
        ],
        "context_fol": [
            "\u2200x (RussianBank(x) \u2192 \u00acApplePay(x))",
            "\u2200x (Mir(x) \u2192 RussianBank(x))",
            "\u2203x (International(x) \u2192 ApplePay(x))",
            "\u2200x (SocialRussia(x) \u2192 Mir(x))",
            "ApplePay(boapaymentcards)"
        ],
        "question": "Bank of America payment cards are international and can be used to transfer social payments in Russia.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 780,
        "story_id": 311,
        "context": [
            "No payment cards issued by Russian banks can be used with ApplePay.",
            "All MIR payment cards are issued by Russian banks.",
            "Some international payment cards can be used with ApplePay.",
            "Social payments in Russia can only be transferred to MIR payment cards.",
            "Bank of America payment cards can be used with ApplePay."
        ],
        "context_fol": [
            "\u2200x (RussianBank(x) \u2192 \u00acApplePay(x))",
            "\u2200x (Mir(x) \u2192 RussianBank(x))",
            "\u2203x (International(x) \u2192 ApplePay(x))",
            "\u2200x (SocialRussia(x) \u2192 Mir(x))",
            "ApplePay(boapaymentcards)"
        ],
        "question": "If Bank of America payment cards are international or issued by Russian banks, then they can not be used to transfer social payments in Russia.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 151,
        "story_id": 52,
        "context": [
            "The Lumina APV is produced by Chevrolet. ",
            "The Astro is a van produced by Chevrolet. ",
            "Cars produced by Chevrolet are either cars or vans."
        ],
        "context_fol": [
            "Chevrolet(luminaAPV)",
            "Chevrolet(astro) \u2227 Van(astro)",
            "\u2200x (Chevrolet(x) \u2192 Car(x) \u2295 Van(x))"
        ],
        "question": "The Lumina APV is van.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 152,
        "story_id": 52,
        "context": [
            "The Lumina APV is produced by Chevrolet. ",
            "The Astro is a van produced by Chevrolet. ",
            "Cars produced by Chevrolet are either cars or vans."
        ],
        "context_fol": [
            "Chevrolet(luminaAPV)",
            "Chevrolet(astro) \u2227 Van(astro)",
            "\u2200x (Chevrolet(x) \u2192 Car(x) \u2295 Van(x))"
        ],
        "question": "The Lumina APV is either a car or a van.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 153,
        "story_id": 52,
        "context": [
            "The Lumina APV is produced by Chevrolet. ",
            "The Astro is a van produced by Chevrolet. ",
            "Cars produced by Chevrolet are either cars or vans."
        ],
        "context_fol": [
            "Chevrolet(luminaAPV)",
            "Chevrolet(astro) \u2227 Van(astro)",
            "\u2200x (Chevrolet(x) \u2192 Car(x) \u2295 Van(x))"
        ],
        "question": "The Astro is a van.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 154,
        "story_id": 52,
        "context": [
            "The Lumina APV is produced by Chevrolet. ",
            "The Astro is a van produced by Chevrolet. ",
            "Cars produced by Chevrolet are either cars or vans."
        ],
        "context_fol": [
            "Chevrolet(luminaAPV)",
            "Chevrolet(astro) \u2227 Van(astro)",
            "\u2200x (Chevrolet(x) \u2192 Car(x) \u2295 Van(x))"
        ],
        "question": "The Astro is a car.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1128,
        "story_id": 405,
        "context": [
            "Everyone who works in person is a commuter.",
            "People either work in person or work from home.",
            "Everyone who works from home has a relaxed schedule.",
            "George is either a commuter or has a home office setup.",
            "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
        ],
        "context_fol": [
            "\u2200x (InPerson(x) \u2192 Commuter(x))",
            "\u2200x (InPerson(x) \u2295 FromHome(x))",
            "\u2200x (FromHome(x) \u2192 Relaxed(x))",
            "Commuter(george) \u2295 HomeOffice(george)",
            "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
        ],
        "question": "George is a person who works from home.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1129,
        "story_id": 405,
        "context": [
            "Everyone who works in person is a commuter.",
            "People either work in person or work from home.",
            "Everyone who works from home has a relaxed schedule.",
            "George is either a commuter or has a home office setup.",
            "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
        ],
        "context_fol": [
            "\u2200x (InPerson(x) \u2192 Commuter(x))",
            "\u2200x (InPerson(x) \u2295 FromHome(x))",
            "\u2200x (FromHome(x) \u2192 Relaxed(x))",
            "Commuter(george) \u2295 HomeOffice(george)",
            "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
        ],
        "question": "If George is not a person who works from home and a person who works in person, then George is neither a commuter nor a person who has a relaxed schedule.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1130,
        "story_id": 405,
        "context": [
            "Everyone who works in person is a commuter.",
            "People either work in person or work from home.",
            "Everyone who works from home has a relaxed schedule.",
            "George is either a commuter or has a home office setup.",
            "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."
        ],
        "context_fol": [
            "\u2200x (InPerson(x) \u2192 Commuter(x))",
            "\u2200x (InPerson(x) \u2295 FromHome(x))",
            "\u2200x (FromHome(x) \u2192 Relaxed(x))",
            "Commuter(george) \u2295 HomeOffice(george)",
            "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
        ],
        "question": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 81,
        "story_id": 28,
        "context": [
            "Jason Kramer is an American music supervisor.",
            "Some American radio personalities are also music supervisors. ",
            "Anyone who hosts a show on a public radio station is a radio personality.",
            "Joe Rogan is a radio personality.",
            "Jason Kramer hosted a show on a public radio station."
        ],
        "context_fol": [
            "MusicSupervisor(jasonKramer) \u2227 American(jasonKramer)",
            "\u2203x (American(x) \u2227 MusicSupervisor(x) \u2227 RadioPersonality(x))",
            "\u2200x (HostShowOnPublicRadioStation(x) \u2192 RadioPersonality(x))",
            "RadioPersonality(joeRogan)",
            "HostShowOnPublicRadioStation(jasonKramer)"
        ],
        "question": "Joe Rogan is American.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 82,
        "story_id": 28,
        "context": [
            "Jason Kramer is an American music supervisor.",
            "Some American radio personalities are also music supervisors. ",
            "Anyone who hosts a show on a public radio station is a radio personality.",
            "Joe Rogan is a radio personality.",
            "Jason Kramer hosted a show on a public radio station."
        ],
        "context_fol": [
            "MusicSupervisor(jasonKramer) \u2227 American(jasonKramer)",
            "\u2203x (American(x) \u2227 MusicSupervisor(x) \u2227 RadioPersonality(x))",
            "\u2200x (HostShowOnPublicRadioStation(x) \u2192 RadioPersonality(x))",
            "RadioPersonality(joeRogan)",
            "HostShowOnPublicRadioStation(jasonKramer)"
        ],
        "question": "Jason Kramer is a music supervisor.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 83,
        "story_id": 28,
        "context": [
            "Jason Kramer is an American music supervisor.",
            "Some American radio personalities are also music supervisors. ",
            "Anyone who hosts a show on a public radio station is a radio personality.",
            "Joe Rogan is a radio personality.",
            "Jason Kramer hosted a show on a public radio station."
        ],
        "context_fol": [
            "MusicSupervisor(jasonKramer) \u2227 American(jasonKramer)",
            "\u2203x (American(x) \u2227 MusicSupervisor(x) \u2227 RadioPersonality(x))",
            "\u2200x (HostShowOnPublicRadioStation(x) \u2192 RadioPersonality(x))",
            "RadioPersonality(joeRogan)",
            "HostShowOnPublicRadioStation(jasonKramer)"
        ],
        "question": "Jason Kramer is a radio personality.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1228,
        "story_id": 430,
        "context": [
            "No coffee sold in Walmart is produced in France. ",
            "All coffee supplied by the company is sold in Walmart. ",
            "All coffee produced in Columbia is produced in France. ",
            "All coffee favored by local residents is coffee produced in Columbia. ",
            "All coffee with high prices is favored by local residents. ",
            "Civet Coffee is not produced in Columbia and is cheap.",
            "Jamaica Blue is sold in Walmart or favored by local residents."
        ],
        "context_fol": [
            "\u2200x (Walmart(x) \u2192 \u00acFrance(x))",
            "\u2200x (Company(x) \u2192 Walmart(x))",
            "\u2200x (Columbia(x) \u2192 France(x))",
            "\u2200x (Favored(x) \u2192 Columbia(x))",
            "\u2200x (HighPrice(x) \u2192 Favored(x))",
            "\u00ac(Columbia(civetcoffee) \u2227 HighPrice(civetcoffee))",
            "Walmart(jamaicablue) \u2228 Favored(jamaicablue)"
        ],
        "question": "Civet Coffee is produced in France.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1229,
        "story_id": 430,
        "context": [
            "No coffee sold in Walmart is produced in France. ",
            "All coffee supplied by the company is sold in Walmart. ",
            "All coffee produced in Columbia is produced in France. ",
            "All coffee favored by local residents is coffee produced in Columbia. ",
            "All coffee with high prices is favored by local residents. ",
            "Civet Coffee is not produced in Columbia and is cheap.",
            "Jamaica Blue is sold in Walmart or favored by local residents."
        ],
        "context_fol": [
            "\u2200x (Walmart(x) \u2192 \u00acFrance(x))",
            "\u2200x (Company(x) \u2192 Walmart(x))",
            "\u2200x (Columbia(x) \u2192 France(x))",
            "\u2200x (Favored(x) \u2192 Columbia(x))",
            "\u2200x (HighPrice(x) \u2192 Favored(x))",
            "\u00ac(Columbia(civetcoffee) \u2227 HighPrice(civetcoffee))",
            "Walmart(jamaicablue) \u2228 Favored(jamaicablue)"
        ],
        "question": "Civet Coffee is not produced in France.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1230,
        "story_id": 430,
        "context": [
            "No coffee sold in Walmart is produced in France. ",
            "All coffee supplied by the company is sold in Walmart. ",
            "All coffee produced in Columbia is produced in France. ",
            "All coffee favored by local residents is coffee produced in Columbia. ",
            "All coffee with high prices is favored by local residents. ",
            "Civet Coffee is not produced in Columbia and is cheap.",
            "Jamaica Blue is sold in Walmart or favored by local residents."
        ],
        "context_fol": [
            "\u2200x (Walmart(x) \u2192 \u00acFrance(x))",
            "\u2200x (Company(x) \u2192 Walmart(x))",
            "\u2200x (Columbia(x) \u2192 France(x))",
            "\u2200x (Favored(x) \u2192 Columbia(x))",
            "\u2200x (HighPrice(x) \u2192 Favored(x))",
            "\u00ac(Columbia(civetcoffee) \u2227 HighPrice(civetcoffee))",
            "Walmart(jamaicablue) \u2228 Favored(jamaicablue)"
        ],
        "question": "Jamaica Blue is expensive and supplied by the company.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1231,
        "story_id": 430,
        "context": [
            "No coffee sold in Walmart is produced in France. ",
            "All coffee supplied by the company is sold in Walmart. ",
            "All coffee produced in Columbia is produced in France. ",
            "All coffee favored by local residents is coffee produced in Columbia. ",
            "All coffee with high prices is favored by local residents. ",
            "Civet Coffee is not produced in Columbia and is cheap.",
            "Jamaica Blue is sold in Walmart or favored by local residents."
        ],
        "context_fol": [
            "\u2200x (Walmart(x) \u2192 \u00acFrance(x))",
            "\u2200x (Company(x) \u2192 Walmart(x))",
            "\u2200x (Columbia(x) \u2192 France(x))",
            "\u2200x (Favored(x) \u2192 Columbia(x))",
            "\u2200x (HighPrice(x) \u2192 Favored(x))",
            "\u00ac(Columbia(civetcoffee) \u2227 HighPrice(civetcoffee))",
            "Walmart(jamaicablue) \u2228 Favored(jamaicablue)"
        ],
        "question": "Jamaica Blue is not expensive and is not supplied by the company.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 600,
        "story_id": 209,
        "context": [
            "There are two places named Galicia: either in Spain or in Poland.",
            "Spain is in Europe.",
            "Poland is in Europe.",
            "Rochelle lives in Europe.",
            "Dominique does not live in Europe.",
            "Alfonso lives in Galicia."
        ],
        "context_fol": [
            "\u2200x (Galicia(x) \u2192 Spain(x) \u2295 Poland(x))",
            "\u2200x (Spain(x) \u2192 Europe(x))",
            "\u2200x (Poland(x) \u2192 Europe(x))",
            "\u2200x (RochelleLive(x) \u2192 Europe(x))",
            "\u2200x (DominiqueLive(x) \u2192 \u00acEurope(x))",
            "\u2200x (AlfonsoLive(x) \u2192 Galicia(x))"
        ],
        "question": "Rochelle lives in Galicia.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 601,
        "story_id": 209,
        "context": [
            "There are two places named Galicia: either in Spain or in Poland.",
            "Spain is in Europe.",
            "Poland is in Europe.",
            "Rochelle lives in Europe.",
            "Dominique does not live in Europe.",
            "Alfonso lives in Galicia."
        ],
        "context_fol": [
            "\u2200x (Galicia(x) \u2192 Spain(x) \u2295 Poland(x))",
            "\u2200x (Spain(x) \u2192 Europe(x))",
            "\u2200x (Poland(x) \u2192 Europe(x))",
            "\u2200x (RochelleLive(x) \u2192 Europe(x))",
            "\u2200x (DominiqueLive(x) \u2192 \u00acEurope(x))",
            "\u2200x (AlfonsoLive(x) \u2192 Galicia(x))"
        ],
        "question": "Dominique does not live in Spain.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 602,
        "story_id": 209,
        "context": [
            "There are two places named Galicia: either in Spain or in Poland.",
            "Spain is in Europe.",
            "Poland is in Europe.",
            "Rochelle lives in Europe.",
            "Dominique does not live in Europe.",
            "Alfonso lives in Galicia."
        ],
        "context_fol": [
            "\u2200x (Galicia(x) \u2192 Spain(x) \u2295 Poland(x))",
            "\u2200x (Spain(x) \u2192 Europe(x))",
            "\u2200x (Poland(x) \u2192 Europe(x))",
            "\u2200x (RochelleLive(x) \u2192 Europe(x))",
            "\u2200x (DominiqueLive(x) \u2192 \u00acEurope(x))",
            "\u2200x (AlfonsoLive(x) \u2192 Galicia(x))"
        ],
        "question": "Alfonso lives in Europe.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 322,
        "story_id": 106,
        "context": [
            "Ralph Hammerthaler was born in Wasserburg am Inn.",
            "Wasserburg am Inn is in Germany.",
            "Germany is in Europe.",
            "Ralph Hammerthaler is a German writer.",
            "Ralph Hammerthaler was born in 1965. "
        ],
        "context_fol": [
            "BornIn(ralphHammerthaler, wasserburgAmInn)",
            "LocatedIn(wasserbAmInn, germany)",
            "LocatedIn(germany, europe)",
            "Writer(ralphHammerthaler)",
            "BornIn1965(ralphHammerthaler)"
        ],
        "question": "Ralph Hammerthaler is a writer born in Asia.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 323,
        "story_id": 106,
        "context": [
            "Ralph Hammerthaler was born in Wasserburg am Inn.",
            "Wasserburg am Inn is in Germany.",
            "Germany is in Europe.",
            "Ralph Hammerthaler is a German writer.",
            "Ralph Hammerthaler was born in 1965. "
        ],
        "context_fol": [
            "BornIn(ralphHammerthaler, wasserburgAmInn)",
            "LocatedIn(wasserbAmInn, germany)",
            "LocatedIn(germany, europe)",
            "Writer(ralphHammerthaler)",
            "BornIn1965(ralphHammerthaler)"
        ],
        "question": "Ralph Hammerthaler lives in Germany.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1171,
        "story_id": 415,
        "context": [
            "All books written by Tomas have sold more than 1 million copies. ",
            "Some books that have won Hugo Awards are written by Tomas.",
            "All books about the future are inspired by Shakespeare. ",
            "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
            "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
        ],
        "context_fol": [
            "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))",
            "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))",
            "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))",
            "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) ",
            "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)"
        ],
        "question": "2001 is a book that has won a Hugo Award.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1172,
        "story_id": 415,
        "context": [
            "All books written by Tomas have sold more than 1 million copies. ",
            "Some books that have won Hugo Awards are written by Tomas.",
            "All books about the future are inspired by Shakespeare. ",
            "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
            "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
        ],
        "context_fol": [
            "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))",
            "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))",
            "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))",
            "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) ",
            "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)"
        ],
        "question": "2001 is a book that has won a Hugo Award and is about the future.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1173,
        "story_id": 415,
        "context": [
            "All books written by Tomas have sold more than 1 million copies. ",
            "Some books that have won Hugo Awards are written by Tomas.",
            "All books about the future are inspired by Shakespeare. ",
            "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
            "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."
        ],
        "context_fol": [
            "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))",
            "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))",
            "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))",
            "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) ",
            "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)"
        ],
        "question": "If 2001 either has won a Hugo Award and is about the future, or neither has won a Hugo Award nor is about the future, then 2001 has neither won a Hugo Award nor is written by Tomas.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1398,
        "story_id": 479,
        "context": [
            "No grass is food. ",
            "All meadows are grass.",
            "All edible things are food. ",
            "All fruits are edible.",
            "All lemons are fruit.",
            "Grapes are not edible and lemons.",
            "Bananas are grass or fruit."
        ],
        "context_fol": [
            "\u2200x (Grass(x) \u2192 \u00acFood(x))",
            "\u2200x (Meadow(x) \u2192 Grass(x))",
            "\u2200x (Edible(x) \u2192 Food(x))",
            "\u2200x (Fruit(x) \u2192 Edible(x))",
            "\u2200x (Lemon(x) \u2192 Fruit(x))",
            "\u00ac(Edible(grape) \u2227 Lemon(grape))",
            "Grass(banana) \u2228 Fruit(banana)"
        ],
        "question": "Grapes are a food.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1399,
        "story_id": 479,
        "context": [
            "No grass is food. ",
            "All meadows are grass.",
            "All edible things are food. ",
            "All fruits are edible.",
            "All lemons are fruit.",
            "Grapes are not edible and lemons.",
            "Bananas are grass or fruit."
        ],
        "context_fol": [
            "\u2200x (Grass(x) \u2192 \u00acFood(x))",
            "\u2200x (Meadow(x) \u2192 Grass(x))",
            "\u2200x (Edible(x) \u2192 Food(x))",
            "\u2200x (Fruit(x) \u2192 Edible(x))",
            "\u2200x (Lemon(x) \u2192 Fruit(x))",
            "\u00ac(Edible(grape) \u2227 Lemon(grape))",
            "Grass(banana) \u2228 Fruit(banana)"
        ],
        "question": "Grapes are not a food.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1400,
        "story_id": 479,
        "context": [
            "No grass is food. ",
            "All meadows are grass.",
            "All edible things are food. ",
            "All fruits are edible.",
            "All lemons are fruit.",
            "Grapes are not edible and lemons.",
            "Bananas are grass or fruit."
        ],
        "context_fol": [
            "\u2200x (Grass(x) \u2192 \u00acFood(x))",
            "\u2200x (Meadow(x) \u2192 Grass(x))",
            "\u2200x (Edible(x) \u2192 Food(x))",
            "\u2200x (Fruit(x) \u2192 Edible(x))",
            "\u2200x (Lemon(x) \u2192 Fruit(x))",
            "\u00ac(Edible(grape) \u2227 Lemon(grape))",
            "Grass(banana) \u2228 Fruit(banana)"
        ],
        "question": "Bananas are a lemon and meadow.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1401,
        "story_id": 479,
        "context": [
            "No grass is food. ",
            "All meadows are grass.",
            "All edible things are food. ",
            "All fruits are edible.",
            "All lemons are fruit.",
            "Grapes are not edible and lemons.",
            "Bananas are grass or fruit."
        ],
        "context_fol": [
            "\u2200x (Grass(x) \u2192 \u00acFood(x))",
            "\u2200x (Meadow(x) \u2192 Grass(x))",
            "\u2200x (Edible(x) \u2192 Food(x))",
            "\u2200x (Fruit(x) \u2192 Edible(x))",
            "\u2200x (Lemon(x) \u2192 Fruit(x))",
            "\u00ac(Edible(grape) \u2227 Lemon(grape))",
            "Grass(banana) \u2228 Fruit(banana)"
        ],
        "question": "Bananas are not both a lemon and a meadow.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 60,
        "story_id": 21,
        "context": [
            "The Golden State Warriors are a team from San Francisco.",
            "The Golden State Warriors won the NBA finals.",
            "All teams attending the NBA finals have more than thirty years of history.",
            "Boston Celtics are a team that lost the NBA finals.",
            "If a team wins the NBA finals, then they will have more income.",
            "If a team wins or loses at the NBA finals, then they are attending the finals."
        ],
        "context_fol": [
            "Team(goldenstatewarriors) \u2227 From(goldenstatewarriors, sanfrancisco)",
            "Won(goldenstatewarriors, nbafinals)",
            "\u2200x (team(x) \u2227 Attending(x, nbafinals) \u2192 HasMoreThan(x, thirtyyearsofhistory))",
            "Team(bostonceltics) \u2227 Lost(bostonceltics, nbafinals)",
            "\u2200x (Team(x) \u2227 Won(x, nbafinals) \u2192 MoreIncome(x))",
            "\u2200x (Won(x, nbafinals) \u2228 Lost(x, nbafinals) \u2192 Attending(x, nbafinals))"
        ],
        "question": "The Boston Celtics is from San Francisco.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 61,
        "story_id": 21,
        "context": [
            "The Golden State Warriors are a team from San Francisco.",
            "The Golden State Warriors won the NBA finals.",
            "All teams attending the NBA finals have more than thirty years of history.",
            "Boston Celtics are a team that lost the NBA finals.",
            "If a team wins the NBA finals, then they will have more income.",
            "If a team wins or loses at the NBA finals, then they are attending the finals."
        ],
        "context_fol": [
            "Team(goldenstatewarriors) \u2227 From(goldenstatewarriors, sanfrancisco)",
            "Won(goldenstatewarriors, nbafinals)",
            "\u2200x (team(x) \u2227 Attending(x, nbafinals) \u2192 HasMoreThan(x, thirtyyearsofhistory))",
            "Team(bostonceltics) \u2227 Lost(bostonceltics, nbafinals)",
            "\u2200x (Team(x) \u2227 Won(x, nbafinals) \u2192 MoreIncome(x))",
            "\u2200x (Won(x, nbafinals) \u2228 Lost(x, nbafinals) \u2192 Attending(x, nbafinals))"
        ],
        "question": "The Boston Celtics has more than 30 years of experience.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 62,
        "story_id": 21,
        "context": [
            "The Golden State Warriors are a team from San Francisco.",
            "The Golden State Warriors won the NBA finals.",
            "All teams attending the NBA finals have more than thirty years of history.",
            "Boston Celtics are a team that lost the NBA finals.",
            "If a team wins the NBA finals, then they will have more income.",
            "If a team wins or loses at the NBA finals, then they are attending the finals."
        ],
        "context_fol": [
            "Team(goldenstatewarriors) \u2227 From(goldenstatewarriors, sanfrancisco)",
            "Won(goldenstatewarriors, nbafinals)",
            "\u2200x (team(x) \u2227 Attending(x, nbafinals) \u2192 HasMoreThan(x, thirtyyearsofhistory))",
            "Team(bostonceltics) \u2227 Lost(bostonceltics, nbafinals)",
            "\u2200x (Team(x) \u2227 Won(x, nbafinals) \u2192 MoreIncome(x))",
            "\u2200x (Won(x, nbafinals) \u2228 Lost(x, nbafinals) \u2192 Attending(x, nbafinals))"
        ],
        "question": "The Golden State Warriors will have more income for gate receipts.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 624,
        "story_id": 218,
        "context": [
            "Maya will play violin if and only if she never injures her fingers.",
            "Volleyball players can injure their ankle, fingers, or shoulder.",
            "Maya is a volleyball player."
        ],
        "context_fol": [
            "CanInjureFingures(maya) \u2192 \u00acWillPlayViolin(maya)",
            "\u2200x (VolleyballPlayer(x) \u2192 CanInjureFingures(x))",
            "VolleyballPlayer(maya)"
        ],
        "question": "Maya will not play violin.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1220,
        "story_id": 428,
        "context": [
            "All devices belonging to the company are connected to Google Home. ",
            "All devices with the company logo belong to the company. ",
            "A device is either with the company logo or belongs to employees. ",
            "All devices belonging to employees are available to connect to the company's wifi. ",
            "All devices connected to Google Home are controlled by managers. ",
            "All devices that connect to the company's wifi are easy to operate. ",
            "All devices that are easy to operate are produced after 2020. ",
            "IPod1 is produced before 2020. "
        ],
        "context_fol": [
            "\u2200x (InCompany(x) \u2192 GoogleHome(x))",
            "\u2200x (CompanyLogo(x) \u2192 InCompany(x))",
            "\u2200x (CompanyLogo(x) \u2228 Employee(x))",
            "\u2200x (Employee(x) \u2192 Wifi(x))",
            "\u2200x (GoogleHome(x) \u2192 ControlledByManager(x))",
            "\u2200x (Wifi(x) \u2192 EasyToOperate(x))",
            "\u2200x (EasyToOperate(x) \u2192 ProducedAfter2020(x))",
            "\u00acProducedAfter2020(iPod1)"
        ],
        "question": "IPod1 is controlled by managers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1221,
        "story_id": 428,
        "context": [
            "All devices belonging to the company are connected to Google Home. ",
            "All devices with the company logo belong to the company. ",
            "A device is either with the company logo or belongs to employees. ",
            "All devices belonging to employees are available to connect to the company's wifi. ",
            "All devices connected to Google Home are controlled by managers. ",
            "All devices that connect to the company's wifi are easy to operate. ",
            "All devices that are easy to operate are produced after 2020. ",
            "IPod1 is produced before 2020. "
        ],
        "context_fol": [
            "\u2200x (InCompany(x) \u2192 GoogleHome(x))",
            "\u2200x (CompanyLogo(x) \u2192 InCompany(x))",
            "\u2200x (CompanyLogo(x) \u2228 Employee(x))",
            "\u2200x (Employee(x) \u2192 Wifi(x))",
            "\u2200x (GoogleHome(x) \u2192 ControlledByManager(x))",
            "\u2200x (Wifi(x) \u2192 EasyToOperate(x))",
            "\u2200x (EasyToOperate(x) \u2192 ProducedAfter2020(x))",
            "\u00acProducedAfter2020(iPod1)"
        ],
        "question": "IPod1 is either produced after 2020 or controlled by managers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1222,
        "story_id": 428,
        "context": [
            "All devices belonging to the company are connected to Google Home. ",
            "All devices with the company logo belong to the company. ",
            "A device is either with the company logo or belongs to employees. ",
            "All devices belonging to employees are available to connect to the company's wifi. ",
            "All devices connected to Google Home are controlled by managers. ",
            "All devices that connect to the company's wifi are easy to operate. ",
            "All devices that are easy to operate are produced after 2020. ",
            "IPod1 is produced before 2020. "
        ],
        "context_fol": [
            "\u2200x (InCompany(x) \u2192 GoogleHome(x))",
            "\u2200x (CompanyLogo(x) \u2192 InCompany(x))",
            "\u2200x (CompanyLogo(x) \u2228 Employee(x))",
            "\u2200x (Employee(x) \u2192 Wifi(x))",
            "\u2200x (GoogleHome(x) \u2192 ControlledByManager(x))",
            "\u2200x (Wifi(x) \u2192 EasyToOperate(x))",
            "\u2200x (EasyToOperate(x) \u2192 ProducedAfter2020(x))",
            "\u00acProducedAfter2020(iPod1)"
        ],
        "question": "IPod1 is not with the company logo, and managers do not control it.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1223,
        "story_id": 428,
        "context": [
            "All devices belonging to the company are connected to Google Home. ",
            "All devices with the company logo belong to the company. ",
            "A device is either with the company logo or belongs to employees. ",
            "All devices belonging to employees are available to connect to the company's wifi. ",
            "All devices connected to Google Home are controlled by managers. ",
            "All devices that connect to the company's wifi are easy to operate. ",
            "All devices that are easy to operate are produced after 2020. ",
            "IPod1 is produced before 2020. "
        ],
        "context_fol": [
            "\u2200x (InCompany(x) \u2192 GoogleHome(x))",
            "\u2200x (CompanyLogo(x) \u2192 InCompany(x))",
            "\u2200x (CompanyLogo(x) \u2228 Employee(x))",
            "\u2200x (Employee(x) \u2192 Wifi(x))",
            "\u2200x (GoogleHome(x) \u2192 ControlledByManager(x))",
            "\u2200x (Wifi(x) \u2192 EasyToOperate(x))",
            "\u2200x (EasyToOperate(x) \u2192 ProducedAfter2020(x))",
            "\u00acProducedAfter2020(iPod1)"
        ],
        "question": "IPod1 is either with the company logo or controlled by managers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 715,
        "story_id": 266,
        "context": [
            "All CD players are delicate mechanisms.",
            "No delicate mechanisms are suitable toys for children."
        ],
        "context_fol": [
            "\u2200x (CDPlayer(x) \u2192 DelicateMechanism(x))",
            "\u2200x (DelicateMechanism(x) \u2192 \u00acSuitableToyForChildren(x))"
        ],
        "question": "Some CD players are suitable toys for children.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 921,
        "story_id": 347,
        "context": [
            "All mammals are living beings.",
            "All elephants are mammals.",
            "All baby elephants are elephants.",
            "Some baby elephants are sleepy.",
            "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
            "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
        ],
        "context_fol": [
            "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
            "\u2200x (Elephant(x) \u2192 Mammal(x))",
            "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
            "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
            "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
            "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
        ],
        "question": "Jumbo is sleepy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 922,
        "story_id": 347,
        "context": [
            "All mammals are living beings.",
            "All elephants are mammals.",
            "All baby elephants are elephants.",
            "Some baby elephants are sleepy.",
            "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
            "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
        ],
        "context_fol": [
            "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
            "\u2200x (Elephant(x) \u2192 Mammal(x))",
            "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
            "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
            "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
            "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
        ],
        "question": "Jumbo is not sleepy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 923,
        "story_id": 347,
        "context": [
            "All mammals are living beings.",
            "All elephants are mammals.",
            "All baby elephants are elephants.",
            "Some baby elephants are sleepy.",
            "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
            "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
        ],
        "context_fol": [
            "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
            "\u2200x (Elephant(x) \u2192 Mammal(x))",
            "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
            "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
            "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
            "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
        ],
        "question": "Jumbo is a living being.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 924,
        "story_id": 347,
        "context": [
            "All mammals are living beings.",
            "All elephants are mammals.",
            "All baby elephants are elephants.",
            "Some baby elephants are sleepy.",
            "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
            "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
        ],
        "context_fol": [
            "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
            "\u2200x (Elephant(x) \u2192 Mammal(x))",
            "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
            "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
            "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
            "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
        ],
        "question": "Jumbo is neither sleepy nor a baby elephant.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 925,
        "story_id": 347,
        "context": [
            "All mammals are living beings.",
            "All elephants are mammals.",
            "All baby elephants are elephants.",
            "Some baby elephants are sleepy.",
            "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
            "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."
        ],
        "context_fol": [
            "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ",
            "\u2200x (Elephant(x) \u2192 Mammal(x))",
            "\u2200x (BabyElephant(x) \u2192 Elephant(x))",
            "\u2203x (BabyElephant(x) \u2227 Sleepy(x))",
            "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))",
            "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
        ],
        "question": "Jumbo is not sleepy or an elephant.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1291,
        "story_id": 447,
        "context": [
            "No faculty does homework.",
            "All students do homework.",
            "All kids are students.",
            "If someone works at a school, then they are faculty.",
            "If Jill works at a school or is a teacher, then Jill works at a school."
        ],
        "context_fol": [
            "\u2200x (Faculty(x) \u2192 \u00acDoesHomework(x))",
            "\u2200x (Student(x) \u2192 DoesHomework(x))",
            "\u2200x (Kid(x) \u2192 Student(x))",
            "\u2200x (WorkAtSchool(x) \u2192 Faculty(x))",
            "WorkAtSchool(jill) \u2228 DoesHomework(jill) \u2192 WorkAtSchool(jill)"
        ],
        "question": "Jill works at a school.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1292,
        "story_id": 447,
        "context": [
            "No faculty does homework.",
            "All students do homework.",
            "All kids are students.",
            "If someone works at a school, then they are faculty.",
            "If Jill works at a school or is a teacher, then Jill works at a school."
        ],
        "context_fol": [
            "\u2200x (Faculty(x) \u2192 \u00acDoesHomework(x))",
            "\u2200x (Student(x) \u2192 DoesHomework(x))",
            "\u2200x (Kid(x) \u2192 Student(x))",
            "\u2200x (WorkAtSchool(x) \u2192 Faculty(x))",
            "WorkAtSchool(jill) \u2228 DoesHomework(jill) \u2192 WorkAtSchool(jill)"
        ],
        "question": "Jill is a kid.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1293,
        "story_id": 447,
        "context": [
            "No faculty does homework.",
            "All students do homework.",
            "All kids are students.",
            "If someone works at a school, then they are faculty.",
            "If Jill works at a school or is a teacher, then Jill works at a school."
        ],
        "context_fol": [
            "\u2200x (Faculty(x) \u2192 \u00acDoesHomework(x))",
            "\u2200x (Student(x) \u2192 DoesHomework(x))",
            "\u2200x (Kid(x) \u2192 Student(x))",
            "\u2200x (WorkAtSchool(x) \u2192 Faculty(x))",
            "WorkAtSchool(jill) \u2228 DoesHomework(jill) \u2192 WorkAtSchool(jill)"
        ],
        "question": "Jill is not a kid.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 941,
        "story_id": 353,
        "context": [
            "Either Max listens to classical music or Max listens to rap. ",
            "All the songs that Max listens to that are classical music are from the 12th century.",
            "If the song Max listens to is rap, then the song is from Kanye West. ",
            "If a songs is from Kanye West, then the song is full of lyrics. ",
            "All songs that are full of lyrics need to be written with words",
            "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century."
        ],
        "context_fol": [
            "\u2200x (MaxListensToClassicalMusic(x) \u2228 MaxListensToRap(x))",
            "\u2200x (MaxListensToClassicalMusic(x) \u2192 SongsFrom12thCentury(x))",
            "\u2200x (MaxListensToRap(x) \u2192 SongsFromKanyeWest(x))",
            "\u2200x (SongsFromKanyeWest(x) \u2192 SongsFullOfLyrics(x))",
            "\u2200x (SongsFullOfLyrics(x) \u2192 NeedToBeWrittenWithWords(x))",
            "MaxListensToClassicalMusic(asItWasByHarryStyles) \u2228 SongsFrom12thCentury(asItWasByHarryStyles) \u2192 MaxListensToClassicalMusic(asItWasByHarryStyles) \u2295 SongsFrom12thCentury(asItWasByHarryStyles)"
        ],
        "question": "\u201cAs it was\u201d by Harry Styles needs to be written with words.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 942,
        "story_id": 353,
        "context": [
            "Either Max listens to classical music or Max listens to rap. ",
            "All the songs that Max listens to that are classical music are from the 12th century.",
            "If the song Max listens to is rap, then the song is from Kanye West. ",
            "If a songs is from Kanye West, then the song is full of lyrics. ",
            "All songs that are full of lyrics need to be written with words",
            "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century."
        ],
        "context_fol": [
            "\u2200x (MaxListensToClassicalMusic(x) \u2228 MaxListensToRap(x))",
            "\u2200x (MaxListensToClassicalMusic(x) \u2192 SongsFrom12thCentury(x))",
            "\u2200x (MaxListensToRap(x) \u2192 SongsFromKanyeWest(x))",
            "\u2200x (SongsFromKanyeWest(x) \u2192 SongsFullOfLyrics(x))",
            "\u2200x (SongsFullOfLyrics(x) \u2192 NeedToBeWrittenWithWords(x))",
            "MaxListensToClassicalMusic(asItWasByHarryStyles) \u2228 SongsFrom12thCentury(asItWasByHarryStyles) \u2192 MaxListensToClassicalMusic(asItWasByHarryStyles) \u2295 SongsFrom12thCentury(asItWasByHarryStyles)"
        ],
        "question": "\"As it was\u201d by Harry Styles is a song from the 12th century.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 943,
        "story_id": 353,
        "context": [
            "Either Max listens to classical music or Max listens to rap. ",
            "All the songs that Max listens to that are classical music are from the 12th century.",
            "If the song Max listens to is rap, then the song is from Kanye West. ",
            "If a songs is from Kanye West, then the song is full of lyrics. ",
            "All songs that are full of lyrics need to be written with words",
            "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century."
        ],
        "context_fol": [
            "\u2200x (MaxListensToClassicalMusic(x) \u2228 MaxListensToRap(x))",
            "\u2200x (MaxListensToClassicalMusic(x) \u2192 SongsFrom12thCentury(x))",
            "\u2200x (MaxListensToRap(x) \u2192 SongsFromKanyeWest(x))",
            "\u2200x (SongsFromKanyeWest(x) \u2192 SongsFullOfLyrics(x))",
            "\u2200x (SongsFullOfLyrics(x) \u2192 NeedToBeWrittenWithWords(x))",
            "MaxListensToClassicalMusic(asItWasByHarryStyles) \u2228 SongsFrom12thCentury(asItWasByHarryStyles) \u2192 MaxListensToClassicalMusic(asItWasByHarryStyles) \u2295 SongsFrom12thCentury(asItWasByHarryStyles)"
        ],
        "question": "\"As it was\u201d by Harry Styles is not a song from Kanye West and needs to be written with words.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 114,
        "story_id": 39,
        "context": [
            "\"Your Woman\" is a song by British one-man band White Town.",
            "\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.",
            "If a song peaked at No.1 at a cetain place, then it was extremely popular.",
            "\"Your Woman\" also peaked No. 1 in Iceland, Israel and Spain."
        ],
        "context_fol": [
            "Produce(whiteTown, yourWoman)",
            "Peak(yourWoman, uKSinglesChart)",
            "\u2200x \u2200y (Peak(x, y) \u2192 Popular(x))",
            "Peak(yourWoman, iceland) \u2227 Peak(yourWoman, isarel) \u2227 Peak(yourWoman, spain)"
        ],
        "question": "\"Your Woman\" was extremely popular.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 115,
        "story_id": 39,
        "context": [
            "\"Your Woman\" is a song by British one-man band White Town.",
            "\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.",
            "If a song peaked at No.1 at a cetain place, then it was extremely popular.",
            "\"Your Woman\" also peaked No. 1 in Iceland, Israel and Spain."
        ],
        "context_fol": [
            "Produce(whiteTown, yourWoman)",
            "Peak(yourWoman, uKSinglesChart)",
            "\u2200x \u2200y (Peak(x, y) \u2192 Popular(x))",
            "Peak(yourWoman, iceland) \u2227 Peak(yourWoman, isarel) \u2227 Peak(yourWoman, spain)"
        ],
        "question": "White Town did not produce any popular song.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 116,
        "story_id": 39,
        "context": [
            "\"Your Woman\" is a song by British one-man band White Town.",
            "\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.",
            "If a song peaked at No.1 at a cetain place, then it was extremely popular.",
            "\"Your Woman\" also peaked No. 1 in Iceland, Israel and Spain."
        ],
        "context_fol": [
            "Produce(whiteTown, yourWoman)",
            "Peak(yourWoman, uKSinglesChart)",
            "\u2200x \u2200y (Peak(x, y) \u2192 Popular(x))",
            "Peak(yourWoman, iceland) \u2227 Peak(yourWoman, isarel) \u2227 Peak(yourWoman, spain)"
        ],
        "question": "White Town was a successful band.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1001,
        "story_id": 374,
        "context": [
            "All people who limp often and regularly have long-term medical issues with underlying causes.",
            "If people have long-term medical issues with underlying causes, then they are not often spry and energetic.",
            "People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.",
            "If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.",
            "If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities."
        ],
        "context_fol": [
            "\u2200x (Limp(x) \u2192 Medical(x))",
            "\u2200x (Medical(x) \u2192 \u00acSpry(x))",
            "\u2200x (Spry(x) \u2295 Tired(x)) \u2227 (\u2200x (Tired(x) \u2192 Indoors(x)))",
            "\u2200x (Indoors(x) \u2192 \u00acGym(x))",
            "(Limp(Mark) \u2295 Spry(Mark)) \u2192 Limp(Mark) \u2228 Tired(Mark)"
        ],
        "question": "Mark limps often and regularly.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1002,
        "story_id": 374,
        "context": [
            "All people who limp often and regularly have long-term medical issues with underlying causes.",
            "If people have long-term medical issues with underlying causes, then they are not often spry and energetic.",
            "People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.",
            "If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.",
            "If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities."
        ],
        "context_fol": [
            "\u2200x (Limp(x) \u2192 Medical(x))",
            "\u2200x (Medical(x) \u2192 \u00acSpry(x))",
            "\u2200x (Spry(x) \u2295 Tired(x)) \u2227 (\u2200x (Tired(x) \u2192 Indoors(x)))",
            "\u2200x (Indoors(x) \u2192 \u00acGym(x))",
            "(Limp(Mark) \u2295 Spry(Mark)) \u2192 Limp(Mark) \u2228 Tired(Mark)"
        ],
        "question": "Mark visits the gym at least once a day.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1003,
        "story_id": 374,
        "context": [
            "All people who limp often and regularly have long-term medical issues with underlying causes.",
            "If people have long-term medical issues with underlying causes, then they are not often spry and energetic.",
            "People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.",
            "If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.",
            "If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities."
        ],
        "context_fol": [
            "\u2200x (Limp(x) \u2192 Medical(x))",
            "\u2200x (Medical(x) \u2192 \u00acSpry(x))",
            "\u2200x (Spry(x) \u2295 Tired(x)) \u2227 (\u2200x (Tired(x) \u2192 Indoors(x)))",
            "\u2200x (Indoors(x) \u2192 \u00acGym(x))",
            "(Limp(Mark) \u2295 Spry(Mark)) \u2192 Limp(Mark) \u2228 Tired(Mark)"
        ],
        "question": "Mark stays indoors and rests regularly at his home or visits the gym at least once a day.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 543,
        "story_id": 188,
        "context": [
            "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.",
            "If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.",
            "Real Madrid and Atl\u00e9tico Madrid both scored one goal in 2016 UCL final during the regular time.",
            "Real Madrid and Atl\u00e9tico Madrid both scored zero goals in 2016 UCL final during the extra time."
        ],
        "context_fol": [
            "\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2192 PlayExtra(x, y))",
            "\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2227 During(extraTime) \u2192 PlayPenalty(x, y))",
            "SoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(regularTime)",
            "SoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(extraTime)"
        ],
        "question": "Real Madrid and Atl\u00e9tico Madrid needed to play a penalty shoot-out in 2016 UCL final.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 544,
        "story_id": 188,
        "context": [
            "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.",
            "If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.",
            "Real Madrid and Atl\u00e9tico Madrid both scored one goal in 2016 UCL final during the regular time.",
            "Real Madrid and Atl\u00e9tico Madrid both scored zero goals in 2016 UCL final during the extra time."
        ],
        "context_fol": [
            "\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2192 PlayExtra(x, y))",
            "\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2227 During(extraTime) \u2192 PlayPenalty(x, y))",
            "SoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(regularTime)",
            "SoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(extraTime)"
        ],
        "question": "Real Madrid and Atl\u00e9tico Madrid did not need to play a penalty shoot-out in 2016 UCL final.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 35,
        "story_id": 13,
        "context": [
            "System 7 is a UK-based electronic dance music band.",
            "Steve Hillage and Miquette Giraudy formed System 7.",
            "Steve Hillage and Miquette Giraudy are former members of the band Gong.",
            "Electric dance music bands are bands.",
            "System 7 has released several club singles.",
            "Club singles are not singles."
        ],
        "context_fol": [
            "BasedOn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)",
            "Formed(stevehillage, system7) \u2227 Formed(miquettegiraudy, system7)",
            "FormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)",
            "\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))",
            "\u2203x (ClubSingle(x) \u2227 Released(system7, x))",
            "\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))"
        ],
        "question": "System 7 was formed by former members of Gong.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 36,
        "story_id": 13,
        "context": [
            "System 7 is a UK-based electronic dance music band.",
            "Steve Hillage and Miquette Giraudy formed System 7.",
            "Steve Hillage and Miquette Giraudy are former members of the band Gong.",
            "Electric dance music bands are bands.",
            "System 7 has released several club singles.",
            "Club singles are not singles."
        ],
        "context_fol": [
            "BasedOn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)",
            "Formed(stevehillage, system7) \u2227 Formed(miquettegiraudy, system7)",
            "FormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)",
            "\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))",
            "\u2203x (ClubSingle(x) \u2227 Released(system7, x))",
            "\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))"
        ],
        "question": "System 7 has released several singles.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 37,
        "story_id": 13,
        "context": [
            "System 7 is a UK-based electronic dance music band.",
            "Steve Hillage and Miquette Giraudy formed System 7.",
            "Steve Hillage and Miquette Giraudy are former members of the band Gong.",
            "Electric dance music bands are bands.",
            "System 7 has released several club singles.",
            "Club singles are not singles."
        ],
        "context_fol": [
            "BasedOn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)",
            "Formed(stevehillage, system7) \u2227 Formed(miquettegiraudy, system7)",
            "FormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)",
            "\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))",
            "\u2203x (ClubSingle(x) \u2227 Released(system7, x))",
            "\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))"
        ],
        "question": "System 7 is not a band.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 545,
        "story_id": 189,
        "context": [
            "A summarization model is always faithful if it uses content from the input documents.",
            "Extractive models are a kind of summarization models.",
            "Extractive model can only use content from the input documents."
        ],
        "context_fol": [
            "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))",
            "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Summarization(x))",
            "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
        ],
        "question": "Extractive models are always faithful.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 546,
        "story_id": 189,
        "context": [
            "A summarization model is always faithful if it uses content from the input documents.",
            "Extractive models are a kind of summarization models.",
            "Extractive model can only use content from the input documents."
        ],
        "context_fol": [
            "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))",
            "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Summarization(x))",
            "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
        ],
        "question": "Extractive models are not always faithful.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 989,
        "story_id": 370,
        "context": [
            "If people practice coding questions, then they are not studying to go to medical school to become a doctor.",
            "If people want to work in the software engineering industry, then they practice coding questions.",
            "If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.",
            "If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.",
            "If people study hard, then they grew up with parents who worked as doctors.",
            "If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors."
        ],
        "context_fol": [
            "\u2200x Coding(x) \u2192 \u00acStudyingToBeDoctor(x)",
            "\u2200x Industry(x) \u2192 Coding(x)",
            "\u2200x Healthcare(x) \u2192 StudyingToBeDoctor(x)",
            "\u2200x ParentDoctors(x) \u2192 Healthcare(x)",
            "\u2200x Study(x) \u2192 ParentDoctors(x)",
            "\u00ac(Healthcare(Robin) \u2228 ParentDoctors(Robin)) \u2192 (Study(Robin) \u2228 ParentDoctors(Robin)) "
        ],
        "question": "Robin is a person who studies hard.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 990,
        "story_id": 370,
        "context": [
            "If people practice coding questions, then they are not studying to go to medical school to become a doctor.",
            "If people want to work in the software engineering industry, then they practice coding questions.",
            "If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.",
            "If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.",
            "If people study hard, then they grew up with parents who worked as doctors.",
            "If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors."
        ],
        "context_fol": [
            "\u2200x Coding(x) \u2192 \u00acStudyingToBeDoctor(x)",
            "\u2200x Industry(x) \u2192 Coding(x)",
            "\u2200x Healthcare(x) \u2192 StudyingToBeDoctor(x)",
            "\u2200x ParentDoctors(x) \u2192 Healthcare(x)",
            "\u2200x Study(x) \u2192 ParentDoctors(x)",
            "\u00ac(Healthcare(Robin) \u2228 ParentDoctors(Robin)) \u2192 (Study(Robin) \u2228 ParentDoctors(Robin)) "
        ],
        "question": "Robin practices coding questions and wants to work in the software engineering industry.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 991,
        "story_id": 370,
        "context": [
            "If people practice coding questions, then they are not studying to go to medical school to become a doctor.",
            "If people want to work in the software engineering industry, then they practice coding questions.",
            "If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.",
            "If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.",
            "If people study hard, then they grew up with parents who worked as doctors.",
            "If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors."
        ],
        "context_fol": [
            "\u2200x Coding(x) \u2192 \u00acStudyingToBeDoctor(x)",
            "\u2200x Industry(x) \u2192 Coding(x)",
            "\u2200x Healthcare(x) \u2192 StudyingToBeDoctor(x)",
            "\u2200x ParentDoctors(x) \u2192 Healthcare(x)",
            "\u2200x Study(x) \u2192 ParentDoctors(x)",
            "\u00ac(Healthcare(Robin) \u2228 ParentDoctors(Robin)) \u2192 (Study(Robin) \u2228 ParentDoctors(Robin)) "
        ],
        "question": "Robin neither practices coding questions nor works to work in the software engineering industry.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1028,
        "story_id": 383,
        "context": [
            "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
            "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
            "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
            "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
            "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
            "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out."
        ],
        "context_fol": [
            "\u2200x Spa(x) \u2192 \u00acMiserly(x)",
            "\u2200x Miserly(x) \u2228 Frivolous(x)",
            "\u2200x Frivolous(x) \u2192 Luxury(x)",
            "\u2200x Luxury(x) \u2192 Shopping(x)",
            "\u00acMiserly(Jess) \u2192 \u00acLuxury(Jess)",
            "Luxury(Jess) \u2295 Miserly(Jess)) \u2192  Luxury(Jess)"
        ],
        "question": "Jess frivolously spends a lot of money every time they go out.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1029,
        "story_id": 383,
        "context": [
            "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
            "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
            "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
            "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
            "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
            "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out."
        ],
        "context_fol": [
            "\u2200x Spa(x) \u2192 \u00acMiserly(x)",
            "\u2200x Miserly(x) \u2228 Frivolous(x)",
            "\u2200x Frivolous(x) \u2192 Luxury(x)",
            "\u2200x Luxury(x) \u2192 Shopping(x)",
            "\u00acMiserly(Jess) \u2192 \u00acLuxury(Jess)",
            "Luxury(Jess) \u2295 Miserly(Jess)) \u2192  Luxury(Jess)"
        ],
        "question": "Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1030,
        "story_id": 383,
        "context": [
            "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
            "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
            "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
            "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
            "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
            "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out."
        ],
        "context_fol": [
            "\u2200x Spa(x) \u2192 \u00acMiserly(x)",
            "\u2200x Miserly(x) \u2228 Frivolous(x)",
            "\u2200x Frivolous(x) \u2192 Luxury(x)",
            "\u2200x Luxury(x) \u2192 Shopping(x)",
            "\u00acMiserly(Jess) \u2192 \u00acLuxury(Jess)",
            "Luxury(Jess) \u2295 Miserly(Jess)) \u2192  Luxury(Jess)"
        ],
        "question": "If Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week, then Jess neither values quality manufacturing and luxury items nor goes to the spa at least once a week.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 628,
        "story_id": 220,
        "context": [
            "The indie pop band Phoenix has released 6 albums. ",
            "Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. ",
            "A certified gold album or single is one which sold over half a million copies. ",
            "\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"",
            "Over 400,000 copies of \"1901\" have been sold. "
        ],
        "context_fol": [
            "AlbumsReleased(phoenix, l6)",
            "Album(wolfgangamadeusphoenix) \u2227 IsAlbumOf(wolfgangamadeusphoenix, phoenix) \u2227 SoldOver(wolfgangamadeusphoenix, l500000)",
            "\u2200x ((Album(x) \u2228 Single(x)) \u2227 SoldOver(x, l500000) \u2192 CertifiedGold(x))",
            "Single(l1901) \u2227 From(l1901, wolfgangamadeusphoenix) \u2227 By(l1901, phoenix)",
            "SoldOver(l1901, l400000)"
        ],
        "question": "The album \"Wolfgang Amadeus Phoenix\" is a certified gold album.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 629,
        "story_id": 220,
        "context": [
            "The indie pop band Phoenix has released 6 albums. ",
            "Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. ",
            "A certified gold album or single is one which sold over half a million copies. ",
            "\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"",
            "Over 400,000 copies of \"1901\" have been sold. "
        ],
        "context_fol": [
            "AlbumsReleased(phoenix, l6)",
            "Album(wolfgangamadeusphoenix) \u2227 IsAlbumOf(wolfgangamadeusphoenix, phoenix) \u2227 SoldOver(wolfgangamadeusphoenix, l500000)",
            "\u2200x ((Album(x) \u2228 Single(x)) \u2227 SoldOver(x, l500000) \u2192 CertifiedGold(x))",
            "Single(l1901) \u2227 From(l1901, wolfgangamadeusphoenix) \u2227 By(l1901, phoenix)",
            "SoldOver(l1901, l400000)"
        ],
        "question": "The single \"1901\" is a certified gold single.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 11,
        "story_id": 5,
        "context": [
            "Peter Parker is a either a superhero or a civilian.",
            "The Hulk is a destroyer.",
            "The Hulk wakes up when he is angry.",
            "If the Hulk wakes up, then he will break a bridge.",
            "Thor is a god.",
            "Thor will break a bridge when he is happy.",
            "A god is not a destroyer and a destroyer is not a god.",
            "Peter Parker wears a uniform when he is a superhero.",
            "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.",
            "If Thor is happy, the Hulk is angry."
        ],
        "context_fol": [
            "Superhero(peter) \u2295 Civilian(peter)",
            "Destroyer(hulk)",
            "Angry(hulk) \u2192 Wake(hulk)",
            "Wake(hulk) \u2192 BreakBridge(hulk)",
            "God(thor)",
            "Happy(thor) \u2192 BreakBridge(thor)",
            "\u2200x (God(x) \u2194 \u00acDestroyer(x))",
            "Superhero(peter) \u2192 WearUniform(peter)",
            "\u2200x (\u00acCivilian(peter) \u2194 (Destroyer(x) \u2227 BreakBridge(x)))",
            "Happy(thor) \u2192 Angry(hulk)"
        ],
        "question": "If the Hulk does not wake up, then Thor is not happy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 12,
        "story_id": 5,
        "context": [
            "Peter Parker is a either a superhero or a civilian.",
            "The Hulk is a destroyer.",
            "The Hulk wakes up when he is angry.",
            "If the Hulk wakes up, then he will break a bridge.",
            "Thor is a god.",
            "Thor will break a bridge when he is happy.",
            "A god is not a destroyer and a destroyer is not a god.",
            "Peter Parker wears a uniform when he is a superhero.",
            "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.",
            "If Thor is happy, the Hulk is angry."
        ],
        "context_fol": [
            "Superhero(peter) \u2295 Civilian(peter)",
            "Destroyer(hulk)",
            "Angry(hulk) \u2192 Wake(hulk)",
            "Wake(hulk) \u2192 BreakBridge(hulk)",
            "God(thor)",
            "Happy(thor) \u2192 BreakBridge(thor)",
            "\u2200x (God(x) \u2194 \u00acDestroyer(x))",
            "Superhero(peter) \u2192 WearUniform(peter)",
            "\u2200x (\u00acCivilian(peter) \u2194 (Destroyer(x) \u2227 BreakBridge(x)))",
            "Happy(thor) \u2192 Angry(hulk)"
        ],
        "question": "If Thor is happy, then Peter Parker wears a uniform.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 13,
        "story_id": 5,
        "context": [
            "Peter Parker is a either a superhero or a civilian.",
            "The Hulk is a destroyer.",
            "The Hulk wakes up when he is angry.",
            "If the Hulk wakes up, then he will break a bridge.",
            "Thor is a god.",
            "Thor will break a bridge when he is happy.",
            "A god is not a destroyer and a destroyer is not a god.",
            "Peter Parker wears a uniform when he is a superhero.",
            "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.",
            "If Thor is happy, the Hulk is angry."
        ],
        "context_fol": [
            "Superhero(peter) \u2295 Civilian(peter)",
            "Destroyer(hulk)",
            "Angry(hulk) \u2192 Wake(hulk)",
            "Wake(hulk) \u2192 BreakBridge(hulk)",
            "God(thor)",
            "Happy(thor) \u2192 BreakBridge(thor)",
            "\u2200x (God(x) \u2194 \u00acDestroyer(x))",
            "Superhero(peter) \u2192 WearUniform(peter)",
            "\u2200x (\u00acCivilian(peter) \u2194 (Destroyer(x) \u2227 BreakBridge(x)))",
            "Happy(thor) \u2192 Angry(hulk)"
        ],
        "question": "If Thor is not happy, then no bridge will be broken.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 259,
        "story_id": 85,
        "context": [
            "Diethylcarbamazine is a medication discovered in the year 1947.",
            "Diethylcarbamazine can be used to treat river blindness.",
            "The only preferred treatment for river blindness is ivermectin.",
            "Diethylcarbamazine is not ivermectin."
        ],
        "context_fol": [
            "\u2200x (Diethylcarbamazine(x) \u2227 Medication(x) \u2227 DiscoveredIn(x, year1947))",
            "\u2200x \u2200y (Diethylcarbamazine(x) \u2227 RiverBlindness(y) \u2192 Treats(x, y))",
            "\u2200x \u2200y (RiverBlindness(y) \u2227 PreferredTreatment(x, y) \u2192 Ivermectin(x))",
            "\u2200x (Diethylcarbamazine(x) \u2192 \u00acIvermectin(x))"
        ],
        "question": "Diethylcarbamazine is not preferred for the treatment of river blindness.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 260,
        "story_id": 85,
        "context": [
            "Diethylcarbamazine is a medication discovered in the year 1947.",
            "Diethylcarbamazine can be used to treat river blindness.",
            "The only preferred treatment for river blindness is ivermectin.",
            "Diethylcarbamazine is not ivermectin."
        ],
        "context_fol": [
            "\u2200x (Diethylcarbamazine(x) \u2227 Medication(x) \u2227 DiscoveredIn(x, year1947))",
            "\u2200x \u2200y (Diethylcarbamazine(x) \u2227 RiverBlindness(y) \u2192 Treats(x, y))",
            "\u2200x \u2200y (RiverBlindness(y) \u2227 PreferredTreatment(x, y) \u2192 Ivermectin(x))",
            "\u2200x (Diethylcarbamazine(x) \u2192 \u00acIvermectin(x))"
        ],
        "question": "Diethylcarbamazine was often used to treat river blindness.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 261,
        "story_id": 85,
        "context": [
            "Diethylcarbamazine is a medication discovered in the year 1947.",
            "Diethylcarbamazine can be used to treat river blindness.",
            "The only preferred treatment for river blindness is ivermectin.",
            "Diethylcarbamazine is not ivermectin."
        ],
        "context_fol": [
            "\u2200x (Diethylcarbamazine(x) \u2227 Medication(x) \u2227 DiscoveredIn(x, year1947))",
            "\u2200x \u2200y (Diethylcarbamazine(x) \u2227 RiverBlindness(y) \u2192 Treats(x, y))",
            "\u2200x \u2200y (RiverBlindness(y) \u2227 PreferredTreatment(x, y) \u2192 Ivermectin(x))",
            "\u2200x (Diethylcarbamazine(x) \u2192 \u00acIvermectin(x))"
        ],
        "question": "Diethylcarbamazine is used in the treatment of filariasis.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1062,
        "story_id": 392,
        "context": [
            "All univariate analyses use a generalized linear model. ",
            "All multivoxel (pattern) analyses are implementing machine learning algorithms.",
            "All implementing machine learning algorithms are to learn and classify multivariate data.",
            "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ",
            "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis."
        ],
        "context_fol": [
            "\u2200x (UnivariateAnalysis(x) \u2192 UsesGeneralizedLinearModel(x)) ",
            " \u2200x (MultivoxelPatternAnalysis(x) \u2192 ImplementingMachineLearningAlgorithms(x))",
            " \u2200x (ImplementingMachineLearningAlgorithms(x) \u2192 LearnAndClassifyMultivariateData(x)) ",
            " UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2228 UnivariateAnalysis(latentDirichletAllocationModel)",
            " \u00acLearnAndClassifyMultivariateData(latentDirichletAllocationModel) \u2192 UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2227 MultivoxelPatternAnalysis(latentDirichletAllocationModel)"
        ],
        "question": "Latent Dirichlet allocation model is implementing machine learning algorithms.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1063,
        "story_id": 392,
        "context": [
            "All univariate analyses use a generalized linear model. ",
            "All multivoxel (pattern) analyses are implementing machine learning algorithms.",
            "All implementing machine learning algorithms are to learn and classify multivariate data.",
            "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ",
            "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis."
        ],
        "context_fol": [
            "\u2200x (UnivariateAnalysis(x) \u2192 UsesGeneralizedLinearModel(x)) ",
            " \u2200x (MultivoxelPatternAnalysis(x) \u2192 ImplementingMachineLearningAlgorithms(x))",
            " \u2200x (ImplementingMachineLearningAlgorithms(x) \u2192 LearnAndClassifyMultivariateData(x)) ",
            " UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2228 UnivariateAnalysis(latentDirichletAllocationModel)",
            " \u00acLearnAndClassifyMultivariateData(latentDirichletAllocationModel) \u2192 UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2227 MultivoxelPatternAnalysis(latentDirichletAllocationModel)"
        ],
        "question": "Latent Dirichlet allocation model uses a generalized linear model and learns and classifies multivariate data.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1064,
        "story_id": 392,
        "context": [
            "All univariate analyses use a generalized linear model. ",
            "All multivoxel (pattern) analyses are implementing machine learning algorithms.",
            "All implementing machine learning algorithms are to learn and classify multivariate data.",
            "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ",
            "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis."
        ],
        "context_fol": [
            "\u2200x (UnivariateAnalysis(x) \u2192 UsesGeneralizedLinearModel(x)) ",
            " \u2200x (MultivoxelPatternAnalysis(x) \u2192 ImplementingMachineLearningAlgorithms(x))",
            " \u2200x (ImplementingMachineLearningAlgorithms(x) \u2192 LearnAndClassifyMultivariateData(x)) ",
            " UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2228 UnivariateAnalysis(latentDirichletAllocationModel)",
            " \u00acLearnAndClassifyMultivariateData(latentDirichletAllocationModel) \u2192 UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2227 MultivoxelPatternAnalysis(latentDirichletAllocationModel)"
        ],
        "question": "Latent Dirichlet allocation model either uses a generalized linear model or learns and classifies multivariate data.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1040,
        "story_id": 387,
        "context": [
            "If something requires a medical diagnosis, then lab tests or imaging is required. ",
            "All rare diseases require a medical diagnosis.",
            "If something is mild, then no lab tests or imaging is required. ",
            "All blood cancers are rare diseases.",
            "All Leukemia is blood cancer. ",
            "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
        ],
        "context_fol": [
            "\u2200x (RequiresAMedicalDiagnosis(x) \u2192 LabTestsOrImagingRequired(x)) ",
            "\u2200x (RareDiseases(x) \u2192 RequiresAMedicalDiagnosis(x))",
            "\u2200x (Mild(x) \u2192 \u00acLabTestsOrImagingRequired(x)) ",
            "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))",
            "\u2200x (Leukemia(x) \u2192 BloodCancer(x))",
            "\u00ac(BloodCancer(bladderCancer) \u2295 Leukemia(bladderCancer)) \u2192 Leukemia(bladderCancer)"
        ],
        "question": "Bladder cancer is mild.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1041,
        "story_id": 387,
        "context": [
            "If something requires a medical diagnosis, then lab tests or imaging is required. ",
            "All rare diseases require a medical diagnosis.",
            "If something is mild, then no lab tests or imaging is required. ",
            "All blood cancers are rare diseases.",
            "All Leukemia is blood cancer. ",
            "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
        ],
        "context_fol": [
            "\u2200x (RequiresAMedicalDiagnosis(x) \u2192 LabTestsOrImagingRequired(x)) ",
            "\u2200x (RareDiseases(x) \u2192 RequiresAMedicalDiagnosis(x))",
            "\u2200x (Mild(x) \u2192 \u00acLabTestsOrImagingRequired(x)) ",
            "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))",
            "\u2200x (Leukemia(x) \u2192 BloodCancer(x))",
            "\u00ac(BloodCancer(bladderCancer) \u2295 Leukemia(bladderCancer)) \u2192 Leukemia(bladderCancer)"
        ],
        "question": "Bladder cancer is Leukemia.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1042,
        "story_id": 387,
        "context": [
            "If something requires a medical diagnosis, then lab tests or imaging is required. ",
            "All rare diseases require a medical diagnosis.",
            "If something is mild, then no lab tests or imaging is required. ",
            "All blood cancers are rare diseases.",
            "All Leukemia is blood cancer. ",
            "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."
        ],
        "context_fol": [
            "\u2200x (RequiresAMedicalDiagnosis(x) \u2192 LabTestsOrImagingRequired(x)) ",
            "\u2200x (RareDiseases(x) \u2192 RequiresAMedicalDiagnosis(x))",
            "\u2200x (Mild(x) \u2192 \u00acLabTestsOrImagingRequired(x)) ",
            "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))",
            "\u2200x (Leukemia(x) \u2192 BloodCancer(x))",
            "\u00ac(BloodCancer(bladderCancer) \u2295 Leukemia(bladderCancer)) \u2192 Leukemia(bladderCancer)"
        ],
        "question": "Bladder cancer is either a rare disease or mild.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1049,
        "story_id": 390,
        "context": [
            "No precious metals aren't scarce.",
            "All non-rare earth metals are not scarce.",
            "Either non-rare earth metals or rare earth metals. ",
            "All rare earth metals can be used for batteries.",
            "All rare earth metals are essential for electric vehicles.",
            "Lithium is neither a non-rare earth metal nor essential for electric vehicles."
        ],
        "context_fol": [
            "\u2200x (PreciousMetals(x) \u2192 \u00acNotScarce(x))",
            " \u2200x (Non-rareEarthMetals(x) \u2192 NotScarce(x)) ",
            " \u2200x (Non-rareEarthMetals(x) \u2228 RareEarthMetals(x)) ",
            " \u2200x (RareEarthMetals(x) \u2192 BeUsedForBatteries(x)) ",
            " \u2200x (RareEarthMetals(x) \u2192 EssentialForElectricVehicles(x))",
            " \u00acNon-rareEarthMetals(lithium) \u2295 \u00acEssentialForElectricVehicles(lithium)"
        ],
        "question": "Lithium is a rare earth metal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1050,
        "story_id": 390,
        "context": [
            "No precious metals aren't scarce.",
            "All non-rare earth metals are not scarce.",
            "Either non-rare earth metals or rare earth metals. ",
            "All rare earth metals can be used for batteries.",
            "All rare earth metals are essential for electric vehicles.",
            "Lithium is neither a non-rare earth metal nor essential for electric vehicles."
        ],
        "context_fol": [
            "\u2200x (PreciousMetals(x) \u2192 \u00acNotScarce(x))",
            " \u2200x (Non-rareEarthMetals(x) \u2192 NotScarce(x)) ",
            " \u2200x (Non-rareEarthMetals(x) \u2228 RareEarthMetals(x)) ",
            " \u2200x (RareEarthMetals(x) \u2192 BeUsedForBatteries(x)) ",
            " \u2200x (RareEarthMetals(x) \u2192 EssentialForElectricVehicles(x))",
            " \u00acNon-rareEarthMetals(lithium) \u2295 \u00acEssentialForElectricVehicles(lithium)"
        ],
        "question": "Lithium is a precious metal and is used for batteries.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1051,
        "story_id": 390,
        "context": [
            "No precious metals aren't scarce.",
            "All non-rare earth metals are not scarce.",
            "Either non-rare earth metals or rare earth metals. ",
            "All rare earth metals can be used for batteries.",
            "All rare earth metals are essential for electric vehicles.",
            "Lithium is neither a non-rare earth metal nor essential for electric vehicles."
        ],
        "context_fol": [
            "\u2200x (PreciousMetals(x) \u2192 \u00acNotScarce(x))",
            " \u2200x (Non-rareEarthMetals(x) \u2192 NotScarce(x)) ",
            " \u2200x (Non-rareEarthMetals(x) \u2228 RareEarthMetals(x)) ",
            " \u2200x (RareEarthMetals(x) \u2192 BeUsedForBatteries(x)) ",
            " \u2200x (RareEarthMetals(x) \u2192 EssentialForElectricVehicles(x))",
            " \u00acNon-rareEarthMetals(lithium) \u2295 \u00acEssentialForElectricVehicles(lithium)"
        ],
        "question": "If Lithium is not essential for electric vehicles or a precious metal, then Lithium is not a non-rare earth metal or usable for batteries.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 863,
        "story_id": 332,
        "context": [
            "If people own at least one pet, then they do not have tidy houses.",
            "If people grew up with childhood pets, then they own at least one pet.",
            "If people hire a maid or cleaning service, then they have tidy houses.",
            "If people live in the suburbs, then they have tidy houses.",
            "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
        ],
        "context_fol": [
            "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
            "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
            "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
            "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
            "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
        ],
        "question": "Jack lives in the suburbs.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 864,
        "story_id": 332,
        "context": [
            "If people own at least one pet, then they do not have tidy houses.",
            "If people grew up with childhood pets, then they own at least one pet.",
            "If people hire a maid or cleaning service, then they have tidy houses.",
            "If people live in the suburbs, then they have tidy houses.",
            "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
        ],
        "context_fol": [
            "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
            "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
            "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
            "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
            "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
        ],
        "question": "Jack does not live in the suburbs.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 865,
        "story_id": 332,
        "context": [
            "If people own at least one pet, then they do not have tidy houses.",
            "If people grew up with childhood pets, then they own at least one pet.",
            "If people hire a maid or cleaning service, then they have tidy houses.",
            "If people live in the suburbs, then they have tidy houses.",
            "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
        ],
        "context_fol": [
            "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
            "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
            "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
            "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
            "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
        ],
        "question": "Jack has a tidy house.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 866,
        "story_id": 332,
        "context": [
            "If people own at least one pet, then they do not have tidy houses.",
            "If people grew up with childhood pets, then they own at least one pet.",
            "If people hire a maid or cleaning service, then they have tidy houses.",
            "If people live in the suburbs, then they have tidy houses.",
            "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
        ],
        "context_fol": [
            "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
            "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
            "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
            "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
            "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
        ],
        "question": "Jack neither lives in the suburbs nor owns at least one pet.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 867,
        "story_id": 332,
        "context": [
            "If people own at least one pet, then they do not have tidy houses.",
            "If people grew up with childhood pets, then they own at least one pet.",
            "If people hire a maid or cleaning service, then they have tidy houses.",
            "If people live in the suburbs, then they have tidy houses.",
            "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."
        ],
        "context_fol": [
            "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))",
            "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))",
            "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))",
            "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))",
            "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
        ],
        "question": "Jack grew up with childhood pets and lives in the suburbs.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 727,
        "story_id": 278,
        "context": [
            "A bottle is either standing upright or toppled over. ",
            "The bottle is not upright."
        ],
        "context_fol": [
            "Upright(bottle) \u2295 ToppledOver(bottle)",
            "\u00acUpright(bottle)"
        ],
        "question": "The bottle is toppled over.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 957,
        "story_id": 359,
        "context": [
            "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
            "All young children below the age of ten eat cereal and milk every day for breakfast.",
            "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
            "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
            "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
            "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
        ],
        "context_fol": [
            "\u2200x (Cereal(x) \u2192 BusyMorning(x))",
            "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))",
            "\u2200x (YoungChildren(x) \u2295 Committments(x))",
            "\u2200x (Committments(x) \u2192 Hardworking(x))",
            "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))",
            "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))"
        ],
        "question": "John is good at staying organized and motivated.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 958,
        "story_id": 359,
        "context": [
            "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
            "All young children below the age of ten eat cereal and milk every day for breakfast.",
            "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
            "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
            "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
            "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
        ],
        "context_fol": [
            "\u2200x (Cereal(x) \u2192 BusyMorning(x))",
            "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))",
            "\u2200x (YoungChildren(x) \u2295 Committments(x))",
            "\u2200x (Committments(x) \u2192 Hardworking(x))",
            "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))",
            "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))"
        ],
        "question": "John eats cereal and milk every day for breakfast.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 959,
        "story_id": 359,
        "context": [
            "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
            "All young children below the age of ten eat cereal and milk every day for breakfast.",
            "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
            "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
            "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
            "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."
        ],
        "context_fol": [
            "\u2200x (Cereal(x) \u2192 BusyMorning(x))",
            "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))",
            "\u2200x (YoungChildren(x) \u2295 Committments(x))",
            "\u2200x (Committments(x) \u2192 Hardworking(x))",
            "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))",
            "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))"
        ],
        "question": "John is either a hardworking individual with high ambitions and goals for the future or is good at staying organized and motivated.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 238,
        "story_id": 78,
        "context": [
            "Ableton has an office in Germany.",
            "Ableton has an office in the USA.",
            "USA and Germany are different countries.",
            "Any company that has offices in different countries is a multinational company.",
            "Ableton makes music software."
        ],
        "context_fol": [
            "OfficeIn(ableton, germany)",
            "OfficeIn(ableton, usa)",
            "\u00acSameCountry(germany, usa)",
            "\u2200x \u2200y \u2200z (OfficeIn(x, y) \u2227 OfficeIn(x, z) \u2227 \u00acSameCountry(y, z) \u2192 IsMultinationalCompany(x))",
            "MakesMusicSoftware(ableton)"
        ],
        "question": "Ableton is a multinational company.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 239,
        "story_id": 78,
        "context": [
            "Ableton has an office in Germany.",
            "Ableton has an office in the USA.",
            "USA and Germany are different countries.",
            "Any company that has offices in different countries is a multinational company.",
            "Ableton makes music software."
        ],
        "context_fol": [
            "OfficeIn(ableton, germany)",
            "OfficeIn(ableton, usa)",
            "\u00acSameCountry(germany, usa)",
            "\u2200x \u2200y \u2200z (OfficeIn(x, y) \u2227 OfficeIn(x, z) \u2227 \u00acSameCountry(y, z) \u2192 IsMultinationalCompany(x))",
            "MakesMusicSoftware(ableton)"
        ],
        "question": "Ableton makes AI software.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 240,
        "story_id": 78,
        "context": [
            "Ableton has an office in Germany.",
            "Ableton has an office in the USA.",
            "USA and Germany are different countries.",
            "Any company that has offices in different countries is a multinational company.",
            "Ableton makes music software."
        ],
        "context_fol": [
            "OfficeIn(ableton, germany)",
            "OfficeIn(ableton, usa)",
            "\u00acSameCountry(germany, usa)",
            "\u2200x \u2200y \u2200z (OfficeIn(x, y) \u2227 OfficeIn(x, z) \u2227 \u00acSameCountry(y, z) \u2192 IsMultinationalCompany(x))",
            "MakesMusicSoftware(ableton)"
        ],
        "question": "Ableton does not have an office in Germany.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1300,
        "story_id": 450,
        "context": [
            "Every swimmer can go underwater.",
            "Everyone that eats fish they catch themselves is a swimmer.",
            "Every penguin eats fish they catch themselves.",
            "All nonflying birds in Antarctica are penguins.",
            "Fido is a penguin or a swimmer."
        ],
        "context_fol": [
            "\u2200x (Swimmer(x) \u2192 GoesUnderwater(x))",
            "\u2200x (EatsFishCaughtThemselves(x) \u2192 Swimmer(x))",
            "\u2200x (Penguin(x) \u2192 EatsFishCaughtThemselves(x))",
            "\u2200x (NonFlyingBirdAntartica(x) \u2192 Penguin(x))",
            "Penguin(fido) \u2228 Swimmer(fido)"
        ],
        "question": "Fido eats fish they catch themselves.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1301,
        "story_id": 450,
        "context": [
            "Every swimmer can go underwater.",
            "Everyone that eats fish they catch themselves is a swimmer.",
            "Every penguin eats fish they catch themselves.",
            "All nonflying birds in Antarctica are penguins.",
            "Fido is a penguin or a swimmer."
        ],
        "context_fol": [
            "\u2200x (Swimmer(x) \u2192 GoesUnderwater(x))",
            "\u2200x (EatsFishCaughtThemselves(x) \u2192 Swimmer(x))",
            "\u2200x (Penguin(x) \u2192 EatsFishCaughtThemselves(x))",
            "\u2200x (NonFlyingBirdAntartica(x) \u2192 Penguin(x))",
            "Penguin(fido) \u2228 Swimmer(fido)"
        ],
        "question": "Fido is neither a non-flying bird nor can Fido go underwater.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1302,
        "story_id": 450,
        "context": [
            "Every swimmer can go underwater.",
            "Everyone that eats fish they catch themselves is a swimmer.",
            "Every penguin eats fish they catch themselves.",
            "All nonflying birds in Antarctica are penguins.",
            "Fido is a penguin or a swimmer."
        ],
        "context_fol": [
            "\u2200x (Swimmer(x) \u2192 GoesUnderwater(x))",
            "\u2200x (EatsFishCaughtThemselves(x) \u2192 Swimmer(x))",
            "\u2200x (Penguin(x) \u2192 EatsFishCaughtThemselves(x))",
            "\u2200x (NonFlyingBirdAntartica(x) \u2192 Penguin(x))",
            "Penguin(fido) \u2228 Swimmer(fido)"
        ],
        "question": "If Fido can either go underwater or is a swimmer, then Fido is a nonflying bird in Antartica.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1359,
        "story_id": 469,
        "context": [
            "All professors are teachers.",
            "All researchers are professors.",
            "No teachers are students.",
            "All people who study are students.",
            "Leon is not studying or a researcher.",
            "If Leon is not studying, then Leon is a teacher."
        ],
        "context_fol": [
            "\u2200x (Professor(x) \u2192 Teacher(x))",
            "\u2200x (Researcher(x) \u2192 Professor(x))",
            "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
            "\u2200x (Study(x) \u2192 Student(x))",
            "\u00acStudy(leon) \u2295 Researcher(leon)",
            "\u00acStudy(leon) \u2192 Teacher(leon)"
        ],
        "question": "Leon is a professor.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1360,
        "story_id": 469,
        "context": [
            "All professors are teachers.",
            "All researchers are professors.",
            "No teachers are students.",
            "All people who study are students.",
            "Leon is not studying or a researcher.",
            "If Leon is not studying, then Leon is a teacher."
        ],
        "context_fol": [
            "\u2200x (Professor(x) \u2192 Teacher(x))",
            "\u2200x (Researcher(x) \u2192 Professor(x))",
            "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
            "\u2200x (Study(x) \u2192 Student(x))",
            "\u00acStudy(leon) \u2295 Researcher(leon)",
            "\u00acStudy(leon) \u2192 Teacher(leon)"
        ],
        "question": "Leon is neither a student nor a researcher.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1361,
        "story_id": 469,
        "context": [
            "All professors are teachers.",
            "All researchers are professors.",
            "No teachers are students.",
            "All people who study are students.",
            "Leon is not studying or a researcher.",
            "If Leon is not studying, then Leon is a teacher."
        ],
        "context_fol": [
            "\u2200x (Professor(x) \u2192 Teacher(x))",
            "\u2200x (Researcher(x) \u2192 Professor(x))",
            "\u2200x (Teacher(x) \u2192 \u00acStudent(x))",
            "\u2200x (Study(x) \u2192 Student(x))",
            "\u00acStudy(leon) \u2295 Researcher(leon)",
            "\u00acStudy(leon) \u2192 Teacher(leon)"
        ],
        "question": "If Leon is not a researcher, then Leon is a student.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 345,
        "story_id": 114,
        "context": [
            "A cutman is responsible for preventing and treating physical damage to a fighter.",
            "Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ",
            "Cutmen typically handle swelling, nosebleeds and lacerations. ",
            "Jack is a cutman."
        ],
        "context_fol": [
            "\u2200x (Cutman(x) \u2192 Prevent(x, physicalDamage) \u2227 Treat(x, physicalDamage))",
            "\u2200x (Cutman(x) \u2192 Appear(x, boxing) \u2228 Appear(x, kickboxing) \u2228 Appear(x, mixedMartialBout))",
            "\u2200x (Cutman(x) \u2192 Handle(x, swelling) \u2227 Handle(x, nosebleeds) \u2227 Handle(x, lacerations))",
            "Cutman(jack)"
        ],
        "question": "No cutmen appear in boxing matches.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 346,
        "story_id": 114,
        "context": [
            "A cutman is responsible for preventing and treating physical damage to a fighter.",
            "Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ",
            "Cutmen typically handle swelling, nosebleeds and lacerations. ",
            "Jack is a cutman."
        ],
        "context_fol": [
            "\u2200x (Cutman(x) \u2192 Prevent(x, physicalDamage) \u2227 Treat(x, physicalDamage))",
            "\u2200x (Cutman(x) \u2192 Appear(x, boxing) \u2228 Appear(x, kickboxing) \u2228 Appear(x, mixedMartialBout))",
            "\u2200x (Cutman(x) \u2192 Handle(x, swelling) \u2227 Handle(x, nosebleeds) \u2227 Handle(x, lacerations))",
            "Cutman(jack)"
        ],
        "question": "If someone is not a cutman, then they cannot handle nosebleeds.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 347,
        "story_id": 114,
        "context": [
            "A cutman is responsible for preventing and treating physical damage to a fighter.",
            "Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ",
            "Cutmen typically handle swelling, nosebleeds and lacerations. ",
            "Jack is a cutman."
        ],
        "context_fol": [
            "\u2200x (Cutman(x) \u2192 Prevent(x, physicalDamage) \u2227 Treat(x, physicalDamage))",
            "\u2200x (Cutman(x) \u2192 Appear(x, boxing) \u2228 Appear(x, kickboxing) \u2228 Appear(x, mixedMartialBout))",
            "\u2200x (Cutman(x) \u2192 Handle(x, swelling) \u2227 Handle(x, nosebleeds) \u2227 Handle(x, lacerations))",
            "Cutman(jack)"
        ],
        "question": "Jack can treat physical damage.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 491,
        "story_id": 170,
        "context": [
            "The Mona Lisa is one of the world's best-known artworks.",
            "The Mona Lisa is a portrait painted by Leonardo da Vinci.",
            "Leonardo da Vinci was a scientist and painter.",
            "Painting genres are history, portrait, animal, landscape, and still life."
        ],
        "context_fol": [
            "Painting(monaLisa) \u2227 WorldsBestKnown(monaLisa)",
            "PaintedBy(monaLisa, leonardodaVinci) \u2227 Portrait(monaLisa)",
            "Scientist(leonardodaVinci) \u2227 Painter(leonardodaVinci)",
            "\u2200x (Painting(x) \u2192 (History(x) \u2228 Portrait(x) \u2228 Animal(x) \u2228 Landscape(x) \u2228 StillLife(x)))"
        ],
        "question": "One of the world's best-known artworks is painted by a scientist.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 492,
        "story_id": 170,
        "context": [
            "The Mona Lisa is one of the world's best-known artworks.",
            "The Mona Lisa is a portrait painted by Leonardo da Vinci.",
            "Leonardo da Vinci was a scientist and painter.",
            "Painting genres are history, portrait, animal, landscape, and still life."
        ],
        "context_fol": [
            "Painting(monaLisa) \u2227 WorldsBestKnown(monaLisa)",
            "PaintedBy(monaLisa, leonardodaVinci) \u2227 Portrait(monaLisa)",
            "Scientist(leonardodaVinci) \u2227 Painter(leonardodaVinci)",
            "\u2200x (Painting(x) \u2192 (History(x) \u2228 Portrait(x) \u2228 Animal(x) \u2228 Landscape(x) \u2228 StillLife(x)))"
        ],
        "question": "Leonardo da Vinci has artworks in the landscape genre.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 493,
        "story_id": 170,
        "context": [
            "The Mona Lisa is one of the world's best-known artworks.",
            "The Mona Lisa is a portrait painted by Leonardo da Vinci.",
            "Leonardo da Vinci was a scientist and painter.",
            "Painting genres are history, portrait, animal, landscape, and still life."
        ],
        "context_fol": [
            "Painting(monaLisa) \u2227 WorldsBestKnown(monaLisa)",
            "PaintedBy(monaLisa, leonardodaVinci) \u2227 Portrait(monaLisa)",
            "Scientist(leonardodaVinci) \u2227 Painter(leonardodaVinci)",
            "\u2200x (Painting(x) \u2192 (History(x) \u2228 Portrait(x) \u2228 Animal(x) \u2228 Landscape(x) \u2228 StillLife(x)))"
        ],
        "question": "No world's best-known artworks are portraits.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 892,
        "story_id": 339,
        "context": [
            "No professional tennis umpires are professional tennis players.",
            "If you are a World Tour player, then you are a professional tennis player.",
            "All Grand Slam champions are World Tour players.",
            "All Grand Slam umpires are professional tennis umpires.",
            "Nadal is a World Tour player or a Grand Slam champion"
        ],
        "context_fol": [
            "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
            "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
            "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
            "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
            "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
        ],
        "question": "Nadal is a Grand Slam umpire.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 893,
        "story_id": 339,
        "context": [
            "No professional tennis umpires are professional tennis players.",
            "If you are a World Tour player, then you are a professional tennis player.",
            "All Grand Slam champions are World Tour players.",
            "All Grand Slam umpires are professional tennis umpires.",
            "Nadal is a World Tour player or a Grand Slam champion"
        ],
        "context_fol": [
            "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
            "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
            "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
            "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
            "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
        ],
        "question": "Nadal is not a Grand Slam umpire.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 894,
        "story_id": 339,
        "context": [
            "No professional tennis umpires are professional tennis players.",
            "If you are a World Tour player, then you are a professional tennis player.",
            "All Grand Slam champions are World Tour players.",
            "All Grand Slam umpires are professional tennis umpires.",
            "Nadal is a World Tour player or a Grand Slam champion"
        ],
        "context_fol": [
            "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
            "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
            "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
            "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
            "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
        ],
        "question": "Nadal is a Grand Slam champion.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 895,
        "story_id": 339,
        "context": [
            "No professional tennis umpires are professional tennis players.",
            "If you are a World Tour player, then you are a professional tennis player.",
            "All Grand Slam champions are World Tour players.",
            "All Grand Slam umpires are professional tennis umpires.",
            "Nadal is a World Tour player or a Grand Slam champion"
        ],
        "context_fol": [
            "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
            "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
            "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
            "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
            "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
        ],
        "question": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 896,
        "story_id": 339,
        "context": [
            "No professional tennis umpires are professional tennis players.",
            "If you are a World Tour player, then you are a professional tennis player.",
            "All Grand Slam champions are World Tour players.",
            "All Grand Slam umpires are professional tennis umpires.",
            "Nadal is a World Tour player or a Grand Slam champion"
        ],
        "context_fol": [
            "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
            "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
            "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
            "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
            "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
        ],
        "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 897,
        "story_id": 339,
        "context": [
            "No professional tennis umpires are professional tennis players.",
            "If you are a World Tour player, then you are a professional tennis player.",
            "All Grand Slam champions are World Tour players.",
            "All Grand Slam umpires are professional tennis umpires.",
            "Nadal is a World Tour player or a Grand Slam champion"
        ],
        "context_fol": [
            "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))",
            "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))",
            "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))",
            "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))",
            "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
        ],
        "question": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 368,
        "story_id": 123,
        "context": [
            "Buisnesses are either sanctioned or unsanctioned.",
            "Sanctioned buisnesses are limited.",
            "Unsanctioned buisnesses are free.",
            "The Crude Oil Data Exchange is a buisness that isn't free."
        ],
        "context_fol": [
            "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))",
            "\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))",
            "\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))",
            "Buisness(crudeoildataexchange) \u2227 \u00acFree(crudeoildataexchange)"
        ],
        "question": "Crude Oil Data Exchange is sanctioned.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 369,
        "story_id": 123,
        "context": [
            "Buisnesses are either sanctioned or unsanctioned.",
            "Sanctioned buisnesses are limited.",
            "Unsanctioned buisnesses are free.",
            "The Crude Oil Data Exchange is a buisness that isn't free."
        ],
        "context_fol": [
            "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))",
            "\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))",
            "\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))",
            "Buisness(crudeoildataexchange) \u2227 \u00acFree(crudeoildataexchange)"
        ],
        "question": "Crude Oil Data Exchange is unsanctioned.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 370,
        "story_id": 123,
        "context": [
            "Buisnesses are either sanctioned or unsanctioned.",
            "Sanctioned buisnesses are limited.",
            "Unsanctioned buisnesses are free.",
            "The Crude Oil Data Exchange is a buisness that isn't free."
        ],
        "context_fol": [
            "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))",
            "\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))",
            "\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))",
            "Buisness(crudeoildataexchange) \u2227 \u00acFree(crudeoildataexchange)"
        ],
        "question": "Crude Oil Data Exchange is limited.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 750,
        "story_id": 301,
        "context": [
            "When something is depressing, it is sad.",
            "V is depressing. "
        ],
        "context_fol": [
            "\u2200x (Depressing(x) \u2192 Sad(x))",
            "\u2200x (V(x) \u2192 Depressing(x))"
        ],
        "question": "V is invigorating",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 314,
        "story_id": 103,
        "context": [
            "Palstaves are a type of early bronze axe.",
            "Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.",
            "John Evans is an archeologist who popularized the term \"palstave\".",
            "A paalstab is not an axe, but rather a digging shovel."
        ],
        "context_fol": [
            "\u2200x (Palstave(x) \u2192 From(x, earlybronzeage) \u2227 Axe(x))",
            "\u2200x \u2200y (Palstave(x) \u2227 Mould(y) \u2192 FoundIn(x, northerneurope) \u2227 FoundIn(x, westerneurope) \u2227 FoundIn(x, south-westerneurope) \u2227 CastIn(x, y))",
            "Archeologist(johnevans) \u2227 Popularized(johnevans, termpalstave)",
            "\u2200x (Paalstab(x) \u2192 \u00acAxe(x) \u2227 DiggingShovel(x))"
        ],
        "question": "John Evans Popularized the term paalstab.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 315,
        "story_id": 103,
        "context": [
            "Palstaves are a type of early bronze axe.",
            "Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.",
            "John Evans is an archeologist who popularized the term \"palstave\".",
            "A paalstab is not an axe, but rather a digging shovel."
        ],
        "context_fol": [
            "\u2200x (Palstave(x) \u2192 From(x, earlybronzeage) \u2227 Axe(x))",
            "\u2200x \u2200y (Palstave(x) \u2227 Mould(y) \u2192 FoundIn(x, northerneurope) \u2227 FoundIn(x, westerneurope) \u2227 FoundIn(x, south-westerneurope) \u2227 CastIn(x, y))",
            "Archeologist(johnevans) \u2227 Popularized(johnevans, termpalstave)",
            "\u2200x (Paalstab(x) \u2192 \u00acAxe(x) \u2227 DiggingShovel(x))"
        ],
        "question": "There is an axe that is commonly found in Western Europe.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 316,
        "story_id": 103,
        "context": [
            "Palstaves are a type of early bronze axe.",
            "Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.",
            "John Evans is an archeologist who popularized the term \"palstave\".",
            "A paalstab is not an axe, but rather a digging shovel."
        ],
        "context_fol": [
            "\u2200x (Palstave(x) \u2192 From(x, earlybronzeage) \u2227 Axe(x))",
            "\u2200x \u2200y (Palstave(x) \u2227 Mould(y) \u2192 FoundIn(x, northerneurope) \u2227 FoundIn(x, westerneurope) \u2227 FoundIn(x, south-westerneurope) \u2227 CastIn(x, y))",
            "Archeologist(johnevans) \u2227 Popularized(johnevans, termpalstave)",
            "\u2200x (Paalstab(x) \u2192 \u00acAxe(x) \u2227 DiggingShovel(x))"
        ],
        "question": "Archeologists haven't popularized anything.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 274,
        "story_id": 90,
        "context": [
            "Koei Tecmo is a Japanese video game and anime holding company.",
            "Holding companies hold several companies.",
            "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
            "Video game holding companies are holding companies."
        ],
        "context_fol": [
            "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)",
            "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))",
            "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)",
            "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
        ],
        "question": "Koei Tecmo holds another company.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 275,
        "story_id": 90,
        "context": [
            "Koei Tecmo is a Japanese video game and anime holding company.",
            "Holding companies hold several companies.",
            "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
            "Video game holding companies are holding companies."
        ],
        "context_fol": [
            "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)",
            "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))",
            "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)",
            "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
        ],
        "question": "Tecmo holds another company.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 276,
        "story_id": 90,
        "context": [
            "Koei Tecmo is a Japanese video game and anime holding company.",
            "Holding companies hold several companies.",
            "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
            "Video game holding companies are holding companies."
        ],
        "context_fol": [
            "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)",
            "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))",
            "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)",
            "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
        ],
        "question": "Koei Tecmo holds anime.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 570,
        "story_id": 199,
        "context": [
            "The PlayStation EyeToy is a camera accessory for the Playstation 2. ",
            "The PlayStation Eye is a camera accessory for the Playstation 3.",
            "The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.",
            "Camera accessory for the system is compatible with that system",
            "Only the Playstation Camera is compatible with more than one system."
        ],
        "context_fol": [
            "Accessory(pseyetoy, ps2)",
            "Accessory(pseye, ps3)",
            "Accessory(pscamera, ps4) \u2227 Accessory(pscamera, ps5)",
            "\u2200x \u2200y (Accessory(x, y) \u2192 Compatible(x, y))",
            "\u00acCompatible(pseye, ps2) \u2227 \u00acCompatible(pseye, ps4)\u2227\u00acCompatible(pseye, ps5)\u2227\u00acCompatible(pseyetoy, ps3)\u2227\u00acCompatible(pseyetoy, ps4)\u2227\u00acCompatible(pseyetoy, ps5)"
        ],
        "question": "The Playstation Eye can be used with the Playstation 2 and the Playstation 3.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 571,
        "story_id": 199,
        "context": [
            "The PlayStation EyeToy is a camera accessory for the Playstation 2. ",
            "The PlayStation Eye is a camera accessory for the Playstation 3.",
            "The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.",
            "Camera accessory for the system is compatible with that system",
            "Only the Playstation Camera is compatible with more than one system."
        ],
        "context_fol": [
            "Accessory(pseyetoy, ps2)",
            "Accessory(pseye, ps3)",
            "Accessory(pscamera, ps4) \u2227 Accessory(pscamera, ps5)",
            "\u2200x \u2200y (Accessory(x, y) \u2192 Compatible(x, y))",
            "\u00acCompatible(pseye, ps2) \u2227 \u00acCompatible(pseye, ps4)\u2227\u00acCompatible(pseye, ps5)\u2227\u00acCompatible(pseyetoy, ps3)\u2227\u00acCompatible(pseyetoy, ps4)\u2227\u00acCompatible(pseyetoy, ps5)"
        ],
        "question": "The Playstation EyeToy is compatible with the Playstation 2.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 572,
        "story_id": 199,
        "context": [
            "The PlayStation EyeToy is a camera accessory for the Playstation 2. ",
            "The PlayStation Eye is a camera accessory for the Playstation 3.",
            "The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.",
            "Camera accessory for the system is compatible with that system",
            "Only the Playstation Camera is compatible with more than one system."
        ],
        "context_fol": [
            "Accessory(pseyetoy, ps2)",
            "Accessory(pseye, ps3)",
            "Accessory(pscamera, ps4) \u2227 Accessory(pscamera, ps5)",
            "\u2200x \u2200y (Accessory(x, y) \u2192 Compatible(x, y))",
            "\u00acCompatible(pseye, ps2) \u2227 \u00acCompatible(pseye, ps4)\u2227\u00acCompatible(pseye, ps5)\u2227\u00acCompatible(pseyetoy, ps3)\u2227\u00acCompatible(pseyetoy, ps4)\u2227\u00acCompatible(pseyetoy, ps5)"
        ],
        "question": "The Playstation Camera can be used for all Playstation consoles.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 723,
        "story_id": 274,
        "context": [
            "Adam Buska is a European football player.",
            "If a European plays football, they play what Americans call soccer."
        ],
        "context_fol": [
            "FootballPlayer(adambuska) \u2227 European(adambuska)",
            "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))"
        ],
        "question": "Adam Buska plays what Americans call soccer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1157,
        "story_id": 411,
        "context": [
            "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
            "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
            "Some games published before 2010 support the Linux OS system. ",
            "All games on the Best Seller list are popular among young people. ",
            "FIFA22 neither supports the Linux OS system nor is it popular among young people."
        ],
        "context_fol": [
            "\u2200x (SoldMillion(x) \u2192 BestSeller(x))",
            "\u2200x (DevelopedByParadox(x) \u2192 SoldMillion(x))",
            "\u2203x ((PublishedBefore2010(x) \u2227 SupportLinuxSystem(x)))",
            "\u2200x (BestSeller(x) \u2192 Popular(x))",
            "\u00ac(SupportLinuxSystem(fifa21) \u2228 Popular(fifa21))"
        ],
        "question": "FIFA21 is published before 2010",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1158,
        "story_id": 411,
        "context": [
            "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
            "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
            "Some games published before 2010 support the Linux OS system. ",
            "All games on the Best Seller list are popular among young people. ",
            "FIFA22 neither supports the Linux OS system nor is it popular among young people."
        ],
        "context_fol": [
            "\u2200x (SoldMillion(x) \u2192 BestSeller(x))",
            "\u2200x (DevelopedByParadox(x) \u2192 SoldMillion(x))",
            "\u2203x ((PublishedBefore2010(x) \u2227 SupportLinuxSystem(x)))",
            "\u2200x (BestSeller(x) \u2192 Popular(x))",
            "\u00ac(SupportLinuxSystem(fifa21) \u2228 Popular(fifa21))"
        ],
        "question": "FIFA21 is published before 2010 and developed by Paradox Development Studio",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1159,
        "story_id": 411,
        "context": [
            "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
            "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
            "Some games published before 2010 support the Linux OS system. ",
            "All games on the Best Seller list are popular among young people. ",
            "FIFA22 neither supports the Linux OS system nor is it popular among young people."
        ],
        "context_fol": [
            "\u2200x (SoldMillion(x) \u2192 BestSeller(x))",
            "\u2200x (DevelopedByParadox(x) \u2192 SoldMillion(x))",
            "\u2203x ((PublishedBefore2010(x) \u2227 SupportLinuxSystem(x)))",
            "\u2200x (BestSeller(x) \u2192 Popular(x))",
            "\u00ac(SupportLinuxSystem(fifa21) \u2228 Popular(fifa21))"
        ],
        "question": "if FIFA21 is either a game published before 2010 or developed by Paradox Development Studio, then it is either in the Best Seller list and sold more than 1 million copies; or not in the Best Seller list and hasn't sold more than 1 million copies.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 593,
        "story_id": 206,
        "context": [
            "China is one of BRICS and its economy is emerging.",
            "India is one of BRICS and its economy is emerging.",
            "All people from China speak Chinese.",
            "All people from India speak Hindi or English.",
            "There is an Indian."
        ],
        "context_fol": [
            "\u2200x (China(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
            "\u2200x (India(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
            "\u2200x \u2200y (From(x, y) \u2227 China(y) \u2192 Speak(x, chinese))",
            "\u2200x \u2200y (From(x, y) \u2227 India(y) \u2192 Speak(x, hindi) \u2228 Speak(x, english))",
            "\u2203x \u2203y (From(x, y) \u2227 India(y))"
        ],
        "question": "All people from BRICS neither speak Hindi nor speak English.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 594,
        "story_id": 206,
        "context": [
            "China is one of BRICS and its economy is emerging.",
            "India is one of BRICS and its economy is emerging.",
            "All people from China speak Chinese.",
            "All people from India speak Hindi or English.",
            "There is an Indian."
        ],
        "context_fol": [
            "\u2200x (China(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
            "\u2200x (India(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
            "\u2200x \u2200y (From(x, y) \u2227 China(y) \u2192 Speak(x, chinese))",
            "\u2200x \u2200y (From(x, y) \u2227 India(y) \u2192 Speak(x, hindi) \u2228 Speak(x, english))",
            "\u2203x \u2203y (From(x, y) \u2227 India(y))"
        ],
        "question": "India's economy is not emerging.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 595,
        "story_id": 206,
        "context": [
            "China is one of BRICS and its economy is emerging.",
            "India is one of BRICS and its economy is emerging.",
            "All people from China speak Chinese.",
            "All people from India speak Hindi or English.",
            "There is an Indian."
        ],
        "context_fol": [
            "\u2200x (China(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
            "\u2200x (India(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))",
            "\u2200x \u2200y (From(x, y) \u2227 China(y) \u2192 Speak(x, chinese))",
            "\u2200x \u2200y (From(x, y) \u2227 India(y) \u2192 Speak(x, hindi) \u2228 Speak(x, english))",
            "\u2203x \u2203y (From(x, y) \u2227 India(y))"
        ],
        "question": "There is a person from BRICS speaking Hindi.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 265,
        "story_id": 87,
        "context": [
            "Daveed Diggs is an actor and film producer.",
            "Daveed Diggs played two roles in the musical Hamilton.",
            "One of the actors from Hamilton won the best actor award.",
            "The actor playing Thomas Jefferson won the best actor award.",
            "Daveed Diggs played Thomas Jefferson.",
            "Musicals are not films."
        ],
        "context_fol": [
            "Actor(daveedDiggs) \u2227 FilmProducer(daveedDiggs)",
            "PlayedTwoRoles(daveedDiggs) \u2227 PlayedIn(daveedDiggs, hamilton) \u2227 Musical(hamilton)",
            "\u2203x (Actor(x) \u2227 PlayedIn(x, hamilton) \u2227 WonBestActorAward(x))",
            "\u2200x (Actor(x) \u2227 Played(x, thomasJefferson) \u2192 WonBestActorAward(x))",
            "Played(daveedDiggs, thomasJefferson)",
            "\u2200x (Musical(x) \u2192 \u00acFilm(x))"
        ],
        "question": "Hamilton is a film.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 266,
        "story_id": 87,
        "context": [
            "Daveed Diggs is an actor and film producer.",
            "Daveed Diggs played two roles in the musical Hamilton.",
            "One of the actors from Hamilton won the best actor award.",
            "The actor playing Thomas Jefferson won the best actor award.",
            "Daveed Diggs played Thomas Jefferson.",
            "Musicals are not films."
        ],
        "context_fol": [
            "Actor(daveedDiggs) \u2227 FilmProducer(daveedDiggs)",
            "PlayedTwoRoles(daveedDiggs) \u2227 PlayedIn(daveedDiggs, hamilton) \u2227 Musical(hamilton)",
            "\u2203x (Actor(x) \u2227 PlayedIn(x, hamilton) \u2227 WonBestActorAward(x))",
            "\u2200x (Actor(x) \u2227 Played(x, thomasJefferson) \u2192 WonBestActorAward(x))",
            "Played(daveedDiggs, thomasJefferson)",
            "\u2200x (Musical(x) \u2192 \u00acFilm(x))"
        ],
        "question": "Daveed Diggs won the best actor award.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 267,
        "story_id": 87,
        "context": [
            "Daveed Diggs is an actor and film producer.",
            "Daveed Diggs played two roles in the musical Hamilton.",
            "One of the actors from Hamilton won the best actor award.",
            "The actor playing Thomas Jefferson won the best actor award.",
            "Daveed Diggs played Thomas Jefferson.",
            "Musicals are not films."
        ],
        "context_fol": [
            "Actor(daveedDiggs) \u2227 FilmProducer(daveedDiggs)",
            "PlayedTwoRoles(daveedDiggs) \u2227 PlayedIn(daveedDiggs, hamilton) \u2227 Musical(hamilton)",
            "\u2203x (Actor(x) \u2227 PlayedIn(x, hamilton) \u2227 WonBestActorAward(x))",
            "\u2200x (Actor(x) \u2227 Played(x, thomasJefferson) \u2192 WonBestActorAward(x))",
            "Played(daveedDiggs, thomasJefferson)",
            "\u2200x (Musical(x) \u2192 \u00acFilm(x))"
        ],
        "question": "Hamilton won two awards.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 630,
        "story_id": 221,
        "context": [
            "Ernest Pohl was a Polish football player. ",
            "A football player in the Polish First Division has scored over 180 goals. ",
            "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
            "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ",
            "Ernest Pohl is from Ruda \u015al\u0105ska. "
        ],
        "context_fol": [
            "PolishFootballPlayer(ernestpohl)",
            "\u2203x (In(x, polishfirstdivision) \u2227 ScoredMoreThan180Goals(x))",
            "ScoredMoreThan180Goals(ernestpohl) \u2227 In(ernestpohl, polishfirstdivision)",
            "\u2203x (NamedAfter(gornikzabrze, x) \u2227 FootballPlayer(x) \u2227 From(x, rudaslaska))",
            "From(ernestpohl, rudaslaska)"
        ],
        "question": "Ernest Pohl has not scored more than 180 goals.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 631,
        "story_id": 221,
        "context": [
            "Ernest Pohl was a Polish football player. ",
            "A football player in the Polish First Division has scored over 180 goals. ",
            "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
            "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ",
            "Ernest Pohl is from Ruda \u015al\u0105ska. "
        ],
        "context_fol": [
            "PolishFootballPlayer(ernestpohl)",
            "\u2203x (In(x, polishfirstdivision) \u2227 ScoredMoreThan180Goals(x))",
            "ScoredMoreThan180Goals(ernestpohl) \u2227 In(ernestpohl, polishfirstdivision)",
            "\u2203x (NamedAfter(gornikzabrze, x) \u2227 FootballPlayer(x) \u2227 From(x, rudaslaska))",
            "From(ernestpohl, rudaslaska)"
        ],
        "question": "G\u00f3rnik Zabrze's stadium was named after Ernest Pohl.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 418,
        "story_id": 142,
        "context": [
            "Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.",
            "Ann J. Land ran unopposed for the Philadephia City Council in 1980.",
            "People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.",
            "Michael Nutter was a political challenger.",
            "Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987."
        ],
        "context_fol": [
            "PhiladephiaCouncil(annJLand) \u2227 DemocraticParty(annJLand)",
            "Year(y1980) \u2192 PhiladephiaCouncil(annJLand) \u2227 RunFor(annJLand)",
            "\u2200x (RunFor(x) \u2227 PhiladephiaCouncil(x) \u2192 Elected(x))",
            "Challenger(nutter)",
            "Year(y1987) \u2192 PhiladephiaCouncil(annJLand) \u2227 RunFor(annJLand) \u2227 Defeated(annJLand, nutter)"
        ],
        "question": "Ann J. Land was elected to the Philadelphia City Council in 1980.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 419,
        "story_id": 142,
        "context": [
            "Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.",
            "Ann J. Land ran unopposed for the Philadephia City Council in 1980.",
            "People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.",
            "Michael Nutter was a political challenger.",
            "Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987."
        ],
        "context_fol": [
            "PhiladephiaCouncil(annJLand) \u2227 DemocraticParty(annJLand)",
            "Year(y1980) \u2192 PhiladephiaCouncil(annJLand) \u2227 RunFor(annJLand)",
            "\u2200x (RunFor(x) \u2227 PhiladephiaCouncil(x) \u2192 Elected(x))",
            "Challenger(nutter)",
            "Year(y1987) \u2192 PhiladephiaCouncil(annJLand) \u2227 RunFor(annJLand) \u2227 Defeated(annJLand, nutter)"
        ],
        "question": "Ann J. Land was elected to the Philadelphia City Council in 1987.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 420,
        "story_id": 142,
        "context": [
            "Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.",
            "Ann J. Land ran unopposed for the Philadephia City Council in 1980.",
            "People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.",
            "Michael Nutter was a political challenger.",
            "Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987."
        ],
        "context_fol": [
            "PhiladephiaCouncil(annJLand) \u2227 DemocraticParty(annJLand)",
            "Year(y1980) \u2192 PhiladephiaCouncil(annJLand) \u2227 RunFor(annJLand)",
            "\u2200x (RunFor(x) \u2227 PhiladephiaCouncil(x) \u2192 Elected(x))",
            "Challenger(nutter)",
            "Year(y1987) \u2192 PhiladephiaCouncil(annJLand) \u2227 RunFor(annJLand) \u2227 Defeated(annJLand, nutter)"
        ],
        "question": "There was some member of the Democratic Party elected to the Philadelphia City Council in 1980.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 337,
        "story_id": 111,
        "context": [
            "Aberdeen won the cup in the 2013 final.",
            "Rangers won the cup in 2014 final.",
            "Aberdeen and Rangers are different teams.",
            "Different teams cannot win the same cup in a given year's final."
        ],
        "context_fol": [
            "WonCup(aberdeen, twentythirteen)",
            "WonCup(rangers, twentyfourteen)",
            "Different(aberdeen, rangers) \u2227 Different(rangers, aberdeen)",
            "\u2200x \u2200y \u2200z (Different(x, y)  \u2227 WonCup(x, z)  \u2192 \u00acWonCup(y, z))"
        ],
        "question": "Rangers won the cup in 2015.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 338,
        "story_id": 111,
        "context": [
            "Aberdeen won the cup in the 2013 final.",
            "Rangers won the cup in 2014 final.",
            "Aberdeen and Rangers are different teams.",
            "Different teams cannot win the same cup in a given year's final."
        ],
        "context_fol": [
            "WonCup(aberdeen, twentythirteen)",
            "WonCup(rangers, twentyfourteen)",
            "Different(aberdeen, rangers) \u2227 Different(rangers, aberdeen)",
            "\u2200x \u2200y \u2200z (Different(x, y)  \u2227 WonCup(x, z)  \u2192 \u00acWonCup(y, z))"
        ],
        "question": "Rangers won the cup in 2013.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 339,
        "story_id": 111,
        "context": [
            "Aberdeen won the cup in the 2013 final.",
            "Rangers won the cup in 2014 final.",
            "Aberdeen and Rangers are different teams.",
            "Different teams cannot win the same cup in a given year's final."
        ],
        "context_fol": [
            "WonCup(aberdeen, twentythirteen)",
            "WonCup(rangers, twentyfourteen)",
            "Different(aberdeen, rangers) \u2227 Different(rangers, aberdeen)",
            "\u2200x \u2200y \u2200z (Different(x, y)  \u2227 WonCup(x, z)  \u2192 \u00acWonCup(y, z))"
        ],
        "question": "Aberdeen has won a cup before.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 848,
        "story_id": 329,
        "context": [
            "All young working professionals who have regular 9-5 jobs also have pets.",
            "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.",
            "All people who have pets are people who have at least one child.",
            "People who do not have at least one child are people who own a sports car.",
            "Mary either does not own a sports car or, if they do, then they do not have at least one child."
        ],
        "context_fol": [
            "\u2200x (Working(x) \u2192 Pets(x))",
            "\u2203x (Manhattan(x) \u2227 Working(x))",
            "\u2200x (Pets(x) \u2192 Child(x))",
            "\u2200x (Child(x) \u2192 \u00acCar(x))",
            "\u00ac(Car(mary) \u2295 Child(mary))"
        ],
        "question": "Mary is a person who lives in Manhattan.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 849,
        "story_id": 329,
        "context": [
            "All young working professionals who have regular 9-5 jobs also have pets.",
            "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.",
            "All people who have pets are people who have at least one child.",
            "People who do not have at least one child are people who own a sports car.",
            "Mary either does not own a sports car or, if they do, then they do not have at least one child."
        ],
        "context_fol": [
            "\u2200x (Working(x) \u2192 Pets(x))",
            "\u2203x (Manhattan(x) \u2227 Working(x))",
            "\u2200x (Pets(x) \u2192 Child(x))",
            "\u2200x (Child(x) \u2192 \u00acCar(x))",
            "\u00ac(Car(mary) \u2295 Child(mary))"
        ],
        "question": "Mary is a person who lives in Manhattan and is a young working professional who has a regular 9-5 job.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 850,
        "story_id": 329,
        "context": [
            "All young working professionals who have regular 9-5 jobs also have pets.",
            "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.",
            "All people who have pets are people who have at least one child.",
            "People who do not have at least one child are people who own a sports car.",
            "Mary either does not own a sports car or, if they do, then they do not have at least one child."
        ],
        "context_fol": [
            "\u2200x (Working(x) \u2192 Pets(x))",
            "\u2203x (Manhattan(x) \u2227 Working(x))",
            "\u2200x (Pets(x) \u2192 Child(x))",
            "\u2200x (Child(x) \u2192 \u00acCar(x))",
            "\u00ac(Car(mary) \u2295 Child(mary))"
        ],
        "question": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1085,
        "story_id": 397,
        "context": [
            "Either block design or event-related design. ",
            "All event-related designs are brain image acquisition.",
            "All brain image acquisition is preceded by data processing.",
            "Nothing preceded by data processing acquires data.",
            "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."
        ],
        "context_fol": [
            "\u2200x (BlockDesign(x) \u2228 Event-relatedDesign(x))",
            "\u2200x (Event-relatedDesign(x) \u2192 BrainImageAcquisition(x))",
            "\u2200x (BrainImageAcquisition(x) \u2192 PrecededByDataProcessing(x))",
            "\u2200x (PrecededByDataProcessing(x) \u2192 \u00acAcquiringData(x))",
            "(Event-relatedDesign(pictureMemory) \u2227 AcquiringData(pictureMemory)) \u2228 (\u00acEvent-relatedDesign(pictureMemory) \u2227 \u00acAcquiringData(pictureMemory))"
        ],
        "question": "Picture memory is preceded by data processing.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1086,
        "story_id": 397,
        "context": [
            "Either block design or event-related design. ",
            "All event-related designs are brain image acquisition.",
            "All brain image acquisition is preceded by data processing.",
            "Nothing preceded by data processing acquires data.",
            "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."
        ],
        "context_fol": [
            "\u2200x (BlockDesign(x) \u2228 Event-relatedDesign(x))",
            "\u2200x (Event-relatedDesign(x) \u2192 BrainImageAcquisition(x))",
            "\u2200x (BrainImageAcquisition(x) \u2192 PrecededByDataProcessing(x))",
            "\u2200x (PrecededByDataProcessing(x) \u2192 \u00acAcquiringData(x))",
            "(Event-relatedDesign(pictureMemory) \u2227 AcquiringData(pictureMemory)) \u2228 (\u00acEvent-relatedDesign(pictureMemory) \u2227 \u00acAcquiringData(pictureMemory))"
        ],
        "question": "Picture memory is a block design.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1087,
        "story_id": 397,
        "context": [
            "Either block design or event-related design. ",
            "All event-related designs are brain image acquisition.",
            "All brain image acquisition is preceded by data processing.",
            "Nothing preceded by data processing acquires data.",
            "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."
        ],
        "context_fol": [
            "\u2200x (BlockDesign(x) \u2228 Event-relatedDesign(x))",
            "\u2200x (Event-relatedDesign(x) \u2192 BrainImageAcquisition(x))",
            "\u2200x (BrainImageAcquisition(x) \u2192 PrecededByDataProcessing(x))",
            "\u2200x (PrecededByDataProcessing(x) \u2192 \u00acAcquiringData(x))",
            "(Event-relatedDesign(pictureMemory) \u2227 AcquiringData(pictureMemory)) \u2228 (\u00acEvent-relatedDesign(pictureMemory) \u2227 \u00acAcquiringData(pictureMemory))"
        ],
        "question": "Picture memory is either a block design or acquiring data.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1088,
        "story_id": 397,
        "context": [
            "Either block design or event-related design. ",
            "All event-related designs are brain image acquisition.",
            "All brain image acquisition is preceded by data processing.",
            "Nothing preceded by data processing acquires data.",
            "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."
        ],
        "context_fol": [
            "\u2200x (BlockDesign(x) \u2228 Event-relatedDesign(x))",
            "\u2200x (Event-relatedDesign(x) \u2192 BrainImageAcquisition(x))",
            "\u2200x (BrainImageAcquisition(x) \u2192 PrecededByDataProcessing(x))",
            "\u2200x (PrecededByDataProcessing(x) \u2192 \u00acAcquiringData(x))",
            "(Event-relatedDesign(pictureMemory) \u2227 AcquiringData(pictureMemory)) \u2228 (\u00acEvent-relatedDesign(pictureMemory) \u2227 \u00acAcquiringData(pictureMemory))"
        ],
        "question": "If picture memory is not acquiring data, then picture memory is a block design and acquiring data.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 726,
        "story_id": 277,
        "context": [
            "The USS Lyon was a US Navy ship involved in WWII.",
            "All ships involved in WWII are currently decommissioned or in a museum."
        ],
        "context_fol": [
            "(USNavyShip(usslyon) \u2227 InWWII(usslyon))",
            "\u2200x (InWWII(x) \u2192 (Decommissioned(x) \u2228 InMuseum(x)))"
        ],
        "question": "The USS Lyon is decommissioned.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 929,
        "story_id": 349,
        "context": [
            "All disposable chopsticks are made from trees.",
            "Some chopsticks are eco-friendly.",
            "Either disposable chopsticks or reusable chopsticks. ",
            "If chopsticks are made from metals, then they are not made from plastics. ",
            "All reusable chopsticks are made from metal.",
            "Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics."
        ],
        "context_fol": [
            "\u2200x (DisposableChopsticks(x) \u2192 MadeFromTrees(x))",
            "\u2203x (EcoFriendly(x))",
            "\u2200x (DisposableChopsticks(x) \u2295 Reusable(x)) ",
            "\u2200x (MadeFromMetals(x) \u2192 \u00acMadeFromPlastics(x))",
            "\u2200x (Reusable(x) \u2192 MadeFromMetals(x))",
            "\u00ac(MadeFromMetals(chopsticksAtRestaurants) \u2295 MadeFromPlastics(chopsticksAtRestaurants))"
        ],
        "question": "Chopsticks at restaurants are eco-friendly.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 930,
        "story_id": 349,
        "context": [
            "All disposable chopsticks are made from trees.",
            "Some chopsticks are eco-friendly.",
            "Either disposable chopsticks or reusable chopsticks. ",
            "If chopsticks are made from metals, then they are not made from plastics. ",
            "All reusable chopsticks are made from metal.",
            "Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics."
        ],
        "context_fol": [
            "\u2200x (DisposableChopsticks(x) \u2192 MadeFromTrees(x))",
            "\u2203x (EcoFriendly(x))",
            "\u2200x (DisposableChopsticks(x) \u2295 Reusable(x)) ",
            "\u2200x (MadeFromMetals(x) \u2192 \u00acMadeFromPlastics(x))",
            "\u2200x (Reusable(x) \u2192 MadeFromMetals(x))",
            "\u00ac(MadeFromMetals(chopsticksAtRestaurants) \u2295 MadeFromPlastics(chopsticksAtRestaurants))"
        ],
        "question": "Chopsticks at restaurants are eco-friendly or made from trees.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 931,
        "story_id": 349,
        "context": [
            "All disposable chopsticks are made from trees.",
            "Some chopsticks are eco-friendly.",
            "Either disposable chopsticks or reusable chopsticks. ",
            "If chopsticks are made from metals, then they are not made from plastics. ",
            "All reusable chopsticks are made from metal.",
            "Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics."
        ],
        "context_fol": [
            "\u2200x (DisposableChopsticks(x) \u2192 MadeFromTrees(x))",
            "\u2203x (EcoFriendly(x))",
            "\u2200x (DisposableChopsticks(x) \u2295 Reusable(x)) ",
            "\u2200x (MadeFromMetals(x) \u2192 \u00acMadeFromPlastics(x))",
            "\u2200x (Reusable(x) \u2192 MadeFromMetals(x))",
            "\u00ac(MadeFromMetals(chopsticksAtRestaurants) \u2295 MadeFromPlastics(chopsticksAtRestaurants))"
        ],
        "question": "If Chopsticks at restaurants are made from plastics or made from trees, then Chopsticks at restaurants are made from plastics and are eco-friendly.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1285,
        "story_id": 445,
        "context": [
            "Anything that is lazy is unproductive.",
            "No one unproductive is an energetic person.",
            "If something is a sloth, then it is lazy.",
            "Some animals are sloths.",
            "Sid is not either an energetic person or a sloth."
        ],
        "context_fol": [
            "\u2200x (Lazy(x) \u2192 Unproductive(x))",
            "\u2200x (Unproductive(x) \u2192 \u00acEnergetic(x))",
            "\u2200x (Sloth(x) \u2192 Lazy(x))",
            "\u2203x (Animal(x) \u2227 Sloth(x))",
            "\u00acEnergetic(sid) \u2228 Sloth(sid)"
        ],
        "question": "Sid is an animal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1286,
        "story_id": 445,
        "context": [
            "Anything that is lazy is unproductive.",
            "No one unproductive is an energetic person.",
            "If something is a sloth, then it is lazy.",
            "Some animals are sloths.",
            "Sid is not either an energetic person or a sloth."
        ],
        "context_fol": [
            "\u2200x (Lazy(x) \u2192 Unproductive(x))",
            "\u2200x (Unproductive(x) \u2192 \u00acEnergetic(x))",
            "\u2200x (Sloth(x) \u2192 Lazy(x))",
            "\u2203x (Animal(x) \u2227 Sloth(x))",
            "\u00acEnergetic(sid) \u2228 Sloth(sid)"
        ],
        "question": "Sid is an energetic person and an animal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1287,
        "story_id": 445,
        "context": [
            "Anything that is lazy is unproductive.",
            "No one unproductive is an energetic person.",
            "If something is a sloth, then it is lazy.",
            "Some animals are sloths.",
            "Sid is not either an energetic person or a sloth."
        ],
        "context_fol": [
            "\u2200x (Lazy(x) \u2192 Unproductive(x))",
            "\u2200x (Unproductive(x) \u2192 \u00acEnergetic(x))",
            "\u2200x (Sloth(x) \u2192 Lazy(x))",
            "\u2203x (Animal(x) \u2227 Sloth(x))",
            "\u00acEnergetic(sid) \u2228 Sloth(sid)"
        ],
        "question": "If Sid is either an animal or unproductive, then Sid is not an energetic person.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 542,
        "story_id": 187,
        "context": [
            "European soccer clubs can attend UCL, UEL and UECL.",
            "A soccer club eligible to attend UCL has a higher ranking than a soccer club eligible to attend UEL.",
            "A soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL.",
            "Manchester United and Machester City are both European soccer clubs.",
            "Manchester United is eligible to attend UEL next season.",
            "Manchester City is eligible to attend UCL next season."
        ],
        "context_fol": [
            "\u2200x (European(x) \u2227 SoccerClub(x) \u2192 Attend(x, ucl) \u2228 Attend(x, uel) \u2228 Attend(x, uecl))",
            "\u2200x \u2200y (SoccerClub(x) \u2227 SoccerClub(y) \u2227 Attend(x, ucl) \u2227 Attend(y, uel) \u2192 HigherRank(x, y))",
            "\u2200x \u2200y (SoccerClub(x) \u2227 SoccerClub(y) \u2227 Attend(x, uel) \u2227 Attend(y, uecl) \u2192 HigherRank(x, y))",
            "European(manchesterunited) \u2227 SoccerClub(manchesterunited) \u2227 European(manchestercity) \u2227 SoccerClub(manchestercity)",
            "Attend(manchesterunited, uel)",
            "Attend(manchestercity, ucl)"
        ],
        "question": "Manchester City has a higher ranking than Manchester United.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 193,
        "story_id": 65,
        "context": [
            "If a person coach a football club, the person is a football coach.",
            "If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.",
            "Minnesota Vikings is a football club.",
            "Dennis Green coached Minnesota Vikings.",
            "Cris Carter had 13 touchdown receptions.",
            "Minnesota Vikings was in the National Football League in 1997.",
            "John Randle was Minnesota Vikings defensive tackle in 1997."
        ],
        "context_fol": [
            "\u2200x \u2200y (Coach(x, y) \u2227 IsFootballClub(y) \u2192 IsFootballCoach(x))",
            "\u2200x \u2200y \u2200z (PlayFor(x, y) \u2227 NFLTeamYear(y, z) \u2227 InTeam(x, z) \u2192 PlayInNFL(x))",
            "IsFootballClub(minnesota_Vikings)",
            "Coach(dennis_Green, minnesota_Vikings)",
            "TouchDownReceptionTime(cris_Carter, t13)",
            "NFLTeamYear(minnesota_Vikings, y1997)",
            "Position(john_Randle, defensive_tackle) \u2227 InTeam(john_Randle, y1997) \u2227 PlayFor(john_Randle, minnesota_Vikings)"
        ],
        "question": "Dennis Green is a football coach.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 194,
        "story_id": 65,
        "context": [
            "If a person coach a football club, the person is a football coach.",
            "If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.",
            "Minnesota Vikings is a football club.",
            "Dennis Green coached Minnesota Vikings.",
            "Cris Carter had 13 touchdown receptions.",
            "Minnesota Vikings was in the National Football League in 1997.",
            "John Randle was Minnesota Vikings defensive tackle in 1997."
        ],
        "context_fol": [
            "\u2200x \u2200y (Coach(x, y) \u2227 IsFootballClub(y) \u2192 IsFootballCoach(x))",
            "\u2200x \u2200y \u2200z (PlayFor(x, y) \u2227 NFLTeamYear(y, z) \u2227 InTeam(x, z) \u2192 PlayInNFL(x))",
            "IsFootballClub(minnesota_Vikings)",
            "Coach(dennis_Green, minnesota_Vikings)",
            "TouchDownReceptionTime(cris_Carter, t13)",
            "NFLTeamYear(minnesota_Vikings, y1997)",
            "Position(john_Randle, defensive_tackle) \u2227 InTeam(john_Randle, y1997) \u2227 PlayFor(john_Randle, minnesota_Vikings)"
        ],
        "question": "John Randle didn't play in the National Football League.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 195,
        "story_id": 65,
        "context": [
            "If a person coach a football club, the person is a football coach.",
            "If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.",
            "Minnesota Vikings is a football club.",
            "Dennis Green coached Minnesota Vikings.",
            "Cris Carter had 13 touchdown receptions.",
            "Minnesota Vikings was in the National Football League in 1997.",
            "John Randle was Minnesota Vikings defensive tackle in 1997."
        ],
        "context_fol": [
            "\u2200x \u2200y (Coach(x, y) \u2227 IsFootballClub(y) \u2192 IsFootballCoach(x))",
            "\u2200x \u2200y \u2200z (PlayFor(x, y) \u2227 NFLTeamYear(y, z) \u2227 InTeam(x, z) \u2192 PlayInNFL(x))",
            "IsFootballClub(minnesota_Vikings)",
            "Coach(dennis_Green, minnesota_Vikings)",
            "TouchDownReceptionTime(cris_Carter, t13)",
            "NFLTeamYear(minnesota_Vikings, y1997)",
            "Position(john_Randle, defensive_tackle) \u2227 InTeam(john_Randle, y1997) \u2227 PlayFor(john_Randle, minnesota_Vikings)"
        ],
        "question": "Cris Carter played for Minnesota Vikings.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1338,
        "story_id": 462,
        "context": [
            "All cats are cute.",
            "Ghosts do not exist.",
            "An animal is either a cat or a dog.",
            "Nothing that barks is lovely. ",
            "If something is a dog, then it barks.",
            "Grace is either a cat and a dog, or neither a cat nor a dog."
        ],
        "context_fol": [
            "\u2200x (Cat(x) \u2192 Cute(x))",
            "\u2200x (\u00acGhost(x))",
            "\u2200x (Cat(x) \u2228 Dog(x))",
            "\u2200x (Bark(x) \u2192 \u00acLovely(x))",
            "\u2200x (Dog(x) \u2192 Bark(x))",
            "(Cat(grace) \u2227 Dog(grace)) \u2295 (\u00acCat(grace) \u2227 \u00acDog(grace))"
        ],
        "question": "Grace is a ghost.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1339,
        "story_id": 462,
        "context": [
            "All cats are cute.",
            "Ghosts do not exist.",
            "An animal is either a cat or a dog.",
            "Nothing that barks is lovely. ",
            "If something is a dog, then it barks.",
            "Grace is either a cat and a dog, or neither a cat nor a dog."
        ],
        "context_fol": [
            "\u2200x (Cat(x) \u2192 Cute(x))",
            "\u2200x (\u00acGhost(x))",
            "\u2200x (Cat(x) \u2228 Dog(x))",
            "\u2200x (Bark(x) \u2192 \u00acLovely(x))",
            "\u2200x (Dog(x) \u2192 Bark(x))",
            "(Cat(grace) \u2227 Dog(grace)) \u2295 (\u00acCat(grace) \u2227 \u00acDog(grace))"
        ],
        "question": "If Grace is either both cute and lovely, or neither cute nor lovely, then Grace is either a dog or a ghost.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1340,
        "story_id": 462,
        "context": [
            "All cats are cute.",
            "Ghosts do not exist.",
            "An animal is either a cat or a dog.",
            "Nothing that barks is lovely. ",
            "If something is a dog, then it barks.",
            "Grace is either a cat and a dog, or neither a cat nor a dog."
        ],
        "context_fol": [
            "\u2200x (Cat(x) \u2192 Cute(x))",
            "\u2200x (\u00acGhost(x))",
            "\u2200x (Cat(x) \u2228 Dog(x))",
            "\u2200x (Bark(x) \u2192 \u00acLovely(x))",
            "\u2200x (Dog(x) \u2192 Bark(x))",
            "(Cat(grace) \u2227 Dog(grace)) \u2295 (\u00acCat(grace) \u2227 \u00acDog(grace))"
        ],
        "question": "If Grace is not both a ghost and lovely, then Grace is either a cat or cute.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 299,
        "story_id": 99,
        "context": [
            "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.",
            "Baku is northwest of Shafaq-Asiman.",
            "If place A is northwest of place B, then place B is southeast of place A."
        ],
        "context_fol": [
            "LargeComplex(shafaq-asiman) \u2227 LargeComplex(shafaq-asiman) \u2227 Offshore(shafaq-asiman) \u2227 GeologicalStructures(shafaq-asiman) \u2227 In(shafaq-asiman, caspiansea)",
            "NorthwestOf(baku, shafaq-asiman)",
            "\u2200x \u2200y (NorthwestOf(x, y) \u2192 SoutheastOf(y, x))"
        ],
        "question": "Baku is southeast of Shafaq-Asiman.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 300,
        "story_id": 99,
        "context": [
            "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.",
            "Baku is northwest of Shafaq-Asiman.",
            "If place A is northwest of place B, then place B is southeast of place A."
        ],
        "context_fol": [
            "LargeComplex(shafaq-asiman) \u2227 LargeComplex(shafaq-asiman) \u2227 Offshore(shafaq-asiman) \u2227 GeologicalStructures(shafaq-asiman) \u2227 In(shafaq-asiman, caspiansea)",
            "NorthwestOf(baku, shafaq-asiman)",
            "\u2200x \u2200y (NorthwestOf(x, y) \u2192 SoutheastOf(y, x))"
        ],
        "question": "A large complex is southeast of Baku.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 301,
        "story_id": 99,
        "context": [
            "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.",
            "Baku is northwest of Shafaq-Asiman.",
            "If place A is northwest of place B, then place B is southeast of place A."
        ],
        "context_fol": [
            "LargeComplex(shafaq-asiman) \u2227 LargeComplex(shafaq-asiman) \u2227 Offshore(shafaq-asiman) \u2227 GeologicalStructures(shafaq-asiman) \u2227 In(shafaq-asiman, caspiansea)",
            "NorthwestOf(baku, shafaq-asiman)",
            "\u2200x \u2200y (NorthwestOf(x, y) \u2192 SoutheastOf(y, x))"
        ],
        "question": "Baku is not northwest of an offshore geological structures.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 214,
        "story_id": 71,
        "context": [
            "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.",
            "Herodicus was born in the city of Selymbria.",
            "Selymbria is a colony of the city-state Megara.",
            "One of the tutors of Hippocrates was Herodicus.",
            "Massages were recommended by Herodicus.",
            "Some of theories of Herodicus are considered to be the foundation of sports medicine."
        ],
        "context_fol": [
            "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 GymnasticMaster(herodicus)",
            "Born(herodicus, selymbia) \u2227 City(selymbia)",
            "Colony(selymbia, megara) \u2227 CityState(megara)",
            "Tutored(herodicus, hippocrates)",
            "Recommended(herodicus, massages)",
            "\u2203x (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine))"
        ],
        "question": "Herodicus tutored Hippocrates.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 215,
        "story_id": 71,
        "context": [
            "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.",
            "Herodicus was born in the city of Selymbria.",
            "Selymbria is a colony of the city-state Megara.",
            "One of the tutors of Hippocrates was Herodicus.",
            "Massages were recommended by Herodicus.",
            "Some of theories of Herodicus are considered to be the foundation of sports medicine."
        ],
        "context_fol": [
            "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 GymnasticMaster(herodicus)",
            "Born(herodicus, selymbia) \u2227 City(selymbia)",
            "Colony(selymbia, megara) \u2227 CityState(megara)",
            "Tutored(herodicus, hippocrates)",
            "Recommended(herodicus, massages)",
            "\u2203x (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine))"
        ],
        "question": "Herodicus was tutored by Hippocrates.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 216,
        "story_id": 71,
        "context": [
            "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.",
            "Herodicus was born in the city of Selymbria.",
            "Selymbria is a colony of the city-state Megara.",
            "One of the tutors of Hippocrates was Herodicus.",
            "Massages were recommended by Herodicus.",
            "Some of theories of Herodicus are considered to be the foundation of sports medicine."
        ],
        "context_fol": [
            "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 GymnasticMaster(herodicus)",
            "Born(herodicus, selymbia) \u2227 City(selymbia)",
            "Colony(selymbia, megara) \u2227 CityState(megara)",
            "Tutored(herodicus, hippocrates)",
            "Recommended(herodicus, massages)",
            "\u2203x (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine))"
        ],
        "question": "Herodicus was born in a city-state.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 217,
        "story_id": 71,
        "context": [
            "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.",
            "Herodicus was born in the city of Selymbria.",
            "Selymbria is a colony of the city-state Megara.",
            "One of the tutors of Hippocrates was Herodicus.",
            "Massages were recommended by Herodicus.",
            "Some of theories of Herodicus are considered to be the foundation of sports medicine."
        ],
        "context_fol": [
            "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 GymnasticMaster(herodicus)",
            "Born(herodicus, selymbia) \u2227 City(selymbia)",
            "Colony(selymbia, megara) \u2227 CityState(megara)",
            "Tutored(herodicus, hippocrates)",
            "Recommended(herodicus, massages)",
            "\u2203x (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine))"
        ],
        "question": "Herodicus did not recommend massages.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 218,
        "story_id": 71,
        "context": [
            "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.",
            "Herodicus was born in the city of Selymbria.",
            "Selymbria is a colony of the city-state Megara.",
            "One of the tutors of Hippocrates was Herodicus.",
            "Massages were recommended by Herodicus.",
            "Some of theories of Herodicus are considered to be the foundation of sports medicine."
        ],
        "context_fol": [
            "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 GymnasticMaster(herodicus)",
            "Born(herodicus, selymbia) \u2227 City(selymbia)",
            "Colony(selymbia, megara) \u2227 CityState(megara)",
            "Tutored(herodicus, hippocrates)",
            "Recommended(herodicus, massages)",
            "\u2203x (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine))"
        ],
        "question": "Herodicus was born in a colony of a city-state.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1263,
        "story_id": 438,
        "context": [
            "No kid loves the Opera.",
            "All adults love the Opera.",
            "If someone is a scientist, then they are an adult.",
            "Some students are kids.",
            "Billy is a kid."
        ],
        "context_fol": [
            "\u2200x (Kid(x) \u2192 \u00acOperaLover(x))",
            "\u2200x (Adult(x) \u2192 OperaLover(x))",
            "\u2200x (Scientist(x) \u2192 Adult(x))",
            "\u2203x (Student(x) \u2227 Kid(x))",
            "Kid(billy)"
        ],
        "question": "Billy is a student.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1264,
        "story_id": 438,
        "context": [
            "No kid loves the Opera.",
            "All adults love the Opera.",
            "If someone is a scientist, then they are an adult.",
            "Some students are kids.",
            "Billy is a kid."
        ],
        "context_fol": [
            "\u2200x (Kid(x) \u2192 \u00acOperaLover(x))",
            "\u2200x (Adult(x) \u2192 OperaLover(x))",
            "\u2200x (Scientist(x) \u2192 Adult(x))",
            "\u2203x (Student(x) \u2227 Kid(x))",
            "Kid(billy)"
        ],
        "question": "Billy is a student and a scientist.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1265,
        "story_id": 438,
        "context": [
            "No kid loves the Opera.",
            "All adults love the Opera.",
            "If someone is a scientist, then they are an adult.",
            "Some students are kids.",
            "Billy is a kid."
        ],
        "context_fol": [
            "\u2200x (Kid(x) \u2192 \u00acOperaLover(x))",
            "\u2200x (Adult(x) \u2192 OperaLover(x))",
            "\u2200x (Scientist(x) \u2192 Adult(x))",
            "\u2203x (Student(x) \u2227 Kid(x))",
            "Kid(billy)"
        ],
        "question": "If Billy is a student or a scientist, then Billy is a student and a kid.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 205,
        "story_id": 69,
        "context": [
            "Brian Winter is a Scottish football referee.",
            "After being injured, Brian Winter retired in 2012.",
            "Brian Winter was appointed as a referee observer after his retirement.",
            "Some football referees become referee observers.",
            "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical."
        ],
        "context_fol": [
            "Scottish(brianwinter) \u2227 FootballReferee(brianwinter)",
            "Injured(brianwinter) \u2227 Retired(brianwinter)",
            "RefereeObserver(brianwinter)",
            "\u2203x (FootballReferee(x) \u2227 RefereeObserver(x))",
            "Son(andywinter, brianwinter) \u2227 FootballPlayer(andywinter) \u2227 PlaysFor(andywinter, hamiltonacademical)"
        ],
        "question": "There is a son of a referee observer that plays football.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 206,
        "story_id": 69,
        "context": [
            "Brian Winter is a Scottish football referee.",
            "After being injured, Brian Winter retired in 2012.",
            "Brian Winter was appointed as a referee observer after his retirement.",
            "Some football referees become referee observers.",
            "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical."
        ],
        "context_fol": [
            "Scottish(brianwinter) \u2227 FootballReferee(brianwinter)",
            "Injured(brianwinter) \u2227 Retired(brianwinter)",
            "RefereeObserver(brianwinter)",
            "\u2203x (FootballReferee(x) \u2227 RefereeObserver(x))",
            "Son(andywinter, brianwinter) \u2227 FootballPlayer(andywinter) \u2227 PlaysFor(andywinter, hamiltonacademical)"
        ],
        "question": "Brian Winter is not a referee observer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 207,
        "story_id": 69,
        "context": [
            "Brian Winter is a Scottish football referee.",
            "After being injured, Brian Winter retired in 2012.",
            "Brian Winter was appointed as a referee observer after his retirement.",
            "Some football referees become referee observers.",
            "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical."
        ],
        "context_fol": [
            "Scottish(brianwinter) \u2227 FootballReferee(brianwinter)",
            "Injured(brianwinter) \u2227 Retired(brianwinter)",
            "RefereeObserver(brianwinter)",
            "\u2203x (FootballReferee(x) \u2227 RefereeObserver(x))",
            "Son(andywinter, brianwinter) \u2227 FootballPlayer(andywinter) \u2227 PlaysFor(andywinter, hamiltonacademical)"
        ],
        "question": "Brian Winter is retired.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 208,
        "story_id": 69,
        "context": [
            "Brian Winter is a Scottish football referee.",
            "After being injured, Brian Winter retired in 2012.",
            "Brian Winter was appointed as a referee observer after his retirement.",
            "Some football referees become referee observers.",
            "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical."
        ],
        "context_fol": [
            "Scottish(brianwinter) \u2227 FootballReferee(brianwinter)",
            "Injured(brianwinter) \u2227 Retired(brianwinter)",
            "RefereeObserver(brianwinter)",
            "\u2203x (FootballReferee(x) \u2227 RefereeObserver(x))",
            "Son(andywinter, brianwinter) \u2227 FootballPlayer(andywinter) \u2227 PlaysFor(andywinter, hamiltonacademical)"
        ],
        "question": "Andy Winter is a referee.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1105,
        "story_id": 401,
        "context": [
            "People are either interested in puzzles or bad at chess.",
            "If a person is bad at chess, then they don't play a lot of chess.",
            "A person is either a planner or a creative person.",
            "Erica is someone who plays a lot of chess.",
            "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."
        ],
        "context_fol": [
            "\u2200x (Puzzles(x) \u2228 BadChess(x))",
            "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))",
            "\u2200x (Plans(x) \u2228 Creative(x))",
            "PlaysLots(erica)",
            "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
        ],
        "question": "Erica plans.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1106,
        "story_id": 401,
        "context": [
            "People are either interested in puzzles or bad at chess.",
            "If a person is bad at chess, then they don't play a lot of chess.",
            "A person is either a planner or a creative person.",
            "Erica is someone who plays a lot of chess.",
            "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."
        ],
        "context_fol": [
            "\u2200x (Puzzles(x) \u2228 BadChess(x))",
            "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))",
            "\u2200x (Plans(x) \u2228 Creative(x))",
            "PlaysLots(erica)",
            "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
        ],
        "question": "Erica is interested in puzzles and is creative.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1107,
        "story_id": 401,
        "context": [
            "People are either interested in puzzles or bad at chess.",
            "If a person is bad at chess, then they don't play a lot of chess.",
            "A person is either a planner or a creative person.",
            "Erica is someone who plays a lot of chess.",
            "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."
        ],
        "context_fol": [
            "\u2200x (Puzzles(x) \u2228 BadChess(x))",
            "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))",
            "\u2200x (Plans(x) \u2228 Creative(x))",
            "PlaysLots(erica)",
            "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
        ],
        "question": "Erica is either interested in puzzles or is creative.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1108,
        "story_id": 401,
        "context": [
            "People are either interested in puzzles or bad at chess.",
            "If a person is bad at chess, then they don't play a lot of chess.",
            "A person is either a planner or a creative person.",
            "Erica is someone who plays a lot of chess.",
            "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."
        ],
        "context_fol": [
            "\u2200x (Puzzles(x) \u2228 BadChess(x))",
            "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))",
            "\u2200x (Plans(x) \u2228 Creative(x))",
            "PlaysLots(erica)",
            "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
        ],
        "question": "If Erica plans ahead or plays a lot of chess matches, then Erica is not interested in puzzles and creative.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1109,
        "story_id": 401,
        "context": [
            "People are either interested in puzzles or bad at chess.",
            "If a person is bad at chess, then they don't play a lot of chess.",
            "A person is either a planner or a creative person.",
            "Erica is someone who plays a lot of chess.",
            "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."
        ],
        "context_fol": [
            "\u2200x (Puzzles(x) \u2228 BadChess(x))",
            "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))",
            "\u2200x (Plans(x) \u2228 Creative(x))",
            "PlaysLots(erica)",
            "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
        ],
        "question": "If Erica is creative, then Erica is not interested in puzzles and creative.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1110,
        "story_id": 401,
        "context": [
            "People are either interested in puzzles or bad at chess.",
            "If a person is bad at chess, then they don't play a lot of chess.",
            "A person is either a planner or a creative person.",
            "Erica is someone who plays a lot of chess.",
            "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."
        ],
        "context_fol": [
            "\u2200x (Puzzles(x) \u2228 BadChess(x))",
            "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))",
            "\u2200x (Plans(x) \u2228 Creative(x))",
            "PlaysLots(erica)",
            "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
        ],
        "question": "If Erica is interested in puzzles and is creative, then Erica is not creative.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1111,
        "story_id": 401,
        "context": [
            "People are either interested in puzzles or bad at chess.",
            "If a person is bad at chess, then they don't play a lot of chess.",
            "A person is either a planner or a creative person.",
            "Erica is someone who plays a lot of chess.",
            "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."
        ],
        "context_fol": [
            "\u2200x (Puzzles(x) \u2228 BadChess(x))",
            "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))",
            "\u2200x (Plans(x) \u2228 Creative(x))",
            "PlaysLots(erica)",
            "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
        ],
        "question": "If Erica either plays a lot of chess matches or is creative, then Erica is neither interested in puzzles nor a person who plays a lot of chess matches.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1112,
        "story_id": 401,
        "context": [
            "People are either interested in puzzles or bad at chess.",
            "If a person is bad at chess, then they don't play a lot of chess.",
            "A person is either a planner or a creative person.",
            "Erica is someone who plays a lot of chess.",
            "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."
        ],
        "context_fol": [
            "\u2200x (Puzzles(x) \u2228 BadChess(x))",
            "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))",
            "\u2200x (Plans(x) \u2228 Creative(x))",
            "PlaysLots(erica)",
            "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
        ],
        "question": "If Erica is interested in puzzles and plays a lot of chess matches, then Erica is either a person who plays a lot of chess matches or a person that is creative.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1113,
        "story_id": 401,
        "context": [
            "People are either interested in puzzles or bad at chess.",
            "If a person is bad at chess, then they don't play a lot of chess.",
            "A person is either a planner or a creative person.",
            "Erica is someone who plays a lot of chess.",
            "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."
        ],
        "context_fol": [
            "\u2200x (Puzzles(x) \u2228 BadChess(x))",
            "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))",
            "\u2200x (Plans(x) \u2228 Creative(x))",
            "PlaysLots(erica)",
            "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
        ],
        "question": "If Erica plans ahead or is interested in puzzles, then Erica is creative.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1114,
        "story_id": 401,
        "context": [
            "People are either interested in puzzles or bad at chess.",
            "If a person is bad at chess, then they don't play a lot of chess.",
            "A person is either a planner or a creative person.",
            "Erica is someone who plays a lot of chess.",
            "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."
        ],
        "context_fol": [
            "\u2200x (Puzzles(x) \u2228 BadChess(x))",
            "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))",
            "\u2200x (Plans(x) \u2228 Creative(x))",
            "PlaysLots(erica)",
            "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
        ],
        "question": "If Erica is either bad at chess or interested in puzzles, then Erica is not a person who plays a lot of chess matches and creative.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 374,
        "story_id": 125,
        "context": [
            "Soccer players have a right foot and a left foot.",
            "Top soccer players are soccer players who can use their both feet very efficiently.",
            "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
            "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
            "Cristiano Ronaldo is a soccer player.",
            "Cristiano Ronaldo can use his right foot very efficiently.",
            "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
        ],
        "context_fol": [
            "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))",
            "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))",
            "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))",
            "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))",
            "SoccerPlayer(ronaldo)",
            "Efficient(ronaldo, right)",
            "ScoreManyGoals(ronaldo, left)"
        ],
        "question": "Cristiano Ronaldo is a top soccer player.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 375,
        "story_id": 125,
        "context": [
            "Soccer players have a right foot and a left foot.",
            "Top soccer players are soccer players who can use their both feet very efficiently.",
            "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
            "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
            "Cristiano Ronaldo is a soccer player.",
            "Cristiano Ronaldo can use his right foot very efficiently.",
            "Cristiano Ronaldo have scored more than one hundred goals using his left foot."
        ],
        "context_fol": [
            "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))",
            "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))",
            "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))",
            "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))",
            "SoccerPlayer(ronaldo)",
            "Efficient(ronaldo, right)",
            "ScoreManyGoals(ronaldo, left)"
        ],
        "question": "Cristiano Ronaldo is not a top soccer player.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 512,
        "story_id": 177,
        "context": [
            "The National Lobster Hatchery is a hatchery located in Padstow England.",
            "The National Lobster Hatchery is open to visitors.",
            "A hatchery is either for profit, or for conservation.",
            "If a hatchery is for conservation, it might release animals into the wild.",
            "The National Lobster Hatchery is not for profit."
        ],
        "context_fol": [
            "Hatchery(nationallobsterhatchery) \u2227 LocatedIn(nationallobsterhatchery, padstowengland)",
            "OpenToVisitors(nationallobsterhatchery)",
            "\u2200x (Hatchery(x) \u2192 ForConservation(x) \u2228 ForProfit(x))",
            "\u2203x (Hatchery(x) \u2227 ForConservation(x) \u2227 ReleasesAnimalsToWild(x))",
            "\u00acForProfit(nationallobsterhatchery)"
        ],
        "question": "The National Lobster Hatchery is for conservation.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 513,
        "story_id": 177,
        "context": [
            "The National Lobster Hatchery is a hatchery located in Padstow England.",
            "The National Lobster Hatchery is open to visitors.",
            "A hatchery is either for profit, or for conservation.",
            "If a hatchery is for conservation, it might release animals into the wild.",
            "The National Lobster Hatchery is not for profit."
        ],
        "context_fol": [
            "Hatchery(nationallobsterhatchery) \u2227 LocatedIn(nationallobsterhatchery, padstowengland)",
            "OpenToVisitors(nationallobsterhatchery)",
            "\u2200x (Hatchery(x) \u2192 ForConservation(x) \u2228 ForProfit(x))",
            "\u2203x (Hatchery(x) \u2227 ForConservation(x) \u2227 ReleasesAnimalsToWild(x))",
            "\u00acForProfit(nationallobsterhatchery)"
        ],
        "question": "All hatcheries are open to visitors.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 514,
        "story_id": 177,
        "context": [
            "The National Lobster Hatchery is a hatchery located in Padstow England.",
            "The National Lobster Hatchery is open to visitors.",
            "A hatchery is either for profit, or for conservation.",
            "If a hatchery is for conservation, it might release animals into the wild.",
            "The National Lobster Hatchery is not for profit."
        ],
        "context_fol": [
            "Hatchery(nationallobsterhatchery) \u2227 LocatedIn(nationallobsterhatchery, padstowengland)",
            "OpenToVisitors(nationallobsterhatchery)",
            "\u2200x (Hatchery(x) \u2192 ForConservation(x) \u2228 ForProfit(x))",
            "\u2203x (Hatchery(x) \u2227 ForConservation(x) \u2227 ReleasesAnimalsToWild(x))",
            "\u00acForProfit(nationallobsterhatchery)"
        ],
        "question": "The National Lobster Hatchery releases animals into the wild.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 636,
        "story_id": 224,
        "context": [
            "Rhos Aelwyd F.C. is a Welsh football club.",
            "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
            "The Premier Division was won in 2005\u201306 by a team from Ponciau. ",
            "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.",
            "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. "
        ],
        "context_fol": [
            "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 BasedInPonciau(x) \u2227 Welsh(x))",
            "\u2200x (BasedInPonciau(x) \u2194 Rhosaelwydfc(x))",
            "\u2203x (BasedInPonciau(x) \u2227 WonPremierDivisionDuring(x, y2005))",
            "\u2200x (WonPremierDivisionDuring(x, y2009) \u2192 Promoted(x))",
            "\u2200x (WonPremierDivisionDuring(x, y2009) \u2194 WonPremierDivisionDuring(x, y2005))"
        ],
        "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 637,
        "story_id": 224,
        "context": [
            "Rhos Aelwyd F.C. is a Welsh football club.",
            "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
            "The Premier Division was won in 2005\u201306 by a team from Ponciau. ",
            "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.",
            "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. "
        ],
        "context_fol": [
            "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 BasedInPonciau(x) \u2227 Welsh(x))",
            "\u2200x (BasedInPonciau(x) \u2194 Rhosaelwydfc(x))",
            "\u2203x (BasedInPonciau(x) \u2227 WonPremierDivisionDuring(x, y2005))",
            "\u2200x (WonPremierDivisionDuring(x, y2009) \u2192 Promoted(x))",
            "\u2200x (WonPremierDivisionDuring(x, y2009) \u2194 WonPremierDivisionDuring(x, y2005))"
        ],
        "question": "Rhos Aelwyd F.C. was promoted to the Cymru Alliance.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1362,
        "story_id": 470,
        "context": [
            "All OS are software.",
            "All Mac are OS.",
            "An OS is either Mac or Windows.",
            "All Windows are convenient.",
            "All software has code.",
            "If something is convenient, then it is popular.",
            "Burger is a piece of code and a Mac.",
            "PyTorch is either Windows and software, or neither Windows nor software."
        ],
        "context_fol": [
            "\u2200x (OS(x) \u2192 Software(x))",
            "\u2200x (Mac(x) \u2192 OS(x))",
            "\u2200x (Mac(x) \u2228 Windows(x))",
            "\u2200x (Windows(x) \u2192 Convenient(x))",
            "\u2200x (Software(x) \u2192 Code(x))",
            "\u2200x (Convenient(x) \u2192 Popular(x))",
            "Code(burger) \u2227 Mac(burger))",
            "(Windows(pytorch) \u2227 Software(pytorch)) \u2295 (\u00acWindows(pytorch) \u2227 \u00acSoftware(pytorch))"
        ],
        "question": "Burger is popular.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1363,
        "story_id": 470,
        "context": [
            "All OS are software.",
            "All Mac are OS.",
            "An OS is either Mac or Windows.",
            "All Windows are convenient.",
            "All software has code.",
            "If something is convenient, then it is popular.",
            "Burger is a piece of code and a Mac.",
            "PyTorch is either Windows and software, or neither Windows nor software."
        ],
        "context_fol": [
            "\u2200x (OS(x) \u2192 Software(x))",
            "\u2200x (Mac(x) \u2192 OS(x))",
            "\u2200x (Mac(x) \u2228 Windows(x))",
            "\u2200x (Windows(x) \u2192 Convenient(x))",
            "\u2200x (Software(x) \u2192 Code(x))",
            "\u2200x (Convenient(x) \u2192 Popular(x))",
            "Code(burger) \u2227 Mac(burger))",
            "(Windows(pytorch) \u2227 Software(pytorch)) \u2295 (\u00acWindows(pytorch) \u2227 \u00acSoftware(pytorch))"
        ],
        "question": "Burger is not popular.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1364,
        "story_id": 470,
        "context": [
            "All OS are software.",
            "All Mac are OS.",
            "An OS is either Mac or Windows.",
            "All Windows are convenient.",
            "All software has code.",
            "If something is convenient, then it is popular.",
            "Burger is a piece of code and a Mac.",
            "PyTorch is either Windows and software, or neither Windows nor software."
        ],
        "context_fol": [
            "\u2200x (OS(x) \u2192 Software(x))",
            "\u2200x (Mac(x) \u2192 OS(x))",
            "\u2200x (Mac(x) \u2228 Windows(x))",
            "\u2200x (Windows(x) \u2192 Convenient(x))",
            "\u2200x (Software(x) \u2192 Code(x))",
            "\u2200x (Convenient(x) \u2192 Popular(x))",
            "Code(burger) \u2227 Mac(burger))",
            "(Windows(pytorch) \u2227 Software(pytorch)) \u2295 (\u00acWindows(pytorch) \u2227 \u00acSoftware(pytorch))"
        ],
        "question": "PyTorch is popular and has code.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1365,
        "story_id": 470,
        "context": [
            "All OS are software.",
            "All Mac are OS.",
            "An OS is either Mac or Windows.",
            "All Windows are convenient.",
            "All software has code.",
            "If something is convenient, then it is popular.",
            "Burger is a piece of code and a Mac.",
            "PyTorch is either Windows and software, or neither Windows nor software."
        ],
        "context_fol": [
            "\u2200x (OS(x) \u2192 Software(x))",
            "\u2200x (Mac(x) \u2192 OS(x))",
            "\u2200x (Mac(x) \u2228 Windows(x))",
            "\u2200x (Windows(x) \u2192 Convenient(x))",
            "\u2200x (Software(x) \u2192 Code(x))",
            "\u2200x (Convenient(x) \u2192 Popular(x))",
            "Code(burger) \u2227 Mac(burger))",
            "(Windows(pytorch) \u2227 Software(pytorch)) \u2295 (\u00acWindows(pytorch) \u2227 \u00acSoftware(pytorch))"
        ],
        "question": "PyTorch is not popular and has code.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 353,
        "story_id": 117,
        "context": [
            "Roads are made of either concrete or asphalt.",
            "Roads made of concrete last longer than roads made with asphalt.",
            "Roads made of asphalt are smoother than roads made of concrete.",
            "Everyone prefers the smoother of two roads. ",
            "Road one is made of concrete and Road two is made of asphalt."
        ],
        "context_fol": [
            "\u2200x (Road(x) \u2192 (MadeOfConcrete(x) \u2228 MadeOfAsphalt(x))",
            "\u2200x \u2200y (Road(x) \u2227 MadeOfConcrete(x) \u2227 Road(y) \u2227 MadeOfAsphalt(y) \u2192 LastLonger(x, y))",
            "\u2200x \u2200y (Road(x) \u2227 MadeOfAsphalt(x) \u2227 Road(y) \u2227 MadeOfConcrete(y) \u2192 Smoother(x, y))",
            "\u2200x \u2200y \u2200z (Road(x) \u2227 Road(y) \u2227 Smoother(x, y) \u2192 Prefers(z, x))",
            "Road(one) \u2227 MadeOfConcrete(one) \u2227 Road(two) \u2227 MadeOfAsphalt(two)"
        ],
        "question": "Road one will last longer than Road two",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 354,
        "story_id": 117,
        "context": [
            "Roads are made of either concrete or asphalt.",
            "Roads made of concrete last longer than roads made with asphalt.",
            "Roads made of asphalt are smoother than roads made of concrete.",
            "Everyone prefers the smoother of two roads. ",
            "Road one is made of concrete and Road two is made of asphalt."
        ],
        "context_fol": [
            "\u2200x (Road(x) \u2192 (MadeOfConcrete(x) \u2228 MadeOfAsphalt(x))",
            "\u2200x \u2200y (Road(x) \u2227 MadeOfConcrete(x) \u2227 Road(y) \u2227 MadeOfAsphalt(y) \u2192 LastLonger(x, y))",
            "\u2200x \u2200y (Road(x) \u2227 MadeOfAsphalt(x) \u2227 Road(y) \u2227 MadeOfConcrete(y) \u2192 Smoother(x, y))",
            "\u2200x \u2200y \u2200z (Road(x) \u2227 Road(y) \u2227 Smoother(x, y) \u2192 Prefers(z, x))",
            "Road(one) \u2227 MadeOfConcrete(one) \u2227 Road(two) \u2227 MadeOfAsphalt(two)"
        ],
        "question": "Road two is not smoother than Road one.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 355,
        "story_id": 117,
        "context": [
            "Roads are made of either concrete or asphalt.",
            "Roads made of concrete last longer than roads made with asphalt.",
            "Roads made of asphalt are smoother than roads made of concrete.",
            "Everyone prefers the smoother of two roads. ",
            "Road one is made of concrete and Road two is made of asphalt."
        ],
        "context_fol": [
            "\u2200x (Road(x) \u2192 (MadeOfConcrete(x) \u2228 MadeOfAsphalt(x))",
            "\u2200x \u2200y (Road(x) \u2227 MadeOfConcrete(x) \u2227 Road(y) \u2227 MadeOfAsphalt(y) \u2192 LastLonger(x, y))",
            "\u2200x \u2200y (Road(x) \u2227 MadeOfAsphalt(x) \u2227 Road(y) \u2227 MadeOfConcrete(y) \u2192 Smoother(x, y))",
            "\u2200x \u2200y \u2200z (Road(x) \u2227 Road(y) \u2227 Smoother(x, y) \u2192 Prefers(z, x))",
            "Road(one) \u2227 MadeOfConcrete(one) \u2227 Road(two) \u2227 MadeOfAsphalt(two)"
        ],
        "question": "John prefers Road two.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 226,
        "story_id": 74,
        "context": [
            "Camp Davern is a traditional summer camp for boys and girls.",
            "Camp Davern was established in the year 1946.",
            "Camp Davern was operated by the YMCA until the year 2015.",
            "Camp Davern is one of Ontario's oldest summer camps."
        ],
        "context_fol": [
            "TraditionalSummerCamp(campdavern) \u2227 ForBoysAndGirls(campdavern)",
            "EstablishedIn(campdavern, year1946)",
            "OperatedByYMCAUntil(campdavern, year2015)",
            "OneOf(campdavern, ontariosoldestsummercamps)"
        ],
        "question": "One of Ontario's oldest summer camps is a traditional summer camp for boys and girls.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 227,
        "story_id": 74,
        "context": [
            "Camp Davern is a traditional summer camp for boys and girls.",
            "Camp Davern was established in the year 1946.",
            "Camp Davern was operated by the YMCA until the year 2015.",
            "Camp Davern is one of Ontario's oldest summer camps."
        ],
        "context_fol": [
            "TraditionalSummerCamp(campdavern) \u2227 ForBoysAndGirls(campdavern)",
            "EstablishedIn(campdavern, year1946)",
            "OperatedByYMCAUntil(campdavern, year2015)",
            "OneOf(campdavern, ontariosoldestsummercamps)"
        ],
        "question": "A traditional summer camp for boys and girls was operated by the YMCA until the year 2015.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 228,
        "story_id": 74,
        "context": [
            "Camp Davern is a traditional summer camp for boys and girls.",
            "Camp Davern was established in the year 1946.",
            "Camp Davern was operated by the YMCA until the year 2015.",
            "Camp Davern is one of Ontario's oldest summer camps."
        ],
        "context_fol": [
            "TraditionalSummerCamp(campdavern) \u2227 ForBoysAndGirls(campdavern)",
            "EstablishedIn(campdavern, year1946)",
            "OperatedByYMCAUntil(campdavern, year2015)",
            "OneOf(campdavern, ontariosoldestsummercamps)"
        ],
        "question": "Camp Davern was established in 1989.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 995,
        "story_id": 372,
        "context": [
            "If people publish journals, then they do not work in the entertainment industry.",
            "All people who are award-winning novelists publish journals.",
            "People either work in the entertainment industry or are highly acclaimed in their profession.",
            "If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.",
            "If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.",
            "If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. "
        ],
        "context_fol": [
            "\u2200x (PublishJournals(x) \u2192 \u00acEntertainment(x))",
            "\u2200x (Novelist(x) \u2192 PublishJournals(x))",
            "\u2200x (Entertainment(x) \u2228 Acclaimed(x))",
            "\u2200x (Acclaimed(x) \u2192 Tenured(x))",
            "\u2200x (Acclaimed(x) \u2192 Glowing(x))",
            "(Acclaimed(emily) \u2227 Tenured(emily)) \u2228 (\u00acAcclaimed(emily) \u2227 \u00acTenured(emily)) \u2192 \u00acAcclaimed(emily)"
        ],
        "question": "Emily often holds tenured and high-ranking positions at her workplace.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 996,
        "story_id": 372,
        "context": [
            "If people publish journals, then they do not work in the entertainment industry.",
            "All people who are award-winning novelists publish journals.",
            "People either work in the entertainment industry or are highly acclaimed in their profession.",
            "If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.",
            "If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.",
            "If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. "
        ],
        "context_fol": [
            "\u2200x (PublishJournals(x) \u2192 \u00acEntertainment(x))",
            "\u2200x (Novelist(x) \u2192 PublishJournals(x))",
            "\u2200x (Entertainment(x) \u2228 Acclaimed(x))",
            "\u2200x (Acclaimed(x) \u2192 Tenured(x))",
            "\u2200x (Acclaimed(x) \u2192 Glowing(x))",
            "(Acclaimed(emily) \u2227 Tenured(emily)) \u2228 (\u00acAcclaimed(emily) \u2227 \u00acTenured(emily)) \u2192 \u00acAcclaimed(emily)"
        ],
        "question": "Emily often receives glowing feedback and recommendations from their colleagues and is an award-winning novelist.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 997,
        "story_id": 372,
        "context": [
            "If people publish journals, then they do not work in the entertainment industry.",
            "All people who are award-winning novelists publish journals.",
            "People either work in the entertainment industry or are highly acclaimed in their profession.",
            "If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.",
            "If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.",
            "If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. "
        ],
        "context_fol": [
            "\u2200x (PublishJournals(x) \u2192 \u00acEntertainment(x))",
            "\u2200x (Novelist(x) \u2192 PublishJournals(x))",
            "\u2200x (Entertainment(x) \u2228 Acclaimed(x))",
            "\u2200x (Acclaimed(x) \u2192 Tenured(x))",
            "\u2200x (Acclaimed(x) \u2192 Glowing(x))",
            "(Acclaimed(emily) \u2227 Tenured(emily)) \u2228 (\u00acAcclaimed(emily) \u2227 \u00acTenured(emily)) \u2192 \u00acAcclaimed(emily)"
        ],
        "question": "If Emily either often receives glowing feedback and recommendations from her colleagues or is an award-winning novelist, then Emily does not both publish journals and is an award-winning novelist.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 25,
        "story_id": 10,
        "context": [
            "Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.",
            "Thick as Thieves was published by Greenwillow Books.",
            "If a book was published by a company, than the author of that book worked with the company that published the book.",
            "The fictional Mede Empire is where Thick as Thieves is set.",
            "The Mede Empire plots to swallow up some nearby countries.",
            "Attolia and Sounis are countries near the Mede Empire.",
            "Thick as Thieves was sold both as a hardcover and an e-book."
        ],
        "context_fol": [
            "YoungAdultFantasyNovel(thickastheives) \u2227 WrittenBy(thickastheives, megan)",
            "PublishedBy(thickastheives, greenwillowbooks)",
            "\u2200x \u2200y \u2200z (WrittenBy(x, y) \u2227 PublishedBy(x, z) \u2192 WorkedWith(y, z))",
            "Fictional(medeempire) \u2227 SetIn(thickastheives, medeempire)",
            "\u2203x (Country(x) Nearby(medeempire, x) \u2227 PlotsToSwallowUp(medeempire, x))",
            "Country(attolia) \u2227 Nearby(medeempire, attolia) \u2227 Country(sounis) \u2227 Nearby(medeempire, sounis)",
            "SoldAs(thickastheives, hardcover) \u2227 SoldAs(thickastheives, softcover)"
        ],
        "question": "Megan Whalen Turner worked with Greenwillow Books.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 26,
        "story_id": 10,
        "context": [
            "Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.",
            "Thick as Thieves was published by Greenwillow Books.",
            "If a book was published by a company, than the author of that book worked with the company that published the book.",
            "The fictional Mede Empire is where Thick as Thieves is set.",
            "The Mede Empire plots to swallow up some nearby countries.",
            "Attolia and Sounis are countries near the Mede Empire.",
            "Thick as Thieves was sold both as a hardcover and an e-book."
        ],
        "context_fol": [
            "YoungAdultFantasyNovel(thickastheives) \u2227 WrittenBy(thickastheives, megan)",
            "PublishedBy(thickastheives, greenwillowbooks)",
            "\u2200x \u2200y \u2200z (WrittenBy(x, y) \u2227 PublishedBy(x, z) \u2192 WorkedWith(y, z))",
            "Fictional(medeempire) \u2227 SetIn(thickastheives, medeempire)",
            "\u2203x (Country(x) Nearby(medeempire, x) \u2227 PlotsToSwallowUp(medeempire, x))",
            "Country(attolia) \u2227 Nearby(medeempire, attolia) \u2227 Country(sounis) \u2227 Nearby(medeempire, sounis)",
            "SoldAs(thickastheives, hardcover) \u2227 SoldAs(thickastheives, softcover)"
        ],
        "question": "The Mede Empire plans to swallow up Attolia.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 27,
        "story_id": 10,
        "context": [
            "Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.",
            "Thick as Thieves was published by Greenwillow Books.",
            "If a book was published by a company, than the author of that book worked with the company that published the book.",
            "The fictional Mede Empire is where Thick as Thieves is set.",
            "The Mede Empire plots to swallow up some nearby countries.",
            "Attolia and Sounis are countries near the Mede Empire.",
            "Thick as Thieves was sold both as a hardcover and an e-book."
        ],
        "context_fol": [
            "YoungAdultFantasyNovel(thickastheives) \u2227 WrittenBy(thickastheives, megan)",
            "PublishedBy(thickastheives, greenwillowbooks)",
            "\u2200x \u2200y \u2200z (WrittenBy(x, y) \u2227 PublishedBy(x, z) \u2192 WorkedWith(y, z))",
            "Fictional(medeempire) \u2227 SetIn(thickastheives, medeempire)",
            "\u2203x (Country(x) Nearby(medeempire, x) \u2227 PlotsToSwallowUp(medeempire, x))",
            "Country(attolia) \u2227 Nearby(medeempire, attolia) \u2227 Country(sounis) \u2227 Nearby(medeempire, sounis)",
            "SoldAs(thickastheives, hardcover) \u2227 SoldAs(thickastheives, softcover)"
        ],
        "question": "Thick as Thieves is not set in the mede empire.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 28,
        "story_id": 10,
        "context": [
            "Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.",
            "Thick as Thieves was published by Greenwillow Books.",
            "If a book was published by a company, than the author of that book worked with the company that published the book.",
            "The fictional Mede Empire is where Thick as Thieves is set.",
            "The Mede Empire plots to swallow up some nearby countries.",
            "Attolia and Sounis are countries near the Mede Empire.",
            "Thick as Thieves was sold both as a hardcover and an e-book."
        ],
        "context_fol": [
            "YoungAdultFantasyNovel(thickastheives) \u2227 WrittenBy(thickastheives, megan)",
            "PublishedBy(thickastheives, greenwillowbooks)",
            "\u2200x \u2200y \u2200z (WrittenBy(x, y) \u2227 PublishedBy(x, z) \u2192 WorkedWith(y, z))",
            "Fictional(medeempire) \u2227 SetIn(thickastheives, medeempire)",
            "\u2203x (Country(x) Nearby(medeempire, x) \u2227 PlotsToSwallowUp(medeempire, x))",
            "Country(attolia) \u2227 Nearby(medeempire, attolia) \u2227 Country(sounis) \u2227 Nearby(medeempire, sounis)",
            "SoldAs(thickastheives, hardcover) \u2227 SoldAs(thickastheives, softcover)"
        ],
        "question": "Megan Whalen Turner did not work with Greenwillow Books.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 351,
        "story_id": 116,
        "context": [
            "WeTab is a MeeGo-based tablet computer.",
            "There is a WeTab product.",
            "WeTab was announced by Neofonie.",
            "Neofonie is a German producer.",
            "Germans speak English or German."
        ],
        "context_fol": [
            "\u2200x (WeTab(x) \u2192 MeeGoBased(x) \u2227 TabletComputer(x))",
            "\u2203x (WeTab(x))",
            "\u2200x (WeTab(x) \u2192 Announce(neofonie, x))",
            "German(neofonie) \u2227 Producer(neofonie)",
            "\u2200x (German(x) \u2192 Speak(x, english) \u2228 Speak(x, german))"
        ],
        "question": "There is a tablet computer that was announced by a German.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 352,
        "story_id": 116,
        "context": [
            "WeTab is a MeeGo-based tablet computer.",
            "There is a WeTab product.",
            "WeTab was announced by Neofonie.",
            "Neofonie is a German producer.",
            "Germans speak English or German."
        ],
        "context_fol": [
            "\u2200x (WeTab(x) \u2192 MeeGoBased(x) \u2227 TabletComputer(x))",
            "\u2203x (WeTab(x))",
            "\u2200x (WeTab(x) \u2192 Announce(neofonie, x))",
            "German(neofonie) \u2227 Producer(neofonie)",
            "\u2200x (German(x) \u2192 Speak(x, english) \u2228 Speak(x, german))"
        ],
        "question": "Neofonie doesn't speak English or German.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1186,
        "story_id": 419,
        "context": [
            "Some employees working in business analysis are good at math. ",
            "All employees working in business analysis are working in this company. ",
            "No employees working in this company are from China. ",
            "All employees working in software engineering are from China. ",
            "James is working in software engineering. "
        ],
        "context_fol": [
            "\u2203x ( BusinessAnalysis(x) \u2227 GoodAtMath(x))",
            "\u2200x (BusinessAnalysis(x) \u2192 WorkInCompany(x))",
            "\u2200x (WorkInCompany(x) \u2192 \u00acFromChina(x))",
            "\u2200x (SoftwareEngineering(x) \u2192 FromChina(x))",
            "SoftwareEngineering(james)"
        ],
        "question": "James is good at math.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1187,
        "story_id": 419,
        "context": [
            "Some employees working in business analysis are good at math. ",
            "All employees working in business analysis are working in this company. ",
            "No employees working in this company are from China. ",
            "All employees working in software engineering are from China. ",
            "James is working in software engineering. "
        ],
        "context_fol": [
            "\u2203x ( BusinessAnalysis(x) \u2227 GoodAtMath(x))",
            "\u2200x (BusinessAnalysis(x) \u2192 WorkInCompany(x))",
            "\u2200x (WorkInCompany(x) \u2192 \u00acFromChina(x))",
            "\u2200x (SoftwareEngineering(x) \u2192 FromChina(x))",
            "SoftwareEngineering(james)"
        ],
        "question": "James is not good at math and he is working in business analysis.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1188,
        "story_id": 419,
        "context": [
            "Some employees working in business analysis are good at math. ",
            "All employees working in business analysis are working in this company. ",
            "No employees working in this company are from China. ",
            "All employees working in software engineering are from China. ",
            "James is working in software engineering. "
        ],
        "context_fol": [
            "\u2203x ( BusinessAnalysis(x) \u2227 GoodAtMath(x))",
            "\u2200x (BusinessAnalysis(x) \u2192 WorkInCompany(x))",
            "\u2200x (WorkInCompany(x) \u2192 \u00acFromChina(x))",
            "\u2200x (SoftwareEngineering(x) \u2192 FromChina(x))",
            "SoftwareEngineering(james)"
        ],
        "question": "If James is not good at math and he is in business analysis, then he is neither working in this company nor working in software engineering.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 452,
        "story_id": 157,
        "context": [
            "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.",
            "All fruits are provided in the same weight at the beginning of the party.",
            "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.",
            "At the end of the party, strawberries had the lowest remaining weight.",
            "At the end of the party, the amount of leftover blueberries was lower than that of cherries.",
            "Benjamin only ate oranges and grapes at the party."
        ],
        "context_fol": [
            "Party(strawberry) \u2228 Party(orange) \u2228 Party(blueberry) \u2228 Party(grape) \u2228 Party(cherry) ",
            "\u2200x (Party(x) \u2192 SameWeight(x))",
            "\u2200x (LowestAmount(x) \u2192 MostPopular(x)) ",
            "LowestAmount(strawberries)",
            "Lower(blueberry, cherry)",
            "Eat(orange, benjamin) \u2227 Eat(grape, benjamin) \u2227 \u00acEat(blueberry, benjamin) \u2227 \u00acEat(cherry, benjamin) \u2227 \u00acEat(strawberry, benjamin)"
        ],
        "question": "Blueberries were the most popular fruit at the party.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 453,
        "story_id": 157,
        "context": [
            "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.",
            "All fruits are provided in the same weight at the beginning of the party.",
            "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.",
            "At the end of the party, strawberries had the lowest remaining weight.",
            "At the end of the party, the amount of leftover blueberries was lower than that of cherries.",
            "Benjamin only ate oranges and grapes at the party."
        ],
        "context_fol": [
            "Party(strawberry) \u2228 Party(orange) \u2228 Party(blueberry) \u2228 Party(grape) \u2228 Party(cherry) ",
            "\u2200x (Party(x) \u2192 SameWeight(x))",
            "\u2200x (LowestAmount(x) \u2192 MostPopular(x)) ",
            "LowestAmount(strawberries)",
            "Lower(blueberry, cherry)",
            "Eat(orange, benjamin) \u2227 Eat(grape, benjamin) \u2227 \u00acEat(blueberry, benjamin) \u2227 \u00acEat(cherry, benjamin) \u2227 \u00acEat(strawberry, benjamin)"
        ],
        "question": "Cherries were the most popular fruit at the party.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 454,
        "story_id": 157,
        "context": [
            "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.",
            "All fruits are provided in the same weight at the beginning of the party.",
            "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.",
            "At the end of the party, strawberries had the lowest remaining weight.",
            "At the end of the party, the amount of leftover blueberries was lower than that of cherries.",
            "Benjamin only ate oranges and grapes at the party."
        ],
        "context_fol": [
            "Party(strawberry) \u2228 Party(orange) \u2228 Party(blueberry) \u2228 Party(grape) \u2228 Party(cherry) ",
            "\u2200x (Party(x) \u2192 SameWeight(x))",
            "\u2200x (LowestAmount(x) \u2192 MostPopular(x)) ",
            "LowestAmount(strawberries)",
            "Lower(blueberry, cherry)",
            "Eat(orange, benjamin) \u2227 Eat(grape, benjamin) \u2227 \u00acEat(blueberry, benjamin) \u2227 \u00acEat(cherry, benjamin) \u2227 \u00acEat(strawberry, benjamin)"
        ],
        "question": "Benjamin ate blueberries at the party.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 187,
        "story_id": 63,
        "context": [
            "All students who attend in person have registered for the conference. ",
            "Students either attend the conference in person or remotely. ",
            "No students from China attend the conference remotely. ",
            "James attends the conference but he does not attend the conference remotely.",
            "Jack attends the conference and he is a student from China."
        ],
        "context_fol": [
            "\u2200x (Attend(x) \u2192 Registered(x))",
            "\u2200x (Attend(x) \u2192 InPerson(x) \u2295 Remotely(x))",
            "\u2200x ((Attend(x) \u2227 China(x)) \u2192 \u00acRemotely(x))",
            "Attend(james) \u2227 \u00acRemotely(james)",
            "China(jack) \u2227 Attend(jack)"
        ],
        "question": "James attends the conference but not in person.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 188,
        "story_id": 63,
        "context": [
            "All students who attend in person have registered for the conference. ",
            "Students either attend the conference in person or remotely. ",
            "No students from China attend the conference remotely. ",
            "James attends the conference but he does not attend the conference remotely.",
            "Jack attends the conference and he is a student from China."
        ],
        "context_fol": [
            "\u2200x (Attend(x) \u2192 Registered(x))",
            "\u2200x (Attend(x) \u2192 InPerson(x) \u2295 Remotely(x))",
            "\u2200x ((Attend(x) \u2227 China(x)) \u2192 \u00acRemotely(x))",
            "Attend(james) \u2227 \u00acRemotely(james)",
            "China(jack) \u2227 Attend(jack)"
        ],
        "question": "Jack attends the conference in person.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 189,
        "story_id": 63,
        "context": [
            "All students who attend in person have registered for the conference. ",
            "Students either attend the conference in person or remotely. ",
            "No students from China attend the conference remotely. ",
            "James attends the conference but he does not attend the conference remotely.",
            "Jack attends the conference and he is a student from China."
        ],
        "context_fol": [
            "\u2200x (Attend(x) \u2192 Registered(x))",
            "\u2200x (Attend(x) \u2192 InPerson(x) \u2295 Remotely(x))",
            "\u2200x ((Attend(x) \u2227 China(x)) \u2192 \u00acRemotely(x))",
            "Attend(james) \u2227 \u00acRemotely(james)",
            "China(jack) \u2227 Attend(jack)"
        ],
        "question": "Jack has registered for the conference.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 633,
        "story_id": 223,
        "context": [
            "David Ha'ivri is a political strategist. ",
            "If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ",
            "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ",
            "Several Zionist leaders have been elected to the Shomron Regional Municipal council. ",
            "David Ha'ivri is a Zionist leader. "
        ],
        "context_fol": [
            "PoliticalStrategist(davidhaivri)",
            "\u2200x \u2203y (BornInIsrael(x) \u2227 ParentOf(x, y) \u2227 Israeli(y) \u2192 IsraeliCitizen(x))",
            "\u2203x (EmigratedTo(davidhaivri, america) \u2227 BornInIsrael(davidhaivri) \u2227 ParentOf(davidhaivri, x) \u2227 Israeli(x))",
            "\u2203x (ZionistLeader(x) \u2227 ElectedTo(x, shomronmunicipalcouncil))",
            "ZionstLeader(davidhaivri)"
        ],
        "question": "David Ha'ivri is an Israeli citizen.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 634,
        "story_id": 223,
        "context": [
            "David Ha'ivri is a political strategist. ",
            "If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ",
            "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ",
            "Several Zionist leaders have been elected to the Shomron Regional Municipal council. ",
            "David Ha'ivri is a Zionist leader. "
        ],
        "context_fol": [
            "PoliticalStrategist(davidhaivri)",
            "\u2200x \u2203y (BornInIsrael(x) \u2227 ParentOf(x, y) \u2227 Israeli(y) \u2192 IsraeliCitizen(x))",
            "\u2203x (EmigratedTo(davidhaivri, america) \u2227 BornInIsrael(davidhaivri) \u2227 ParentOf(davidhaivri, x) \u2227 Israeli(x))",
            "\u2203x (ZionistLeader(x) \u2227 ElectedTo(x, shomronmunicipalcouncil))",
            "ZionstLeader(davidhaivri)"
        ],
        "question": "David Ha'ivri is a United States citizen.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 635,
        "story_id": 223,
        "context": [
            "David Ha'ivri is a political strategist. ",
            "If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ",
            "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ",
            "Several Zionist leaders have been elected to the Shomron Regional Municipal council. ",
            "David Ha'ivri is a Zionist leader. "
        ],
        "context_fol": [
            "PoliticalStrategist(davidhaivri)",
            "\u2200x \u2203y (BornInIsrael(x) \u2227 ParentOf(x, y) \u2227 Israeli(y) \u2192 IsraeliCitizen(x))",
            "\u2203x (EmigratedTo(davidhaivri, america) \u2227 BornInIsrael(davidhaivri) \u2227 ParentOf(davidhaivri, x) \u2227 Israeli(x))",
            "\u2203x (ZionistLeader(x) \u2227 ElectedTo(x, shomronmunicipalcouncil))",
            "ZionstLeader(davidhaivri)"
        ],
        "question": "David Ha'ivri has been elected to the Shomron Regional Municipal council.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 3,
        "story_id": 1,
        "context": [
            "Mary has the flu.",
            "Flu and influenza are the same disease.",
            "Susan doesn't have influenza."
        ],
        "context_fol": [
            "Have(mary, flu)",
            "\u2200x (Have(x, flu) \u2194 Have(x, influenza))",
            "\u00acHave(susan, influenza)"
        ],
        "question": "Either Mary or Susan has influenza.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 121,
        "story_id": 42,
        "context": [
            "James Cocks was a British lawyer.",
            "James Cocks was a Whig politician who sat in the House of Commons.",
            "A British is a European.",
            "Any lawyer is familiar with laws.",
            "Some Whigs speak French."
        ],
        "context_fol": [
            "British(james) \u2227 Lawyer(james)",
            "Whig(james) \u2227 Politician(james) \u2227 SatInHouseOfCommons(james)",
            "\u2200x (British(x) \u2192 European(x))",
            "\u2200x (Lawyer(x) \u2192 FamiliarWithLaws(x))",
            "\u2203x (Whig(x) \u2227 SpeakFrench(x))"
        ],
        "question": "No lawyer ever sat in the House of Commons.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 122,
        "story_id": 42,
        "context": [
            "James Cocks was a British lawyer.",
            "James Cocks was a Whig politician who sat in the House of Commons.",
            "A British is a European.",
            "Any lawyer is familiar with laws.",
            "Some Whigs speak French."
        ],
        "context_fol": [
            "British(james) \u2227 Lawyer(james)",
            "Whig(james) \u2227 Politician(james) \u2227 SatInHouseOfCommons(james)",
            "\u2200x (British(x) \u2192 European(x))",
            "\u2200x (Lawyer(x) \u2192 FamiliarWithLaws(x))",
            "\u2203x (Whig(x) \u2227 SpeakFrench(x))"
        ],
        "question": "Some European is familiar with laws.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 123,
        "story_id": 42,
        "context": [
            "James Cocks was a British lawyer.",
            "James Cocks was a Whig politician who sat in the House of Commons.",
            "A British is a European.",
            "Any lawyer is familiar with laws.",
            "Some Whigs speak French."
        ],
        "context_fol": [
            "British(james) \u2227 Lawyer(james)",
            "Whig(james) \u2227 Politician(james) \u2227 SatInHouseOfCommons(james)",
            "\u2200x (British(x) \u2192 European(x))",
            "\u2200x (Lawyer(x) \u2192 FamiliarWithLaws(x))",
            "\u2203x (Whig(x) \u2227 SpeakFrench(x))"
        ],
        "question": "James Cocks speaks French.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 365,
        "story_id": 122,
        "context": [
            "Beasts of Prey is either a fantasy novel or a science fiction novel.",
            "Science fiction novels are not about mythological creatures",
            "Beasts of Prey Is about a creature known as the Shetani.",
            "Shetanis are mythological."
        ],
        "context_fol": [
            "Novel(beastsofprey) \u2227 Fantasy(beastsofprey) \u2228 ScienceFiction(beastsofprey)",
            "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))",
            "About(beastsofprey, shetani) \u2227 Creature(shetani)",
            "Mythological(shetani)"
        ],
        "question": "Beasts of prey is a fantasy novel.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 366,
        "story_id": 122,
        "context": [
            "Beasts of Prey is either a fantasy novel or a science fiction novel.",
            "Science fiction novels are not about mythological creatures",
            "Beasts of Prey Is about a creature known as the Shetani.",
            "Shetanis are mythological."
        ],
        "context_fol": [
            "Novel(beastsofprey) \u2227 Fantasy(beastsofprey) \u2228 ScienceFiction(beastsofprey)",
            "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))",
            "About(beastsofprey, shetani) \u2227 Creature(shetani)",
            "Mythological(shetani)"
        ],
        "question": "Beasts of prey isn't a science fiction novel.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 367,
        "story_id": 122,
        "context": [
            "Beasts of Prey is either a fantasy novel or a science fiction novel.",
            "Science fiction novels are not about mythological creatures",
            "Beasts of Prey Is about a creature known as the Shetani.",
            "Shetanis are mythological."
        ],
        "context_fol": [
            "Novel(beastsofprey) \u2227 Fantasy(beastsofprey) \u2228 ScienceFiction(beastsofprey)",
            "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))",
            "About(beastsofprey, shetani) \u2227 Creature(shetani)",
            "Mythological(shetani)"
        ],
        "question": "A shetani is either mythological or a creature.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 47,
        "story_id": 17,
        "context": [
            "Odell is an English surname originating in Odell, Bedfordshire.",
            "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.",
            "Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.",
            "Amy Odell is a British singer-songwriter.",
            "Jack Odell is an English toy inventor."
        ],
        "context_fol": [
            "\u2200x (Odell(x) \u2192 Surname(x))",
            "\u2203x (Odell(x) \u2227 SpelledODell(x))",
            "Odell(amyOdell) \u2227 NotablePeople(amyOdell) \u2227 Odell(jackOdell) \u2227 NotablePeople(jackOdell) \u2227 Odell(matsOdell) \u2227 NotablePeople(matsOdell)",
            "British(amyOdell) \u2227 Singer(amyOdell) \u2227 SongWriter(amyOdell)",
            "English(jackOdell) \u2227 ToyInvertor(jackOdell)"
        ],
        "question": "Jack Odell is a notable people.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 48,
        "story_id": 17,
        "context": [
            "Odell is an English surname originating in Odell, Bedfordshire.",
            "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.",
            "Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.",
            "Amy Odell is a British singer-songwriter.",
            "Jack Odell is an English toy inventor."
        ],
        "context_fol": [
            "\u2200x (Odell(x) \u2192 Surname(x))",
            "\u2203x (Odell(x) \u2227 SpelledODell(x))",
            "Odell(amyOdell) \u2227 NotablePeople(amyOdell) \u2227 Odell(jackOdell) \u2227 NotablePeople(jackOdell) \u2227 Odell(matsOdell) \u2227 NotablePeople(matsOdell)",
            "British(amyOdell) \u2227 Singer(amyOdell) \u2227 SongWriter(amyOdell)",
            "English(jackOdell) \u2227 ToyInvertor(jackOdell)"
        ],
        "question": "Odell is Amy Odell's surname.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 49,
        "story_id": 17,
        "context": [
            "Odell is an English surname originating in Odell, Bedfordshire.",
            "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.",
            "Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.",
            "Amy Odell is a British singer-songwriter.",
            "Jack Odell is an English toy inventor."
        ],
        "context_fol": [
            "\u2200x (Odell(x) \u2192 Surname(x))",
            "\u2203x (Odell(x) \u2227 SpelledODell(x))",
            "Odell(amyOdell) \u2227 NotablePeople(amyOdell) \u2227 Odell(jackOdell) \u2227 NotablePeople(jackOdell) \u2227 Odell(matsOdell) \u2227 NotablePeople(matsOdell)",
            "British(amyOdell) \u2227 Singer(amyOdell) \u2227 SongWriter(amyOdell)",
            "English(jackOdell) \u2227 ToyInvertor(jackOdell)"
        ],
        "question": "Amy Odell is an English toy inventor.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 50,
        "story_id": 17,
        "context": [
            "Odell is an English surname originating in Odell, Bedfordshire.",
            "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.",
            "Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.",
            "Amy Odell is a British singer-songwriter.",
            "Jack Odell is an English toy inventor."
        ],
        "context_fol": [
            "\u2200x (Odell(x) \u2192 Surname(x))",
            "\u2203x (Odell(x) \u2227 SpelledODell(x))",
            "Odell(amyOdell) \u2227 NotablePeople(amyOdell) \u2227 Odell(jackOdell) \u2227 NotablePeople(jackOdell) \u2227 Odell(matsOdell) \u2227 NotablePeople(matsOdell)",
            "British(amyOdell) \u2227 Singer(amyOdell) \u2227 SongWriter(amyOdell)",
            "English(jackOdell) \u2227 ToyInvertor(jackOdell)"
        ],
        "question": "Amy Odell is also Amy O'dell.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 482,
        "story_id": 167,
        "context": [
            "If you go somewhere by train, you will not lose time.",
            "If you go somewhere by car and meet traffic jam, you will lose time.",
            "If you lose time, you will be late for work.",
            "Mary can get from New Haven to New York City either by train or car.",
            "Mary is late for work."
        ],
        "context_fol": [
            "\u2200x (Train(x) \u2192 \u00acLoseTime(x))",
            "\u2200x ((Car(x) \u2227 MeetJam(x)) \u2192 LoseTime(x))",
            "\u2200x (LoseTime(x) \u2194 LateForWork(x))",
            "Train(mary) \u2295 Car(mary)",
            "LateForWork(mary)"
        ],
        "question": "Mary gets from New Haven to New York City by train.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 483,
        "story_id": 167,
        "context": [
            "If you go somewhere by train, you will not lose time.",
            "If you go somewhere by car and meet traffic jam, you will lose time.",
            "If you lose time, you will be late for work.",
            "Mary can get from New Haven to New York City either by train or car.",
            "Mary is late for work."
        ],
        "context_fol": [
            "\u2200x (Train(x) \u2192 \u00acLoseTime(x))",
            "\u2200x ((Car(x) \u2227 MeetJam(x)) \u2192 LoseTime(x))",
            "\u2200x (LoseTime(x) \u2194 LateForWork(x))",
            "Train(mary) \u2295 Car(mary)",
            "LateForWork(mary)"
        ],
        "question": "Mary gets from New Haven to New York City by car.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 484,
        "story_id": 167,
        "context": [
            "If you go somewhere by train, you will not lose time.",
            "If you go somewhere by car and meet traffic jam, you will lose time.",
            "If you lose time, you will be late for work.",
            "Mary can get from New Haven to New York City either by train or car.",
            "Mary is late for work."
        ],
        "context_fol": [
            "\u2200x (Train(x) \u2192 \u00acLoseTime(x))",
            "\u2200x ((Car(x) \u2227 MeetJam(x)) \u2192 LoseTime(x))",
            "\u2200x (LoseTime(x) \u2194 LateForWork(x))",
            "Train(mary) \u2295 Car(mary)",
            "LateForWork(mary)"
        ],
        "question": "Mary meets traffic jam.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 746,
        "story_id": 297,
        "context": [
            "If a person is hungry, the person is uncomfortable.",
            "If a person is uncomfortable, the person is unhappy."
        ],
        "context_fol": [
            "\u2200x (Hungry(x) \u2192 Uncomfortable(x))",
            "\u2200x (Uncomfortable(x) \u2192 \u00acHappy(x))"
        ],
        "question": "If a person is not hungry, the person is unhappy.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 769,
        "story_id": 309,
        "context": [
            "Tipped employees do not get a guaranteed minimum wage.",
            "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).",
            "All lawyers are white-collar workers.",
            "Every advocate is a lawyer.",
            "Mary is not a lawyer or a tipped employee."
        ],
        "context_fol": [
            "\u2200x (Tipped(x) \u2192 \u00acGetMinWage(x))",
            "\u2200x (WhiteCollar(x) \u2192 GetMinWage(x))",
            "\u2200x (Lawyer(x) \u2192 WhiteCollar(x))",
            "\u2200x (Advocate(x) \u2192 Lawyer(x))",
            "\u00acLawyer(mary) \u2295 Tipped(mary)"
        ],
        "question": "Mary is a white-collar worker.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 770,
        "story_id": 309,
        "context": [
            "Tipped employees do not get a guaranteed minimum wage.",
            "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).",
            "All lawyers are white-collar workers.",
            "Every advocate is a lawyer.",
            "Mary is not a lawyer or a tipped employee."
        ],
        "context_fol": [
            "\u2200x (Tipped(x) \u2192 \u00acGetMinWage(x))",
            "\u2200x (WhiteCollar(x) \u2192 GetMinWage(x))",
            "\u2200x (Lawyer(x) \u2192 WhiteCollar(x))",
            "\u2200x (Advocate(x) \u2192 Lawyer(x))",
            "\u00acLawyer(mary) \u2295 Tipped(mary)"
        ],
        "question": "Mary is an advocate.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 771,
        "story_id": 309,
        "context": [
            "Tipped employees do not get a guaranteed minimum wage.",
            "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).",
            "All lawyers are white-collar workers.",
            "Every advocate is a lawyer.",
            "Mary is not a lawyer or a tipped employee."
        ],
        "context_fol": [
            "\u2200x (Tipped(x) \u2192 \u00acGetMinWage(x))",
            "\u2200x (WhiteCollar(x) \u2192 GetMinWage(x))",
            "\u2200x (Lawyer(x) \u2192 WhiteCollar(x))",
            "\u2200x (Advocate(x) \u2192 Lawyer(x))",
            "\u00acLawyer(mary) \u2295 Tipped(mary)"
        ],
        "question": "Mary is not an advocate.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 772,
        "story_id": 309,
        "context": [
            "Tipped employees do not get a guaranteed minimum wage.",
            "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).",
            "All lawyers are white-collar workers.",
            "Every advocate is a lawyer.",
            "Mary is not a lawyer or a tipped employee."
        ],
        "context_fol": [
            "\u2200x (Tipped(x) \u2192 \u00acGetMinWage(x))",
            "\u2200x (WhiteCollar(x) \u2192 GetMinWage(x))",
            "\u2200x (Lawyer(x) \u2192 WhiteCollar(x))",
            "\u2200x (Advocate(x) \u2192 Lawyer(x))",
            "\u00acLawyer(mary) \u2295 Tipped(mary)"
        ],
        "question": "Mary is either an advocate or a tipped employee.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 773,
        "story_id": 309,
        "context": [
            "Tipped employees do not get a guaranteed minimum wage.",
            "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).",
            "All lawyers are white-collar workers.",
            "Every advocate is a lawyer.",
            "Mary is not a lawyer or a tipped employee."
        ],
        "context_fol": [
            "\u2200x (Tipped(x) \u2192 \u00acGetMinWage(x))",
            "\u2200x (WhiteCollar(x) \u2192 GetMinWage(x))",
            "\u2200x (Lawyer(x) \u2192 WhiteCollar(x))",
            "\u2200x (Advocate(x) \u2192 Lawyer(x))",
            "\u00acLawyer(mary) \u2295 Tipped(mary)"
        ],
        "question": "If Mary is not an advocate and gets a guaranteed minimum wage, she is not a tipped employee.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 774,
        "story_id": 309,
        "context": [
            "Tipped employees do not get a guaranteed minimum wage.",
            "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).",
            "All lawyers are white-collar workers.",
            "Every advocate is a lawyer.",
            "Mary is not a lawyer or a tipped employee."
        ],
        "context_fol": [
            "\u2200x (Tipped(x) \u2192 \u00acGetMinWage(x))",
            "\u2200x (WhiteCollar(x) \u2192 GetMinWage(x))",
            "\u2200x (Lawyer(x) \u2192 WhiteCollar(x))",
            "\u2200x (Advocate(x) \u2192 Lawyer(x))",
            "\u00acLawyer(mary) \u2295 Tipped(mary)"
        ],
        "question": "If Mary is either an advocate or a tipped employee, she is an advocate.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 232,
        "story_id": 76,
        "context": [
            "Asa Hoffmann was born in New York City.",
            "Asa Hoffman lives in Manhattan.",
            "Asa Hoffman is a chess player.",
            "Some chess players are grandmasters.",
            "People born and living in New York City are New Yorkers.",
            "People liviing in Manhattan live in New York City."
        ],
        "context_fol": [
            "BornIn(asaHoffmann, newyorkcity)",
            "LivesIn(asaHoffmann, manhattan)",
            "IsChessPlayer(asaHoffmann)",
            "\u2203x (IsChestPlayer(x) \u2227 IsGrandMaster(x))",
            "\u2200x (BornIn(x, newyorkcity) \u2227 LivesIn(x, newyorkcity) \u2192 IsNewYorker(x))",
            "\u2200x (LivesIn(x, manhattan) \u2192 LivesIn(x, newyorkcity))"
        ],
        "question": "Asa Hoffmann is a New Yorkers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 233,
        "story_id": 76,
        "context": [
            "Asa Hoffmann was born in New York City.",
            "Asa Hoffman lives in Manhattan.",
            "Asa Hoffman is a chess player.",
            "Some chess players are grandmasters.",
            "People born and living in New York City are New Yorkers.",
            "People liviing in Manhattan live in New York City."
        ],
        "context_fol": [
            "BornIn(asaHoffmann, newyorkcity)",
            "LivesIn(asaHoffmann, manhattan)",
            "IsChessPlayer(asaHoffmann)",
            "\u2203x (IsChestPlayer(x) \u2227 IsGrandMaster(x))",
            "\u2200x (BornIn(x, newyorkcity) \u2227 LivesIn(x, newyorkcity) \u2192 IsNewYorker(x))",
            "\u2200x (LivesIn(x, manhattan) \u2192 LivesIn(x, newyorkcity))"
        ],
        "question": "Asa Hoffmann is a grandmaster.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 234,
        "story_id": 76,
        "context": [
            "Asa Hoffmann was born in New York City.",
            "Asa Hoffman lives in Manhattan.",
            "Asa Hoffman is a chess player.",
            "Some chess players are grandmasters.",
            "People born and living in New York City are New Yorkers.",
            "People liviing in Manhattan live in New York City."
        ],
        "context_fol": [
            "BornIn(asaHoffmann, newyorkcity)",
            "LivesIn(asaHoffmann, manhattan)",
            "IsChessPlayer(asaHoffmann)",
            "\u2203x (IsChestPlayer(x) \u2227 IsGrandMaster(x))",
            "\u2200x (BornIn(x, newyorkcity) \u2227 LivesIn(x, newyorkcity) \u2192 IsNewYorker(x))",
            "\u2200x (LivesIn(x, manhattan) \u2192 LivesIn(x, newyorkcity))"
        ],
        "question": "Asa Hoffmann does not live in New York.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 784,
        "story_id": 313,
        "context": [
            "Some of those who apply for a Schengen Visa get it.",
            "To apply for a Schengen Visa, you need to provide financial guarantees.",
            "If you need to provide financial guarantees, you must request documents from the bank.",
            "Do not close your bank account if you request documents from the bank.",
            "Philip closed his bank account."
        ],
        "context_fol": [
            "\u2203x (ApplyVisa(x) \u2192 GetVisa(x))",
            "\u2200x (ApplyVisa(x) \u2192 FinancialGuarantees(x))",
            "\u2200x (FinancialGuarantees(x) \u2192 RequestDocuments(x))",
            "\u2200x (RequestDocuments(x) \u2192 \u00acCloseBankAccount(x))",
            "CloseBankAccount(philip)"
        ],
        "question": "Philip got a Schengen Visa.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 785,
        "story_id": 313,
        "context": [
            "Some of those who apply for a Schengen Visa get it.",
            "To apply for a Schengen Visa, you need to provide financial guarantees.",
            "If you need to provide financial guarantees, you must request documents from the bank.",
            "Do not close your bank account if you request documents from the bank.",
            "Philip closed his bank account."
        ],
        "context_fol": [
            "\u2203x (ApplyVisa(x) \u2192 GetVisa(x))",
            "\u2200x (ApplyVisa(x) \u2192 FinancialGuarantees(x))",
            "\u2200x (FinancialGuarantees(x) \u2192 RequestDocuments(x))",
            "\u2200x (RequestDocuments(x) \u2192 \u00acCloseBankAccount(x))",
            "CloseBankAccount(philip)"
        ],
        "question": "Philip applied for a Schengen Visa and got it.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 786,
        "story_id": 313,
        "context": [
            "Some of those who apply for a Schengen Visa get it.",
            "To apply for a Schengen Visa, you need to provide financial guarantees.",
            "If you need to provide financial guarantees, you must request documents from the bank.",
            "Do not close your bank account if you request documents from the bank.",
            "Philip closed his bank account."
        ],
        "context_fol": [
            "\u2203x (ApplyVisa(x) \u2192 GetVisa(x))",
            "\u2200x (ApplyVisa(x) \u2192 FinancialGuarantees(x))",
            "\u2200x (FinancialGuarantees(x) \u2192 RequestDocuments(x))",
            "\u2200x (RequestDocuments(x) \u2192 \u00acCloseBankAccount(x))",
            "CloseBankAccount(philip)"
        ],
        "question": "If Philip did not request documents from the bank or get a Schengen Visa, he didn\u2019t apply for a Schengen Visa.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 745,
        "story_id": 296,
        "context": [
            "Some fears lead to anxiety.",
            "Some anxiety leads to terror."
        ],
        "context_fol": [
            "\u2203x (Fear(x) \u2227 Anxiety(x))",
            "\u2203x (Anxiety(x) \u2227 Terror(x))"
        ],
        "question": "No fears lead to terror.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 598,
        "story_id": 208,
        "context": [
            "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
            "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
            "NY, PA, OH, MI are states in the US.",
            "ON is a state of Canada.",
            "There is a major settlement of Lake Huron in ON. ",
            "All states are in their country.",
            "The US is in North America.",
            "The Great Lakes began to form at the end of the Last Glacial Period."
        ],
        "context_fol": [
            "\u2200x (GreatLake(x) \u2192 Superior(x) \u2228 Michigan(x) \u2228 Huron(x) \u2228 Erie(x) \u2228 Ontario(x))",
            "\u2203x \u2200y (Erie(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, ny) \u2228 In(x, pa) \u2228 In(x, oh) \u2228 In(x, mi))",
            "State(ny, us) \u2227 State(pa, us) \u2227 State(oh, us) \u2227 State(mi, us)",
            "State(on, canada)",
            "\u2203x \u2200y (Huron(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, on))",
            "\u2200x \u2200y (State(x, y) \u2192 In(x, y))",
            "In(us, northamerica)",
            "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastglacialperiod))"
        ],
        "question": "Lake Erie has a major settlement.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 599,
        "story_id": 208,
        "context": [
            "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
            "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
            "NY, PA, OH, MI are states in the US.",
            "ON is a state of Canada.",
            "There is a major settlement of Lake Huron in ON. ",
            "All states are in their country.",
            "The US is in North America.",
            "The Great Lakes began to form at the end of the Last Glacial Period."
        ],
        "context_fol": [
            "\u2200x (GreatLake(x) \u2192 Superior(x) \u2228 Michigan(x) \u2228 Huron(x) \u2228 Erie(x) \u2228 Ontario(x))",
            "\u2203x \u2200y (Erie(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, ny) \u2228 In(x, pa) \u2228 In(x, oh) \u2228 In(x, mi))",
            "State(ny, us) \u2227 State(pa, us) \u2227 State(oh, us) \u2227 State(mi, us)",
            "State(on, canada)",
            "\u2203x \u2200y (Huron(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, on))",
            "\u2200x \u2200y (State(x, y) \u2192 In(x, y))",
            "In(us, northamerica)",
            "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastglacialperiod))"
        ],
        "question": "There is a great lake that did not form at the end of the Last Glacial Period.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 836,
        "story_id": 325,
        "context": [
            "All defenders are soccer players.",
            "No soccer players are professional basketball players.",
            "All centerbacks are defenders.",
            "All NBA players are professional basketball players.",
            "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
        ],
        "context_fol": [
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
            "\u2200x (CenterBack(x) \u2192 Defender(x))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
        ],
        "question": "Stephen Curry is a professional basketball player.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 837,
        "story_id": 325,
        "context": [
            "All defenders are soccer players.",
            "No soccer players are professional basketball players.",
            "All centerbacks are defenders.",
            "All NBA players are professional basketball players.",
            "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
        ],
        "context_fol": [
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
            "\u2200x (CenterBack(x) \u2192 Defender(x))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
        ],
        "question": "Stephen Curry is a centerback.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 838,
        "story_id": 325,
        "context": [
            "All defenders are soccer players.",
            "No soccer players are professional basketball players.",
            "All centerbacks are defenders.",
            "All NBA players are professional basketball players.",
            "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."
        ],
        "context_fol": [
            "\u2200x (Defender(x) \u2192 SoccerPlayer(x))",
            "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))",
            "\u2200x (CenterBack(x) \u2192 Defender(x))",
            "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))",
            "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
        ],
        "question": "Stephen Curry is not a centerback.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 90,
        "story_id": 31,
        "context": [
            "Naive cynicism was proposed by Justin Kruger and a colleague.",
            "Thomas Gilovich is a colleague of Justin Kruger. ",
            "Naive cynicism is a philosophy of mind."
        ],
        "context_fol": [
            "Proposed(justinKruger, naiveCynicism) \u2227 Proposed(colleagueOfJustinKruger, naiveCynicism) ",
            "Colleague(thomasGilovich, justinKruger)",
            "PhilosophyOfMind(naiveCynicism)"
        ],
        "question": "Thomas Gilovich proposed naive cynicism.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 91,
        "story_id": 31,
        "context": [
            "Naive cynicism was proposed by Justin Kruger and a colleague.",
            "Thomas Gilovich is a colleague of Justin Kruger. ",
            "Naive cynicism is a philosophy of mind."
        ],
        "context_fol": [
            "Proposed(justinKruger, naiveCynicism) \u2227 Proposed(colleagueOfJustinKruger, naiveCynicism) ",
            "Colleague(thomasGilovich, justinKruger)",
            "PhilosophyOfMind(naiveCynicism)"
        ],
        "question": "Justin Kruger propose a philosophy of mind.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 92,
        "story_id": 31,
        "context": [
            "Naive cynicism was proposed by Justin Kruger and a colleague.",
            "Thomas Gilovich is a colleague of Justin Kruger. ",
            "Naive cynicism is a philosophy of mind."
        ],
        "context_fol": [
            "Proposed(justinKruger, naiveCynicism) \u2227 Proposed(colleagueOfJustinKruger, naiveCynicism) ",
            "Colleague(thomasGilovich, justinKruger)",
            "PhilosophyOfMind(naiveCynicism)"
        ],
        "question": "Thomas Gilovich worked on philiophies of mind.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 383,
        "story_id": 129,
        "context": [
            "",
            "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ",
            "Donald Knuth made major contributions to the analysis of algorithms.",
            "Marvin Minsky is recognized by his contributions to the field of artificial intelligence.",
            "Richard Hamming did research on numerical methods.",
            "John McCarthy had a central role in creating and shaping the field of artificial inteligence. "
        ],
        "context_fol": [
            "",
            "TuringAwarded(donaldKnuth) \u2227 TuringAwarded(marvinMinsky) \u2227 TuringAwarded(richardHamming) \u2227 TuringAwarded(johnMccarthy)",
            "ContributedTo(donaldKnuth, algorithms)",
            "ContributedTo(marvinMinsky, ai)",
            "ContributedTo(richardHamming, numericalMethods)",
            "ContributedTo(johnMccarthy, ai)"
        ],
        "question": "At least two people who have won the Turing Award worked in the field of artificial intelligence.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 384,
        "story_id": 129,
        "context": [
            "",
            "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ",
            "Donald Knuth made major contributions to the analysis of algorithms.",
            "Marvin Minsky is recognized by his contributions to the field of artificial intelligence.",
            "Richard Hamming did research on numerical methods.",
            "John McCarthy had a central role in creating and shaping the field of artificial inteligence. "
        ],
        "context_fol": [
            "",
            "TuringAwarded(donaldKnuth) \u2227 TuringAwarded(marvinMinsky) \u2227 TuringAwarded(richardHamming) \u2227 TuringAwarded(johnMccarthy)",
            "ContributedTo(donaldKnuth, algorithms)",
            "ContributedTo(marvinMinsky, ai)",
            "ContributedTo(richardHamming, numericalMethods)",
            "ContributedTo(johnMccarthy, ai)"
        ],
        "question": "At least two people who worked in the field of artificial intelligence have won the Turing Award.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 385,
        "story_id": 129,
        "context": [
            "",
            "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ",
            "Donald Knuth made major contributions to the analysis of algorithms.",
            "Marvin Minsky is recognized by his contributions to the field of artificial intelligence.",
            "Richard Hamming did research on numerical methods.",
            "John McCarthy had a central role in creating and shaping the field of artificial inteligence. "
        ],
        "context_fol": [
            "",
            "TuringAwarded(donaldKnuth) \u2227 TuringAwarded(marvinMinsky) \u2227 TuringAwarded(richardHamming) \u2227 TuringAwarded(johnMccarthy)",
            "ContributedTo(donaldKnuth, algorithms)",
            "ContributedTo(marvinMinsky, ai)",
            "ContributedTo(richardHamming, numericalMethods)",
            "ContributedTo(johnMccarthy, ai)"
        ],
        "question": "Only one people who have won the Turing Award made significant contributions to the analysis of algorithms.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 386,
        "story_id": 129,
        "context": [
            "",
            "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ",
            "Donald Knuth made major contributions to the analysis of algorithms.",
            "Marvin Minsky is recognized by his contributions to the field of artificial intelligence.",
            "Richard Hamming did research on numerical methods.",
            "John McCarthy had a central role in creating and shaping the field of artificial inteligence. "
        ],
        "context_fol": [
            "",
            "TuringAwarded(donaldKnuth) \u2227 TuringAwarded(marvinMinsky) \u2227 TuringAwarded(richardHamming) \u2227 TuringAwarded(johnMccarthy)",
            "ContributedTo(donaldKnuth, algorithms)",
            "ContributedTo(marvinMinsky, ai)",
            "ContributedTo(richardHamming, numericalMethods)",
            "ContributedTo(johnMccarthy, ai)"
        ],
        "question": "No Turing Award winners worked in the field of numerical methods.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1224,
        "story_id": 429,
        "context": [
            "No easy Leetcode problems have an AC rate lower than 20 percent. ",
            "All Leetcode problems recommended to novices are easy.                                                                                                       ",
            "Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ",
            "All hard Leetcode problems are starred by more than 1 thousand users. ",
            "No Leetcode problems published after 2022 are starred by more than 1 thousand users. ",
            "2Sum is not recommended to novices and hard. ",
            "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. "
        ],
        "context_fol": [
            "\u2200x (Easy(x) \u2192 \u00acLowerAC(x))",
            "\u2200x (Recommended(x) \u2192 Easy(x))",
            "\u2200x (LowerAC(x) \u2295 Starred(x))",
            "\u2200x (Hard(x) \u2192 Starred(x))",
            "\u2200x (PublishedAfter2022(x) \u2192 \u00acStarred(x))",
            "\u00ac(Recommended(twosum) \u2227 Hard(twosum))",
            "\u00ac(Starred(foursum) \u2295 PublishedAfter2022(foursum))"
        ],
        "question": "2Sum is an easy Leetcode problem.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1225,
        "story_id": 429,
        "context": [
            "No easy Leetcode problems have an AC rate lower than 20 percent. ",
            "All Leetcode problems recommended to novices are easy.                                                                                                       ",
            "Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ",
            "All hard Leetcode problems are starred by more than 1 thousand users. ",
            "No Leetcode problems published after 2022 are starred by more than 1 thousand users. ",
            "2Sum is not recommended to novices and hard. ",
            "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. "
        ],
        "context_fol": [
            "\u2200x (Easy(x) \u2192 \u00acLowerAC(x))",
            "\u2200x (Recommended(x) \u2192 Easy(x))",
            "\u2200x (LowerAC(x) \u2295 Starred(x))",
            "\u2200x (Hard(x) \u2192 Starred(x))",
            "\u2200x (PublishedAfter2022(x) \u2192 \u00acStarred(x))",
            "\u00ac(Recommended(twosum) \u2227 Hard(twosum))",
            "\u00ac(Starred(foursum) \u2295 PublishedAfter2022(foursum))"
        ],
        "question": "2Sum is not an easy Leetcode problem.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1226,
        "story_id": 429,
        "context": [
            "No easy Leetcode problems have an AC rate lower than 20 percent. ",
            "All Leetcode problems recommended to novices are easy.                                                                                                       ",
            "Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ",
            "All hard Leetcode problems are starred by more than 1 thousand users. ",
            "No Leetcode problems published after 2022 are starred by more than 1 thousand users. ",
            "2Sum is not recommended to novices and hard. ",
            "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. "
        ],
        "context_fol": [
            "\u2200x (Easy(x) \u2192 \u00acLowerAC(x))",
            "\u2200x (Recommended(x) \u2192 Easy(x))",
            "\u2200x (LowerAC(x) \u2295 Starred(x))",
            "\u2200x (Hard(x) \u2192 Starred(x))",
            "\u2200x (PublishedAfter2022(x) \u2192 \u00acStarred(x))",
            "\u00ac(Recommended(twosum) \u2227 Hard(twosum))",
            "\u00ac(Starred(foursum) \u2295 PublishedAfter2022(foursum))"
        ],
        "question": "4Sum is a Leetcode problem recommended to the novice or is hard.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1227,
        "story_id": 429,
        "context": [
            "No easy Leetcode problems have an AC rate lower than 20 percent. ",
            "All Leetcode problems recommended to novices are easy.                                                                                                       ",
            "Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ",
            "All hard Leetcode problems are starred by more than 1 thousand users. ",
            "No Leetcode problems published after 2022 are starred by more than 1 thousand users. ",
            "2Sum is not recommended to novices and hard. ",
            "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. "
        ],
        "context_fol": [
            "\u2200x (Easy(x) \u2192 \u00acLowerAC(x))",
            "\u2200x (Recommended(x) \u2192 Easy(x))",
            "\u2200x (LowerAC(x) \u2295 Starred(x))",
            "\u2200x (Hard(x) \u2192 Starred(x))",
            "\u2200x (PublishedAfter2022(x) \u2192 \u00acStarred(x))",
            "\u00ac(Recommended(twosum) \u2227 Hard(twosum))",
            "\u00ac(Starred(foursum) \u2295 PublishedAfter2022(foursum))"
        ],
        "question": "4Sum is neither a 2Sum Leetcode problem recommended to the novice nor a Leetcode problem that's hard.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 319,
        "story_id": 105,
        "context": [
            "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.",
            "The lead single of the extended play Inside is Show Your Love.",
            "Show Your Love contains a hopeful message.",
            "BtoB 4u member Hyunsik wrote Show Your Love.",
            "There is a music video for Show Your Love."
        ],
        "context_fol": [
            "Song(showyourlove) \u2227 RecordedBy(showyourlove, btob4u) \u2227 SouthKorean(btob4u) \u2227 BoyBand(btob4u)",
            "ExtendedPlay(inside) \u2227 LeadSingle(showyourlove) \u2227 LeadSingleOf(showyourlove, inside)",
            "Contains(showyourlove, hopefulmessage)",
            "Member(hyunsik, btob4u) \u2227 Wrote(hyunsik, showyourlove)",
            "HasMusicVideo(showyourlove)"
        ],
        "question": "Show your love wasn't written by a member of a boy band.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 320,
        "story_id": 105,
        "context": [
            "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.",
            "The lead single of the extended play Inside is Show Your Love.",
            "Show Your Love contains a hopeful message.",
            "BtoB 4u member Hyunsik wrote Show Your Love.",
            "There is a music video for Show Your Love."
        ],
        "context_fol": [
            "Song(showyourlove) \u2227 RecordedBy(showyourlove, btob4u) \u2227 SouthKorean(btob4u) \u2227 BoyBand(btob4u)",
            "ExtendedPlay(inside) \u2227 LeadSingle(showyourlove) \u2227 LeadSingleOf(showyourlove, inside)",
            "Contains(showyourlove, hopefulmessage)",
            "Member(hyunsik, btob4u) \u2227 Wrote(hyunsik, showyourlove)",
            "HasMusicVideo(showyourlove)"
        ],
        "question": "A lead single of inside contains a a hopeful message.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 321,
        "story_id": 105,
        "context": [
            "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.",
            "The lead single of the extended play Inside is Show Your Love.",
            "Show Your Love contains a hopeful message.",
            "BtoB 4u member Hyunsik wrote Show Your Love.",
            "There is a music video for Show Your Love."
        ],
        "context_fol": [
            "Song(showyourlove) \u2227 RecordedBy(showyourlove, btob4u) \u2227 SouthKorean(btob4u) \u2227 BoyBand(btob4u)",
            "ExtendedPlay(inside) \u2227 LeadSingle(showyourlove) \u2227 LeadSingleOf(showyourlove, inside)",
            "Contains(showyourlove, hopefulmessage)",
            "Member(hyunsik, btob4u) \u2227 Wrote(hyunsik, showyourlove)",
            "HasMusicVideo(showyourlove)"
        ],
        "question": "Hyunsik is Korean.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 739,
        "story_id": 290,
        "context": [
            "All tables are round.",
            "Some furniture are tables."
        ],
        "context_fol": [
            "\u2200x (Table(x) \u2192 Round(x))",
            "\u2203x (Furniture(x) \u2227 Table(x))"
        ],
        "question": "Some furniture are round.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 716,
        "story_id": 267,
        "context": [
            "All juvenile delinquents are maladjusted individuals.",
            "Some juvenile delinquents are products of broken homes."
        ],
        "context_fol": [
            "\u2200x (JuvenileDelinquent(x) \u2192 MaladjustedIndividual(x))",
            "\u2203x (JuvenileDelinquent(x)  \u2227 ProductOfBrokenHome(x))"
        ],
        "question": "Some maladjusted individuals are products of broken homes.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1089,
        "story_id": 398,
        "context": [
            "Either brain reading or brain decoding. ",
            "All brain decoding is extracting information from BOLD signals.",
            "No extracting information from BOLD signals is without statistical pattern analysis. ",
            "Writing a novel is without statistical pattern analysis.",
            "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."
        ],
        "context_fol": [
            "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) ",
            "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))",
            "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))",
            "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) ",
            "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)"
        ],
        "question": "Multivoxel (pattern) analysis is a brain decoding.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1090,
        "story_id": 398,
        "context": [
            "Either brain reading or brain decoding. ",
            "All brain decoding is extracting information from BOLD signals.",
            "No extracting information from BOLD signals is without statistical pattern analysis. ",
            "Writing a novel is without statistical pattern analysis.",
            "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."
        ],
        "context_fol": [
            "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) ",
            "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))",
            "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))",
            "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) ",
            "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)"
        ],
        "question": "Multivoxel (pattern) analysis is the writing of a novel.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1091,
        "story_id": 398,
        "context": [
            "Either brain reading or brain decoding. ",
            "All brain decoding is extracting information from BOLD signals.",
            "No extracting information from BOLD signals is without statistical pattern analysis. ",
            "Writing a novel is without statistical pattern analysis.",
            "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."
        ],
        "context_fol": [
            "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) ",
            "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))",
            "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))",
            "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) ",
            "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)"
        ],
        "question": "Multivoxel (pattern) analysis is without statistical pattern analysis and writing a novel.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1092,
        "story_id": 398,
        "context": [
            "Either brain reading or brain decoding. ",
            "All brain decoding is extracting information from BOLD signals.",
            "No extracting information from BOLD signals is without statistical pattern analysis. ",
            "Writing a novel is without statistical pattern analysis.",
            "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."
        ],
        "context_fol": [
            "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) ",
            "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))",
            "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))",
            "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) ",
            "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)"
        ],
        "question": "Multivoxel (pattern) analysis is without statistical pattern analysis or writing a novel.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1093,
        "story_id": 398,
        "context": [
            "Either brain reading or brain decoding. ",
            "All brain decoding is extracting information from BOLD signals.",
            "No extracting information from BOLD signals is without statistical pattern analysis. ",
            "Writing a novel is without statistical pattern analysis.",
            "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."
        ],
        "context_fol": [
            "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) ",
            "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))",
            "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))",
            "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) ",
            "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)"
        ],
        "question": "Multivoxel (pattern) analysis is either without statistical pattern analysis or writing a novel.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1094,
        "story_id": 398,
        "context": [
            "Either brain reading or brain decoding. ",
            "All brain decoding is extracting information from BOLD signals.",
            "No extracting information from BOLD signals is without statistical pattern analysis. ",
            "Writing a novel is without statistical pattern analysis.",
            "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."
        ],
        "context_fol": [
            "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) ",
            "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))",
            "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))",
            "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) ",
            "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)"
        ],
        "question": "If multivoxel (pattern) analysis is writing a novel, then multivoxel (pattern) analysis is neither without statistical pattern analysis nor writing a novel.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 609,
        "story_id": 212,
        "context": [
            "If you have room for dessert, you have room for broccoli.",
            "Everyone at Luis's dinner party has room for dessert, including Luis.",
            "Mauricia does not have room for broccoli.",
            "Luis's dinner party is the first ever dinner party that Allison has attended.",
            "Gustave has room for both broccoli and asparagus.",
            "Broccoli and asparagus are both vegetables."
        ],
        "context_fol": [
            "\u2200x (RoomFor(x, dessert) \u2192 RoomFor(x, broccoli))",
            "\u2200x (AtLuisParty(x) \u2192 RoomFor(x, dessert))",
            "\u00acRoomFor(mauricia, broccoli)",
            "FirstDinnerParty(allison, luisparty) \u2227 AtLuisParty(allison)",
            "RoomFor(gustave, broccoli) \u2227 RoomFor(gustave, asparagus)",
            "Vegetable(broccoli) \u2227 Vegetable(asparagus)"
        ],
        "question": "Allison has room for broccoli.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 610,
        "story_id": 212,
        "context": [
            "If you have room for dessert, you have room for broccoli.",
            "Everyone at Luis's dinner party has room for dessert, including Luis.",
            "Mauricia does not have room for broccoli.",
            "Luis's dinner party is the first ever dinner party that Allison has attended.",
            "Gustave has room for both broccoli and asparagus.",
            "Broccoli and asparagus are both vegetables."
        ],
        "context_fol": [
            "\u2200x (RoomFor(x, dessert) \u2192 RoomFor(x, broccoli))",
            "\u2200x (AtLuisParty(x) \u2192 RoomFor(x, dessert))",
            "\u00acRoomFor(mauricia, broccoli)",
            "FirstDinnerParty(allison, luisparty) \u2227 AtLuisParty(allison)",
            "RoomFor(gustave, broccoli) \u2227 RoomFor(gustave, asparagus)",
            "Vegetable(broccoli) \u2227 Vegetable(asparagus)"
        ],
        "question": "Mauricia is at Luis's dinner party.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 611,
        "story_id": 212,
        "context": [
            "If you have room for dessert, you have room for broccoli.",
            "Everyone at Luis's dinner party has room for dessert, including Luis.",
            "Mauricia does not have room for broccoli.",
            "Luis's dinner party is the first ever dinner party that Allison has attended.",
            "Gustave has room for both broccoli and asparagus.",
            "Broccoli and asparagus are both vegetables."
        ],
        "context_fol": [
            "\u2200x (RoomFor(x, dessert) \u2192 RoomFor(x, broccoli))",
            "\u2200x (AtLuisParty(x) \u2192 RoomFor(x, dessert))",
            "\u00acRoomFor(mauricia, broccoli)",
            "FirstDinnerParty(allison, luisparty) \u2227 AtLuisParty(allison)",
            "RoomFor(gustave, broccoli) \u2227 RoomFor(gustave, asparagus)",
            "Vegetable(broccoli) \u2227 Vegetable(asparagus)"
        ],
        "question": "Gustav has room for dessert.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 124,
        "story_id": 43,
        "context": [
            "Imagine Dragons is an American pop rock band.",
            "The lead singer of Imagine Dragons is Dan.",
            "Dan is also a songwriter.",
            "All lead singers are singers.",
            "All singers are musicians.",
            "Demons is one of the most popular singles of Imagine Dragons.",
            "Some singles of Imagine Dragons have been on Billboard Hot 100."
        ],
        "context_fol": [
            "American(imagineDragon) \u2227 RockBand(imagineDragon)",
            "LeadSinger(imagineDragon, dan)",
            "SongWriter(dan)",
            "\u2200x \u2200y (LeadSinger(x, y) \u2192 Singer(y))",
            "\u2200x (Singer(x) \u2192 Musician(x))",
            "PopularSingle(imagineDragon, demons)",
            "\u2203x (PopularSingle(imagineDragon, x) \u2227 BillboardHot100(x))"
        ],
        "question": "Some rock band has a songwriter.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 125,
        "story_id": 43,
        "context": [
            "Imagine Dragons is an American pop rock band.",
            "The lead singer of Imagine Dragons is Dan.",
            "Dan is also a songwriter.",
            "All lead singers are singers.",
            "All singers are musicians.",
            "Demons is one of the most popular singles of Imagine Dragons.",
            "Some singles of Imagine Dragons have been on Billboard Hot 100."
        ],
        "context_fol": [
            "American(imagineDragon) \u2227 RockBand(imagineDragon)",
            "LeadSinger(imagineDragon, dan)",
            "SongWriter(dan)",
            "\u2200x \u2200y (LeadSinger(x, y) \u2192 Singer(y))",
            "\u2200x (Singer(x) \u2192 Musician(x))",
            "PopularSingle(imagineDragon, demons)",
            "\u2203x (PopularSingle(imagineDragon, x) \u2227 BillboardHot100(x))"
        ],
        "question": "Dan is not a musician.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 126,
        "story_id": 43,
        "context": [
            "Imagine Dragons is an American pop rock band.",
            "The lead singer of Imagine Dragons is Dan.",
            "Dan is also a songwriter.",
            "All lead singers are singers.",
            "All singers are musicians.",
            "Demons is one of the most popular singles of Imagine Dragons.",
            "Some singles of Imagine Dragons have been on Billboard Hot 100."
        ],
        "context_fol": [
            "American(imagineDragon) \u2227 RockBand(imagineDragon)",
            "LeadSinger(imagineDragon, dan)",
            "SongWriter(dan)",
            "\u2200x \u2200y (LeadSinger(x, y) \u2192 Singer(y))",
            "\u2200x (Singer(x) \u2192 Musician(x))",
            "PopularSingle(imagineDragon, demons)",
            "\u2203x (PopularSingle(imagineDragon, x) \u2227 BillboardHot100(x))"
        ],
        "question": "Demons has been on Billboard Hot 100.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1315,
        "story_id": 455,
        "context": [
            "All bread is food.",
            "Some sandwiches are bread.",
            "All food is edible. ",
            "No edible things are poisonous.",
            "Deodorant is poisonous."
        ],
        "context_fol": [
            "\u2200x (Bread(x) \u2192 Food(x))",
            "\u2203x (Sandwich(x) \u2227 Bread(x))",
            "\u2200x (Food(x) \u2192 Edible(x))",
            "\u2200x (Edible(x) \u2192 \u00acPoisonous(x))",
            "Poisonous(deodorant)"
        ],
        "question": "Deodorant is a sandwich.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1316,
        "story_id": 455,
        "context": [
            "All bread is food.",
            "Some sandwiches are bread.",
            "All food is edible. ",
            "No edible things are poisonous.",
            "Deodorant is poisonous."
        ],
        "context_fol": [
            "\u2200x (Bread(x) \u2192 Food(x))",
            "\u2203x (Sandwich(x) \u2227 Bread(x))",
            "\u2200x (Food(x) \u2192 Edible(x))",
            "\u2200x (Edible(x) \u2192 \u00acPoisonous(x))",
            "Poisonous(deodorant)"
        ],
        "question": "Deodorant is a sandwich and bread.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1317,
        "story_id": 455,
        "context": [
            "All bread is food.",
            "Some sandwiches are bread.",
            "All food is edible. ",
            "No edible things are poisonous.",
            "Deodorant is poisonous."
        ],
        "context_fol": [
            "\u2200x (Bread(x) \u2192 Food(x))",
            "\u2203x (Sandwich(x) \u2227 Bread(x))",
            "\u2200x (Food(x) \u2192 Edible(x))",
            "\u2200x (Edible(x) \u2192 \u00acPoisonous(x))",
            "Poisonous(deodorant)"
        ],
        "question": "If deodorant is a loaf of bread, then deodorant is not a sandwich.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 461,
        "story_id": 160,
        "context": [
            "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
            "Many apartment rents cover the cost of water and electricity.",
            "Susan lives in an apartment where the rent covers all utilities.",
            "The rent of the apartment where Ava lives does not cover any utility expenses.",
            "Noah lives in an apartment where the rent does not cover heating."
        ],
        "context_fol": [
            "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)",
            "\u2203x (Cover(x, water) \u2227 Cover(x, electricity))",
            "\u2200x (Cover(susan, x))",
            "\u2200x (\u00acCover(ava, x))",
            "\u00acCover(noah, heating)"
        ],
        "question": "Noah needs to pay the water bill.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 462,
        "story_id": 160,
        "context": [
            "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
            "Many apartment rents cover the cost of water and electricity.",
            "Susan lives in an apartment where the rent covers all utilities.",
            "The rent of the apartment where Ava lives does not cover any utility expenses.",
            "Noah lives in an apartment where the rent does not cover heating."
        ],
        "context_fol": [
            "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)",
            "\u2203x (Cover(x, water) \u2227 Cover(x, electricity))",
            "\u2200x (Cover(susan, x))",
            "\u2200x (\u00acCover(ava, x))",
            "\u00acCover(noah, heating)"
        ],
        "question": "Noah and Ava both need to pay the heating bill.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 463,
        "story_id": 160,
        "context": [
            "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
            "Many apartment rents cover the cost of water and electricity.",
            "Susan lives in an apartment where the rent covers all utilities.",
            "The rent of the apartment where Ava lives does not cover any utility expenses.",
            "Noah lives in an apartment where the rent does not cover heating."
        ],
        "context_fol": [
            "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)",
            "\u2203x (Cover(x, water) \u2227 Cover(x, electricity))",
            "\u2200x (Cover(susan, x))",
            "\u2200x (\u00acCover(ava, x))",
            "\u00acCover(noah, heating)"
        ],
        "question": "Susan does not need to pay the water bill.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 804,
        "story_id": 317,
        "context": [
            "All clothes are products. ",
            "No products are perfect. ",
            "All dresses are clothes.",
            "All skirts are dresses. ",
            "If Nike is clothes, then Nike is perfect and a dress."
        ],
        "context_fol": [
            "\u2200x (Clothes(x) \u2192 Product(x))",
            "\u2200x (Product(x) \u2192 \u00acPerfect(x))",
            "\u2200x (Dress(x) \u2192 Clothes(x))",
            "\u2200x (Skirt(x) \u2192 Dress(x))",
            "Clothes(nike) \u2192 Perfect(nike) \u2227 Dress(nike)"
        ],
        "question": "Nike is perfect.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 805,
        "story_id": 317,
        "context": [
            "All clothes are products. ",
            "No products are perfect. ",
            "All dresses are clothes.",
            "All skirts are dresses. ",
            "If Nike is clothes, then Nike is perfect and a dress."
        ],
        "context_fol": [
            "\u2200x (Clothes(x) \u2192 Product(x))",
            "\u2200x (Product(x) \u2192 \u00acPerfect(x))",
            "\u2200x (Dress(x) \u2192 Clothes(x))",
            "\u2200x (Skirt(x) \u2192 Dress(x))",
            "Clothes(nike) \u2192 Perfect(nike) \u2227 Dress(nike)"
        ],
        "question": "Nike is a skirt.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 806,
        "story_id": 317,
        "context": [
            "All clothes are products. ",
            "No products are perfect. ",
            "All dresses are clothes.",
            "All skirts are dresses. ",
            "If Nike is clothes, then Nike is perfect and a dress."
        ],
        "context_fol": [
            "\u2200x (Clothes(x) \u2192 Product(x))",
            "\u2200x (Product(x) \u2192 \u00acPerfect(x))",
            "\u2200x (Dress(x) \u2192 Clothes(x))",
            "\u2200x (Skirt(x) \u2192 Dress(x))",
            "Clothes(nike) \u2192 Perfect(nike) \u2227 Dress(nike)"
        ],
        "question": "Nike is not a skirt.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 169,
        "story_id": 57,
        "context": [
            "All pets are animals.",
            "Pets can be either a dog or a cat.",
            "If a person has a pet, they care for that pet. ",
            "Dogs and Cats can be naughty. ",
            "Pets who are naughty are not liked as much. ",
            "Charlie has a naughty pet dog named Leo. "
        ],
        "context_fol": [
            "\u2200x (Pet(x) \u2192 Animal(x))",
            "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
            "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
            "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
            "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
            "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
        ],
        "question": "Leo is an animal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 170,
        "story_id": 57,
        "context": [
            "All pets are animals.",
            "Pets can be either a dog or a cat.",
            "If a person has a pet, they care for that pet. ",
            "Dogs and Cats can be naughty. ",
            "Pets who are naughty are not liked as much. ",
            "Charlie has a naughty pet dog named Leo. "
        ],
        "context_fol": [
            "\u2200x (Pet(x) \u2192 Animal(x))",
            "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
            "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
            "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
            "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
            "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
        ],
        "question": "Charlie does not like Leo and does not care for Leo.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 171,
        "story_id": 57,
        "context": [
            "All pets are animals.",
            "Pets can be either a dog or a cat.",
            "If a person has a pet, they care for that pet. ",
            "Dogs and Cats can be naughty. ",
            "Pets who are naughty are not liked as much. ",
            "Charlie has a naughty pet dog named Leo. "
        ],
        "context_fol": [
            "\u2200x (Pet(x) \u2192 Animal(x))",
            "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))",
            "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))",
            "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))",
            "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))",
            "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
        ],
        "question": "Dogs are always not naughty.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 728,
        "story_id": 279,
        "context": [
            "Surprises are either fun or dreadful.",
            "All scares are surprises."
        ],
        "context_fol": [
            "\u2200x (Surprise(x) \u2192 (Fun(x) \u2295 Dreadful(x)))",
            "\u2200x (Scare(x) \u2192 Surprise(x))"
        ],
        "question": "All scares are fun.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 66,
        "story_id": 23,
        "context": [
            "All books written by Cixin Liu have sold more than 1 million copies. ",
            "Some books that have won the Hugo Award were written by Cixin Liu.",
            "All books about the future are influenced by Isaac Asimov.",
            "The book the Three Body Problem has sold more than 1 million copies.",
            "The Three Body Problem is about the future."
        ],
        "context_fol": [
            "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
            "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
            "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
            "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
            "AboutFuture(threebodyproblem)"
        ],
        "question": "The Three Body Problem won the Hugo Award.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 67,
        "story_id": 23,
        "context": [
            "All books written by Cixin Liu have sold more than 1 million copies. ",
            "Some books that have won the Hugo Award were written by Cixin Liu.",
            "All books about the future are influenced by Isaac Asimov.",
            "The book the Three Body Problem has sold more than 1 million copies.",
            "The Three Body Problem is about the future."
        ],
        "context_fol": [
            "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
            "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
            "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
            "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
            "AboutFuture(threebodyproblem)"
        ],
        "question": "The Three Body Problem was influenced by Isaac Asimov.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 68,
        "story_id": 23,
        "context": [
            "All books written by Cixin Liu have sold more than 1 million copies. ",
            "Some books that have won the Hugo Award were written by Cixin Liu.",
            "All books about the future are influenced by Isaac Asimov.",
            "The book the Three Body Problem has sold more than 1 million copies.",
            "The Three Body Problem is about the future."
        ],
        "context_fol": [
            "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))",
            "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))",
            "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))",
            "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)",
            "AboutFuture(threebodyproblem)"
        ],
        "question": "The Three Body Problem was written by Cixin Liu.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1189,
        "story_id": 420,
        "context": [
            "Some students who major in computer science get up early. ",
            "If a student gets up early, then he/she will study in the morning. ",
            "All students studying in the morning are good at time management. ",
            "All students good at time management are popular among students. ",
            "James is not popular among students. "
        ],
        "context_fol": [
            "\u2203x (ComputerScience(x) \u2227 GetUpEarly(x))",
            "\u2200x (GetUpEarly(x) \u2192 StudyMorning(x))",
            "\u2200x (StudyMorning(x) \u2192 GoodAtTimeManagement(x))",
            "\u2200x (GoodAtTimeManagement(x) \u2192 Popular(x))",
            "\u00acPopular(james)"
        ],
        "question": "James majors in computer science.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1190,
        "story_id": 420,
        "context": [
            "Some students who major in computer science get up early. ",
            "If a student gets up early, then he/she will study in the morning. ",
            "All students studying in the morning are good at time management. ",
            "All students good at time management are popular among students. ",
            "James is not popular among students. "
        ],
        "context_fol": [
            "\u2203x (ComputerScience(x) \u2227 GetUpEarly(x))",
            "\u2200x (GetUpEarly(x) \u2192 StudyMorning(x))",
            "\u2200x (StudyMorning(x) \u2192 GoodAtTimeManagement(x))",
            "\u2200x (GoodAtTimeManagement(x) \u2192 Popular(x))",
            "\u00acPopular(james)"
        ],
        "question": "James majors in computer science and gets up early.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1191,
        "story_id": 420,
        "context": [
            "Some students who major in computer science get up early. ",
            "If a student gets up early, then he/she will study in the morning. ",
            "All students studying in the morning are good at time management. ",
            "All students good at time management are popular among students. ",
            "James is not popular among students. "
        ],
        "context_fol": [
            "\u2203x (ComputerScience(x) \u2227 GetUpEarly(x))",
            "\u2200x (GetUpEarly(x) \u2192 StudyMorning(x))",
            "\u2200x (StudyMorning(x) \u2192 GoodAtTimeManagement(x))",
            "\u2200x (GoodAtTimeManagement(x) \u2192 Popular(x))",
            "\u00acPopular(james)"
        ],
        "question": "If James gets up early, then he majors in computer science.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 721,
        "story_id": 272,
        "context": [
            "There is no dog on the roof.",
            "If there is a dog on the roof something went wrong."
        ],
        "context_fol": [
            "\u00ac(\u2203x (Dog(x) \u2227 OnRoof(x)))",
            "\u2200x \u2203y ((Dog(x) \u2227 OnRoof(x)) \u2192 WentWrong(y))"
        ],
        "question": "Something went wrong.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 41,
        "story_id": 15,
        "context": [
            "Elephantopus is a genus of perennial plants in the daisy family.",
            "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.",
            "Several species of Elephantopus are native to the southeastern United States.",
            "Elephantopus scaber is a traditional medicine."
        ],
        "context_fol": [
            "\u2200x (Elephantopus(x) \u2192 Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily))",
            "\u2200x (Elephantopus(x) \u2192 WidespreadOver(x, africa) \u2227 WidespreadOver(x, southernasia) \u2227 WidespreadOver(x, australia) \u2227 WidespreadOver(x, americas))",
            "\u2203x (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates))",
            "\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))"
        ],
        "question": "Elephantopus is widespread over much of Australia and Southern Asia.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 42,
        "story_id": 15,
        "context": [
            "Elephantopus is a genus of perennial plants in the daisy family.",
            "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.",
            "Several species of Elephantopus are native to the southeastern United States.",
            "Elephantopus scaber is a traditional medicine."
        ],
        "context_fol": [
            "\u2200x (Elephantopus(x) \u2192 Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily))",
            "\u2200x (Elephantopus(x) \u2192 WidespreadOver(x, africa) \u2227 WidespreadOver(x, southernasia) \u2227 WidespreadOver(x, australia) \u2227 WidespreadOver(x, americas))",
            "\u2203x (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates))",
            "\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))"
        ],
        "question": "No Elephantopus is native to the southeastern United States.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 43,
        "story_id": 15,
        "context": [
            "Elephantopus is a genus of perennial plants in the daisy family.",
            "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.",
            "Several species of Elephantopus are native to the southeastern United States.",
            "Elephantopus scaber is a traditional medicine."
        ],
        "context_fol": [
            "\u2200x (Elephantopus(x) \u2192 Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily))",
            "\u2200x (Elephantopus(x) \u2192 WidespreadOver(x, africa) \u2227 WidespreadOver(x, southernasia) \u2227 WidespreadOver(x, australia) \u2227 WidespreadOver(x, americas))",
            "\u2203x (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates))",
            "\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))"
        ],
        "question": "Elephantopus is a traditional medicine.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1236,
        "story_id": 432,
        "context": [
            "All Yale dormitories are located on York Street. ",
            "All buildings managed by Yale Housing are dormitories. ",
            "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
            "No buildings open to students are established after 1800. ",
            "All buildings located on York Street are open to students. ",
            "Harkness is either a building operated by Yale Housing staff or located on York Street. "
        ],
        "context_fol": [
            "\u2200x (YaleDormitory(x) \u2192 InYorkStreet(x))",
            "\u2200x (ManagedByYaleHousing(x) \u2192 YaleDormitory(x))",
            "\u2200x (OperatedByYaleHousingStaffs(x) \u2192 ManagedByYaleHousing(x))",
            "\u2200x (OpenToStudents(x) \u2192 \u00acEstablishedAfter1800(x))",
            "\u2200x (InYorkStreet(x) \u2192 OpenToStudents(x))",
            "OperatedByYaleHousingStaffs(harkness) \u2295 InYorkStreet(harkness)"
        ],
        "question": "Harkness is a Yale dormitory.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1237,
        "story_id": 432,
        "context": [
            "All Yale dormitories are located on York Street. ",
            "All buildings managed by Yale Housing are dormitories. ",
            "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
            "No buildings open to students are established after 1800. ",
            "All buildings located on York Street are open to students. ",
            "Harkness is either a building operated by Yale Housing staff or located on York Street. "
        ],
        "context_fol": [
            "\u2200x (YaleDormitory(x) \u2192 InYorkStreet(x))",
            "\u2200x (ManagedByYaleHousing(x) \u2192 YaleDormitory(x))",
            "\u2200x (OperatedByYaleHousingStaffs(x) \u2192 ManagedByYaleHousing(x))",
            "\u2200x (OpenToStudents(x) \u2192 \u00acEstablishedAfter1800(x))",
            "\u2200x (InYorkStreet(x) \u2192 OpenToStudents(x))",
            "OperatedByYaleHousingStaffs(harkness) \u2295 InYorkStreet(harkness)"
        ],
        "question": "Harkness is not a Yale dormitory.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1238,
        "story_id": 432,
        "context": [
            "All Yale dormitories are located on York Street. ",
            "All buildings managed by Yale Housing are dormitories. ",
            "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
            "No buildings open to students are established after 1800. ",
            "All buildings located on York Street are open to students. ",
            "Harkness is either a building operated by Yale Housing staff or located on York Street. "
        ],
        "context_fol": [
            "\u2200x (YaleDormitory(x) \u2192 InYorkStreet(x))",
            "\u2200x (ManagedByYaleHousing(x) \u2192 YaleDormitory(x))",
            "\u2200x (OperatedByYaleHousingStaffs(x) \u2192 ManagedByYaleHousing(x))",
            "\u2200x (OpenToStudents(x) \u2192 \u00acEstablishedAfter1800(x))",
            "\u2200x (InYorkStreet(x) \u2192 OpenToStudents(x))",
            "OperatedByYaleHousingStaffs(harkness) \u2295 InYorkStreet(harkness)"
        ],
        "question": "Harkness is established after 1800.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1239,
        "story_id": 432,
        "context": [
            "All Yale dormitories are located on York Street. ",
            "All buildings managed by Yale Housing are dormitories. ",
            "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
            "No buildings open to students are established after 1800. ",
            "All buildings located on York Street are open to students. ",
            "Harkness is either a building operated by Yale Housing staff or located on York Street. "
        ],
        "context_fol": [
            "\u2200x (YaleDormitory(x) \u2192 InYorkStreet(x))",
            "\u2200x (ManagedByYaleHousing(x) \u2192 YaleDormitory(x))",
            "\u2200x (OperatedByYaleHousingStaffs(x) \u2192 ManagedByYaleHousing(x))",
            "\u2200x (OpenToStudents(x) \u2192 \u00acEstablishedAfter1800(x))",
            "\u2200x (InYorkStreet(x) \u2192 OpenToStudents(x))",
            "OperatedByYaleHousingStaffs(harkness) \u2295 InYorkStreet(harkness)"
        ],
        "question": "Harkness is established before 1800.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 794,
        "story_id": 316,
        "context": [
            "There are no mansion houses in an urban area.",
            "All skyscrapers reside in urban areas.",
            "Every creepy haunted house is in a mansion house.",
            "Every terrifying Halloween scare comes from a creepy haunted house.",
            "The Scream is a creepy haunted house or a terrifying Halloween scare."
        ],
        "context_fol": [
            "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
            "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
            "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
            "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
            "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
        ],
        "question": "The Scream is a skyscraper.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 795,
        "story_id": 316,
        "context": [
            "There are no mansion houses in an urban area.",
            "All skyscrapers reside in urban areas.",
            "Every creepy haunted house is in a mansion house.",
            "Every terrifying Halloween scare comes from a creepy haunted house.",
            "The Scream is a creepy haunted house or a terrifying Halloween scare."
        ],
        "context_fol": [
            "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
            "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
            "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
            "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
            "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
        ],
        "question": "The Scream is not a skyscraper.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 796,
        "story_id": 316,
        "context": [
            "There are no mansion houses in an urban area.",
            "All skyscrapers reside in urban areas.",
            "Every creepy haunted house is in a mansion house.",
            "Every terrifying Halloween scare comes from a creepy haunted house.",
            "The Scream is a creepy haunted house or a terrifying Halloween scare."
        ],
        "context_fol": [
            "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
            "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
            "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
            "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
            "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
        ],
        "question": "The Scream is a terrifying Halloween scare.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 797,
        "story_id": 316,
        "context": [
            "There are no mansion houses in an urban area.",
            "All skyscrapers reside in urban areas.",
            "Every creepy haunted house is in a mansion house.",
            "Every terrifying Halloween scare comes from a creepy haunted house.",
            "The Scream is a creepy haunted house or a terrifying Halloween scare."
        ],
        "context_fol": [
            "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
            "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
            "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
            "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
            "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
        ],
        "question": "The Scream is either a skyscraper or a mansion house.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 798,
        "story_id": 316,
        "context": [
            "There are no mansion houses in an urban area.",
            "All skyscrapers reside in urban areas.",
            "Every creepy haunted house is in a mansion house.",
            "Every terrifying Halloween scare comes from a creepy haunted house.",
            "The Scream is a creepy haunted house or a terrifying Halloween scare."
        ],
        "context_fol": [
            "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
            "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
            "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
            "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
            "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
        ],
        "question": "The Scream is either a skyscraper or an urban area.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 799,
        "story_id": 316,
        "context": [
            "There are no mansion houses in an urban area.",
            "All skyscrapers reside in urban areas.",
            "Every creepy haunted house is in a mansion house.",
            "Every terrifying Halloween scare comes from a creepy haunted house.",
            "The Scream is a creepy haunted house or a terrifying Halloween scare."
        ],
        "context_fol": [
            "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
            "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
            "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
            "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
            "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
        ],
        "question": "The Scream is either a skyscraper or a creepy haunted house.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 800,
        "story_id": 316,
        "context": [
            "There are no mansion houses in an urban area.",
            "All skyscrapers reside in urban areas.",
            "Every creepy haunted house is in a mansion house.",
            "Every terrifying Halloween scare comes from a creepy haunted house.",
            "The Scream is a creepy haunted house or a terrifying Halloween scare."
        ],
        "context_fol": [
            "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
            "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
            "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
            "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
            "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
        ],
        "question": "If The Scream is not a mansion in an urban area, then it is either a skyscraper or an urban area.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 801,
        "story_id": 316,
        "context": [
            "There are no mansion houses in an urban area.",
            "All skyscrapers reside in urban areas.",
            "Every creepy haunted house is in a mansion house.",
            "Every terrifying Halloween scare comes from a creepy haunted house.",
            "The Scream is a creepy haunted house or a terrifying Halloween scare."
        ],
        "context_fol": [
            "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
            "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
            "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
            "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
            "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
        ],
        "question": "If The Scream is either a skyscraper or a mansion house, then it is in an urban area.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 802,
        "story_id": 316,
        "context": [
            "There are no mansion houses in an urban area.",
            "All skyscrapers reside in urban areas.",
            "Every creepy haunted house is in a mansion house.",
            "Every terrifying Halloween scare comes from a creepy haunted house.",
            "The Scream is a creepy haunted house or a terrifying Halloween scare."
        ],
        "context_fol": [
            "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
            "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
            "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
            "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
            "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
        ],
        "question": "If The Scream is either a skyscraper or a mansion house, then it is neither a creepy haunted house nor a terrifying Halloween scare.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 803,
        "story_id": 316,
        "context": [
            "There are no mansion houses in an urban area.",
            "All skyscrapers reside in urban areas.",
            "Every creepy haunted house is in a mansion house.",
            "Every terrifying Halloween scare comes from a creepy haunted house.",
            "The Scream is a creepy haunted house or a terrifying Halloween scare."
        ],
        "context_fol": [
            "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))",
            "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))",
            "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))",
            "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))",
            "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
        ],
        "question": "If The Scream is either a skyscraper or a creepy haunted house, then it is not a mansion house.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 331,
        "story_id": 109,
        "context": [
            "Phuoc Binh national park is a national park in Vietnam. ",
            "Any national park in Vietnam is classified as a nature reserve. ",
            "There is a national park in Vietnam classified as a UNESCO World Heritage Site.",
            "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ",
            "Phuoc Binh is not managed by the Ministry of Agriculture."
        ],
        "context_fol": [
            "NationalPark(phuocBinh) \u2227 Locatedin(phuocBinh, vietnam)",
            "\u2200x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2192 NatureReserve(x))",
            "\u2203x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2227 UNESCOWorldHeritageSite(x))",
            "\u2200x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2192 Mangedby(x, ministryofAgriculture) \u2228 Mangedby(x, peoplesCommittee))",
            "\u00acMangedby(phuocBinh, ministryofAgriculture)"
        ],
        "question": "There is a nature reserve in Vietnam.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 332,
        "story_id": 109,
        "context": [
            "Phuoc Binh national park is a national park in Vietnam. ",
            "Any national park in Vietnam is classified as a nature reserve. ",
            "There is a national park in Vietnam classified as a UNESCO World Heritage Site.",
            "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ",
            "Phuoc Binh is not managed by the Ministry of Agriculture."
        ],
        "context_fol": [
            "NationalPark(phuocBinh) \u2227 Locatedin(phuocBinh, vietnam)",
            "\u2200x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2192 NatureReserve(x))",
            "\u2203x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2227 UNESCOWorldHeritageSite(x))",
            "\u2200x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2192 Mangedby(x, ministryofAgriculture) \u2228 Mangedby(x, peoplesCommittee))",
            "\u00acMangedby(phuocBinh, ministryofAgriculture)"
        ],
        "question": "Phuoc Binh is a UNESCO Heritage Site.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 333,
        "story_id": 109,
        "context": [
            "Phuoc Binh national park is a national park in Vietnam. ",
            "Any national park in Vietnam is classified as a nature reserve. ",
            "There is a national park in Vietnam classified as a UNESCO World Heritage Site.",
            "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ",
            "Phuoc Binh is not managed by the Ministry of Agriculture."
        ],
        "context_fol": [
            "NationalPark(phuocBinh) \u2227 Locatedin(phuocBinh, vietnam)",
            "\u2200x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2192 NatureReserve(x))",
            "\u2203x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2227 UNESCOWorldHeritageSite(x))",
            "\u2200x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2192 Mangedby(x, ministryofAgriculture) \u2228 Mangedby(x, peoplesCommittee))",
            "\u00acMangedby(phuocBinh, ministryofAgriculture)"
        ],
        "question": "Phuoc Binh is managed by the People's Committee.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 404,
        "story_id": 137,
        "context": [
            "Greyhound racing is a competitive sport where spectators bet on greyhounds.",
            "Coursing is a part of Greyhound racing.",
            "Some competitive sports where spectators bet on things are banned.",
            "Coursing involves spectators betting on a hare being pursued by greyhounds.",
            "Hares are small game.",
            "If a competitive sport involves spectators betting on small game, then it is banned."
        ],
        "context_fol": [
            "\u2200x \u2203y (GreyhoundRacing(x) \u2192 CompetitiveSport(x) \u2227 Greyhound(y) \u2227 SpectatorsBetOn(x, y))",
            "\u2200x (GreyhoundRacing(x) \u2194 Coursing(x))",
            "\u2203x \u2203y (CompetitiveSport(x) \u2227 SpectaorsBetOn(x, y) \u2227 Banned(x))",
            "\u2200x \u2203y \u2203z (Coursing(x) \u2192 Hare(y) \u2227 SpectatorsBetOn(x, y) \u2227 GreyHound(z) \u2227 Pursue(z, y))",
            "\u2200x (Hare(x) \u2192 SmallGame(x))",
            "\u2200x \u2203y (CompetitiveSport(x) \u2227 SmallGame(y) \u2227 SpectatorsBetOn(x, y) \u2192 Banned(x))"
        ],
        "question": "No coursing is banned.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 405,
        "story_id": 137,
        "context": [
            "Greyhound racing is a competitive sport where spectators bet on greyhounds.",
            "Coursing is a part of Greyhound racing.",
            "Some competitive sports where spectators bet on things are banned.",
            "Coursing involves spectators betting on a hare being pursued by greyhounds.",
            "Hares are small game.",
            "If a competitive sport involves spectators betting on small game, then it is banned."
        ],
        "context_fol": [
            "\u2200x \u2203y (GreyhoundRacing(x) \u2192 CompetitiveSport(x) \u2227 Greyhound(y) \u2227 SpectatorsBetOn(x, y))",
            "\u2200x (GreyhoundRacing(x) \u2194 Coursing(x))",
            "\u2203x \u2203y (CompetitiveSport(x) \u2227 SpectaorsBetOn(x, y) \u2227 Banned(x))",
            "\u2200x \u2203y \u2203z (Coursing(x) \u2192 Hare(y) \u2227 SpectatorsBetOn(x, y) \u2227 GreyHound(z) \u2227 Pursue(z, y))",
            "\u2200x (Hare(x) \u2192 SmallGame(x))",
            "\u2200x \u2203y (CompetitiveSport(x) \u2227 SmallGame(y) \u2227 SpectatorsBetOn(x, y) \u2192 Banned(x))"
        ],
        "question": "Greyhound racing is a competitive sport.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 547,
        "story_id": 190,
        "context": [
            "If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.",
            "If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.",
            "Henry is a soccer player.",
            "In one game, Henry first receives one yellow card, then he receives one red card."
        ],
        "context_fol": [
            "\u2200x (SoccerPlayer(x) \u2227 TwoYellow(x) \u2192 Eject(x))",
            "\u2200x (SoccerPlayer(x) \u2227 OneRed(x) \u2192 Eject(x))   ",
            "SoccerPlayer(henry)",
            "\u00acTwoYellow(henry) \u2227 OneRed(henry)"
        ],
        "question": "Henry will be ejected from the rest of the game.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 548,
        "story_id": 190,
        "context": [
            "If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.",
            "If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.",
            "Henry is a soccer player.",
            "In one game, Henry first receives one yellow card, then he receives one red card."
        ],
        "context_fol": [
            "\u2200x (SoccerPlayer(x) \u2227 TwoYellow(x) \u2192 Eject(x))",
            "\u2200x (SoccerPlayer(x) \u2227 OneRed(x) \u2192 Eject(x))   ",
            "SoccerPlayer(henry)",
            "\u00acTwoYellow(henry) \u2227 OneRed(henry)"
        ],
        "question": "Henry will not be ejected from the rest of the game.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 736,
        "story_id": 287,
        "context": [
            "All trees are plants. ",
            "Some living things are trees."
        ],
        "context_fol": [
            "\u2200x (Tree(x) \u2192 Plant(x))",
            "\u2203x (Living(x) \u2227 Tree(x))"
        ],
        "question": "Some living things are plants.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 44,
        "story_id": 16,
        "context": [
            "Dagfinn is a given name.",
            "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ",
            "Dagfinn Aarskog is a Norwegian physician.",
            "Dagfinn Dahl is a Norwegian barrister."
        ],
        "context_fol": [
            "\u2200x (Dagfinn(x) \u2192 GivenName(x))",
            "Dagfinn(dagfinnAarskog) \u2227 NotablePeople(dagfinnAarskog) \u2227 Dagfinn(dagfinnBakke) \u2227 NotablePeople(dagfinnBakke) \u2227 Dagfinn(dagfinnDahl) \u2227 NotablePeople(dagfinnDahl)",
            "Norwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)",
            "Norwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)"
        ],
        "question": "Dagfinn Aarskog is a notable person.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 45,
        "story_id": 16,
        "context": [
            "Dagfinn is a given name.",
            "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ",
            "Dagfinn Aarskog is a Norwegian physician.",
            "Dagfinn Dahl is a Norwegian barrister."
        ],
        "context_fol": [
            "\u2200x (Dagfinn(x) \u2192 GivenName(x))",
            "Dagfinn(dagfinnAarskog) \u2227 NotablePeople(dagfinnAarskog) \u2227 Dagfinn(dagfinnBakke) \u2227 NotablePeople(dagfinnBakke) \u2227 Dagfinn(dagfinnDahl) \u2227 NotablePeople(dagfinnDahl)",
            "Norwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)",
            "Norwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)"
        ],
        "question": "Dagfinn is Dagfinn Aarskog's given name.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 46,
        "story_id": 16,
        "context": [
            "Dagfinn is a given name.",
            "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ",
            "Dagfinn Aarskog is a Norwegian physician.",
            "Dagfinn Dahl is a Norwegian barrister."
        ],
        "context_fol": [
            "\u2200x (Dagfinn(x) \u2192 GivenName(x))",
            "Dagfinn(dagfinnAarskog) \u2227 NotablePeople(dagfinnAarskog) \u2227 Dagfinn(dagfinnBakke) \u2227 NotablePeople(dagfinnBakke) \u2227 Dagfinn(dagfinnDahl) \u2227 NotablePeople(dagfinnDahl)",
            "Norwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)",
            "Norwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)"
        ],
        "question": "Dagfinn Dahl is a Norwegian physician.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 749,
        "story_id": 300,
        "context": [
            "If entertainment is interesting, it will be popular.",
            "All popular things are well-known."
        ],
        "context_fol": [
            "\u2200x ((Entertainment(x) \u2227 Interesting(x)) \u2192 Popular(x))",
            "\u2200x (Popular(x) \u2192 WellKnown(x))"
        ],
        "question": "If entertainment is interesting, it will be well-known.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 687,
        "story_id": 240,
        "context": [
            "It is not true that some giant language models do not have good performance. ",
            "All language models with good performance are used by some researchers.",
            "If a language model is used by some researchers, it is popular. ",
            "If BERT is a giant language model, then GPT-3 is also a giant language model. ",
            "BERT is a giant language model. "
        ],
        "context_fol": [
            "\u00ac(\u2203x (LanguageModel(x) \u2227 Giant(x) \u2227 \u00acGoodPerformance(x)))",
            "\u2200x ((LanguageModel(x) \u2227 GoodPerformance(x)) \u2192 UsedBySomeResearchers(x))",
            "\u2200x (UsedBySomeResearchers(x) \u2192 Popular(x))",
            "(LanguageModel(bert) \u2227 Giant(bert)) \u2192 (LanguageModel(gpt-3) \u2227 Giant(gpt-3)).",
            "LanguageModel(bert) \u2227 Giant(bert) "
        ],
        "question": "GPT-3 is popular.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 334,
        "story_id": 110,
        "context": [
            "St Johnstone is a Scottish team.",
            "St Johnstone is part of the Scottish Premiership.",
            "If a team is part of the league, it has joined the league.",
            "St Johnstone and Minsk are different teams.",
            "For two different teams, either one team wins or the other team wins.",
            "Minsk won against St Johnstone."
        ],
        "context_fol": [
            "Scottish(johnstone)",
            "PartOf(johnstone, scottishpremiership)",
            "\u2200x \u2200y (PartOf(x, y) \u2192 Joined(x, y))",
            "Different(misnk, johnstone) \u2227 Different(johnstone, minsk)",
            "\u2200x \u2200y (Different(x, y) \u2192 WonGame(x, y) \u2295 WonGame(y, x))",
            "WonGame(minsk, johnstone)"
        ],
        "question": "At least one Scottish team has joined the Scottish Premiership.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 335,
        "story_id": 110,
        "context": [
            "St Johnstone is a Scottish team.",
            "St Johnstone is part of the Scottish Premiership.",
            "If a team is part of the league, it has joined the league.",
            "St Johnstone and Minsk are different teams.",
            "For two different teams, either one team wins or the other team wins.",
            "Minsk won against St Johnstone."
        ],
        "context_fol": [
            "Scottish(johnstone)",
            "PartOf(johnstone, scottishpremiership)",
            "\u2200x \u2200y (PartOf(x, y) \u2192 Joined(x, y))",
            "Different(misnk, johnstone) \u2227 Different(johnstone, minsk)",
            "\u2200x \u2200y (Different(x, y) \u2192 WonGame(x, y) \u2295 WonGame(y, x))",
            "WonGame(minsk, johnstone)"
        ],
        "question": "St Johnstone won against Minsk.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 336,
        "story_id": 110,
        "context": [
            "St Johnstone is a Scottish team.",
            "St Johnstone is part of the Scottish Premiership.",
            "If a team is part of the league, it has joined the league.",
            "St Johnstone and Minsk are different teams.",
            "For two different teams, either one team wins or the other team wins.",
            "Minsk won against St Johnstone."
        ],
        "context_fol": [
            "Scottish(johnstone)",
            "PartOf(johnstone, scottishpremiership)",
            "\u2200x \u2200y (PartOf(x, y) \u2192 Joined(x, y))",
            "Different(misnk, johnstone) \u2227 Different(johnstone, minsk)",
            "\u2200x \u2200y (Different(x, y) \u2192 WonGame(x, y) \u2295 WonGame(y, x))",
            "WonGame(minsk, johnstone)"
        ],
        "question": "Minsk joined the Scottish Premiership.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1232,
        "story_id": 431,
        "context": [
            "No Boeing-737 plane is equipped with more than 300 seats. ",
            "All planes in Delta are of type Boeing-737. ",
            "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
            "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
            "All planes with a capacity of 100 passengers are produced before 2010. ",
            "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
            "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
        ],
        "context_fol": [
            "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))",
            "\u2200x (Delta(x) \u2192 Boeing737(x))",
            "\u2200x (Seats300(x) \u2228 Passengers100(x))",
            "\u2200x (Passengers100(x) \u2192 ShortDistance(x))",
            "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))",
            "Boeing737(jake32) \u2295 Delta(jake32) ",
            "Boeing737(t10) \u2295 Delta(t10)"
        ],
        "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1233,
        "story_id": 431,
        "context": [
            "No Boeing-737 plane is equipped with more than 300 seats. ",
            "All planes in Delta are of type Boeing-737. ",
            "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
            "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
            "All planes with a capacity of 100 passengers are produced before 2010. ",
            "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
            "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
        ],
        "context_fol": [
            "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))",
            "\u2200x (Delta(x) \u2192 Boeing737(x))",
            "\u2200x (Seats300(x) \u2228 Passengers100(x))",
            "\u2200x (Passengers100(x) \u2192 ShortDistance(x))",
            "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))",
            "Boeing737(jake32) \u2295 Delta(jake32) ",
            "Boeing737(t10) \u2295 Delta(t10)"
        ],
        "question": "Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1234,
        "story_id": 431,
        "context": [
            "No Boeing-737 plane is equipped with more than 300 seats. ",
            "All planes in Delta are of type Boeing-737. ",
            "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
            "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
            "All planes with a capacity of 100 passengers are produced before 2010. ",
            "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
            "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
        ],
        "context_fol": [
            "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))",
            "\u2200x (Delta(x) \u2192 Boeing737(x))",
            "\u2200x (Seats300(x) \u2228 Passengers100(x))",
            "\u2200x (Passengers100(x) \u2192 ShortDistance(x))",
            "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))",
            "Boeing737(jake32) \u2295 Delta(jake32) ",
            "Boeing737(t10) \u2295 Delta(t10)"
        ],
        "question": "Jake32 is produced before 2010 or scheduled for a short-distance flight.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1235,
        "story_id": 431,
        "context": [
            "No Boeing-737 plane is equipped with more than 300 seats. ",
            "All planes in Delta are of type Boeing-737. ",
            "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
            "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
            "All planes with a capacity of 100 passengers are produced before 2010. ",
            "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
            "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "
        ],
        "context_fol": [
            "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))",
            "\u2200x (Delta(x) \u2192 Boeing737(x))",
            "\u2200x (Seats300(x) \u2228 Passengers100(x))",
            "\u2200x (Passengers100(x) \u2192 ShortDistance(x))",
            "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))",
            "Boeing737(jake32) \u2295 Delta(jake32) ",
            "Boeing737(t10) \u2295 Delta(t10)"
        ],
        "question": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 558,
        "story_id": 195,
        "context": [
            "The SAT test is wholly owned and developed by the College Board.",
            "The SAT test is intended to assess student's readiness for college.",
            "The SAT was originally designed not to be aligned with high school curricula. ",
            "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. "
        ],
        "context_fol": [
            "Own(sat, collegeBoard) \u2227 \u00acOwn(sat, others)",
            "Test(sat, readiness)",
            "\u2200x (Year(x) \u2227 Before2016(x) \u2192 \u00acAlignHighSchool(x)) ",
            "\u2203x (Year(x) \u2227 Since2016(x) \u2227 AlignHighSchool(x)) "
        ],
        "question": "Since 2016 the SAT has been better aligned with high school curricula.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 559,
        "story_id": 195,
        "context": [
            "The SAT test is wholly owned and developed by the College Board.",
            "The SAT test is intended to assess student's readiness for college.",
            "The SAT was originally designed not to be aligned with high school curricula. ",
            "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. "
        ],
        "context_fol": [
            "Own(sat, collegeBoard) \u2227 \u00acOwn(sat, others)",
            "Test(sat, readiness)",
            "\u2200x (Year(x) \u2227 Before2016(x) \u2192 \u00acAlignHighSchool(x)) ",
            "\u2203x (Year(x) \u2227 Since2016(x) \u2227 AlignHighSchool(x)) "
        ],
        "question": "The SAT test is owned by the College Board and multiple other third parties.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 560,
        "story_id": 195,
        "context": [
            "The SAT test is wholly owned and developed by the College Board.",
            "The SAT test is intended to assess student's readiness for college.",
            "The SAT was originally designed not to be aligned with high school curricula. ",
            "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. "
        ],
        "context_fol": [
            "Own(sat, collegeBoard) \u2227 \u00acOwn(sat, others)",
            "Test(sat, readiness)",
            "\u2200x (Year(x) \u2227 Before2016(x) \u2192 \u00acAlignHighSchool(x)) ",
            "\u2203x (Year(x) \u2227 Since2016(x) \u2227 AlignHighSchool(x)) "
        ],
        "question": "The SAT test assesses student's math skills.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 99,
        "story_id": 34,
        "context": [
            "Rafa Nadal was born in Mallorca.",
            "Rafa Nadal is a professional tennis player.",
            "Nadal's win ratio is higher than 80%.",
            "All players in the Big 3 are professionals who have a high win ratio."
        ],
        "context_fol": [
            "BornIn(rafaNadal, mallorca)",
            "ProfessionalTennisPlayer(rafaNadal)",
            "HighWinRatio(rafaNadal)",
            "\u2200x (ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x) \u2192 InBig3(x))"
        ],
        "question": "Nadal was not born in Mallorca.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 100,
        "story_id": 34,
        "context": [
            "Rafa Nadal was born in Mallorca.",
            "Rafa Nadal is a professional tennis player.",
            "Nadal's win ratio is higher than 80%.",
            "All players in the Big 3 are professionals who have a high win ratio."
        ],
        "context_fol": [
            "BornIn(rafaNadal, mallorca)",
            "ProfessionalTennisPlayer(rafaNadal)",
            "HighWinRatio(rafaNadal)",
            "\u2200x (ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x) \u2192 InBig3(x))"
        ],
        "question": "Nadal is in the Big 3.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 101,
        "story_id": 34,
        "context": [
            "Rafa Nadal was born in Mallorca.",
            "Rafa Nadal is a professional tennis player.",
            "Nadal's win ratio is higher than 80%.",
            "All players in the Big 3 are professionals who have a high win ratio."
        ],
        "context_fol": [
            "BornIn(rafaNadal, mallorca)",
            "ProfessionalTennisPlayer(rafaNadal)",
            "HighWinRatio(rafaNadal)",
            "\u2200x (ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x) \u2192 InBig3(x))"
        ],
        "question": "Nadal is the greatest player of all time.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 735,
        "story_id": 286,
        "context": [
            "No cookie is healthy.",
            "All oreos are cookies."
        ],
        "context_fol": [
            "\u2200x (Cookie(x) \u2192 \u00acHealthy(x))",
            "\u2200x (Oreo(x) \u2192 Cookie(x))"
        ],
        "question": "All cookies are delicious.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 787,
        "story_id": 314,
        "context": [
            "No animals are plants. ",
            "All humans are animals.",
            "All pupils are human.",
            "All flowers are plants.",
            "If Jack is a human or a flower, then Jack is a human and a flower."
        ],
        "context_fol": [
            "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
            "\u2200x (Human(x) \u2192 Animal(x))",
            "\u2200x (Pupil(x) \u2192 Human(x))",
            "\u2200x (Flower(x) \u2192 Plant(x))",
            "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)"
        ],
        "question": "Jack is a pupil.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 788,
        "story_id": 314,
        "context": [
            "No animals are plants. ",
            "All humans are animals.",
            "All pupils are human.",
            "All flowers are plants.",
            "If Jack is a human or a flower, then Jack is a human and a flower."
        ],
        "context_fol": [
            "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
            "\u2200x (Human(x) \u2192 Animal(x))",
            "\u2200x (Pupil(x) \u2192 Human(x))",
            "\u2200x (Flower(x) \u2192 Plant(x))",
            "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)"
        ],
        "question": "Jack is not a pupil.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 789,
        "story_id": 314,
        "context": [
            "No animals are plants. ",
            "All humans are animals.",
            "All pupils are human.",
            "All flowers are plants.",
            "If Jack is a human or a flower, then Jack is a human and a flower."
        ],
        "context_fol": [
            "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
            "\u2200x (Human(x) \u2192 Animal(x))",
            "\u2200x (Pupil(x) \u2192 Human(x))",
            "\u2200x (Flower(x) \u2192 Plant(x))",
            "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)"
        ],
        "question": "Jack is a plant.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 790,
        "story_id": 314,
        "context": [
            "No animals are plants. ",
            "All humans are animals.",
            "All pupils are human.",
            "All flowers are plants.",
            "If Jack is a human or a flower, then Jack is a human and a flower."
        ],
        "context_fol": [
            "\u2200x (Animal(x) \u2192 \u00acPlant(x))",
            "\u2200x (Human(x) \u2192 Animal(x))",
            "\u2200x (Pupil(x) \u2192 Human(x))",
            "\u2200x (Flower(x) \u2192 Plant(x))",
            "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)"
        ],
        "question": "If Jack is a human, then Jack is not a pupil.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1326,
        "story_id": 458,
        "context": [
            "No shoes are food. ",
            "All slippers are shoes.",
            "A thing is either food or clothes.",
            "No wearable things are airtight.",
            "All clothes are wearable. ",
            "If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes."
        ],
        "context_fol": [
            "\u2200x (Shoes(x) \u2192 \u00acFood(x))",
            "\u2200x (Slipper(x) \u2192 Shoes(x))",
            "\u2200x (Food(x) \u2295 Clothes(x))",
            "\u2200x (Wearable(x) \u2192 \u00acAirTight(x))",
            "\u2200x (Clothes(x) \u2192 Wearable(x))",
            "\u00ac(AirTight(watch) \u2227 Clothes(watch)) \u2192 (AirTight(watch) \u2227 Clothes(watch)) \u2295 (\u00acAirTight(watch) \u2227 \u00acClothes(watch))"
        ],
        "question": "Watch is a wearable.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1327,
        "story_id": 458,
        "context": [
            "No shoes are food. ",
            "All slippers are shoes.",
            "A thing is either food or clothes.",
            "No wearable things are airtight.",
            "All clothes are wearable. ",
            "If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes."
        ],
        "context_fol": [
            "\u2200x (Shoes(x) \u2192 \u00acFood(x))",
            "\u2200x (Slipper(x) \u2192 Shoes(x))",
            "\u2200x (Food(x) \u2295 Clothes(x))",
            "\u2200x (Wearable(x) \u2192 \u00acAirTight(x))",
            "\u2200x (Clothes(x) \u2192 Wearable(x))",
            "\u00ac(AirTight(watch) \u2227 Clothes(watch)) \u2192 (AirTight(watch) \u2227 Clothes(watch)) \u2295 (\u00acAirTight(watch) \u2227 \u00acClothes(watch))"
        ],
        "question": "Watch is a slipper.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1328,
        "story_id": 458,
        "context": [
            "No shoes are food. ",
            "All slippers are shoes.",
            "A thing is either food or clothes.",
            "No wearable things are airtight.",
            "All clothes are wearable. ",
            "If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes."
        ],
        "context_fol": [
            "\u2200x (Shoes(x) \u2192 \u00acFood(x))",
            "\u2200x (Slipper(x) \u2192 Shoes(x))",
            "\u2200x (Food(x) \u2295 Clothes(x))",
            "\u2200x (Wearable(x) \u2192 \u00acAirTight(x))",
            "\u2200x (Clothes(x) \u2192 Wearable(x))",
            "\u00ac(AirTight(watch) \u2227 Clothes(watch)) \u2192 (AirTight(watch) \u2227 Clothes(watch)) \u2295 (\u00acAirTight(watch) \u2227 \u00acClothes(watch))"
        ],
        "question": "Watch is neither airtight nor a slipper.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 102,
        "story_id": 35,
        "context": [
            "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
            "Carlos Reyes trains for an Olympic sport.",
            "Carlos Reyes went to the Olympics.",
            "Carlos Reyes is a welterweight.",
            "Heavy weights are not welterweights."
        ],
        "context_fol": [
            "\u2200x (DoesOlympicSport(x) \u2227 GoesToOlympicGames(x) \u2192 IsOlympian(x))",
            "DoesOlympicSport(carlosReyes)",
            "GoesToOlympicGames(carlosReyes)",
            "IsWelterWeight(carlosReyes)",
            "\u2200x (IsWelterWeight(x) \u2192 \u00acIsHeavyWeight(x))"
        ],
        "question": "Carlos Reyes is an Olympian.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 103,
        "story_id": 35,
        "context": [
            "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
            "Carlos Reyes trains for an Olympic sport.",
            "Carlos Reyes went to the Olympics.",
            "Carlos Reyes is a welterweight.",
            "Heavy weights are not welterweights."
        ],
        "context_fol": [
            "\u2200x (DoesOlympicSport(x) \u2227 GoesToOlympicGames(x) \u2192 IsOlympian(x))",
            "DoesOlympicSport(carlosReyes)",
            "GoesToOlympicGames(carlosReyes)",
            "IsWelterWeight(carlosReyes)",
            "\u2200x (IsWelterWeight(x) \u2192 \u00acIsHeavyWeight(x))"
        ],
        "question": "Carlos Reyes is a heavy weight.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 104,
        "story_id": 35,
        "context": [
            "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
            "Carlos Reyes trains for an Olympic sport.",
            "Carlos Reyes went to the Olympics.",
            "Carlos Reyes is a welterweight.",
            "Heavy weights are not welterweights."
        ],
        "context_fol": [
            "\u2200x (DoesOlympicSport(x) \u2227 GoesToOlympicGames(x) \u2192 IsOlympian(x))",
            "DoesOlympicSport(carlosReyes)",
            "GoesToOlympicGames(carlosReyes)",
            "IsWelterWeight(carlosReyes)",
            "\u2200x (IsWelterWeight(x) \u2192 \u00acIsHeavyWeight(x))"
        ],
        "question": "Carlos Reyes won an Olympic medal.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 868,
        "story_id": 333,
        "context": [
            "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
            "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
            "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
            "All young teenage girls who attend college are big fans of pop bands and singers.",
            "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
        ],
        "context_fol": [
            "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
            "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
            "\u2200x (Fans(x) \u2192 Decor(x))",
            "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
            "Ambitious(sam) \u2192 Fans(sam)"
        ],
        "question": "Sam is a young teenage girl who attends college.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 869,
        "story_id": 333,
        "context": [
            "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
            "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
            "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
            "All young teenage girls who attend college are big fans of pop bands and singers.",
            "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
        ],
        "context_fol": [
            "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
            "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
            "\u2200x (Fans(x) \u2192 Decor(x))",
            "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
            "Ambitious(sam) \u2192 Fans(sam)"
        ],
        "question": "Sam is not a young teenage girl who attends college.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 870,
        "story_id": 333,
        "context": [
            "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
            "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
            "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
            "All young teenage girls who attend college are big fans of pop bands and singers.",
            "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
        ],
        "context_fol": [
            "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
            "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
            "\u2200x (Fans(x) \u2192 Decor(x))",
            "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
            "Ambitious(sam) \u2192 Fans(sam)"
        ],
        "question": "Sam is a big fan of pop bands and singers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 871,
        "story_id": 333,
        "context": [
            "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
            "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
            "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
            "All young teenage girls who attend college are big fans of pop bands and singers.",
            "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
        ],
        "context_fol": [
            "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
            "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
            "\u2200x (Fans(x) \u2192 Decor(x))",
            "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
            "Ambitious(sam) \u2192 Fans(sam)"
        ],
        "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 872,
        "story_id": 333,
        "context": [
            "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
            "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
            "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
            "All young teenage girls who attend college are big fans of pop bands and singers.",
            "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
        ],
        "context_fol": [
            "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
            "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
            "\u2200x (Fans(x) \u2192 Decor(x))",
            "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
            "Ambitious(sam) \u2192 Fans(sam)"
        ],
        "question": "Sam has high ambitions and future career goals and is a young teenage girl who attends college.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 873,
        "story_id": 333,
        "context": [
            "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
            "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
            "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
            "All young teenage girls who attend college are big fans of pop bands and singers.",
            "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
        ],
        "context_fol": [
            "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
            "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
            "\u2200x (Fans(x) \u2192 Decor(x))",
            "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
            "Ambitious(sam) \u2192 Fans(sam)"
        ],
        "question": "Sam has high ambitions and future career goals and is a young teenage girl who attends college.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 874,
        "story_id": 333,
        "context": [
            "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
            "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
            "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
            "All young teenage girls who attend college are big fans of pop bands and singers.",
            "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
        ],
        "context_fol": [
            "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
            "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
            "\u2200x (Fans(x) \u2192 Decor(x))",
            "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
            "Ambitious(sam) \u2192 Fans(sam)"
        ],
        "question": "If Sam is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is a big fan of pop bands and singers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 875,
        "story_id": 333,
        "context": [
            "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
            "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
            "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
            "All young teenage girls who attend college are big fans of pop bands and singers.",
            "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
        ],
        "context_fol": [
            "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
            "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
            "\u2200x (Fans(x) \u2192 Decor(x))",
            "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
            "Ambitious(sam) \u2192 Fans(sam)"
        ],
        "question": "If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 876,
        "story_id": 333,
        "context": [
            "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
            "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
            "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
            "All young teenage girls who attend college are big fans of pop bands and singers.",
            "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."
        ],
        "context_fol": [
            "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))",
            "\u2200x (Ambitious(x) \u2192 MoveOut(x))",
            "\u2200x (Fans(x) \u2192 Decor(x))",
            "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))",
            "Ambitious(sam) \u2192 Fans(sam)"
        ],
        "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 527,
        "story_id": 182,
        "context": [
            "A student who loves shrieking will be punished.",
            "If a person swears, then he is a student.",
            "If someone is a teacher, then Bob will talk to him.",
            "All gentlemen are in a suit.",
            "All teachers are men.",
            "There is a teacher.",
            "If someone is not a gentlemen, then he is not nice.",
            "Willy is nice.",
            "Bob loves shrieking and swearing."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2227 Shriek(x) \u2192 Punished(x))",
            "\u2200x (Swear(x) \u2192 Student(x))",
            "\u2200x (Teacher(x) \u2192 Talk(bob, x))",
            "\u2200x (Gentleman(x) \u2192 Suit(x))",
            "\u2200x (Teacher(x) \u2192 Man(x))",
            "\u2203x (Teacher(x))",
            "\u2200x (\u00acGentleman(x) \u2192 \u00acNice(x))",
            "Nice(willy)",
            "Shriek(bob) \u2227 Swear(bob)"
        ],
        "question": "Willy is in a suit.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 528,
        "story_id": 182,
        "context": [
            "A student who loves shrieking will be punished.",
            "If a person swears, then he is a student.",
            "If someone is a teacher, then Bob will talk to him.",
            "All gentlemen are in a suit.",
            "All teachers are men.",
            "There is a teacher.",
            "If someone is not a gentlemen, then he is not nice.",
            "Willy is nice.",
            "Bob loves shrieking and swearing."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2227 Shriek(x) \u2192 Punished(x))",
            "\u2200x (Swear(x) \u2192 Student(x))",
            "\u2200x (Teacher(x) \u2192 Talk(bob, x))",
            "\u2200x (Gentleman(x) \u2192 Suit(x))",
            "\u2200x (Teacher(x) \u2192 Man(x))",
            "\u2203x (Teacher(x))",
            "\u2200x (\u00acGentleman(x) \u2192 \u00acNice(x))",
            "Nice(willy)",
            "Shriek(bob) \u2227 Swear(bob)"
        ],
        "question": "Bob will be not punished.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 529,
        "story_id": 182,
        "context": [
            "A student who loves shrieking will be punished.",
            "If a person swears, then he is a student.",
            "If someone is a teacher, then Bob will talk to him.",
            "All gentlemen are in a suit.",
            "All teachers are men.",
            "There is a teacher.",
            "If someone is not a gentlemen, then he is not nice.",
            "Willy is nice.",
            "Bob loves shrieking and swearing."
        ],
        "context_fol": [
            "\u2200x (Student(x) \u2227 Shriek(x) \u2192 Punished(x))",
            "\u2200x (Swear(x) \u2192 Student(x))",
            "\u2200x (Teacher(x) \u2192 Talk(bob, x))",
            "\u2200x (Gentleman(x) \u2192 Suit(x))",
            "\u2200x (Teacher(x) \u2192 Man(x))",
            "\u2203x (Teacher(x))",
            "\u2200x (\u00acGentleman(x) \u2192 \u00acNice(x))",
            "Nice(willy)",
            "Shriek(bob) \u2227 Swear(bob)"
        ],
        "question": "There is a man that Bob will talk to.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 142,
        "story_id": 49,
        "context": [
            "Quincy McDuffie is an American professional wide receiver in Canadian Football.",
            "People who can catch balls are good wide receivers. ",
            "Quincy McDuffie can catch many footballs easily.",
            "Good wide receivers play professionally.",
            "Good wide receivers can catch with both their left and right hand.",
            "All footballs are balls."
        ],
        "context_fol": [
            "American(quincymcduffie) \u2227 Professional(quincymcduffie) \u2227 WideReciever(quincymcduffie) \u2227 In(quincymcduffie, canadianfootball)",
            "\u2200x \u2203y (CanCatch(x, y) \u2227 Ball(y) \u2192 Good(x, widereciever))",
            "\u2203x (Football(x) \u2227 CanCatch(quincymcduffie, x))",
            "\u2200x (Good(x, widereciever) \u2192 Professional(x))",
            "\u2200x (Good(x, widereciever) \u2192 CanCatchWith(x, lefthand) \u2227 CanCatchWith(x, righthand))",
            "\u2200x (Football(x) \u2192 Ball(x))"
        ],
        "question": "Quincy McDuffie is a good wide receiver.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 143,
        "story_id": 49,
        "context": [
            "Quincy McDuffie is an American professional wide receiver in Canadian Football.",
            "People who can catch balls are good wide receivers. ",
            "Quincy McDuffie can catch many footballs easily.",
            "Good wide receivers play professionally.",
            "Good wide receivers can catch with both their left and right hand.",
            "All footballs are balls."
        ],
        "context_fol": [
            "American(quincymcduffie) \u2227 Professional(quincymcduffie) \u2227 WideReciever(quincymcduffie) \u2227 In(quincymcduffie, canadianfootball)",
            "\u2200x \u2203y (CanCatch(x, y) \u2227 Ball(y) \u2192 Good(x, widereciever))",
            "\u2203x (Football(x) \u2227 CanCatch(quincymcduffie, x))",
            "\u2200x (Good(x, widereciever) \u2192 Professional(x))",
            "\u2200x (Good(x, widereciever) \u2192 CanCatchWith(x, lefthand) \u2227 CanCatchWith(x, righthand))",
            "\u2200x (Football(x) \u2192 Ball(x))"
        ],
        "question": "Quincy McDuffie can catch every ball.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 144,
        "story_id": 49,
        "context": [
            "Quincy McDuffie is an American professional wide receiver in Canadian Football.",
            "People who can catch balls are good wide receivers. ",
            "Quincy McDuffie can catch many footballs easily.",
            "Good wide receivers play professionally.",
            "Good wide receivers can catch with both their left and right hand.",
            "All footballs are balls."
        ],
        "context_fol": [
            "American(quincymcduffie) \u2227 Professional(quincymcduffie) \u2227 WideReciever(quincymcduffie) \u2227 In(quincymcduffie, canadianfootball)",
            "\u2200x \u2203y (CanCatch(x, y) \u2227 Ball(y) \u2192 Good(x, widereciever))",
            "\u2203x (Football(x) \u2227 CanCatch(quincymcduffie, x))",
            "\u2200x (Good(x, widereciever) \u2192 Professional(x))",
            "\u2200x (Good(x, widereciever) \u2192 CanCatchWith(x, lefthand) \u2227 CanCatchWith(x, righthand))",
            "\u2200x (Football(x) \u2192 Ball(x))"
        ],
        "question": "Professional wide receivers are good at catching balls.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 14,
        "story_id": 6,
        "context": [
            "Boves is a railway station located in France. ",
            "The preceding station of Boves is Longueau.",
            "The preceding station of Dommartin is Boves.",
            "France is a European country.",
            "Dommartin is situated on the Paris\u2013Lille railway. ",
            "Any two contiguous stations are on the same railway.",
            "Boves is served by regional TER Hauts-de-France trains.",
            "If A is located in B and B is located in C, then A is located in C.",
            "If A precedes B and B preceds C, than A preceds C."
        ],
        "context_fol": [
            "RailwayStation(boves) \u2227 Locate(boves, france)",
            "Precede(boves, longueau)",
            "Precede(dommartin, boves)",
            "Locate(france, europe)",
            "Situate(dommartin, pairsLille)",
            "\u2200x \u2200y \u2200z ((Situate(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x))) \u2192 Situate(y, z))",
            "Serve(hautsDeFrance, boves)",
            "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))",
            "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))"
        ],
        "question": "Longueau is situated on the Paris\u2013Lille railway.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 15,
        "story_id": 6,
        "context": [
            "Boves is a railway station located in France. ",
            "The preceding station of Boves is Longueau.",
            "The preceding station of Dommartin is Boves.",
            "France is a European country.",
            "Dommartin is situated on the Paris\u2013Lille railway. ",
            "Any two contiguous stations are on the same railway.",
            "Boves is served by regional TER Hauts-de-France trains.",
            "If A is located in B and B is located in C, then A is located in C.",
            "If A precedes B and B preceds C, than A preceds C."
        ],
        "context_fol": [
            "RailwayStation(boves) \u2227 Locate(boves, france)",
            "Precede(boves, longueau)",
            "Precede(dommartin, boves)",
            "Locate(france, europe)",
            "Situate(dommartin, pairsLille)",
            "\u2200x \u2200y \u2200z ((Situate(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x))) \u2192 Situate(y, z))",
            "Serve(hautsDeFrance, boves)",
            "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))",
            "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))"
        ],
        "question": "Boves is not in Europe.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 16,
        "story_id": 6,
        "context": [
            "Boves is a railway station located in France. ",
            "The preceding station of Boves is Longueau.",
            "The preceding station of Dommartin is Boves.",
            "France is a European country.",
            "Dommartin is situated on the Paris\u2013Lille railway. ",
            "Any two contiguous stations are on the same railway.",
            "Boves is served by regional TER Hauts-de-France trains.",
            "If A is located in B and B is located in C, then A is located in C.",
            "If A precedes B and B preceds C, than A preceds C."
        ],
        "context_fol": [
            "RailwayStation(boves) \u2227 Locate(boves, france)",
            "Precede(boves, longueau)",
            "Precede(dommartin, boves)",
            "Locate(france, europe)",
            "Situate(dommartin, pairsLille)",
            "\u2200x \u2200y \u2200z ((Situate(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x))) \u2192 Situate(y, z))",
            "Serve(hautsDeFrance, boves)",
            "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))",
            "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))"
        ],
        "question": "Longueau is served by regional TER Hauts-de-France trains.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 310,
        "story_id": 102,
        "context": [
            "Edwin Smith was a New Zealand Rower from Auckland.",
            "Edwin Smith was also known as Ted Smith.",
            "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.",
            "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.",
            "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker."
        ],
        "context_fol": [
            "From(edwinsmith, newzealand) \u2227 Rower(edwinsmith) \u2227 From(edwinsmith, auckland)",
            "KnownAs(edwinsmith, tedsmith)",
            "WentTo(edwinsmith, roseroadprimaryschool) \u2227 LocatedIn(roseroadprimaryschool, greylynn)",
            "Sergeant(edwinsmith) \u2227 ServedWith(edwinsmith, newzealand24thbattalion) \u2227 ServedIn(edwinsmith, italy) \u2227 ServedIn(edwinsmith, egypt)",
            "Buisness(broadwaysheetmetals) \u2227 Ran(edwinsmith, broadwaysheetmetals) \u2227 Owned(edwinsmith, broadwaysheetmetals) \u2227 SheetmetalWorker(edwinsmith)"
        ],
        "question": "Ted Smith was a sergeant.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 311,
        "story_id": 102,
        "context": [
            "Edwin Smith was a New Zealand Rower from Auckland.",
            "Edwin Smith was also known as Ted Smith.",
            "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.",
            "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.",
            "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker."
        ],
        "context_fol": [
            "From(edwinsmith, newzealand) \u2227 Rower(edwinsmith) \u2227 From(edwinsmith, auckland)",
            "KnownAs(edwinsmith, tedsmith)",
            "WentTo(edwinsmith, roseroadprimaryschool) \u2227 LocatedIn(roseroadprimaryschool, greylynn)",
            "Sergeant(edwinsmith) \u2227 ServedWith(edwinsmith, newzealand24thbattalion) \u2227 ServedIn(edwinsmith, italy) \u2227 ServedIn(edwinsmith, egypt)",
            "Buisness(broadwaysheetmetals) \u2227 Ran(edwinsmith, broadwaysheetmetals) \u2227 Owned(edwinsmith, broadwaysheetmetals) \u2227 SheetmetalWorker(edwinsmith)"
        ],
        "question": "There are no rowers that own a buisness.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 312,
        "story_id": 102,
        "context": [
            "Edwin Smith was a New Zealand Rower from Auckland.",
            "Edwin Smith was also known as Ted Smith.",
            "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.",
            "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.",
            "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker."
        ],
        "context_fol": [
            "From(edwinsmith, newzealand) \u2227 Rower(edwinsmith) \u2227 From(edwinsmith, auckland)",
            "KnownAs(edwinsmith, tedsmith)",
            "WentTo(edwinsmith, roseroadprimaryschool) \u2227 LocatedIn(roseroadprimaryschool, greylynn)",
            "Sergeant(edwinsmith) \u2227 ServedWith(edwinsmith, newzealand24thbattalion) \u2227 ServedIn(edwinsmith, italy) \u2227 ServedIn(edwinsmith, egypt)",
            "Buisness(broadwaysheetmetals) \u2227 Ran(edwinsmith, broadwaysheetmetals) \u2227 Owned(edwinsmith, broadwaysheetmetals) \u2227 SheetmetalWorker(edwinsmith)"
        ],
        "question": "No sergeants are from Auckland.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 313,
        "story_id": 102,
        "context": [
            "Edwin Smith was a New Zealand Rower from Auckland.",
            "Edwin Smith was also known as Ted Smith.",
            "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.",
            "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.",
            "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker."
        ],
        "context_fol": [
            "From(edwinsmith, newzealand) \u2227 Rower(edwinsmith) \u2227 From(edwinsmith, auckland)",
            "KnownAs(edwinsmith, tedsmith)",
            "WentTo(edwinsmith, roseroadprimaryschool) \u2227 LocatedIn(roseroadprimaryschool, greylynn)",
            "Sergeant(edwinsmith) \u2227 ServedWith(edwinsmith, newzealand24thbattalion) \u2227 ServedIn(edwinsmith, italy) \u2227 ServedIn(edwinsmith, egypt)",
            "Buisness(broadwaysheetmetals) \u2227 Ran(edwinsmith, broadwaysheetmetals) \u2227 Owned(edwinsmith, broadwaysheetmetals) \u2227 SheetmetalWorker(edwinsmith)"
        ],
        "question": "No buisness owner has served in Egypt.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 506,
        "story_id": 175,
        "context": [
            "A werewolf is a human that can turn into a wolf.",
            "A werewolf has been scratched or bitten by another werewolf.",
            "If someone has been scratched or bitten, they have been attacked."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2227 CanTurnInto(x, wolf) \u2192 Werewolf(x))",
            "\u2200x \u2203y (Werewolf(x) \u2192 (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2227 Werewolf(y))",
            "\u2200x \u2203y (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2192 AttackedBy(x,y)"
        ],
        "question": "All humans are werewolves.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 507,
        "story_id": 175,
        "context": [
            "A werewolf is a human that can turn into a wolf.",
            "A werewolf has been scratched or bitten by another werewolf.",
            "If someone has been scratched or bitten, they have been attacked."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2227 CanTurnInto(x, wolf) \u2192 Werewolf(x))",
            "\u2200x \u2203y (Werewolf(x) \u2192 (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2227 Werewolf(y))",
            "\u2200x \u2203y (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2192 AttackedBy(x,y)"
        ],
        "question": "A werewolf is a wolf.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 508,
        "story_id": 175,
        "context": [
            "A werewolf is a human that can turn into a wolf.",
            "A werewolf has been scratched or bitten by another werewolf.",
            "If someone has been scratched or bitten, they have been attacked."
        ],
        "context_fol": [
            "\u2200x (Human(x) \u2227 CanTurnInto(x, wolf) \u2192 Werewolf(x))",
            "\u2200x \u2203y (Werewolf(x) \u2192 (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2227 Werewolf(y))",
            "\u2200x \u2203y (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2192 AttackedBy(x,y)"
        ],
        "question": "A werewolf has scratched someone before.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 409,
        "story_id": 139,
        "context": [
            "UFC Fight Night was a mixed martial arts event and was held in Sweden.",
            "At UFC Fight Night, Sadollah was scheduled to fight Musoke.",
            "Sadollah fought Akiyama at UFC Fight Night.",
            "Musoke fought Yakovlev at UFC Fight Night.",
            "Jung was injured at UFC Fight Night.",
            "Injured people did not fight at UFC Fight Night."
        ],
        "context_fol": [
            "Event(uFCFightNight) \u2227 MixedMartial(uFCFightNight) \u2227 Sweden(uFCFightNight)",
            "Event(uFCFightNight) \u2192 ScheduledToFight(sadollah, musoke)",
            "Event(uFCFightNight) \u2192 Fight(sadollah, akiyama)",
            "Event(uFCFightNight) \u2192 Fight(musoke, yakovlev)",
            "Event(uFCFightNight) \u2192 Injured(jung)",
            "\u2200x (Injured(x) \u2192 \u00acFightInUFC(x))"
        ],
        "question": "Jung fought Sadollah.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 410,
        "story_id": 139,
        "context": [
            "UFC Fight Night was a mixed martial arts event and was held in Sweden.",
            "At UFC Fight Night, Sadollah was scheduled to fight Musoke.",
            "Sadollah fought Akiyama at UFC Fight Night.",
            "Musoke fought Yakovlev at UFC Fight Night.",
            "Jung was injured at UFC Fight Night.",
            "Injured people did not fight at UFC Fight Night."
        ],
        "context_fol": [
            "Event(uFCFightNight) \u2227 MixedMartial(uFCFightNight) \u2227 Sweden(uFCFightNight)",
            "Event(uFCFightNight) \u2192 ScheduledToFight(sadollah, musoke)",
            "Event(uFCFightNight) \u2192 Fight(sadollah, akiyama)",
            "Event(uFCFightNight) \u2192 Fight(musoke, yakovlev)",
            "Event(uFCFightNight) \u2192 Injured(jung)",
            "\u2200x (Injured(x) \u2192 \u00acFightInUFC(x))"
        ],
        "question": "Jung did not fight at UFC Fight Night.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 411,
        "story_id": 139,
        "context": [
            "UFC Fight Night was a mixed martial arts event and was held in Sweden.",
            "At UFC Fight Night, Sadollah was scheduled to fight Musoke.",
            "Sadollah fought Akiyama at UFC Fight Night.",
            "Musoke fought Yakovlev at UFC Fight Night.",
            "Jung was injured at UFC Fight Night.",
            "Injured people did not fight at UFC Fight Night."
        ],
        "context_fol": [
            "Event(uFCFightNight) \u2227 MixedMartial(uFCFightNight) \u2227 Sweden(uFCFightNight)",
            "Event(uFCFightNight) \u2192 ScheduledToFight(sadollah, musoke)",
            "Event(uFCFightNight) \u2192 Fight(sadollah, akiyama)",
            "Event(uFCFightNight) \u2192 Fight(musoke, yakovlev)",
            "Event(uFCFightNight) \u2192 Injured(jung)",
            "\u2200x (Injured(x) \u2192 \u00acFightInUFC(x))"
        ],
        "question": "Sadollah fought Musoke.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 412,
        "story_id": 139,
        "context": [
            "UFC Fight Night was a mixed martial arts event and was held in Sweden.",
            "At UFC Fight Night, Sadollah was scheduled to fight Musoke.",
            "Sadollah fought Akiyama at UFC Fight Night.",
            "Musoke fought Yakovlev at UFC Fight Night.",
            "Jung was injured at UFC Fight Night.",
            "Injured people did not fight at UFC Fight Night."
        ],
        "context_fol": [
            "Event(uFCFightNight) \u2227 MixedMartial(uFCFightNight) \u2227 Sweden(uFCFightNight)",
            "Event(uFCFightNight) \u2192 ScheduledToFight(sadollah, musoke)",
            "Event(uFCFightNight) \u2192 Fight(sadollah, akiyama)",
            "Event(uFCFightNight) \u2192 Fight(musoke, yakovlev)",
            "Event(uFCFightNight) \u2192 Injured(jung)",
            "\u2200x (Injured(x) \u2192 \u00acFightInUFC(x))"
        ],
        "question": "Nelson fought Story at UFC Fight Night.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1356,
        "story_id": 468,
        "context": [
            "All drinks are edible. ",
            "All juices are drinks. ",
            "All orange juice is a juice. ",
            "A juice is either an orange juice or an apple juice.",
            "All apple juice is sweet.",
            "If coke is apple juice, then coke is a drink.",
            "If coke is not apple juice, then coke is not edible."
        ],
        "context_fol": [
            "\u2200x (Drink(x) \u2192 Edible(x))",
            "\u2200x (Juice(x) \u2192 Drink(x))",
            "\u2200x (OrangeJuice(x) \u2192 Juice(x))",
            "\u2200x (OrangeJuice(x) \u2228 AppleJuice(x))",
            "\u2200x (AppleJuice(x) \u2192 Sweet(x))",
            "AppleJuice(coke) \u2192 Drink(coke)",
            "\u00acAppleJuice(coke) \u2192 \u00acEdible(coke)"
        ],
        "question": "Coke is orange juice.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1357,
        "story_id": 468,
        "context": [
            "All drinks are edible. ",
            "All juices are drinks. ",
            "All orange juice is a juice. ",
            "A juice is either an orange juice or an apple juice.",
            "All apple juice is sweet.",
            "If coke is apple juice, then coke is a drink.",
            "If coke is not apple juice, then coke is not edible."
        ],
        "context_fol": [
            "\u2200x (Drink(x) \u2192 Edible(x))",
            "\u2200x (Juice(x) \u2192 Drink(x))",
            "\u2200x (OrangeJuice(x) \u2192 Juice(x))",
            "\u2200x (OrangeJuice(x) \u2228 AppleJuice(x))",
            "\u2200x (AppleJuice(x) \u2192 Sweet(x))",
            "AppleJuice(coke) \u2192 Drink(coke)",
            "\u00acAppleJuice(coke) \u2192 \u00acEdible(coke)"
        ],
        "question": "Coke is edible and sweet.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1358,
        "story_id": 468,
        "context": [
            "All drinks are edible. ",
            "All juices are drinks. ",
            "All orange juice is a juice. ",
            "A juice is either an orange juice or an apple juice.",
            "All apple juice is sweet.",
            "If coke is apple juice, then coke is a drink.",
            "If coke is not apple juice, then coke is not edible."
        ],
        "context_fol": [
            "\u2200x (Drink(x) \u2192 Edible(x))",
            "\u2200x (Juice(x) \u2192 Drink(x))",
            "\u2200x (OrangeJuice(x) \u2192 Juice(x))",
            "\u2200x (OrangeJuice(x) \u2228 AppleJuice(x))",
            "\u2200x (AppleJuice(x) \u2192 Sweet(x))",
            "AppleJuice(coke) \u2192 Drink(coke)",
            "\u00acAppleJuice(coke) \u2192 \u00acEdible(coke)"
        ],
        "question": "Coke is not edible and sweet.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 119,
        "story_id": 41,
        "context": [
            "Federico Garcia Lorca was a talented Spanish poet and he supported the Popular Front.",
            "The Spanish Nationalists opposed anyone who supported the Popular Front",
            "Talented poets are popular.",
            "Spanish Nationalists killed anyone who they opposed and were popular.",
            "Daniel supported the Popular Front but was not popular."
        ],
        "context_fol": [
            "TalentedPoet(lorca) \u2227 SupportPopulists(lorca)",
            "\u2200x (SupportPopulists(x) \u2192 Opposed(nationalists, x))",
            "\u2200x (TalentedPoet(x) \u2192 Popular(x))",
            "\u2200x (Opposed(nationalists, x) \u2227 Popular(x) \u2192 Killed(nationalists, x))",
            "SupportPopulists(daniel) \u2227 \u00acPopular(daniel)"
        ],
        "question": "Daniel was not killed by the Spanish Nationalists.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 120,
        "story_id": 41,
        "context": [
            "Federico Garcia Lorca was a talented Spanish poet and he supported the Popular Front.",
            "The Spanish Nationalists opposed anyone who supported the Popular Front",
            "Talented poets are popular.",
            "Spanish Nationalists killed anyone who they opposed and were popular.",
            "Daniel supported the Popular Front but was not popular."
        ],
        "context_fol": [
            "TalentedPoet(lorca) \u2227 SupportPopulists(lorca)",
            "\u2200x (SupportPopulists(x) \u2192 Opposed(nationalists, x))",
            "\u2200x (TalentedPoet(x) \u2192 Popular(x))",
            "\u2200x (Opposed(nationalists, x) \u2227 Popular(x) \u2192 Killed(nationalists, x))",
            "SupportPopulists(daniel) \u2227 \u00acPopular(daniel)"
        ],
        "question": "Lorca was killed by the Spanish Nationalists.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 978,
        "story_id": 366,
        "context": [
            "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
            "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
            "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
            "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
            "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
            "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
        ],
        "context_fol": [
            "\u2200x (Kombucha(x) \u2228 CocaCola(x))",
            "\u2200x (CocaCola(x) \u2192 BusyParents(x))",
            "\u2200x (CocaCola(x) \u2192 Dentist(x))",
            "\u2200x (BusyParents(x) \u2192 Erratic(x))",
            "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))",
            "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))"
        ],
        "question": "Franny has to visit the dentist frequently.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 979,
        "story_id": 366,
        "context": [
            "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
            "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
            "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
            "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
            "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
            "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
        ],
        "context_fol": [
            "\u2200x (Kombucha(x) \u2228 CocaCola(x))",
            "\u2200x (CocaCola(x) \u2192 BusyParents(x))",
            "\u2200x (CocaCola(x) \u2192 Dentist(x))",
            "\u2200x (BusyParents(x) \u2192 Erratic(x))",
            "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))",
            "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))"
        ],
        "question": "If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 980,
        "story_id": 366,
        "context": [
            "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
            "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
            "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
            "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
            "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
            "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "
        ],
        "context_fol": [
            "\u2200x (Kombucha(x) \u2228 CocaCola(x))",
            "\u2200x (CocaCola(x) \u2192 BusyParents(x))",
            "\u2200x (CocaCola(x) \u2192 Dentist(x))",
            "\u2200x (BusyParents(x) \u2192 Erratic(x))",
            "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))",
            "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))"
        ],
        "question": "If Franny either visits the dentist frequently or drinks kombucha every day, then Franny both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 63,
        "story_id": 22,
        "context": [
            "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
            "Some customers go to cinemas every week. ",
            "Customers who prefer TV series will not watch TV series in cinemas.",
            "James watches TV series in cinemas. ",
            "James subscribes to AMC A List.",
            "Peter prefers TV series."
        ],
        "context_fol": [
            "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
            "\u2203x (CinemaEveryWeek(x))",
            "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
            "WatchTVIn(james, cinemas)",
            "SubscribedTo(james, amcalist)",
            "Prefer(peter, tvseries)"
        ],
        "question": "James is not able to watch 3 movies every week without any additional fees.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 64,
        "story_id": 22,
        "context": [
            "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
            "Some customers go to cinemas every week. ",
            "Customers who prefer TV series will not watch TV series in cinemas.",
            "James watches TV series in cinemas. ",
            "James subscribes to AMC A List.",
            "Peter prefers TV series."
        ],
        "context_fol": [
            "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
            "\u2203x (CinemaEveryWeek(x))",
            "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
            "WatchTVIn(james, cinemas)",
            "SubscribedTo(james, amcalist)",
            "Prefer(peter, tvseries)"
        ],
        "question": "James goes to cinemas every week.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 65,
        "story_id": 22,
        "context": [
            "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
            "Some customers go to cinemas every week. ",
            "Customers who prefer TV series will not watch TV series in cinemas.",
            "James watches TV series in cinemas. ",
            "James subscribes to AMC A List.",
            "Peter prefers TV series."
        ],
        "context_fol": [
            "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))",
            "\u2203x (CinemaEveryWeek(x))",
            "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))",
            "WatchTVIn(james, cinemas)",
            "SubscribedTo(james, amcalist)",
            "Prefer(peter, tvseries)"
        ],
        "question": "Peter will not watch TV series in cinemas.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 724,
        "story_id": 275,
        "context": [
            "Bulbophyllum attenuatum is in the genus bulbophyllum.",
            "All bulbophyllum are orchids."
        ],
        "context_fol": [
            "InGenus(bulbophyllumattenuatum, bulbophyllum)",
            "\u2200x (InGenus(x, bulbophyllum) \u2192 Orchid(x))"
        ],
        "question": "Bulbophyllum attenuatum is not an orchid.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 470,
        "story_id": 163,
        "context": [
            "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.",
            "The Central federal district has the largest population among all federal districts in Russia.",
            "Moscow is the administrative center of the Central federal district.",
            "Yekaterinburg is the administrative center of the Ural federal district.",
            "Vladivostok is the administrative center of the Far Eastern federal district.",
            "The Far Eastern federal district has the largest area among all federal districts in Russia.",
            "Some federal districts of Russia were established in 2000."
        ],
        "context_fol": [
            "FederalDistrictOfRussia(central) \u2228 FederalDistrictOfRussia(northwestern) \u2228 FederalDistrictOfRussia(southern) \u2228 FederalDistrictOfRussia(northcaucasian) \u2228 FederalDistrictOfRussia(volga) \u2228 FederalDistrictOfRussia(ural) \u2228 FederalDistrictOfRussia(siberian) \u2228 FederalDistrictOfRussia(fareastern)",
            "FederalDistrictOfRussia(central) \u2227 LargestPopulationIn(central) ",
            "AdministrativeCenterOf(moscow, central)",
            "AdministrativeCenterOf(yekaterinburg, ural)",
            "AdministrativeCenterOf(vladivostok, fareastern)",
            "FederalDistrictOfRussia(fareastern) \u2227 LargestAreaIn(fareastern)",
            "\u2203x (FederalDistrictOfRussia(x) \u2192 EstablishedIn(x, 2000))"
        ],
        "question": "Vladivostok is the administrative center of the federal district with the largest area.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 471,
        "story_id": 163,
        "context": [
            "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.",
            "The Central federal district has the largest population among all federal districts in Russia.",
            "Moscow is the administrative center of the Central federal district.",
            "Yekaterinburg is the administrative center of the Ural federal district.",
            "Vladivostok is the administrative center of the Far Eastern federal district.",
            "The Far Eastern federal district has the largest area among all federal districts in Russia.",
            "Some federal districts of Russia were established in 2000."
        ],
        "context_fol": [
            "FederalDistrictOfRussia(central) \u2228 FederalDistrictOfRussia(northwestern) \u2228 FederalDistrictOfRussia(southern) \u2228 FederalDistrictOfRussia(northcaucasian) \u2228 FederalDistrictOfRussia(volga) \u2228 FederalDistrictOfRussia(ural) \u2228 FederalDistrictOfRussia(siberian) \u2228 FederalDistrictOfRussia(fareastern)",
            "FederalDistrictOfRussia(central) \u2227 LargestPopulationIn(central) ",
            "AdministrativeCenterOf(moscow, central)",
            "AdministrativeCenterOf(yekaterinburg, ural)",
            "AdministrativeCenterOf(vladivostok, fareastern)",
            "FederalDistrictOfRussia(fareastern) \u2227 LargestAreaIn(fareastern)",
            "\u2203x (FederalDistrictOfRussia(x) \u2192 EstablishedIn(x, 2000))"
        ],
        "question": "Moscow is the administrative center of the federal district with the largest population.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 472,
        "story_id": 163,
        "context": [
            "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.",
            "The Central federal district has the largest population among all federal districts in Russia.",
            "Moscow is the administrative center of the Central federal district.",
            "Yekaterinburg is the administrative center of the Ural federal district.",
            "Vladivostok is the administrative center of the Far Eastern federal district.",
            "The Far Eastern federal district has the largest area among all federal districts in Russia.",
            "Some federal districts of Russia were established in 2000."
        ],
        "context_fol": [
            "FederalDistrictOfRussia(central) \u2228 FederalDistrictOfRussia(northwestern) \u2228 FederalDistrictOfRussia(southern) \u2228 FederalDistrictOfRussia(northcaucasian) \u2228 FederalDistrictOfRussia(volga) \u2228 FederalDistrictOfRussia(ural) \u2228 FederalDistrictOfRussia(siberian) \u2228 FederalDistrictOfRussia(fareastern)",
            "FederalDistrictOfRussia(central) \u2227 LargestPopulationIn(central) ",
            "AdministrativeCenterOf(moscow, central)",
            "AdministrativeCenterOf(yekaterinburg, ural)",
            "AdministrativeCenterOf(vladivostok, fareastern)",
            "FederalDistrictOfRussia(fareastern) \u2227 LargestAreaIn(fareastern)",
            "\u2203x (FederalDistrictOfRussia(x) \u2192 EstablishedIn(x, 2000))"
        ],
        "question": "The Northwestern federal district was established in 2000.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 815,
        "story_id": 320,
        "context": [
            "All cancers are malignant tumors.",
            "No malignant tumor can be treated at home.",
            "All colorectal cancer is cancer.",
            "Having a cold can be treated at home.",
            "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
        ],
        "context_fol": [
            "\u2200x (Cancer(x) \u2192 MalignantTumor(x))",
            "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))",
            "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))",
            "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))",
            "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))"
        ],
        "question": "Breast cancer can be treated at home.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 816,
        "story_id": 320,
        "context": [
            "All cancers are malignant tumors.",
            "No malignant tumor can be treated at home.",
            "All colorectal cancer is cancer.",
            "Having a cold can be treated at home.",
            "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
        ],
        "context_fol": [
            "\u2200x (Cancer(x) \u2192 MalignantTumor(x))",
            "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))",
            "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))",
            "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))",
            "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))"
        ],
        "question": "Breast cancer is colorectal cancer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 817,
        "story_id": 320,
        "context": [
            "All cancers are malignant tumors.",
            "No malignant tumor can be treated at home.",
            "All colorectal cancer is cancer.",
            "Having a cold can be treated at home.",
            "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
        ],
        "context_fol": [
            "\u2200x (Cancer(x) \u2192 MalignantTumor(x))",
            "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))",
            "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))",
            "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))",
            "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))"
        ],
        "question": "Breast cancer is not colorectal cancer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 818,
        "story_id": 320,
        "context": [
            "All cancers are malignant tumors.",
            "No malignant tumor can be treated at home.",
            "All colorectal cancer is cancer.",
            "Having a cold can be treated at home.",
            "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
        ],
        "context_fol": [
            "\u2200x (Cancer(x) \u2192 MalignantTumor(x))",
            "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))",
            "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))",
            "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))",
            "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))"
        ],
        "question": "Breast cancer is colorectal cancer or a malignant tumor.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 819,
        "story_id": 320,
        "context": [
            "All cancers are malignant tumors.",
            "No malignant tumor can be treated at home.",
            "All colorectal cancer is cancer.",
            "Having a cold can be treated at home.",
            "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
        ],
        "context_fol": [
            "\u2200x (Cancer(x) \u2192 MalignantTumor(x))",
            "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))",
            "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))",
            "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))",
            "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))"
        ],
        "question": "Breast cancer is colorectal cancer and a cancer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 820,
        "story_id": 320,
        "context": [
            "All cancers are malignant tumors.",
            "No malignant tumor can be treated at home.",
            "All colorectal cancer is cancer.",
            "Having a cold can be treated at home.",
            "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."
        ],
        "context_fol": [
            "\u2200x (Cancer(x) \u2192 MalignantTumor(x))",
            "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))",
            "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))",
            "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))",
            "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))"
        ],
        "question": "If breast cancer is not colorectal cancer, then breast cancer is a malignant tumor.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 752,
        "story_id": 303,
        "context": [
            "I should not worry about things outside of my control.",
            "Traffic is outside of my control."
        ],
        "context_fol": [
            "\u2200x (OutsideControl(x) \u2192 \u00acShouldWorry(x))",
            "\u2200x (Traffic(x) \u2192 OutsideControl(x))"
        ],
        "question": "I should not worry about traffic.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 342,
        "story_id": 113,
        "context": [
            "Roversi is an Italian surname.",
            "Alba Roversi uses Roversi as a surname.",
            "Paolo Roversi uses Roversi as a surname.",
            "Roberto Roversi uses Roversi as a surname.",
            "Paolo Roversi is a photographer.",
            "A photographer is a professional or an amateur."
        ],
        "context_fol": [
            "\u2200x (UseAsSurname(x, roversi) \u2192 UseItalianSurname(x))",
            "UseAsSurname(alba, roversi)",
            "UseAsSurname(paolo, roversi)",
            "UseAsSurname(roberto, roversi)",
            "Photographer(paolo)",
            "\u2200x (Photographer(x) \u2192 Professional(x) \u2228 Amateur(x))"
        ],
        "question": "Alba Roversi uses an Italian surname.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 343,
        "story_id": 113,
        "context": [
            "Roversi is an Italian surname.",
            "Alba Roversi uses Roversi as a surname.",
            "Paolo Roversi uses Roversi as a surname.",
            "Roberto Roversi uses Roversi as a surname.",
            "Paolo Roversi is a photographer.",
            "A photographer is a professional or an amateur."
        ],
        "context_fol": [
            "\u2200x (UseAsSurname(x, roversi) \u2192 UseItalianSurname(x))",
            "UseAsSurname(alba, roversi)",
            "UseAsSurname(paolo, roversi)",
            "UseAsSurname(roberto, roversi)",
            "Photographer(paolo)",
            "\u2200x (Photographer(x) \u2192 Professional(x) \u2228 Amateur(x))"
        ],
        "question": "There are no photographers using an Italian surname.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 344,
        "story_id": 113,
        "context": [
            "Roversi is an Italian surname.",
            "Alba Roversi uses Roversi as a surname.",
            "Paolo Roversi uses Roversi as a surname.",
            "Roberto Roversi uses Roversi as a surname.",
            "Paolo Roversi is a photographer.",
            "A photographer is a professional or an amateur."
        ],
        "context_fol": [
            "\u2200x (UseAsSurname(x, roversi) \u2192 UseItalianSurname(x))",
            "UseAsSurname(alba, roversi)",
            "UseAsSurname(paolo, roversi)",
            "UseAsSurname(roberto, roversi)",
            "Photographer(paolo)",
            "\u2200x (Photographer(x) \u2192 Professional(x) \u2228 Amateur(x))"
        ],
        "question": "Paolo is an amateur photographer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 677,
        "story_id": 237,
        "context": [
            "Zaha Hadid is a British-Iraqi architect, artist and designer.",
            "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
            "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
            "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
        ],
        "context_fol": [
            "British-IraqiArchitect(zahaHadid)",
            "BornIn(zahaHadid, y1950)",
            "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
            "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
        ],
        "question": "Hadid became a UK citizen later in her life.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 678,
        "story_id": 237,
        "context": [
            "Zaha Hadid is a British-Iraqi architect, artist and designer.",
            "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
            "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
            "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
        ],
        "context_fol": [
            "British-IraqiArchitect(zahaHadid)",
            "BornIn(zahaHadid, y1950)",
            "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
            "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
        ],
        "question": "Hadid did some work in interior design.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 679,
        "story_id": 237,
        "context": [
            "Zaha Hadid is a British-Iraqi architect, artist and designer.",
            "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
            "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
            "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
        ],
        "context_fol": [
            "British-IraqiArchitect(zahaHadid)",
            "BornIn(zahaHadid, y1950)",
            "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
            "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
        ],
        "question": "Hadid was born in 1982.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 680,
        "story_id": 237,
        "context": [
            "Zaha Hadid is a British-Iraqi architect, artist and designer.",
            "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
            "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
            "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "
        ],
        "context_fol": [
            "British-IraqiArchitect(zahaHadid)",
            "BornIn(zahaHadid, y1950)",
            "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
            "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
        ],
        "question": "Max admires Zaha Hadid.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1081,
        "story_id": 396,
        "context": [
            "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ",
            "All noninvasive neuroimaging techniques provide a spatial resolution of brains.",
            "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ",
            "All measurements of brain activity are used by neuroscience researchers.",
            "FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique."
        ],
        "context_fol": [
            "\u2200x (InvasiveNeuroimagingTechnique(x) \u2228 NoninvasiveNeuroimagingTechnique(x)) ",
            " \u2200x (NoninvasiveNeuroimagingTechnique(x) \u2192 ProvidesSpatialResolutionOfBrains(x)) ",
            " \u2200x (ProvidesSpatialResolutionOfBrains(x) \u2192 MeasurementOfBrainActivity(x)) ",
            " \u2200x (MeasurementOfBrainActivity(x) \u2192 UsedByNeuroscienceResearchers(x))",
            " MeasurementOfBrainActivity(fMRI) \u2295 NoninvasiveNeuroimagingTechnique(fMRI)"
        ],
        "question": "FMRI provides a spatial resolution of brains.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1082,
        "story_id": 396,
        "context": [
            "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ",
            "All noninvasive neuroimaging techniques provide a spatial resolution of brains.",
            "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ",
            "All measurements of brain activity are used by neuroscience researchers.",
            "FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique."
        ],
        "context_fol": [
            "\u2200x (InvasiveNeuroimagingTechnique(x) \u2228 NoninvasiveNeuroimagingTechnique(x)) ",
            " \u2200x (NoninvasiveNeuroimagingTechnique(x) \u2192 ProvidesSpatialResolutionOfBrains(x)) ",
            " \u2200x (ProvidesSpatialResolutionOfBrains(x) \u2192 MeasurementOfBrainActivity(x)) ",
            " \u2200x (MeasurementOfBrainActivity(x) \u2192 UsedByNeuroscienceResearchers(x))",
            " MeasurementOfBrainActivity(fMRI) \u2295 NoninvasiveNeuroimagingTechnique(fMRI)"
        ],
        "question": "FMRI is an invasive neuroimaging technique and is used by neuroscience researchers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1083,
        "story_id": 396,
        "context": [
            "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ",
            "All noninvasive neuroimaging techniques provide a spatial resolution of brains.",
            "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ",
            "All measurements of brain activity are used by neuroscience researchers.",
            "FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique."
        ],
        "context_fol": [
            "\u2200x (InvasiveNeuroimagingTechnique(x) \u2228 NoninvasiveNeuroimagingTechnique(x)) ",
            " \u2200x (NoninvasiveNeuroimagingTechnique(x) \u2192 ProvidesSpatialResolutionOfBrains(x)) ",
            " \u2200x (ProvidesSpatialResolutionOfBrains(x) \u2192 MeasurementOfBrainActivity(x)) ",
            " \u2200x (MeasurementOfBrainActivity(x) \u2192 UsedByNeuroscienceResearchers(x))",
            " MeasurementOfBrainActivity(fMRI) \u2295 NoninvasiveNeuroimagingTechnique(fMRI)"
        ],
        "question": "FMRI is either an invasive neuroimaging technique or is used by neuroscience researchers.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1084,
        "story_id": 396,
        "context": [
            "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ",
            "All noninvasive neuroimaging techniques provide a spatial resolution of brains.",
            "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ",
            "All measurements of brain activity are used by neuroscience researchers.",
            "FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique."
        ],
        "context_fol": [
            "\u2200x (InvasiveNeuroimagingTechnique(x) \u2228 NoninvasiveNeuroimagingTechnique(x)) ",
            " \u2200x (NoninvasiveNeuroimagingTechnique(x) \u2192 ProvidesSpatialResolutionOfBrains(x)) ",
            " \u2200x (ProvidesSpatialResolutionOfBrains(x) \u2192 MeasurementOfBrainActivity(x)) ",
            " \u2200x (MeasurementOfBrainActivity(x) \u2192 UsedByNeuroscienceResearchers(x))",
            " MeasurementOfBrainActivity(fMRI) \u2295 NoninvasiveNeuroimagingTechnique(fMRI)"
        ],
        "question": "If fMRI is not an invasive neuroimaging technique and used by neuroscience researchers, then fMRI is neither a noninvasive neuroimaging technique nor provides a spatial resolution of brains.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1258,
        "story_id": 437,
        "context": [
            "Either present their work at the conference or provide a tutorial session at the conference. ",
            "All who present their work at the conference will attend in person. ",
            "All those providing a tutorial session at the conference are invited to join the club. ",
            "All who attend the conference in person are provided with souvenirs. ",
            "All invited to join the club are provided with delicious meals. ",
            "All provided with delicious meals are happy to communicate with each other during the dinner. ",
            "All provided with delicious meals are invited to take a photo with the audience. ",
            "James does not attend the conference in person and is not provided with souvenirs."
        ],
        "context_fol": [
            "\u2200x ( Present(x) \u2228 Tutorial(x))",
            "\u2200x (Present(x) \u2192 InPerson(x))",
            "\u2200x (Tutorial(x) \u2192 Invited(x))",
            "\u2200x (InPerson(x) \u2192 Souvenirs(x))",
            "\u2200x (Invited(x) \u2192 Meals(x))",
            "\u2200x (Meals(x) \u2192 HappyCommunicate(x))",
            "\u2200x (Meals(x) \u2192 InvitedTakePhoto(x))",
            "\u00ac(InPerson(james) \u2227 Souvenirs(james))"
        ],
        "question": "James is provided with souvenirs.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1259,
        "story_id": 437,
        "context": [
            "Either present their work at the conference or provide a tutorial session at the conference. ",
            "All who present their work at the conference will attend in person. ",
            "All those providing a tutorial session at the conference are invited to join the club. ",
            "All who attend the conference in person are provided with souvenirs. ",
            "All invited to join the club are provided with delicious meals. ",
            "All provided with delicious meals are happy to communicate with each other during the dinner. ",
            "All provided with delicious meals are invited to take a photo with the audience. ",
            "James does not attend the conference in person and is not provided with souvenirs."
        ],
        "context_fol": [
            "\u2200x ( Present(x) \u2228 Tutorial(x))",
            "\u2200x (Present(x) \u2192 InPerson(x))",
            "\u2200x (Tutorial(x) \u2192 Invited(x))",
            "\u2200x (InPerson(x) \u2192 Souvenirs(x))",
            "\u2200x (Invited(x) \u2192 Meals(x))",
            "\u2200x (Meals(x) \u2192 HappyCommunicate(x))",
            "\u2200x (Meals(x) \u2192 InvitedTakePhoto(x))",
            "\u00ac(InPerson(james) \u2227 Souvenirs(james))"
        ],
        "question": "James is not provided with souvenirs.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1260,
        "story_id": 437,
        "context": [
            "Either present their work at the conference or provide a tutorial session at the conference. ",
            "All who present their work at the conference will attend in person. ",
            "All those providing a tutorial session at the conference are invited to join the club. ",
            "All who attend the conference in person are provided with souvenirs. ",
            "All invited to join the club are provided with delicious meals. ",
            "All provided with delicious meals are happy to communicate with each other during the dinner. ",
            "All provided with delicious meals are invited to take a photo with the audience. ",
            "James does not attend the conference in person and is not provided with souvenirs."
        ],
        "context_fol": [
            "\u2200x ( Present(x) \u2228 Tutorial(x))",
            "\u2200x (Present(x) \u2192 InPerson(x))",
            "\u2200x (Tutorial(x) \u2192 Invited(x))",
            "\u2200x (InPerson(x) \u2192 Souvenirs(x))",
            "\u2200x (Invited(x) \u2192 Meals(x))",
            "\u2200x (Meals(x) \u2192 HappyCommunicate(x))",
            "\u2200x (Meals(x) \u2192 InvitedTakePhoto(x))",
            "\u00ac(InPerson(james) \u2227 Souvenirs(james))"
        ],
        "question": "James is invited to take a photo with the audience and is happy to communicate with each other at the dinner.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1261,
        "story_id": 437,
        "context": [
            "Either present their work at the conference or provide a tutorial session at the conference. ",
            "All who present their work at the conference will attend in person. ",
            "All those providing a tutorial session at the conference are invited to join the club. ",
            "All who attend the conference in person are provided with souvenirs. ",
            "All invited to join the club are provided with delicious meals. ",
            "All provided with delicious meals are happy to communicate with each other during the dinner. ",
            "All provided with delicious meals are invited to take a photo with the audience. ",
            "James does not attend the conference in person and is not provided with souvenirs."
        ],
        "context_fol": [
            "\u2200x ( Present(x) \u2228 Tutorial(x))",
            "\u2200x (Present(x) \u2192 InPerson(x))",
            "\u2200x (Tutorial(x) \u2192 Invited(x))",
            "\u2200x (InPerson(x) \u2192 Souvenirs(x))",
            "\u2200x (Invited(x) \u2192 Meals(x))",
            "\u2200x (Meals(x) \u2192 HappyCommunicate(x))",
            "\u2200x (Meals(x) \u2192 InvitedTakePhoto(x))",
            "\u00ac(InPerson(james) \u2227 Souvenirs(james))"
        ],
        "question": "James is invited to take a photo with the audience or is happy to communicate with each other during the dinner.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1262,
        "story_id": 437,
        "context": [
            "Either present their work at the conference or provide a tutorial session at the conference. ",
            "All who present their work at the conference will attend in person. ",
            "All those providing a tutorial session at the conference are invited to join the club. ",
            "All who attend the conference in person are provided with souvenirs. ",
            "All invited to join the club are provided with delicious meals. ",
            "All provided with delicious meals are happy to communicate with each other during the dinner. ",
            "All provided with delicious meals are invited to take a photo with the audience. ",
            "James does not attend the conference in person and is not provided with souvenirs."
        ],
        "context_fol": [
            "\u2200x ( Present(x) \u2228 Tutorial(x))",
            "\u2200x (Present(x) \u2192 InPerson(x))",
            "\u2200x (Tutorial(x) \u2192 Invited(x))",
            "\u2200x (InPerson(x) \u2192 Souvenirs(x))",
            "\u2200x (Invited(x) \u2192 Meals(x))",
            "\u2200x (Meals(x) \u2192 HappyCommunicate(x))",
            "\u2200x (Meals(x) \u2192 InvitedTakePhoto(x))",
            "\u00ac(InPerson(james) \u2227 Souvenirs(james))"
        ],
        "question": "James is either invited to take a photo with the audience or happy to communicate with each other during the dinner.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 38,
        "story_id": 14,
        "context": [
            "The USS Salem is a heavy cruiser built for the United States navy.",
            "The last heavy cruiser to enter service was the USS Salem.",
            "The USS Salem is a museum ship.",
            "Museum ships are open to the public.",
            "The USS Salem served in the Atlantic and Mediterranean."
        ],
        "context_fol": [
            "HeavyCruiser(usssalem) \u2227 BuiltFor(usssalem, unitedstatesnavy)",
            "LastHeavyCruiserToEnterService(usssalem)",
            "MuseumShip(usssalem)",
            "\u2200x (MuseumShip(x) \u2192 OpenToPublic(x))",
            "ServedIn(usssalem, atlantic) \u2227 ServedIn(usssalem, mediterranean)"
        ],
        "question": "The USS Salem is open to the public.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 39,
        "story_id": 14,
        "context": [
            "The USS Salem is a heavy cruiser built for the United States navy.",
            "The last heavy cruiser to enter service was the USS Salem.",
            "The USS Salem is a museum ship.",
            "Museum ships are open to the public.",
            "The USS Salem served in the Atlantic and Mediterranean."
        ],
        "context_fol": [
            "HeavyCruiser(usssalem) \u2227 BuiltFor(usssalem, unitedstatesnavy)",
            "LastHeavyCruiserToEnterService(usssalem)",
            "MuseumShip(usssalem)",
            "\u2200x (MuseumShip(x) \u2192 OpenToPublic(x))",
            "ServedIn(usssalem, atlantic) \u2227 ServedIn(usssalem, mediterranean)"
        ],
        "question": "There is a museum ship open to the public that served in the Mediterranean.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 40,
        "story_id": 14,
        "context": [
            "The USS Salem is a heavy cruiser built for the United States navy.",
            "The last heavy cruiser to enter service was the USS Salem.",
            "The USS Salem is a museum ship.",
            "Museum ships are open to the public.",
            "The USS Salem served in the Atlantic and Mediterranean."
        ],
        "context_fol": [
            "HeavyCruiser(usssalem) \u2227 BuiltFor(usssalem, unitedstatesnavy)",
            "LastHeavyCruiserToEnterService(usssalem)",
            "MuseumShip(usssalem)",
            "\u2200x (MuseumShip(x) \u2192 OpenToPublic(x))",
            "ServedIn(usssalem, atlantic) \u2227 ServedIn(usssalem, mediterranean)"
        ],
        "question": "The USS Salem was not the last heavy cruiser to enter service.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 415,
        "story_id": 141,
        "context": [
            "TS Leda was a good passenger and cargo vessel.",
            "TS Leda was the first Norweigian vessel that was built with stabilizers.",
            "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.",
            " To be a good passenger and cargo vessel, ships must be quiet and good at sea.",
            "Some ships that are quiet and good at sea have powerful steam turbine engines."
        ],
        "context_fol": [
            "\u2200x (TSLeda(x) \u2192 Passenger(x) \u2227 CargoVessel(x))",
            "\u2200x (TSLeda(x) \u2192 Norweigian(x) \u2227 Stabilizers(x))",
            "\u2200x (Stabilizers(x) \u2192 OnlyOnShips(x) \u2227 SteamTurbine(x))",
            "\u2200x (Passenger(x) \u2227 CargoVessel(x) \u2192 Quiet(x) \u2227 GoodSea(x))",
            "\u2203x (Quiet(x) \u2227 GoodSea(x) \u2227 SteamTurbine(x))"
        ],
        "question": "TS Leda was quiet and good at sea.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 416,
        "story_id": 141,
        "context": [
            "TS Leda was a good passenger and cargo vessel.",
            "TS Leda was the first Norweigian vessel that was built with stabilizers.",
            "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.",
            " To be a good passenger and cargo vessel, ships must be quiet and good at sea.",
            "Some ships that are quiet and good at sea have powerful steam turbine engines."
        ],
        "context_fol": [
            "\u2200x (TSLeda(x) \u2192 Passenger(x) \u2227 CargoVessel(x))",
            "\u2200x (TSLeda(x) \u2192 Norweigian(x) \u2227 Stabilizers(x))",
            "\u2200x (Stabilizers(x) \u2192 OnlyOnShips(x) \u2227 SteamTurbine(x))",
            "\u2200x (Passenger(x) \u2227 CargoVessel(x) \u2192 Quiet(x) \u2227 GoodSea(x))",
            "\u2203x (Quiet(x) \u2227 GoodSea(x) \u2227 SteamTurbine(x))"
        ],
        "question": "TS Leda had powerful steam turbine engines.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 417,
        "story_id": 141,
        "context": [
            "TS Leda was a good passenger and cargo vessel.",
            "TS Leda was the first Norweigian vessel that was built with stabilizers.",
            "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.",
            " To be a good passenger and cargo vessel, ships must be quiet and good at sea.",
            "Some ships that are quiet and good at sea have powerful steam turbine engines."
        ],
        "context_fol": [
            "\u2200x (TSLeda(x) \u2192 Passenger(x) \u2227 CargoVessel(x))",
            "\u2200x (TSLeda(x) \u2192 Norweigian(x) \u2227 Stabilizers(x))",
            "\u2200x (Stabilizers(x) \u2192 OnlyOnShips(x) \u2227 SteamTurbine(x))",
            "\u2200x (Passenger(x) \u2227 CargoVessel(x) \u2192 Quiet(x) \u2227 GoodSea(x))",
            "\u2203x (Quiet(x) \u2227 GoodSea(x) \u2227 SteamTurbine(x))"
        ],
        "question": "TS Leda was not a Norweigian vessel.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 555,
        "story_id": 194,
        "context": [
            "Rosa was born in Santiago. ",
            "Santiago is the capital and largest city of Chile.",
            "Rosa is the daughter of a Catalan building contractor, Jose.",
            "Jose has a Chilean wife, Carmen.",
            "A building contractor is responsible for the day-to-day oversight of a construction site. "
        ],
        "context_fol": [
            "Born(rosa, santiago)",
            "Capital(santiago, chile) \u2227 LargestCity(santiago, chile)",
            "Daughter(rosa, jose) \u2227 BuildingContractor(jose) \u2227 \u00acChilean(jose)",
            "Wife(jose, carmen) \u2227 Chilean(carmen)",
            "\u2200x \u2203y (BuildingContractor(x) \u2227 ConstructionSite(y) \u2192 Oversee(x, y))"
        ],
        "question": "Rosa was born in the largest city of Chile.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 556,
        "story_id": 194,
        "context": [
            "Rosa was born in Santiago. ",
            "Santiago is the capital and largest city of Chile.",
            "Rosa is the daughter of a Catalan building contractor, Jose.",
            "Jose has a Chilean wife, Carmen.",
            "A building contractor is responsible for the day-to-day oversight of a construction site. "
        ],
        "context_fol": [
            "Born(rosa, santiago)",
            "Capital(santiago, chile) \u2227 LargestCity(santiago, chile)",
            "Daughter(rosa, jose) \u2227 BuildingContractor(jose) \u2227 \u00acChilean(jose)",
            "Wife(jose, carmen) \u2227 Chilean(carmen)",
            "\u2200x \u2203y (BuildingContractor(x) \u2227 ConstructionSite(y) \u2192 Oversee(x, y))"
        ],
        "question": "Neither of Rosa's parents is Chilean.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 557,
        "story_id": 194,
        "context": [
            "Rosa was born in Santiago. ",
            "Santiago is the capital and largest city of Chile.",
            "Rosa is the daughter of a Catalan building contractor, Jose.",
            "Jose has a Chilean wife, Carmen.",
            "A building contractor is responsible for the day-to-day oversight of a construction site. "
        ],
        "context_fol": [
            "Born(rosa, santiago)",
            "Capital(santiago, chile) \u2227 LargestCity(santiago, chile)",
            "Daughter(rosa, jose) \u2227 BuildingContractor(jose) \u2227 \u00acChilean(jose)",
            "Wife(jose, carmen) \u2227 Chilean(carmen)",
            "\u2200x \u2203y (BuildingContractor(x) \u2227 ConstructionSite(y) \u2192 Oversee(x, y))"
        ],
        "question": "Rosa is the daughter of someone who is responsible for the oversight of traffic.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 105,
        "story_id": 36,
        "context": [
            "Tyga is a rapper.",
            "Rappers release rap albums.",
            "Tyga released the Well Done 3 album.",
            "Rappers are not opera singers."
        ],
        "context_fol": [
            "IsRapper(tyga)",
            "ReleasedAlbum(tyga, wellDone3)",
            "\u2200x \u2200y (IsRapper(x) \u2227 ReleasedAlbum(x, y) \u2192 IsRapAlbum(y))",
            "\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))"
        ],
        "question": "Well Done 3 is a rap album.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 106,
        "story_id": 36,
        "context": [
            "Tyga is a rapper.",
            "Rappers release rap albums.",
            "Tyga released the Well Done 3 album.",
            "Rappers are not opera singers."
        ],
        "context_fol": [
            "IsRapper(tyga)",
            "ReleasedAlbum(tyga, wellDone3)",
            "\u2200x \u2200y (IsRapper(x) \u2227 ReleasedAlbum(x, y) \u2192 IsRapAlbum(y))",
            "\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))"
        ],
        "question": "Tyga is an opera singer.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 107,
        "story_id": 36,
        "context": [
            "Tyga is a rapper.",
            "Rappers release rap albums.",
            "Tyga released the Well Done 3 album.",
            "Rappers are not opera singers."
        ],
        "context_fol": [
            "IsRapper(tyga)",
            "ReleasedAlbum(tyga, wellDone3)",
            "\u2200x \u2200y (IsRapper(x) \u2227 ReleasedAlbum(x, y) \u2192 IsRapAlbum(y))",
            "\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))"
        ],
        "question": "Well Done 3 is worth listening.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 293,
        "story_id": 97,
        "context": [
            "Deborah Wallace is a Scottish born actress, playwright and producer.",
            "Psyche is a play based on the life of James Miranda Barry.",
            "Homesick, Psyche and The Void are plays from Deborah Wallace.",
            "Deborah Wallace co-produced Gasland."
        ],
        "context_fol": [
            "BornIn(deborahwallace, scotland) \u2227 Actress(deborahwallace) \u2227 Playwright(deborahwallace) \u2227 Producer(deborahwallace)",
            "Play(psyche) \u2227 BasedOn(psyche, lifeofjamesmirandabarry)",
            "Play(homesick) \u2227 From(homesick, deborahwallace) \u2227 Play(psyche) \u2227 From(psyche, deborahwallace) \u2227 Play(thevoid) \u2227 From(thevoid, deborahwallace)",
            "Co-Produced(deborahwallace, gasland)"
        ],
        "question": "Gasland was coproduced by the same person Homesick is from.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 294,
        "story_id": 97,
        "context": [
            "Deborah Wallace is a Scottish born actress, playwright and producer.",
            "Psyche is a play based on the life of James Miranda Barry.",
            "Homesick, Psyche and The Void are plays from Deborah Wallace.",
            "Deborah Wallace co-produced Gasland."
        ],
        "context_fol": [
            "BornIn(deborahwallace, scotland) \u2227 Actress(deborahwallace) \u2227 Playwright(deborahwallace) \u2227 Producer(deborahwallace)",
            "Play(psyche) \u2227 BasedOn(psyche, lifeofjamesmirandabarry)",
            "Play(homesick) \u2227 From(homesick, deborahwallace) \u2227 Play(psyche) \u2227 From(psyche, deborahwallace) \u2227 Play(thevoid) \u2227 From(thevoid, deborahwallace)",
            "Co-Produced(deborahwallace, gasland)"
        ],
        "question": "There isn't a play from Deborah Wallace that is based on the life of James Miranda Barry.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 295,
        "story_id": 97,
        "context": [
            "Deborah Wallace is a Scottish born actress, playwright and producer.",
            "Psyche is a play based on the life of James Miranda Barry.",
            "Homesick, Psyche and The Void are plays from Deborah Wallace.",
            "Deborah Wallace co-produced Gasland."
        ],
        "context_fol": [
            "BornIn(deborahwallace, scotland) \u2227 Actress(deborahwallace) \u2227 Playwright(deborahwallace) \u2227 Producer(deborahwallace)",
            "Play(psyche) \u2227 BasedOn(psyche, lifeofjamesmirandabarry)",
            "Play(homesick) \u2227 From(homesick, deborahwallace) \u2227 Play(psyche) \u2227 From(psyche, deborahwallace) \u2227 Play(thevoid) \u2227 From(thevoid, deborahwallace)",
            "Co-Produced(deborahwallace, gasland)"
        ],
        "question": "Gasland is a play.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1297,
        "story_id": 449,
        "context": [
            "If an animal needs a large territory, then it travels far.",
            "Everything that eats a lot needs a large territory.",
            "If something is a big animal, then it will eat a lot.",
            "All bears are big animals.",
            "Larry is a big animal."
        ],
        "context_fol": [
            "\u2200x (NeedsLargeTerritory(x) \u2192 TravelFar(x))",
            "\u2200x (EatsALot(x) \u2192 NeedsLargeTerritory(x))",
            "\u2200x (BigAnimal(x) \u2192 EatsALot(x))",
            "\u2200x (Bear(x) \u2192 BigAnimal(x))",
            "BigAnimal(larry)"
        ],
        "question": "Larry is a bear.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1298,
        "story_id": 449,
        "context": [
            "If an animal needs a large territory, then it travels far.",
            "Everything that eats a lot needs a large territory.",
            "If something is a big animal, then it will eat a lot.",
            "All bears are big animals.",
            "Larry is a big animal."
        ],
        "context_fol": [
            "\u2200x (NeedsLargeTerritory(x) \u2192 TravelFar(x))",
            "\u2200x (EatsALot(x) \u2192 NeedsLargeTerritory(x))",
            "\u2200x (BigAnimal(x) \u2192 EatsALot(x))",
            "\u2200x (Bear(x) \u2192 BigAnimal(x))",
            "BigAnimal(larry)"
        ],
        "question": "Larry is neither a bear nor travels far.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1299,
        "story_id": 449,
        "context": [
            "If an animal needs a large territory, then it travels far.",
            "Everything that eats a lot needs a large territory.",
            "If something is a big animal, then it will eat a lot.",
            "All bears are big animals.",
            "Larry is a big animal."
        ],
        "context_fol": [
            "\u2200x (NeedsLargeTerritory(x) \u2192 TravelFar(x))",
            "\u2200x (EatsALot(x) \u2192 NeedsLargeTerritory(x))",
            "\u2200x (BigAnimal(x) \u2192 EatsALot(x))",
            "\u2200x (Bear(x) \u2192 BigAnimal(x))",
            "BigAnimal(larry)"
        ],
        "question": "If Larry either travels far or needs a large territory, then Larry is a bear.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 1335,
        "story_id": 461,
        "context": [
            "No criminal is kind. ",
            "All person who breaks the law is a criminals.",
            "People are either kind or evil.",
            "If someone is evil, then they are ugly.",
            "If someone is evil, then they are cold-blood.",
            "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
        ],
        "context_fol": [
            "\u2200x (Criminal(x) \u2192 \u00acKind(x))",
            "\u2200x (BreakLaw(x) \u2192 Criminal(x))",
            "\u2200x (Kind(x) \u2295 Evil(x))",
            "\u2200x (Evil(x) \u2192 Ugly(x))",
            "\u2200x (Evil(x) \u2192 ColdBlood(x))",
            "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)"
        ],
        "question": "Garry is ugly.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "C"
    },
    {
        "id": 1336,
        "story_id": 461,
        "context": [
            "No criminal is kind. ",
            "All person who breaks the law is a criminals.",
            "People are either kind or evil.",
            "If someone is evil, then they are ugly.",
            "If someone is evil, then they are cold-blood.",
            "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
        ],
        "context_fol": [
            "\u2200x (Criminal(x) \u2192 \u00acKind(x))",
            "\u2200x (BreakLaw(x) \u2192 Criminal(x))",
            "\u2200x (Kind(x) \u2295 Evil(x))",
            "\u2200x (Evil(x) \u2192 Ugly(x))",
            "\u2200x (Evil(x) \u2192 ColdBlood(x))",
            "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)"
        ],
        "question": "Garry is cold-blooded and breaks the law.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 1337,
        "story_id": 461,
        "context": [
            "No criminal is kind. ",
            "All person who breaks the law is a criminals.",
            "People are either kind or evil.",
            "If someone is evil, then they are ugly.",
            "If someone is evil, then they are cold-blood.",
            "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."
        ],
        "context_fol": [
            "\u2200x (Criminal(x) \u2192 \u00acKind(x))",
            "\u2200x (BreakLaw(x) \u2192 Criminal(x))",
            "\u2200x (Kind(x) \u2295 Evil(x))",
            "\u2200x (Evil(x) \u2192 Ugly(x))",
            "\u2200x (Evil(x) \u2192 ColdBlood(x))",
            "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)"
        ],
        "question": "If Garry is evil or breaks the law, then Garry is not both a criminal and breaking the law.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "A"
    },
    {
        "id": 402,
        "story_id": 136,
        "context": [
            "Phoneix's music is classified under the indie pop genre.",
            "Phoenix is a band from France.",
            "French bands write songs in French or in English.",
            "Aside from indie pop, pop rock and synth-pop are two other genres of music.",
            "Phoneix has no songs in French."
        ],
        "context_fol": [
            "IndiePop(phoenix)",
            "Band(phoenix) \u2227 France(phoenix)",
            "\u2200x \u2200y (Band(x) \u2227 France(x) \u2227 Make(x, y) \u2192 FrenchSong(y) \u2295 EnglishSong(y))",
            "\u2200x (IndiePop(x) \u2192 \u00acPopRock(x) \u2227 \u00acSynthPop(x))",
            "\u2200x (Make(phoenix, x) \u2192 \u00acFrenchSong(x))"
        ],
        "question": "Phoenix makes pop rock music.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    },
    {
        "id": 403,
        "story_id": 136,
        "context": [
            "Phoneix's music is classified under the indie pop genre.",
            "Phoenix is a band from France.",
            "French bands write songs in French or in English.",
            "Aside from indie pop, pop rock and synth-pop are two other genres of music.",
            "Phoneix has no songs in French."
        ],
        "context_fol": [
            "IndiePop(phoenix)",
            "Band(phoenix) \u2227 France(phoenix)",
            "\u2200x \u2200y (Band(x) \u2227 France(x) \u2227 Make(x, y) \u2192 FrenchSong(y) \u2295 EnglishSong(y))",
            "\u2200x (IndiePop(x) \u2192 \u00acPopRock(x) \u2227 \u00acSynthPop(x))",
            "\u2200x (Make(phoenix, x) \u2192 \u00acFrenchSong(x))"
        ],
        "question": "Phoenix has songs in French.",
        "options": [
            "A) True",
            "B) False",
            "C) Uncertain"
        ],
        "answer": "B"
    }
]